问题,问题描述,作者,回答
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],牛岱,"  IT界有个万人皆知的行业准则：不要重复造轮子。  它的意思是，你可以自己造的玩，但是如果人家已经有足够好的轮子，你就不要试图，甚至是通过各种手段，试图去取代这个轮子的地位。  同理，如果某个学科已经有足够好的教材，您没那水平编出更好的教材，就乖乖地用人家的教材就好了，这样既节省资源，同时也能保证中国学生看到的教材内的思想和国外学生是同步的。  中国大学有个毛病，就是什么东西也想搞个自己的出来。  就比如线性代数教材，如此重要的学科，用脚趾头也能想见，优秀的国外教材已经遍地走了，但是各个大学仍然要请自己学校的某几个水平堪忧，语言表达能力菜得扣脚的老师来编写一个教材，最后命其名曰“精品教材”，而这些垃圾教材坑害的是一批一批的优秀学生，当然如果能被一直坑下去的，自主学习能力也是有点问题...   可是世界上大多数学生就是这样，他们会乖乖地去上课，听老师念PPT，然后认真看学校推荐用的课本，然后当这些垃圾教材搞得他们一头雾水的时候，他们会用“这门课难”来安慰自己，最后学的不明不白，草草了事。  我刚来的时候，上学期的线性代数，学校用的教材就是所谓学校老师自己编的“精品教材”，这个教材是面向非数学专业学生的，我就看了三页就已经搞不明白它在说什么了，可以想象，这样的教材迫害了多少学生，耗费了多少学生的时间。  而且可以想象，编这本教材的老师们从中肯定可以得到补贴，能不能得到版税不清楚，但是补贴是肯定有的，而且同时这本教材的编写也能成为所谓的资金申请的理由，“为中国科学技术大学量身定制的教材”这句话多么好听啊，可事实上呢？  由于答主英文水平过关，当时直接去图书馆借了一本英文的线性代数教材，面向数学专业的，从第一页开始看下去，便已停不下来，连住一看就是二三十页，看完感觉畅酣淋漓，舒畅至极，从那以后，线性代数课我再也没去过，除了最后的考试我出席了。  那次期末题不简单，我考了95分。  线性代数资源推荐，详情参见本人文章：  我自己知道，我并不聪明，若是我不看那本英文教材，我恐怕能考70分不错了。  这就是事实，还有很多例子，比如贵校编的的《电磁学》和的《电动力学》在易懂性和深刻性上的巨大差异，前者啥也看不懂，后者看的畅酣淋漓。  《大学物理》与的惊人对比，前者看的想要睡觉，后者看的我想要拍桌，甚至感动地流泪，甚至看完兴奋地睡不着觉。  附费恩曼讲义的链接：   纸质教材？？买教材？？学校让你买教材？？没有学生买教材，那这些教材不就无法带来收入了？教材是用来教育的？No No No, 教材是用来挣钱的，相信我。  马克思主义原理你们都上过吧？这个教材是不是必须买？它为什么不做成pdf版，在网上开源呢？每年这本教材能卖一千万册吧？没这些钱谁来养那些教材编写委员会呢？  的乐理书，可能在你们眼里还算不错，但是我看完之后还是搞不明白它说的这一切是怎么运用在作曲中的，后来我有了VPN，在油管上打开了新世界，在众多即兴，乐理的视频教程中，我现在可以在任何一首歌里面即兴演奏，写歌也是手到擒来。  音乐学习的最好方法不是看书，而是看视频，因为视频是声音和图像的结合体，比如我现在讲Lydian音阶，它的音阶结构是 1 2 3 #4 5 6 7，只讲这个其实你并没有真正懂它的音响效果，这个频道从图像，PPT，演奏示例，记忆法等如手，教你如何记忆指板位置，如何进行特定和声进行下的solo即兴和创作。  详情参见本人文章：  这个世界上不存在真正无法理解的知识，只存在不会表达的糟糕教学者，大家都是人，为什么你能懂的东西我就懂不了呢？就算我笨一些，能在你脑子里运行的东西也能在我的脑子里运行，只不过可能速度慢一些。  教材的目的是什么？教材的目的是让学生尽可能地不依靠任何外界帮助，仅仅依靠你的教材就能学会你想表达的知识。  可以说，我国在此方面做的奇差无比。  国内这些教材其实牵动了很多人的利益，比如学校的利益，编写者的利益等等，中国的大学可能觉得教材都用西方的，是文化不强盛的表现，总想自己搞一个，这正是不自信的表现。  你要是能编出比国外优秀教材更优秀的，那完全可以啊！  问题是你能吗？  当然还有一点就是，国内的教材更新速度捉急，很多新东西早就出来了，教材上还写着那些旧东西，考试还是按照这个教材考...  我一直觉得中国学生整体上是比较聪明的，如果我们能像美国学生那样直接接触到整个世界的优质教学信息，那我们的未来不敢想象。  不过一个学生如果自己不会去寻求改变，看的破教材还不知道换更好的，上不了Google还不舍得花钱买，那这样的学生可能也干不成什么...  国外的大部分经典教材，我是说经典教材哦，不是所有！！经典教材是国外教材的一个很小的子集！ 差不多都有免费的pdf版本，直接下载就好，这对于那些没有机会接受高等教育，又买不起好教材的人是很友好的，而且不仅如此，教材配套的习题集，答案等往往也可以直接下载，反观国内的教材，一方面习题没答案，然后老师告诉你们习题最怕有答案，但与此同时老师也没有能力建立起一个足够高效的机制能马上让学生知道他们的结果是否正确，就相当于，不能给你肉吃，还要叫你多吃素，吃肉会长胖。  的《Algorithms 4》是业内广受好评的教材，虽然叫算法，事实上数据结构和算法的内容都有，网址：  在页面的左边，可以直接这样寻找自己想要的内容，发挥了的优势，节省了搜索目录的时间。  在归并算法的讲解中，可以直接点击Merge.java跳转至实现该的代码：  这就是我为什么不喜欢看纸质书，因为太麻烦了...翻来翻去的，真的累。  这本书有一个标准库，有绘图，排序等等，你可以直接在左下方搜索标准库里的某个API，看到该API的官方文档。  测试用例，作业，PPT等等，都直接点击就好。  我试问国内的哪个计算机教材这样做了？你恐怕是下载个pdf版都得在什么微盘，百度云，或是里面下载吧？  来，你告诉我，的的开源网站在哪？让我瞻仰一下？没有？  哦。  我觉得国内教材编写者最大的问题就是：动机不纯。  对于音乐行业来讲，如果教材编的太好，学生就不想找老师了...那这些音乐水平高不成低不就的人，饭碗谁给保证呢？  这个逻辑其实挺简单的，就是：你说想要看懂这个教材必须找个好老师给你讲，那你这个所谓的好老师为啥不把他讲的写成教材呢？这样大家不是就都看懂了？哪来那么多麻烦事？  事实上一个人编写的教材应该是比这个讲课要更好懂的，因为一个人写出来的东西往往是经过了细致思考的结果，而凭空就说的东西往往会出问题，那如果一个人教材写的奇烂无比，他的课我也建议你别去了，误人子弟。  所以啊，现在掌握大学权力的人，都是高考刚恢复不就参加高考的那批人，他们眼中的世界和我们年轻人眼中的不太一样，再过二十年，等我们成为了掌权者，也许这一切会变好。  学校怎么做是学校的事，你怎么做，还是看你自己。  谢谢。  看了大家的回复和评论，我挺开心的，这个答案火也是意料之中，但是能获得这么多人的认同，我深表荣幸，有人说英语差看不了英文教材的，我想说，英语的学习其实是自然而然地事情，不要在学中做，而要在用中学，忘掉中文，去完全投入英文的环境中，很快你就会适应这一切。事实上，如果你说你英文教材有些单词不认识，那我想反问你，难道这个东西翻译成中文你就一定认识了？比如线性代数的秩（Rank），你不知道秩是什么意思对吧？但你反而大概知道Rank的意思。  还有人说，我们不能这样直接用别人的，要做出自己的，这个想法其实要真往大了说，我觉得挺肤浅的，别人造个加速器，我们要造个更大的，别人造个桥，我们也要造个更长的，快歇歇吧，干好自己的本职工作就很好了。  世界上只有两种东西有真正的价值，一种是创世人所未见，一种是对已见之事的推进与优化，做一个比现有的还烂的东西，本身是没价值的，只能当作练习使用，这句话的逻辑已经很明晰了，再反驳我是不会回复的。  不要过分相信教材的权威性，也不要把老师和教授当神看，大家都是普通人，老师让你做的，也许并不是你想要的，我们生在互联网时代，已经给了我们擦亮眼睛，检验真理的能力了，我们也没必要迷信任何权威。  这世界上谎言很多，要把眼睛擦亮，做个明白人。  第二次修改答案，给大家看看如何击退杠精：  用一种调侃的语气顺着杠精说，他们就噎着说不出话了~  杠精快来~我不怕~"
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],孫志貴,这个答案请勿转载。我打个比方，大家看完我讲的之后（哪怕看似与计算机无关）、估计就能想明白怎回事了。国内的音乐理论逻辑体系基本上就是在「＋斯波索宾」这两套教材构筑的。可能也有其它的音乐理论教材，但基本上都围绕这一套展开。特别是斯波索宾，从苏联体系而来。知乎有很多对这些教材的短版的讨论，我就不赘述了。我本科是在加拿大读的（Digital Audio Arts 专业，学位是 Bachelor of Music），现已毕业了。在本科阶段，拯救了我调性和声理论学习的，是岛冈让的《総合和声：実技・分析・原理》。（完全模组化设计，自学者可以自己安排学习节奏、且书中的三大部分彼此互补。）我惊讶於世间居然有对自学者如此友好的音乐理论教材，忽然想起我首次出国之前看李重光乐理半天看不懂的样子，似乎明白了些什么。之后一段时间内，我在知乎推荐岛冈让的《総合和声：実技・分析・原理》这套教材，也有想著有朝一日等自己日语精进到一定地步了、就考虑翻译这本教材。但我现在多了几份恐惧。我在回答某些乐理问题时，很多人说我自造术语、甚至有人专门以此攻击我。我专门买来的教材的简体中文译本（现在被我扔在加拿大了），才发现：岛冈让的教材当中的术语逻辑体系，与国内现行这套苏修型音乐理论术语逻辑体系，有明显差异。我忽然意识到：国内这些对自学者不友好的教材所以能被推荐为圭臬，也是和某一群人的利益有关：国内这么多音乐老师（无论是院校老师、还是面向大学外招各种年龄段的钢琴学生的老师），当中肯定是有一定比例的人受益于下面这个现状：「国内能买到的中文教材，大多都需要老师点拨讲解、才能让你看懂。」我也有好几次见到与斯波索宾的和声教材有关的评论说「必须得找个好老师给你讲」。万一有人要是将岛冈让这本书（或者同种类型的优秀教材）翻译成中文引入国内，岂不是要砸了那群人的饭碗？毕竟，优秀的音乐教育资源，在中国，非常希缺。剩下的那群人，要用最少的成本保住自己的饭碗，最直接的方式，就是在这个圈子里面搞封闭。（看看 Arnold Schoenberg 的「Harmonielehre」的英文翻译，再看看简体中文译本，对比下后者少了什么，你必会有所发现。至少，我不认为「用目标语言写个 summary」就可以叫翻译了。）在中国，从来不缺业馀钢琴10级的人，但他们当中能够对乐曲的（包括曲式与和声在内的）能力的好坏，又是一个未知数。而且他们往往也是师出那些和他们一样的前辈之手：只知道怎么演奏好一个乐器，但对音乐的赏识能力仍旧是个问题。这些人当中，有些人可能热爱音乐，有些可能只是方便给他父母脸上贴几年的金。这些都是产业。破坏行业的事情，这业内会有谁乐意去做呢？会有谁乐见于这种事情成事呢？回到正题，大家能想明白为什么很多大学教编程必须 Visual Studio 6 和 C 语言了吧？（C 语言不是所有专攻方向都需要的；VS6 包括 VB6 和 VC++6。）哪怕咱们大陆的资讯电子类专业出身的人们自学能力再高强，也很难改变这群大学教师「决定教什么」。P.S.: 对于谭本人这本书怎样，请不要与我探讨。我只负责对那些三缺帐号们（专门新注册来的水军）批次封锁、清空其评论。可能你觉得容易学，但没准是你老师点拨得好、或者你之前的学习经历帮到你了。P.P.S.: 一线院校的学生们不要来我这里当杠精，没有意义。我这答案讨论的问题并不会影响到你们。你们能进一线院校的话，教材好坏根本不会对你们有多少影响，因为你们有全国最强的师资资源、使得你们自然不会去关心二三线教育圈的死活。# EOF
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],darkflames,之前的回答过于草率，周末有空会改一下如果换教材，怕是一并要换一批老师。我校某老师讲c语言，公开表示main的返回值应该是void，int是某些环境的特殊写法。然后上机的环境是devc，全体编译报错，课件上的代码都运行不起来，公开打脸。以及其他经典言论：我们现代计算机，内存绝对够怎么写都不会爆，怎么写都不会溢出。上世纪我们没有钱，买正版Windows系统要给Microsoft送多少钱啊，所以我们应该用盗版系统。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],匿名用户,谭老师虽然问题多多，但还不至于太匪夷所思。给你们分享一下我985 IT强校的教材，几十块一本的书里蕴藏着大量科技。重点我都画出来了，随便一个抛出来都是能稳拿的成果，分分钟吊打IEEE全体。不过实事求是，这本书总体没啥问题甚至比较优秀，上面那一段大概是某些不可抗力的体现，魔幻但真实。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],2gua,原来我读大学的时候就是学谭浩强版本的C语言，这么多年了还是这本啊？烂书一直用，能说明两个问题：1. 改变要靠自己，等别人去改变是不靠谱的事情，哪怕改变难度很大；2. 一本书籍可以养活一批人。教材、教案早已了然于胸，熟悉的内容滚瓜烂熟张口就来，哪里需要改变了？改变了还要我花时间去备课，去熟悉适应新内容，而且我自己也不一定学得会啊？那怎么去忽悠别人呢？
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],古轮木的拖拉机,大学里面有一群基础教研人员，有很多是早期留校的本科生。他们没有任何上进心，以985高校教师为荣（当然也没本事混副教授），抱着一套ppt混了20年。可能这些人连指针都不懂，然而，他们属于历史遗留问题，不解决也很捉急的。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],findyi,不可否认《C程序设计》这本书放在今天来看的确烂，比如这种低级语法错误（第四版）：*29个字符居然只给出了28个。 * 07页-程序4，ture 和 flase 各亮相一次。* “后辍”。 * rintf。以及以下这种错误结论：* “凡是二元运算符都可以与赋值符组合成”。。 * “先定义，后使用”。 * “C的实数常量都是双精度型”，接着在后面提到“添加f来强制指定类型”。并且《》还出版的非常非常多：的确，很多学子被这本书弄得看见C语言就瑟瑟发抖，失去了学编程的快感。学习 C语言推荐两本书：《》、《C和指针》。谭老的书真的一般，但是，但是回复区一堆攻击谭老的是什么鬼，，，，谭老堪称中国第一代计算机先驱，他那本《》中出现的dos就是明证。C语言是1972年问世的，彼时谭浩强已经38岁了，1989年C语言完成第一次标准化，谭浩强这个时候已经55岁了，1991年，谭老在57岁高龄写出《C程序设计》，彼时还真不算太落后。1999年，C99标准才出来，这时候已经65岁了，也很难有精力再去高速的迭代他那本书了。2000年之后，经典的C语言书籍层出不穷，甚至可以用百花齐放百家争鸣来形容了，老谭的书的确已经毫无竞争力了。但谭老并没有什么过错，这本书放在90年代，绝对是指路明灯般的存在，也是当年的计算机经典书籍，但时过境迁，计算机科学在发展、C语言也在高速发展，就好比一个过时的古董，自然没有任何实用价值。是那些偷懒的大学、那些偷懒的大学教授，不假思索的继续沿用一个上世纪90年代的教材，全然不顾计算机行业的飞速发展和经典计算机书籍的层出不穷，抱残守缺、因循守旧、冥顽不灵、顽固不化！是这些人坑了无数学生，让很多人看见C语言就瑟瑟发抖，甚至直接劝退了无数计算机学子。而谭老呢？他把他的一生奉献给了中国计算机科学的发展，更是在2019年，将近乎终身的积蓄全数捐给了清华：100多万。可能这100多万在诸位眼中算不得什么，在企业家动辄过亿的捐献中，更是少得可怜。可试问大家一句，我们何尝捐过几万，哪怕几千？有些人，他已经奉献了他的一生，却还要承担骂名，可悲可叹！顺便送大家一份硬核计算机资源，都是国外经典书籍为主！我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],霍华德,看了某些高校教师的回答。真心感觉以后有孩子千万不要在国内学这种垃圾教材 遇到垃圾老师 上垃圾课。18-22岁这段青春很宝贵，把人生浪费在垃圾教材上太可惜。相比CMU UIUC MIT的本科计算机课程，国内的真心垃圾
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],麻薬商人Honoka,"和大部分读者的观点不同，我倒没有感觉谭浩强这本《C程序设计》有多糟糕。当然，我下面要说的，是解释为何近年来大家对国内教材质量的声讨越发强烈的原因。我是08年在中南大学读的本科，专业当时是电子信息工程。我高中时期和大部分人一样，是没有接触过任何编程语言的。也没有受过任何系统化的计算机基础知识教育。在本科入学时对计算机一无所知（除了打游戏。。。）而我第一次接触程序设计这门课是在大一。大一那会儿还很认真，读什么书都会想着“刨根问底”。这点很重要，因为程序设计这门课的思维和高中时期接触的数学物理的“观察者思维”不同，它是彻头彻尾的“设计师思维”。前者要求你在一组给定的规则下推算一个系统的运动结果；而后者要求你在给定的前提条件和结果（需求）下设计系统。可以说，思维差异导致我学校程序设计这门课非常吃力。再加上当时中南大学自己也出了一本《C程序设计》的教材，而且强制要求所有人必须购买（学费内包含）。然而那本书。。。我们的程序设计课程老师说，就是一坨屎。他第一堂课就告诉我们：“如果你还想学这门语言，别用咋们学校的书，去读谭浩强的那本”。。于是我在老师的推荐下去买了这本谭浩强的C程序设计。先说明一个区分点。现在很多的学生一如大学就能带计算机进入宿舍，甚至可能在高中时就已经接触过程序设计的相关知识。但是我读本科的时候是2008年。中国社会以2008年为分界点，可以认为2008年之前是相对保守的，而之后逐渐加大了开放。所谓保守在哪呢？举个例子，我直到大学之前都没有上过网。因为当时，全国范围内对网络游戏和网瘾的管控没有完全消失。甚至我们到了中南大学后，学校有明确要求禁止学生大一大二带电脑进宿舍。当然也有人带的，当时很多人不带是因为那时候学生的经济水平并不高，大部分人的消费观念是电脑是高端消费品，不值得购买。因此在大学本科，在没有计算机的大一，我们怎么学习编程？你们肯定想象不到，当时我们一群喜欢写程序的小伙伴都是直接去大学的图书馆计算机室学习编程的。。。而且那个计算机室还TM不能存盘，这意味着所有的编程必须当场完成。如果无法完成呢？那么只能在去自习室的时候在草稿上面写代码！当时我们学校图书馆的计算机用的就是VC++6，到大三我自己实习攒钱买了第一台电脑的时候，也是装的这个VC，哦，那会儿还是2010年初，VS应该是和C#一块在之后逐渐被推广的。所以早期程序设计的学习环境和今天极为不同。因此你也不要奇怪为何那么多老前辈用的是vim, emacs一类的看起来有点反人类（其实你懂了命令操作后，比VC方便多了）。这也是为何稍微大一点的程序员用VS比较少，因为他们不存在VS这个作为过渡的IDE来训练自己的开放过程。说完编程学习的社会环境之后，我们再来说这本书。？首先，绝对可以肯定的是，我们那届学程序设计，并亲手写出过数据库系统和网络服务--客户端数据包传输程序作业的学生一定知道，它的书里面到处都是BUG。但是我们并没有因此产生反感。一个很重要的原因是，，大体上就是：（1）在书本上，我们只了解算法的基本原理或者程序运行的内在机制；（2）去计算机上实现程序，观察程序的“实际”运作机制以及算法的“真正”实现换句话说，。而且，由于谭浩强的书很多地方都写得非常模糊。例如解释内存和地址关系的地方，数值编码以及指针部分，虽然看上去有联系，但是却缺乏系统化的阐述。所以作为学习者，当时我们学习这种模糊的系统原理时都会直接去计算机上实践。例如直接打印一段内存地址下各个字节（char）的十六进制码，然后手算它和实际存储整数浮点数的关系。此外，内存地址的分配是由高到低还是由低到高，也可以通过打印数组，变量的字节信息来观察。换句话说，我们当时学习这本书的方式又和现在有点区别。为了弄清楚实际原理，我们其实把整个计算机程序的运作机制当作一个系统来研究了。因此当我们实践完成后，谭的这本书上，哪里有错误，哪里没有，哪些原理说的不准确，哪些有错误，就完全了解了。到了这里，我们才是真正把那本书看完。，诸如：数组变量能不能当作指针变量赋值（不能），这种东西都是经过实际在编译器上验证的，虽然它的书也没说清楚这两种类型的区别。但是反过来，也正是因为它的这些缺陷，和当时编程环境的糟糕，才迫使我们通过大量实践了解了这些问题的根本原理，自己探索到了问题的答案。这又和只通过书本了解的知识有着天壤之别。此外，关于谭的main函数返回类型是void。这一点也很有误导，但是为何当时我们没有抱怨呢？因为我们很自然接受了这点。。。直到后来大三学习《》的时候，才知道unix系统（包括linux）本身是通过各类整数返回值来判断一个程序是否正常退出。实际上，void main和int main之所以推荐后者，是因为它是一种良好的编程规范，它保证了某个调用你编写程序的外部程序可以获取你程序的内部状态值。而通过这种方法，我们也可以设计不同的程序返回值来告诉外部程序内部错误的类型。（就好像玩游戏一开始就告诉你秘籍，你可能就失去了探索它的乐趣了——）最后，来评价一下谭浩强的这本书吧。这本书首先，可以肯定的是，一定有巨大的缺陷。放在今天看来，完全是糟粕。其缺陷，其它回答已经说的很清楚了，不仅仅编程规范太复古，而且很多代码和原理讲的都不对。不过我在这要解释的是这么一个问题：为何如今的程序语言学习者会看不起谭的书，而过去的人却容易把它奉为“经典”。这就要了解现在的人学习编程的方式和我们的区别了。但是我也要大家警惕这种过于简单的实践学习原则。因为它太过直接，以至于让一个学习者容易缺乏问题和兴趣去学习某些东西，以至于他们虽然写了很多书本上的代码和习题，但是未必真的了解计算机的原理（例如大端法和小端法我们那时候的人在学习完C语言的时候就通过实践了解到了，然而大部分现在的学生还要去系统学习《深入理解计算机程序》这本书）那么我说了这么长一段解释，又是十多年前人的学习方法和今天大部分学习方法的比较，这种比较的意义是什么呢？其实在于提示各位：。当时没有多少界面友好的IDE，没有完善的计算机编程环境，因此对于那个时代来说，谭的书就成了“适合”那个时代学习方式的一种选择。当然，2008年前后，类似于这种外国引进的教材还不是很普遍，大部分人都会首先选择国内教材。。随着08年之后大陆开放程度大幅度增加，国外引进的书籍和教材呈现大幅度增加的趋势。有了更好的选择，客户自然抛弃了谭的书；此外，随着系统上IDE环境的越发进步，谭的书极其学习模式不再适应于更加高效率，能够培养更多码农的新时代。故而退出了它的舞台。但是我们应该正视这本书本身的存在。而且也应该意识到一个危险的现代情绪：当然也有人反驳，都8102年了，这么多年了，中国的教材为何不进行改革，向国外学习？这种反驳虽然有道理，但是忽略了另一个环境要素：那就是这种大学出版的书籍往往销量不受影响，完全可以通过让学生入学时强制购买的形式来回本。而且对谭浩强他老人家来说，都赚了几百本书的钱了，人家也没啥动力去更新。反过来，这种机制恰恰是因为老一辈学者依然占据高校教育顶层机构，而新人无法进入高层对其进行改革的无奈。。所以我也习惯了大学老师在第一节课说的那样：学校的指定教材你们别看，就去网上买这本XXX写的就好了，我们以它为模板。很多时候，。而因此，也会不可避免地，被我们的下一代人越来越扭曲地看待。所以总体来说，我认为谭的书已经不再适合这个时代，但是归根到底，它也不像大部分说的是一坨狗屎，毕竟相对于同期的所有其它国内编程教材来说，其质量已经算是十分不错的了。我们批判某种东西的时候，必须结合它的具体的历史背景和那个时代的具体学习方式来看待它。客观来讲，谭的书算不上是那么的不堪，它只是不再适合这个时代的读者了。------------------------------- 2018/11/11 ---------------------------更新一下：我注意到一些回答提及了其它方面的因素，在这里给各位列出来作为参考：（1）学习教材的用户很多都不是专业领域的学习者，因此对他们来说，没有必要学习K&R的C Programming Language。讲实话，我很同意这一观点。我本科的时候也是一个非计算机专业的学习者，一开始用的也是谭浩强的书，通过一段时间学习后我才开始对编程感兴趣，才有了后续进一步学习C++ primer等其它优秀教材的过程。。（2）某些大学老师提及他们自己其实很清楚C和C++的现代编程方法，然而问题是。我觉得这个观点很好地作证了我上面的结论。我在本科时读过很多书，有一个很基本的经验，那就是一旦一本书的厚度超过250--300页的时候，学习者就很难记忆之前的内容了。在学习一本书的过程中，学习者其实是有一个记忆曲线，这就和各位背GRE是一个德行（只要隔了一段时间不去重复背前几个List你很快就会遗忘之前的内容）。对于编程这种强调连贯性的学习来说，一个初学者一上来如果接触的就是C 或者c++ primer这种动辄400甚至600页的神作，他们根本就不会看得下去。这里，影响一个人能否保持长期阅读的关键在于不断重复。然而重复又是一个更困难的问题：如果一个人没有系统化学习程序语言的某个方面，那么他就很难去快速通过编程实践来重复强化此前学习的记忆的。这也是为何我从来没完全看完C++ primer的原因，因为它又臭又长，看到后面的时候，我都快不记得之前某个标准库的接口是怎么用的了。这其实就是为何对于入门某个领域的学习者，最佳的选择反而是某些国内教材。、有的人说K&R的书也适合入门。这是扯淡。K&R的书适合的是那些有一定编程语言基础的人但需要进一步强化去学习的人，它很强调语法和原理的部分，但是对于完全没接触过程序设计的初学者，这些人是根本无法理解什么叫做内存地址或者指针这种抽象的概念，他们看这种书和看天数没什么区别，基本上就是“词我都认识，就是不懂它在说什么”。为何我能有所体会？因为我当初学习C语言的时候，一开始就在图书馆借到了K&R教材，当时的感觉是完全不能理解这本书里面提及的“专业词汇”概念。即使那本书给出我一些解释，我依然很难去理解它们的“实际功效”。相反，在接触了谭浩强的书之后，我才通过一点点实践的方式开始去理解内存地址，指针，程序指令这些概念的实际意义，最后回到K&R的教材，才有了一种它是“神作”的感觉。注意，。这也是为何我觉得程序员去评价一本非专业入门书籍可能存在偏颇的原因。也因为如此，我只会给已经有一定编程经验的人购书建议。因为我们不能用我们“已有”的专业领域知识去套用其他人的感受，这会反而误导初学者。我还想补充一些其它看法。某位高票说现在国内教材都是垃圾，很会误导学习者。我认为这言过其实了。大学教育早已经不是中学时期那种填鸭教育，也没有所谓的强迫你不能学习其它教材的说法。任何一个有上进心的学习者都会主动寻找专业领域的教材和材料来强化自身的基础知识。而对于那些没什么上进心的人，他们不管看什么书，都不会有所成就。另外还有人提到，不学K&R的教材就会“输在起跑线”，那么我就是一个输在起跑线上的程序员，可是我每年面试和招入的应届毕业生有很多起跑线都比我高，可他们大部分都缺乏企业级项目的开放经验，而且因为在ACM上刷题过多，导致进来之后老喜欢写过度复杂的程序，且没有良好的变量命名习惯。我倒是觉得学习本身就是个漫长的过程，而且依赖于你自身见解的不断提升，你要是觉得输在起跑线就完蛋了，这种人也不可能指望他们的起跑线向前推了几百米就能够坚持跑到终点的。对于有志向学习的人来说，书籍，只要不是太烂到无法理解，都可以用来入门。此外，某个用户还批判谭老爷子出书是学术腐败，我觉得这种言论最好不要有。谭浩强的书相比于国内其他学者的书已经很良心了，批判他是学术腐败，除了博取舆论眼球，制造仇恨舆论外没有任何帮助。有的人学的不好，就怪书太烂，体现的不过是他们自身在学习上的怠惰和无能罢了。"
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],黑猫先森,作为一个三流985的学生表示深受其害，我们专业课的教材有很多是学校自己出版的，编写者是谁？没错就是你旁边的老师，编的好么，客观来说有些还不错，有些简直是垃圾中的战斗机，只是从别的教材中复制粘贴，排版混乱，错误连篇，坚涩难懂。经常有学霸拿着从图书馆借的书，告诉我xx版比某些shit要好多了。于是我看了下，嗯我们的教材是shit。那问题来了，为啥要坚持用这些垃圾祸害学生呢？首先，教材卖给我们是95折，亲，九五折，自己到图书馆领哟，良心价呢。专业课书经常一本三四十，打印店复印一本也就十来块的事，什么？你说我不尊重版权？你让那些被抄的经典版课本编者哭晕在厕所。而且编书，对于大学老师评职称等各种先进评优都是有好处的。而且考试内容都在教科书上，不买你学的多好都有可能挂，因为他考的可能是冷门知识点。不过在被坑了几次之后大家都学聪明了，都在买二手的，或者复印版。学校也发现这书卖不动，于是就出现每班必须买多少本，这种强买强卖不符合市场规律的事。还有的奇葩老师有着，你不买我的书就是和我过不去，你和我过不去，我让你考试过不去。花钱消灾吧，么么哒。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],匿名用户,很久以前，我也不明白为什么那么多人喷。我没有看过谭浩强的任何一本书，但是经常却看到大家在讨论这个人。主要有三种观点：但是你只要看看下面的内容，就知道谭浩强这个人该不该骂。我们谷歌下谭浩强的资料：看下谭浩强创造的世界记录：可以发现，谭在政治圈和教育圈都有一定地位，特别是教育圈子头衔太多，而且级别很高的样子。谭主编的书籍达到 130 + 250 = 380 本为科技著作世界记录外加两个出版发行量的世界记录。我想象中的这个人，不是一个多么厉害的伟人。我看完这些资料以后，觉得恐怖，觉得可悲。多么腐败的教育圈在给他造势，私吞了多少手下人的成果，才帮他达成了这些“成就”啊？这就是中国科学家不受重视的原因啊，因为只有谭这样的专家教授才能拿到比明星多的钱，至于手段嘛？呵呵。—— 大家的评论都在骂那个拿毛选做对比的人，感觉完全歪楼了。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],匿名用户,40多个答案中有几个是一线高校教师？我来回答吧。很简单，为什么要换教材？有利于我的职称，还有有利于我的升迁，或者课时费高点？别以为就你们知道什么K&R、现代方法、c reference manual这些书，很多老师也知道，也看过，那他们为什么不作为教材？因为除了很少数还有理想的年轻教师，真的是没这个动力。我用谭的教材，课件什么的都是现成的，连教案都可以用前辈们写好的，我干嘛还要自己再费事搞新的？评职称的时候没人会因为你用了什么世界级的先进教材给你多加一分！而且你们说的什么现代方法那本书，的确不错，一本书快100块钱，对不起，不能作为教材统一征订，教务处直接就给你否了。那本经典的K&R，讲真，其实并不适合初学者。何况很多时候，其实根本就没按照书上的讲。我只是告诉大家现实情况，想借机搞个批判什么的请绕道。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],Xinyu Chen,题目描述中有这么一句话大错特错。大多数教授的项目，代码都是由手下的研究生写的，他们自己才不写代码呢。有些人都很多年不写代码了，还能站在讲台上把几十年前他们学的东西讲给学生听。这在基础学科领域没问题，数学物理定律至少在几十年之间是没有很大变化的，但是计算机技术日新月异，几十年前的东西早就过时了。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],笨兔子,我的c++老师写个hello world不知道cout在std里，我告诉他，你该加namespace，他说了句啊？然后继续装他的逼，就是不加namespace，给换成了c的printf，从那以后他的课我就没去过。电子科大的哦！用谭书奇怪？
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],云天明,这本书是有一些问题，但是并不影响非计算机专业的入门学习，相反地对于入门这本书还是有一些优点的，从书本的总体结构与内容的安排来说，谭浩强写书的时候还是用心思考了的，并且给出了他的认知水平下的优秀方案。不过现实情况是很多人水平高一点之后，察觉到了里面的一些小问题，然后满世界大吹大擂，给旁人一种我很牛逼的错觉，无形中夸大了这本书的缺点，搞得好像用这本书学编程就很致命一样。正在吃饭 吃完饭好好讲一讲这本书的优点。－－－－－－－－－分割线，以下补充答案－－－－－－－－－－－－－－－－－－－要评价这本书，首先要知道这本书的目的，它在前言中讲得很明白，就是给非计算机专业的人写的教材。非计算机专业的编程课，几乎也只有两门课，一门计算机基础知识，再加一本编程语言了课程了（大部分就是这本C语言编程了）。就这两门课，没别的了。编程语言一般只讲一个学期。在这个条件的基础上，我觉得这本书最大的优点在于：1.不厚，三百多页，但是C语言的基础知识都讲到了，一个学期能够讲完。谭浩强是懂教学的。《》什么的动辄大几百页、千把页能够当一个学期那种课的教材么？2. 在教材中第二章中就很明白地讲了算法与数据结构的重要性，指明了算法是程序的灵魂。在《数组》一章中的示例中讲了排序算法，在《结构与共用体》一章中讲述了链表的原理与实现。对于许多大学四年只学一门编程课的人来说，起码没在这个大方向上让你产生什么误解。数组、链表的简单数据结构，一些简单的查找与排序算法，对于一般的工科专业来说够用了，至于更重要的数值方法，有另外的一门课《计算方法》。学好了这些对于工科专业的许多人来说够用了。反而一些别的纯粹的C语言的教材在这个上面并没有着重强调。当然，对于计算机专业的人来说，他们开了算法与数据结构的课程，编程语言的书只讲编程语言不是什么大问题。3.附录很有用，对于一般的非计算机专业的日常编制来说，当手册用很合适。谭浩强是知道你们学生是个什么水平的，也懂学生需要什么的。缺点当然有：1.语法标准落伍了。2.代码中有一些错误，还有一些不规范的、不严谨的，不过他当时用的Turbo C编译器，可能在那上面能够编译通过。还有一些是印刷错误。不过这并不是严重的问题，错误的地方，自己编译下，根据报错信息什么的在网上一搜就明白了，或者问问老师就知道了。另外一些低级错误确实很致命。3.没有强调正确的编码风格，没有强调注释的重要性。不过有些东西，谭其实也讲到了，比如在他的前言中就讲了：”“。在谭的书的基础上，改进他的缺点，保留他的优点，会有更好的适用于非计算机专业的编程教材的。批评不是不可以，要批到点子上，也要承认别的人优点，批评之余也要提一些更好的解决方案吧。可是在谭浩强之外，还有人写一本适合中文的非计算机专业的教材么？我孤陋寡闻，没见过。这不是的耻辱，是后辈的耻辱！
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],赵新华,"这些老师都是没有开过软件公司的人. 所以, 不知道社会上需要什么样的软件. 需要什么样的编程人才. ------为了维护教学的连续性, 减少每年大量写讲义, 于是就沿用过去的传统, 直到腐朽. ------我1987年学习程序, 1990年看的谭老师的<C程序设计>, 同年看的书还有严蔚敏老师的<数据结构和算法>. 到1997年上大学, 才注意到, <C程序设计>实际是参考1977年前后国外教材编写的, 而这个时候, 学C不如学C++, 学C++,还要学Linux C或者Visual C++马上问世. Windows98系统已经发布预览 版.. 可是, 这本20年的老教材, 还在让学生们背 C++ -- 运算符优先级. 而不知道光C的编译器有几百种, 各种编译器对语法的细微差别是不同的. ---- 现在的C语言程序设计, 文件保存不讲Utf-8编码问题, 流不讲视频流, 加密不讲MD5和RSA, 模板类, Lamda表达式, 都不仔细讲, 这个难度, 好比18世纪的数学... 与时俱进, PYPL上这个月Python登顶, 可是国内大一的编程有多少开了Python的课程? 所以, 题主的问题没有为什么, 只是教育与产业脱节. 反正有学费赚, 反正毕业给你一个学历, 所以, 教什么呢? -- 教最容易教的. "
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],张浩斌,浙江省二级试卷上出过只有TC才能编译运行的奇葩代码，问你输出结果是什么，只有谭氏C能解释。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],YorkYoung,"这个问题很简单，因为很多人学C语言并不是为了把程序写得很好，对于没有多高追求的人，学到这么多，能应付期末考试和并没有卵用的所谓2级就够了。还有一个问题，就是编译器配置问题，我学C也是从谭浩强开始的，学完了当然觉得这里面坑太多，但说实话，后面我在学校学C++用的教材，还不如呢！这也逼着我去找参考书才发现了新天地。但当时就我只会VC6的那个水平，你说我还能玩啥，我觉得挺适合我的。当然后来开始用高版本VS，就觉得这是什么玩意儿，好多有用的都没说，然后开始查MSDN。之后出于对C++11的喜爱，VS支持C++11太慢，开始转向gcc，开始就会code:blocks，后来开始会配MinGW，但是各种库依赖太难受，然后发现MSYS2这个神器，就这样。那么对于一个用MSYS2+GCC，文本编译器用Sublime Text，写Makefile组织工程的人来说，那谭浩强真就是一坨屎，我当初走了多少冤枉路啊！这还只是对坚持Windows平台的人而言的，至于转向Linux,Unix的就另说了。但请记住，不是所有人都要达到你这个程度的，对于大多数人而言，谭浩强的程度就够了！当然这话对只对我这种非计算机专业的人而言，对于计算机专业的人我还是希望能早点换个现代一点的教材。当然谭浩强的某些问题，比如指针和数组关系有点胡这种问题，你也要考虑某些考试本身就比较胡吗，他就要考这种写了会被人骂死的代码，你书上不讲不是照样被骂？这不能怪作者。"
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],a梦没了,"说说自己的个人情况我08年就读于陕西某211院校软件专业，当时我们学校C语言课用的是裘宗燕的《》。当时谭浩强的教材还被奉为是初学者的经典，有人批评，但还不像现在知乎上大神人人喊打。有同学问为何不像别的学校用谭浩强的做教材。老师强烈不鼓励、不推荐大家私下去买这本书。开始时大家还老老实实地根据裘老的书学习。约摸记得裘老的书不像很多语法教材每章介绍几个语法点，而是会连带介绍他如何解决一些问题，颇具难度。我记得当学习到第三还是第四章的时候，很多同学崩溃了。那章应该是讲函数和递归的，一般的教材（我后来看到的）基本上在讲递归的时候会很简单的用一个斐波拉契的实现作为递归函数的说明。但是裘老的书用了。。。这问题颇具深度，对于刚刚接触编程的新生，尤其是刚刚参加完填鸭式死记硬背的高考，并且上一章才刚刚学习了基本的结构控制语句的孩子们，确实是招架不过来。并且这章还大量提出了如等等的编程模型，尼玛。。那会我刚刚装好IDE，语法要背一背，常用的函数要记一记翻一翻, 一个全角分号编译不过都要找一下午，你让我学这个也太难为我了吧？于是就看到当时好多同学弃坑（包括我）去选择了的书。对于一个还没完全从高考死记硬背的思维惯性走出的孩子来讲，老谭的书就如同一本新东方，他的语法总结和常用的函数总结做的特别好（印象特别深刻的是printf的参数表整整介绍了一页半）。而且神奇的是，老师出的好多题，甚至是我们同学翻阅的历届学校习题也来自于这本书的课后习题。就这样，越来越多的同学买了老谭的书。也许是基于多数院校延续的这种中式教育氛围，谭的书不仅没有被抨击，反而越卖越好。老实说老谭的书确实存在各种各样的问题。书中用的编译器很老旧（好像还是TC很低的版本？），代码风格一塌糊涂（拧得像麻花），更别提中间存在了很多的谬误。但是他有着适合国情的一面。喷他的人（包括我）大多都是日后学会了写代码，反过来再去批评他的书。但是不可否认，在我们都还什么都不会，什么都不懂的时候，《》，《21天学通XXX》这类的读物帮我们先进入了与计算机沟通这扇大门。 就如同大多数国内学生学英语，总不是说刚开始就会用英语写作文吧？还不是靠肝了各种各样无聊的单词书，语法书？题外话，从业之后回翻了当年放弃的裘老的书，颇感裘老功底的深厚。书中提到的很多编程思想，编程模型，代码风格，解决问题的方式确实是在以往工作中实践过、帮助自己提升效率的好东西。深感可惜，如果学校当时把这本书当做是语法学成后的拔高教材，而不是基础课本，也许效果会好很多。"
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],DBinary,    谭浩强的c说句实话，虽然很多内容不太严谨，但是相比之下真的算稍微新手友好的了，应该属于不算有功 但也无过，可以试试的一类书籍。    代码写的越久，看很多代码类的东西就就越随缘，比如看书这个，尤其是技术类学习类的书籍，你看的下去，觉得适合自己，我觉得就相当不错了，毕竟最大的问题不是书上有没有一些边边角角的错误，而这书你看多久能不打瞌睡。所以正确的阅读方式是，你先找本书看，不喜欢，换一本就是了，学习本身就是一个拿时间换知识的买卖，买卖不合适，换家做就是了，明码标价童叟无欺，买卖不成仁义在，只要你肯去做，总有一款适合你。   科普和科学是两回事，平滑的学习曲线，应该是通俗易懂的科普进门，然后再用严谨的方式去证明科学，而一个好的科普，丝毫不比严谨的科学容易，现在根据前人的教材你再做一遍严谨的推导很多时候并不是什么困难的事，但如果你完全吃透了一个知识点，并且对它有了自己的理解用大多数人能够接受的方式将它科普出来，或者理论指导实践直接将它落地变为产品变为生产力 那我觉得是相当了不起的，这个知识点你是学到家了的，比只会抄严谨结论扯着大旗告诉别人这里那里不行，这个描述不太对，茴字不应该这么写的高到不知道哪里去了。     又不是搞数学证明搞推导造火箭，搞的那么严肃做什么。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],夜神K2,教C语言的老师教授们自己恐怕也不是程序员……出计算机二级题的估计也不是程序员……诸多时候恐怕连我们这种写脚本的都不如……你给突然换一套教材，何况还是有逻辑的教材，不是要他们命么……
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],竹岛环流,在高赞回答里留下了热评，但是看了一圈觉得站在刚学习编程的学生的角度的回答比较少。我是大二的软工学生，有一些不是很成熟的观点想和大家分享一下。由于角度为大学本科生，所以也小小的希望大家尽量别从就业后的角度质疑，因为我也真的完全不了解无法回答。Mua~//我了解的院校也不是特别多 欢迎补充这里放一张图，是开学第一节c语言老师给的推荐教材，可能反应了一些问题吧下面是我对于这个问题的想法: 其实在我的学校，期中期末考试形式极为简单，就是给五道题目手写程序，还有平时的mooc题目和额外的期末大作业等等，在所有课目中已经算是最不看重“标准答案”而且更着重于平时实践的科目了(现在已经改成机试笔试同时考)。但是不可避免的是，有些学校考试是有着大量客观题目的，需要一个标准答案的，尤其是非计算机类专业的，这门课通常被视为水课(此处不接受编程这么重要怎么能是水课的疑问)。科班平时上实验课老师被很多“老师为什么我这里运行不了但换个编译器就好了?”类的问题搞的头大，所以干脆一拍脑袋，我就给你出客观题让你给我写唯一选项，就老实按着答案背吧嘿嘿嘿(๑‾᷅^‾᷅๑) 。这个角度上，我觉得需要被质疑的不仅是教材了，也有考试形式的问题。编程这种重视实践的科目，为什么也要侧重于考试考察???虽然是受学分学时等各类规定所限，但也是期待一下以后学校能对于此类专业课有更好的考察办法。这个问题也是大学的通病了。一门专业课一学期64学时算最多的了，一次两个小时的课一周也就2-3节，一学期通常18-19周左右。根本讲不了啥，也就算入了个门。谭这书文字混乱错误频出但内容浅显，诶不错这书一学期能讲完就他了(各学校自编的入门教材同理)。而重视科研不重视教学这个问题也是陈年旧疾了。尤其青年教师们都处于根本找不到人联系都靠运气的忙碌状态。教学很多时候都貌似只是必须完成的任务，去年课件备课，前年题目改改，就成了新一年的课程安排。但其实给我这种老师讲课是为了完成任务的印象的课，大多是选修课和公选课。专业课老师都是“诶呀同学们这个特重要我多讲点”，“诶嘛这里有点难回去我给你发点资料再学学”，时常压堂给我一种还在高中的感觉。//仅是个人想法C语言目前来说还是大部分科班同学学习的第一门语言，且学习目的并不是学会C语言，而是对编程有所了解，好以此为基础学习C++和数据结构等后继课程。所以这也是为什么有些学校会用谭的C语言，而不用他的C++(虽然我觉得是因为内本更烂烂到无以复加)。既然C语言课程大多是针对科班0基础小白，也就不能要求一个啥都没学的同学，刚开始学习就意识到不同教材的专业程度上的好坏，顶多看出来这书易不易懂，而书的结构一定程度上反应了易懂程度。恰恰谭浩强这本书，他结构还挺明晰，所以出现了很多初学者购入这本书的情况。当然了，不论是我自己还是身边同学的亲身经历，都证明了这书他真的是只能应付应付0基础小白，但凡懂了一点就不会接着用这本书了。在我看大家答案的时候也有一些其他想法想提出:①谭浩强的普及范围过广，自2000年出版，成为了很多没有自编教材的大学的科班教材。在教材差这个问题上，这本书是一个典型，而不是唯一，所以我个人认为值得批评的是这一类与时代脱轨的书籍。②本书确实有很多问题存在。首先就是很多地方都是一种“我这么告诉你你就只能这么写”的态度。个人认为对于刚普及计算机的90年代00年代还是有一些可取之处的，起到了让更多人能够编小程序的目的。但是在追求更深层次的现在，显然无法满足专业需求，急需更新。其次就是错误代码咋这么多呢。个人认为一定程度上和c语言从C89到C99到C11标准的改变有关。百科上写的谭编撰了150+本书籍，可能也存在编写不认真的地方。③对于谭浩强老先生，我觉得他是符合当时时代要求的开拓者，起到了很大的对编程的普及作用。虽然和现在的计算机行业有所脱轨，但当年的贡献是无法否认的。①教材如果不重要的话，那这个问题就没什么存在的必要了。一本好的简单易懂的教材可以让学习事半功倍，但是一本相对来说没什么亮点的教材也不会让学习过程多么绝望。个人觉得只有有大量错误的教材是值得批判的。在讨论教材时也要考虑到，不同教材的针对性，以及学习这个课程的目的。老手看新手教材自然如同鸡肋，小白看高难教材也定会满脸黑人问号。科班需要专业性极强的教材，非科班可能只是辅修，了解即可，类似于专业教材《微观经济学》《宏观经济学》同科普书籍《》之间的差距吧。②在之前的评论中有人提到，自学的原因是因为没有遇到好的教师，说这不是合适的方法。在大学本科角度来看，我对这个想法持完全否定的态度，尤其是软工的专业课程上。个人认为，上了大学就不存在老师领着学习这件事情了，难道不是一切知识都靠自学? 老师起到的更多是领路人的角度，讲课内容也多以考试要求为基准。如果想要对课程有深入的学习和钻研，不靠自学的话，还得去找老师抱大腿么??脱离这个想法来看，自学和跟着老师学习不存在哪个更适合的问题，而更多是同时存在，即使二选一，也多是因为另一点是无法实现的。比如期末周的深度自学(此处应有大误(*•̀ᴗ•́*)  ̑̑)以上是我个人一些想法，欢迎大家探讨。
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],喵呜大将军,反对，我毕业快十年了，我们学校当年的教材就是克尼汉的C programming language（北航）但是中下游学的不太好的学生还是会买谭浩强的作为参考教材，因为那本书讲的偏理论，不认真研究没那么容易懂谭浩强的书虽然我不喜欢，但不可否认他简单直白，很符合中国式填鸭教学的一贯作风，所以受众本身就很多我不知道这个“各大高校”到底是哪些高校，但既然我校学不懂原教材的人会自己去买谭浩强，那么二本以下的学校一开始就选谭浩强的教材就没有什么不合理之处了，毕竟因材施教才是最重要的，也不见得每个人都必须学最难的版本吧
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],冷眸,"目 录一、开始之前    FAQ 那是什么    为何有这篇FAQ    编程为何物    如果这就是编程，那语言是怎么回事    我为啥要学编程    听说编程很难，是真的么，那我能学会吗？    我真的可以么    还一定要有台电脑么    好吧你说服我了，我打算开始，该怎么做    那么，下一步怎么干    我碰到问题了，谁能帮我    我能看懂别人的程序，但自己做就觉得无从下手，怎么会这样    我英语\XX不会，咋办    关于态度、情绪和其他二、选择C/C++语言    C语言是什么    C++语言是什么    为何要选择纯C    C/C++语言和其他语言有什么关系    我为什么要学C/C++语言    Python语言 作者的另一推荐三、一些重要的概念-----计算机原理    编程的对象是什么————计算机    程序到底是怎么回事————是操作而不是结果    为什么要编程————因为机器的特点    你们老是提到编译器，那是什么-----代码翻译机    给我解释下啥叫编程语言————各路江湖武功    语言之后要确定的事情------操作系统和平台    编程时什么东西最重要----源代码    我的程序和一般的程序不一样，什么原因————控制台和图形界面的差异    好像不能建立一个单独的文件来编译————工程和项目的问题    难道一切都要从头干起————函数、API、类、控件、开发包与软件复用    关于图形库的补充说明--------可选择的图形库四、教材、习题和示例    能推荐几本好书么    首先是纯C的教材    然后是C++的教材    接下来是Windows编程    Unix/Linux/BSD系统    数据结构和算法    各种图形以及其它库    软件工程思想    找书的诀窍    光看书似乎不解决问题，难道要做题    OJ是什么    哪里有可用的OJ    哪里有代码示例可看五、选择编译器    有哪些编译器可用    还有些可以配合编译器的开发环境    他们在哪里    怎么安装他们----特别解释 MingW版GCC的安装六、TC下常见的问题解决    用TC创建第一个程序    TC的库路径设置    TC下的图形编程设置    我的程序在TC下可以编译，在VC/GCC下为什么出错七、其它编译器问题    用VC创建程序    用DEV-CPP创建程序    用MingW创建程序    用Lcc-win32创建程序八、结束语    程序员成长的六个阶段=========================================分割线================================一、开始之前FAQ 那是什么    FAQ就是Frequently Asked Questions，也就是常见问题解答。这玩意儿通常是一些所谓的高手或者前辈为了节省回答新手的大量简单重复问题所耗费的时间精力而采用的一种偷懒手法。一旦完成，高手只要一努嘴，“看FAQ去”就万事大吉了。实在是居家旅行杀人越货之必备良药，因此在各大论坛已经有大泛滥的趋势。    本篇FAQ为学习C语言、C++语言的大量新手编写，重点是如何运行起第一个程序，不涉及语法、数据结构和算法等内容。如果你已经通过计算机二级或水平相似的考试，甚至你是职业选手或是大师级的人物，就不必再往下看了。同时，本FAQ只讨论C/C++语言，其他语言如Java VB python等均不涉及，虽然阅读本文前四章节也会对学习这些语言有所帮助，但深入学习还是请阅读这些语言的专门教材。  为何有这篇FAQ    本文是为那些对编程新手所准备的，如果你自认已经不是新手，那么请离开把时间放到更有用的地方。如果你是那种对编程一无所知，迫切想知道他是怎么回事，或者仅仅编写了几个小程序，却遇到一大堆问题，而在论坛或是其它地方又得不到帮助，但心中又有雄心壮志想要做绝世高手顶尖黑客或者想要以程序为生的入门级新人，那么你恰好是本文的服务对象，请详细阅读以下的文字，我想应该会对你有所帮助。而且请你了解，本文的这部分内容所要介绍的是那些普遍性的概念，与具体任何一种语言都无关。    正如我们所知，市场上充斥着无数的编程教材，同时可以肯定的是，目前已经面世的教材（包括正式出版物和网络上的教程），穷一人一生之力是看不完的。在这些书中，有大量的垃圾书，大量的平庸之作，还有少量的精品。而即使是这少量的精品，也不可能看全。既然书这么多，我为什么那么闲还要来写一篇呢，有这时间，我还能多画几张效果图挣俩钱花呢。    情况是这样的，市场上的书虽多，但其中几乎没有几本是面向初学者的。我所指的初学者，是指从来没有编写过程序，甚至是连编程二字都没有听说过的人。这样的书是如此之少，以至于要去购买或是阅读到他们都是很困难的事。在我个人的学习生涯中我认识到很多编程教材有个糟糕的倾向。他们要么是一下子告诉你所有的事，好像你能在千分之一秒中突然从菜鸟变成好手，要么就是认为有些事你早就应该知道，拿你当熟手看，导致你有一种赤身裸体被抛弃于猛兽横行的非洲旷野的感觉。你还没有穿上衣服走出帐篷，连刀子都没有摸过，他们就试图告诉你草原上有多少可以捕获的猎物以及他们的位置，告诉你几百种武器和毒药的使用秘籍，告诉你两百条以上的陷阱安放要领。你没有经过丝毫的练习，甚至还没有杀死过一只刚出壳的小鸡，他们就要你独自去捕猎数十头饥饿的狮子。这种看似荒谬的情况从过去持续到今天，至今仍然存在。这并不是说那些写教材的朋友都是傻瓜，这件事当然有它的原因，因为他们面向的读者是程序员。程序员就象是猎人，他们更换语言就像猎人更换武器一样，不管他使用哪一种武器，捕猎的基本原理没有变化，变化的只是武器的使用方法。对一个成熟的猎人而言，再强调基本原理就没有必要，所以教材们对人所共知的一些事也就避而不提。一个成熟的猎人，她心中的捕猎知识是浑然一体的，武器的选择，野兽的习性，陷阱的安放，怎样做和为什么这样做都结合在一起，没有哪一部分可以独立出来，一部分一部分的教给别人是极度困难的的，要教就只能混杂在一起。程序员的情况类似，知识体系是完整系统的，谈到一个问题总会牵扯到另一个，最后的结果就是别人总是希望并想当然的认为你可以一口吃成一个胖子。    这样的后果就是，一些很明显的事情，老手认为那是你应该知道的因而不予回答，而新人却发现没有任何地方可以找到解释，也不知道该到哪里去找答案。（不懂得如何找答案也是新人的特点之一）。有一个典型例子与这种情况很类似，鼠标，我们已经习以为常并且很熟练地使用着，但是很多第一次接触电脑的人那却是完全摸不着头脑的东西。在各地的论坛里，总有大量的新人提出诸如“学C++好还是VC,VC++好？”“C++也可以编窗口程序吗？”这样的毫无常识的问题。我的FAQ就是为了来一次性解决这种问题的。编程为何物    编程就是编制程序。程序是让计算机发挥功能的命令的集合。程序有两种形式，让计算机真正执行的是电脉冲形式，叫机器码，程序员编制的通常是文本形式，叫源代码。使用一个称为编译器的工具，可以把源代码转变为机器码。而编程就是产生那些源代码的工作。这个工作类似于谱曲、编菜谱、写工作手册。我们知道，谱曲并不是一蹴而就的，往往需要反复的修改，直到最后满意为止，编程也是一样，接近工作时间的30%是完成粗制成品，剩下的70%时间是在不断的修改，这是相当枯燥和乏味的。有志于投身编程的朋友们，不要忘记这一点。如果这就是编程，那语言是怎么回事    文本形式的源代码，其实有些规定的。就像我们和老美用英语交流。首先你得说英文单词，不能冒法语词汇日文假名出来，其次你得按语法讲话，不能一个个单词往外蹦。程序也同样有词汇和语法上的一些规定，这些规定就构成一门语言。显然任何一门编程语言都是人造语言。人造的东西，因发明人的想法而不同，就形成了不同的语言。我为啥要学编程    这个问题有两层意思。首先是编程为啥要学，很简单，因为这玩意不是生来就会,就像木匠活一样属于一门手艺，自然要通过学习才能掌握。你怎么也得花上几年来学英语不是。    第二层涵义才是重点，为啥我要学它。答案因人而异。有人为了上学有人为了考试，有人为了求职挣钱，还有人就是吃饱撑没事做自虐。什么为了开发智力啊证明自己啊寻找成就感啊，那都属于自虐，在下便属于自虐一族。没啥说的，确定你的目的，也许只是好奇想接触下啥是编程，也许是有课业的任务，也许是想以后靠他找工作，或者是羡慕那些黑客。总之，想继续深入的，往下看，没信心的趁早走人，外面帅哥美女多的是，不要浪费大好时光青春年华在一台破机器上，ok?听说编程很难，是真的么，那我能学会吗？    你觉得说中文难么？你能流利的说普通话是不是。但是你知道么，汉语是世界上最难学习掌握的语言。稍后我会介绍计算机的特征，你就会明白知道基本上编程这件事的难度等价于指挥IQ<20的壮汉。任何一种计算机语言的难度都不会超过英语，更比不上汉语。那么你认为你能不能学会编程呢。    请记住学会和学好是两个层次，就像中学生作文和报刊出版物之间的差异。达到学会那个程度，只要有小学三年级的知识基础就可以开始了，也就是识字就行。而如果要学好，那需要初高中毕业的文化水准，也就是应该略懂英文和解析几何。当然还有更高的技术层次，比如在相当于职业作家的水平上，你将被称为专业程序员。而如果你被称为大师，那就是诺贝尔文学奖。抵达那个程度需要付出艰苦的努力，至于怎么达到，不在本FAQ讨论之列。我真的可以么    如果你已经看完前面的部分到达这里，显然你是确实想要学习编程的新手。不论你是为了什么目的来学习，在看了我上面的话之后是不是很有信心呢，不过我要打击你一下，不是谁都学得好编程的。人人学开车，但不是谁都能上赛道，舒马赫更是只有那么一个。    就像有些惊险刺激的游乐设施禁止高血压心脏病患者参与一样，编程作为一项耗费智力和体力的活动，对参与者也有一定的要求，先来看看吧，满足这些条件，你就可以放心大胆的开始。    先说体质要求。太祖说：身体是革命的本钱。健康的身体对编程大有益处，但并不是说残疾人就不能参与。就目前的技术水平，除了脑瘫和目盲这两项，其他的肢体残缺根本不妨碍。霍金先生在这样严重的情况下还能持续研究的事实，还不够激励你么。    紧随其后的是足够的精力和时间。Dear friend，只要你能静坐20分钟安静的看完这篇FAQ，你的体能就达标了。如果你想告诉我，你能够一天在电脑前连续操作18小时以上，我要说的是，年轻人，虽然你很威猛，但请注意保养身体。只要每天您能抽出30分钟来学习，那你的时间也合格了。当然有更多时间确实会更好，不过也没必要每天12小时，编程并不是世界上最重要的事，我们还有别的事要做（这是对非职业选手说的）。必须认识到，学习编程重要的是持之以恒，而不是依靠爆发力，每天半小时比一周一次6小时效果好的多。    第三个要求是你要略微懂一点计算机。不错，只要略懂就可以了。因为这正是本文的主要目的：向略懂计算机的人介绍编程。那么，怎么才算略懂呢。如果你能够前往这几个网站并浏览：  和，那么你的水平已经超过我的想象，完全能胜任接下来的学习。不用现在就前往，你知道怎样操作就可以了。    如果你还不会上网，没事。你会不会打字，不需要打得很快，也不需要会打中文，只要你能把键盘上的26个字母和十个数字挨个输入一遍我就认为你已经通过。然后，对于Windows用户,你能不能打开记事本程序,在里面打几个字并且存成一个文件。如果你说能，OK,你合格了。    你还不会打字或是不会用记事本?这样的话，你最好还是先学一学基本操作，否则本文对于你实在是毫无用处。    你找不到记事本程序，请让您边上的人指导一下，可能你还没有安装这个程序。有可能您不是Windows用户，联系给你装机的人或公司，或是你们的网管，让她给你可用的文本编辑器，通常会是vi或Emacs，当然也可能是别的，只要你会编辑并存储一个文件，就可以了。    你连电脑都没见过？？@#$%^&*!!!! 这样的话，本教程对你根本没有用处，你还是看见过电脑以后再来阅读本教程吧。     最后一点，你需要有顽强的毅力。编程并不象你想象的那样轻松，不是野餐和聚会。尤其是对于职业程序员都应掌握的C++，她可以用两句话来形容：三年不开张，开张吃三年。千万记住，C++被称为是真正的程序员使用的语言不是没有理由的，她的复杂度和性能超出你的想象。有无数的编程新手，在第一个月不到就放弃了，你最好确定你不是他们中的一员。毅力没有尺子可以来度量，在这里我只能先祝愿各位读者都能坚持到最后。还一定要有台电脑么    不幸的是，到目前为止，是的。在老年时期，贝多芬可以凭空作曲而不依靠钢琴之类的东西。但几乎没有哪个程序员不依靠电脑而只在大脑里编写，尤其是开始学习的阶段。    作为编程的另一方面，一台合适的计算机也是不可缺少的。用各种语言所编写的程序被运行在各种各样的机器和设备上，从掌上设备到巨型服务器，从台式电脑到微波炉，所有能够自动运行的地方都有程序的身影。但是很遗憾，并不是只要能够运行的设备就可以用来进行编程的，这就像虽然可能洗衣机也能发出悦耳的声音，但你不能指望用洗衣机来录制流行歌曲（嗯，也许SONY有这样的产品，我保留意见）。我们主要还是用个人电脑来学习编程。目前大部分语言，所需要的电脑并不如你想象的那样高级（.net系列不在我们的讨论之列，他的集成环境对系统要求很高）。就我所知，即使是主频只有30MHz，640K的内存，也是可以用来编写小规模C/C++程序的，只不过感觉不是那么畅快而已。当然作为学习，我们还是需要有比较称手的设备。不错，最重要的就是称手两个字，所谓称手，就是不会由于设备的问题，妨碍你的思考，不需要高速的处理器，也不需要巨大的显示器，更不需要海量的硬盘，只要称手。编程不是豪华海上旅游，而是修行。修行不需要五星级饭店，但也要有破屋以遮风雨，否则感冒发烧了，怎样来修行呢。那么还是来谈一谈电脑的要求吧。    只要你的电脑能运行DOS，就及格了。如果能够比较好的运行Windows 98操作系统（说实话，98死机是免不了的，只要不常死机就可以），硬件上就达到80分的要求了，如果能运行Windows 2000的话，那已经是满分了。如果比这还高档，那简直好的超出想象，甚至可以参加奥运拿金牌去。满分的那种设备，能够流畅运行.net环境的，在2008年1月份，全新的低于人民币一千元，二手设备甚至三百元不到。如果你实在囊中羞涩，可以考虑到毕业前夕的大学去碰碰运气，也许能遇到大肆的前辈们送你一台。在你看到本FAQ的时候，去任何一个电脑商场，随便购买一台，都可以符合要求。在下强烈建议你买一台自己的设备，那种自由是公共机房无法给予的。当然你执意要去机房的话，我也不反对。但你能看到这份教材，就连一台能运行win2000的机器都弄不到吗，怎么说现在也已经是双核时代了。    我希望你的机器上装着以下操作系统之一：Windows 2000, FreeBSD, Windows XP, Windows98, Linux ,MS-DOS或任何厂商的UNIX。我强烈推荐使用WindowsXP+SP2和FreeBSD这两个系统进行学习，本文中所有的程序在这两个系统都可以顺利运行通过，我将详细介绍在这两个系统下的设置，这对新手尤其重要。当然我也没有忘记其它系统的兄弟，相应的设置也不会遗漏。我没有提到Mac OS系列是因为我对她还不熟悉，但我不反对你拥有她。如果你的机器没有以上任何一个操作系统，请联系提供给你机器的人，如果不是你的机器忘记安装操作系统的话，那她极有可能是军方的机密设备，总之你小心为妙。软件方面，依据不同的语言需要安装不同的软件。    如果学习C/C++。使用FreeBSD,Linux,Solias等UNIX系统的，推荐安装GCC，该程序是默认被安装的，总在系统的某处，初学者不必考虑版本问题。使用Microsoft操作系统的，建议使用VC 6.0或VC2005/2008，或者GCC的windows移植版。由于版权问题，如果不想破费的话， VC6要用VC2005的免费学习版来代替，BCB的命令行编译版和GCC的Win32版本来就都是免费的。GCC的Win32版有Dev-cpp，MinGW等不同发行形式。    其他语言都要按照相关的资料安装和设置。比如本文作者偏爱的Python语言，那是非常的方便，只要去python的主页直接下载对应不同平台的可执行包既可。这些编译器怎样安装和设置我会在随后的章节里详细说明。毕竟，好多人的学习热情就是被这样的细节所消耗掉的。除此之外，拥有以下两件法宝将使您如虎添翼。    一：一个被大家称作高手的喜欢玩计算机的人，这种人通常被叫做黑客或者极客。拥有他（她），你在遇到问题的时候，可以求他帮忙。记得给他点好处，吃个饭什么的。    二：便捷的Internet连接。可以上网意味着你可以干很多事，譬如可以和线上的高手（譬如我）即时联系，到论坛和usenet寻求帮助等等。这在有时是极有价值的。好了，不要着急，还有一点点准备工作我们就可以出发了。好吧你说服我了，我打算开始，该怎么做    首先确保你的健康状况和基本计算机操作水平，我上面说过的机器也已经找好了吧，从来没听说谁没有电脑就能学习编程的（以后科技进步到人机合一的程度，也许可以实现）。如果能有网络连接，那简直达到了完美的境界。    没人可以无师自通，天才也不行。所以你要做的第一件事是找一本好的入门教材，最好是经典作品。反复地看教材，要牢记一点，你所提出的大部分问题，教材上都有解释，只是你没有认真看而已。反复地阅读，直到你觉得你已经可以编写出那本教材了，才可以丢弃他。教材比老师好的理由之一是，你可以带教材上厕所去卧室，而老师不行。当然，老师也有比教材优越的地方，那就是他可以给你解释教材上没有的问题。但记住老师也是人，你不动脑子就去找他，他会厌烦的。不要鄙视你的老师，即使他其它方面不如你，至少在编程这件事上他能做你的老师就是他比你强的硬道理。    你以为光看语法书和背诵单词而不练嘴就能说好英语么，显然不对。编程也是，熟能生巧在任何地方都是一样的。首先看懂教材上的那些例子，确保看懂之后，按着他的思路把它默写出来，当你尝试过就会知道看懂和默写是两个完全不同的程度。然后就可以做书后面的习题，独立想，不要看答案或提示。等到整本书后面的习题你都能做对的时候，你就算入门了。然后去找等级考试二级三级的题目来做，等到也可以准确无误的时候，恭喜你，C语言（或者其他语言）可以算是通过了。如果你的目的是去考试，现在就出发吧。但如果你想要以编程谋生，sorry，你还欠火候。这其中的差别就相当于大学英语四级作文和畅销英文小说之间的差异。那么下一步怎么干    只需要考试的朋友，不需要看这一段。想谋生或自虐的这边请。    通过C语言（或者其它语言）考试只是编程的第一步而已。你掌握了大量的单词并且熟悉语法还不能让你写出优美的英语小说。你要学习修辞手法、谋篇布局这类文学技巧，也需要掌握历史典故、谚语俗话和文化背景这些文字外的东西，如果要畅销，还需要超凡的主题生动的故事跌宕的情节。编程圈子里有和这些类似的玩意儿。算法和数据结构就是程序里的修辞手法谋篇布局。人类编程虽然不过几十年，但运用程序所解决的问题，已经覆盖世界的每个角落各个方面。各种各样的问题，被前辈的大师提炼归纳。有些人们直接找出了解决的方法，有些人们找到了寻找解决方法的途径，还有些人们索性证明了在现阶段是不可能解决的。这些解决方案就被统称为算法。学习算法就是学习前人的智慧，少走弯路。连牛顿爵士都是站在巨人的肩膀上，除非你自觉比老牛还牛，凭空就能解决别人十几年才想清楚的问题，那我也无话可说。学算法很简单，也是找教材，做习题。教材容易找，但新手往往找不到合适的习题。我的建议是，在完成教材上的所有习题之后，可以去找编程竞赛的练习题来做,也就是所谓的OnlineJudge，我会在后续深入讨论这个东西。    相当于历史典故、谚语俗话、文化背景的东西，就是各个编译器和平台上的接口和库了。假设现在有个程序要读写文件，不要误认为你需要亲自写个程序去控制硬盘的磁头伸缩，或者是光驱的透镜移动或者是U盘的地址定位。除非你是想做个window或者Linux那样的操作系统（那样的兄弟会来看这篇FAQ还真是奇迹），否则所有包括文件操作、网络通讯、人机界面（键鼠屏打印机）这些，都是由操作系统提供的现成模块，只等着你来使用。这些模块通常称为应用程序接口，不同的操作系统提供的不一样。在接口的基础上，很多编译器和程序员做了进一步的包装形成了库，你可以比直接使用接口更方便地使用这些库而达到同样的功能。由于系统的不一致，编译器的不同，所以在学库之前，先要确定你所要工作的平台和环境，还有应用方向。Windows下编游戏和Linux下做数据库用的库是大相径庭的。然后就是同样的一套步骤，找教材，做练习。这个教材通常就是官方文档，windows下最好最全的就是MSDN，Unix/Linux平台有大量的文档，分布于man页和各种手册上，其他平台自行搜索。可以去找习题，但更好的方案是去找一个实际的小型应用，在使用中学习效果无与伦比。编写一个QQ或者BT，绝对能让你对网络操作部分了如指掌。在这个阶段，你已经可以写出实用的程序了，为什么还要执着于做题呢。    优秀的文学作品有个共同的特征，他们虽然立足于不同的本民族文化，但却关心全人类共通的思想感情，体现着终极的人文关怀，我们都会为奥塞罗流泪不是么。优秀的程序虽然应用方向不同平台各异，但他们一定完全符合计算机原理，用最合理的数学模型来展现。如果你想成为合格的程序员，计算机原理和相关的数学知识是一定要补习的理论课。除了看书和做题之外，还有一个内容不可缺少，就是阅读别人的程序。没有哪个作家不大量阅读别人的作品，同样你也可以从别人的代码中吸取营养。代码就是程序的全部，是真实的实现方法，一切都在代码中，甚至有时长篇累牍的说明还不如几行代码清晰明白。今天的程序员是幸运的，开源运动的发展使得他们能够无偿而方便地得到世界上最优秀的并且是实际运作中的代码，几乎遍布任何应用领域。只要你有心，可以找到任何想要的代码。但读代码也是辛苦的事，请阅读和你水平相当的代码，差距太大将会是严重的身心打击。    学习库和学习算法可以同时进行，在你完成这两个阶段的时候，你已经是一个合格甚至是优秀的程序员了。    超凡的主题跌宕的情节，这个东西其实就是你的程序的应用方向。如果说前面都是练习的话，这就是你自主创新的时候到了。很多人都只是在老板的安排下为了工资而被动做些既不喜欢又没有价值的流水线产品，少数人才有机会做自己喜欢的东西。想想看，QQ、3DMAX、WOW、IE、Apache甚至Windows都是多么知名的程序，有朝一日你的程序将会和他们一样知名。不过我还是不得不给你泼冷水，这需要不懈的努力、敏锐的眼光和少量的运气，只有极少数的程序员能做到这一点。不过，有梦想才能不断前进，不是么。我碰到问题了，谁能帮我    郑钧说，记得没人会同情你，我亲爱的兄弟。这真是至理名言。编程这件事，基本上是不能指望有人帮你的。    当你遇到编程遇到问题，首先应该是去看编译器提供的信息。它可是最直接的来源，相当于案发现场，从没听说刑警不看尸检报告就直接破案的。现代的编译器已经不止编译那么简单，编译本身就能送出大量的提示，调试功能更是强大到可以让你检视程序运行的每一步都发生了什么变化，只要你能看懂。机器的问题，就应该用机器来解决，而不是用人的肉眼去检查。然后就去查教材和文档。手边的教材能解决70%以上的问题，如果还不够，上网去查。如果找不到，请记住有个东西叫搜索引擎，国内最著名的两个，google baidu。99%的问题可以得到解决。    如果你有老师，可以试着向他请教。不要抱太大的希望，虽然他收你学费，但他也不是万能的。    如果还是不行，确认你已经努力过而没有答案，那么你可以考虑提问，去论坛、新闻组或者群，都可以提问。    在你确定要提问之前，请先阅读这篇文章《提问的智慧》　　 这个也行，《提问的智慧 图片版》我能看懂别人的程序，但自己做就觉得无从下手，怎么会这样    正如你所知道，刚开始学习的时候，我们总会作一些习题，等到后来涉及实际的应用程序，我们也可以把它们都看成是大型的习题。这个问题就变成了，为什么你能看懂别人的解题程序，而自己写不出来。这个问题其实每个刚开始学习编程的人都会遇到，你所见到的各位达人大牛都曾经有过这段经历。所以不要为这种情况而怀疑自己的能力。    为什么会有这样的情况出现呢，因为思维模式。    在小学的数学教材里，有一种题型，叫应用题。他会给出很多生活中的场景，然后让你用数学知识来解决。在解这种题时，其实分为三个步骤，首先是要提取出数理模型，比如常见的追击相遇这类问题，就要使用速度时间模型，然后把这个模型数学化，找出各个变量之间的关系，确定已知量和未知量，形成可求解的方程，最后求解。    编程的情况与此类似。首先要建立一个抽象描述模型，然后建立数学表达，接下来略有不同，不是亲自求解，而是给出求解的方法，也就是算法，最后把算法转化为程序。而新人通常之所以会卡壳，是由于这个流程中有两个难关。建立模型不是问题，数学表达也不难，但找出算法却是非常艰难的事情，即使找到正确的算法，要把它写成正确的代码也不容易。新人常说我在学习XX语言,XX语言真复杂啊。其实学习语言本身只能保证你在最后一步，也就是翻译代码那里少出错误，即使你顺利的学习了一万种语言，你也会觉得编程很难，如果你没有学习算法的话。    让我们找个具体的例子来说明，假设现在有个题目要找N个正整数中的最大值。显然这个题目模型很清楚，本身就是数学问题，也不需要数学表达了。接下来就是解法，新手这时就卡在这个地方了。    刚接手这个题目，很多人就会想用一种类似人类的快捷操作，比如三个数，瞥一眼就可以找出最大值，四个数也毫无问题，甚至十个数也是一下子。这时我问你，你怎么把这个瞥一眼的动作表示成程序，另外如果N大于10000怎么办。哑口无言。原因是，人类的头脑过于聪明，可以同时处理很多事务，也就是可以并行处理一定量的数据（当然大规模数据就要另外对待）。而计算机，很遗憾，没有这种能力。有人要和我抬杠，现在不是有多处理器多核多线程等各种各样的并行处理的计算机了么。我要告诉你，那些都是不同层次的概念。目前这个时代的计算机，在出现革命性的变化之前，从CPU指令的层次来说，都是单线程单参数工作的。再说明白一点，这些机器任何时候只能一次处理两个数，而且其中一个还必须已经在CPU内部了，任何N>=3个数相加都必须转化成持续的两个数相加，就是先把第一个第二个加起来得到结果之后，才能和第三个相加，照此重复求得所有的和。这时目前的科技无法改变的铁律。    这个时候我要请你记住一个重要的思想：编程中任何问题都要分解到足够小，小到机器可以一次解决的程度。回到刚才的那个题目：寻找N个正整数中的最大值。我们知道直接解决是不可能的。而按照刚才讲过的铁律，我们知道直接找到两个数中的最大值是一次可以做到的。怎样从2个扩展到N个呢。这里就是算法的天下了。一种很常见的想法是，完全可以从两个中找出最大值，再让他和接下来的一个比较，这就是N=3的情况，再把三个中的最大值和第四个比较，这就解决了N=4，以此类推，我们似乎找到了通用的算法，是的，找到前N-1个中的最大值，然后与第N个比较。不要怀疑，这个算法方向是正确的。接下来就是把它细化使他能变成代码。你注意到，首先要设法从1增加到N，而且每次前进一步都要做类似的操作。显然用一个循环来实现。每一次循环中，都需要将保留的最大值和当前的这第n个数比较，如果最大值比他大，那就保留，否则就要把最大值替换成新的。这就是条件语句的作用了。写完这个循环之后，还有些小细节，比如这个最大值在于第一个数比较之前应该是多少呢，太大的话，可能会比整个数列的数都大，这就会出问题，常用的做法是，就让他等于第一个数。然后包括读入那N个数，输出这个最大值这些琐碎的细节就属于收尾工作了，没什么可多谈的。    当然，即使是这样的小题，也不仅这一种算法。你记不记得有一种叫做单淘汰赛的机制，最后顶点的就是最大值。用在这个地方正合适。不过，如果要把这个淘汰赛算法实现成程序的话，如何实现分组，如何表达这个淘汰过程和取出顶点的值，正是算法描述里要解决的。这个就是排序里很有名的最大堆排序。一旦算法描述齐备，程序编写不过是打字校对的工作。    现在你明白本节讨论的情况的实质在哪里了吧，是的，是算法。为什么你可以看懂别人的程序呢，因为他的算法隐含在程序中已经被实现了。就像你读一段高明小说家的风景人物描写，总能在眼前浮现出那幅画面。但轮到自己写，却描绘不出那样的画面。一方面是因为你胸无成竹，不知道怎样找到可实现的算法，另一方面是即使你找到了算法，也是爱你在心口难开，也不清楚怎样去表达他。    算法总是从问题出发，通过一定的模式，逐渐细化再细化，直到可以直接转成程序。新手很难一下子领会怎样的算法是可以实现的。但好在新手接触的问题不是很难，算法通常很清楚明白，所以重点先要解决后面那个表达的问题。这就是为什么我建议各位默写教材上的例题程序的原因。很显然对于那些例题，只要你用心看过就会领会他的算法。那么，你再默写一遍，即使和他的原程序样子不一样，也总算是把这个算法表达出来了。反复这样练习，这个表达问题不就解决了么。而且在这个过程中，至少你学到了一个算法。基于此原则，任何你遇到的可以看懂的例程，我都建议你默写它。尤其是例如等级考试的题库的标准答案那样的东西，以及开源的精品代码。  我英语\XX不行，咋办    无法回避的事实，今日世界中的信息技术，绝大部分是欧美人的发明，更明白地说，是美国人的功劳。顺理成章的，各种资料文档技术手册，尤其是记载最新技术的，都是用美国通用语也就是英语撰写的。可能在其他领域不懂英语没有什么问题，但在IT业，不懂英语就是无法掌握最先进的技术，基本等于没有出头之日。    话说回来，不是说你一定要有个托福雅思的高分才能去学编程的。就编程本身而言。他所需要的英语水平不过是死记硬背三五个单词而已。你在看好莱坞大片时，一部片子下来总能记住主角和主要配角的名字吧，C语言全部关键字一共32个，而其中有6到7个的使用率超过78%。这样你还有什么可担心的。但是，要想成为高手，阅读大量的相关资料是免不了的，这个时候，英语就显出它的重要性了。    刚才谈过算法。前辈们已经总结出很多算法和产生算法的方法，我们可以直接学习。如果你积极进取，总有一天，你会发现有需要自己开创新的算法的时候。这个时候，数学功底会帮你很大的忙。也许只是数学工具在起作用，但更有可能是你的大脑受过的数学思想训练在帮助你。总之，为了前途着想，提高数学素养是没错的。这不是说多背数学公式和多做数学题，而是指一种数学的思维方式。    看不懂英语，那编程还有什么前途。数学不行，成为大师的希望不大了。不能上网，你完蛋一半。没有机器，难道要我买给你。指法不行，练去。记得没人会同情你，我亲爱的兄弟。不会就去学吧，没有什么是不可跨越的障碍。    请记住这段话：在信息时代,任何主观障碍都不存在。如果你要研发什么新技术的话，只需要一台便宜的二手电脑、一张linux光盘和一个上网账号，再加上为之献身的决心，你就可以达到想要的任何编程深度。这话是一位大牛说的，那是谁，回想一下提问的智慧，然后自己上线查。建议去“前途”看一下"
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],图灵的烟头,我练了十年茴香豆的写法  你叫我去打字???
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],iCer,有些回答在黑谭浩强，这是不公平的。这是一本三十年前的书。对于这三十年来的进步和变化，谭不可能未卜先知，以三十年前的标准看，这本书是合格的，在计算机这样一个进化迅速变革不断的领域中，一本工具书三十年后还不被自然替代，这不是作者的耻辱，这是教育体系教育机构的耻辱。讲道理，很多大学课程体系陈旧和现实脱节又不是什么新鲜事，谭浩强的书只不过一个很普通很普通的栗子而已
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],老吴贼能说,的教材有一个好处，那就是能够树立一个简单有效的评价优秀的标准。外国的教材就没有这个效果。比如说你是外国大学的一个计算机老师，自己水平也不算低，好歹也有过高级程序员的头衔。今天来了个小伙子，学这个不听话，学那个嫌麻烦，最后干脆不上学了，你对他恨铁不成钢到忍不住破口大骂，但是后来你看新闻，发现这个翘了你的课的这个学生已经是某个科技公司的CTO了。而谭浩强的教材就不会有这个问题。为什么？计算机的存在是为了解决问题，而解决问题是没有唯一的道路和标准答案的。计算机行业比的就是谁更脑袋灵活，谁更会使用工具。但是这也就带来一个问题，谁来评价什么叫“脑袋灵活”？怎么判断这个人更会“使用工具”？更擅长“解决问题”？这往往是得问题到来以后才能显现出来，而问题一旦来临，有能力的人做出来的贡献往往又不是低水平的人能评价的了的。这对于一个没有内卷习性的氛围来说，当然是没什么问题，反正东西教给你，确认你也知道怎么回事了，怎么用是你的事情，干我什么事？只要你把知识学到就算毕业，至于怎么用那我也分不出个三六九等。但是如果一个环境，或者说一个学校本来的目的，就不是为了培养人才，而是把人分出个三六九等，那这可就是个大问题了。这时候谭浩强的教材就暴露出他好用的地方来了。首先，它能把人分出个三六九等，其次他又有标准答案，只要有标准答案，小学生都能阅卷，这对老师们也省心了。归根结底，谭浩强的教材的好处，就是能不动脑子地把人分成三六九等。厉害了，我的谭。此外，谭浩强的教材还有一个好处，那就是国外所谓的好教材，往往是针对某一类人好，针对其他类人未必就好。所以同样一门C语言，有的人读A教授的书学到了东西，有的人觉得B教授的书才好是很正常的事情。但是谭浩强的教材一视同仁，所有的学习者都觉得他相当稀烂。不过有弊就有利，有的教材纵然对于学习者来说是一视同仁地拉垮，但是对于那些想把人分成三六九等还偏偏不想动脑子的人来说，这不就是天上掉下的白给馅饼么？
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,['既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。'],wanghonyu,"【说一句：我以为学过C语言和看过的都能知道我说的是什么，看来确实有些人太笨了。int sb(double sba){}这个写法是ANSI函数原型，这玩意在谭浩强那时候也可以使用int sb(sba)double sba;{   }写出。一般来说后面这个写法不会受欢迎因为它有时候会引起参数转换，但你非要这么写，也毫无问题，即使在今天你也可以这么写，这是一种特性。问题只是在于你把他写在哪里，以及你以为写在哪里的时候它在哪里起作用。====================这个事情吧，原因很简单：因为教和学C语言的人绝大部分就不准备写哪怕一行程序，所以内容改的越少越好。下面各种长篇大论论谭浩强有多少错误的，又有多么对新手友好的，其实都是扯。教过那本书的，会知道(++++i)这种谭浩强写法根本不是啥大问题，因为任何学过的人都不会这么写程序，即使谭浩强揪着他耳朵他也不会写这玩意。反过来说，谭浩强也没有啥新手友好的，来回一堆printf和*(&a++)之类的能好到哪里去？谭浩强的特点在哪？主要是一些非常“独特”和“有创意”的写法，比如说，你要实现一个x=a+b的函数，再在main里面调用，一般写法是这样int plus(a,b);.....main(){.....x=plus(a,b);...}int plus(a,b){int a,b;return a+b;}谭浩强则是写成....main(){.....int plus)a,b);....x=plus(a,b);....}int plus(a,b){int a,b;return a+b;}这东西的奇葩之处在于，对于一个啥也没学过的人来说，两种写法差不多，而对于一个学过Turbo Pascal或者类似的教学语言的人来说（比如某些教师，比如谭浩强），第二种方法看上去简直是“太规范太结构化”了。所以老谭就这么教。而在老谭时期的C编译器来说，第二种方法非常的不安全，属于作死性写法，甚至可能导致调用plus函数产生各种stack error. 但是假如你一辈子也不写任何超过三个函数调用的程序只教书，你肯定觉得老谭的东西太友好了。当然，教学生时候怎么办呢？很简单，禁止学生写多点调用的函数就是了。类似的还有这样：int *s=""kick your ass!"";.....work(){.....s[2]='s';s[3]='s';....}老谭用这种例子，让学生立刻理解了“字符串即字符数组”。很‘友好’吧？但是开发厂商不听他的话，新编译器会把s放在btext或者其他的什么地方，你对这个段写就会保护错误。那咋办？让学生不要换编译器就好啦！（其实还有个著名的Turbo C float domain error的问题。即在很多情况下，Turbo C Linker不肯链接浮点库，导致struct里面出现float类型，且调用去读入这个float值，就会出现float domain error. 解决方法是在main的初始加一行x=0.35/y之类的东西。但是这个诀窍不是很多教师知道，谭浩强的解决方法是直截了当地在所有范例程序的struct中不用float/double数据类型，然后教师们反应这办法太友好了，不用费心去琢磨到底怎么解决问题，只要告诉学生不许这么干就行了。）-----------------------------------那么现在你看老谭的书为啥这么多人用？其实是因为太复杂太难懂了，大部分教师发现根本理解不了他到底想教啥，所以就直接这里删一段那里砍一段再添加一些(比如，第二个问题，让学生去找某个古代编译器），形成了复杂的教学路径依赖。等到路径依赖形成，你再让教师改？算了算了。"
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",陈龙,给，但是换一种方式，别微信传，也别U盘。Github上创建一个，先空着。让他Star你。当然他一个人还不够，让他想办法发动更多人去Star。超过10 Star，你就把代码Push上去，然后让他Fork。超过100 Star，都不用他修改变量名，服务到家，你帮他改。然后用他的Github账号Pull Request。这个Repository留着，以后学弟学妹们都用的到。平时Private，有人找你要代码，就把他加为Collaborator。这就是Github允许私有仓库人数无限制的福利。记得找工作期间Make Public。不是开玩笑，如果我是大学老师，我就要求学生这样交代码作业。这是程序员的必备技能。我会给每一个班创建一个Organization，他们交作业我都知道，代码有问题就发Issue。全专业的学生互相Follow，谁的代码写得好，大家就Star。下次上课，我可以打开Github，讲评一下比较好的代码，也可以让同学们互相学习和评价别人的代码。大一新生入学，先学习Github的基本用法，然后一项练习就是Star学长们的Repository，为他们找工作贡献一份自己的力量，这个优良传统一届一届传承下去...软件程序的一个根本特征就是可复制性，这是其他行业没有的特质。开放源代码也是目前软件产业发展的一个主要驱动力。应该让即将从事这个行业的新人们更早更深刻的认识到软件可复制可分享的本质特点。关于如何最方便的浏览上的源代码，我之前专门写过文章。这里只给一个最简单最酷的办法，看这个视频：演示的是浏览LInux一个C程序代码。只需要把换成github.githistory.xyz就可以浏览当前源代码文件以及它的历史变更。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",Doraemon,当然可以给，但是建议你在代码里做点手脚。最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。对于那种稍微警觉一点的，会复查的室友，会把以上注释去掉，甚至换成自己的注释，到头你反而解释不清楚了。这时候就需要将版权声明放在稍微隐蔽一点的地方。比如，使用 ASCII 码来代替纯粹的英文字符，将版权声明隐蔽到运行结果里。这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件触发器，超过指定的时间才显示版权信息！如此，就既不丢人情，也不怕被卷入抄袭风波了。更新：补充 cout 和 endl 前漏写的 std 。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",程序猎人,现有回答的答案都服务太不到位了。岂止是要给啊，还要为了不让老师看出来，给改好了再给。想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？所以，要给。如果有精力还要多给几份，多改改。这是不可多得的练习重构代码的机会。一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",槿年,伤害室友感情级别，由低到高：1、给他抄。2、给他抄，但附加合理的收费。3、不给抄，但提供帮助/思路4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）5、犹豫且模棱两可的拒绝。6、用拙劣的借口拒绝。7、拒绝并附带嘲讽（划水挂科活该，您配吗？）你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",项太阳,当年学期末邻近，编译原理大作业让写个C0或者P0编译器。我上网找了个c实现的p0编译器，花了两天看了一遍，自己用Java重写了一份，打包上传交差。注意，我的版本是运行在命令行的。室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。结果你猜怎么着？？我60分，室友80分，隔壁那货95分。所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，诚不我欺。你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",提了废,你放到github上，贴上一个gpl协议，告诉舍友地址。你维护的开源项目对吧，也有你的维护记录，老师也能看得到。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",Xinyu Tan,我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。话说。。当年的代码写的真是烂啊。。。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",北南,想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔古井无波。。。小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",和平哥,我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来时间长了，他们也就都只问我思路了关系好的关系不好的知道我这么严肃也就不想抄了更新分界线我的回答的核心就是“要自己学会，自己懂”以下是一个栗子我努力往好的方向带别人难道不好么？
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",诚事不足,想起了大学的时候，一个C语言大作业，我写了90%吧。另外一个室友不会码代码，做了一些杂乱的工作(当时还没学数据库，所以自己用csv当数据库，这个兄弟的任务就是填充csv，很杂也挺费时)。这个任务是5个人一个小组，按人头排名报上去，每个人根据作业得分和排名再得分。我们小组分了一个女同学，从头到尾没做事的那种。其实这没什么，有的人做事，有的人不做事，挺正常的。但是最后要交排名的时候，另一个大概做了5%任务的兄弟，居然提议女士优先，让女生排第一个。我当时就不乐意了，凭什么我得这么“绅士”，而你们下课就去LOL没想过作业的事？然后他可能觉得我不好说话，又提议让女生第二。我还是看不过去，你排第三，自己让出排名我没意见，但是凭什么让做事第二多的兄弟让位，慷他人之慨？我室友大大咧咧的北方人，很少计较得失，虽然成绩不行吧，但至少做作业的时候态度是端正的。真就欺负老实人呗？我觉得你的困境和我室友一样的，当你室友(我故事中提出女士优先的那个男生)先向你提出这个要求的时候，他就已经在借你们间的情分慷你之慨了。但这事有意思的是，如果你不同意，反而最后是你落个口实，说你不够意思(正如我室友不答应可能就被说有失风度，毕竟码农专业妹子那么稀缺)。借作业的事屡见不鲜，我的建议是，如果对方确实做不了(我室友第一次考试写出过case1-case99这种代码，草稿纸都不够用，笑)，而且成绩差可能挂科，那看看情分能帮就帮；对方是混混日子，亦或是家里有矿不在乎这些成绩，那必然自己要为一些行为负责。别说什么怕挂科，怕影响排名，都尼玛扯淡。不帮他，让他涨一次记性，是为他好。而真正需要考虑排名的学霸，是不会出现找你借专业核心课作业抄的情况的。就酱！
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",默苍离,原回答：给啊，为什么不给，不光给，我还会手动帮他们改好，他只需要把名字签上就ok了！服务就是这么到位，您只需要支付500元就ok了，超值！什么，您没钱？吃我一记素质五连！事实上，作为一个在大学代码写的还行的小哥哥。这种事情是免不的。没人跟你借代码那只能说明你水平不行了，因为大学会写代码的真没几个。其实我大学的时候有一个同班女生，为人豪爽，跟我兴趣相投，遂结为异性父女。。。。扯远了，就是关系很铁那种，她不会写代码，而我为人懒散不喜欢文案报告之类的东西，我们一拍即合，我承包了她大学本科所有的代码工作，而她帮我搞定了大学本科所有的报告类工作。而且。。。有一门课叫，只有大作业没有考试，她的代码是我的复刻版，功能有什么还是我手把手的教她说的，结果她分数比我高。。。。其实现在回想起来，我亏了吗？没有，我觉得血赚好吗！！她亏了吗，她也血赚好吗！没我给她写代码，就她那水平她要毕业得秃了！其实吧，我的真实做法是，舍友跟我要代码，我会给，老师查重，我会提醒说你改改，也不会太上心，我这样是因为我不想出国也不要保研所以对分数很佛系，能毕业就行。评论里也有人会说什么对舍友负责之类的，给别人抄作业是害了他之类的说法。对不起我不同意这个说法，大家都是成年人，我不需要对他负责。只要他不让我蒙受损失，他需要帮忙，对我来说也是举手之劳，我乐意效劳。就这么简单，他要抄我就给他抄，他有问题问我我就给他解答，他考一百我考60那是他的本事，我不吃亏的。总有人会觉得教会徒弟饿死师傅，可我从来跟他们都不是竞争关系，他们只是我的舍友朋友好哥们，我才不会说为了他们好而不给他们这种屁话了。试问我如果这样做了他们会感激我吗？完全不会！他们会觉得我是个自私自利的小人罢了。为人处事的原则是人人为我我为人人，而不是好为人师教人做人。或许将来有一天，我有求于他，他会念我当年一码之恩，给我方便，而不是对我说：对不起，我不能帮你，我这是为你好。。。。。学校的感情是最纯真的。勾心斗角的，何必呢。你们要的表情包
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",七点,来，试试这个 ：这个东西大家应该都知道怎么用吧如果你们是手写实验报告代码的话 嘿嘿嘿混淆前（你的代码）：混淆后（你舍友的代码）：专治复制粘贴程序猴fkskkdmmrmdhdjkdk
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",那罗延,前面可以直接跳过，直接从最后三大段看起！你们老师做的什么事儿啊。。。凭什么不能抄代码？代码界宣传了那么多年的开源开源开源，都喂了狗了吗？以前微软吵吵着要干死开源的，现在不也成了GitHub的大股东了吗？还带着头的搞开源。。。你同学要问你抄代码，你让他们抄（其实说让他们抄不太合适，应该说让他们参考。。。），首先这肯定不是你的错，因为本着开源的精神，你的做法是值得赞扬的！你同学自己不做作业，被查重查出来了，倒霉也是他自己的事儿，因为这本质上是一个作业，评分标准确实是老师说了算。。。但是，保险起见，我给你出个招儿吧，绝对不会有问题。去类似GitHub这种开源网站开个账号，把你的代码传上去，然后挂个GPL3或者MIT什么的license，然后让你同学随便抄好了，查到你头上，就把网站扔给你老师看。如果这都找你麻烦，那就是你老师的问题了。有同学问，我同意but！抄代码和抄作业还是有很大区别的！如果按照我上面说的做，那么你就会有三个优势1. 你是被抄，不是抄别人的！你把自己的代码发在github不违反校规吧？(那些把“作业禁止上传到github”写进校规的大学就别往下读了，老师考试前明确表示禁止把作业上传到github的也别往下读了。。。)2. 别人抄你github的代码，那肯定是别人的错呀……和你没关系！退一万步说，请拿出证据证明是你主动给别人抄的！这种确凿的证据，除非抄你代码的同学想坑你提前给你录音，否则根本不存在！既然拿不出证据证明我是主动给别人抄的，别人抄我的github我又没办法控制的……就奇了怪了，明明我是被抄袭的对象，为什么惩罚我？3. 不要问我为什么要发github，发github好处太多了，我必须要快点发，早发就可以宣誓主权这点道理不知道吗？有的同学问，这我完全不同意哦！这种事情不能一概而论的，至少代码不行，因为个人写的代码其实是一种知识产权，并不是普通的考试答案。我自己本人就很喜欢在GitHub上公开自己的代码，不管是考试的还是paper所属的，从来没听说过有学术诚信问题。谁抄袭了，出了问题自己担着，我肯定是免责的。核心问题还是在于，你要证明我是故意给别人抄袭。如果是公开自己的作业和笔试考试答案，那肯定逃不了干系的。但是在GitHub上公开代码恰恰不能算做是故意给别人抄袭。因为这和申请专利一样，申请某些专利意味着你要公开你的设计的，这不是给别人抄袭，而是告诉别人，这是我的，不准抄！GitHub是要挂license的，一个道理，告诉别人，这是我的知识产权，你们不可以偷，license确保我可以分享的权利，你们抄了做什么用处和我无关，但是出了问题我是不管的，包括挂科！所以GitHub的license是一份具有法律效力的免责申明！既然免责，为什么要惩罚我？法盲吗？另外我要提醒大家！在GitHub上发代码，都会挂一些GPL3、MIT什么的协议，我推荐GPL3，这也是我一直用的，为什么？因为想抄GPL3要满足四个条件其中第二点和第三点就是我的免责理由！因为第二点和第三点其实是在说，如果你想抄我的代码完成作业或者考试，就请自觉去找老师自首。。。要么就别抄！任何人想要抄你GitHub上的代码，为了完成第二点和第三点，他就有义务自己向老师报告说，“我抄了某某某的代码，哪里哪里哪里是我自己改动的”，所以说，说你违背学业诚信是不正确的。如果你的同学在你的GitHub上搬走了你的代码，并且他想作业或者考试作弊，必然不会做到第二点和第三点，你的同学不单单是作弊，而且是违反了GPL，所以你也是受害者，更不应该受到惩罚。注意到这背后微妙的逻辑了吗？你在GitHub上公开了代码，挂了license，这些license是要求抄你的人必须自觉的把你的源代码附上，并告知全世界，他是抄你的，所以你也是在帮着老师奋斗在反对考试作弊的第一线知道吗？So，你把代码发GitHub的行为，意味着你做到了诚信，你也要求借鉴你代码的人也必须诚信！简直不能太正义了。。。然后谈谈你的同学，想抄你的代码，既不想让老师知道，又不想违反GPL，那只能学你的思路自己从头写呗。。。还有知友问，。。。这没有道德问题，放心。。。为这种事情较真的老师不单单是法盲，其实连是非都有点分不清的。。。应该去参加一些pedagogical的课好好进修一下。。。我自己本人也是老师，我不反对学生在GitHub上放代码，相反，我还鼓励！通过这样做，我很容易搞清楚，这代码到底是谁写的。我只想知道真相（谁抄谁的），并不以惩罚学生为乐。。。但是，谁考试抄袭别人，我就挂谁，就这么简单粗暴。。。其实应该鼓励学生们把代码放在GitHub上公开，比偷偷摸摸的好不知道多少倍，一方面是教会学生如何保护自己的知识产权，另一方面，对老师的查重也带来了极大便利（我挺腹黑的）。所以从老师的立场来说，这到底是为了什么？是为了杜绝作弊呢？还是为了享受惩罚学生的乐趣？如果是为了杜绝作弊，真的应该鼓励GitHub，让一切真相（代码谁写的）都大白于天下，查重也变得很简单。。。开源的目的也是这个，让一切放在阳光下，想抄？抄吧，公开的抄比偷偷摸摸的抄更容易监控，你抄了别人的代码，被我发现了，这科挂掉你可别怨我。。。至于把代码发GitHub的那位同学，谢谢你的合作，不然我还真搞不清谁抄谁呢。。。不要问我，。。。这是你自己的问题。。。我明显本意是在反作弊，你们要看成是鼓励作弊我也没办法……上传github并使用license，本质上就是在保护自己的代码。特别是GPL的第二点和第三点，这就是让抄袭的人自己去自首的意思不是吗？另外我不支持和老师对杠的做法，只是指出这样做是正确的。至于有些老师会因此给你零分，只能自求多福，人无完人，老师也一样……（有些老师就是不明白GPL的第二点和第三点就是让抄袭的人自己去自首的意思，也不明白鼓励大家使用github其实是对反作弊有利，既然你都上课教人写代码了，自己开个github账号和学生互加好友就那么难吗？还可以长点粉丝啥的。。。一切都很公开透明，查重也变得很容易。。。）有知友提出这样的观点我觉得说有道理，这是非常现实的考量，但从另一个角度可以看出悲观情绪。老师都不愿意被学生们当“傻瓜”，可是很遗憾，大多数老师都被学生当成了很容易就是非不分的“傻瓜”不是吗？我发现很多人都没有仔细阅读这个答案就已经开喷了……我不支持跟老师对杠！我不支持跟老师对杠！我不支持跟老师对杠！重要的事情说三遍……吃不准，你可以课上问老师啊～问个老师成本有那么高吗？另外，我开了两个专栏，发了一些干货满满的技术型文章，关注度居然没有这个答案高……个人感觉挺讽刺的……我发现很多人就是看不懂我到底在写什么。。。我这里总结一下我到底是在说什么。我的建议适合这样的你你的情况符合以上三点，并且做到以下两点：那么，上传github挂GPL是最安全最正确的做法！为什么？你的同学面临以下两个选择两者必居其一！如果违反GPL抄袭，那是明显违反你的主观意愿的！说白了，挂GPL就是给人参考但委婉的不让别人抄！PS、还有人说我一开始就嚷嚷着要抄要抄的。。。喂喂？开门见山也可以是假山好吗？请读下去。。。关于学生作业的版权归属问题，因为这和雇佣关系有巨大区别，所以学生的代码的版权不应该属于学校，除非例外情况。其实在stackoverflow上早有这样的讨论，请阅读第一高赞回答的第一句就足够说明问题了：所以沟通很重要。我知道有些学校会事先让你签合同的，真的动笔签哦！。。。这种就别想了。但是这样恰恰说明，默认版权是你的，不然干嘛脱裤子放屁呢？另外有些学校会控告你misconduct，因为你发布的作业让低年级学生作弊。。。这种情况并不是每个学校都普遍存在的。这些学校会控告，究其根本原因，他们不但允许而且支持老师们可以重复利用课件特别是试题和考题，哪怕换个老师也用一样的。。。我表示理解！但是我们这儿是不行的，课件可以重复，但是考试绝对不可以重复，因为想想就知道，你以为GitHub是唯一的渠道嘛？私底下就不能问啊？所以我们大学是不允许老师考题重复的！但。。。我只想说，事先沟通很重要！既然版权默认是你的，你有选择GPL的自由。大家要讲道理嘛。。。我还要声明一下，我也没有鼓励大家去和学校怼。。。但是有一点是肯定的（也没什么好藏着掖着的），大多数学校的学生都是弱势群体（北欧大学除外），也就是说，被不公正对待且放弃了上诉权。。。而看多了这些的人觉得这世界就应该这样，所以跑过来笑我naive。。。实际上，绝大多数事情，你是可以做到有理有利有节的，并且在动干戈之前就可以化玉帛的（事先沟通好，事后就不用互怼了不是吗？而缺乏沟通到最后搞不定的，纯属一手好牌自己打坏了。。。）。最后，我想留一个问题给大家思考，习题和考试让学生写代码，特别是take home这种，意义到底在哪里？可以互相参考吗？我们是真的想把平时不好好学习的学生们拍死在考试的路上吗？还是希望他们每一个人都能最终能学到东西并写出自己的代码呢？教育的目的究竟是什么？教育的目的是育人，不是毁人。。。这就是我所说的政治正确，然鹅还是有人嗤之以鼻！我相信，答案一定是，可以互相帮助互相参考，毕竟老师都让你带回家做了，可以谷歌可以百度不是吗？看谁不是看呢？但是请write your own code from scratch!所以我个人倾向于鼓励学生互相帮助，因为GitHub可以挂GPL这种优秀license，所以非常适合让学生互相之间公开代码互相借鉴，并保护自己的代码，但是必须要严惩抄袭的学生！另外，作为一个多年写代码的人，我可以告诉大家，不论你是菜鸟还是代码高手，当你写代码没思路的时候，最好的办法就是去读别人的代码并从中借鉴。。。只要你还在写代码，你一定会一直不停的阅读别人的代码。。。开源的出现不是没有原因的。再这么添加下去，文章要越来越长了。。。我个人不喜欢修改已经写过的东西（除非是错别字这种），会造成上下文缺失。希望这是最后一次添加。。。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",Shannon,最简单的办法，就是掩盖你已经写好代码的事实，反过头去问他要代码。这样一来，他一定不会再跟你要代码了。在最终要交作业的时候，佯装熬个夜啥的，最后一刻提交。既保护了你的代码，也不至于伤害室友关系，某种程度上还能树立你牛人形象，毕竟我在大学期间就特别羡慕那些熬一夜就能解决任何问题的人。这样做唯一的不好，就是有一点虚伪，对朋友不诚实。但是我要告诉你，当你今后步入社会之后，会经常遇到类似的问题，我把这类情况总结为：“能帮，不想帮，不帮伤感情，帮了我吃亏”。朋友借钱，你明明有钱又不想借，怎么办？同事让你加班帮他干点活，你明明会干，但是就是不想干，怎么办？亲戚想借你车，你正好不用但是就是不想借，怎么办？这种情况通常面对的都是非常要好的亲朋好友，你绝对不想因为一件小事而弄得不愉快或者从此心存芥蒂，但是你又不想当包子让自己吃亏。那么怎样才能在不伤害感情甚至不明确说出拒绝的情况下，处理这种情况呢？很简单，。朋友买房跟你借钱，你可以说：“老婆想换辆好车，正想找你借点钱呢，看来咱俩手头都紧啊”同事让你帮他干活，你可以说：“正想找你帮我弄个xxx呢，看来你现在真忙”亲戚想借车，你可以说：“我也正想借辆车呢，我的车不跑了”然后，你的困扰就解决了。当然，诚实永远是优秀的品质，只有面对无理的要求时，适当的不诚实，可以让大家不至于那么难堪。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",超级小華,身为一个大学前有点基础的留学生，我大一给几个有些困难的朋友轮流写过作业。我们有的课程甚至可以复制代码，网上的别人的都可以，但要写明出自哪里。我喜欢编程，多写点也无所谓。他们不想学就不学，多点时间做自己想做的事。我也不在乎别人成绩超过我啥的，听起来可能有点虚伪，我甚至不在乎学历一类的，毕竟走出学校去工作去科研，还要看真本事。人都有自己想干的和不想干的事，想做什么做什么，想给就给，不想给就不给。说到copy代码，最近看到个笑话挺有意思，大家笑一笑就好thx~
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",老仙奶我写出bug,给。大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。后来我创业，室友从上海赶到北京帮我做了3个月。我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",刘明,曾经我把我的数据结构与算法课设代码给了别人，然后他又给了别人，然后别人又给了别人，然后又.......最后他们成绩90+，80+，我却只有74分………………
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",编程狮(W3Cschool),回答有讲自己经历，讲自己的处理方式的，也有质疑舍友的关系的，这些都不是问题的关键关键是，题主问了这个问题，答案已经很明显了。这个问题不涉及编程、不涉及代码，也不涉及什么作业……大体上可以确定，题主犯上了取悦别人的毛病，即不敢说“不”如果你们几个的关系比较好，你说不让他抄，是不会伤害彼此之间的感情的，但是你拿捏不准，害怕伤害别人，如果我不给舍友抄，一个小小的作业，就让我们的感情散了，不值。造成不敢说“不”的原因，只有一个，那就是你高估了说出“不”后，对舍友的伤害。你拒绝给舍友抄代码，你觉得会伤害感情，舍友不会这么想的，在他眼中，这是小事，一两天后这件事可能就把它忘了，除非你们只是表面兄弟。当然，说不也是有艺术的。假如你告诉舍友：“”是谁都会种想踢死你的冲动。最好的方法二十四个字：说出类似的话，我不相信会伤害你们之间的感情。还有，最重要的一点是，，越拖，越容易伤害感情，越犹豫，舍友觉得好像有希望，就很想继续劝服你，可是你又不给，来来回回，久而久之，结果就不言而喻了。——以上是来自W3Cschool的回答。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",曜日,"用rust写代码，我大一一直用的c,cpp写代码，主要也是课程要求，后面没有语言限制了，我就用rust完成我的大作业，因为这语言用的人比较少，老师看了肯定有印象，而且也不好改动，我的室友看了我代码一般都会知难而退，因为这种语言老师一般都会多问几句。"
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",PcPc,取决于你室友是什么样的程序员：改改variable的名字交了，结果查重99%重复，卒。：改variable名字，改代码结构，你用for loop，他写个while，你用array，他改用ArrayList，运气好查重查不出来，改的差一点的，卒。：改variable名字，你用for loop，他写个lambda for each，你用boolean，他用int表示，你用equals，他写个comparator，你代码600行，他代码400行，你甚至一度怀疑自己是不是抄的他的。其实抄代码也是一门艺术，抄的是思路，不是语句。抄的好代码整洁度++，抄不好return重修。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",匿名用户,我以前都是传 GitHub 上的，一份作业被 star 二三十是常事，额，我觉得给他们参考参考不是坏事，也有不少人给我留言提建议，毕竟代码嘛，cv 是正常的事，但是精髓还是要懂才可以安心 cv
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",阿衰,没事，给，给的时候笑着说“老师说过要查重的啊，万一翻车了别把我卖了“。然后老师如果问你是不是自己写的，你说是就行了，自己写的代码也不怕问。至于他们突击分数万一比你高，这个不重要，写代码的专业最后都要靠实力说话。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",精神病人思路很广,"建议新建一条专门给室友抄的分支利用重构工具，把类名改成class1,class2,class3这样的；变量名一律temp1,2,3；把注释全部删掉，顺便写一点匪夷所思的逻辑进去；不要模块化，尽可能复制粘贴总之，阿里的开发手册让你怎么做你反着来附上几张图（转载自：java版web项目），给你做个示范，更多："
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",一月三十一日,代码的事儿，怎么能叫抄呢？那叫开源
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",一只产品狗的蜕变,类似题主这样的情况，我这里也遇到过，但是你把代码给他们之后，你再把你的这版改进一下，比提供给他的这版要好，界面风格也要改一改，不然抄袭你的反而被老师评得比你高分，当然如果你不介意大度一点也行吧。但不能让他们过度依赖你，最好教会他们自已改成他们想要的风格，不然你会被累死。所以，给对方埋bug这事最好别做，搞不好，有些人反而觉得你故意整他，你还帮了倒忙，小心别人打你。软件编程这东西，如果老师很认真考查，询问编程思想的话，不是他亲自写的话，他也回答不上来的，你始终是最优秀的。软件编程，很多源代码在网上也是有的，很多人都有使用，那叫代码复用，但不能照搬，适当改一改实现方式，逻辑稍改进一下。记得我毕业论文，班里有大部分同学抄袭我的，还偷偷请我吃饭，给我好处等，但是我要是不帮他们，就有可能无法毕业，我就全力帮他们，但是为了确保不出问题，我先给他们讲一讲我编程的思路，他们了解清楚后，稍微改一改，把变量名，逻辑或界面风格改一改，数据库结构也改一改。同学嘛，真的能帮到他们，他们会非常感恩你的，树立一个好的口碑，因为这是他们做不到有求于你的，前提是不能影响到你自已的前程。换句话说，处理得当的话你也得到了锻炼，一套系统从不同角度实现，如果可以的话，架构时模块化设计，尽可能耦合度低一点，加入不同的补丁就有不同的系统风格。比如支持不同数据库配置，不同界面配置，数据库表自动生成工具提供给他们，他们输入参数直接生成表单，这样就更灵活了，老师也看不出来有什么大问题，那你就牛逼了。班里所有人用你这一套，适当配置都可以应付过去。我的舍友我帮过好多，他们还说我废人呢，经常外面混不好好听课，不过我帮助了别人，别人一直记得我的好，将来出了社会只要有什么需要帮忙，他们也都尽全力帮忙，礼尚往来。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",will,我前公司老板，浙大的，上了课才知道不喜欢计算机，然后天天抄室友的作业，自己到处出去搞社团，啦赞助，两个人都相互佩服。现在那个室友后面读完研究生之后就直接是我那个公司的一个技术总监。看周围环境吧，如果你是清华北大什么牛逼的985，那周围肯定会出几个人才的，看你觉得他们是不是人才了。如果周围都是那种不思进取的，那你看心情咯补充:其实我想表述的是看你自己愿不愿意给室友抄，如果周边都是那种奋进者，不是游手好闲，抄作业只是为了打游戏时间的小同学，自己心里有杆秤。至少我抄作业的时候，会避免出现比学霸室友分数高的情况，要么字丑，要么写错。另外，我们这个公司可不是一个创业初期的哦，现在应该挺大规模了吧。我当时在的时候虽然还是人事有点乱，但是利润已经很可观了。然后我身边同事有2个浙大的，我只是末流211，他们见领导的次数比我多好多，和我同期进入，做了3个月，基本内定主管了，但他们确实有实力，而且人很好。不过这两货都考上本校研究生，走了。对于我来说，老板每次开大会都要说这个例子，我也不敢去求证，他应该想表述大家进来的圈子很高，周围的人都很优秀，可以多学习之类的吧。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",马遥,主要还是看你们之间的关系，以及你以后想要营造什么样的关系。如果平时他们在别的地方很帮忙，你们关系很好，那抄就抄了，有锅一起背，大学老师一般也不会真的怎么样。我和大学室友就属于这种情况。（如果这门课真的查很严，那你就得和他们一起改；甚至得先改好一份专门给他们抄，否则全都挂科也很麻烦。）如果平时你们关系一般，义正言辞的拒绝抄袭也是不错的选择。毕竟问一个关系不好的人要作业抄，是他厚脸皮在先，那你也可以拒绝。一般人被拒绝会想别的办法，不会太计较的，只可能会觉得你有点小气。如果一个人因为这事对你怀恨在心，那就算是认清了一个人，也值了。我想说的是，大学的时候可能意识不到搞好人际关系的重要性，以后会越来越觉得重要。大学室友之间的关系其实还是挺近的。进入了社会你会发现大学室友虽然和你不是从小认识，但是你们的事业、社会层次、圈子都有相近之处，会比你的高中同学近得多。所以把室友当成真正的朋友对待，理所因当，而且长期看都是你的财富。俞敏洪也经常说起类似的事，他帮几个室友打了三年热水，后来创业的时候几个哥们爽快的借给他不少钱。搞理工科的男生，人机交互多，人际交互少，人际关系有改进空间。所以我费劲打了这些字。
室友想抄我的代码，给还是不给?,"['一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。', '而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡', '但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？']",北极,如果是我的话，给，然后自己再写一份。我大学里曾经一个人写了二十几份不同的代码，班级里真正自己完成的人不超过十个（小班）。能写出完全不同的课程设计，对自己的编码能力是会有很大的提升的，如果有能力，建议多写几份。BTW:我毕业论文写了5篇，两篇优秀，如果算上大三的时候帮别人写的，一共是7篇。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],欢喜的慈雨,当你看到一个程序员的两只手在键盘上上下翻飞，行云流水的时候，多半不是在敲击代码，大概率是在跟产品经理撕逼讨论需求另一种可能就是在跟测试打口水仗10%几率是在论坛码字摸鱼1%几率是在跟MM聊天可以手速飞快而不需要停下思考的代码，多半也可以靠Ctrl + C/V 搞定。而当你看到程序员双目呆滞，遥望天际的时候，多半编程开始了——————————————6月7日更新没想到随手写的段子竟然戳中了这么多人的心。感觉就像随手划了根火柴，却炸翻了整座山头既然这样，那我就多说点儿。每逢项目之初，我们飞速写下的每行代码，都宛如十四行诗般简洁优雅，每个变量都宛如慈父膝下的爱子，名正言顺感觉每一处精心设计的逻辑，都是一段完美的乐章，应在维也纳的金色大厅永久传唱每一段完美实现的逻辑代码块，都应该镌刻在石碑上，供后辈顶礼膜拜就在你得意之际，更新时，一段“ int aa = 0;”莫名出现在你的代码里，这感觉仿佛是石碑上被油漆笔歪歪扭扭喷上了“XXX到此一游，嘿嘿嘿”一个不孝忤逆的逆子，让你血压飙升，头发尽断满屏的诗和远方，瞬间成了眼前的苟且—————————9月29日更新随着窗外街灯的亮起，夜谦卑地跪在你的面前，奉你为此间的主人，双手呈上久违的宁静你其实并不喜欢加班，但却有些享受在办公室独处的感觉。日间的嘈杂、突如其来的会议、打断思路的问题让你无法集中精神反而是现在，除了机箱风扇散热发出的轰鸣声，和空调百叶偶尔发出的咔哒声，周围一片，万籁俱寂。你伸了伸懒腰，略微活动了下手指，戴上耳机，颠了颠手边略沉的快乐水，一切准备就绪。空灵的音乐带来无比的专注，专注的力量令你灵感迸发，敏捷的思维仿佛是疾走的奔雷，划破厚重的迷雾，整段代码原本错综复杂的逻辑，被瞬间照亮，清晰无比。在这一刻，你是无比自信的，思路没有丝毫的滞塞，指尖在键盘丛中飞速游走，轻盈弹跳，整块代码一气呵成，逻辑完整得就像整除一样干净利落，没有丝毫得拖沓。用户的每一步操作、每一处错误，都在你的意料之中，你就像是循循善诱的牧羊人，指引着迷途的羔羊，重返阳光大道。用户仿佛是你座下的子民，按照你预定的轨迹，徐徐前进。而你，此时此刻，便是此间无可争议的王。......一个电话突然打了进来：“先生，您的筒骨粉到了，给您放到楼下门卫那了，祝您用餐愉快！”“好的，我下去拿。”你将剩下的快乐水一饮而尽，空易拉罐被捏成一个小蛮腰，划过一道完美的弧线，落入垃圾桶中。你胡乱地踏了双人字拖，渐渐消失在昏暗的走廊尽头，唯有油亮的脑门和门禁的荧光绿，在黑暗中若隐若现，遥相呼应。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],微笑的橘猫先生,我来回答一下吧，一天7.5个工作小时。1.早上九点到公司，打开手机看会儿新闻，朋友圈。2.开始进入工作状态，看哈需求有没坑，再构思一下怎么写会好点。3.开始vc大法，找找以前的代码，copy一下，看一下能不能运行。如果没有，差不多就自己写，开发工具也很智能，给出提示，自动补全类。如果没搞过的，百度一下，看看别人怎么写的，能拷贝就拷贝。4.大约10.30左右，休息一会儿，喜欢抽烟的就去抽烟，不喜欢抽烟就刷一会儿朋友圈，讨论一下中午吃什么。5.这时候差不多11.30了，停下工作，准备吃饭了！6.中午吃完饭肯定是要睡一下，13.30开始工作，这种状态能持续到15.00左右。7.休息半个小时或者一个小时，聊天，抽烟，刷朋友圈。8.差不多16.00到17.30再次进入工作状态。9.准备下班了！ps整个开发过程内心是这样的傻逼客户，提的垃圾需求傻逼项目经理，做的垃圾计划傻逼产品经理，做的垃圾需求，看不懂傻逼测试，不会测试，乱点傻逼同事，写的垃圾代码傻逼架构，搞的垃圾架构傻逼百度，找不到查不到想要的问题众人：傻逼开发！
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],程序员客栈,直接上视频，看看现实中程序员和想象中的程序员敲代码有何不同！是不是发现自己生活被偷窥（手动滑稽现实中，很多程序员更熟练运用 Ctrl/Command + C 和 Ctrl/Command + V。拿到一个需求，先搜有没有轮子，能直接用，绝对不自己写。能通过改改改就能用，绝对不自己写。当然，如果他写的烂，我还是会嘲讽一波，然后自己写个更好的（手动傲娇我们签约经验丰富的程序员，采用线上开发、驻场工作、招聘猎头等方式，帮科技企业解决软件开发和技术用人难题，为程序员提供新式工作机会。程序员客栈的使命是为程序员服务，当好程序员的经纪人，布道先进技术。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],丁长老,飞快敲代码？不怕秒得腱鞘炎吗？一天也就是100-200行代码，加上IDE的各种神奇自动补全功能，能敲几次键盘？如果我听到我的组员在飞快的敲键盘，我都不要站起来看，就知道他们在撩妹，不会干别的，一定是在撩妹。【此处有神秘的微笑】
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],一叶之秋,先上图拿图的请自觉点赞10点前一秒赶到公司打卡范围钉钉一下慢悠悠挤电梯，上楼，放包，摆正电脑下楼买个包子或煎饼或灌饼，顺便带一杯咖啡或脉动或气泡水吃完早点10点30啦，然后开始美好工作新一天打开文档编辑器浏览器等乱七八糟然后开始刷微博刷知乎刷微信刷一切或者去论坛啊社区啊指点江山围观热点刷到11点，看看领导状态如果盯着我或者来姨妈，就放下手机回忆回忆昨天的进度如果开会或者春风满面，继续刷刷刷反正上午是不可能敲代码的除非到了deadline11点半到45之间开始幻想中午吃啥11点45开始腾空肚子12点准时拉上小伙伴抢电梯12点45或13点基本吃完饭又回到工位趴着简单刷下消息，然后开始睡觉睡到14点到14点30（看有没有人催）然后倒杯水，看状态迷迷糊糊到15点或15点半开始正式敲代码 敲到18点，下楼吃饭，不饿就下楼散步19点上楼继续敲代码，或者开始搞点新技术什么的基本上没有需求就是自己玩奇奇怪怪的东西 敲到17点，周一评审会，周四研讨会，周五定审会开会大约到18点30，然后下楼吃饭19点多点上楼，敲代码，或者开始搞点新技术什么的或者继续开会然后到21点看情况加班，比如上线或开会或挨批或批人下班以后10分钟走路到家（住的比较近）或者磨叽到10点就打车去远处朋友家彻夜撸串，或者去夜生活什么的带薪抽烟一天大概五六次的样子，一般10-15分钟，可混时间约1小时带薪拉屎基本上还是要分情况的，小号才是真的个人需求，大号都是混时间，正常人哪有那么多屎。。。大号20分钟起步吧，大概2次左右，连带着小号又是1个小时过去了基本上每天就是下午那两三个小时加上晚上一个小时，这是10 9 5工作制度10 7 5工作也差不多，只不过下午就纯敲代码，19点下班，正经工作时间差不多，但是思维比较连贯，效率稍高一点而且因为没有晚饭时间，所以加班都很急，赶紧干完赶紧走，反正没有补贴，磨叽到10点要三个小时，实在难熬，所以基本没有打过车。。。但是需求来了就真的急，往死里逼那种晚上回家熬夜继续敲，周末在家自己想办法搞定，高铁飞机继续敲紧急情况一个电话打过来，地铁上开个热点就是干所以电脑随身带，有事没事都得背个包有些复杂需求随便搞搞就到了23点了但是23点打车，显示排队50位+。。。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],张洪涛,不，荧幕上电脑高手的原型，并不是现实中的电脑高手，而是作家本人。只有作家才需要噼里啪啦的敲键盘，这样才能让输入速度赶上他的思维。而编程语言的信息含量要远高于自然语言，所以不管是读、还是写，都远比自然语言要慢。所以初学编程，千万不要因为自己无法“流畅阅读”代码而自卑，谁都办不到的。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],疯狂绅士,————没想到这么多赞，那就补充几个具体的案例吧。——————某些跟数据库有关的项目，CV大法比自己敲快很多，也少出错。很多时候有很多字段，因此写增删改查的时候。往往是想把一个表的字段拷贝到注释的地方然后一个个剪切或者拷贝粘贴弄到相关的代码里。这样比自己敲，更不容易出错。————一些算法要求比较高的项目，但是在上，比如github只有py的，而实际项目是用php的，这个就蛋疼了，需要改。而具体操作就是像素级别的改写，具体操作是一个一个函数拷贝过去，慢慢改语法规则。——最后，现实中程序员能飞快的敲代码是一个流传很广的谣言。事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。这个谣言跟一些谣言有得一拼，如：
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],文森特·凡喵,买过编程类图书的人应该都知道O‘REILLY的大名，这个系列的图书封面辨识度很高，标题之外通常会配有一个手绘的动物形象，比如这样:有网友制作了一个O‘REILLY封面（链接在文末），让人们可以自己填写文字内容，生成类似风格的书籍封面。于是就有了以下的作品，调侃了现实中程序员的工作状态：「Copying and Pasting from Stack Overflow」「从Stack Overflow粘贴复制」「Trying Stuff Until it Works」「不断尝试直到成功为止」「Changing Stuff and Seeing What Happens」「改变一些代码看看会发生什么」「Googling the Error Message」「搜索错误代码」生成器链接：国内网友制作的版本（支持中文）：
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],baicaioyzy,Google在职程序员，坐标硅谷。写代码的时候，我有相当一部分时间在【Ctrl+C】+【Ctrl+V】。Google internal IDE Cider-V的AI插件会随后自动猜测出我大概要写什么代码，然后自动填写大致内容。之后，我会扫一遍代码，确保没有逻辑错误，并且进行调优。我的大部分时间其实花在并不限于：如果我以180迈的速度飞快打字，那只有三件事：最后给大家欣赏一下我的工作专用：更多文章，请关注我的专栏：
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],南山烟雨珠江潮,一定要用机械键盘，因为声音大，要干就干得轰轰烈烈，让全世界都知道你每天8小时都在写代码；一定要用vim，因为快捷键多，可以增加按键次数，让别人听起来你一直没停；按回车键的时候一定要最用力，让别人知道你这么快又写了一行；按删除键不要太用力，否则别人会认为你老在写没用的代码；一定要戴上耳机，因为别人说你太吵你可以假装听不见。再补充一个，就像评论里面很多人同意的那样，机械键盘要选青轴，青轴可以敲出很悦耳的声音，传说可以练成钢琴手。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],Ji Heng,Google研究过，一个程序员一天能够写出的高质量代码也就是100-200行。哪里需要飞快的敲键盘。像sloth一样一指禅都来得及。程序员工作的本质是用程序来解决问题。程序员大部分的时间还是用在寻找解决方案，测试验证方案。用在敲打码上的时间很少。如果你看到程序员在飞快的敲代码，那多半是在和PM撕逼，或者写文档。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],啊窝额,自己剪辑的视频里面有一段就很好的诠释这个问题。代码从没飞快过，只有我们被气的飞天。写代码总共有两种情况1、一动不动的呆着，想了半天，哦，要这样，然后一个一个的打出来，速度慢的旁边人看着都急。一般逻辑性强的人，打得非常慢，也非常稳，飞快是不存在的。2、复制粘贴小修改，开会撕逼再吃饭。程序员不会追求飞快，那样是无意义的，要追求的是思路清晰，码字沉稳，中间不会被产品、运营、实习生等一系列问题打断。一个人安静独处时多么重要，就跟程序员的电脑，下班后从不会关机一样。而现实中想更快速更沉稳的敲代码，只可能多练，多敲，多看项目，在自己脑子里形成事件线路。就跟我们要多刷题是一样的道理。来来来，赶快把下面小项目都收藏了，让手速，快人一步。 资料链接： 密码：eilw  配套资料：  ：220t  配套资料： 提取码：i9o3  配套资料：  提取码：i4m7  配套资料： 提取码：8t6e  配套资料： 提取码：twc6配套资料： 提取码：oa6k 配套资料： 提取码：8t6e  配套资料： 提取码：cuw2    点赞数上升有点快啊，那就五个视频都给链接吧。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],非墨,"呵呵，不要被电影骗了，就算是黑客，也用不着噼里啪啦没完没了地敲键盘。剧情有趣还表现真实（仅指操作计算机）的黑客类电影我安利《防火墙》（主演:,曾饰演《空军一号》中的美国总统），虽然里面用的是老掉牙的 Windows XP，好在 UNIX/Linux 及 iptables 这些年交互上并没多少变化。瞧瞧人美国总统（哦不，安全主管）和黑客敲代码/命令的“速度”，已经非常快了，但也没有不停的敲，毕竟电脑运行也要时间。而程序员是不是抢票都要写代码？这得说说为什么要写代码了，写代码的目的就是把流程描述出来，然后嘛，让机器替代你不厌其烦的、没完没了的执行呗。所以，抢个票为啥要边写代码边抢呢？写个 JS 让他不厌其烦的替你点呀点呗，至于程序员，喝杯茶听听歌，等着唱“在那山的那边、海的那边有一群……”。围观一下最早的作者。当然了，现在都被收编了，铁老大也松口开始开放更多接口创收，抢票插件/软件也都不再那么没个正经了。现实中敲得快不快，别人我不知道，至少我敲了一二十年，肯定没此刻打字快；敲 10 分钟休息 1 小时，挠挠头、喝喝茶、吵吵架，基本上就这个样子。关于敲代码快不快有个悖论：如果对一个问题很熟悉能连续的敲代码完成这个任务，那么我为什么要重复地、不停地敲呢？把它封装好下次直接调用/设置不就行了？所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。"
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],JinqianLi,电视剧看多了吧。程序员更多的还是脑力劳动，而一些影视作品里那样霹雳哗啦的敲键盘的是真正的体力劳动。中操作无人机手指都没接触到键盘，一大堆代码就噼里啪啦出来了，你也敢信？先说下我前天的工作：9点起床，洗漱；9:10分开车到公司；9:30到会议室开会；11:20会议结束，去泡壶枸杞菊花茶；11:30处理邮件，打开聊天工具看下消息；12点打开IDE，准备写代码。突然惊奇听到同事喊吃饭。13点午休；14点起床，上个厕所先；14:10分回座位的路上巧遇产品经理，一起顺便讨论个需求；14:50服务器同学说对下技术方案；15:30测试同学问这个需求怎么测，一起过下用例；16点参加隔壁小王同学代码评审；17:30回到座位上，旁边的同学问这个技术难题怎么解决，去帮他分析问题；18点以为终于可以敲代码了，却又惊奇发现到饭点了，先去跑个步；19点跑步结束，到家了，吃晚饭；19:30去公司；20点再开个会；21:30写个周报月报总结专利啥的；22点终于顺利打开IDE准备干活，leader丢个bug过来，这个问题你先看下，和测试沟通怎么复现，然后看代码；23:30夜深人静，终于可以敲代码了……在敲代码的过程可以很快，可以基本上不停，但是在实际工作中占比很少。因为前期杂事比较多，会议多，沟通多，讨论多。有产品经理，有测试工程师，有PM，有设计师，还有leader，有bug。在编程过程中，脑子中思考的是各种各样的逻辑和架构，注重先思后写。在开发一个较复杂的程序前，会经历很多步骤，比如画流程图，写文档，画架构图等等，而真正的编码则是在一切都想清楚以后才会开始进行的。甚至，高级程序员可以使用编辑器和IDE的自动完成功能，避免手动输入代码的错误。除了之外，还有很多其他自动完成功能可以同时启用。比如自动完成行，自动完成文件路径，搜索所有打开的文件自动完成词等等。某些程序员不用这些功能并不等于它们不存在或者不重要。所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。练成熟练而快速的敲击并不是一件很难的事情，也许不到半年就能练成，但是能够编写出低耦合高效能的代码却是一个程序员毕生的追求。事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。所以别被电影中的那些镜头给欺骗了。理想很丰满，现实很残酷，同志们还需多多努力。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],程墨Morgan,这几点：这次我真的凑不到7了:-)
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],lymim lee,我为什么想当程序员？就是因为太懒了，同一件事干多了就干不下去。所以我要用编程语言告诉蠢萌的电脑，遇到A情况应该怎么做，遇到B情况应该怎么处理。然后让它一遍又一遍地重复我不想做的事情。所以思考的时间至少是输入时间的3倍，跟写文章差不多。敲代码也是一阵儿一阵儿的。--------以上是理想情况，现(zheng)实(qian)的情况是：我就是甲方的翻译，他需要什么功能我翻译给电脑。然而很多甲方并不知道自己需要什么功能，然后电脑干的不对还要甩锅给我。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],GitHub Daily,最近，国外有个叫 Mckay 的开发者，基于  做了一个代码助手：，特别牛逼。它可以通过语音对话，自动帮你生成代码，并将代码推送到 GitHub，部署至 Vercel。就想钢铁侠电影里的贾维斯一样，自动帮你搞定一切！此外，里面还提到了一款名为 CodeWand 的工具，它能通过自然语言，结合 GPT-4 来快速开发应用。不过目前还在内测，需要申请才能试用。最近几天，我接收到的 GPT 和 ChatGPT 相关内容比较多。为了方便自己后续学习与阅读，我整理了一下 ChatGPT 玩法技巧和实用工具，最终弄成了这么一本《》手册，有需要的同学，可以学习下。手册地址：文末，照旧安利一波我们的公众号：，平时主要分享比较实用或有趣的开发工具与 GitHub ，偶尔也会聊聊技术圈内最近发生的新鲜事，感兴趣的小伙伴可以关注一下～
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],陈龙,看到这个题目就猜到高赞那个视频会出现，我也知道关心这个问题的人都不是现实中的程序员。真正的程序员必须明白一个道理，程序的灵魂是可复制性。可复制性也是软件开发区别于其他行业的最显著特点。可复制性有两层含义。一层是说代码客户有多个实例在运行，同样的程序可以在你的电脑上跑，也可以在别人的电脑上跑。另一侧含义就是代码可以开源，大部分通用需求都有开源代码可以用。一个程序跑起来所需要的代码，绝大部分都是别人写的，即使是一个“Hello World！”。程序员敲代码速度多块，都比不上找到合适的开源代码快。当你要实现一个需求的时候(例如解析一个Excel文件)，如果完全自己实现这个功能，敲代码再快也不如找到一个合适的。所以，：我要实现的功能难道只有我这个产品用到吗？还拿的例子来说，难道世界上就没有别的程序员遇到要解析Excel的需求？既然有这个需求，就早有人做过了，我绝对不是第一个遇到这个需求的人。如果有人做过了，多半就有开源代码可以用。上面这步非常重要，找到适合自己的开源库、框架、组件，是快速高效开发一个软件的前提条件。然后才是敲键盘，当然还有Ctrl C/V。记得很早以前，刚毕业的时候吧，有一次去外文书店。书店里正在播放一个英文听力VCD，场景是在森林里父亲教孩子打猎。父子俩藏在草丛里，动物出现了，孩子比较慌张。父亲在儿子耳边说了三句话：First，listen。Second，think。Third，Action！我觉得短短这几个词组成的三句话非常有用，特别适合现实中的程序员们。首先，要听。听什么？做项目，听用户的声音。做产品，听产品经理的讲解。了解需求，知道真正的需求是要做什么。否则，干活不由东，累死都无功(我初三班主任经常说这句话)。然后，要想。想什么？如何能够高质量、高效率的实现功能。这其中就包括上面提到的常见通用功能如何找到可靠的开源代码。最后，才是行动。这一步才是编码。如果没有上面两步就开始编码，上午敲得多快，下午删的更快。其实，现实中的程序员，一项核心能力要求就是：
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],lucius,你如果听到同事键盘噼里啪啦，手速飞快，大概率是在聊天打字，记笔记，写文档等！编程功底再深，写代码也是需要思考的！教学视频里老师编码那都是敲了无数遍的结果
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],编程小老虎,短答案：敲代码的过程很快，可以基本上不停，但是在实际工作中占比很少。因为前期工作很多、很多。首先大佬会提出一个 idea，假设从 lead 这个 idea 开始。这时候基本上大多数时间都是在读代码库、看之前的相关 bug、写文档以及和各个相关的人讨论、调研。把详细的设计、工时以及 milestone 都搞出来。拿到划分好的模块之后，这期间就可以开始构思怎么实现了。有必要的话我一般还会写一个小小的 demo。主要是思考过程居多，敲代码实际上很少。一般会考虑参考资料：我的回答 这些都搞好之后，就要开始敲代码了。如果一天 8 小时算，可能平均正式敲代码的时间最多只有 1-2 小时。其他的时间全部基本都在准备编程。在这 1-2 小时内，编程基本上很快，就像代码已经提前打印在脑海里一样，直接往外冒即可。如果途中遇到卡壳，一般是搜索，看看常规的解法。Stack Overflow 肯定是必须要参考的网站之一。所以到真正敲代码环节实际上是非常迅速的，只可惜大部分时候我（们）都没有在敲代码。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],小明,我的键盘上，ctrl键，c键，v键，已经掉漆了，因为我敲代码太快了。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],天台,哒哒哒，看会QQ……哒哒哒，看会微信……哒哒哒，这咋写，Google一下……哒哒哒……不写了，摸会鱼
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],AsuraHaku,在纸上涂涂画画拿着笔冥思苦想飞快地建好一个文件，敲了几行字，又用鼠标点了几下对着桌上的纸冥思苦想断断续续建新文件，敲字，按着 Ctrl C、Ctrl V、Ctrl X、Ctrl D/*、Ctrl Z、Shift Ctrl Z*/之类的快捷键。点点鼠标，对着桌上的纸冥思苦想好像发现了什么似的，开始调参数对着屏幕冥思苦想开始写文档
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],匿名用户,飞快敲代码？要搞死自己吗？测试组听了喜笑颜开，这帮人在飞速给我们提供业绩？正常程序员一天编程是这样式的9.00到公司，带薪拉屎半小时9.30看需求，得出结论，产品傻逼10.00怼产品或被产品怼半小时，结果：需求不变，增加某某功能10.30搜索某某框架实现某某功能，得出结论：需求很简单，目前项目改下这里，改下那里，半小时就能搞定，但是我现在干完傻逼产品会给我其他需求，所以下午再说10.40与同事讨论中午吃啥10.45定外卖11.00划水11.30取外卖，吃饭，午休1.30划水2.00划水 3.00 差不多了，身为软件工程师的我经过一上午加半下午的深思熟虑，这个需求终于要被我攻克了，奥利给3.01ctrl＋c......3.02 ctrl＋v.......3.30好像那里不对.....算了能跑就行3.40卧槽？3.50卧槽！！4.00卧槽卧槽？？4.30卧槽卧槽卧槽！！！！5.00槽.........6.00.............7.00槽！傻逼产品，定的啥需求，傻逼作者，博客上的东西不能写全面点嘛。原来这个功能这么简单啊，不愧是我！算了算了，混个加班再走吧
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],飘逸的师兄,难道不是...每当老板悄悄地走进技术部，有模有样地拿着一个工头杯，抿着几口中年男必备的枸杞水，在大家后方若无其事的闲逛时，程序员的敲代码速度才是真正的职业巅峰吗！？老板时不时就斜视的小眼神，“如狼似虎”般，在你后方散发着寒意。那如芒在背的感觉，逼迫着每位程序员紧急地进入“演员模式”，大家正襟危坐，屏息凝神，蓄势待待。只要警觉到老板的脚步，正在靠近自己，并且只有5米的距离。他立马就“asdfghjklqwertyuiopzxcvnm...”，一顿键盘声啪啪啪，即可响起，紧接着再来一顿“BackSpace”键狂按，各种奇淫巧技层出不穷，如此反复数十次，直到老板的脚步声渐渐离他远去为止。只要老板胆敢一只脚踏出技术部，他立马光速Ctrl+Tab切出浏览器，继续强势膜拜与学习知乎上各位德国大佬、日本大佬、灯塔大佬、迪拜大佬们刚下飞机的故事。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],徐百恒,"孔乙己便涨红了脸，额上的青筋条条绽出，争辩道，“复制不能算偷……借鉴！……程序员的事，能算偷么？”接连便是难懂的话，什么“php是世界上最好的语言”，什么“hello,world”之类，引得众人都哄笑起来：公司内外充满了快活的空气。 听人家背地里谈论，孔乙己原来也自己造轮子的，但终于没了热情，又不会重构；于是愈写愈烂，弄到将要放弃了了。幸而祖传一块机械键盘，便替人家粘贴复制，换一碗饭吃。可惜他又有一样坏脾气，便是好吃懒做。刚跳槽做不了几天，便连人和电脑键盘，一齐失踪。如是几次，叫他应聘的人也没有了。孔乙己没有法，便免不了想办法接些私活。但他在我们公司里，名声却比别人都好，就是从不加班；虽然间或加班，暂时记在粉板上，但不出一月，定然调休，从粉板上拭去了孔乙己的名字。。。。。。自此以后，又长久没有看见孔乙己。到了年关，老板取下粉板说，“孔乙己还欠十九个调休没用呢！”到第二年的端午，又说“孔乙己还欠十九个调休呢！”到中秋可是没有说，再到年关没有看见他。听说是去了柬埔寨做项目了"
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],import 潘多拉,当他在飞快的敲键盘的时候，请相信我，他绝对不是在写代码，而是在论坛上和人家开喷了。
现实中程序员是怎样飞快敲代码的？,['哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？'],悬壶醉世,程序员自2000年以来就分为了两个流派。体术流和PPT流。PPT流的厉害之处在于你不管提什么需求，都能给你弄出一套PPT出来，跟着PPT写代码就一点问题都没了。这个流派善于升职加薪。其流派之幻术是所长。何为幻术。就是你看完了PPT感觉自己什么都懂了，然后写代码发现自己什么都不懂。客户，老板，产品经理一看PPT：哇，好牛！打钱！实际上服务器的屎味已经熏坏了五台机房空调了。键盘流则因为不如PPT流的升职加薪快而被大家所抛弃。键盘流到了后期是产品经理一边BB，他一边写代码。等产品经理BB完了代码就写完了。据说十五六年前有一键盘流大牛达到。同时面对客户，老板，产品经理三大BB不落下风。最终因为行政切换打烂的键盘不及时而落败。自那一战之后键盘流人才凋零，也就衰败了。今天看提问者有这样的疑问，我深感欣慰，键盘流总算后继有人！
你的编程能力从什么时候开始突飞猛进？,[],飘逸的师兄,你就明白：它也许有用，但它封印了你精进计算机英语的机会。你就明白：各地大佬们的文章很Nice，但它们仅是你技术知识体系的精华补充。你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。你就明白：那些烂大街的21天宝典，7周速成，都是些什么玩意，误人子弟！图灵牛逼，动物牛逼，Manning牛逼。你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。你就明白：所学的技术该用在哪。你就明白：光会用技术，和用好技术是两码子事。你就明白：原来工作摸鱼不是梦。你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。你就明白：开始还是很讨厌的，等全盘搞明白了，发现“咦~有点意思”。你就明白：自己的莫名的增多了。而且吐槽文档不全的习惯也渐渐少了，一个不服就跑去观摩别人的源码，顺便偷个师。再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。突然获得这么多支持，十分感谢大家。知乎就是师兄的心得记事本，喜欢的可以哦~「卫星｜ktshixiong，深度职业规划＋」一、新手进阶，可看《》篇幅短小，示例经典，讲解细致。最重要的是新手读起来不费力，可以作为长久阅读的床头书，开卷必有益。帮助你学会如何写出有层次的好代码，让你在工作中赢在细节，更容易获得有实力的前辈的认可，职业发展更轻松。二、寻求职业长久发展，可看《》偏重于讲述编程哲学，几乎无代码阅读成本，笔者像一位睿智的导师，以亦师亦友的口吻，有条有理地为你分析各种项目问题，分享各种工程与人的权衡，还有可靠的处理准则，有志于在编程事业上长久发展的朋友推荐阅读，可以少走很多弯路。主要是打开你规划工程的格局，次要是积累行业谈资，一石二鸟就是全书都是优点，UNIX作为经典中的经典，它的设计理念，基础功能的实现方案，都是值得熟透于心中的，无论往后有多少新系统，最底层的东西都是大同小异。书的内容量大，适合长年小口啃。打牢基本功，基本功是你技术高度的基石，永远要记住这一点。此外，不要局限于自己是什么IT岗，只要能帮助你积累优秀的技术思维，好资料再多也不嫌多，职业路走宽了，在IT行业，你什么时候都能走得雄赳赳气昂昂。→ （持续更新）→ → → （带过 10 来位新人入行的经验）→ → →→ → → 最后，还是万分感谢大家的支持^_^。 
你的编程能力从什么时候开始突飞猛进？,[],MutexLock,update:评论区很多学弟学妹要求整理一个学习路线，刚写了篇文章：从小白到后端工程师的自学之路 - MutexLock的文章 - 知乎 ---------------在啃掉一本本计算机经典书籍和写下大量代码以后。疫情原因回不去学校，作为一个马上毕业，即将入职腾讯的大四生，分享一下自己的学习历程吧。本人在大学之前从未接触过编程，最开始的编程学习还是在高考完后，从书店买了本，然后暑假开始啃，前前后后也就看了几十页。大一上的时候，来到了华中师范大学，还没有转专业到计算机，一直在自学C语言和看一些计算机入门书籍（编码、计算机科学概论）。当时也很迷茫，不知道以后道路如何，所以也学了一些杂七杂八的东西（前端 python啥的），所幸的是，当时坚持把C Primer Plus结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。大一下，转专业到计算机了，开始自学数据结构，算法和C++，部分看完了 数据结构与算法分析，并且把书上的数据结构实现了一遍，记得当时五月份给自己的flag是看完，然后每天上课看，晚饭吃完后也跑去七号楼刷书，最后囫囵吞枣似的看完了大部分。大一暑假，txr大佬  给我说他面试通过了华科的联创团队，而且给我说他们团队都特别厉害，有些人在军训的时候就把C++ Primer给蹲着看完了，当时十分钦佩，幻想也能够进入贵团队。于是打算在大二上的时候，去报名他们的秋招。所以，那个暑假在学校自学，呆了五十多天。最初，拿起一本，看了一章后感觉看不懂又放下了。然后，又拿起一本红色封面的算法第四版，这本书看完了，并且用C++把上面的算法都实现了一遍。另外，听知乎大佬说是必看的神书，当时也懵懵懂懂地看了前面三章，做了lab。为了学习linux，还看了一本叫的书。武汉的夏天很热，只能寂寞待在宿舍的我，打开了的世界，写了一百多道题。大二上，十月，忐忑迎来了联创的面试，前面两轮都过了，直到其特色的“熬夜测试”环节，因为实力不足+精力不足，测试败北，没有通过。清晨七点，在回学校的公交车上思考自己不足，总结是知识体系仍然不够完全，而且深度也不够。后来这个学期有点“误入歧途”的意思，入了的坑，记得当时花了好几个月刷完和吴恩达机器学习课程的讲义（真佩服当时的毅力，都是英文和公式推导），后来想了想，ML/DL这个东西有点玄学，于是毅然决定成为一名做工程的程序员。总的来说，虽然这个学期的时间都投入到ML的学习中，没有学习工程方面的东西，只有用python写了一点好玩的爬虫，但是给了我以后坚定走工程方向的决心吧。大二下，这个学期是打下计算机知识基础的关键时期。从知乎找了一系列书单，看完了CSAPP（做了lab，为了bomb lab还通宵了，强迫症想让自己把炸弹都拆了）、半本算法导论、、计算机网络系统方法（前三章）、部分TCP/IP详解等，做了一些项目，比如正则引擎（这个是参考了轮子哥的教程）等等，尝试写JSON库（未遂）。其实，因为学校只是一个普通211，找到好工作的学长学姐先例很少，一直是没有信心自己能去大厂，直到当时了解到myk  学长在春招收割了一系列offer后，才有了些许信心，相信自己如果能够像他那样努力，那么也能够找到好工作（感谢myk学长那时的鼓励和指导）。所以，定下了一年把自己水平提升到能够在大三下春招的时候拿下大厂offer的目标。大二暑假和大三上也一直为这个目标奋斗，补上了APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux、部分C++ template、部分C++ Concurrency in Action等书籍。然后，也一直没有放弃刷题，LeetCode写到了三百多道。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的，阅读了一些优秀的开源项目，SGI STL、、libgo、libco等。中途还对haskell产生过兴趣，打印了一本 Haskell For Great Good，看完后感觉坑太深，还是专注找工作吧，对我一直都有很强的吸引力，但是这种也只能作为爱好吧。另外，编译器也是有这种魔力，看了部分编译原理（龙书）、部分现代编译原理（虎书）和部分，多次尝试写自己的编译器，多次未遂（不过现在有空了，在补上之前的烂尾项目）。当年的笔记哈哈：时间到了12月份，9号楼某个自习室内，txr大佬一直鼓励我去投简历找实习，本来我一直畏畏缩缩，对自己不太有信心，被鼓励后想着投就投吧。当时投了字节跳动和的实习，面试都比较顺利，于是在大三上就在字节跳动开始了愉快的实习，比自己的计划早了大半年。当时为了准备面试，看了好多的面经，查漏补缺式地补齐自己的知识盲区。大三下，基本都是在实习，学习了很多工程实践上的东西，接触了go的技术栈，并且对和软件工程方面有了认知，包括代码管理、发布流程、微服务啥的。然后实习的时候骑驴找马，找到了腾讯的暑期实习。因为这个时候没有了找工作的压力，所以开始学一些自己感兴趣的东西，包括Rust（至今水平还是不太行）、分布式系统（DDIA、MIT6.824等），零零散散学了点东西。大三暑假，腾讯实习了两个月，开始学习、各种中间件等实际业务用到的东西，这个时候就感觉拥有到扎实的计算机基础是最重要的东西。最后，顺利拿到了腾讯转正和字节跳动的秋招offer，两家都给的比较高，选择了工作体验更喜欢的腾讯哈哈。总的来说，学习计算机是需要积累的，花一两年时间啃下那些厚厚的经典书籍后，才能构建自己的知识体系，然后阅读大量优秀源码，做一些有趣的项目，编程能力就能突飞猛进啦。现在回头来看，大学时光真是如此宝贵，这是人生中为数不多可以静心学习的一段时间，可以不用考虑任何其他事情，每天学习十多个小时。部分藏书：
你的编程能力从什么时候开始突飞猛进？,[],blindpirate,大概……是为了追女生而写了一个游戏的时候吧。大概七年前，我为了追一个女生，以她和我为主角写了一个战棋类RPG游戏（其实还做了很多别的事情hhhhh），灵感来源于小时候玩的世嘉版《水浒传》。故事的背景是我大学，游戏名字叫做《》。我一直都觉得，在大学，生产力的来源主要有两件事情：这个游戏有对话系统：有战斗系统：有职业/升级/转职/职业相克系统：有角色属性、物品、存档系统：有剧情：有作战系统和敌人的AI：故事的背景是我的大学，这是中心食堂和足球场：我甚至还在综合楼的自动售货机上做了一个物品买卖系统：这个游戏大概不到一万行Qt代码，没有用任何的框架和引擎，现在看来相当原始，所有的移动和动画效果都是用Qt的定时器+一堆if/else判断徒手撸出来的（当时不知道更好的办法，就这么一根筋地写了几个月）。我自己的感觉是，写代码超过5000行的时候，自己的能力会有一个飞跃——以前从没有注意过的东西开始觉得费解，从而逼迫自己思考和学习，然后进步。在我参加校招的时候，这个游戏的代码量占我当时的代码量的差不多一半……现在回想起来，我校招能进阿里，这个游戏带来的能力提升功不可没。这个游戏没有最终完成，也从未发布，静静地在我的硬盘里躺了七年。四年前我跟游戏设定的女主角结婚了。这周二我无意中看到它，拿到现在的机器上重新编译通过。在吃晚饭的时候，我问她：“你知道我当时给你写了个游戏么？“她说：“不知道啊”。代码在这里（我知道它很烂），遵守WhatTheFuckPublicLicense，随便修改：最后放几个全地图的场景，如果你和我是一个学校的，会觉得相当亲切。不过，大部分的地图都不是我做的，我自己做了中心食堂、综合楼、研教楼、校医院、一馆五个场景的室内地图。评论区炸出了很多同道中人： 说：@ Authur  说（at找不到这位老哥，刚刚at错一次）：如果赞能破万的话我就把可以运行的二进制版本release到上……
你的编程能力从什么时候开始突飞猛进？,[],Light,大学时浑水摸鱼，毕业后大约半年，在网络上寻找自学资料时，发现了GitHub和一些，自学了py，然后打开了新世界的大门。包括购买了梯子，独自啃下两套纯英文官方文档，在GitHub上友好亲切的交流，刷题，看最新的软件工程实践书，等等===========更新2：===========一些人问在哪里看我是在这里看的：其他的我不知道=========== 更新 ============断断续续的收到一些赞，写一些可能对大家有帮助的东西吧：1、提高知识最好的途径是读书，包括但不限于计算机四大名著《计算机网络》《数据结构》。经典书籍不仅仅有完善有效的知识，更重要的是这些书里的计算机经典思想，一直到现在都没有过时，十分的有用。2、是个好网站，值得习惯性的到上面搜索需要的东西。比如awesome系列和一些质量很高的资料整理项目（整理常见的面试、刷题、常见工具链的）3、和知乎都是很好的网站（尽管审核方面被吐槽很多），论坛上有很多很厉害的大佬，关注认真答题大佬的动态对开拓知识领域是有一些帮助的。4、善用搜索引擎（专指Google），最好能把自己最常用的工具的官方文档啃一遍。主要是习惯英文文档的表达方式+系统的认识自己所用的工具，对自己写文档也是有很多帮助的。5、因个人有长期的抑郁经历，所以对心理方面关注得也比较多，十分推荐学习《哈弗大学幸福课》。这门课的综合内容十分丰富，实践性很强，能够有效的提高生活、职场中的软技能（沟通能力、抗压能力等）（这门课另外一个很厉害的地方在于，仅仅是上课的方式，也能提高你的逻辑思维能力，毕竟据说是哈弗学生选修最多的课，课程质量极其的高）。6、有一个我自己打算做但实践得还不太好得地方：看经典得源码和架构。只看过一些小的玩票性质的开源项目，也学到了不少东西，大型的经典的开源项目还没能看（、Git等），这些项目对我来说主要是太庞大，时间上有些不够用。7、最近在坚持做每日一题，也推荐大家一起刷呀。保持手感，很多题看起来简单，但评论区也能看到有趣的知识。8、关于职业规划这种事情，我以前是没有的（主要还是抑郁+低自尊影响的吧）。现在获取的信息太多太多，没有职业规划很容易被带偏。我是在做了长期的心理咨询+《哈弗大学幸福课》，工作、生活上都有一些经历了之后才慢慢想清楚自己将来的生活与工作要怎么打算。这种事情想清楚过后，做自己想做的事情目标会比较清晰，不会得过且过。感谢阅读，祝好。
你的编程能力从什么时候开始突飞猛进？,[],阿莱克西斯,"学了OO, 熟悉了“设计模式”, 领悟了和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用写进去, 这是我感觉自己能力提高的第一次飞跃;看和让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;学了思想为我打开了另外一个世界, 引导我去了解, 去稍稍的学习了些category theory(这个是真的难...), 这解放了我编程思想的另外一个纬度, 抽象能力有了质的提高(主要体现在generic programming的能力提高, 高级类型的灵活运用), 我开始有意识的去降低核心程序的""熵""(程序的可能性越多, 各种可能性的概率越均等, 熵越高), 使得程序更容易理解(熵越低信息含量越低则越容易理解), 而把系统的灵活性(比如状态, 等)隔离在核心逻辑之外(这样使得变化可以在一个地方, 比如系统setup时, 集中理解, 然后用理解的setup来很简单的推理核心逻辑在这种setup下会怎样运转), 这样就使得程序的核心复杂度更加接近于核心业务的复杂度(业务的熵是本质复杂度无法用调整程序结构的方法降低, 但是, 本质复杂度也是可以降低的, 请往下看), 但是又没有写死整个系统的灵活度; 这是第三次飞跃;, 当我开始去看, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维,  项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人,  甚至开始关心组内的技术文化建设;这是因为“编程是最重要也是最不重要的事”以上引用出自我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个"""" (随便逮着一个点都能开阔人类边界的天才除外); 眼界太窄以至于学了一点点东西就觉得自己""天下无敌""了, 是我们进步的大敌 (也是曾经是我最大的敌人); "
你的编程能力从什么时候开始突飞猛进？,[],胡嵩,回顾一下，我的技术能力（不仅仅是编程，而是）的进步大约有几个重要的节点:1. 刚入行时的入门练习题这个是当年网页搜索部门的传统，不知道现在还有没有，入职第一个任务是完成两道练习题。一题是在Linux上用纯C（不许用C++，没有可用）完成一个多线程的网页抓取器，另一题是同样的环境语言完成2G大小的query（搜索查询词）的top100提取，有时间要求。入厂之前我在Linux上没有写过代码。两天时间从Linux基本命令的熟悉，vim gcc gdb的使用学习，从和free开始搞内存管理，从0开始码(还得自己写hash函数），从开始实现http client和各种协议码解析，使用pthread多线程和信号量互斥同步，基本把操作系统计算机网络复习了一遍。这两天把我四年本科三年研究生没搞扎实的工程基础全部补上了。结论:有目的的练习，尤其是一个完整的应用问题的解决，是学习的不二法门。2. 接手一个完整的模块（子系统）搞完入门练习，leader过来跟我说：小胡，现在有一个重要的模块交给你，赶紧熟悉一下，然后完成如下功能升级。这个模块是前厂存储网页的核心模块，在当年内存4g的奔腾主机上单机存储几千万网页，几台机器存下了当时整个中文互联网。支持高性能的随机存取和顺序读，可以说把机器性能压榨到了极致。3w行，纯C。啃了几天终于搞明白了结构，（多年以后我还得感谢），同时也对写这个模块的大牛佩服的五体投地，为了压榨内存把每一个都物尽其用，各子模块之间的分工又是那么的优雅。然后是上手改，看懂了之后功能升级很简单，只改了十几行代码，但上线的时候真是手发抖！后来才知道这个模块好几个前任都没成功接下来就被fire了....后来又经历了若干次升级，解决各种诡异bug（搞过高并发存储系统的应该知道坑有多深），编码和解决问题的能力突飞猛进。结论: 学习系统设计的最佳途径是看一个优秀设计的源码，检验成果的方式是改造它应用于你的实际场景。3. 接手一个完整的系统搞定存储模块之后，我的下一个任务是升级喝扩展一个完整的抓取系统。和入门练习做的抓取器不同，这个完整的抓取系统（又称）是工业级的，需要每天完成千万级的抓取量，还需要考虑并发压力控制，网页更新调度，垃圾网页处理，去重等等诸多现实的工程问题。大大小小十来个模块，十来万行代码，大部分是C，还有接近一万行的（用bash实现分布式的网页去重处理你信？）这时会发现很多模块内部都有不少实现不尽如人意的地方，但是由于借口定义的好，模块直接容错性强，整个系统还是work的。这促使我思考系统级的架构，最需要关注的重点是什么，良好的结构远胜于细节的雕琢。大约小半年后，我对这个系统基本做到出任何问题能立刻反映到是那个模块出的问题，对问题的分析定位能力又上了一个台阶。结论: 理解了接口定义和系统结构重于实现细节，就迈出了的第一步4. 设计一个完整的子系统此时大概工作快两年了，原来的抓取系统有一个很大的问题，就是积累的网页数太多，更新资源分配不过来，导致系统中大量网页在互联网上已经404但仍然会进到线上被检索出来。我们称之为死链接问题通过对死链的规律分析，我发现互联网上大部分死链存在站点或目录级聚集的现象，这个其实很好理解，一个网站无力维护了，自然就全部挂掉，目录级很可能是网站改版了，或者一个子频道关闭了。利用这个规律，我们可以大幅度降低死链检测的资源耗费。在这个认识的基础上，我设计了一个独立的死链检测系统。上线效果很不错，检查死链的流量开销降低到原来10%，网页库中死链还下降了。结论: 架构师首选要解决的是待解决问题的精确描述，和对问题域的分布规律的挖掘，然后才是结构设计。5. 设计一个新的系统 工作第四，五年间，hadoop在业界逐渐流行起来，基于Google三件套的设计，当年的hadoop最上层的table还很不完善，但是和hdfs已经很可以用了。  如何利用分布式基础框架改造系统，让系统更健壮（以及永更廉价的硬件給公司省钱），成了当时的一个重要问题。整个抓取系统和建库系统的分布式改造，相当于重新设计一个新的大系统。需要考虑方方面面，如何逐步升级兼容原有系统？如何保证功能的完整性？原有设计中有一些不合理的地方，如何利用这次迁移同步改造？主导完这些工作后，系统架构方面再也没有遇到搞不定的问题。结论:  好的架构师需要在合适的时机解决重要的问题，业务发展才能给你这样的机会。上面5个节点，大致是T3 T4 T5 T6 T8的水平。新冠在家隔离，半夜睡不着码字这么多。看完给个赞呗。
你的编程能力从什么时候开始突飞猛进？,[],码农皮邱,阶段一：啥也不会，抄代码都运行不起来，学会了百度+google，学会了舔着逼脸去求大神。阶段二：学会天坛看教学视频，得瑟能写一些页面，停留在CURD阶段，顶多培训毕业水平，疑难杂症无能为力。阶段三：开始了解底层，看书研究底层，原来发现全是数据结构算法、操作系统、网络底层，开始沉迷研究底层技术，用优雅的设计。阶段四：知道一些底层，开始跟别人喷技术的优雅性，忽略了我们技术是为了业务带来收益。阶段五：能灵活判断业务的情况，给出合理的技术架构。总之，突飞猛进的时候是自己会实践用起来，同时在项目环境中碰到问题，研究底层最终解决疑难杂症，随着经历无数个疑难杂症的积累，也就是这时候。说明：很多小伙伴都在问，就是抛出了现象没说每个阶段怎么解决问题，大家可随便评论区问问题，我收集完统一系统性回答。没想到瞎写写这么多赞，谢谢大家！近年来，有些读者会问我一些形形色色的问题，让我很难去回答，甚至给不出建设性的意见。举个例子：1. 我学习什么能进入优秀的互联网公司工作？2. 我想做研发我应该学习什么？众所周知，这问题就像你问学霸说你这么厉害一样让人难以回答。我作为一个双非软工本科学生，经过大学自己摸索和不断试错，毕业开始在百度从事研发工作。其实，我当时也有很多的疑惑，在这里给大家讲讲我的踩坑历程。记忆中，我当年逛知乎、求助高人、甚至我的导师，都无法给出一个可操作的建议。除此之外，在我那种二本学校，知名企业都不会去咱学校校招，我和学长们对春秋招的概念微乎其微，进大厂是件很困难的事情，概率与踩狗屎不相上下。让我想起了我当年问学霸题目如何解？学霸说：这个题目是来源于第X章第X例题，你这样解，答案就出来了，很容易的。当时，我真的是花里胡哨的啥都学，啥都去倒腾，不知道是不是梁静茹给我的勇气。前端、后端技术栈、Hadoop/Spark、docker/k8s这些几乎都实操过，只是很多只是入门并没有深入研究，效果自然也十分有限。这些概念，对于小白或者在校生来说，这仿佛在对说你不用学了，除非你天生技术欲望特别强烈。这对于大多数普通人来说，明显是劝退的节奏，可操行十分有限，几乎没有参考价值，不知道从何下手。接下来，我系统性拆分问题，在不同阶段应该「学什么」、「如何学」、「学到什么程度」，重点讲我当时遇到的问题，还有我是如何去思考的，最终如何解决的，思路比结论重要。根据问题归类来看，主要在我自己的角度谈谈普通本科如何实现进入Top级互联网工作？首先，说说在大厂工作都是些什么样的人，他们当年都是背着什么光环混进去的？经过我的调研和分析，重点说一下在校招中面试官看中和考察的东西。大概思路就是，要么你证明你令人信服的天赋如逻辑系统思维、聪明，让人觉得你可以被快速培养；要么你有丰富的工程实战经验，证明你具备优秀工程师的潜质。当然，你可能会说这么多要求，恐怕神仙也做不到啊，简单太苛刻了。在这里，并不是上述要点全部满足，只是满足其中两项证明你的实力即可，毕竟面试时间十分有限必须有点让人信服的东西啊。举个例子：1、假设你是上海交大、华中科大大学毕业的学生，你可能只需要重点复习数据结构/算法等专业知识，辅之把学校的科研经历说一下。可能进入什么阿里华为百度问题都不是很大，专业知识对于你们来说自己不再话下，毕竟考理论就是你们的特长。2、假如你是双非大学毕业的学生，那么你必须用国家级大赛、开源项目、互联网公司经历证明自己。鉴于上述分析，知道需求是什么？对于我们来说，主要把精力投入在技术本身。接下来，我们将面临一系列问题。 1. 我应该做什么方向？（方向） 2. 我应该学习什么内容？（规划） 3. 我如何学这些内容？（方法/策略） 4. 我应该学到什么程度？（量化） 5. 如何把理论用到实际项目/产品中？（产出）不同方向，意味着不同领域不同，学习的知识和实战项目有共性也有差异。根据我的经验，可将内容分为原理、应用、擅长方向三个纬度。原理：计算机网络、操作系统、数据结构/算法，这些东西都是专业课好好学即可，数据结构/算法可以偶尔刷题。校招的时候再重点复习，初级阶段不必花太多时间深究。应用：它是最基础的内容，不管你从事什么领域都将离不开它们。这也是小白入门重点花费时间的地方，你将在这里不断与程序斗争如调试、验证、异常、解决。方向：不同方向本质上就是在基础应用上扩充，发挥它们擅长领域和特性去解决特定问题。在这里，简单列一下涉及的技术栈。基于上述分析，主要讲了整体思路，大家可能会觉得有点不太好理解。接下来，拿我当时遭遇的处境进行举例阐述，这样让不同水平或时期的同学有不一样的体会。假如有时光机让时间往后倒退3年，时间来到我刚上大二的时候，作为一枚小萌新开始学习JAVA走上之路。对于我来说，、计算机网络先战略性放弃，毕竟刚接触编程，看高大上的原理，每次上课都想睡觉。当然，数据结构/算法我还能好好听听，毕竟我数学功底还行让我不排斥。举例：假设你学骑自行车，你是直接上去就蹬？还是先把轮子拆下来研究清楚原理再去学习怎么蹬？重点：根据我的经历，在新手阶段不管是接触新的语言，还是新的方向。根据上述策略，刨除我踩的一些坑，我把学习征途划分四个阶段，实现学习效率的最优解。在我入门的时候，我遇到的最大困难是代码不会写，DEBUG不会做，程序报错不会看毫无头绪，甚至大家常说的百度一下的关键字我也不知道搜。这时候，最大的目标就是根据百度/查文档/看视频，把程序调试出预期结果，甚至你抄代码都行，很多时候抄代码你都不一定能DEBUG出预期结果。这就是现实，主要就是要把对编程的排斥消磨殆尽。这个阶段，不需要太关注底层实现原理，对于现已从事计算机行业的同学，其实这部分内容非常简单，可能按照正常水平少则几天，多则不超过一周就能开发出简单模块。简单说，它顶多是普通本科毕设设计水准，主要是让新手在感官上体验软件产品。 在这里，主要让大家在系统的角度感受最简单、最初级的技术模型。作为小白，我们不得不面对一个现实，小白阶段中大多数人对计算机了解几乎为零，尽管你小时候玩游戏贼牛逼。就像写个HelloWorld，你起码要安装好环境，安装好IDE，可这简单的两步都能捶死在坐的各位弟弟。幸运的是，我们在互联网如此发达的时代，市场如此火爆，视频资源可以随便搜索，甚至自动给你推荐。我是特别推荐这个时期，大家去完整找一套视频来系统学习。尽管新手视频对于现在的我来说很费时间，但是对当时小白的我来说，这是新大陆，它能带你简单过下计算机体系导图。我在课余时间学习视频，让我在课堂上学习理论的时候，能够有豁然开朗的感觉，自然就比别人强了。在这里，我就简单给大家推荐一些学习资源。假如你学习java，推荐你去/尚硅谷/，它们会有成熟的学习路线，视频也是那种手把手敲的，新手学习比较友好，我狂喜的是可以不投币白嫖。通过第一个阶段学习，你对编程从一无所知到有所斩获，对计算机世界充满了好奇，甚至有所开心。这时候，你最应该做的就是去满足你装逼的梦想。假设你是爬虫方向，你应该去爬表情包、爬知乎数据、自动抢票，去满足你无数个装逼梦想。假设你是算法方向，你可以去研究推荐算法、图像识别模型，去做个商品推荐、人脸识秀一秀。假设你是后端方向，你可以去研究下/网站开发开发个仿微信聊天应用，体验下lowB版微信。画外音：多做项目，坑是一步一步踩出来的。作为大学生，实验室、软件设计比赛、都是你发挥现象力的天堂，这些倒腾的经历将是你毕业时最宝贵的经历。经过前两个阶段实践，时间来到大三，这时候基本的软件开发已入门差不多达到普通培训班毕业水平。同时，专业课如数据结构/操作系统/计算机网络也上的差不多了，对概念多多少少有初步了解。这时候，你会发现很多原理你不懂，将很难更上一层楼。你将处于写代码一时爽，一直写一直爽，遇到性能问题直接土崩瓦解。所以，你不得不去学习理论知识让你走得更远。在新手阶段去强化理论知识，会让你兴趣骤减且产生学了有何用的错觉。同时，这是最好的时机，学校专业课学完你有基础概念，你有实际软件应用场景，这些东西让你深挖理论的时候会快速给你构建起基础图谱，让你兴趣激增不断体验学会的东西，将戳痛你最痛的神经，瞬间把你以前遇到的问题有新的认知，这就是答案。其实，编程语言和计算机基础都是相通的，只要你学透一门编程语言剩下的就大同小异。当然，计算机基础毕竟是枯燥无味的，学习毕竟是有方法的。举个例子：站在编程语言的角度，你用心去总结，你会发现不管什么编程语言，变来变去都是换了个花样在谈以下内容。不管在面试还是技术探讨，重点考察的都是集合、网络通信、线程/线程池。源自于它跟计算机基础有紧密结合，你要优化它们你必须具备扎实基本功。基于我的研究经验，我建议大家在学习计算机基础的时候，不要因为理论而理论。你应该去通过编程语言源码去学习计算机基础，只学你当前认为最重要的。举个例子：当我去学习数据结构/算法的时候，我会一边学习源码一边思考数据结构，这样就让我有实际应用场景不会因为理论而理论。我学习list、set源码的时候，我就学会链表、栈。我学习map的时候，我就学会了、散列表。当我去学习计算机网络的时候，我会一边学习socket的用法，学习Linux网络通信模型epoll，这样就重点把网络协议学会了。同时，很多应用场景极少的理论知识，我就粗略记忆或者跳过，这样就节约了很多时间。当我去学习线程/线程池的时候，我会学习锁机制、生产者/消费者模型这些操作系统原理的重要知识，跟编程语言中关联不大的我就粗略记忆。经过前面三个阶段的学习，你已经具备扎实基本功和项目实战经验。接下来，你需要做的就是更加的专业化，研究一些有生产意义的东西。如果你一直写学生管理系统，这些没有价值没有意义的东西，那么毫无意义。这时候，你应该去互联网公司验证你学习的技能。除此之外，你可以去学习额外的成熟先进技术栈。画外音：去实习，最好去大厂实习，接受互联网软件开发的挑战。要是不能，那么去研究实际企业技术栈的应用与底层研究。举个例子：假设你是后端开发，你就可以去学习微服务的技术栈，springboot、dubbo、docker、hadoop都可以去学习。除此之外，设计模式，redis原理都可以去学习研究，只有这样当你去面试的时候，你有很多话题和故事讲给别人听，你的专长研究既可以让你说业务场景，你又可以讲底层原理，对答如流。经过上面的训练，已经具备了解决问题、快速学习、编写代码能力，也就是具备软件工程师的职业素养和扎实基本功。这时候，进入互联网公司开启职业道路，你将会很快有产出，不会陷入徘徊自闭的状态。更何况，你的职业素养已经能够让你遇到问题，能快速的学习克服困难。但是，要是让你去参加面试可不一定能独善其身，毕竟工作拧螺丝，面试造火箭可不能疏忽大意。面试也就是把自己卖出去，让别人觉得你值。简历是至关重要的环节，所有的知识和技能全都是围绕它展开，否则毫无意义。因为在面试中，面试官关心你有什么，也就是面试完全围绕着你会的东西展开提问，所以你就把你的优势发挥到极致就行。简历一定要认真对待，一定要简介精炼，尽可能把内容压缩到一页，毕竟简历筛选就30秒不到。这时候，简历排版、简历字体、简历模板都有讲究，细节决定成败。在写简历的时候，主要分为个人资料、实习经历、项目经历、专业技能。其实，没什么技巧，参考STAR原则，重点体现你在项目中的价值和思考。假设有读者需要简历模板，可关注提供给大家。以前，学习知识是零散的，学习策略更多是面向解决问题，以至于知识不系统，表达逻辑层次有限。面试官逻辑思维强，所以你必须做好充足准备才能脱颖而出。按照互联网面试流程大多数分为三轮面。一轮面试：主要是考察计算机基础知识和擅长语言基础知识，重点考察数据结构/算法、网络编程、擅长语言基础。但是，绝对不是死记硬背的东西，一定是深度和广度紧密结合，环环相扣直到把你肚子里的东西全部挖出来。举个例子：你会发现每个问题都是环环相扣，从简单到难，目的就是挖掘出你的极限。大多数情况都是，从数据结构/算法入手，扩展到编程语言特性，再扩展到并发/网络编程不断进行深挖。当直接问实际用法应试者答不出来的时候，就会再次引入到计算机基础知识，这样不断反复调度试探应试者的是深度和广度。二轮面试：这轮考察实习/项目经历，重点考察你的面试储备。众所周知，大部分应届生项目经验十分有限，大多数是图书馆管理系统、电商系统这样。重点说一下应对策略，可以去网上找你做的项目可能遇到的领域难题，去找解决办法，最终扩展补充到你的项目中。三轮面试：这轮面试更多是经理考察应试者的基础能力。也就是逻辑思维、抗压、时间管理等基础能力，看下是否能融入团队，毕竟适合团队的才是最好的。这里主要讲了思路和应对策略，至于篇幅有限，面试题只能读者自己梳理，假设有需要后续再聊。大体的思路： 1. 梳理知识体系看面试可能考哪些东西？ 2. 去网上搜寻和整理面试题？ 3. 把数据结构/算法、并发编程、网络编程串联起来，还要学会理论知识和实际实战中来回串联。总之，作为普通学校的同学，你只有花更加多的时间在项目实战中，实习/打比赛/逛开源社区，这些时间让你更快接近成为职业软件工程师。当机会来临的时候，你抓住机会就踏入大厂的大门了，幸运永远不会无缘无故眷顾你。经过读者提问，再附之我的思考，我大概总结出来分为这么几类问题。不卖光子，直接说下整体解决思路。有用：计算机理论（算法、网络、操作系统）、项目、实习。企业招人就一个目标：来了公司能干活，培养完能干活。软件研发这职业，像奖学金、三好学生、学生会主席、英语四六级，对于咱们这职业来说用处不大，有只是能彰显有亮点可作为加分项，锦上添花。当然，你能去拿到这些东西尽量去拿，毕竟别人能拿到，你拿不到你怎么证明你比别人强？前端、后端（产品或架构）、测开、运维、大数据开发、数据分析从大学时间角度，每个学年会拆分出目标。从专业知识角度，根据不同解决学习不同知识。总的来说，实际操作起来还算清晰。阶段一：找培训机构视频学习，只要能独立实现可让人访问的应用如仿微信聊天软件。阶段二：做项目，你可能会学习崭新的技术栈（springboot、redis、kafka），需要什么学什么。阶段三：通过做项目使用了很多新兴技术，计算机理论知识也学了很多。这时候，你核心目标就是把学过的东西总结归纳，拿着他们去面试找工作，这时候你要能说出怎么用，还要说出为什么要用。开源学习网站：要是觉得还得写不错，点击 关注，有惊喜！ 
你的编程能力从什么时候开始突飞猛进？,[],我还在寻觅归途,我有幸有个姑父在腾讯做的蛮高。。。我曾经请教过他这个问题，他的回答是 ”“他有个观点，好的 programmer 不是教出来的，更多是师傅领进门。这个东西就像武侠小说，真正的高手不用你出手，光是走几步，就看得出来了（代码风格）。而所幸一切顶尖的”招式“都在 github 上有对应要做什么事情 ---> github看看做的最好的是怎么做的 ---> 代码一点点拆分、阅读、分析，看看有什么可以学习、借鉴、模仿，甚至蒙住看自己会怎么写 ---> 自己动手做，学习，比较，学习具体来说，多关注一些 github 上的技术狂热者，热衷分享技术和代码，比如  ，用 PyTorch 复现了VIT、AF2、styleGAN、DALLE2、imagen、denoising diffusion 等等各种前沿，真的是宝藏男孩
你的编程能力从什么时候开始突飞猛进？,[],拓跋阿秀,身边朋友说我是，因为一个普通二本的学校学生不仅能够拿到华为、百度、B站等互联网公司的offer，还能拿到一线大厂字节跳动的！！！在如今这个十分看重学校和出身的时候，这几乎是不可能的事。老实说，我真的觉得真的有点夸张了，我只是比别人多花了点时间而已，仅此而已。首先问大家一个问题，不知道大家有没有这种情况的出现：“在实验室或者图书馆怎么想也想不出来某道题/某个 bug 的解法，但刚出实验室/图书馆，立马就想到了”。在过去一年这种情形出现在我身上太多次了。。。。在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在上了。可以说我能够全靠我自己总结的这份笔记，后来我将这份笔记制作成了PDF，并且同步到了自己的上，！自己以前的学习笔记包括。下面是我的校招学习笔记网站内容大纲不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！回到问题本身，就我自己而言，我想应该是在我绞尽脑汁克服一些困难的时候提升的，没有某一个瞬间、某一天、某一周或者某一个月忽然提升了自己的编程能力的说法。比如：我就按照  这十二个月来分享一下自己的自学和找工作过程吧，想到什么就说什么，没有大纲，写到哪就算哪，不煽情也不贩卖焦虑，就写出自己的文字就好。说来惭愧，在 8 月之前，我对 C++ 的影响还停留在 “Hello World” 上，本科时期老师教过的 C++ 基本全忘光了。C++ 三大特性的“ 封装、继承、多态”我真的只记得一个多态，还是死记硬背的那种。当时选择 C++ 而不是 Java作为自己的学习语言除了因为实验室项目的需要，还因为 C++ 比 Java 要难学一点。是的，就是因为 C++ 比 Java 难学一点，大家都贪图入门快、简单、易上手，我偏不这么干，简单易上手也代表着跟你竞争的人更多。思虑再三，我还是选择了 C++ 作为我的主攻语言， C/C++ 能让我见识到整个计算机体系结构是如何被搭建起来的、程序是如何跑起来的、程序是如何被编译链接在一起的、函数的底层构造是怎样的....说干就干，我经过再三比对和考究，选择了某马的 C++ 入门教程，于 2019 年 8 月 17 日，我开始了 自己的 C++ 自学之路。我是一个喜欢动手操作的人，一边看着授课老师在上面讲，一边在底下自己开始学，跟着视频敲代码，他怎么写，我就怎么写。我看的很快，我记的开的是 1.5 倍速看的，十天左右的时间我就看完啦，当时还去留了个言，现在想想也确实感谢那个时候的自己。说到这里，也分享一下我自己以前准备校招过程中做的一些，比如C++、计算机基础等的笔记分享给你，也正是因为这些笔记的存在才顺利拿到的字节跳动SP的offer！还好当时正值暑假时候，老师的项目暂时停滞，也没什么事情需要我去做。所以自己也能够有一个多月的时间去入门和学习，这是一段很完整的学习时间了。对于每一个 C++ 技术栈的同学来说，《C++ Primer》几乎可以说是一本圣经，我当时在看完上面的视频后就直接去看这本大黑书啦。月末的时候，我去 LeetCode 写下了自己的第一道题，也就是“两数之和”的题解，从此自己就走上了一边看书 看视频，一边刷题复盘的不归路。转眼就到了九月，这个时候也开学了，研究生老师也开始慢慢安排事情了。由于白天需要帮老师做横向项目和看论文，所以我一般都在周一到周五的白天去干活写代码做项目，傍晚去跑步溜达溜达的，而在每天晚上八点之后看 C++ 书籍和刷力扣题，周六周日两天则是自己的全部学习和复盘时间。在九月自己在看完《C++ Primer》的前八章后就开始疯狂得在力扣刷题了。因为刚上手的缘故，自己刷题速度也比较慢，对于一些不会的题往往需要两三个小时之久。自己能顺利解出来还好，解不出来就跑去评论区看别人的解答。在刷题过程中真的是感觉到人和人之间是有差距的，实在不明白有些人的脑子在呢么那么好使。我现在还记得力扣第一题的评论区有一句名言“”有时候对象邀我一起回宿舍，我也会说你先回吧。就觉得这道题没做出来回去了也睡不着，一定要把它做出来为止，为此搞到半夜一两点也是常有的事。整个九月我都沉浸在 C++ 的世界里，也没去学别的科目。这可能是整个GitHub上最全的计算机经典PDF仓库了。（如果由于网络等等因素，如果不能访问可以尝试地址2） 其中涉及C/C++、Java、Python、Go语言等各种编程语言，还有数据结构与算法、操作系统、后端架构、计算机系统知识、数据库、计算机网络、设计模式、前端、汇编以及校招社招各种面经等~进入十月了，在七天假期里除了第一天跟对象出去吃了顿饭，剩下的时间都用来看书学习了。嗯，是的，七天假期我也没出去玩，也没打游戏，都用来看书学习啦。在经过九月一整月的学习我对于 C++ 有大致的了解后，就没那么把心思和时间都花在 C++ 上了。我开始着手学习操作系统和计算机网络了，比如哈工大的操作系统、清华大学的操作系统、南京大学老师的计算机基础课程都是在这期间刷完的。还有老师的计算机网络视频，韩老师讲课确实有意思，整个课程欢声笑语不断。除此之外我也看了一些比较经典的书籍，像《图解HTTP》、《》、《网络是怎样连接的》都是在这个月看完的。前期有了视频的铺垫，看起来很快的。老师依旧还是那样，我们每周五还有组会要开，要汇报自己一周的进度，包括项目上的，学习上的。说实话挺烦的，有时候自己一周明明啥也没干，也没啥进展还要在组会上吹牛逼，读研读了三年别的没咋学会，写 PPT 、美化包装自己工作的本事倒是精进不少....时间在指缝中不断流逝，自从开始有计划地学习后，感觉时间过的更快了，有时候一周在不知不觉中就过完了。与之相对的就是视频越看越快、PDF 越滑越快、桌子上的书也越堆越多，吃饭速度也越来越快，每晚回宿舍的时间也基本都在十二点之后了。那段时间，我是我们宿舍回去最晚的一个，还好自己的室友们都给我留着门哈哈。走在回宿舍的路上，我都会想哪一个知识点还没搞懂，明天要再重点看一遍；还有视频中讲到的某一个题，为什么自己没有解题思路；还有哪些书自己还没有看到，规划一下自己的未来一段时间的进度.....十一月的时候我慢慢的开始去看操作系统的书籍资料了，像《现代操作系统》、《》都是这段时间看的。我本科时间干的为数不多的正确的事就是硬着头皮把 《深入理解计算机系统》啃完了，真的是为数不多的有价值的事了，二刷的时候就很舒服~前段时间的某一天我忽然突发奇想，想看看分别抓，哦不，收集了知乎计算机经典图书推荐问题下的高赞回答后得出的选择标准就是每本书都在推荐版上出现过  次及其以上！！最终将抓到进行数据清洗和合并，得到一份计算机领域类的书籍榜单！说实话让我觉得有些意外，因为Python类和机器学习类书籍确实不少，不过！就是下面这三本，现在免费分享一下自己以前抓到的转眼就进入十二月了，《C++ Primer》也快啃完了。看书过程中，除了记录自己的所思所想，在看这本书的过程中有些课后题我也没放过，很多人说没必要做课后习题，对此我持否定意见，每章课后习题数量不等，前三道我基本都是必做的。这样一本经典的书籍，它的课后题都是经过精挑细选的，你看完一章学没学会检验一下就知道了，到圣诞节前后，《现代操作系统》和《深入理解计算机系统》也看了一大半了。力扣刷题也一直没落下，在刷题过程中，自己也知道了 C++ 中还有 STL 这种神奇的东西，也知道了另外四本经典的 C++ 书籍《Effective C++》、《STL源码剖析》、《深度探索 C++ 对象模型》。我一口气全部买回来了，兴冲冲的直接去看源码剖析，差点把当场我劝退。。。。我又去搜索大家在看这本书的时候是怎么看的，有没有什么值得借鉴的方法。由此知道了侯捷大师，也知道了侯捷老师的几门经典课程。------更新一下---很多同学说侯捷老师的视频以及下架了，不能看了，还好我以前有保存过侯捷老师的全部课程，给大家分享一下！主要有：-------------------就跟我开始学习C++时会选择从黑马C++教学视频入手一样，在学习STL的时候，我也选择了从侯捷老师的 STL 讲解视频入手，依旧是 1.5 或者 2.0 倍速看的。十二月的时候我除了看操作系统的书籍之外也另外看了“STL标准库”和“C++内管管理”这两个视频。感觉时间真的不够用啊，想看的书和视频也越来越多，可是自己一天只有 24 个小时，还要帮老板做项目和看论文。元旦那天，我和对象去吃了四川串串晚上去看了电影，然后继续看书、刷题。在放寒假前我特意把两本 《Effective C++》 带回家了，现在想想还好自己带回去了，没白白浪费那个寒假。因为的存在，2020 年的寒假注定是不同寻常的一个寒假，很多学生跟我一样都到了四五月份才开学。一月份回家的时候，把侯捷老师的 STL 源码剖析视频下载下来了，存在 Ipad 里，因为以前就看过一遍，在火车卧铺上迅速过了一遍，也没花多长花间。回家的时候家里有人生病了，一直在医院接受治疗，外出打工的爹妈也还没回来我就去陪护了。就类似下图这种病房，但我们那是十八线小县城，没有这么干净整洁。一个病房四个床位，每天来探病的人络绎不绝，在那种嘈杂的环境下不可能看得下去书，我又掏出自己的 Ipad 接着看视频，比如尚硅谷的 MySQL 视频、Linux视频都是那个时候看的。一月下旬的时候，家里人出院了，我也能顺利回家不再继续陪护了。也终于能有一个相对安静一点的环境看书学习了，我捡起闲置了大半个月之久的 《Effective C++ 》和《More Effective C++》开始囫囵吞枣起来。也许是《C++ Primer》 打的基础比较好，看着两本书的时候并没有花很多时间，很快就看完了。在家的时候，每天早上八点起床，吃过早饭修整一下就开始看书了，一直到中午十一点左右，中间也没什么人来打扰我；下午吃过饭就午休一会，醒了就径直去医院拿中药回来，然后就开始下午的学习了，下午我一般不怎么喜欢看书，我比较喜欢写代码，我会选择做一些课后题或者复盘一下以前做错的力扣题。到了晚上则是看教学视频，十点多了就玩玩B站，看一些比较有意思的吃播，比如华农与竹鼠的爱恨情仇、硬核厨师阿远、还有大姨绵羊的视频。睡前会跟自己的对象视频一会，然后就不知不觉的睡着了。。。多说一句， B 站真的很多优秀视频，总是有人问我该看什么资料看什么视频，其实你自己去 B 站输入一些关键字，直接找播放量比较高的视频来看就可以的，播放量比较高的视频，质量一般都过得去。话说阿秀自己经历了2021届的互联网秋招，在面试的过程中，被问过各种各样的问题，但是大部分都是基础性的题，所以基本功很重要，也很关键。在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在上了。可以说我能够全靠我自己总结的这份笔记，后来我将这份笔记制作成了PDF，并且同步到了自己的上，！自己以前的学习笔记包括。下面是我的校招学习笔记网站内容大纲不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！后来到了二月，这时候国内疫情已经进入了比较严重的时期了。武汉全城封锁也已经好多天了，每天起来第一件事就是看看疫情发展情况。在学习的时候不断的有新名词冒出来，就好像在学习 C++ 的过程中，网络编程这个词也慢慢出现，我也是知道了 C++ 后台开发跟网络编程有关。第一反应就是直接去知乎看有没有推荐的资料，在看过差不多二十多个高亮回答后，我发现有三本书出现频率最高：《TCP/IP 网络编程》、《Linux 高性能服务端编程》、《Linux 多线程服务端编程：使用 muduo C++ 网络库》。我最先看的是游双老师的那本《Linux 高性能服务端编程》。讲真，确实有点云里雾里的，因为以前也没怎么接触过这个。后来转头去看了《 网络编程》，你别说，真的越看越有意思，就有时候可能不是自己脑子有问题，是因为没在恰当的时候看合适的书。在看这本书的过程中，我知道了一个简易版的  服务器是由服务器和客户端两方组成的，也知道了回声服务器是什么意思。这本书上例子很多，我很快就看完了，然后就开始看《Linux 高性能服务端编程》和《Linux 多线程服务端编程：使用 muduo C++ 网络库》了。前者我好好看完了，收获很多，但后者我没怎么看完，随便翻了翻就没看了，我也不是很推荐这本书。后来疫情逐渐严重起来，接到学校通知说要延迟开学，我有点不爽，可也有点高兴。不爽是因为在家呆久了，老妈整天唠叨我，干啥都有错，高兴是因为自己有更多的时间来学习看书了，一回学校就要开始做老师的项目课题了，就没有这么多空闲的时间了。进入三月后，因为一直没能回学校也复习不了C++，我的笔记都在书上，看不了就很难受，只好转头去看操作系统和计算机网络的知识。同时力扣上的题也开始二刷了，当时我重点刷HOT 100 的那 100 道题，来来回回的刷，一道题最多的时候来回刷了七八遍。我并不是什么算法大佬，自己脑子也很榆，一遍记不住我就刷两遍，两遍做不出来我就去做三遍，总有能做出来的一天。老是有人说什么算法太难，你先看看自己下够功夫了没？对于每道题，你是真的会做了没？是不是你自己做出来的？对于你不会做的题目，你有没有及时复盘和总结？如果你的回答全部都是 ，那你不可能做不好算法题；如果有 ，你可以看看自己缺的是哪一步。最多在刷题的过程中你可以选择性的看一些别人总结好的资料，比如这种前人准备好的一些刷题笔记之类的，支持三种语言就很不错，如果算法题有障碍可以多看看。在复习完操作系统和计算机网络后，我除了开始继续刷力扣，也在慢慢刷《剑指offer》，这本书上的题目都比较经典，经常出现在一些笔试面试中，可谓是经久不衰。再者，虽然我已经有一个实验室的项目可以写在简历上，但一个项目还是不太够看，思考再三，我决定走前人走过的路，我也选择做一个  服务器。emm，真香！我是根据 TinyHTTP 和 游双老师的《Linux 高性能服务端编程》的课后大作业为基础，这两者结合后做的自己的  服务器，后来我把它作为我简历上的第二个项目了。简历上的第一个项目是实验室的项目，跟了快两年了，终于能发挥点用处了。可项目还没做完，学校已经给消息了让尽快回去，本来想在家把这个项目做完的，没办法匆匆买票，赶紧滚回去了。可能谁也想不到，一个寒假居然能放 150+ 天的。回去学校第二天，我就立马把《C++ Primer》捡起来看，因为第一遍看的时候比较用心看，所以第二遍过的时候即非常轻松加愉悦了，很快就看完了。然后又把以前的《STL 源码剖析》这本书捡起来看，因为寒假时候已经看过了相应的视频，看的很快，不到十天就看完了。随后又看了《深入探索 C++ 对象模型》，重点看了一下第三章，至此 C++方面的几本经典书籍都看完了，这几本书对于校招足够了，基本不会考察这几本书之外的知识点。在此期间也是把自己的服务器项目完成并且开源到  上了。。按理来说金九银十，他们一般在九月份就应该开始找工作的，但以前的师兄师姐都是在十一月份才开始写简历找工作，去的也都是一些愿意来我们学校进行校园招聘的企业，。我也私底下问过他们，得到的解释和答案就是学校比较差，然后 balabalabala 之类的。。在六月份校招提前批的时候，我就兴冲冲的投了简历，结果全部石沉大海，后来才知道提前批是选拔优秀人才的，提前批能上岸的也都是一些好学校的学生，比如各种的。投完简历没有后文，我也在找自己的原因，除了学校不行是一个因素之外，在思考有没有其他可以改进的地方。后来看了一些比较优秀人才的简历，我觉得问题有可能出在自己的简历上，因为自己的第一版简历写的着实垃圾。所以后面又迭代完善了自己的简历，足足写了 26 个版本的简历，也正是自己精心打磨的简历使得自己在接下来的秋招正式批中能够收获到不少胜利果实。光是修改这 26 个版本的简历，就足足花了我十来天的时间。说到这里，分享一下我自己以前准备校招过程中做的一些，比如C++、计算机基础等的笔记分享给你，也正是因为这些笔记的存在才顺利拿到的字节跳动SP的offer！去年的秋招正式批是在 7 .15 号开始的，在经过提前批投递简历的全盘皆输后，我开始有些畏手畏脚不敢投递简历，因为每个校招学生可以投递一个公司的机会是有限的，比如京东，每个学生都只有一次投递的机会，每次可以投递两个岗位。所以投递简历的机会，不能随便浪费。在别的小伙伴开始大势投递简历的时候，我总觉得自己还没复习好，一直在不断复盘以前学过的知识点。我自己的经历告诉我，永远不可能有复习完的那一天的。因为你每次面试都有可能遇到你不会的题目，所以最好的方法就是在实战中成长，多去投递简历。当然投递顺利是有技巧的，前期去投递一些小公司，积攒积攒经验，后期再投递一些互联网大厂！所以小伙伴们不要抱着把全部的知识点复习完事后，再去开始投递简历，等你复习完了，黄花菜凉完了，校招早就结束了。整个七月我都是在复盘知识点 + 刷题中度过的，7.15 号正式批一开始我就立马开始投递简历了。如果是往届的师兄师姐们，他们投递第一份简历很可能要到十月份去了。还好自己没听他们的话....不知道你们是否体验过笔试全部会做的感觉？就是我所投递的互联网公司发来的笔试，我居然都会做...这不是装逼或者凡尔赛，就是我当时的真实情况，来一道过一道，来两道过一双。在牛客网看到他们发帖讨论今天 XX 的笔试题好难，求交流求解答之类的时候，我下意识地以为他们是不是在夸大难度，因为我觉得貌似没他们说的那么难；傍晚在操场跑步，听到旁边的人在讨论今天的 XX 公司的笔试题怎么这么难，我停下来随口说道：今天这笔试第一题是力扣，岛屿数量那题，很经典的;第二题是回文子串，在力扣上也有，你们也可以去查查，具体题号我记不清了，都是原题的。在我过五关斩六将一般通过一场场笔试后，随之而来的就是一场场面试邀约，为了避免漏掉笔试或者面试，还专门用备忘录记录了一下。最多的时候一天我面过五场面试，上午两场，下午两场，晚上一场。那天面试完后，感觉身体好像瞬间被抽空一般。然后就是笔试、面试、复盘的交替进行、循环往复。那是真难熬啊，也真难受啊，在面试过程中遇到很多自己不怎么会的知识点，有时候也会被问到崩溃或者被面试 PUA ，可来不及伤心和怀疑自己，因为可能一会就要进行下一场面试了。心态真的会崩，当我心态崩了的时候，我一般都是去操场上跑两圈，然后回宿舍洗个澡，再来到实验室看个电影或者看看吃播，然后第二天接着干！还好，最后终于有所收获。如果你能看到这里，确实很了不起。我罗里吧嗦说了一大堆，每个人的成功都是不可复制的，。我写下这篇回答的时候是2021年的五一期间了，距离那段时光已经快过去一年了，确实挺快的，还有一个多月自己就要毕业了，时间真的很快。有时候我就在想，“”我是小镇做题家长大的，我记的上大学第一天代班问我们有什么才艺。我惊奇的发现，我好像没什么才艺。但我想，我的孩子不会再像我这样了，我保证。希望我的下一代除了会做题，儿子会跆拳道、轮滑、散打，女儿会弹古筝、弹钢琴、吹葫芦丝、唱歌、跳舞等。文中涉及到的资料如下：讲真的，我也不知道有多少小时。在校的时候，周一到周五白天都要忙老师的事情，基本没时间自学，都是晚上八点之后学的。周六周日两天好好利用，各种节假日好好利用。可能是习惯了吧。以前跟师兄坐同桌的时候（他现在在华师大读博，今年该博二了），师兄很用功，每天早上八点十分就来了，每晚十二点多才走，每周工作七天，很少见他休息。我真的很佩服他，所以我慢慢也养成了这种习惯。读研三年，差不多在校期间都是 8:30-23:30 的作息，每周 6.5 吧。这是什么概念我也不知道，只是华为二面面试官听到我在校期间的作息后，露出了欣慰的笑容。。。。太多了，真的太多了，所以我觉得学习不累。。1、相遇即是有缘，我最近发现github上有几本不错的算法刷题资料，支持Java、C++、Go三种语言，其中对于面试中考察较多的链表、树、动态规划、数组等知识点讲解的都很全！如果你算法能力比较弱，比如互联网大厂面试中手撕算法比较差的话，那要好好看看了。、对于一些想要转行或者读研的朋友，下面两个回答肯定能帮到你！、建议多看经典书，而不是什么《》系列，完全是浪费时间！、Linux C/C++ 方向自学的完整路线，很多人不知道学习完 C++ Primer 能做什么项目练手，这个回答不可错过！、如果你准备时间不多，就抓住重点，在最短的时间内搞定必要的数据结构和算法而去面试、我自己在学习计算机过程中看过的优质网课，你的基本大学四年绝对够用了。、如果你决定不了到底学习C++还是Java，不妨来看看这个回答！我在自己八九年的计算机学习生涯中收藏了不少数据，后来就干脆把它分享出来造福每一位学习计算机的小伙伴，包括下面推荐的书籍全部都包含在内了！最后如果同学们觉得有帮助的话，不要阿秀学长的回答啊！！！双击屏幕就是最大的支持啦！一个赞就足以！这样也可以让跟多的同学看到了。如果同学们如果还有什么问题，比如计算机考研复试、相关互联网大厂求职、技术方向等等问题，，或者即可，不打算在知乎向同学们开通付费咨询！
你的编程能力从什么时候开始突飞猛进？,[],风口浪尖上的猪,"作为一个出身非常一般的计算机本科同学，就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，网易等多个大厂offer。我知道我其实算不上计算机系最厉害，最努力的同学，但是当我毕业后看到这个知乎上的这个问题，脑海中回想到当年那么努力的自己，心里是真的如翻江倒海，五味杂陈。一个从十线小城市出来，没有优渥的家境，没有过人的天赋，没有从小就受到精心的培养，良好的教育的普通人，，，好像就没有其他选项？大学计算机系的同学努力一些的，要么只专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer。像老学长这样两方面都有一些经历的，应该是比较少的人。同时一路走来，我也踩过不少坑，走过不少弯路。既然问题是如何学习的，那么我也作为一个过来人，给计算机专业学弟学妹们写一写计算机专业学习的一些经验。我会从校内学习，尤其到校招各个技术岗位的求职学习都抽空写一写，无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。首先相比于其他大部分专业，我真的觉得计算机计算机是真的可以通过努力改变命运的专业。其他大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，然后再参加一些专业相关的项目比赛，或者本科能有一些科研论文，就足够代表这你在学校内很优秀了，毕业无论找工作求职还是继续升学深造都足够了。但是计算机专业真的特别不一样。计算机专业技术岗位的求职几乎跟校内的成绩没有什么太大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用。产生上述现象的原因，就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了。甚至计算机专业还会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。我甚至见过一个985大学，计算机科班，专业里排名前几名的女生，面试连一个最基础的二分查找都写不出来。成绩单上门门课程都写着90+，但是具体一些技术内容完全都回答不上来。但另一方面，我还见过有的同学，大学几乎不上课，挂科无数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。于此同时浙江省有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们大学里提前早早的苦学技术，看面经，毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。这里额外提一下，原来有太多的计算机专业的同学不知道什么是，更不知道是什么东西。面经是指很多其他同学在互联网校园招聘中面试各个互联网大厂的，面试。是同学们复习准备互联网校园招聘面试的关键法宝。你首先要知道互联网校园招聘面试重点问了什么？你才能有针对性的准备吧！！！有无数同学都来问猪学长：不知道互联网校园招聘技术岗位面试都问什么，面对计算机厚厚的书籍不知道如何阅读，侧重点在哪里？这些问题都能在面经中找到答案，同时猪学长还要额外说一下，推荐大家去多看面经，并不是让大家只看面经，死记硬背面经，投机取巧。这种只简单被面经的同学面试也是无法通过的。面经只是大家学习的一个参考。还是要踏踏实实的去多认真学习技术，多看优质的官方技术文档、书籍、博客。也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力改变命运的专业。金融行业一直流传着一句非常有名的话:如果你是金融专业，普通本科的同学，那么毕业很难进入头部金融名企去工作，而只能是去卖保险推理财。但是计算机专业这些年来双非本科进大厂的故事每年都在上演，只要你肯努力，一定会得到回报。我的大一在其他同学还在游戏中疯狂战斗的时候，我做了让我整个大学受益4年的事情。到了大学的时候几乎每个人都会迷茫，我也是一样的。我的开头有写到我在大学里非常非常的努力，做了很多很多的事情。我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种各样眼花缭乱的社团，并不知道在大学里该做什么。这时候我选择走出寝室，去多结识学院里很多优秀的学长学姐们。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，当什么部长团长，而是都把时间投入到非常重要的事情上。但是，当你真的找到他们向他们请教问题的时候，他们都非常的友好热情而且热心，告诉你很多大学里关键的事情。我在大一上学期的时候就认识了我们学院当时大三拿到国家奖学金的优秀学长，并向他请教很多经验。很早就知道了的评比条件，准则要求，大学里有哪些比赛含金量非常高需要参加。同时我在大一的时候也认识了的优秀学长，早早的在其他同学还不知道保研是什么意思的时候，学长就给我分享了当年他们那届的保研文件，对里面的要求细节了如指掌。也正是因为我在大一就知道了很多信息，所以我才能早早的准备，因为知道自己不是天才，就只能比别人更早的行动！我看了这个问题下面的很多回答，都推荐了很多各种各样的巨厚无比的计算机类书籍或者非常高深的项目。但是我觉得对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。如果你能在大一就多刷一些题目，打下坚实的编程基础，绝对可以让你在大二大三在各种别赛中崭露头角，最后大学里各种评奖评优奖学金都不是梦。：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机考试。无论你大学里成绩多优异，无论你考研初试多高，研究生复试机考永远是你不可避免的一关。大学里热爱算法，热爱编程刷题很多的同学们，往往都会在机考中取得优异的成绩，甚至可以弥补你初试分数低的不足。学长还见过大学里非常优秀的其他同学，就是因为只注重考试的分数，疏忽了对自己编程能力的训练，最后导致复试机考爆冷，与自己心仪的大学失之交臂的。：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去外企工作，你会发现外企非常注重对求职者算法与数据结构基础，编程能力的考察。国内互联网早些年可能不会要求职者面试时编写程序，现在几乎各大公司面试都会模仿外企的模式，考察求职者的编程能力。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作不一定影响很大，但是你的编程功底是否扎实直接影响了你以后的工作效率。如果你没有通过编程题目的考察，几乎很难通过心仪公司的面试。自己虽然不是ACM选手，但是也同样深知打好扎实的算法数据结构基础的重要性，在大一早早的就开始刷题。让我之后在大学中的各种程序设计类比赛，保研复试机考，大厂求职面试都受益匪浅。说完了重要性，那么该如何做呢？学长之前在工作闲暇之余随手回答过一个关于编程的问题，没想到帮助了很多的同学，收获了800多个赞同，这里我就不重复写了，如何做可以看一下这个：猪学长这里分享给大家一个谷歌学长精心整理的LeetCode优质的题解小册:里面详细的把LeetCode热门的高频面试题目按照知识点做了分类整理，同时给出了最优的题解！有需要的同学记得保存起来，日后一定会用到。由于内容太多，下面这里查看：我们大学中大二的课程是非常非常满的，因为自己大一就定下了要拿国家奖学金的目标，所以在专业课程方面丝毫不肯松懈，不仅不能轻易翘课，就连平时作业都需要尽可能的都高质量的完成。与此同时我还给自己计划安排了大量的校内项目，国内比赛要参加。我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。一个是手机振动放在枕边:一个是金属闹钟放到床下桌子上：这样每天就能05:20被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎大二的无数个日子每天都是在这样的晨曦中开始。因为自己要参加很多的计算机类比赛，大学中的比赛主要就分为程序设计类比赛与软件设计类比赛大类。自己在大一打下一定的算法基础之后，大二又阅读了很多算法相关的书籍:比如非常经典的的紫书,第一次学习这本书简直太爱不释手了，里面有大量的精彩的高频算法题目的归纳与精彩的讲解。记得当初非常认真的去复现里面好多的题目，然后跑去oj平台上去提交。还有蓝书，有一段时间我对图论相关算法特别痴迷，觉得紫书里面题目还太少了，就买了蓝书去专攻图论相关算法题目。另一方面也是为了后面要参加的算法比赛做准备。蓝书里面有大量的不同算法专题的ACM经典例题与讲解！巫神的挑战程序设计竞赛，这本书也是非常棒的！里面分为不同章节，由浅入深的介绍各种算法。最关键的是，里面给出的很多算法模板都非常非常的经典。是一本不错的算法比赛学习书籍。其实此刻在写这些的时候，回想当年的自己也是觉得走了不少弯路。当年因为我本科学校是垃圾弱校，学院根本没有ACM队伍，其实上面这些书籍的内容有些偏深了，比较适合ACM选手。但是作为普通的计算机专业学生，我当初花了好多精力练习的很多偏深，偏难，偏怪的题目其实后面也不太常用到了。还不如多刷刷LeetCode实在hhh。然后还有剑指offer很多同学发私信给猪学长求上面这些计算机学习的以及的校园招聘面试，这里先分享给同学们：我是在大三时候才知道这本书的，其实上面的那些ACM级别的算法书我都阅读过之后，剑指offer其实就有些更偏基础了，好像60多道题目，都不算很难。在这期间，我一直活跃在各个oj平台上，然后积极参加各种算法比赛。我贴我一直比较喜欢，一个冷门一点的oj:哈哈当年的账号都已经找不到了。同时因为项目比赛我不太喜欢依靠别人，抱别人的大腿，所以一般我都是自己一个人是队伍中的主力。大二那一年我涉猎了非常多的不同方向的软件开发技术，几乎比赛需要什么，我就立刻学什么，然后就开始上手开发。搞过Qt，当时看的是这个，顺手也把c++期末大作业给搞了。当别人的c++大作业还是控制台的某某管理系统的时候，我用QT写了一个3000多行的带图形界面的桌PC端软件，老师直接就给了我98分的成绩让我印象非常深刻。玩儿过Android ，为我当时还在上小学的小弟开发了一个数学算数训练小游戏的App。同样不仅参加了一个小比赛，而且同时还作为了java课程的期末大作业。我记得当年好像是用安卓写了一个小的游戏机app，里面有别踩白块，等几个小游戏。现在app已经找不到了。上面这些书籍与项目如今都免费分享给同学们：然后同时写过web，搭过电商网站......这其中有的是自己对技术感兴趣，有的是项目比赛需要。回忆起来最有趣的事情，是我曾经还花了一个通宵的时间写了一个，30元一份的超低价，一晚上卖出去多元，后来才知道贩卖游戏脚本不合法，吓得我赶紧就收手了。哈哈哈，但是我当时一晚上写游戏脚本赚500块钱的事情还是在学院里传了很久。因为自己要参加的比赛，项目太多，有时候当比赛与期末考试周赶到一起的时候，简直就是如噩梦一般的存在。单片机期末，通宵到天亮。还记得当初大家都觉得单片机好难好难，我好像是全班为数不多把功能都实现的。我只记得我大二那一年课真的是巨多巨多，然后真的是好忙好忙。但是努力的付出终究是有结果的！！！当大二下学期结束，大二一年的成绩几乎满绩点4.0，同时辛苦很多时间参加的非常多的比赛都有了收获。然后终于等来了我们那年的国家奖学金的评选。按照当年我们学院的规定，学院每年有四个国家奖学金名额，大三学生分配三个名额。只分配给大二学生一个名额。我当时怀着忐忑的心情像辅导员提交了申请表，因为当时并不知道系里其他同学的实力情况如何，自己能否当选。当评选结果公布，我在公示栏上看到了自己名字的那一刻，我感觉一切的付出都有了结果。还清楚的记得当时每个公示的时候，我的个人信息是跟三名大三的当选的学长学姐并列在展览栏里，我大二的履历栏里的经历就和他们大三时候一样多。当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。虽然我们学校非常差，保研名额不是很多，但是只要自己大三正常上课，自己不作死，几乎保研是十拿九稳的事情了。因为自己真的大一大二太辛苦了，同时也实现了拿到国家奖学金的这个目标。自己原计划在大三可以休息一下。但是学长得知的一个消息，彻底改变了我的整个大学轨迹。因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。然后我就详细跟这个学长请教了好久好久，那个学长人非常非常好，耐心的跟我说了好多他的经验以及准备过程。那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招，才发现校招技术岗所考察的东西跟学校里学的东西几乎完全不一样。自己虽然是学校里“成绩优异”的好学生，但是竟然与企业里要求相差甚远。同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。我时隔好久再次又在大三走进了考研自习室......跟着所有大四考研的学长学姐一起，他们准备考研复试，我开备战大厂的实习。我在大三上学期花了的时间，每天早睡早起，除了上课以外，放弃所有的课余休息时间，复习准备冲刺。看了重要的技术书籍，学习并跟着做了比较优质的项目，在上写了读书笔记，刷题笔记，首先最开始的时候，我先通过校招面试题了解到，原来想要面试一个大厂技术工作岗位，原来需要在一个方向上深入的精通，而不是像自己之前那样瞎搞，所有方向都会一点儿，并不深。我就开始锁定的方向上大量的，先结合面经，然后深入的看很多很多的书。因为计算机相关书籍实在是太贵了，就一本一本的去网上寻找电子版的。你们可以看到我的截图里，每个书籍前面都标明了页数，这些都是我自己认认真真阅读过的书籍，并不是像其他人随便搜集到的资源。然后项目方面，我花了好几百块钱在某宝上买了很多的优质的项目课程：上面这些书籍与项目如今都免费分享给同学们：然后这块真的是采坑太多了！！！网上好多的卖项目资源的都是骗子，买到手里之后发现项目都是非常差的那种，技术也非常落后。这块真的是踩了好多的坑，浪费了不少的钱。最后终于找到了一些跟自己方向一致，比较优质的项目。上面的每一个我几乎都是先点进去大致了解，然后最后挑选出最好的几个项目自己深入去学习，同时在电脑上配置相关环境跟着实操，以此来充实自己的简历。然后开始准备在网上投递简历，寻找实习。原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。在之前我那个时候，好多公司的日常实习还都没有远程面试，都要求必须去现场面试。因为联系我的很多公司都不在一个城市，我只能选择面试机会最多的城市跑过去面试。最后在大三上学期结束的那个寒假，其他同学都回家过年的时候，我放弃了回家，自己一个人跑去了北京面试。原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！那时候我刚刚大三上学期......当人生中第一个offer进入我的邮箱的时候，我真的不知道我的人生从此被彻底改变......别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 的人越懂得，越极度的。但是如果你能看到了这里，透过我的大学经历你会发现，不仅仅只能低头的努力，越早的掌握信息，越早的找到努力的方向，是远比努力更重要的事情。同时你也会发现我的大学里也走了不少的弯路，我是少数既花时间在国奖保研上，又拼命找工作求职的。在计算机专业这是两种截然不同的维度。，那么你就应该像我大一大二时候，早早的掌握保研，考研，留学相关的信息。像我大一大二那样努力的搞好成绩，然后了解清楚学院内评奖评优的各种规章制度，制定好计划，去实施！，那么计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需要早早的关注求职，校招，面经，岗位等相关信息。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到bat大厂offer不一定是遥不可及的事情。在我后来的读研以及毕业后工作的期间，无数的学弟学妹们都来问我许多非常经典的问题:我在多家国内头部互联网大厂，跟无数面试官聊过，在校园招聘中，互联网技术面试官就是会认真的去考察候选者的真正实力。我知道有很多的同学，有的在ACM赛场上挥洒汗水艰苦努力，有的甚至早早的就在大二从学校溜出来去大厂实习的。而还有的同学身在甚至这样的计算机名校里，，，，。都已经毕业了，待在家里的时候才开始到处投简历。无论你现在处在任何阶段，如果你能看到老学长的这篇回答，同时还真觉得有收获，放下手中的手机，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。最后留下一句我一直特别喜欢，一直用来鞭策自己的一句话，送给大家:....我吐了....就先写到这里吧.....手好酸.....到这里都看完的同学，如果觉得有收获，不要只偷偷收藏猪学长， 给猪学长留一下一个呀，这样也可以让更多的小伙伴看到呀！后面老学长的经历还有很多很多，......之后有时间再更啦。上文中提及到的所有，，我之前一直都有认真整理，其中有很多某课上的优质课程是我曾经花了很多钱购买的，现如今也已经毕业啦，都分享出来直接分享给有需要的同学们。如果同学们还有其他什么问题，欢迎在评论区给我留言呀，不忙的时候我都会回复的。然后所有对字节跳动实习，或者求职感兴趣的同学，想找学长内部推荐的，也都统统都可以联系猪学长，记得点一个关注呦 "
你的编程能力从什么时候开始突飞猛进？,[],谷溪,在我的码农生涯中，一共有2个节点，感到自己有一种技术上「突飞猛进」的感觉。那时候刚刚转行一年，熟悉了同事，大致理解了公司产品的，知道整个流程是什么样的。按我现在的角度来看，当年的水平也就是个过得去的实习生（然而当时已经全职了……）。我全心全意地想提高技术水平，然而总不得要领，也反思为什么自己对于技术的理解深度和同事们有那么大的差距。在熟悉了Python语法后，我所会的其实仅仅是将自然语言和逻辑翻译成代码，然而并不能从计算机的角度去理解代码执行的原理，当然更无从理解性能优化之类更深奥的事情。那时候带我的数据工程师，手边经常放着一本《》，我就有样学样买了一本，并且老老实实用上班的空隙时间+下班的休息时间，缓慢地啃完了整本书。再后来，觉得意犹未尽，又买了同系列的《：编写高质量python代码的59个有效方法》，用同样的方法缓慢而持续的啃完。这两本书讲了很多巧妙的方法，从这时开始，我才开始学习代码之下潜藏的更多计算机原理，逐渐能够从计算机而非人类的角度去理解代码。打个比方。但对于刚刚接触软件工程不久的人来说，通读这两本书，确实可以有功力大增的感觉。所以我强烈推荐，无论新老工程师，都要读一读这两本，起码要做一个 Pythonic 的程序员。有一天CTO突然把我和另一位前端负责人叫到一起开了个3人小会，讲了一下要写一个新的后端数据读写服务。这个服务非常核心，对性能和健壮性都有很高要求。当时会议的情况我记忆至今：CTO和前端负责人你一言我一语地说着架构，我在旁边听天书，都是没见过的词。聊到最后，CTO问我一句，「你能听懂么？」我像美剧《硅谷》里面的Dinesh一样……不过赶鸭子上架，用了大半年的时间写完并打磨这个组件，最后好歹完成了一个靠谱的东西（在早期还有另一个大牛同事帮我搭了脚手架，非常感激）。这也是我码农生涯中完成的最重要的东西。开发这个组件遇到无数知识盲点、踩了无数坑，数据库、运维监控、通讯协议、性能调优、单元测试……这些全折腾了一遍，感觉像读了个加速版CS本科。做完这个项目，我的编程水平终于从一个实习生无限逼近于工业级了。回头看看，像做梦一样，居然这么熬着熬着就成为同事口中的「」了。在毕业多年后开始学习写代码，让我理解了很多事情，不仅仅是计算机，也包括了「如何把事情做好」的方法。「突飞猛进」往往是自然发生的。
你的编程能力从什么时候开始突飞猛进？,[],walker shi,先说结论：1、一定要接触最好的编程体系，好的体系可以达到事半功倍的效果，否则即便智商再高，也有可能要走很长的弯路；2、切勿有畏难心理，在学习的过程中会遇到数次平台期，期间有可能会怀疑人生，需要熬过去；3、编程水平的提升需要经过大量的练习，不存在不劳而获；4、要和优秀的人一起学，遇到不会的问题，要放下面子，敢于提问；5、遇到不会的知识点，需要硬啃，今天不解决的问题，明天不会自己解决；6、数学对于编程非常重要，请学好数学；7、教别人会让你自己水平变高；我是从初一开始学编程的，一开始学编程只是为了多玩会游戏。2010年在三线城市的普通初中，编程这个事情压根就没有普及，我也不知道学这个东西有什么用，那时就是学着玩呗。因为也没有人教，我就买了一本清华大学出版社出的的教材在那边瞎折腾。那时候网上也没什么资料，所以我学了三年啥也没整明白，像搜索、最短路这些算法我连名字都没听过，更不用说会写了。进入了，我突然发现，原来编程不是我以前认为的那样子的，是另一个样子的。因为周围有一些很牛逼的人，就是那些能拿国内甚至国际奥赛金牌的人，我才意识到差距不是一般的大，他们五分钟十分钟能解决的问题，我自己搞了两三天都不知道在干什么，就只能拼命地学，每天压力也很大，因为周围的人都比我水平高，他们都是从好的初中过来的而我的初中水平差，我每天就担心自己会不会垫底，所以心态很不好，人就很焦虑。我那时从初三暑假开始在绍兴一中学，一个暑假就学会了很多东西，因为有学长带着，就把动态规划、图论基本上都学会了。后来想一想好像我也愿意走这条算法竞赛的路，就继续学了。我人生有三次编程水平大飞跃的时期，我的高中时期是第一次。但这次背负了太大的压力，因为世界第一次向我敞开了大门，我之前根本就不敢去想清华北大之类的学校，因为我的人生目标一直都只是考上一个一本学校，然后回老家做一个公务员。突然间，看到了不一样的希望，因为太想要，所以最后也得不到。每天就是失眠，两三点要嗑安眠药才能睡着。大冬天下着雪，我穿一件衬衫也会流汗，但我就在那边拼命地学，因为我相信努力还是能出成绩的。那时候确实也学到了很多东西，每天早上七点就到机房，晚上怎么也得到十点十一点睡觉，有比赛的话就要到凌晨两三点，第二天又是七点去机房，每天重复这样的生活，大概过了一年多的时间。最后高中我水平也比较高，小比赛都很牛逼，但由于心态的原因，一到大比赛就会全线崩盘，差点就没大学上了，也受到了很多的质疑，质疑我平时在作弊，因为我平时的水平和比赛的水平差距实在太大了。我受了很大的委屈，我从小就很看不起作弊这件事情。最后我运气比较好，进了上海交大，进交大的时候，我心里其实是有一股气的。我觉得我要证明我自己，因为高中相对来说还是有点失败的。那我得告诉以前那些小瞧我的人，他们是错的。很庆幸我进了上海交通大学，无论是从能力上还是思想上都极大地改变了我的一生。大学的时候，比赛是三个人一队，有两个队友，每天都在一起学习一起训练，这样的道路就不会觉得太孤单，以前一个人的时候会害怕，总会患得患失，现在队友就是坚强的后盾，你就不会再恐惧，因为你们三个人是一个整体。那时候我也学了很多的数学，因为高中的学习其实很多是建立在猜上的，很多都是靠直觉，直觉就是依靠多次训练之后锻炼出来的，你觉得它是对的，它也确实是对的，但就是不知道为什么。大学学了线性代数、数分等等之后，第一次知道这些为什么是对的，而不是仅仅只会用它们。这件事情让我养成了一个很好的习惯，就是写代码之前要从数学上证明自己的想法，这会让你在写代码、打比赛的时候犯更少的错误。于是我实现了第二次飞跃。那时候，我和队友们经常一起睡机房，也经常半夜到处翻墙，因为管机房的大爷要赶我们，我们每天要和他打游击。但那时候的生活是快乐的，为什么呢？因为我心中有一个目标，我就是要去战胜世界上最强大的对手，去追求那种一览众山小的感觉，所以你不会觉得那是一种苦，相反你会觉得非常有乐趣。最后的结果说好也不好，因为各种各样的原因，最后到一半我自己就把这个事情停掉了，就去做科研了。在这个过程中，我花了五年的时间，也慢慢地自己治好了自己内心的不安和焦虑，重新获得了小时候那种平静。最后，我也发现，我压根就不需要向世界证明什么，压根就不需要去打败任何人，我唯一想做的就是，去探索更多的东西，去探索自己的极限到底在哪里，我的人生没有那么多的观众，做好我自己就行了。又过了几年，当我开始教别人写程序的时候，我的编程水平又实现了一次飞跃。在这个过程当中，我神奇地发现，我对一些基础的理解其实并没有那么深刻，所以就经常讲了一半会讲不出个所以然来，于是就迫使我重新回去思考，突然就发现，自己又能做一些以前做不到的事情，又学会了一些以前好几年都学不会的算法。那就是说，我以前学不会是因为自己对一些事情的基础理解是错误的。所以大家在学习的时候，也要把自己的想法和理解告诉别人，这对你来说也是一个检验和提升的机会。还有，在学习编程的过程中，我自己遇到了非常非常多的瓶颈期，就是那种半年一年啥都没提高的状态，每天练练练就是过不了那道坎。最后其实发现，其实熬熬就过去了，编程水平的提升好像就是这样的状态，你缓很久，然后突然上一个台阶，然后又缓很久，再提升，如此循环。所以现在大家学不会也不要着急，再熬一熬，也许过一段时间就上去了。回首往事的时候我觉得自己是幸运的，为什么呢？第一，我确实遇到了一批世界上最好的人，无论是高中还是大学，大家因为共同的爱好聚在一起，每天不分日夜地去努力，在这个过程中互帮互助；第二，我接触到了很好的编程体系，因为无论是高中还是大学，都拥有全世界最好的编程训练体系。我为什么对这个事情有很深刻的理解呢，因为我初中三年真的什么都没学会，初中三年做的事，高中一个礼拜就全都能做到了，如果我不进绍兴一中或上海交通大学，我可能一辈子都不会知道编程到底是什么、算法到底是什么；第三，也是感谢命运给了我那么多的失败，让我非常早地就理解了，成功不是我追求的东西，我追求的是变成一个更好的自己；第四，在过程中我也抵挡住了很多的诱惑，因为我的初中老师和我讲，我的天赋是低于平均水平的，但就是熬熬熬，好像把比我聪明的人都熬走了，因为他们都去做别的事情了，就我继续在干这个，好像熬一熬我也熬成了这个圈子里水平不那么差的人。所以我相信，很多事情是因为坚持，你才能够与众不同。天赋只能帮助你一时，但只有热爱和坚持才能帮助你一世；第五，那时候我经常会死磕，经常下一个狠心，我不吃饭不睡觉一定要做完一个事情。如果没有这一次次的死磕，我想我也不会是今天这样。后来，无论是科研也好工作也罢，我真的看到了很多很多东西，每天都抱着一种好奇心，想要对世界多了解一点，但如果不是因为遇到了编程，遇到了这么多非常优秀的人，遇到了这么多优秀的老师，我这样天赋的人是压根不可能走到今天的。所以，现在我们想把我们的好东西分享给更多的人，我们真的想要把自己了解到的东西开放出来让大家少走一些弯路。因为我们知道走弯路是什么样的感觉，我们知道那种苦涩。那么既然我们有能力，我们就应该帮助更多的人。我们后面做的很多事情都是基于这个逻辑。
你的编程能力从什么时候开始突飞猛进？,[],有了琦琦的棍子,18年开始编程，从一个连for循环都写不利索的跨专业小白，到后来21年秋招能拿到不错的offer。在这两年多的时间里，从0到1，我感觉自己水平突飞猛进的节点主要有三个：其实能够从巨量的互联网信息中搜索出想要的信息并不是一件很容易的工作，哪怕是有了百度和Google。当出现bug的时候，总是会有一堆的报错信息，而搜索引擎的信息检索是有字数限制的。以及，这两个问题其实并不简单。对于第一个问题而言，其实首先需要将报错信息好好看一遍，大概地明白可能是哪个地方出了问题，再把最重要的关键字挑出来进行检索。关于检索的关键字，最重要的是信息量尽可能地大，有位答主说得很好，相关链接在这：对于第二个问题而言，其实核心在于按照自己的经验如何在大脑中对网页结果进行一次再排序。一般而言，网页边上有广告两个字的就不用看了。在debug的时候，最重要的网站莫过于 相关开源软件或者商业公司的，但这些都要求使用者具有一定的英语水平，所以大家尽可能地提升自己的英语水平，尤其是阅读能力吧，可以有效地提高自己debug的能力。说到这个，一下子又回忆起被环境配置等各种问题支配的恐惧。当初读研究生遇到的第一个任务就是将一个大型工业软件跑起来。而当时的我刚跨专业考进来，代码量大概是一千行不到这个量级。连命令行是什么东西还不太清楚，只明白一些基础的概念，刷过几十道leetcode。我对编程的接触只局限于写一个函数，也就是在大括号填点东西。，这些东西，我一无所知。那个时候有点像刚学会在地上爬就得去参加马拉松一样。但没有任何办法，只能硬着头皮去搞。现在想来，最核心的问题在于。其实正常的软件编译，出了问题Google一下总是会有一堆的教程。但我要编译的软件是一个存在了几十年的用Fortran写的工业软件，在网上什么信息都没有。只能硬生生地去啃Makefile，从最外层目录开始看，一层又一层地链接，一共有几十个Makefile文件，都只能一行一行地看。不断地make，不断地报错，不断地解决问题。各种软件依赖问题，各种链接问题。真的是令人痛苦不堪。这是我从事计算机行业遇到的最大的问题，每天一睁眼就是想着如何解决bug，有的时候一个礼拜都解决不了一个bug。对于自信心打击巨大，常常失眠。不过硬啃了将近一个半月的时间，终于把软件跑通。也是从那以后，我开始有了强大的自信，通过这么一个事情，我感觉自己的技术水平有了突飞猛进的进步。也开始把课本上的那些知识点一步步地串联起来，我熟练了Linux的各种命令，明白了如何用将几十万行甚至更多的代码组织在一起，知道了各种、动态链接、编译参数的作用，搞清了一堆的字符串文本如何被转化为一个巨大的二进制文件，然后如何从磁盘中将这些二进制文件加载到内存中，最后控制器将这些二进制文件按照格式一条一条地从指令cache中取出，加载到CPU的ALU中，搭配着寄存器进行计算。所有的代码都被翻译成中几十条乃至于两百行的指令。那个时候感觉计算机的知识就像一条汹涌奔腾的洪流，无比壮阔，涌进我的脑海中。从那以后，即使面对着大型程序中的数百万行代码也不再有恐惧感。我终于树立起信念，相信自己能够解决一切问题。 这个部分在我其他的回答中详细地聊了一下。我在这里再简单地说一下，，刷leetcode觉得难。主要是因为两点：。计算机不像数学或者物理，有着大量的初高中老师，有着详尽又充实的教辅材料。带着大家学完知识点a，而后学知识点b，难度层层递进，科学又合理。而我们刷题的时候，刷了一道题，有一个知识点a，瞅一瞅。又刷了一道题，有一个知识点g，再理解理解。这个学习的过程是散乱的，而是并不是线性的，有的很简单，有的特别难。这种学习曲线简直就是噩梦。。正常学数学，高中数学，都是一个知识点，无数的题目，五花八门，不断变化，就是那个知识点，做了一遍又一遍。大家不用动脑子就知道。比如立体几何，第一步建直角坐标系，第二步，转化为坐标系的一些运算，然后blabla套公式直接算。而刷算法的时候，每一个题都像是一个新的内容，得去记，去背。但题是背不完的呀！真正的方法应该是总结出一套模板，把各个题映射到不同的知识点，再用对应知识点的模板，改一改，调一调，拿去用。不断地重复这个过程就是形成刷题的肌肉惯性。总之，通过Acwing，针对这两点问题，开始，然后。当然，也通过刷题积累了大量的编程经验，可以较快地解决一些常见的bug。当我学完相关的基础内容和部分提高内容，又在leetcode和acwing上刷了几百道算法题，写代码的感觉不再生疏，越来越得心应手，这也为我后面找工作提供了巨大的助力。
你的编程能力从什么时候开始突飞猛进？,[],李rumor,每次信息流刷到这个问题，都会拨动我记忆的缓存，让我想起那段大起大落的时光。19年夏的某一天，在各大公司陆续推出自己预训练的BERT，并开始用它们做离线任务时，把我叫进会议室，说老大想上线BERT，需要尽快写一个服务。不是那种用tfserving或者libtorch哦，是直接用C++写。我面无波动地答应了下来，实则内心已经裂开了。自己不是CS科班出身，压根没写过完整的C++项目，虽然有些Java基础，但到底几斤几两我还是蛮清楚的。打比方的话，就是让第一次玩塞尔达、刚开完四个神庙、出了新手村的我直接去打盖农，悲壮之感难以言表。但我作为新时代的自强女性，还是开启了冲向海拉尔中心的旅程。Fortunately，我找到了知乎开源的cuBERT项目，作者写得特别清楚，并且同时提供了GPU和CPU版本，但老板看了速度之后仍不太满意，最终我靠着极强的搜索技术又找到了英伟达刚开源的fastertransformer，用Cuda C++直接实现了transformer底层运算，速度秒杀其他方案。在经历了各种make、install的折磨之后，我终于摸清了如何在服务器配置相关lib并运行c++代码，也顺利跑通了官方demo，性能完全符合预期。但不能高兴得太早，因为这个库只有transformer层的实现，前面的、embedding、pooling都没有写。。所以，这意味着我要读懂源码，然后自己把剩下的补全。这里有碰到了第一个难点，就是跑官方给的模型没问题，但运行我们自己的模型后就出现了 nan 这个恐怖的结果。于是我开始使用 print 大法，但惊讶地发现 cuda 底层全是并行的，一打日志都是乱的。。。于是我学会了 synchronize，在每个 operation 之后同步再打印结果，最终花了两天时间定位了问题：原来是。立刻给作者提issue，不过在等待作者回复的过程中我居然自己给改好了，还默默学会了 Parallel Reduction 算法。期间我还会卡在各种各样的事情上，经常会卡上一两天，陷入自我放弃的漩涡。最终还是搞懂了源码，搞懂了，并加上输入输出层搞出了完整的C++ BERT。但仅仅有个程序还是不够，服务接口在哪里呢？于是我又搜啊搜，找到了一个宝藏：TensorRT Inference Server。当时的版本提供以下超赞的功能：所以又花了几天把C++ BERT适配TensorRT框架，成功变成了服务。变成服务之后又有问题，就是每次换机器都要重新配置环境并部署，于是我又学会了docker，减轻运维负担。整个改造差不多耗时小两个月，也是我工作至今记忆最深的一段时刻。。可以一起体会下：当然也忘不了身边同事牺牲自己时间给我的帮助，还有lead和我一起翻了半天C++ Primer 才解决问题的欣喜。故事的后来很圆满，压测效果满意，成功服务了团队的BERT上线。包括后来我在20年初和其他两个大厂团队的人交流，都没有听到过更快的速度，甚至有同学直接质疑了我，因为他们的延时是我们的两倍。。。现在回想起来，这段经历真的太宝贵了。虽然不想再经历一次，。。，找一个高质量的项目，读懂并进行修改，在一次次自我放弃中成长。就像走过高考、走过考研、走过校招那样，过去那道坎就没什么了。另外，为了push大家学习，：一些参考：
你的编程能力从什么时候开始突飞猛进？,[],尘码在摸鱼,很多次。大二时和同学吵架，气得看了一遍菜鸟教程。学会了前端三剑客，学会了php，学会了自己建站。然后就开始接各种项目玩，有小程序，有物业管理系统，甚至还有澳门皇家赌场(做完了怕被抓没交付)。第二次是进，负责重构我们所有jq系统的前端项目。花一个月写各种方案被老板叼得破防大哭。上手踩了不少坑，吃了无数bug，挨了无数骂，背了无数锅。天天喊辞职，不过终于搞出来了，收获颇丰。觉得还能再加油加油。第三次是成为负责人开始带队。对整个软件工程有了更多的理解。开始站在更高的视野看各种事情，以前不理解的也开始理解了。做事慢慢也形成了各种方法论。开始重新review之前的代码，从架构层次开始局部重构。开始系统的完善工程化，系统的优化性能和用户体验。第四次是遇到各种奇葩问题。于是开始看各种框架源码，开始看chrome源码，开始看各种牛批的库。学到了很多技巧和想法，并且应用到了工作中。发现之前觉得无从下手优化的东西现在就是一坨shi。又开始做各种优化。第五次是开始准备搞自己的独立游戏。我脑海中有了一个有趣的世界，我想实现它。自学了unity，学习了gpu和，学习了各种姿势。同时也理解了绘画，音乐，写故事等辅助技能。不得不说，很多时候跨界的知识也会带来很多有趣的思考。第六次还未来，不过我还活着，还在努力。等发现了再分享分享。不难总结，所有的经历都有一个共同点。那就是离开舒适区，向外探索。哪怕很难，哪怕很苦逼。只要有正确的大方向，只要不死，就努力找方法去解决，去踩坑，哪怕走点歪路，吃点亏。所以我虽然在鹅厂混得还可以，也似乎有点机会往上更进一步。我渐渐意识到，打工是有天花板的。无论是职业上的还是身体上的。我也渐渐意识到，打工只是在某个经济系统中扮演其中一个角色。我更想跳出看看要怎么才能创造出属于自己的经济系统，从生产到销售到售后。我更需要有自己的产品，虽说这条路也很难。但我想试试。4月初更新，感觉终于算是跑通了独立开发这条路，虽然没啥钱，但是很快乐。俺发布了一个Vscode插件—— 〔拖拽导入代码片段、项目文件、npm包〕简单推广了下，用了几天，虽说用处没有那么大，但还是有点快乐的，欢迎一起来体验。(づ ●─● )づ  大致如下图，直接商店里搜索安装就行。咳咳，言归正传。一开始其实很多想法。等等等等，很多很多想法，其中很大一部分也花了不少时间(比如摸鱼插件和写书)但是想了想，最终还是做了减法——想法越多，进度越慢，先上线再说。然后我就减出了XMouse，第一个版本很简单，只有代码片段的crud与拖拽。自己用了下还挺好玩，分享给了朋友们反馈也还行(也可能是照顾我面子)，然后也写了篇文章推广，没想到真吸引了一些用户，还有朋友希望共建。不得不说，把我当时高兴坏了。虽然没啥钱，但确实比发工资爽。当然也欢迎朋友们打赏投喂加鸡腿。ps：项目开源，请放心食用。今天先说到这，后面再更新。都看到这儿了，点个赞和关注吧。有兴趣也欢迎来找我聊天，联系方式如下 ( 'ω' )  免费多个朋友不是坏事，反正一键能拉黑。
你的编程能力从什么时候开始突飞猛进？,[],编程指北,不过老实说，就编程能力上确实没有“突飞猛进”的感觉，都是逐渐的进步，量变引起质变嘛。我们都是普通人，不可能像一样因跌落悬崖，意外获得《》，从此开挂，走上巅峰。只有靠不断的看书、coding、学习优秀，构建自己的计算机知识体系，并且在特定的领域不断专研，这样才能成为一个优秀的工程师。滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”，逐渐构建起属于自己的计算机知识体系，学习一定要系统，这里推荐一个计算机系统学习网站，有Java、C++、Python、操作系统、网络等学习路线，计算机必读书籍PDF、C++、Java、计算机基础面试题等：我在大学之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。当时甚至很担心完全没有编程基础的我，上大学会不会跟不上。后来大一，第一门编程语言就是学的C语言，怎么说呢，老师讲的，书上写的我都能看懂，但是一让我写一个大的程序，我就摸不到头脑，不知从何下手，学了半学期，也只能写写课后习题，算算什么的。而且当时对计算机缺乏系统认识，即便我知道指针就是变量地址，也很难理解它到底有啥用。甚至分不太清数组和指针的区别，以至于会出现对函数局部变量取地址返回这样现在看来很低级的错误。大一上考完C语言后，我便在心里默默念想，这辈子再也不写C了，只是没想到的是，后来这成了我最爱的一门语言。大一下开始学习数据结构与算法、数字逻辑这些计算机核心课了，此外，还学了一门当时我看来非常牛逼的语言—Java。为啥说我当时觉得它牛逼呢？因为刚经历过C语言的摧残，发现Java丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用。Java我学得很认真，当时还看过的Java Se教程。自己也用Java写了不少好玩的东西，比如联机五子棋、HTTP服务器等等。这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师。在学java的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了学好Java，我在知乎搜索各种书单，先后看了《Java编程思想》《Java核心技术卷》《Java并发编程》好几本书(不是全看哈，大部分主干章节大一暑假在家自学了安卓，并写了几个app玩，但发现自己不太喜欢客户端，于是大二开学就开始学 Java 后台开发，从 Servlet 到 SSH SpringBoot，基本上都过了一遍，后来越来越觉得这条路就是在学各种框架，总觉得不太对劲。同时，大一暑假有大四学长学姐在学校广场摆摊卖书，我也买了些，其中有一本就是被称为计算机神书的CSAPP。大二在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。为了看懂这本书，又去看了那本《汇编语言》，重学了C语言，由于已经学了汇编，指针对我再也不是问题了，同时看完了《c和指针》、《C专家编程》、《》，C语言使用得也愈加的熟练。大二上那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，于是我也不例外的加入了，先后看了点的视频和西瓜书。跟着写了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理。这让我学得不安心。于是ML的学习之路也止于大二。大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后又跑去学Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、抢课脚本，玩了一段时间也没太大兴趣了。时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索“操作系统怎么学”，顺着一堆回答，我发现原来还能跟着别人写一个 mini OS，这对我吸引力太大了。于是我买了一本《》，这本书真的非常仔细，把写 OS 需要用到的前置理论知识、汇编、内联汇编全都给你讲清了。我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入C语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。当时真的对这个入迷了，为了写Min os我还去看了Linux0.11的部分代码。把我的QQ签名改成了 jmp 0x7c00 (这句汇编就是将跳转到0x7c00这里，BIOS开始引导操作系统。于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书。于是开始了非常标准的 Linux C/C++学习之路。也非常推荐大家尽早去刷一下牛客网，上面很多大三、研二的正在找工作的学长学姐们分享的帖子，早点接触这种就业的氛围，自己也会更加有动力去学习，也知道学习的方向，另外上面可以针对校招刷算法题、刷SQL等等，还挺方便的，现在很庆幸自己在大二的时候就在刷这个网站：前前后后看了《》、《APUE》、《UNP》、《深度探索C++对象模型》、《STL源码剖析》、《C++设计与演化》、《》、《Linux内核完全注释》、《effecitve C++》 、《effective modern C++》、《》、《Linux高性能服务端编程》、《Linux多线程服务端编程》(知乎大佬写的)......，顺便还看了点muduo源码，自己模仿着基于epoll写一个reactor模型的web服务器，跟着知乎Milo大佬写Json库，总之，这段时期是写了一些小”轮子“的。学习计算机一定不要想着速成，要下苦功夫，去啃那些经典书和源码，然后自己动手写，我大学整理了一套计算机必读的经典书籍，对于CS学习的同学帮助非常大，且十分系统，这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：看的书越多，其实你越能找到自己的方向，大三上我就给自己学习定位：深入C++语言（多线程）+ 存储（学习redis、leveldb）+ 网络编程（学习muduo，各种网络编程模型）+ 学习分布式（mit 6.824、ddia、google三大论文等）基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注C10K、C100K这样的后台服务器开发高性能、高并发的解决方法。值得一提的是，大三上我们学院有门System Programing的课，教材就是使用的CSAPP，因此我之前大二草草看完的书，得以再次翻开，这一次我把附带的是个实验也挨着挨着做了，收获良多，有位运算各种奇技淫巧，有Bomb lab刺激的打怪通关、也知道了buffer overflow attack.... 还有实现基本的内存管理等等。印象最深的便是做bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是连着把这几个phase过掉的，当然头发也没少掉。当时还写了个记录：再到后来，我拿到了微信实习offer，然后顺利转正。在我大三下拿到实习offer后，我开始做一些国外计算机课程lab，一方面有钱拿，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些lab很有意思，对提高基础和编程能力很有帮助。现在我开了一个公众号「编程指北」分享编程学习方法、技术相关的一些东西，感兴趣的同学可以去关注下～在这里列举一些我做过的觉得有意思的lab：这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 VFS（虚拟文件系统） 机制挂载到 Linux 内核中，然后就可以用系统调用 open、read、write 这些来在你的文件系统上进行读写。VFS 是Linux一个机制，它规定了 IO 接口，然后你去实现这些接口，你就可以挂载在上面。通过这个东西我深入的学习和了解了文件系统，报酬也是非常值的。就是版本管理系统，类似 SVN 和 GIT的，但是相对 GIT 做了很多简化，核心的就是创建分支、分支合并、回滚、commit 这些，通过这个我又去详细了解了 GIT 的实现原理，并且自己写了一个简单版本的 GIT，受益匪浅，也赚到了几千大洋。第三个是操作系统的锁实现这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多， 但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种网络拓扑，可以调节网络 丢包率 Loss chance。当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。对这些Lab感兴趣的可以去我公重号「编程指北」后台回「lab」，我会不断更新汇总做过的一些lab和课程网站链接。如果对这些lab感兴趣的，自己也想做的话，可以看看我的这篇文章 做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。(顺便还让我大学期间就月入上万。。。附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：这是带去图书馆自习室的书（常占位置）这是毕业整理的书：买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。下面就是我自己整理的电子书，绝不是在网上那种打包下载的，而是自己需要学到某个方向的时候去网上挨个找的，最后汇总而成。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精当然了，多刷题也可以提高编程能力，所以在这里也推荐一份我看过的谷歌大佬开源的刷题笔记：    ————分割线——评论区还有小伙伴想要我的书单，这里也给出我以前写过的一篇文章，大家感兴趣可以去收藏下：另外，推荐一篇我写的关于指针的文章，绝对深入浅出~在这顺便推荐一个 Github 开源仓库，基本包含了常见的 CS 编程学习书籍，可以 star 一下，需要的时候直接去上面找书：觉得有帮助的话，帮我  点个赞哟~
你的编程能力从什么时候开始突飞猛进？,[],盼盼编程,"垃圾本科，非985/211学历！就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，腾讯等多个大厂offer。我知道我其实算不上计算机系最厉害，最努力的同学。现在回想到当年努力的自己，顿时一种热情油然而生。出身农村没有富裕的家境，不能报高档的培训班，没有过人的天赋，高考成绩也不好，比不过985/211的同学。要么自己拼命努力毕业近大厂，要么躺平毕业去干销售，最后没有选择只能背水一战。大学计算机系的同学努力一些的，要么专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer到手软。一路走来，我也踩过不少坑，走过不少弯路。学长作为一个过来人，给计算机专业学弟学妹们分享计算机专业学习的一些经验。我会从校内学习，再到校招各个技术岗位的求职学习，再到求职找工作一一分享。无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，考试排名班级考前，然后再参加一些专业相关的项目比赛拿到奖项，就足够代表这你在学校内很优秀了，毕业找工作求职也够了。你的待遇也完全和你学历成正比。但是计算机专业属于强技术类的，就和普通专业很不一样。计算机专业技术岗位的求职几乎跟校内的成绩没有什么很大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用，每次排名垫底，毕业照样拿大厂offer。产生上述现象的原因：就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了，大学里面学的比价杂，需要自己专门深入学习一门技术才行。每年计算机专业都会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。天天只顾读死书，没有搞清学习和面试的区别，也没有取了解的一些校招和面试的情况。我有见过一个985大学，计算机科班，成绩排名全班第一，面试连一个最基础的都写不出来，具体一些技术内容也是模棱两可。但另一方面，我还见过有的同学，大学天天逃课，成绩排名办理倒数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。有很多双非本科的学校，校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力就可以逆袭的专业。我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种社团，学生会，活动及其丰富，当时也很迷茫，不知道以后道路如何。大学刚开始在C语言课程，遇到有些不懂的，我就去找学长请教。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，也不谈情说爱。而是一有空就去泡图书馆，我每次去图书馆都能看到学长的身影，学长的书桌上堆着很多计算机书籍。每次向学长请教，学长也会很耐心的回答，并指导你如何学习计算机，以及一些学习路线。自己也去了加一下编程学习网站，加学习交流群。偶尔在一次上评论某个腾讯工程师的博客，竟然得到了回复。以后经常关注他的博客，跟着前辈一起学习技术。我大一上学期学了C语言，python，，第一本学习C语言的教材是老师的C语言程序设计。这本书可以算是C语言入门的初级书籍了，经典的入门级程序hello world!程序就是从这里开始的，哈哈。虽然这本书比较基础，但对于刚接触编程的我，一开始没看太明白。上课根据老师讲的，自己敲代码运行程序，课后也会花时间自己琢磨一些。待整本书学习之后，又重新看了一遍，才大致看明白一些。这本主要讲解一些C语言变量，函数，循环，数组，指针一类的基础知识。刚开始学指针的时候也比较疑惑，不知道为啥要使用指针这东西。对指针的用法也不甚了解，自己甚至写过返回局部变量指针的这种低级问题。在学完谭浩强老师老师的书籍后，自己也在学长的建议下买了一本，当时坚持把这本书结结实实地精读了一遍，而且几乎练习题都做了，算是比较好的开端。自己也会用C语言编写一些计算器，等一些小程序！看了C Primer Plus之后，个人觉得C Primer Plus更适合入门学懂C语言，书中有穿插一点C语言的历史故事和应用背景，更贴近实际。书的语言更像一位老师循循善诱你一步步理解C语言，一开始给出代码例子，可以让你上机体会，然后一步步逐渐深入讲解这段代码各语句各函数的作用。这样学起来个人觉得更能吸引学生学习兴趣。大一下学期就开始学习，C++。对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。蓝桥杯，天梯赛，PAT，ACM都是着重对算法的考察。学好算法，并在这些比赛中摘金夺银对你以后考研，找工作都是不少的加分。：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机考试。无论你大学里成绩多优异，无论你考研初试多高，机考永远是你不可避免的一关。大学里热爱算法，热爱编程很多的同学们，往往都会在机考中取得优异的成绩，甚至可以弥补你初试分数低的不足。：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去国内互联网大厂工作，你会发现大厂非常注重对求职者算法与数据结构基础的考察。算法属于基础，算法题过不了，其他一切面谈，就是这种模式。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作。大一下学期就比较忙了，课程逐渐增多，要学的东西也变的很重要了，难度也加大了。这个大一下学期就没怎么休息过，上课，做实验，下课去图书馆。图书馆闭馆后，晚上回寝室继续学习直到转钟，有时候也不能学习的太晚，会打扰到室友休息。我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。一个是放到床下桌子上：闹钟设置成06:00, 手机振动设置成05:50。这样每天就能05:50被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎无数个日子每天都是在这样的晨曦中开始。我学习学习算法的第一本书记是这本也是比较今典算法方面的书籍,读完的感觉真是感觉爱不释手。总体难度难度相对较低，当然这是后面感受到的，刚开始学的时候不这么认为。有些知识越学到后面就会发现哪些简单，哪些困难。这本书需要通读，里面知识比较全面，各种数据结构都有涉及到，里面全是Java实现，自己需要用C代码重新实现一遍，方便自己理解。还有我看的难度较大的算法大黑书，就是《》这本书我并没有全部看完。这本书里面有很多算法，会让人觉得读起来很困难。算法导论看完前面17章即可（到贪心那章），算法复杂度分析的部分可以尝试去看看，如果实在讨厌公式推导也可以跳过，但是要能够掌握推导一些常见算法的复杂度。为了应付公司面试时的算法题，同时也是为了积累自己的代码量，我就开始去力扣刷题了，这个刷题一直持续到我找到工作。当时我按照题目的tag来刷，这样更容易增强自己的解题能力。大学期间，我就已经在力扣上刷了300道题目了。学习C++语言，我用的，感觉这一本书就已经很全了，里面各种C++的知识都有。由于这本书比较厚，当时学习也花了挺多时间。上面每个程序都自己实际运行一遍，学完一遍又头头开始看了一遍。总体感觉学这本书不能求快，一个一个章节的搞懂才能继续往后面看。 这本书值得收藏，堪称C++学习字典。大二上学期主要学一些编程基础，拓宽学习视野，算是平稳度过。大一学完C/C++，算法之后。大二上学期学校又开设Java课程。Java在当时看来是一门非常牛逼的语言，初学习Java后，发现Java里面又大量的类库，开发起来及其方便，而且快捷很多。Java里面没有指针这种难搞的东西，用引用代替。当时学习Java看的 《java语言程序设计》，后面没准备往Java方向发展，Java的学习也就到此为止。那个时候Python也开始火起来了，我也开始学了下Python。自己买了本，学习了下基本语法。然后就开始尝试使用Python爬取百度热搜，和豆瓣的一些数据，感觉还挺有意思，在学习的过程中，也可以对html、等有一些了解。当时运行的一些调试程序 ，哈哈！在学习C++的时候，自己尝试使用写了一个3000多行的带图形界面的桌PC端软件，把这个当成实验项目交给老师，老师直接就给了我90分的成绩让我学习兴趣倍增。自己在学习C++网络编程的时候，用C++实现过一个简单的IM单聊，群聊群聊，消息推送，消息同步功能。麻雀虽小，五脏俱全。把这个与协议的知识统统用上了，加深了对其理解。然后同时用java写过web，搭过电商网站......回忆起来最开心的事情，是我曾经还花了一个通宵的时间帮别人搭建了一个网站，大学第一次通过技术赚取了300元。当时一晚上赚了300元了，我还请室友一起吃饭了！时间来到大二下，这个我选择方向发展。这个学期是打下计算机知识基础的关键时期，看了很多书，这里由于书籍太多就不一一列举了。一下课就直接奔去图书管，图书馆有我一直占的座位。图书管关门后，就去寝室学习到凌晨2点。这是宿舍夜战，当时拍的照片。图书管长期占的作座位晚餐饿了就去附近食堂吃个简单的饭，然后继续看书学习。大二下学期看完了、effective C++、（前三章）、计算机网络：自顶向下、部分TCP/IP详解，做了一些项目，比如正则引擎，尝试写JSON库（未遂）。APUE、、深度探索C++对象模型、STL源码剖析、操作系统概念、、Linux多线程服务端编程、、计算机网络：自顶向下、部分C++ template、等书籍。同时也做了一些项目，跟着操作系统真象还原写的操作系统、简单的，阅读了一些优秀的开源项目，SGI STL、、redis、libevent等。CSAPP ，这本书涵盖了从一个bit到一个网络应用的系统知识，初学者会有很多概念都难以理解，建议是尝试检索相关内容去理解，实在学不会就先跳过，继续后面的内容。读书过程中，也不需要一定按照其安排的章节顺序，可以先挑自己喜欢的读，例如为了理解计算机中的，就去读第六章。这本书是 CS15213 课程（Introduction to Computer Systems）的配套书籍，该课程相关的资源也可以用来辅助学习，另外，最精髓的就在于配套的Lab了，难度不低，这个一定要做，如果做的很困难，也要坚持去做，完成后会发现自己的能力有很大的提升。这本书也不用一口气读完，有些章节不太感兴趣，或者读不下去的话，可以留着，等后面知识更加丰富了再回头来看（例如网络那章，我看的是很难理解一些概念，后来学习了计算机网络和网络编程后，就发现读起来比较简单了）。，当然这种书不必通读，挑自己感兴趣的章节看就好了对于计算机网络的学习计算机网络的学习，理论先看，可以只看前面三章，即应用层和传输层，做下每章后面的lab。再就是对TCP/IP协议的学习，推荐，也是为了节省时间，可以只看TCP相关的章节。这本书英文版是第一版，中文版是第二版，个人是先看的英文第一版，然后再看第二版，挑了新加入的内容看。学习的时候，建议用来抓包，感受一下这些协议是怎么工作在这互联世界的网络中的，会很有趣的。当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。因为自己真的大一大二太辛苦了，自己原计划在大三可以休息一下。但是学长得知的一个消息，彻底改变了我的整个大学轨迹。因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。然后我就详细跟这个学长请教了好久好久，那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招。同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。我在大三上学期花了三个月的时间，每天早睡早起，除了上课以外，放弃所有的课余休息时间，复习准备冲刺。看了无数本重要的技术书籍，学习并跟着做了好几个比较优质的项目，在csdn上写了400多篇读书笔记，现在总共已经写了超过1000篇了。然后开始准备在网上投递简历，寻找实习。原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！书单：别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 越优秀的人越懂得努力，越极度的自律。经常学习到凌晨一两点，基本没啥其他课外活动，专注学习。同样越早的掌握信息，越早的找到努力的方向和学习路线，也是很重要的事。作为计科学生，大学期间一定多看书，老外的大黑书很全面，有的不要全部看，但事至少要知道一些。大家买书一定不要吝啬，这是回报率极高的投资，对于一些喜欢的书，买下来！推荐给大家一个很好的购书渠道，就是关注京东图书的活动，经常会有400减300、300减200的活动，十分划算。大概统计了一下，大学期间我花了五千多块钱去买书，这算是我花的最值的一笔钱。计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需平时多努力学习并早早的关注求职，校招，面经等。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到bat大厂offer不一定是遥不可及的事情。无论你现在处在任何阶段，请卸载手中的王者荣耀，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。看到结尾的同学，如果觉得有收获，不要只偷偷收藏白嫖盼学长， 给盼学长留一下一个赞呀，这样也可以让更多的小伙伴看到呀！c++硬核学习路线和学习资料记得帮我  点个赞哟~"
你的编程能力从什么时候开始突飞猛进？,[],John Coffey,大概有三个时间点。第一个是很久以前一个宁静的下午，我对着电脑屏幕发呆，因为我被分配了一个和地球正对面的团队合作的任务。而该团队代码之烂罄竹难书，回复速度之慢让我时常感到便秘。我还没有权限去check in代码和部署测试环境。一筹莫展之际我想干脆先去看看他们代码库把逻辑理清楚，之后能调试了改起来也快。没想到我看懂了。一个破request在三个service之间弹来弹去的路径和副作用被我一下午读明白了。当时我喜悦的心情约等于解了十个复杂的bug。在这之后我打开了一个新世界的大门。无论是工作中的代码还是开源代码，各种工具库，系统底层，想看就看。能够脱离调试环境深入理解代码这个能力的达成条件是长期解大型代码库中的复杂bug，磨炼自己对代码的感觉。有些答案说写代码是没有肌肉记忆的，有些答案说写代码是没有熟能生巧的，这些我是不同意的。。如果一个人还不能无障碍阅读代码，我是不承认ta有较好的代码能力的。阅读代码的能力大概需要四到五年来培养，天赋较好的情况下，科班出身毕业一两年就应该已经有很强的阅读能力，而转行的在入行五六年左右也应该能够有这样的能力。如果能大概一周时间在没有文档辅助下，允许每看懂几步去调试一下验证想法，能看懂的写路径是怎么工作的，那代码阅读能力就算合格了。之后无非是更加娴熟和自然的问题，如果跨不过这道坎，那就还欠磨练。第二个时间点是第一个时间点之后三年的一个冬日。以前写代码的时候我都倾向于听Two Steps From Hell这种比较激昂让人想要骑狗上战场的音乐，沉浸在一种纯粹的释放的感觉中——因为我编程多数情况下实现只是在已经想好战略后的即兴创作。有几次一下午写千行上下的代码，十分酣畅淋漓。然而这一次，我突然想听Richter的悲伤小曲。那一天我仍然写了很多代码，几乎重构了整个service。当我提交的时候，我很清楚地知道我的代码能力又提高了。因为我不再过多依赖我的直觉，而是有心地去衡量代码层面的权衡取舍。再去看之前写过的代码，有质朴的严谨和小聪明，却缺少了精巧有心的取舍和大智慧。换句话说，从前我知道如何不写坏代码，但是这之后我知道怎么写好代码了。这方面的磨练大概就是需要不断的review别人的code和被别人review，逐渐能够站在不同角度去看问题。同时阅读大量的生产代码以及也是必要的。“不坏的代码”是一个很大的解空间，要在其中选出“好的代码”来写，是需要持续的努力和耐心的。这里特别感谢当时的同事东欧大哥，他不留情面的code review和耐心跟我讨论我的review意见的过程使我受益非浅。我在早年学习编程的时候读过这本鼎鼎有名的著作，它教会我如何不写坏的代码，并且能够把坏代码变成不坏的代码，对我影响深远。后来我读了一本叫做《》的小册子，让我开始了对好的代码层面的设计的探索。这里特别说一句，我个人是不喜欢设计模式这种分门别类的玩法的。我对它们的态度是去理解，但是实践中仍然从，可读可维护的原则出发思考代码结构。因为写好代码是一种在利弊之间权衡取舍的有创造性和艺术性的活动，抱着教条写不好代码，只能写出教条。第三个时间点主要是涉及到对分布式系统的理解，因为题主问的主要是编程能力，所以就不细谈了。这部分主要是读书读paper以及读代码，动手推公式，动手写。最后强调一下：即使方向选对，即使平台不错，不下苦功，靠投机取巧，写不好代码。
你的编程能力从什么时候开始突飞猛进？,[],GeekPlux,那是一个很普通的下午，第一份工作。当时的上司把我叫过来说：这块的逻辑这么简单，怎么写了这么久啊。我来带你写一遍吧。接着，他一步一步讲解，边讲边写。先把他想的思路告诉我，然后就直接动手写，卡住了就再退回去重新想，其间不时我也会有疑问，他直接回答。写完了又review了一遍，把能优化的地方优化完并把格式排版好看后，提交，搞定。整个过程让我明白了，实际项目中的编程和大学里做题做作业是完全不同的：编程实际上是一门设计的艺术，如何把现实中的事物抽象成二进制考验的是设计功力。经此一役，好像打通任督二脉一样，后来的学习都一马平川无比畅快。同时还学会了一句很经典的名言：PS：看完下面的视频记得回来点赞。
你的编程能力从什么时候开始突飞猛进？,[],程序员客栈,不是浑浑噩噩的四年大学，也不是代码搬运的三年工作，而是为了旅行而不得不做的那一年兼职。本人大学专业是计算机，全称计算机科学与技术，俗称码农预备班。当时听说这个专业热门就业就选了，又听说前端容易学又选了前端，浑浑噩噩读了四年后进了一家行业中游的互联网公司接着浑浑噩噩搬了三年轮子。这七年虽然谈不上懈怠，但也是按部就班，规规矩矩的。直到16年底，觉得自己受够了日复一日搬运代码的枯燥生活，先是请了一个月的假去旅游，后来干脆不想回去上班了。于是，为了解决旅游中的吃喝住的问题，开始做副业做兼职。直到一年后被一家头部互联网公司录用，回归一线。也有朋友问我，为什么出去玩了一年，反而实力进步了，从一个中游公司到了头部。我想了想说：。接下来讲一下这一年我用了什么方法，才做到突飞猛进的：其实那一年，我做的事情无非就两件，接然后重新。我是在开始接程序员兼职之后，得完全为项目的一个端口负责的时候，才知道自己的编程能力有很大的漏洞。因为还在公司的时候一直是几个前端的同事一起做，自己不会就交给别人解决，到头来自己还是不会。意识到了这点之后，才开始回过头来补基础，这里给大家分享一下我当时的思路：其中学习基础知识，又有两点要注意的：找对方向、用对方法。说的更直白一点就是学什么以及怎么学。首先要将基础打牢固，最基本的算法和数据结构一定要滚瓜烂熟，我当时是要求自己拿起来就能用。比如下面这些个算法和数据结构类型我是硬逼着自己啃下来的，很多兼职的时候没用上，但是后来回归工作的时候用上了。递归、排序、二分查找、搜索、哈希算法、、分治算法、回溯算法、动态规划、字符串匹配算法。数组、链表、栈、队列、、二叉树、堆、跳表、图、Trie 树；不要小瞧了这小小二十组词，展开了去学，怎么都得花你个一年半载，例如单单排序算法就又可以分为以下十种:然后，当将这些基础知识了之后，注意是吃透，我给自己定的要求是用到的时候就能直接用而不是回去再翻书。做到这一点之后，我就接着去学习一些更深入的内容：比如：当我把这些问题想清楚了的时候，我发现之前的很多问题都难不倒我了。每个人的学习方法都不一样，有的人喜欢边做项目边学习，有的人则喜欢学一段时间做一个项目，有的人喜欢看书学，有的人喜欢看视频学，这些都不是问题，重要的是找到适合你自己的。但下面这几点，最好还是不要去做了，因为这些坑这些痛我都已经经历过了，头发也掉过了，结果事倍功半惨不忍睹。刚开始不会做只有跟着别人敲，这没有关系。但是跟着别人敲了之后一定要自己理解自己记忆把它变成自己的东西。照着别人代码敲一遍两遍哪怕三遍，除了让我看得仔细点，练了打字外没有其它任何帮助。哦，对了，还多掉了几根头发。所以要记住。要能做到思考学习别人思路后，脱离书本和博客，完全自己实现功能。当我做到这点之后，我发现我的学习才是有效的。我刚刚说过了，自己是因为项目做不出来才回过头来学习的，所以刚开始急于求成，学习只学个大概只求个会用，没有做到知其然还知其所以然。但是所以不要试图一次性解决所有问题，这里给个说完了第一点如何接下来再说说说说第二点如何下面这个刷题方法很普通但也很实用，推荐给你：可以先思考，之后看参考答案刷，结合其他人的题解刷。思考、总结并掌握本题的类型，思考方式，最优题解。先思考，回忆最优解法，并与之前自己写过的解答作比对，总结问题和方法。提升刷题速度，拿出一个题，就能够知道其考察重点，解题方法，在短时间内写出解答。然后给大家推荐我当时看的两本书还有一些学习网站，能够让大家学得更轻松些。最后一步肯定还是要落在实操的，我的方法是接兼职项目、一个接着一个，因为要供着自己旅行。但其实还有两种方法也能提升自己：田纳西大学助理教授·亨利结合自身经验，给出了一份“程序员都应该尝试的挑战性项目”清单，包含下面六个项目，我在那之后做了一遍觉得还不错，推荐给大家：每一个项目都存在不同的挑战，比如文本编辑器就要求在不使用GUI框架中内置的文本框组件的情况下，搭建支持光标移动、选择、插入和删除操作的文本框并将文本文档存储在内存中。如果你能解决掉这些项目中的这些问题，然后把项目独立完整的做出来并且运行成功，你的能力肯定能再上一个台阶。大家想必都知道，这也是其中的一种应用了，把你自己弄懂的东西教给别人，让别人也能看懂，在这个过程中你肯定还是要把一个完整的项目给做出来的，一整套下来，你会将自己理解的东西掌握的更透彻更深入。也算是一种不错的实操方式了，能让你的基础更加牢固。只是要记住，在这个不断做不断输出的过程中，做到下面这三点很重要：最后，如果你也想通过兼职来让自己的编程能力突飞猛进，下面这篇文章推荐给你，因为做兼职太容易被坑了。里面有我总结的兼职，也就是说哪些兼职不会被坑，而哪些兼职要格外注意。还有一些国内外的兼职平台以及他们的一些特点，希望能对你有所帮助：
你的编程能力从什么时候开始突飞猛进？,[],哈哈,从chatgpt出来的那一刻，我的毕设，本科生毕设，学校要求必须建模。做数据分析的必须有大量的真实数据，做仿真数据的必须有模型和仿真结果。你知道我论文的核心部分写了多久吗？8个小时学习加解决基础的建模部分，4个小时，问chatgpt模型代码怎么写。chatgpt一次性写不了很多，那就让他写简单的案例，基本上1分钟写一个，然后运行，不出bug，再换自己的模型数据上去跑。跑不通，再换，反复问chatgpt就行了。基本上两个小时就完成了大体的仿真计算，其实到这里，我的需求已经能完成70%，但是因为用的时间实在太少，我决定再多问问做改善。剩下的就是接着问chatgpt，问一些小功能怎么加上去，还是一样的，从最简单的库、库里的函数怎么用开始学，学完就让他写简单的案例。他一次大概率写不好就让他继续写，直到能写出，能让我感觉可以直接嵌套到之前的大段代码里。然后我最最后一步嵌套，修改。4个小时最后完成的代码200+行。对于我这个本科生来说完全够用了。让我打分，代码部分最少85+。知道我做这些需要有怎么样的基础吗？只需要懂最基础的字符类型，列表，循环，判断，函数就够了。如果这两百行代码让我自己写，我自学加掉头发可能得学一星期，保守估计只能70分。实际上我用了4个小时，完成了90分。
你的编程能力从什么时候开始突飞猛进？,[],Dr.Evil,当时我还在学微电子，我调查了一下比我高几届的师兄的就业情况。然后我的编程水平就突飞猛进。
你的编程能力从什么时候开始突飞猛进？,[],奥创没有电,本人学渣一枚，浅答下哈。大二暑假时参加了一个比赛，发现代码不仅要写的出来，还要写的快，跑的快（每个编程题提交后会给出解答时间和运算时间并作为评分依据），之后开始刻意留意自己写的代码的运行速度和自己完成的时间。大三开始学了Maven和Spring后，也熟练使用GitHub后（感觉以前写代码叫编程，现在写代码叫开发 ），感觉自己开始突飞猛进。大二那会儿还只是eclipse手动添加网上下载的jar，.jsp里写Java、html、css、JavaScript四种语言；现在的习惯写个基排都要先建个maven，万一以后把所有排序都写了呢 ‍♂️。《》这本书对我影响真的很大，不仅是它很容易地教会了我Spring，更是从它上面，我看到了很多未知也未想过的技术，以及他们的作用和之间的关系。比如，我从mvc视图那，我才知道jsp并非唯一的视图技术，而且我痛恨它是对的；这时也开始理解和大量使用Java注解；并发现原来Java开发Web能和Flask（大二用Python时接触过，发现比那玩意爽多了）一样优雅、快捷（现在碰到了vert.X，一个类搞定一个restful web，真酷）；在学里面的Rest时，我进一步知道了这个概念和它的历史。从GitHub上，clone很多代码，学会了一个项目（比如spring boot web）要分哪些包，包/类的命名有什么约定名称，发现了用hsql去代替mysql，README要写什么等等。为了去写一个前后端分离的web应用，我开始去探索前端，仅略懂HCJS的我当然被前端大世界大吃一惊。我选了其中的一个叫VUE的入手（因为学Spring时看到很多Springboot+VUE标题的博客/文章，而且发现官网的中文文档很好），至此，又进了一个大坑，我不得不先了解下npm和，对JavaScript的语法、特性又做了一遍复/学习，然后再去学VUE，中间又去理解了前端路由这个概念，以及认识了axios这个代替ajax的东西，等等。缘由在一本书一行看不懂的代码而去查询，我熟悉了Java8的Strem和Lambda写一个Java爬虫的时候，为了去监控爬取的状态，为此去学并掌握了日志的使用；做一个关于电影推荐的课设时，用户对电影的评分数据有500多MB，2000多万行，全存到mysql了发现一个简单查询要几十秒，这时候才发现当初刷公众号直接略过的“Mysql性能优化”类的文章是有用的(最后换成了redis，很快）；基于500多MB数据构成的推荐模型（用的mahout库），任务管理器一弹，JVM内存占用2G+，（我写的简单推荐系统就是把电影和用户信息放到redis里，mahout得到的推荐模型（也就是那个Recommender对象）直接运行在JVM里，然后用Vertx写个rest服务，可以通过一个包含某用户ID的URL返回推荐给她的电影信息的json，这中间对调用模型和redis做了封装），这内存占用有点吓人，我开始考虑怎么去优化自己烂代码，想去学下虚拟机的知识，想考虑要不要给这个类属性加个static关键字，想如何知道到底哪个对象占用了最大内存。不知不觉竟扯了这么多 ‍，总的来说呢，我的编程能力突飞猛进就是从学Spring开始，从这开始我遇见了很多未曾听闻的东西，扩展也联系了很多知识，也自此，慢慢体验到了编程的乐趣；但真正重要的是，我们那颗探索未知边疆时兴奋的好奇心。在学习Web系统开发之外，我第一次系统性学习的语言是Python（在JD上买了两本最火的黄皮Python书），感谢这本书的作者，他耐心的告诉我为什么等号两边要空格，两个函数定义之间要有空格，变量和函数命名为什么要规范，你的 list 中 item 之间要有空格，这让我第一次意识到代码规范这件事，后来编写Java时也注重（即阅读XXXJava代码规范）。那时，用Python做的事情是数据采集（爬虫）、数据处理/分析、数据可视化，通常会写在 Jupyter Notebook 中。学习数据采集时，你会学习HTTP知识、HTML Dom，再写爬虫时，我会不断地查看目标网站的AJAX接口，看得多了，你也会学到很多后端API接口的设计。数据处理/分析和数据可视化，学的时候也是不停的查API文档（中文博客的或者官网的），有些数据处理/分析的对象、函数有很多字段、参数，很难记住，今天用到查一下明天再用就忘了。不过现在，发现推出了一个新产品夜曲编程，里面的Python数据分析和数据可视化课程竟然有系统的知识点罗列和真实的场景应用实战练习，还有电商、金融的真实数据分析案例。感兴趣的可以去「夜曲编程」公号回复一下免费教程，能体验他们的免费课。而且有手机端辅助我能马列课上偷学了哈哈，也不用每天缠老师了因为有社群交流。要是当初用这个产品，对数据分析我就会学的更深了，没准现在就是数分大佬了，每天和数分小姐姐一起喝茶聊数据了。
你的编程能力从什么时候开始突飞猛进？,[],Cat Chen,第一个阶段，是通过高强度的刷题来让自己的解题和编码能力变得够用，不会再拖后腿。这其实花了很多年的时间，因为我从小学开始就参加编程竞赛。最集中刷题的是高中，因为我害怕要去高考，所以无论如何都要 NOIP 拿个省一等奖换个保送资格啊。之后我没有搞 ACM，但我觉得也够用了。绝大多数编程问题，我都能想到用什么算法解决，然后写出来的代码不会有问题，就算有问题我也知道如何迅速调试。第二个阶段，是学会阅读大量英文文档，然后学会使用合适的关键字进行搜索。老实说一句，今时今日几乎所有你想写的代码都有人写过类似的，你几乎不可能写出什么完全原创的东西来。可能你找到一个原创的方式把东西组合到一起来，但被组合的每一个部件都不是原创了。所以遇到什么具体问题，上网搜索一下就是了，常见的问题 Stack Overflow 上都有人问过，你绝对不是第一个问的。不常见的问题也很可能有人解决过，就看你是否知道如何用正确的方法进行代码搜索了。举个具体的例子，现在跟前端相关的东西基本上我就在 MDN 上找，只有非常少数前沿标准是 MDN 尚未记载需要自己看 spec 原文的，真的需要的话就看  原文咯。至于使用各种开源框架和库遇到的问题，基本上早就有人在 GitHub 上提过 issue，可以看看那个 issue 是被如何解决的。很多特殊的用例官方都不可能直接修改框架和库来支持，但会商讨一个 workaround 让真的需要这样用的人绕过去。例如在使用 React hooks 时如果你真的有一个变量需要在多个中同步的怎么办？用 useRef 创建一个 ref，这个 ref 跟实例成员一样永远指向一个对象，然后 ref.current 就能用来存储共享的变量。这是官方 issue 讨论的结果。如果你在 Facebook 和 Google 这样的大公司里，有完善的内部代码搜索，你会发现真的是你想得到的代码都有人写过类似的。有可能是之前某位大神写过了，有可能跟 blame 记录当年写那段代码那个 IC 现在已经是你的 VP。没有什么问题是全新的问题，更需要思考的是：你已经知道一个老问题和拥有解决这个老问题的代码，这对于你手上的新问题和现在新的上下文来说意味着什么？举一个很实在的例子吧，前端要做一个 scrollable area，支持各种复杂功能，例如滚动加速减速要符合直觉，可以滚动后 snap to item，垂直滚动要允许 pull to refresh，容器大小要 responsive。其实这些代码都有人写过了，但你看公司内别人的实现你会发现他们写第一个版本时还需要兼容 IE8，后来才打上了各种补丁支持到 iOS 6，之后就没人碰过这代码。现在你要做一个新的，你还要支持 IE8 吗？你不是应该原生支持 iOS 13 然后再往下兼容吗？对于编程来说，除非你真的走在最前沿，时至今日基本上你想要解决的问题都已经被解决过了，只是你有没有很好的英语阅读能力和老代码调试能力去把知识整理出来。相对于写代码解决问题的能力，更重要的是选择正确的问题来解决，兼容什么 IE8 就是个能解决但不值得解决的问题。插播个相关广告：我提供 career coaching 服务，我可以跟你一起制订你的职业发展计划，保证落实到执行上来，让你完成我上面所说两个阶段。我的收费是 300 美元一小时，有兴趣的可以私聊。
你的编程能力从什么时候开始突飞猛进？,[],张宏波,"分享下自己的一些经历我的入门语言是C/C++，记得我大一大二的时候除了上课大部分时间都是在清华外文图书阅览室读些C++相关的书籍，几乎当时能找到的关于C++的书籍都有读过，中文书籍有读过写的几本。花了大量时间在研究C++的模版，还有各种UI库，比如MFC，，更后期的WPF。其实这阶段虽然在外人看来我的编程水平还可以，当时系里比我强的应该也不多，但是现在看来其实还是没有入门，对事情的理解很肤浅，花了太多时间在C++的奇技淫巧上(现在也已经过时了)，深究起来主要还是缺乏一些理论指导。这时间编程的主要动力是能快速实现一些想法，比如当时用opencv做一些东西，但是编程本身并不快乐，因为调试的时间占比太多了，很少一次能撰写通过运行不需要调试的。我大三去实习，碰巧了解到微软刚发布的函数式语言F#，我发现用这门语言写程序基本上能一次通过，不怎么调试。编程本身变得快乐起来，做一个复杂的系统很快。我把当时能找到的关于F#外文书籍都读了一遍（比如expert F#，现在还记得)，但是关看F#的书籍是吃不饱的，因为很多理论还是得找到它的本源，比如学些得看Haskell相关的书籍和论文，元编程光是看或者meta haskell是不够的，还是得学习, scheme, racket，metaml, metaocaml。这一时间我涉猎很广，真正深入了解过F#，Haskell，，OCaml，顺带学习了一门脚本语言，当年有本书还不错叫(High order Perl)，因为当年这么多小众语言都没有体面的IDE，我也深入了解了下Emacs。学习了很多抽象，但其实还是有很多困惑的。我对怎么实现它们比较感兴趣。Haskell的编译器太大，编译太慢，当时估计一个人是搞不定的，不太可能全都看懂。而且我当时已经不怎么在Windows下工作了，所以F#的编译器没怎么仔细看，OCaml当年核心代码只有几万行，是可以慢慢啃的。当时在MSRA长期实习，薅了很多羊毛，那些代码都是打印下一行一行看的，还有前面提到的很多外文书是买不到的，网上找到pdf，然后在MSRA打印一本书回学校慢慢看。后来我读博了。教了我很多范型编程的知识，Steve每周会和我讨论相关的东西，但是我后来发现自己更喜欢工程上的东西，特别是元编程。我当时参考了OCaml的元编程系统，做了个自己可以自举的。这是一个我自己独立架构的大型系统，基本上就是没日没夜的写代码，写完以后感觉自己的能力有了质的飞跃。下面是contribution graph，头两个人都是我，当然这个编程语言就像绝大多数玩具语言一样没有人用。做完Fan语言，我很荣幸受Xavier邀请成为了OCaml的核心开发人员，连续几年都参加了consortium meeting，也在哥本哈根panel分享了自己的成果。当时的想法是怎么把函数式语言变得更主流，让人们可以日常中用它来做工作。我比较幸运第一份工作是一家公司邀请我去维护他们的内部一个的OCaml语言，没有多久我自己业余时间写了BuckleScript编译器，可以让OCaml跑到更多的平台上，因为媒体反响还不错，公司居然让我全职做这个了，不用再关心业务代码。这一做就是三年，直到我回国。我回国前在联系一些国内的公司，更幸运的是当时Facebook联系到我，他们已经在生产上使用到了BuckleScript，希望我能继续从事相关的工作。我当时以为只是临时性的过度，没想到自己居然一个人在深圳远程工作了5年，很多公司内部的华人问我怎么这样setup，但是考虑到中美关系敏感，也不敢说太多。后来BuckleScript渐渐演化成自己的独立的编程语言，也顺带解决了个人的财务问题。BuckleScript/ReScript其实质量是远超同行的，但是因为我一个人远程在国内，拿到的资源太少，基本上没有参与到公司内部的资源争取上，公司除了包养我，其实并没有怎么推广。ReScript虽然是我一辈子都可以自豪的事情，但是我觉得它deserve 更大的成功。这期间我也意识到一个人的力量终究是有限的，要完成一件伟大的事情，需要把更多聪明的人组织起来。刚好我以前的导师也回到深圳了，所以我就决定在退休前争取做一件不留遗憾的事情，也就是我们现在做的Moonbit编程语言平台，更广，链路更长，也希望借这个机会培养更多的年轻人，（我自从有了家庭以后，能写代码的时间也慢慢的变少了）。写的比较随意，回头有空再整理一下。"
你的编程能力从什么时候开始突飞猛进？,[],七月在线 七仔,，比如 镇站之宝、让cxk来教你打篮球、对联之王、键盘钢琴家、斗图霸主项目、P站logo等等10来个！居然还拿了7万星！我敢保证看完下面的几个项目，你收藏夹一定会多几个网址，越用越开心，用完之后高呼“GitHub大法好”、“女装才是正义！”~毕竟作为一家每天都和程序猿/媛打交道的公司，GitHub那是每天必刷，小七早就从GitHub上珍藏了100+项目。这次小七从中精挑细选出来10个不懂编程、不是程序员也能用，并且越用越爽的项目~总所周知，GitHub是程序员分享技术、同性交友、女装的圣地。毕竟自学编程太苦了，不如~小七随便从这个项目中里面给大家截两张图，让你们感受一下女装大佬的威力~（老板要是发现我上班时间在看这张图片，一定会锤死我吧……）言归真正，其实这个项目的本意是帮助不懂编程，非程序员的朋友学习使用GitHub。为此其中一位女装（划掉）大佬专门在B站录制了教学视频，来帮助更多的同学学习GitHub的正确使用方式。早日精通女装（划掉）GitHub的使用，打开，这也是我什么要把这个项目放在第一个的原因。B站链接：项目链接： （温馨提示:自备营养快线）这个项目基于深度学习技术来实现自动对对联，比如上面这个标题，就是AI对出的对联。直接输入上联点击就可以得到下联。如果对内在技术感兴趣，也可以在项目内查看。有的时候中间打一个逗号结果就截然不同了。比如 其实这个系统更擅长古风的对联比如：“殷勤怕负三春意 ，潇洒难书一字愁。 ”“如此清秋何吝酒，这般明月不须钱。 ”“天朗气清风和畅，日光辉。 ”你能看出这是AI对出来的对联吗？还不收藏起来，以后你就是对联之王~项目地址：在上班的时候，一直开着PC版微信跟网友吹水聊天很容易被老板发现吧。把微信伪装一下，瞬间变成（应该特别适合网易的朋友们）在老板眼皮底下光明正大的摸鱼！项目地址：这个项目堪称传奇，在GitHub上拿到了整整X万星，被无数人称赞为新手必学项目，却偏偏又可以无需任何修改，就在任何平台、版本的IDE上运用，堪称有史以来最伟大的工程没有之一！为了尊重原作者和保持神秘感，请大家去项目中查看。我上面的话，可不是我自己评价的，都是网友们的留言：项目地址：可以调节字体颜色，大小。但是为了保证图片是原汁原味的P站风，不能修改字体。非常适合做一个专属于自己，充满视觉冲击力的logo。千万不要问我什么是p站哦，要知道无数程序员同学的梦想就是加入P站汉化组。一个营养快线管够的神奇网站。项目地址：只要有电脑，只要你会打字，今天开始你就可以体验一次弹钢琴的感受了~这是是作者用Vue + Tone.js做的一款web应用，快来和朋友们一起弹小星星吧项目地址：不能说的太多，说多就被和谐了，下面这3个下载器会让你百度网盘的下载速度“提高”项目1：项目2：项目3：买房就和高考一样，决定着你的下半生，考验你多年打下的基础，不过不是人人都有资格参加……高考前可以刷各式各样的辅导书，来帮助我们在“终局之战”拿到高分，但是买房前就非常缺乏既全面又理性，还不是广告的攻略。这个项目是作者基于17年自己买房经历总结出来的攻略，因此由于时间关系不少数据大家参考一下就可以了，作者分析和罗列的思路非常有价值，值得我们学习，也有非常多实用小知识。原文非常详细、全面，总计左右！准备买房的大佬们可以去看看哦项目地址：老实交代，你是不是经常准备写个笔记、文章，打开word后瞬间灵感便秘，没有意思，码不出字？有什么办法能让自己短时间内，激情四射疯狂码字？有一位程序员大佬给出了答案：而且这位大佬还用了喝两杯葡萄酒的时间，把这个理念做成了一个程序！并且放在了GitHub上。感受一下大家的评价吧：真的不来试试吗？这可相当刺激~刚开始码字的时候我慌的不行，时刻都在担心到5秒了，被删稿子，可以到了后来，我居然非常习惯了，而且码字速度也快了~毕竟如果你被删3次稿子，估计你也会很淡定的被删掉的内容重新打出来。感觉我未来的码字效率都提高即将10倍项目地址：话不多说，直接上图项目链接：上面是偏娱乐的，下面就来正经的了！其实你问出这个问题，可以理解为在问如何持续编程，并且提升自己。换在Python上面，你很可能是已经因为长时间背教程/书籍上的内容，大脑已经非常抗拒学习了。你需要的是能给快速用Python实现、耍起来的小项目。得到足够的，让你感到愉悦，这样才能更快更高效的继续学习。作者：寒小阳，也是我们七月在线的讲师。这个项目列举了30+个用Python，就能简单、快速应用的小项目1. - 批量重命名指定目录下面所有文件的后缀名。2. - 检查用户主目录中是否存在目录，如果不存在则创建目录。3. - 使用aria2c多线程快速下载YouTube视频。4. - 查询指定词语并从Google中下图。5. - 测试目录是否testdir存在，如果不存在，它将为您创建目录。6. - 将检查是否已设置所需的所有环境变量。7. - 显示文件的信息。8. - 统计文件夹大小。9. - 将搜索*.log指定目录中的所有文件，对其进行压缩，然后按日期。10. - 将指定年龄（以天为单位）的所有文件从源目录移动到目标目录。11. - 这个简单的脚本打开文件server_list.txt，然后为每个文件执行nslookup检查DNS条目。12. - 显示操作系统的一些信息。13. - 根据提供的参数，此脚本将ping与该应用程序组关联的服务器。14. - 在提供前3个八位字节后，此文件将扫描可用地址的最终范围。15. - 此文件通过服务器列表并ping机器，如果它已启动，它将加载putty会话，如果不是，它将通知您。16. - 此文件会压缩给定目录中的所有日志。17. - 统计目录下不同脚本。18. - 此文件将列出给定目录中的所有文件，并遍历所有子目录。19. - 这个简单的脚本打开一个文件，打印出100行。20. - 用脚本发推特。↓↓《名企AI⾯试100题》涵盖，每⼀段代码、每⼀道题⽬的解析都经过了反复审查或review。1.【Python基础图文教程】（七月在线编写的电子书）为方便0基础的学员快速学习Python，不断降低学习门槛、理解难度，我们七月在线做了140页的Python图文教程，极尽通俗，最新版本近乎做到了中学生也能看懂。现在免费送给大家！本书的不仅介绍Python语言的基础知识，而且还配套了一些项目，书籍质量很高。适合没有编程经验的同学太太太太经典了，和上面的是一个系列，注重实战，认真看完，做完每个项目，你得到的知识一定对得起你的时间。适合没有编程经验的同学适合有编程基础的同学，这本书有点标题党……看完不一定能变科学家2333本书重点是如何思考、设计、开发的方法书中详细讲解了有关numpy、pandas、matplotlib等模块的常用函数技巧，同时也结合了一些案例加以说明，书末也简单介绍了Python在时间序列问题上的处理和金融与经济方面的应用，对于初学者，这本书可能更适合作为配合课程使用的教材，而非自学用的主力教材。非常适合数据挖掘入门，内容详实，条理清晰，枚举具体的分类实例，来简要说明算法的流程和意义，能让新手快速总览全局，掌握该领域的基本要点数据挖掘方面的入门书籍，在数学算法方面没有深入讲，也提了部分算法具体怎么用，就是有点太经典，比较老偏理论了一点，对读者的数学基础有要求，有不少算法推理过程，非常全面系统地介绍了统计学习的主要方法。书中通过大量实用的范例代码和三个完整的案例研究，全面而系统地讲解了如何运用设计模式来规划代码结构，如何通过并发与Cython等技术提升代码执行速度，以及如何利用各种Python程序库来快速开发具体的应用程序和游戏。是Python应用方面的优秀书籍，涵盖了Python编程的方方面面，从系统管理到图形界面编程，从文本处理到网络编程，从数据库到语言扩展……这些主题的探讨中，还提供了大量的实际代码，通过对这些代码的研读，对读者的Python编程水平以及实际业务问题的解决都有帮助。全面涵盖当今应用开发中的众多领域、为中级Python开发人员提供实践方法、涵盖大量实用的代码案例、每章末尾的习题有助于巩固所学知识。觉得Python慢，先别急着骂Python…… 读读这本书也许会发现你的代码、架构有进步空间更有七月在线年终大回馈，组队开宝箱赢取精美好礼！
你的编程能力从什么时候开始突飞猛进？,[],Rocky0429,记得在大一上学期期末考试之前，学校的 ACM 集训队针对大一新生开始第二批次的选拔。10 道题，3 个小时，只要做出 2 道题就可以进队，我在比赛结束的时候也没 AC 第 3 道题，堪堪压线进入。我凭借是“时间优势”排名 100 多人的下半部分，没有垫底。之后整个寒假的时间，除去过年放的几天假，其余每天的时间都是呆在实验室学习专题知识刷题、刷题学习专题知识，debug，各种 google 搜索。一个寒假过去，学了大概十几个专题，刷了小几百道题，前前后后写的代码得有上万行，调试了无数的 bug。寒假结束之前的几场训练赛上，我已经可以在一百多人的靠前的位置，现在想想，那是我编程能力第一次有了很大的提高。我在这个时间段内敲了足够多的代码，这是造成我编程能力提高的原因，但只有这个只能是提高，而不是“突飞猛进”。我结合我个人的经历想了一下，在我真正感觉我的编程能力突飞猛进之前，我有做的足够多，以此量变到了质变：下面我结合自己的经历，从头来说这三件事。我在开头没说，大学之前，我没有接触过任何的编程。我记得特别清楚，第一天正式的集训也是寒假的第一天。在那之前我从来没有写过超过十几行的代码，而那一天，用 C 实现一个简单的功能，我写了接近一百多行，花了一天时间。而大多数人，在上午就完成了这个工作。下午的时间已经开始去学第二天的内容了。之后集训队的每天其实都是看起来很无聊，就是在按照规划的按照和算法的专题，学习理论，然后就是刷题刷题再刷题。之后一次次的上机比赛，一次次的淘汰。过程其实就是个坚持的过程，咬牙坚持的那种坚持。没有晚上没有周末没有寒暑假，这个过程持续了两年半，大大小小比赛百十场，刷过的题几千道。某一天（具体时间忘记了），我们集训队的老师告诉我们每道题做完都要把题解发布到 CxxN 上，记录自己的思路，解题方式和代码。这件事乍一听我觉得太麻烦，觉得“有这个时间我多刷道题它不香嘛”，一直当作耳旁风。后来真正开始发题解，并不是我突然顿悟，而是集训队老师看我们太懒，强制执行，然而这个强制，在经过初期的不适以后，慢慢的让我形成了做什么都要的习惯，一下子就写了 8 年，写到现在。习惯性梳理总结，在这个过程中重新产生更多的认识，理解更深，有更多的想法，无论是后来开始写公众号，或者后来来知乎写作，都是因为这种积累，我因此而获益，对我们老师感激一生。有了【01 敲了足够多的代码】，让我每次在集训队的淘汰赛上，侥幸的留下，但都是处于下半部分，因为每次出去比赛选派的队伍都有限制，我没有出去比赛的机会。后来有了【02 写了足够多的文章】，让我对知识理解的更深，对问题的本质把握的更精准，让我可谓是迅速成长，我有了出去比赛的机会，而且是很多。第一次省赛就拿了金牌，可惜不是前三甲，第四名。再后来到全国邀请赛，亚洲区域赛，到 CCPC大学生程序设计竞赛，再到 EC-Final，当然水平所限，就只拿过银奖了。后来，好像就不太一样了。在平时上课，不管是后来学习 Java、C# 还是 Python，亦或者是这种，布置的作业，不管是小到编程题，或者大到项目大作业，我好像都能想出思路，然后很快的搞出来。好像就慢慢成了老师眼里稍微厉害的学生，同学眼里的“大佬”，然后有了老师让代为讲课，集训队以老带新，同学过来问问题。我一直觉得给别人讲知识是一件双赢的事儿。在集训队，当我成了学长，开始带新来的学弟学妹，给他们讲专题的知识点，给他们调 bug，后来写文章，总是有人过来问有疑问的地方，然后答疑解惑。可以说这些年我回答了足够多的问题。大家不要觉得给别人讲是在浪费时间，因为这样做，好处太多了，可以帮你验证自己确实搞懂了这个知识点，这一点简直太重要了，毕竟以后我们要去面试要去升职加薪的时候，都需要给坐在你对面的人讲明白。这一点也让我以很短的工龄，成为了公司数据分析的负责人提供了很大的帮助。以上就是我的经历和我的总结，可以说是平平无奇，但对我来说，希望能给你带来一点儿启示。
你的编程能力从什么时候开始突飞猛进？,[],牛岱,"按照时间线走：原来高质量的免费学习资源如此之多，熟悉了英文环境减少了很多不必要的障碍，不再排斥英文的东西。了解什么是开源，开始被一些项目所吸引，学了怎么用 git，虽然不是很懂，但是在努力地融入这个社区，虽然可能都看不懂大家都在干嘛，但知道这个世界很丰富，很有趣。学了点语言基础写点小东西，不管，空间复杂度，不遵循代码规范，不懂，不懂数据结构，只求能跑起来，只求能“看起来”不错，虽然写的东西别人看不上，但看着小东西逐渐有了点样子，成就感满满，不求别人看得起，只求自己满意。写的小东西差不多了，心里有了很多疑问，开始学 ，，发现原来之前写的那个小东西有些做法十分低效，数据的表达方式也极其乱来，明白了什么时候该用动态数组，什么时候该用链表，明白了那个叫 hashCode 的函数究竟是干嘛的，学习的过程中根据学到的东西，再翻回去修改那个小项目，让那个小项目跑的更快，再过了一段时间，觉得小项目已经不足以满足不断膨胀的视野和想法，小项目停止了维护，开始看一些别的。为了解决一些问题，我怀疑问题不是出在我写的代码中，而是出在我用的框架/库中，没有怎么读过项目源码的我以为别人写的源码都是很高深难懂，实际去读发现，好的代码往往都是 简洁，易懂，直达目的的，消除了对源码的畏惧，也同时发现了一些的 Bug，抓住这个机会，给项目提交 PR，并被 Merge，还被官推转推，在那一刻，第一次感觉到真正融入了 Github 社区，从一个旁观者变成了参与者，从使用者变成了贡献者。开始学习操作系统，计算机网络，等专业课，原先的一些关于底层运行机制的疑惑不断解除，破碎的知识不断地被联系在一起，成为了一个更大的地图，恐龙书，老虎书，图灵书，看经典教材往往能事半功倍，分层治之才能构建，理解本质才能方寸不乱, 书不可不读，代码不可不写，反复循环互相覆盖才是进步之道。随着知识体系变得更加完整，工具的使用变得更加熟练，可以把以前的一些有想法但没能力实现的东西实现了，比如，超过十个微信公众号转发的，发布这篇文章所用的插件：。在看这个回答的小伙伴们，如果你还是编程新手的话，计算机基础也几乎为零，那我建议先找一些简单的，易于上手的在线课程来学习，比如最近很火的「」，它们旨在降低编程的学习门槛，不管是写代码还是学习知识，都在线完成，并且不断的给予正向反馈，按照他家的学习方法来，进步还是看的见的，能少走很多的弯路。还能有很多大量的题库，可以练习，这些出题的都是以解决实际问题为导向的，还挺有意思的，在线进行编程练习：没有了前期搭建环境的各种问题后，上手编程会变得容易很多，你也更容易进入到良性循环中，培养编程的自信心～包括现在也能在他家的公众号回复「免费教程」然后获得免费学习的扎实课程，虽然是体验课 感觉内容还是毫不敷衍。"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],省身,"ACM世界冠军陆靖，现就职阿里云，为人十分低调，公司内号称“人肉逻辑机”，他做事不轻易动手，深思熟虑后开干，一气呵成，鲜有编译错误。遇到搞不定的代码找他时，他就看代码，不调试，一遍一遍看代码，然后指出某行代码有错误。我们都觉得他看代码的时候大脑其实就是多核CPU，在一次又一次的运行代码。某次代码遇到bug,良久无策和另外一个同事打电话问他，他在电话里说你们检查下某个cpp文件的780行左右，是否参数传递有问题，一查果不其然，问他是否在电脑边，他说不在，在肯德基吃饭，众人大惊之下去git blame,发现这代码他8个月前提交过。特别聪明的本身少见，特别聪明而且记忆力超强的更是凤毛麟角。他有一个爱好是看日本动画片，为此自学日语，最后能和日本人正常沟通，参与字幕组做翻译。好多人留言问他的情况，这里统一补充答复，他是我见过的最纯粹自由的人，对钱，对名誉毫无兴趣，对别人怎么看他也不在乎，只对挑战性的问题有浓厚的兴趣和异于常人的专注。"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],科学探索奖,在职级调整前，做到T5（科学家）的程序员，水平和履历都很能打。比如下面这位大佬：吴石曾经是全球提交漏洞数量最多的个人。他曾独自发掘超过100个的CVE漏洞（“Common Vulnerabilities & Exposures”，公共漏洞和暴露）。他曾创造过单月申报微软漏洞数量全球占比10%、独自发掘15个iOS漏洞的惊人成绩——这个数字比同期苹果自家研究人员发现漏洞（6个）的两倍还要多。他曾发现只要给对方的QQ发送一条消息，就能够得到对方电脑的权限，进而控制对方的电脑，这对于受众巨大的QQ而言无疑是颗不定时炸弹，据说初二之前吴石的数学非常差。但后来遇到良师启蒙，他对数学的兴趣一发不可收拾。高二拿了全国数学竞赛一等奖，后来考入了复旦大学数学系。上了名校的吴石也和在座各位一样打游戏，但不是帝国时代和红警2，而是叫做“MUD”。但人家玩着玩着就黑进了游戏的服务器，并且成功修改了自己的游戏数据，从此走上了走漏洞之路。你玩王者只想着喷队友，别人玩游戏自己开挂，这就是差距啊同学们。整个大三吴石几乎都在搞计算机，他去软件公司打工，以至于几乎没有上一节课，但就是这样人家也就挂了一科。一次偶然的机会，吴石向微软提交了可以实现系统提权的高质量漏洞，出乎他意料的是微软居然提供了奖励——要知道在当时的环境下，国内很少有公司能做到这么体面的事情。受宠若惊的大神一发不可收拾，没多久又提交了数十个漏洞，这甚至超过了微软自家安全团队，2007年他收到了来自微软的offer。再到后来，漏洞大牛的简历愈发丰满：在加入后，吴石和队友们用两种不同的姿势搞定了 Safari，拿到了数万美金的奖金。第二年全世界的黑客用类似方法掀起了挖掘 IE 漏洞的狂潮。 2013年，腾讯抛出橄榄枝，吴石成为科恩实验室的首席科学家。2016年他带领科恩实验室团队和腾讯电脑管家组成的联合战队 Sniper 一举拿下了 、Safari、Chrome，总分38分，以超越第二名13分之多的优势摘得了“世界破解大师”，比赛中所有的破解中都至少有一个吴石系统跑出来的漏洞。当然现在更为人所知的，是他和他带领的科恩实验室团队对特斯拉的多次破解。参考链接： 没想到这个问题这么多人关注，有兴趣了解鹅厂程序员的小伙伴，可以再看看这两篇：
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],少年晚安呀,2000年加入阿里巴巴，在阿里的花名叫“”；（经网友提醒是花名，不是外号，对不起我不严谨）2003年，被马云拉进了一个秘密项目，和另外两位工程师一起从零开始，要在一个月内，搭建一个名叫“淘宝”的网站，并涵盖所有交易系统和论坛系统；2003年-2007年，独自维护淘宝搜索引擎，并且这还不是他全部的工作；2014年，被邀约成为阿里巴巴合伙人。阿里系统软件事业部研究员毕玄说，“牛P很多，但能被称为‘神’的只有多隆一个。他在解决故障方面的能力更是无人能及，在淘宝的故障解决历史上有N多的案例。”阿里研究员小邪随手举了两个例子，“五彩石项目多隆完成了商城搜索的，当时如果没有多隆，整个项目需要延后2周；还有一次，淘宝session框架调用故障，一堆人（应该有10人+）一起排查问题，从6:00排查到第二天的6:00，最后多隆查到了问题。”同样是阿里合伙人、天猫技术部副总裁，之前在淘宝有个习惯，碰到搞不定的技术问题，就去找多隆。春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法江苏镇江人，1999年，初中的章亦春第一次接触《》靠手抄自学编程，进入江苏大学后，一发不可收拾的迷恋上开源世界。结束淘宝量子统计的工作后，全心从事  等开源项目的工作；2017年，在美国创办了 OpenResty Inc. 公司。有人说：“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”（中间捧奖杯那个）世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],编程指北,"耗子叔有一个访问量千万的技术博客: coolshell, 上面的文章可以说是篇篇精华，我墙裂推荐大家去看看，CSDN 经常由于访问量过大被推上首页。耗子叔尤其擅长底层技术架构，C/C++/Java和Unix/Linux/Windows。对高性能，高可用，分布式，高并发，大规模数据处理系统有很深入的研究。是一个，他在2001年被外包到银行做开发，他在 2001 年那年被外包到了某银行做开发，就是用 C 语言在 AIX 系统里堆一些银行的交易逻辑，他坦言，这个过程并没有让他学到什么东西，也没有什么成长，每天想的就是要离开这个地方。所以，他在晚上 10 点以后开始看书学习到 11 点半，并使用工作环境动手实践书上的代码，一年后，精读了《》《Windows 核心编程》《Java 编程思想》等书。然后，找到一份外企业的工作，月薪一下翻了三倍！！！这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：正是凭借着这股子对底层技术的持续不断的专研劲，才有了耗子叔现在的成就，并且影响了几十万做技术的人。在谈及程序员加班、996 这个话题的时候，耗子叔说到了他在外企的经历：，我解决了一个网络通信莫名其妙的断掉的问题，我把性能优化了很多倍，我解决了一个不能重现的一个困扰团队 3 个星期的问题（其实就是大家没有认真读文档），我在入职一个公司的第一天里就为这个公司解决了一个历史遗留问题。在 Platform，我每周解决了 bug 数是全公司的其它人的总和还要多（从不加班），在路透，我带团队优化的系统的性能是全球所有研发中心最高的，在亚马逊，两周打通美国和德国的订单和商品列表系统。我也有失败的时候，是的，我的职业生涯的成长，最根本的不是你有多努力，有多勤奋，而是你能搞定很多人搞不定的事！你不信你可以看看你们公司那些不用加班，就算什么也不干，公司也要花钱养的技术人员，他们的成功一定不是努力和加班加出来的，不是高手，也不是牛人，离他们的距离还很大。只是从2003年开始在网上记录一些自己的技术知识和想法，今天还在努力学习希望能成长一个高手，因为，面对生活在今天这样技术日新月异的时代，我们每个人都是一个新人。在这里也转一篇耗子叔的专访：：我的精神家园（图灵访谈）我当时在银行做银行网络、银行的电子邮件系统和办公自动化系统。当时正处在银行信息化的阶段，加上当时互联网和IT业刚刚火起来，得到这份工作其实是很幸运的。银行正值扩张电子信息化业务的时候，其实应该有很多事可做，但是当时的主要工作都是由厂商来干。比如说IBM或Cisco拿下单子来，会把工作外包给。作为一位技术人员，其实可以发挥的空间并不大，多数时间我只是出了问题打电话的角色。没有人会教你任何事，出了问题，就是打电话，然后按照他们的指导来完成工作。但这个还不是促使我离职的最主要原因，我离开是因为互联网和IT业的兴起让我有些心向往之，有想去看一看的冲动。我还记得当时的辞职书是这么写的：“本人对现有工作毫无兴趣，申请辞职”。处长说，“你可以这么写，但是要加上‘经调解无效’，另外，分给你的房就不能要了”。我说好啊。就这样就辞去了工作，去了上海。老实说，这个决定真不好做，因为几乎所有的朋友和亲人都很反对。当时选择上海是有原因的，我觉得在当时的环境（2000年）下，上海的发展比较不错。没有选择深圳的原因是个人感觉那是因为政治原因凭空冒出来的一座城市，我不是很喜欢。北京我有很多同学，而我想去一个陌生的地方。但是后来发现上海也不是做技术的地方，过得有些压抑，初来到上海的时候经常会被人瞧不起，毕竟是刚刚来到大城市。我当时感觉银行束缚了我，想看看自己可以跑多远，能发挥出多大的价值。于是决定出来闯一闯，主要就是要去经历一些应该去经历的事情，不希望老了以后会后悔年轻的时候没有去。当时IT产业的发展是一个大趋势，我感觉我必须要去一座大城市，去经历一些东西。在小地方基本没有这些机会。要学会游泳就必须要跳到水里去呛两口水，所以我就义无反顾地出来了。我仍然记得自己拎着皮箱站在上海火车站的样子，举目无亲。原来在老家的时候觉得自己还挺厉害的，自以为不愁找不到好工作。不过事实却不是这样的。我还记得第一次去面试时，（面试官）问了很多和C相关的问题，问了我半个小时，我一个问题都答不上来。我一直低着头，好像被审问的犯罪分子一样。我从大学毕业出来就没经历过什么面试，再加上自己内向的性格，所以，整个过程我都在低着头，不敢看别人一眼。最后，面试官问了我一个问题是“有不懂的问题你会怎么办”，这样的问题我都不敢回答，其实这道题的答案不过就是“问别人”或是“自己看书”或是“上网查资料”什么的。很显然，这场面试我肯定是被灭掉了。但这还没完，最后面试官对我说：“你出来干什么，像你这种性格根本不适合到大城市来”。我当时被严重地打击了，感觉到自己确实有一些东西很差。第一个是性格差，不知道怎么与人交往；第二个是技术差，很多问题不知道；第三个就是视野狭窄，没见过世面。后面的几家公司的面试都大同小异。一个人在异地他乡，经历了这些事情，心里会非常地恐慌，“我这条路是不是走错了？”，我经常这样问自己。面对这样的情况，我被逼迫着一定要改变自己。因为，离开银行时，我的家人、同学和朋友都很反对我出来，如果这样灰溜溜地回去，我面对不了他们。而前面的人还看不起我。我当时的处境真的很难堪，就像爬在悬崖中间，上不去也下不来。所以，当时只有一个想法，就是要证明自己不是那么差的人。人被逼到那个份上，活得就比较简单，哪有什么职业发展规划，只想拼命地多学技术，提高自己的能力。这个经历有点像是一剂兴奋剂，同时也相当阵痛。但是回头想想，第一个面试官应该是我最感谢的人。在同学的帮助下我找到了在上海的第一份工作。南天公司，这是一家给银行做系统集成软件的公司，大学毕业时本来也可以进去，现在绕了一圈而且还是靠同学帮助进去的，所以那时的心态还很不平稳；另一方面因为以前是做银行的，是甲方，现在成了乙方了，两边的人都用异样的眼光看我，心态非常不好。不过，这是个技术不错的企业，国内早期很多搞Unix/C的高手都是从这个公司培养出来的。我当时的技术还是不行，比如说到了用户站点以后，不知道怎么做，我曾经误操作把用户的数据删掉了。经常犯低级错误，不但没做好自己的工作，反而还给别人添了麻烦。这些经历都让我有一种“技术焦虑感”，或者叫“技术忧郁症”。我觉得自己这也不行，那也不行。这也是我今天仍然在拼命学习的原因。这就好像我们经常在参加工作多年后还会梦见自己的英语四级没过，或者是期末考试没过一样。我经常会梦见的是项目又做砸了，又把用户的系统搞乱了，一大堆人要审我、要训斥我。因为技术差，沟通差，不会面试，所以，我决定经常出去面试，基本上每周都要去，不管懂不懂，也不管是什么公司，也不管别人鄙不鄙视我，反正一有机会就去面试，多见见人这样可以让我的性格有所改善，同时，也可以知道社会上需要一些什么样的技能，把别人面我回答不上来的东西都记下来，然后回头找答案。那个时候我会经常去看书，看很多很多的书。我学的东西很杂，什么做网页，Windows，Unix，Java，.NET，flash，连3DMax/Photoshop我也学，还去考CCNA的认证等等。这样散乱地学习两年后，我才慢慢确定了要走C/C++/Unix/Windows系统底层的路子。而这样扑天盖地学习的结果有一个好处就是，我成长的速度相当之快。我自己摸索到了适合我的学习方法（从基础和原理上学习），从而不再害怕各种新的技术。那时，所有人都在休黄金周出去玩的时候，我还呆在办公室或住处看书学习。等到一年半之后，用句赵本山的台词说，我在面试中学会抢答了。面试官的问题没问完，我就能说出答案了。其实，基本上是面一个公司过一个（当然都是一些小公司），此时，我就开始挑公司了。感到技术能力不行就去学技术，交往能力不行我就去面试，这两个问题都可以通过大量地实践和努力来弥补，但是眼界这个东西没有办法通过努力来弥补。所以，当时非常想去一些更大的公司看看，如果能去外企更好。我还记得，有一天，有一个和网络相关的技术问题，同事们搞了三四个通宵，也没弄明白，后来想起我好像在看这方面的书，他们就让我去看看、试试，结果我只用了20分钟就搞定了。基础真的很重要，这受益于我看了《》这套书。后来，我去了一家做电信软件的公司，他们让我做PowerBuilder，尽管我当时想做的是C++，但是因为当时各种原因很需要这份工作，就去了。进了那里的第一天发现公司里有一个论坛，上面都是一些技术上悬而未决的问题，都是关于Windows/C++的。我一看，都是些很简单的问题，一下午的时间就被我全部解决掉了，我的基础知识发挥了作用。于是，当天下午我一下子就被调到了核心组。不过，我只在那里呆了两个多月，因为那时我已经不愁找工作了，这期间有两家北京的公司录用了我，于是，02年我就来到了北京，去到一家做分布式计算平台软件的公司。在上海的这两年的时间，从什么都不是，到得到工作上的全面肯定。那段时间感觉自己牛得不得了，有些狂妄和骄傲了，经常上网和不认识的人争论一些很傻的问题，后来发展到对当时的领导以及银行客户的领导不敬，总觉得这些人太二。现在回头看过去，我觉得那是我人生特定时期的记号，人生的痕迹。我2002年在CSDN开了一个blog，当时叫专家专栏。开个专栏很简单，只要发6个帖子。我也不是什么专家，只是喜欢看书、喜欢学习而已，也喜欢做一些学习笔记。那时候没有笔记本也没有台式机，市面上好像也没有U盘和移动硬盘。正好有CSDN这么一个地方，就去CSDN的站点上把自己的一些学习笔记放在了上面。后来03年的时候技术专栏转到了博客，因为CSDN对其博客经营得不好，我09年就离开了，创建了酷壳。花了4500块钱，租了一个server。我离开那里主要有两个原因，一个是因为当时CSDN博客有一些性能上的问题，.NET架构嘛，大家都懂的。另外一个原因就是当时出现了很多博客营销的站点，有点像今天的。好像那时候出现最早的叫煎蛋，那上面会有一些报纸上不会出现的国外的趣闻，是以博客的方式形成的媒体。这和常规的以日记形式出现的博客大不一样。煎蛋、有意思吧等这些博客让我看到了博客还能这样写，我觉得很好玩儿。而我当时也经常会去国外社区看一些文章，也能看到一些有意思的东西（因为我当时有了学习瓶颈，国内的网站已经满足不了我了）。心想，既然这些东西这么有意思，我为什么不自己开一个博客呢？我老婆是学新闻编辑的，她鄙视我说，你的博客虽然有很多人读，但是只能算是个书呆子的博客，全是一些书呆子式的文章。我有些不服，我觉得技术人员不全是书呆子，我们这个圈子里也有很多有趣的东西，只不过是你不知道而已。于是我想弄一个有意思的、有娱乐性质的东西，里面都是技术圈里面有意思的事儿，但是很多技术圈以外的人也能看懂。一开始酷壳和CSDN博客的风格完全迥然，如果有技术性的文章我还会在CSDN上贴，但是后来我就完全抛弃了原来CSDN上的博客。酷壳的初衷是希望很多人都可以来上面发表一些东西，但是可能是我写得太多了，别人就被压制住了。现在博客更新频率是一周一篇，一开始的时候一周三篇。磨刀不误砍柴工，总是有时间来做这些事的。我经常看书，需要把学到的东西整理成学习笔记。自从在CSDN上写博客的时候，就有这样的习惯了，而且又有“技术焦虑症”，害怕跟不上，所以维护博客的事对我来说是很自然的。现在我已经不用自己再租服务器了，由于酷壳的访问量比较有保证，我提供了广告位，就免费得到服务器了。遇到新技术我会去了解，但不会把很大的精力放在这。这些技术尚不成熟，我只需要跟得住就可以了。我的团队自己想学什么我都不干涉，但是用到项目里的技术，必须是很成熟的，（技术应用）十年以上可能是一个门槛。有人说技术更新换代很快，我一点儿都不这样想。虽然有不成熟的技术不断地涌出，但是成熟的技术，比如Unix，40多年，C，40多年，C++，30多年，Java也有将近20年了……，所以，技术并不多啊。还有很多技术比如Ruby，Lisp这样的，它们没有进入主流的原因主要是缺少企业级的应用背景。如果要捋一个脉络下来，70年代Unix的出现，是软件发展方面的一个里程碑，那个时期的C语言，也是语言方面的里程碑。当时所有的项目都在Unix/C上，全世界人都在用这两样东西写软件。Linux跟随的是Unix，Windows下的开发也是C。这时候出现的C++很自然就被大家接受了，企业级的系统很自然就会迁移到这上面，C++虽然接过了C的接力棒，但是它的问题是它没有一个企业方面的架构，否则也不会有今天的Java。C++和C非常接近，它只不过是C的一个扩展，长年没有一个企业架构的框架。而Java出现之后，IBM把企业架构这部分的需求接了过来，J2EE的出现让C/C++捉襟见肘了，后面还有了.NET，但可惜的是这只局限在Windows平台上。这些就是企业级软件方面语言层面这条线上的技术主干。另外一条脉络就是互联网方面的（HTML/CSS/JS/LAMP…）。这条脉络和上述的那条C/C++/Java的我都没有放，作为一个有技术忧虑症的人，这两条软件开发的主线一定不能放弃。无论是应用还是学术，我都会看，知识不愁多。何必搞应用的和搞学术的分开阵营，互相看不起呢？都是知识，学就好了。技术的发展要根植于历史，而不是未来。不要和我描述这个技术的未来会多么美好，用这个技术可以实现什么花哨的东西。很多常青的技术都是承前的。所以说“某某（技术）要火”这样的话是没有意义的，等它火了、应用多了咱们再说嘛。有些人说不学C/C++也是没有问题的，我对此的回应是：如果连主干都可以不学的话，还有什么其他的好学呢？极端一点，我要这么说：这些是计算机发展的根、脉络、祖师爷，这样的东西怎么可以不学呢？大部分学校虽然都会教授C，但是教得都不好。学校喜欢教微软的东西，老师好教学生好学。我不是说Windows不好，但那不是计算机文化的主干，那只是微软的主干、PC的主干。整个计算机文化的主干肯定是源起于Unix/C这条线上（注意，我说的是文化不是技术）。我也写过很多与Unix文化相关的文章，大家可以看看我写的“Unix传奇”。学校教的大部分都是知识密集型的技术，但是社会上的企业大部分都是劳动密集型的。什么是劳动密集型的企业呢？麦当劳炸薯条就是劳动密集型的工作，用不到学校教授的那些知识。如果有一天你不炸薯条了，而要去做更大更专业的东西，学校里的知识就会派上用场。有人说一个语言、一个技术，能解决问题能用就行了，我不这样认为。我觉得你应该至少要知道这些演变和进化的过程。而如果你要解决一些业务和技术难题，就需要抓住某种技术很深入地学习，当成艺术一样来学习。我在“软件开发‘’”里说过，第一重门是业务功能，在这重门里，的确是会编程就可以了；第二重门是业务性能，在这一重门里，技术的基础就很管用了，比如：操作系统的文件管理，进程调度，内存管理，网络的七层模型，TCP/UDP的协议，语言用法、编译和类库的实现，数据结构，算法等等就非常关键了；第三重门是业务智能，在这一重门里，你会发现很多东西都很学院派了，比如，搜索算法，推荐算法，预测，统计，机器学习，图像识别，分布式架构和算法等等，你需要读很多计算机学院派的论文。总之，这主要看你职业生涯的背景了，如果你整天被当作劳动力来使用，你用到的技术就比较浅，比较实用，但是如果你做一些知识密集型的工作，你就需要用心来搞搞研究，就会发现你需要理论上的知识。比如说，我之前做过的跨国库存调配，需要知道最短路径的算法，而我现在在亚马逊做的库存预测系统，数据挖掘的那些东西都需要很强的数学建模、算法、数据挖掘的功底。我觉得真正的高手都来自知识密集型的学院派。他们更强的是，可以把那些理论的基础知识应用到现在的业务上来。但很可惜，我们国内今天的教育并没有很好地把那些学院派的理论知识和现实的业务问题很好地结合起来。比如说一些哈希表或二叉树的数据结构，如果我们的学校在讲述这些知识的时候能够结合实际的业务问题，效果会非常不错，比如：设计一个IP地址和地理位置的查询系统，设计一个分布式的NoSQL的数据库，或是设计一个地理位置的检索应用等等。在学习操作系统的时候，如果老师可以带学生做一个手机或嵌入式操作系统，或是研究一下Unix System V或是Linux的源码的话，会更有意思。在学习网络知识的时候，能带学生重点学一下以太网和TCP/IP的特性，并调优，或是能做一个网络上的Pub/Sub消息系统或是做一个像Nginx一样的web server，那会更好。如果在学图形学的过程中能带领学生实践开发一个作图工具或是一个游戏引擎，那会更有意思。总之，我们的教育和现实脱节太严重了，教的东西无论是在技术还是在实践上都严重落后和脱节，没有通过实际的业务或技术问题来教学生那些理论知识，这是一个失败。中国人中庸的思想，入世和出世，每天的工作就是入世。举个例子，在上海的时候，给交通银行做项目的时候，每周休息一天，早九点到晚十点，每天工作12个小时，这样的工作持续了一整年，没有节假日，项目上的技术也没什么意思。当时我晚上十点回到住处，还想学一些C++/Java和Unix/Windows的技术，于是就看书到晚上11:30，每天如此，一年下来学到很多东西，时间没有荒废，心里就很开心。我觉得当时是快乐的，因为有成长的感觉是快乐的。现在的我，工作、写博客、养孩子，事情其实更多。我早上7:30起床，会浏览一下国外的新闻，hacker news，tech church，reddit，highavailability之类的站点，9点上班。晚上6、7点钟下班，开始带孩子。十点钟孩子睡了觉，我会开始重新细读一下这一天都发生了些什么事情。这个时间也有可能会用来看书。学习的过程我是不喜欢被打断的，所以从十点到十二点，家人都睡了，这正是我连续学习的好时间。可能从晚上11:30开始，我会做点笔记或者写博客。我现在对酷壳文章的质量要求比较高一些，所以大概积累一个星期的时间才可以生成一篇文章。每天我大概都在一两点钟才会睡觉。没办法，我有技术焦虑症。但是觉得这样的生活很充实，也很踏实。另外，任何一门技术玩深了，都是很有意思的。有些人形成了一个价值取向，“我只做什么，绝不做什么”。前段时间有一个刚来亚马逊的工程师，他原来做的是数据挖掘推荐系统，后来公司重组要他做前端，他不肯。我觉得，前端后端都是编程，Javascript是编程，C++也是编程。编程不在于你用什么语言去coding，而是你组织程序、设计软件的能力，只要你上升到脑力劳动上来，用什么都一样，技术无贵贱就是这个意思。回到问题，怎么才能享受到快乐呢？第一，入世和出世要分开，不要让世俗的东西打扰到你的内心世界，你的情绪不应该为别人所控，也不应该被世俗所污染，活得真实，你才会快乐。第二点就是要有热情，有了热情，你的心情就会很好，加班都可以是快乐的，想一想我们整个通宵用来打游戏的时光，虽然很累，但是你也很开心，这都是因为有了热情的缘故。我承认我活在我的精神家园里面。我推荐大家看一下王小波的《我的精神家园》，这篇文章对我的影响非常大。看了这篇文章，你就会明白我为什么要躺在自己的池子里，如果不想被这个社会所污染，就必须要躺在自己的池子里。做大众是很容易的，做自己是最难的。当你老了的时候，回想过去，如果你是为自己而活的，你总会觉得很踏实。可能有人会觉得我偏激，没关系，为什么要所有人看法都一致呢？世界因为不同而美丽，多元化的价值观并不冲突。最后送大家一份自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、设计模式、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、Linux使用及内核、数据库、Redis....等主流的编程学习书籍。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：书单：  最后给大家分享一下计算机学习路线大全，很多同学照着这个路线学习进了拿到大厂offer"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],周新扬,说一个大家可能不太听过的——梁肇新。这是百度百科上的照片，无论从发量还是气质上看都像是一个乡镇企业家，而不是一个程序员，但是这并不影响他作为中国顶级程序员的地位。在2000年至2005年的电脑城，新配的电脑不一定会装office，但是一定会装豪杰超级解霸，而它的作者就是。超级解霸不管多烂多花的碟，它都能够读出内容，开玩笑说丢一块石头进去它都能播出来电影，玩笑归玩笑，软件强悍的性能可见一斑。那个时代的网络营销还不发达，产品都是靠用户口口相传积累用户，一个共享软件做成装机必备可见超级解霸的成功。可惜，超级解霸没有赶上互联网的浪潮，最终被各种影音软件拍在了沙滩上。吃到美味的鸡蛋不会去问哪只鸡下的，普通用户也不会去关心的作者是谁，真正让大家开始知道他的还是那本铜版纸的《》。那本书类比练武提到程序员的六个阶段：熟练某种语言（套路）、精通平台接口（对练）、了解底层（手中有剑，心中无剑）、深入底层（手中有剑，心中有剑）、全局设计系统（手中无剑，心中有剑）、任何问题都变成思路问题（无招胜有招）。这六个阶段应该是他的书里面传播最广泛的内容，其他的比较高深，不好传播。书的内容差不多总结了那一代不依赖互联网的程序员深研的历程，现在还值得我们去学习追随。
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],草原上唱山歌,在美国留学时，曾经用两天时间，就复制出一款H5的Clear软件，在APP Store上线一天，就取得了付费版和总版第二的成绩。2014年2月，尤雨溪开发了一个前端库，就是我们熟悉的。Vue发布后，受到很多前端程序员的喜爱，很大程度上提高了前端程序员的开发效率。后来尤雨溪希望自己能够将所有精力都放在Vue.js上，希望全职去开发和维护，在上进行众筹，最终众筹的效果也是让他非常满意，每月能收到一万美元的赞助。为了大力推广Vue，他经常出现在JS的各种交流会上，给广大开发者分享Vue的开发经历，使用Vue开发的方法和技巧。在他的带领下，Vue.js正在茁壮成长，国内很多大小公司都在使用Vue，相信你也一定使用过这款前端的开源框架。尤雨溪全职做Vue后，已经赚取人民币上千万了，真是非常厉害的程序员，值得我们大家学习。这就让我们不得不深思，同样是程序员，人家怎么这么厉害呢？蔡景现被称为阿里的扫地僧---“”，是阿里巴巴初创时加入的三名工程师之一，也是阿里巴巴新增的三位合伙人之一。非科班出身的他，在一个月内从零开始搭建出了现在的淘宝，为了解决项目问题，常常在半夜爬起，去排除故障、去解决问题，独自维护淘宝搜索引擎5年，被称之为“码神”。他精通C/C++/Java，从前端到后端，在从技术底层和高层业务之间来回切换，阿里的CTO对他做出过很高的评价，一个人能够顶得上一个团队。比如，写一个文件系统，别人做可能是一个项目组或一个公司，而他在很短时间内就能从0到1一个人做出来。在所有工程师的眼中，他是一个神，甚至在公司内网的便签上，他也被称之为神。他很有钻研精神，很喜欢写代码，很傻很天真，写代码可以写到出神入化的状态。我们应该像蔡景现一样，要有钻研精神，多写代码，多做项目，多学习；编程只是一个技术活，多做练习便能熟能生巧，将来也会成为一名出色的技术专家。陈皓被大众称之为“皓哥/耗子哥”，他在博客上写出了很多经典文章，推荐大家可以去看看，他的博客：。他从事软件已经17年多了，对底层技术架构早已了如指掌，曾就职于亚马逊、等，目前正在进行创业。阮一峰是一名经济学博士研究生，依靠对技术的执著和热情，不断学习钻研，成为了一名IT专家。他热爱技术、热爱写作、也热衷于开源。他是经济学里写博客最好的，写博客将IT技术写得最通俗易懂的。前端的同学对他应该不陌生，估计很多学前端的同学都是跟着他的博客学习的，他的文章随处可见。他翻译的著作有：《》《软件随想录：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等。大家都称他为“春哥”，他曾经就职于中国雅虎、淘宝、Cloudflare等。他的编程之旅开始于抄书，他很喜欢向大家推荐他的抄书学习编程之法，毕竟他可是从抄书到开源之巅的。现在的春哥已经全身心投入到中，希望OpenResty未来能在工业界、互联网等行业掀起大风大浪，引领机器编程革命。如果有小伙伴想知道春哥是如何通过抄书学编程的，可以去看看春哥的专访，里面记录了春哥的成长心路历程。他曾经是ACM的冠军，现就职于阿里巴巴，在公司内部被称为“人肉逻辑机”。他为人十分低调，做事情深思熟虑，做人十分低调，做事不轻易动手。当有搞不定的代码时，他不是调试代码，而是逐行逐行的看代码，然后将某一行的代码错误指正出来。我估计他在看代码的时候，大脑就已经在运行每行代码了，大脑就是他的多核CPU。之前网上流传着他的一个传奇故事：某次代码遇到Bug，他的同事无法搞定，打电话向他求助，他在电话中直接指出某个下第780行的代码，这里估计有传参问题，他的同事一查，果然是这里出现了问题，问他是否在电脑旁，他说他正在外面吃饭，这让他的同事很是惊讶。他号称中国Lisp第一人，人称伞哥，他的思维远比技术值得关注。曾就职于网易云，在业内声誉很高，他的成绩我就不过多的介绍了。有情趣的同学可以去看看伞哥的日记，地址：他的性格古怪，他坐在办公室的旁边，经常跑到丁磊办公室，将丁磊正在充电的手机拔掉，给自己的手机充电。因为性格的古怪，后来被丁磊给开除掉了。离职时在博客上写：CEO 丁磊先生跟我性格不合，难以共事，但因为我工作成绩突出，无法直接开除，而我又深深留恋这家公司，不肯主动辞职，于是不得已将我劝退，给予 N+1 补偿，并言辞恳切地请我走人。所谓 “好聚好散”，我不得不接受。伞哥走的时候说，他不会怀恋网易的，只会怀恋战友，等他下次回网易的时候，就是收购网易的时候。Gray Wang根据  和 alameda 的股权价值，2022 年 4 月 ， 在福布斯新一期的富豪榜上， 年仅 28 岁的 Gary 以 59 亿美元的身价成为了 30 岁以下最富有的人。作为最神秘的亿万富翁高管，Gary 平时性格神秘，很少公开露面，网上照片屈指可数，连公司同事都经常很长一段时间见不到他，甚至领英的照片也只有一个背影。Gary 出生在中国，8岁后就随父母移民美国新泽西，他从小学习成绩出色，尤其在数学和编程方面展示出了很高的天赋和兴趣。2010 年他参加高中数学竞赛，刚好结识了  和 Trabucco （FTX的另外一名高管），三人共同参加麻省理工学院（MIT）举办的数学夏令营培训，三人皆顺利进入麻省理工学院的数学专业，Trabucco 和 Gary 攻读数学和计算机学士学位， SBF 则攻读物理学学士学位。SBF 和 Gary 在大学中逐渐建立信任，他们做了三年室友，学习之余，他们常一起打游戏，做谜题。在空闲时间里，还会共同参加  的兄弟会。Gary 性格沉默内敛，很多人都觉得 Gary 难以沟通、不好相处，但 SBF 在多年的观察中，深谙 Gary 的性格和能力，尤其知道 Gary 在编程和数学方面的天赋性（Gary 曾获得过 MIT 编程竞赛的冠军）。“很多人觉得 Gary 无法相处，就和 Gary 保持距离，但我不会，我认为 Gary不想刻意远离这个世界，他非常聪明，而且他可以腾出时间去思考一些很困难的问题。”SBF 这样回忆道。他们多年的求学经历结下了深厚的同窗友谊，毕业后 SBF 去了华尔街的交易基金 Jane Street 做交易工作，Gary 去谷歌做机票价格的整合引擎 Google flights 的开发。2017 年 11 月， SBF 在旧金山创立了量化交易公司  research ，专注于加密货币市场的量化交易。 第一时间里，SBF 就想到在谷歌工作的 Gary，他立刻飞去波士顿，说服 Gary 加入 Alameda ：“你的天赋来做交易一定能行，加密货币市场充斥着无数的新机会，我们一起创造！” SBF 为 Gary 生动地描述着他的雄心壮志与抱负。Gary 认为在谷歌的工作确实感受不到挑战，于是接受了 SBF 邀请来到旧金山。他们经常并肩战斗，Gary 没日没夜的编写代码， SBF 经常睡在公司，两人每天只睡 4-5 个小时。一开始，SBF 用自有资金运作 Alameda，买卖主流币和山寨币，但业绩不佳，甚至每天的损失高达 50 万美元。但在 Gary 加入 Alameda 之后，团队在很长时间的摸索之后，确定交易策略为利用日本、美国和韩国之间的比特币差价套利。在最关键的一环中，Gary 为 Alameda 写了整个，用于快速在不同的交易市场中套利，这套程序只要捕捉到交易所之间的价差并迅速执行，就能完成一笔无风险套利操作。凭借着这个手段，SBF 更是从投资人那里拿到了 1.7 亿美元的融资，Alameda 一天的交易量一度超过数十亿美元，每天收入可以做到惊人的 2500 万美元。然而这并不是一切的开始，早在 2018 年， SBF 就请求 Gary 写过一个比特币交易所的程序，Gary 一个月就完成了一个交易所 。虽然后来没有做成产品，但 SBF 深知如果让 Gary 来写合约交易所程序，他一个月内也可以完成，并且比市场上任何的交易所写出来的质量都要好。Gary 是一个不折不扣的程序天才。但当时合约交易所普遍存在的问题是，当客户的头寸经历损失，并且需要追加保证金，交易所会先请客户追加保证金，如果市场变化太快，交易所就会先承担资金的这部分损失。在后来的合约交易所的代码中，Gary 发明了一个新的清算引擎机制，可以按秒为单位来监控客户头寸，当客户保证金不够的情况下，立刻执行清算，从而保护了交易所的资金。虽然这个功能让交易者感到厌烦，但是解决了长期困扰众多交易所的关键问题。Gary 为 FTX 加入清算机制后，Binance、Kraken 和其他交易所也跟进开发了这个功能。此外，在一般的合约交易中，用户需要有对应资产的抵押进行借贷， 缺少资金的灵活性。针对这一点，Gary 为FTX开发了“交叉保证金”功能，让用户可以用多种数字资产共同为一笔交易做抵押。这一功能也在后来被其他合约交易所相继推出。实际上，作为 SBF 成就大业的“二把手”，Gary 不仅仅只是一个优秀的程序员，他还是一个顶级的产品经理！Gary 甚至可以单独通过市场需求开发出领先竞争对手的产品。  是 FTX 的工程主管，但是更多做工程师的协调，最核心的产品经常是 Gary 一人独自开发。与此同时，Gary 会负责 SBF 一些特殊程序的核心请求，并且只有 Gary 和 SBF 有权限使用和查看，FTX 的工程团队甚至都不知道 Gary 写的全部的程序。其中就包括 Alameda 可以从 FTX 转移资产的 “允许负余额”这一功能，这一程序让 Alameda 可以无限制地使用 FTX 客户的资金。在 SBF 和 Gary 的领导下，FTX 做到全球交易量排名第二，市值高达 320 亿美元。 却在 2022 年 11 月，FTX 一个星期轰然倒塌，欠下超过 100 万名的债权人的超百亿美元的债务，堪称虚拟货币世界的。FTX 的核心团队全部住在一栋巴哈马的顶层公寓中， 事发时刻警察上门扣押了包括 Gary 以内所有 FTX 的核心人员。他在 2022 年 12 月承认了包括电汇欺诈、商品欺诈和证券欺诈等所有罪行，即将面临 50 年的监禁。目前，Gary 正在寻求在法庭上合作作证以减轻判罚。一代天才程序员 Gary Wang 也曾名噪一时，但这样锋利的一把嗜血宝刀却被用在了错误的地方，落得一个潦草收尾的结局。Caffe框架的创始人，也是的作者之一，曾就职于Google Brain、Facebook等。
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],动力节点java培训机构,"能做出好产品又能引领企业走向巅峰的人，很厉害求伯君，浙江绍兴人。1988年，一个人，一年时间，写出了和微软抗争了十多年的国产办公软件“WPS1.0”。年仅25岁，他就成为了程序员出身最富有的创业者，他的名字早已写进中国软件的历史！是那个时代最让程序员们振奋的“英雄”，无可争议的成为“中国第一程序员”！个人历程：1964年，出生于浙江绍兴一个贫苦农民家庭；1984年，国防科大信息系统专业，分配到河北某仪器厂；1986年，仪器厂辞职，加入北京四通公司；1988年，加入香港金山公司；1994年，在珠海创立珠海金山电脑公司；2011年，从金山退休，副董事长雷军接任。个人成就：WPS之父：以一己之力写出WPS1.0，填补了我国中文字处理软件的空白；创立了中国第一个电脑游戏《中关村启示录》；金山之主：带领金山上市，成为当时最富有的程序员；IT导师：金山中，走出了雷军、、冯鑫、尚进等，被称之为“旧金山”的IT创业者……民族软件导师：中央电视台《东方时空》在比尔·盖茨来中国的当天，请求伯君谈民族软件以及WPS97如何抗击Word。评价：雷军：写求伯君的文章虽然很多，但令人满意的还没有。网友：走进当年的IT圈，到处都是求伯君2.0版。雷军，湖北仙桃人。写过加密软件、杀毒软件、财务软件、CAD软件、中文系统，焊过电路板，干过黑客，大学四年课程两年修完，就靠开发软件成了百万富翁，业界公认的劳模。做发布小米1.0需要拍视频，陈年、在内的一帮兄弟都为他出镜，砸掉苹果用小米。个人历程：1969年，出生于湖北仙桃；1991年，毕业于武汉大学计算机系；1992年，进入金山软件做程序员；2010年，创办小米科技；2011年，后接任求伯君任金山CEO。个人成就：与同事合著《深入DOS编程》、《深入Windows编程》等书；个人信仰：20年前我是一名软件工程师，到今天依然是！外界评价：：其实雷军是大家口中程序员的一个最佳典范，永远的精力充沛，时刻都想着去 build，并且能够及时的修复过程中的 bug，有着这么严谨的程序员思维，这也是他现在这么成功的原因。猎豹CEO傅盛：雷军无论多成功，永远一副低姿态。第一次见他，他手里拿个小本，问我当时做360安全软件的成功经验，我说什么，他就用笔都记下来。李彦宏，山西阳泉人。学霸级的人物，持有“超链分析”技术专利，甚至奠定了现代搜索引擎的发展方向。年少钟爱戏曲，一度被剧团相中，但在中学时还是回归课堂，以阳泉市第一名考上北大！个人历程：1968年，出生于山西阳泉，他在家中是五个孩子中的唯一男孩，少年时钟爱戏曲，曾被剧团录取；1991年，毕业于北大信息管理系，随后赴美完成计算机硕士学位；1994年，进入华尔街道·琼斯公司，担任金融信息系统设计工作；1997年，进入硅谷著名搜索引擎公司Infoseek(搜信)公司；2001年，回国创立百度；2011年，成为大陆地区的首富。个人成就：曾经为道.琼斯公司设计的实时金融系统，仍被广泛地应用于华尔街各大公司的网站；最先创建了ESP技术，并将它成功地应用于Infoseek/的搜索引擎中；拥有“”技术专利，是奠定整个现代搜索引擎发展趋势和方向的基础发明之一。（李彦宏称之为搜索引擎第二定律，利用检索关键词在一篇文章中出现的频率多少进行网页排序的技术，被称为第一定律）个人信仰：技术本身并不是唯一的决定性因素，商战策略才是真正决胜千里的因素。外界评价：合伙人徐勇意：李彦宏不仅有技术背景，还对商战有敏锐的直觉和出色的判断。网友：做为一个技术人，他曾经非常优秀；做为一个商人，他有很高的“觉悟”。做出最好产品的人很厉害一个孤独的人，生命中只有音乐、网球和代码。每当有争论，都是张小龙以长时间的沉默来结束。个人历程：1969年，出生于湖南省邵阳市；1994年，华中科大电信系硕士毕业，随后在广州一家互联网公司工作，业余时间开发出Foxmail；2000年，张小龙以1200万元的价格把Foxmail卖给博大公司，并任公司副总裁；2005年，腾讯收购Foxmail软件，张小龙“陪嫁”到腾讯公司。个人成就：利用业余时间，独立开发出Foxmail，以1200万元被博大收购；为对抗雷军“米聊”，带领13人仅用一个月上线微信，不到两年爆发2亿用户。如今微信估值8000亿，是支付宝的两倍。个人信仰：我说的是错的！外界评价：柳传志：做微信的那个小孩张小龙，确实做得漂亮，我没见过，据说也是比较宅的人。好友和菜头：张小龙是一个生性孤独的人，烟瘾很大，“是广州深夜里最大的Kent消费者”。不管他愿不愿意，几乎所有互联网公司，都曾向他宣战！做过5年程序员，但真正赚到人生第一桶金却是从炒股开始，最精彩的一单是将10万元炒到70万元。个人历程：1971年，出生于广东汕头一个小村子；1993年，毕业于深圳大学，主修计算机及应用；随后进入深圳润迅通讯公司，专注寻呼机软件开发；1998年，与一起创立腾讯；2004年，腾讯在香港交易所主板挂牌上市；2018年，47岁的马化腾成为全球华人首富。个人成就：与朋友合作开发风靡一时的股霸卡；开发中文版的ICQ，即后来的QQ。个人信仰：用最笨的方式去领悟编程，用抄代码来培养感觉。外界评价：马云：“QQ的攻击永远是悄悄的！”王石：马化腾能把握好底线，一个工程师控，凌晨两点发微信他还能马上就回。敢于折腾的技术人很厉害，安徽蚌埠人。人们熟悉史玉柱，有些是因为脑白金，有些是因为巨人网络。他不仅是个成功的营销家，而且曾经是名出色的程序员。开发汉卡赚到了人生第一桶金，又因巨人大厦转瞬欠了几个亿。人生大起大落后，还清所有债务，重新回到IT行业，现在已是网络游戏界里的老大之一。个人历程：1962年，出生于安徽蚌埠；1984年，浙江大学数学系毕业，分配至安徽省统计局工作；1989年，深圳大学数学系研究生毕业后，下海创业；1991年，成立巨人公司，推出M－6403；1994年，投资保健品，第一个产品是""脑黄金""，后为投资巨人大厦，几乎破产，欠债2.5亿RMB；2000年，再度创业，开展“脑白金”业务；2007年，旗下的巨人网络于纽交所上市，成为在美发行规模最大的中国民营企业；2016年1月，带领全公司展开手游研发。个人成就：M-6401桌面排版印刷系统；创业之初，一己之力编写文字处理软件，关键模块用汇编语言完成，软件代码数达到50万行。外界评价：网友：“负债过亿，东山再起的故事，注定也是中国商人史上最为“成功”的失败样板。”新浪网：”绝对是当今中国商界最具争议和最具传奇色彩的人物。坚定理想主义的人很厉害，四川成都人。一个成功地由顶尖技术人才转型为全面的管理者，带领搜狗，快速成长为中国用户量第三的互联网公司。个人历程：1978年，出生于四川成都；2003年，清华大学计算机研究生毕业；1999年，兼职加入初创的ChinaRen公司（中国最大的校友录网站）2000年，搜狐收购ChinaRen，王小川进入搜狐公司；2003年，正式加入搜狐，任高级技术经理；2005年，晋升为搜狐公司副总裁；2010年，搜狗CEO。个人成就：使用分词技术，使 ChinaRen 成为当时第一家能通过“机器自动生成相关新闻内容”的网站。个人信仰：像老板一样思考，像员工一样工作外界评价：：小川在少年时期就是计算机的天才。网友：也只有王小川这种具有「钝感力」的创业者才能够坚持下来，花好几年，一级一级组建自己的产品架构。张一鸣，福建龙岩人。从着装到谈吐都特别“不文艺范儿”，用他的口头禅来说：“实用，是第一重要的。”想挖人时，会拿出计算器，告诉对方如果加入今日头条收入增多少，有多少股份“如果你跟了XX，看上去是不错，但你的股价会翻十倍吗？”个人历程：1983年，出生于福建龙岩；2005年，毕业于南开大学软件工程专业；2006年，进入，一年后带着团队进入微软，没多久又到了饭否；2012年，今日头条上线，上线仅90天，积累用户1000万；2012年，创办字节跳动；  2016年，推出抖音；2018年，卸任今日头条CEO。个人成就：创造性地将机器算法和大数据技术应用于媒体传播2018年，字节跳动估值750亿美元，成为全世界估值最高的创业公司， 国内仅次于阿里巴巴和腾讯的互联网第三强。个人信仰：对于编程，更注重的是实用性，数学才是对事物之间最基础关系的描绘。外界评价：网友：“你似乎很难从他的身上，找到其他创业者对金钱的那种渴求，他更像是一个自由纯粹的冒险家。”丁磊，浙江宁波人。一个坐飞机头等舱，不穿机舱的拖鞋而是自带；江湖里出了名的酒量惊人，环保乐观，跑着步上班，既朴实无华又富于传奇。个人历程：1971年，出生于浙江宁波一个高级知识分子家庭；1993年，毕业于电子科技大学，毕业后回老家电信局做公务员；1995年，跳槽在skybase做软件开发；1997年，创办网易；2000年，网易在纳斯达克上市；2003年，丁磊成为中国首富；2015年，投资拍摄电影《少年班》个人成就：设计网易的整体架构；和一起研发免费邮箱系统，成为国内最早提供邮箱服务的公司个人信念：勇于“归零”外界评价：网友：“丁磊是一个有着浓重复旦情结的人，注定又是一个理想主义者。”不为外界所动的人很厉害周鸿祎，湖北黄冈人。曾对着一张印有键盘的纸张，敲敲打打，因为没见过真正的计算机。他叛逆、口不择言，不忌惮与人剑拔弩张，被封为“流氓软件”之父。他曾说：“我觉得除了百度和腾讯，以及他们的打手，都是我们的朋友。”个人历程：1970年，出生于湖北；1995年，西交大管理学院硕士毕业；1995年，就职方正，从普通程序员一路提任至总经理；1998年，创建3721公司，6年后被雅虎以1.2亿美金收购；2004年，任雅虎中国总裁；2006年，创建360公司；2016年，带领360从纽交所退市，完成私有化；个人成就：推出了3721“网络实名”，开创中文上网服务之先河；创办360，成为免费安全之父。著书：《智能主义：未来商业与社会的新生态》《周鸿祎自述:》《颠覆者：周鸿祎自传》个人宣言：要成为一个合格的程序员，怎么也要写个10万到15万行以上的代码。如果连这个量级的代码都没有达到，那说明你还不会写程序。外界评价：网友：“也许周鸿祎是中国互联网界最像乔布斯的人。一方面有着特立独行的叛逆思维，另一方面也有对产品的极致完美追求，还有他不满意时就口不择言的直率。”不了解王志东的人觉得他放弃了软件，而后又被网络所抛弃。但了解王志东的都知道他最钟爱的还是软件，而且现在他同时拥有了网络。个人经历：1967年，出生于广东东莞；1988年，毕业于北大无线电电子学系；1989年，特邀进入北大计算机技术研究所；1993年，任四通利方总经理；1998年，创建新浪网；2000年，新浪纳斯达克上市；2001年，王志东被迫离开新浪网，同年创立点击科技。个人成就：用时7个月，研发出“中文多窗口图形支撑环境”；用时一年，独立完成国内第一个实用化Windows3.0中文环境——BDWin3.0，一度引起各界震惊。外界评价：网友：“现在的新浪和王志东显然是没什么联系了，但是唯一可以确定的是他最爱的还是开发、是软件。”张朝阳：“他不够敏感，对于到眼前的危险、对腹背受敌的处境不够敏感。”从唯一历任苹果、微软、谷歌、高管的华人职业经理人、IT界黄埔军校的校长、大学生导师、创业者之父、抗癌战士到人工智能布道者，李开复的身份一直在变化。但始终未变的，是他在语音识别、人工智能、三维图形及网络多媒体等领域，享有的声誉。个人经历：1961年，出生于台湾，现移居北京；1972年，赴美国读中学；1983年，哥伦比亚大学计算机科学系毕业；1988年，获得卡内基梅隆大学计算机系博士；1990年，任苹果公司全球副总裁；1998年，加入微软公司，创立微软亚洲研究院；2005年，加入Google，任全球副总裁兼中国区总裁；2009年，创办创新工场，曾被《麻省理工学院技术评论》评为“最火的计算机实验室”；2013年，患淋巴癌。个人成就：运用统计学原理开发出世界上第一个“非特定人连续语音识别系统”，把语音识别率从40%提升到96%，当年被《商业周刊》授予“最重要科学创新奖”；著作：《做最好的自己》《微博：改变一切》《与未来同行：李开复文集》《一网情深与学生的网上对话》《世界因你不同：》《向死而生：我修的死亡学分》 外界评价：创新工场创始人之一：“李开复既能够在四合院和人喝茶吃花生米,也能在五星级酒店和外交官喝鸡尾酒。”在技术领域有的人，凭一己之力开发出了几千人使用的开源软件有的创造了网络的神话，至今为传诵有的授业解惑，或教室、或出书、或博客他们影响了一批又一批的后来者他们的名字经常被提起 这是一群对技术有着最纯真热爱的人蔡景现，一个更广为人知的名字是--“”。他是阿里巴巴初创团队三名工程师之一，非科班出身的他被称“码神”，又称“阿里扫地僧“。1976年，出生于浙江苍南一个农民家庭；2000年，从杭州大学生物系硕士毕业，加入阿里；2014年，成为阿里合伙人；2017年，41的他以26亿身家登上胡润财富榜。对于技术，既懂C/C++，又懂Java内核；既可以深入技术底层，又能切入到高层业务领域，从前端到后端，独自维护淘宝搜索引擎长达5年。突然得知成为阿里合伙人时，蔡景现当场蹦出一句“让我当合伙人？可我只会写代码啊！”只会写代码的纯粹，让他全票通过合伙人票选！阿里CTO张建锋：“多隆（蔡景现）做事一个人能顶一个团队。江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈。大学毕业进入云南工行，不满体制内的缓慢困滞，两年以后去了上海。由于技术不够，面试时遭遇羞辱，于是疯狂学习，专注底层，C++，JAVA，UNIX/LINUX 等，后成为大牛！曾于Amazon中国任研发经理；曾在阿里巴巴北京研发中心任资深专家一职；曾在阿里巴巴核心系统专家组，从事阿里云ECS相关的虚拟化平台的开发工作；现为MegaEase创始人，为企业的高并发高可用架构，提供一整套的技术解决方案和产品。“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”“他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。”上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。不仅热爱技术还热爱写作，同时还热衷于开源。学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！2008年取得上海财经大学经济学博士；毕业后当了老师，任教于上海金融学院；2014入职阿里巴巴。译著：《黑客与画家：硅谷创业之你Paul Graham文集》《：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！“他像是一个我从未谋面的引路人，过褒或过贬，都是不客观的！”""喜欢阮一峰并不是因为他有多厉害，而是因为他不停的学习，乐于跟我们分享。他写的博客总是通俗易懂，对于我们这些小白来说是很珍贵的财富""，世界著名计算机学家，应该说是一位非常重量级的“程序员”。他是唯一 一位获图灵奖的华人。在伪随机数生成、密码学和通信复杂度多个领域，都做出了巨大的贡献。与第一位获得诺贝尔奖的华人一样，姚期智在此之前是美籍华人，2017年才恢复了中国国籍。1946年出生于上海，幼年跟随父母到台湾，以麻省物理学博士身份转攻计算机。2000年，获得计算机界最高荣誉“图灵奖”；2004年，归国任教于清华大学，创建姚班、智班。如今71岁高龄的姚期智，致力将半生心血付于年青的学生们身上。创建了理论计算机科学的重要次领域：通讯复杂性和伪随机数生成计算理论；奠定了现代密码学基础，在基于复杂性的密码学和安全形式化方法方面有根本性贡献；解决了线路复杂性、计算几何、数据结构及量子计算等领域的开放性问题并建立全新典范。“姚先生是这个时代的科学诗人，他身体力行教会我如何欣赏科学的美，如何创造美好的科学，如何许诺用科学，带领人类走进一个更美好的时代。”江湖流传一个小故事：一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。出生于江苏无锡，在上海读完高中后，2005年到美国主修艺术史，硕士主修美术设计与技术，开始慢慢接触编程。毕业后曾就职于 Google Creative Labs 和 Meteor Development Group。由于工作中大量接触开源的 JavaScript 项目，最后自己也走上了开源之路，现在全职开发和维护 Vue.js。一己之力打造Vue.js框架；构建了Web界面的Javascript库。“尤雨溪做出了近几年最火的前端框架Vue.js，是开源世界华人的骄傲。”信息学世界冠军，让“人工智能”不再冷门的时代领袖 ，他的身上光环无数。曾经获得上海交通大学校长奖、人工智能科学技术创新奖一等奖、《财富》中国 40 位 40 岁以下商业精英、MIT 35 位 35 岁以下科技创新杰出精英。江苏苏州人，1983年出生，1991年，在苏州古城区读小学二年级的戴文渊，考了三次数学全班第一后，加入计算机兴趣小组。10岁开始写logo语言，学习C语言。在上海交通大学就读期间，带领三人团队夺得了ACM世界冠军和三个亚洲冠军，并担任ACM竞赛教练指导学生多次获得亚洲冠军。交大没有人工智能领域的老师，被送到了港科大，师从教授2007年发表的论文Boosting for Transfer Learning在迁移学习领域论文引用数至今排名世界第三；全世界首个提出“非监督迁移学习”概念的人；开创了“非监督迁移学习”这一重要研究方向；此外，他也首次提出了“翻译学习”（即“跨领域迁移学习”）和“迁移学习通用框架”等...2014 年，戴文渊和他的老师杨强成立“第四范式”，帮助企业提升效率、降低风险，获得更大的商业价值。港科大学杨强教授：“戴文渊是全世界最优秀的青年学者之一，是产业界、特别是中国产业界 AI 落地的杰出代表，对人工智能领域的发展帮助极大。”姚期智得意门生，公认大学生计算机编程第一人。有这么一个笑话，在编程界输入“教主”，会立即输出 “楼天城”。在程序猿界，其他人可以称得上牛X，但被冠以传奇之名的只有一个 ——「」1986年出生于杭州，因为数学太差，所以选择计算机编程，高中后开始屡屡获奖，2004年保送清华大学计算机系。2006年，TopCoder（世界顶尖程序员）排行榜全球第三，中国区第一名；2008、2009 年，Google Code Jam （谷歌全球编程挑战赛）冠军；2012年3月18日，Facebook黑客杯」名列第三；2016年创立无人驾驶公司（PonyAI），剑指L4级无人驾驶；获得中国自动驾驶创业公司最高估值。“只要有楼天城参加的比赛，别人就只能想着怎么拿第二。”“他是未来推动中国互联网产业发展的中流砥柱”--李开复江湖人称“春哥”，编程之路起于看不懂而抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。创立的OpenResty开源社区，获得了锤子科技一百万的捐赠。江苏镇江人，1999年，初中的章亦春第一次接触《》靠手抄自学编程，进入江苏大学后，一发不可收拾的迷恋上开源世界。结束淘宝量子统计的工作后，全心从事 OpenResty 等开源项目的工作；2017年，在美国创办了 OpenResty Inc. 公司。OpenResty的创造者（OpenResty ：开源的 Web 平台，用于开发高性能和高动态的 Web 网关或者 Web 应用。）“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”国际顶尖无线数据专家，连续创业者，写了34年的代码，如今50多岁，依然写代码。湖南长沙人，出生于1968年，初中时手拿一本《Basic语言编程》，从此走上编程之路；1986年，考入中科大，认为计算机太简单而选择力学系；1994年，美国印第安纳大学攻读天体物理博士；1997年起，在美国从事无线互联网的研发工作；2015年荣获全国优秀无线互联网专家称号；2008年创办和信，专注移动互联网IPPush和IP实时消息服务，2010年和信被台湾联发科收购。2013年创办快乐妈咪，专注母婴智能硬件和母婴健康服务，2016年初快乐妈咪被太平洋网络收购。2017年创办涛思数据，专注时序空间数据的实时高效的处理（存储、查询、计算等），研发出性能明显超越业内标杆产品的TDengine，可广泛运用于物联网、车联网、工业大数据、金融等领域。51岁的陶建辉是圈子里名副其实的“老炮儿”，把物联网技术，做成了业界无法忽视的开源生态。一个在网上搜PHP教程的初学者，华丽转身，成为PHP开发组核心成员，人称“”，PHP NG核心开发者，PHP5.4，5.5的主要开发者。陕西人，1998年，高中时期着迷网络，在网吧做网管，后被父母勒令退学。后来考上西安交通大学，调剂到计算机专业。研究生调剂到北京国际关系学院，信息安全专业硕士毕业。2006年第一次面试雅虎被拒，由此开始在技术上发力学习。后来担任Zend公司外聘顾问, 任职百度、新浪，现任技术副总裁兼总架构师。PHP7的核心开发者，PHP5.4，5.5的主要开发者；作为PECL开发者，贡献了Yaf ( Yet another framework )，Yar ( Yet another RPC framework ) 以及 Yac ( Yet another Cache )、 Taint 等多个优秀开源作品；同时也是APC，Opcache，Msgpack等项目的维护者。“PHP继父”他是中国计算机产业界技术大牛，国防科大六院90级校友，是国防科大的传奇人物，努力推行开源，堪称中国开源第一人。生于1973年，少年时痴迷于游戏，后考入于国防科大计算机系；原TelTel公司的首席科学家，ChinaCluster的共同创始人、阿里云CTO，花名为正明；2016年，离开阿里巴巴加盟滴滴；现任滴滴高级副总裁、中国计算机学会技术前沿委员会主席。LVS（Linux Virtual Server）创始人；沉淀了CDN、TFS、Tair、Tengine、MySQL、JVM、Linux内核、图像搜索等技术和产品。“他有技术人员的气质，也有一些文人的感觉。”ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。中间持奖杯者为为人太低调，找不到资料开挂一般的存在、史上最强大脑、逆天宅男。上海人，是中国最早黑客教父，绿色兵团创始人，计算机信息管理专业毕业。其创建的绿色兵团注册成员最高达数万人，高手云集，可以说，那是中国黑客江湖大一统的时代！大学时偶然接触到了中华学习机，苦求游戏破解方法时，看到台湾黑客coolfire（）的8篇黑客技术文章，从此走上黑客高手之路！绿盟创始人，2001年中美对攻领导者之一，红客运动发起者。每当中国被欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗：将红旗插到DI GUO主义的每个网站头上。二十年前，是一个大侠，江湖里真正的大侠。不会轻易出手，但是一出手必会撼动江湖。“近二十年里，龚蔚始终不变的，是追求无限可能的理想主义者，是一名真正的黑客。”————————————————版权声明：本文为CSDN博主「微笑很纯洁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接： "
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],启舰,"江湖流传一个小故事：一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。2014年2月，开发了一个前端开发库。没错，现在就是前端在广泛使用的Vue框架！Vue.js一经发布，就受到了很多人的追捧，可以说Vue.js就是人们苦苦寻找的那个好用的前端框架。后来的尤雨溪在进行了众筹，因为他希望自己可以全职去开发Vue.js。众筹的效果是非常满意的，每个月他几乎可以收到1万美元的赞助。因此他将全部精力都投入到了Vue.js的开发和推广上面，他经常参加各种JS交流大会，分享Vue的开发经历，分享使用Vue进行开发的技巧和方法。很多国内的大公司还有小公司都开始使用Vue了，Vue.js在他的带领下，正在茁壮成长。不过尤雨溪曾经发过一条推特，表示自己全职做Vue以后，赚了上千万人民币，真是厉害。看到这条消息，这只能用一句话来表达我的心情了：蔡景现，一个更广为人知的名字是“多隆”他是阿里巴巴初创团队三名工程师之一，非科班出身的他被称“码神”，又称“阿里扫地僧“。对于技术，既懂C/C++，又懂Java内核；既可以深入技术底层，又能切入到高层业务领域，从前端到后端，独自维护淘宝搜索引擎长达5年。他是阿里巴巴新增的三位合伙人之一。阿里CTO这样评价他：“多隆（蔡景现）做事一个人能顶一个团队。在内网的标签上，这不是恭维，在所有工程师眼中，他就是个神。多隆做事一个人能顶一个团队，比如说写一个文件系统，别人很可能是一个项目组，甚至一个公司在做，而他从头到尾都是一个人，在很短的时间内就完成了。多隆拥有着程序员所特有的钻研精神，多隆很喜欢写代码，在解释为何他能入选合伙人时说，“很傻很天真，多隆写代码可以写到入定的状态”多隆一个人负责了淘宝第一版上线，自此，他的技术水平也突飞猛进，为了解决项目问题，他经常得在半夜爬起，去解决问题，排除故障。“编程是一个技术活，只要练的足够多，就能熟能生巧。”像多隆一样，我们只要多做项目，做学习，也总有成为技术专家的一天。顺带推荐一下，我用时一个多月帮同学们搜集的学习资源。总是有同学问我有没有什么资料推荐学习，索性全网大搜罗了一下，用时一个多月。帮大家搜集了3T的资源，包括计算机专业46个方向入门、进阶、实战的视频和电子书都有，有的都是靠买的，视频、资料、源码都有，江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈陈皓，网名，酷壳博客博主，文章篇篇经典，强烈推荐大家去看看。17年以上软件从业经历，擅长底层技术架构，曾在、亚马逊、阿里云等公司就职，目前创业中。他很谦虚，他说“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”而我觉得，他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。如果你看过他的文章，想必你也会喜欢上他。上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。不仅热爱技术还热爱写作，同时还热衷于开源。学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！想必学习前端的同学，对他并不陌生。他的文章随处可见，我当年学习前端就是跟着他的博客来学的。他的译著有：《》《软件随想录：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等江湖人称“春哥”，春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。春哥先后在中国雅虎、淘宝、 就职，但开源世界是他如一的眷念。如今，春哥已全身心投入 OpenResty 的崭新蓝图，期待 OpenResty 未来能在工业界、互联网行业引领“机器编程”革命。有兴趣的小伙伴可以看下对春哥的专访，详细记录了春哥的成长和心路历程。ACM世界冠军，现就职阿里云，为人十分低调，公司内号称“人肉逻辑机”，他做事不轻易动手，深思熟虑，鲜有编译错误。遇到搞不定的代码找他时，他就看代码，不调试，一遍一遍看代码，然后指出某行代码有错误。人们都觉得他看代码的时候大脑其实就是多核CPU，在一次又一次的运行代码。网上还流传着有关陆靖的传奇故事：某次代码遇到bug，良久无策。一个同事打电话问他，他在电话里说：”你们检查下某个cpp文件的780行左右，是否参数传递有问题，一查果不其然，问他是否在电脑边，他说不在，在肯德基吃饭，众人大惊之下去git blame，发现这代码他8个月前提交过。特别聪明的本身少见，特别聪明而且记忆力超强的更是凤毛麟角“Common Lisp 程序员，号称中国Lisp第一人，网名“冰河”，人称伞哥。我不想多介绍伞哥的成绩，我只想说一说网上流传的一些奇闻轶事，如此牛人，可见一般伞哥，大名田春。在网易从事MIS相关工作，在业内有极高的声誉。伞哥每天一身白衣，拿一把伞。他对网易内部的人说，伞是法律允许的最长的防身武器。一身白衣是他妈妈亲自给他做的。伞哥性格比较古怪，他坐在丁磊办公室旁边，经常冲进丁磊的办公室，拔掉丁磊的iphone，然后把自己的插上。后来，网易内部需要开发一套办公区wifi的系统，伞哥自告奋勇承担并且开发出来了，在公司内赢得了好评。于是伞哥走进丁磊的办公室说，这套系统找华为做要20万美金，我不找你多要，给我20万人民币就可以了。丁磊气急，直接找到他的直接领导说，你的员工怎么这样。然后后来又一次，伞哥又做了一些东西，又找到丁磊，说，上次只有20万美金，我不跟你计较了。这次开发的这套东西能卖200万美金。至此，丁磊坚持把伞哥开除掉了哦对了，补充一下，伞哥离开网易的时候。部门全体人员请他吃了一顿饭。于是他走的时候说，我不会怀念网易，只会怀念这些战友。我不会再回到网易，下次回来，就是我收购网易的时候"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],九章算法,ACM竞赛界yyds——楼天城，本ACM选手永远仰视的存在。 他参加算法比赛的时候，这个世界上就没有能干得倒他的人，任何比赛都是第一名（只要他参加）。中国公认的大学生计算机编程第一人，经常以一人单挑一个队，在CEOI、ACM界无人不晓其大名，人称“”。 参加ACM比赛的时候，他的队友都是其他的 IOI 金牌，但是基本没他们事儿，他一个人单挑，ACM是3人团队赛，但是基本上有他的队伍，其他两个人只要负责读题，安静的做个翻译就好了…… 最可怕的是，人家并不是个只会做题的大佬，其他方面也强得一批： 你梦寐以求的外企（Google、Facebook）他想进就进，百度T10、自行创业，可以说你这辈子可能都难经历过一回的事情，他全都经历了一遍。 ，我们是的，而楼天城是2004年国家集训队的，令狐冲老师在参加acm比赛的时候还请他面授过：） 也是ACM金牌选手，并先后入职了Airbnb和FB，当然和大佬比还差得很远。最近我们令狐冲老师还出了一套（虽然与打acm比赛毫无关系，甚至acm选手看了都想笑，）但很适合的题目，看这里：  考得很多，主要注重代码实现能力，算法上没有太多难点，通常是处理麻烦。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20.  高频算法之王，变形特别多，算法不算特别难，但能快速想到和写好不容易。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20.  考察频率中等，能写好写对不容易，二分答案的问题甚至很难想到算法，要背模板。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10.  考察频率中等，一般和二叉树一起出现和考察，题一般不难。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10.  考察频率高，实现一般都不难。    1. 2. 3. 4. 5.  考察频率高，主要是考递归会不会写。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20.   国内大厂基本都考，北美主要是G/F喜欢考，其他公司考得少。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10.   考察频率中等，但每个公司基本都有一个这个算法的题。    1. 2. 3.   中小公司考得多，大公司近年来考得少，题目一般不难，主要考察Reference。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10.   中小公司考得多，大公司近年来考得少，题目一般不难，主要考察Reference。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10.   高频，经常会用到，原理必须掌握，但不用掌握代码实现，应用必须掌握代码。    1. 2. 3. 4. 5.   高频，应用和原理都需要掌握且需要掌握代码实现。    1. 2. 3. 4. 5. 6. 7. 8. 9. 10.   考察频率中等，主要是G/F可能会考，不会的话很多时候可以用BFS替代。    1. 2. 3. 现在令狐冲老师的春招公益讲座已经上线，讲座中会教授各种刷题技巧、算法面试的考察情况等，感兴趣的小伙伴不妨一起来交流学习下~ 还有像是，龙凡，杨沐，王小川，陈启峰，，陈立杰，陈丹琦，也都是水平超高的大佬，这里就不一一列举了，欢迎各位补充~ 
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],大博,更新一下，我希望大家不要点赞了，我只是转述一下，不值得被点赞，被点赞的应该是他们------------------------------------LVS作者，章文嵩博士，不用多说了吧，有多少人的代码能进Linux内核呢？淘宝霸爷，我以前的上司评价霸业是这样说的，霸爷是一个人脑计算机。贴一下霸爷的博客， 我一直是跪着看的
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],山尽,中国的所有程序员中，我只彻底佩服一位，他就是云风。我跟他在同一公司工作过，越了解他日常，我就更佩服他一筹。（我骑着摩拜单车赶去公司路上还经常看到他和老婆走路去上班）知乎有这样一个问题，—— 在2001年的时候，丁磊邀请云风去广州加入网易，开到了10000/月，而云风是2000年的应届毕业生。前几年，他创立的公司也被阿里收购了，可以说，他早就财富自由了。但现在，他还工作在一线，开发国产游戏引擎，维护开源项目，写着硬核的技术博客，最近的文章就是：什么叫热爱技术啊，这就是。相反你看看一些有了名气的程序员，他们还写代码吗？有代表的开源项目吗？还会写硬核技术文吗？在我看来，云风才是顶级水平的程序员。附上长发飘逸帅气的云风大佬：各位可以去学习一下。学习不够的话，也可以看看山尽我的精华文章，虽然比不上云风大佬：
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],Bruer,一个人啃泡面写出来的wps为何没人提
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],张小方,我读书的时候，特别仰慕两位大神：一位是——，这是一位水平非常高的前辈，当年他一毕业就被网易 CEO 的一张机票接到网易去了，担任梦幻西游的，这个游戏后来成了经典，也成就了网易。我那会儿读他写的代码以及他去网易的前后的故事、他如何招人、如何创业，非常钦佩。我上学的时候阅读风魂的代码，深有感慨，虽然代码的风格和变量命名如今看来略有稚嫩，但一个大学生可以熟练的用 C/C++ 和汇编写出流畅的程序，并且这个程序还能被商业公司使用的事迹，已经超过现在 99% 的计算机相关专业的大学生了。他的个人博客。云风写了一本书叫《》，讲述了他学习编程的经历和成长的思考思考，书中学习技术的思路和见解值得学习。另外一位是，的作者。可能新一代的同学不知道超级解霸当年在国内作为媒体播放的地位，曾几何时，超级解霸就是媒体播放工具的代名词，是 PC 用户桌面的必备软件。梁肇新也是那个年代的技术偏执狂和 IT 传奇英雄。超级解霸及暴风影音是国内唯一能与微软Windows Media Player、Real Player 展开争夺的桌面播放器。老前辈也写了一本书，叫《》，一听这个书名就很霸气，现在没人敢说自己是“编程高手”。我学生时代开始学的是 Web 开发，后来学 PHP、ActionScript，看了这两位前辈的图书之后，坚定了我把底层原理好好学好的信念。用一句话勉励后来想进入软件开发的学弟学妹：我学习 C/C++ 十多年了，目前在大厂做架构，深知新手学习 C/C++ 和基础原理知识的重要性，因此特地给 C/C++ 开发的同学精心准备了一份优质学习资料————，内容从 C/C++ 语言、网络编程、操作系统原理到完整的项目源码分析，同时这份资料也包括 C/C++ 学习方法、推荐的阅读书籍、简历指导和求职技巧等。原创不易，如果觉得有用，请给  点个赞吧～
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],farseerfc,打包狂魔 肥貓 @作爲 Arch Linux 的 DEV ，肥貓打的包能佔 Arch Linux 半壁江山。然後你看  上的 commit 統計：肥貓永遠穩居第一，超越後面 top2 ~ top 9 加起來。（當然其中有半數是給 Arch 打包的 commit 不過還是很厲害）肥貓說手上的計算資源太空了，不如爲科學事業做點貢獻，於是就上了 LHC@HOME 主頁：(其它事蹟未完待續）
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],支付宝科技局,必须安利一波：在去年，他整40岁。这30年来，他当过“不务正业”的学生，创纪录地在大一就考下系统分析员，“单枪匹⻢”闯荡过从国内到硅谷的多家知名互联网科技公司，和AI领域许多传奇人物都有所交集。不惑之年对于许多工程师来说，或许已是需要焦虑的年龄，但40岁的王益在每天都过得很充实：起床，自由泳一千米，然后去做他最喜欢的事——写代码和组织大家一起写代码。加入蚂蚁金服后，SQLFlow 好比一个“翻译机”，能将分析师们输入的 SQL 命令翻译成 Python语 言，这样一来，分析师无需学习 Python，使用 SQL 语言就能够处理数据、训练AI模型，并使用训练好的模型来回答业务问题。ElasticDL 是一个分布式的智能学习系统。它能和 SQLFlow 一起，补足简短的 SQL 程序翻译成复杂的 Python 程序的过程中所需的信息。它的容错和弹性调度机制，能让集群的利用效率更高。他与Code Review缘起于在Google写出的第一个程序。在当时深受打击的他，在压制了情绪后，仔细去看那些意⻅，发现每一条都真诚且很有帮助。“从那一刻起， Code Review 成为了我们的工作方式。”每天和这些同事们一起coding，互相review，让中国工程师们很快知道了应当关注哪些地方，应当如何沟通合作。他说“开源和不仅是个技术问题，更是管理学问题、社会学问题，关系到如何把大家组织起来变成更高效的团队。” 
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],闫子昂,机器学习领域的顶尖：caffe作者贾扬清，xgboost作者，mxnet主要贡献者之一陈天奇
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],findyi,前段时间和程序员届的左耳朵耗子叔约过一次饭：耗子叔跟我谈了他在技术层面的积累和思考，以及每一天对梦想的坚持。可以说是一个绝顶聪明的人，但言谈中，他始终在强调的却是：每一天的笨功夫。耗子书谈到作为技术人最快的成长方式：做最好的项目、看最经典的技术书籍，深以为然。作为程序员的我们，虽然不一定能做最好的项目，但看最经典的技术书籍还是很轻松就能做到的。我大学期间就是看了很多经典书籍，毕业就拿到腾讯的Offer，工作中也是保持看经典计算机书籍的习惯。另外我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，是伴随我从学生一路成长为腾讯高级开发工程师，360技术经理、360技术总监、中小公司CTO的打包全套，非常宝贵！点击下方链接直达获取：耗子叔谈到他为什么离开阿里，以及离开阿里后做了一年的自由人。在这个期间耗子叔帮助饿了么、58等的公司解决服务器问题，很多时候一个团队都解决不了的事情，耗子叔凭借一己之力就搞定了。这期间，耗子叔通过技术咨询和支持的方式，月收入轻松50万以上，再加上极客时间上的专栏收入（年售卖量过千万），月收入妥妥超百万。但这之后，他还是选择了创业，为了做出一家不一样的公司。耗子叔还谈到了对大公司的看法、对996的看法、对新一代程序员群体的担忧，这次约饭，真的让我受益匪浅。耗子叔也谈到他的梦想：让每一个程序员的学习之路更轻松，也期待未来耗子叔面向程序员的在线教育产品的问世～
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],程序喵大人,贴一个Boolan顾问团队介绍的截图，我想这些人估计都是国内顶尖了：因为我平时主要专注于C++，这里再贴一下我仰望的几个国内C++大佬：：不介绍了，谁都认识：极客时间C++专栏作者，前Intel资深系统架构师，30年开发及架构经验：《》作者之一，另外两个作者是潘老师的学生，前阿里首席架构师：《软件调试》作者，相当知名的内核专家：编译器专家，精通编译器技术：《C++》作者，资深架构师：知乎上想必大家都认识，可以点击下方卡片获取：
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],田业焱,"这个我谈下个人感受： ，台湾鬼才，CIH 作者，极具程序员天分的少年，用当时的新闻报道来形容：看到记者全身发抖，面对电脑露出笑容 。在电脑还不是那么普及，网络还不是很发达的1998年，CIH造成全球 6000万台电脑瘫痪。厉害！绿盟创始人，2001年中美对攻领导者之一，发起者，拉开了中国黑客为国争光的序幕。每当中国被外强欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗。将红旗插到帝国主义的每个网站头上。金山CEO，1998年，他一个人花了一年时间写出了WPS第一版，不用多说了， 向前辈致敬。4、能流传很广的小软件很厉害，消息队列服务httpsqs 作者， 这个小应用曾经占据了几乎所有中小网站的服务器，厉害。这3个人是 Linux
Kernel Patch Statistic  上中国排名前三的贡献者，不想太解释， 反正很厉害。，去年一年的时间，写了30多万行代码，着实让我震惊，有图为证：－－－－－－－－－－－－－－－－今天先写到这里， 有赞的话我再继续补充。"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],凯二七,李可文。高中在单片机上开发程序，获得全国科技博览会金奖。谢绝清华保送，参加高考考取北大计算机专业。他为人所知是在大学时，写出可以玩GBA游戏的DreamGBA模拟器，精确性和性能为当时业界GBA模拟器之最，在全世界模拟器玩家中名噪一时。为惠普PDA移植自己开发的GBA模拟器。以当时移动设备较为孱弱的性能，全世界的GBA模拟器里只有李可文写的移植版能够流畅运行。逝世前几个月（2003年底）还在商谈成为某投资千万的移动软件平台的技术总监。1979年9月出生，2004年7月病逝。
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],郭忠明,"郭忠明 自荐一下代表作: 高性能内存分配库，大约比 google tcmalloc 库有一个数量级的性能提升。基础库领域，少有的超越美国的一个项目。特点： 擅长写高性能的代码，重写过的多数组件，都有性能提升。擅长多线程高并发领域，熟悉。代表作 最新版本Libhasqlmalloc.so接口的内存分配库不仅快， 而且在其它指标方面也有很多亮点，例如更小等。代码总长度也是同类软件中最长的，大约4.2万行源码，考虑  很多的代码。目前有开放二进制so文件，测试源码，用户手册（最新大约52页，详细介绍了整体设计方案和思路，以及很多的其它内存库没有考虑过的黑科技）下载，下载链接见后。下面这篇大约50页，写于今年年初这篇是核心代码刚完成时的简介，两三页，写于去年年初测试的性能情况如下，单位均为ns,  下面是性能测试截屏。内存分配库so文件和性能测试源码 在下列地址下载"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],匿名用户,
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],大师兄Alex,"下面介绍的，都是技术界大神人物，希望这些IT界大牛能够给我们前行的路带来更多的可能性，激励我们继续前行。多隆在公司大多数时间是沉默的，从2000年加入阿里以来只专注于写代码，现在多隆在阿里的层级是P11。多隆不爱带团队，团队一般沟通成本高、水平参差不齐，而他一个人就能顶一个高效顶尖的团队。作为淘宝最早的程序员之一，很多产品早期就是他一个人开发维护的，文件系统tfs、key-value系统tair，cache、搜索、通讯框架等等，引用阿里云总裁行癫对他的评价：有个很偶然的机会，行癫听说NETAPP不太稳定。当时他恰好在看一个JAVA的分布式文件系统，便让多隆研究研究。看了一阵之后，说还不如自己写一个，这次连都表示有点怀疑。不过，行癫相信既然他说行，就一定能行。没过多久，多隆便完成了原型，三个月后就提供了一个能够运行的产品。而这一切，基本上是他一个人利用平时闲暇时间完成的。这个系统就是现在TFS，淘宝的文件系统。它成功地解决了大量小尺寸文件分布式存储的可靠性与读写的性能问题。如今，仍然有以T字开头的产品运行在淘宝的生产环境中。在阿里，多隆是一个“神”一样的存在，“只要有技术上的困难，找多隆，没有解决不了的”，这是在阿里技术人员中广泛流传的一句话。从2003年到2007年，搜索引擎工作一直都是多隆一个人负责，但这不是他所有的工作，因为他解决问题的能力是惊人的。多隆一个人能顶一个团队，别人做事可能要成立一个项目组，而他从头到尾都是自己一个人，还能很快就完成了，即使他负责的事情以前从没有接触过。阿里研究员毕玄说这里超经典的 leetcode题解 pdf（c++，go, python, java)资料，独家的资料：他随手举了两个例子多隆有一个常人难以做到的特质。当他沉浸在他的程序世界时，外界的人和事很难干扰到他。他的同事回忆说：多隆不擅交际，也不玩什么社交网络，一般很难在公众场合见到他，只要能不参加的会议、采访，他都不会参加。就算去，他也常常会带上笔记本。据说他也曾经带着笔记本去outting，在车上写代码……多隆在技术上真的已经到了“手中无剑，心中有剑”的化境。他解决没有现成答案的问题，就是直接看源码。从程序源码看到glibc，再一路看到kernel，直到问题解决。他很热衷于看源码解决问题，经常是大家都还不知道怎么办的问题，第二天他说他已经看了xxx的源码，改一下哪里哪里就好了。虽然被所有人视为神，但他真的由心底觉得自己是一个凡人，他做的最多的就是是默默的坐在工位上，他一直都是这样定位自己的：“我就是个写代码的，很普通”。很多人不知道，其实多隆并非计算机专业毕业。在1994年时，多隆考上了杭州大学生物科学专业，但这并没有阻挡他对技术的热爱，图书馆和机房是他最常待的地方，他还会把机器拆开研究，拿着拆开的机器去办公室请教老师。非相关专业毕业，却能在技术领域做出成就，多隆用他的热爱、专注、用心赢得了大家的尊敬。有一次多隆在试图完成一个复杂的功能，有一天他一来公司，跟同事说“昨晚凌晨四点想到了实现方式，现在来试试看”，他总是想着用各种方式提升性能。尽管身居高位，多隆仍然经常帮助同事理解代码。2018年5月，5名工程师参与了阿里代码领域最高荣誉""多隆奖""最终角逐。那天代码评审现场，多隆看到某代码片段最后结尾，突然说了一句，""往上翻看下第83行。""代码一般都是几百行，看到最后，却仍然记得第83行的一个细微瑕疵，这可不是一般常人可为。谢宝友，目前就职于阿里云，曾任中兴嵌入式实时操作系统，该系统获D四届中国工业大奖；中兴通讯2010年度金银奖获得者；阿里集团2019年度安全生产之星金奖获得者；2018、2019阿里集团ZY贡献奖获得者；《深入理解并行编程》译者；Linux ZTE架构维护者；DIM-SUM自研操作系统发起者和创始人。他曾个人在业余时间前后共工作，实为佩服。以下CSDN对谢宝友采访：：目前，我就职于阿里集团技术风险部，主要职责是负责阿里生产环境服务器稳定性，特别是基础软件。在稳定性工作中，沉淀了一款操作系统内核诊断工具：diagnose-tools，这款工具已经在今年云栖大会正式发布，并开源到：。如果时间允许，未来我会和同事／网友共同合作编写一本书来介绍这个工具。在工作之余，我也在过去一年中，利用休息时间完成了《自研操作系统：DIM-SUM设计与实现》一书的编写，该书已经于今年 ７ 月正式出版。同时，也和网友共同翻译了《嵌入式Linux设备驱动开发》。：在 20 多年的职业生涯中，我遇到两位技术方面的牛人，也是工作中的合作伙伴：1.的创始人吴涛。他也被评为“影响中国软件开发的 20 人”之一。2.阿里巴巴传奇程序员、阿里合伙人多隆大神。他的技术领悟力和敏感度非常高。对我影响最大的两本书是：1.老师翻译的《深入理解 Linux 内核》。这本书在 Linux 内核入门阶段对我影响很大。2.Paul E. Mckenney 的 《Is Parallel Programming Hard, And, If So, What Can You Do About It?》，这本书已经由我和鲁阳翻译为《深入理解并行编程》。这本书很难，但是对研发操作系统至关重要。：六年前，我在 CSDN 的专访()中，曾谈到过这个问题。现在想来，当年的回答仍然有效。推荐的几本书仍然值得阅读，即使这些书的内核版本老一点也没有关系。如果说需要补充一点东西的话，我觉得有这两点感悟：1.阅读的时候，心无旁骛很重要。2.聪明人下笨功夫，只有傻瓜才耍小聪明。在操作系统技术学习方面，尤其是这样。：。也许，我们可以把这些 35 岁的故事当成谣言！以我自己为例，35 岁的时候收入还不是特别高，而 35 岁之后，不但没有遇到危机，收入反而上涨了许多。也许 35 岁危机只是大公司 HR 放出的谣言。当然，这也并非坏事，我想 HR 是想借此保持组织的活力，避免一些员工思想怠惰。对于那些持续学习的员工，保持激情的员工，不偷懒的员工，哪个 HR 会舍得对你动手呢？，网名左耳朵耗子，酷壳（)博客博主。17年以上软件从业经历，擅长底层技术架构，曾在汤森路透、亚马逊、阿里云等公司就职，目前创业中。以下是极客时间二叉树节目的采访：我其实非常听话，也是非常不听话的孩子。其实我老逃课，逃课就是跑去上机，学习，因为书本上东西看不懂，如果你不去实际操作一下的话，你不能理解这些东西。后来有一天系主任就把我叫过去，就跟我讲有两个（机会），一个是北京的公司，一个是云南省的工行，让我做个决定。我父母都是下岗工人，我也不知道怎么做决定，第一次选择工作，然后所有人都说去工行，所以我就去了工行。银行其实并没有自己的那种核心研发能力，说白了就是银行技术人员其实并不做实施，只是做维护，所以待了两年也就觉得没啥意思。外面的各种各样的这些新闻，科技新闻比如说微软又怎么样，IBM 怎么样，Sun 又怎么样，Yahoo 又怎么样。就觉得那个时候，包括国内的像新浪搜狐网易这三家，还有很多很多的互联网公司，就觉得我选对了专业，计算机专业我选对了，时间我也在对了，就是我待在了一个正确的时间。在上海的时候第一次面试的时候是低着头，面试官是不敢看的，然后面试官问我三个 C 语言的问题，然后一个我都答不出来。所以当时就觉得第一自己知识能力太差，第二跟人沟通的能力不行，但是就想，没关系，没见过这场面，多见就行了，所以每个星期我都会出去面试一把。大概过了一年以后，几乎上海的中等以下的公司我全部都面过。Platform 是我经历过技术成长最快的一个公司，因为里面有非常好的 ，还有各式各样的工具。Code review 必然会有争论，有了争论以后，其实是一个大家磨合，或者说是推敲的一个过程。软件其实也是有工业级的标准或者是民用级的标准，这些都是工业级的标准，它要求的性能是必须1毫秒就能过去，而且吞吐量非常大，就相当于纽约股票交易所有一只股票的数字价格发生了一个变化，那么要在两百毫秒之内推到所有的，全世界所有的终端。所以在那个里面，我积攒了一些这种做性能软件的一些方法，这是路透给我带来的东西。亚马逊的技术团队有两个观点，第一个观点是崇尚简化和自动化，第二个观点是运维优先，叫 operational excellence，做平台的思路。我觉得一定要能维护它，因为它是很长远，我不是解决当下的问题。于旸, 网名“tombkeeper”，人称“TK教主”，负责人，国际知名的白帽黑客。从事技术研究16年，于旸有很多这样的发现。2016年，他获得了有安全界奥斯卡之称的Pwnie Awards“最具创新性研究奖”提名，成为该奖设立十年来首个获得提名的亚洲人，而凭借的只是发在博客上的一篇文章。作为教主，初中的时候就能指引别人找到成功的方向，比如教同学怎样制作炸药。当然，彼时的 TK 对于时机的判断尚欠稔熟——火药试爆成功，在同学的手里，在课堂上。这个描述来自 TK 的回忆。“我从小就喜欢搞各种实验，该吃的亏小学就都吃过了，那时候已经学会必要的防护了。但是同学只是想学，又不了解风险，所以才被炸伤。幸亏伤得不重，只缝了两针。”这个故事告诉我们，轻易不要和黑客做朋友。自带满格好奇心的 TK，在大学期间自然而然地接触到了电脑和编程。但是学医的他并不清楚自己的“黑客武艺”究竟如何，直到有一个朋友找到他求解救。此后诸多类似的经历让他觉得，“黑客”这门手艺不再只是他诸多的兴趣爱好之一。TK 面临两个选择。一面是遵循大学专业成为临床医生，一面是加入绿盟成为职业安全研究员。两个职业都属于他热爱的科技，最后他的理由是这样的：五年前，在一次世界顶级的安全技术峰会上，宣布了一个大胆的结论：微软Windows7中使用的一套看似无懈可击的安全防御机制，其实有个简单的办法""一点就破”。微软安全部门负责人坐在台下大感惊讶。因为于旸这个发现，微软很快决定设立安全挑战悬赏奖。而他又只花了一个月时间，就顺理成章将10万元的最高奖收入囊中。江湖人称“狗哥”，文笔犀利，思想深刻，犹如文学界的“韩寒”，对技术分析透彻，文章总是一气呵成，读起来让人醍醐灌顶，有大师的风范。狗哥的经历，颇为传奇，虽然是专科生，但却是一个学习能力和动手能力都非常强的人, 甚至还专门跑到女朋友大学去指导她们班的高等数学，实为让人震撼，从狗哥文章中，可以看出基本功非常扎实，对技术有着执着追求，喜欢研究技术从古至今演进，分析技术发展的脉络起源。狗哥说，一般都是他去""面""面试官, 能够真正解决技术难题，用实力说话，这样人才，哪个公司不喜欢呢。从狗哥的文章中，可以看出他也是性情中人：计算机很多技能都是靠不断刻意练习提升的，希望大家早日找到自己的方向！这里超经典的计算机资料，极客重生独家的资料：欢迎大家: 大厂资深工程师，云网络核心成员，多次获得五星员工，专注实战技术和职场心得，分享技术的本质原理，校招，社招面试技巧，深入浅出，让你胜读十年书，希望帮助更多人蜕变重生，连接大学和工作桥梁，不光帮你拿的BAT offer，还可以帮你培养高级工程师能力，拿SSP"
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],夏天的葡萄,1、金山软件股份有限公司创始人，1998年，他一个人花了一年时间写出了WPS第一版有“中国第一程序员“之称。1994年，在珠海创立珠海金山电脑公司，任董事长兼总经理。2000年底，担任金山公司执行董事及董事会主席。2011年07月06日，正式公布其退休计划，副董事长雷军接任金山公司董事长。2、台湾鬼才，CIH作者，极具程序员天分的少年，用当时的新闻报道来形容：看到记者全身发抖，面对电脑露出笑容 。在电脑还不是那么普及，网络还不是很发达的1998年，CIH造成全球 6000万台电脑瘫痪。3、是技术专家，也是LVS(Linux Virtual Server，Linux虚拟服务器)开源软件创始人，曾经是TelTel公司的首席科学家，ChinaCluster的共同创办人。他对自己的看法是：一个比较注重做实际工作的有用的人。4、姚期智院士的得意门生，正是姚教授发现他的才能后把他引上了现在的研究方向，并大力举荐他参加国际学术会议和比赛。编程奇才，被称为“楼教主”，清华同学则简称他“教主”。目前在Google总部工作，从事社交网络和机器学习相关问题的研究。5、Caffe作者，现任Facebook研究科学家，曾在Google Brain工作。在AI领域有数年的研究经历。在UC Berkeley获得计算机博士学位，在清华大学获得硕士和本科学位。对两款流行的深度学习框架做过贡献，TensorFlow的作者之一。6、1989年深圳大学研究生毕业，用9个月的时间研发出一套排版系统，4个月后赚到100万。之后就去了珠海，成立了巨人公司，后来又做了某白金和著名网游。7、雷军毕业于武汉大学计算机系，大三的时候就帮人写程序，成了百万富翁。1991年进入金山软件做程序员，一做就是7年。后来他成为金山总经理，又创办了小米。8、在做微信之前，就是业内知名的程序大牛，一个人开发出了电子邮件foxmail。后来在腾讯负责QQ邮箱，又带领团队开发了微信，他也被称为是“微信之父”。9、马化腾在创立腾讯之前，曾在深圳一家公司做了5年的程序员。直到1997年发现以色列人的ICQ时，才和深圳大学的几个同学（、陈一丹、徐晨烨）一起开发中文版的OICQ软件。再后来的事情大家都知道了。2018年，腾讯股票飞涨的时候，马化腾超过恒大许家印，成为中国大陆首富。10、李彦宏是学霸级的人物，1991年毕业于北京大学信息管理系，随后赴美留学完成计算机硕士学位。他的成就不只是百度，他个人持有“”技术专利，甚至奠定了现代搜索引擎的发展方向。
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],cholerae,"从初中学OI就开始关注他的博客一直到现在，受益匪浅，不过现在好像好久没有更新了……现在好像在苏黎世吧  高中用linux发现没有好用的注音输入法，就自己写了一个，最后还成为了ubuntu/fedora等发行版的预装软件……NOI金牌，大一就去了MSRA实习，毕业时通过了阿里星计划结果没去，去了谷歌……对音韵学也很有研究 这是他建的站 代表作：batsh,opencc他的博客："
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],纯洁的微笑,这是一群对技术有着最纯真热爱的人蔡景现，一个更广为人知的名字是–“多隆”。他是阿里巴巴初创团队三名工程师之一，。非科班出身的他被称“码神”，又称“阿里扫地僧“。江湖人称”浩哥/耗子哥”，对新手总是热心的帮助，一位百科全书类的前辈。上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。不仅热爱技术还热爱写作，同时还热衷于开源。学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！译著：博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！姚期智，世界著名计算机学家，应该说是一位非常重量级的“程序员”。他是唯一 一位获的华人。在伪随机数生成、密码学和通信复杂度多个领域，都做出了巨大的贡献。与第一位获得诺贝尔奖的华人一样，姚期智在此之前是美籍华人，2017年才恢复了中国国籍。江湖流传一个小故事：一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。信息学世界冠军，让“人工智能”不再冷门的时代领袖 ，他的身上光环无数。曾经获得上海交通大学校长奖、人工智能科学技术创新奖一等奖、《财富》中国 40 位 40 岁以下商业精英、MIT 35 位 35 岁以下科技创新杰出精英。得意门生，公认大学生计算机编程第一人。有这么一个笑话，在编程界输入“教主”，会立即输出 “”。在程序猿界，其他人可以称得上牛X，但被冠以传奇之名的只有一个 ——「」江湖人称“春哥”，编程之路起于看不懂而抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。创立的OpenResty，获得了锤子科技一百万的捐赠。国际顶尖无线数据专家，连续创业者，写了34年的代码，如今50多岁，依然写代码。一个在网上搜PHP教程的初学者，华丽转身，成为PHP开发组核心成员，php开源组织中国唯一成员。人称“鸟哥”，PHP NG核心开发者，PHP5.4，5.5的主要开发者。他是中国计算机产业界技术大牛，国防科大六院90级校友，是国防科大的传奇人物，努力推行开源，堪称中国开源第一人。ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。中间持奖杯者为上海人，是中国最早黑客教父，绿色兵团创始人，计算机信息管理专业毕业。其创建的绿色兵团注册成员最高达数万人，高手云集，可以说，那是中国黑客江湖大一统的时代！高山仰止，。虽不能至，然心向往之！你问我喜欢谁，我说我还是最怀念那个单纯迷恋程式的孩子……那么，谁是你心中的大神呢？
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],AWP996,必须 ，像老赵说的，感觉到总有一天R大会让全世界的程序员知道这个名字。
有哪些顶级水平的中国程序员？,['希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）'],匿名用户,水平是见仁见智的，但论顶级知名度的话，可以拿  为参考：当然这个也不太准，至少有这些偏差：分享这个排行榜不是劝大家卷这种东西，而是可以用它为出发点，量化地找到一些对职业生涯有用的信息：我觉得没必要看排名争论谁到底厉害不厉害，要知道对人帮助很大的人不一定就得是顶级水平的人，想通这一点就好。
被公司卸磨杀驴能把代码删除吗？,[],薛定谔的猫粮,删除代码违法，但删除代码的注释不违法。删除代码违法，但使用奇怪的函数名不违法。删除代码违法，但调用乱七八糟的库不违法。删除代码违法，但加入无用的代码不违法。
被公司卸磨杀驴能把代码删除吗？,[],甲鱼,驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。
被公司卸磨杀驴能把代码删除吗？,[],老僧也有猫儿意,想反抗又不敢反抗的时候可以试着加倍努力干烂活，撸起袖子加油干.....烂活态度一定要端正，水平一定要稀烂——我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示他敢10点给我打电话，我就凌晨1点给他回
被公司卸磨杀驴能把代码删除吗？,[],琴梨梨OvO,删除代码你什么也得不到，除了泄愤外屁用没有不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度活用变量，闭包内外变量名称尽可能用一样的，这样整个代码就会看起来逻辑极其混乱难以分析，配合注释下毒就算来了都得琢磨半天大量使用语法糖和各种简略写法，比如六七个裹在一行里高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山内存能不回收就不回收了，等着它不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了把关键逻辑写成一个开源库再引用的办法，引用版本号一定要写latest，离职后自己把开源库release一个会炸的新版本，等下次依赖自动升级就直接全炸总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人
被公司卸磨杀驴能把代码删除吗？,[],孙悟元,首先，屎山，bug，是合法的代码写的差是合法的代码中引用一个你自己的库(一般情况下)是合法的写的代码先不提交是合法的合并时删掉一些代码也是合法的(合并代码又冲突嘛)写代码不考虑特殊情况也是合法的sql不防注入是合法的域名解析源站ip是合法的漏洞不修是合法的多用点停止支持的库是合法的多写点报错自动退出是合法的，什么参数错误管他什么直接报错判断写严格点是合法的，发现问题立刻报错而且不输出问题不写注释是合法的什么？公司用的是1.8的jdk？没关系，用最新的jdk是合法的，直接把编译完成的代码传上去突然又想到一个：写前端的兄弟们，用来格式化代码如何～但你恶意删代码1.(可能)没有效果，直接恢复2.如果删掉无法恢复那等着公司法务吧，违法的兄弟们评论区不看后悔一辈子
被公司卸磨杀驴能把代码删除吗？,[],渣儿哥,十几年前我接私活，帮别人实施一个政务软件项目，合作方老板承诺1万的好处费。当时环境是Windows Server，我开了远程权限，写了脚本放在计划任务里，预防对方付款上磨磨唧唧。后来担心的事情还是发生了。我遂告知对方删除map（map及坐标数据是我私人提供的，没备份的话删了就彻底没有了）、删除应用程序以及格式化系统os的时间计划安排。双方电话里相谈甚欢，互相给予对方温暖问候之后，我爽快的拿到了一张中行的支票。
被公司卸磨杀驴能把代码删除吗？,[],痛苦轴心,卧槽，你们都要埋雷给公司造成损失吗？我当年正常写就行。
被公司卸磨杀驴能把代码删除吗？,[],旅行者一号,劝开公司的，对各种技术人员好一点，如果你用maya，这两年估计你遇到过，有一个病毒，中招就会现实这个：程序员要是泄愤，删代码并不是好主意，在代码中加东西才是好方法。
被公司卸磨杀驴能把代码删除吗？,[],雨丝情愁,接过一个项目功能很简单，但是防破解的功能我搞了一个星期然后给对方，每次操作软件会跳出框框说免费试用15天15天内未输入注册码的话保持调度通讯功能，但不能操作设备；不到3天就马上打款了
被公司卸磨杀驴能把代码删除吗？,[],麻辣小龙虾,"删代码涉及到违法， 可能会被抓去啃窝窝头，得不偿失。但是在项目里面“一不小心”留几个暗坑，或者因为“技术菜”留下大坨小坨的“屎”，相信大家都是可以理解的。真是没想到，我居然被卸磨杀驴了。入职一家公司，转正不到一个月， 帮他们把框架搭建的差不多了，然后就没我什么事了。这操蛋的，早知道这样应该在框架里面""拉屎""的！"
被公司卸磨杀驴能把代码删除吗？,[],老娜迦,额。核心层用C++写的。大佬告诉我，不要用指针。然后我就把指针的星号都藏了起来…为了效率，也为了懒省事，数据交换经常用数组越界溢出的方法。全局变量和局部变量连续混用。除了我自己，别人谁都看不懂。。看懂了也不敢动。尤其是各种溢出，据我师弟说那些代码基本上都是鬼见愁的。。。
被公司卸磨杀驴能把代码删除吗？,[],牛小白,不能，这样犯法。但是代码质量不过关是可以的。你品你细品。
被公司卸磨杀驴能把代码删除吗？,[],卍昱昇,我打的人生第一份工，就被老板卸磨杀驴了。我的报复是：我在中午没人的时候，把干活的三台电脑都下载了一个东西，这个东西很神奇，只要一关机，就会重启，然后进入DOS系统格式化非系统盘外的所有硬盘，而且是悄摸摸的，显示器上给你显示的是在检查硬盘错误，让你别动。公司是个广告公司，当时所有的资料都保存在那三台电脑里。这是2001年的事儿了。没有人怀疑是我干的。因为上午的时候断了一次电，3台电脑都非正常关机了，他们都认为是断电导致的硬盘损坏。
被公司卸磨杀驴能把代码删除吗？,[],夜尽天明,学学Twitter的程序员，被裁掉又被马斯克请回来
被公司卸磨杀驴能把代码删除吗？,[],2333,
被公司卸磨杀驴能把代码删除吗？,[],sunshinebooming,// 补充下，有的人说我捞，这种有问题的代码一眼就看出来了。那我就分享个我自己的事吧：上学那会自己找的实习，开发什么智慧农业，无非是c51挂几个传感器，读到数据用lora传出去。我哼哧哼哧做了一个月，有一天主管跟我说，想看看做的咋样，让我把源码，还有搜集到的资料都压缩给他看看（小作坊没有搞svn.git这种）。我一想不对啊，你直接看我的开发板不就行了？怕不是要卸磨杀驴吧，我就随便在几个数据采集的地方，加几个随机值，随机值名字起得挺正式，看起来就是校正值啥的，给主管发过去。后来过几天我就被开了，某天qq收到一个人加我，说大哥我是接替你的人，用了你的程序，感觉有点不对劲啊，数值忽高忽低，他们一堆人研究好久也不知道咋回事，我说不知道啊，反正我用是正常的，主管知道的。哦对了，那个项目还是挂在某省会的什么智能研究院下面，看似高大上，实则水的一批。～～～～～～～～～～～～～～～～最好不要这样做，因为员工在公司的成果，属于公司财产，删代码可能负法律责任。不过我听说有的程序员水平太次了，写的代码烂不说，还经常搞出一些极难复现的Bug。比如说在一些不起眼的地方，加个随机数，外面还套个极小概率的if条件。这样的程序员简直是公司之耻，我劝题主以此为鉴，多去修炼技术，少想歪门邪道。
被公司卸磨杀驴能把代码删除吗？,[],玄鸟于飞,千万不要这么干
被公司卸磨杀驴能把代码删除吗？,[],幼儿园不是好孩子,如果你删了代码就能让公司有什么特别大的实质性损失的话，那样的公司不呆也罢。还不如往代码里边埋点逻辑炸弹，或者说把代码写的让别人都看不懂。别问逻辑炸弹怎么埋，你能问出这样的问题就代表你的代码大概率效果跟逻辑炸弹差不多
被公司卸磨杀驴能把代码删除吗？,[],游泳的鱼,抗战的时候，游击队剪电话线的时候，剪断的时候还得再给它“接”起来，让外表看不出来。
被公司卸磨杀驴能把代码删除吗？,[],SomeTimes,删掉干嘛？不如“加点啥”。删是一种破坏性行为，是对公司财富的侵害。而“加”是正常的工作行为，拿工资就是做这个的。
被公司卸磨杀驴能把代码删除吗？,[],pansz,可以，但没有意义，能问出这种问题的多半不是程序员。因为代码是有版本管理的。也就是说，你从来不能直接操作代码，直接提交改变。而代码库从创建以来的所有动作，都被会如实的记录下来。你删了代码，只需要将你的这个操作撤销即可。就算服务器端的你有办法删，但代码是在每个开发人员那里都有一份的，你删不完所有的代码，就等于跟没删一样。为什么程序员常常说删库跑路不说删代码跑路？因为删库指的是删数据库。数据库一般服务器一份，备份服务器一份，最多两份，删了就没了。代码就不同，十个人的项目那代码可能会有二十份（因为大家本地一般都可能不止一份代码），并且存放在十个不同的电脑上。你根本删不完的。真正有效的报复不是删代码，而是拼命揽活，疯狂写代码，拼命提交。然后这些代码请全都不要测试，基本主线能跑通即可，甚至跑不通也行，多写一些似是而非的代码。这些代码多写一些，调试的时候坑多的是，然后公司就会觉得，代码删了也浪费，重新开发又舍不得，就得请人调试它通过，然后嘛，有可能请人调试花的功夫不比重写一份低呢。其实公司要是聪明就该主动删掉离职员工刚开发没完成测试的代码。但既然都卸磨杀驴了，估计是舍不得主动删的。就等着继续被坑吧。。。
被公司卸磨杀驴能把代码删除吗？,[],成隽,可以的，不过不建议删除代码，这玩意大概率在其他人和sever上都有多个版本备份，恢复太容易。你坐牢了也是白坐。建议直接删除数据库文件，和备份，这样再坐牢也不白坐。你想做个坏人，一定要做到位，不要做这种半吊子侮辱自己的傻事。忘记补充了，删完备份一定要记得大量写盘，不然牢又白坐了。
被公司卸磨杀驴能把代码删除吗？,[],维森,开饭店的老板重来不怕员工跑路还顺东西。怕的是员工跑路前在厨房搞一些小操作。比如拉一坨一时半会找不到的屎。
被公司卸磨杀驴能把代码删除吗？,[],哥舒夜带刀,某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。真是……太高看我了，写完不到一个月我基本就忘光了 
被公司卸磨杀驴能把代码删除吗？,[],花了个多,   在我任职的第一家公司，我只要认认真真写代码，公司多少会损失点什么
被公司卸磨杀驴能把代码删除吗？,[],360FLIP,曾经把同事的代码从1300多行优化成了15行，后来我在这家公司就没有然后了，同事则一直待到了公司资金链断掉全体解散~突然就火了啊，看大家特别好奇，我抽空就翻了下老代码，关键点在于下限的格局要打开！代码本意是写一个复合的sql查询，带很多参数这是修改前的一小部分这是修改后的全部逻辑这是当时的提交2017，是很久远的事了公司都没了也没啥不能发的~再更新下最近的一些近况，21年开始自由职业，尝试低成本创业，既然是互联网行业，自然就不能花自己的钱创业嘛，于是找了个有资源的方向(眼镜行业，我自己戴眼镜，身边很多朋友同事也戴眼镜，还间接认识一些深圳眼镜行业的大佬)。于是乎写了创业计划，聊方向，谈愿景，也顺利的拿到了一些投资。之后就是以极低的成本开始迭代，做了品牌官网，眼镜在线试戴功能，还给品牌方做了供应链管理上的数字化转型。但结果呢，是起步太慢，看不到实实在在的盈利(说实话，这点也没办法，不是销售出身，只愿意踏踏实实的做技术，可能做出的东西能省钱且提升效率，但它就是不能有新的爆发性增长)，最后协商股权退让，投资方撤资了。目前项目简单维护吧，眼镜可以卖一卖赚点小钱，现在准备重新找工作结束自由职业之旅了，就这样~对了，眼镜品牌的官网是zama.plus，有想配眼镜的朋友可以联系，深圳横岗的货，质量可以放心
被公司卸磨杀驴能把代码删除吗？,[],汪兴元,
被公司卸磨杀驴能把代码删除吗？,[],洵无,删什么代码？真删了不怕公司起诉你啊？咱不删代码，删注释因为代码没删，所以系统可以正常运行，不会涉嫌犯罪但问题是现在好多互联网公司的代码都是祖传屎山都不用故意破坏，把前人留下来的注释删了你看接手你工作的人麻不麻，你看看公司管理层麻不麻前人注释没了，你看他出bug怎么修？想加新功能？新来的程序员干吐血了也够呛能成
被公司卸磨杀驴能把代码删除吗？,[],Firefly,不，你要把：注释全删了所有文件给我改成中文名，比如“gongsiguanlixitong(公司税务管理系统)”代码名和方法名称给我写长一点点，比如“compare”直接给我改成“bijiaoAheBdedaxiao（比较A和B的大小）”if给我写多一点
被公司卸磨杀驴能把代码删除吗？,[],易显维,人不坑我我不坑人人若坑我我还一针人还坑我斩草除根（仿佛看到两个程序员相隔时空的diss）//喝大了，等会再修bug//有魔法，别碰。//开森地调bug吧，傻x（隔着屏幕都想打他一顿）//这代码真是烂透了，你懂的，我也懂的。//先往下看，后面再喊我傻X。//我也不确定我们到底需不需要这个，但是删了又特害怕。#要想理解递归，移步本文件底部然后翻到文件底部：#要想理解递归，移步本文件顶部//本人对本代码概不负责，//他们让我写的，非本人自愿。//如果这段代码跑的通，那就是Paul DiLascia写的。要是跑不通，//那我就不知道是谁写的了//这公式没毛病，你要不信自己去算//要是你想被炒鱿鱼，那就删吧//如果将来读到这行代码，我会穿越回来，然后一死以谢天下。（潜台词是自己代码写的太烂，会丢了工作或者造成公司倒闭）放个大招，在 GitHub 上有这么一个脚本，前面好好的，很正常，到了中间作者忽然用注释对 Adobe PSD 来了一大段的疯狂吐槽：看来是实在忍无可忍了。吐槽完这一段后，作者又继续淡定地写完了脚本。这段脚本的地址：这是一段来自的，第六版Unix Kernel，注释语句为“you are not expected to understand this”，意思就是，你不可能看懂这个。去年虾米音乐客户端的程序员竟然称一些活动送的VIP客户为“穷逼VIP“，引发了网友争议。或者这样的：甚至这样的：
被公司卸磨杀驴能把代码删除吗？,[],泪落坠成霜,为什么要删除代码？代码在公司开发，所属权也应该是公司。你能做的就是安心的在接下来的日子内开发新的代码，做好交接，这很正常。在开发或者交接过程中因失误写下了部分无法执行的代码，或者交接遗漏了一部分，也是可以理解的，因为我们都是人，是人就会犯错，我们就是因为犯错才被开除的，这很正常。无论是在公司内还是离开公司，都要对公司一心一意，夸赞，没有表达任何的不满。这才是友好的分别方式。我们应该去竞争对手公司那里观摩学习，而不是自暴自弃。技术人员虽然在权利斗争方面有劣势，但是学习能力适应能力强悍，绝不会因为一次失误而一蹶不振。
Bug是如何产生的？,['最好可以通俗的解释一下！'],卡戎,项目：学校里的一次月考。程序：确保学生规范答题并交卷，返回学生的分数。教务处开始提需求：要考语文和数学，高一高二高三分开来考，根据教材出题……考务处开始写程序：要出这些题目，给学生分配考号，派监考老师防作弊……普通用户行为：填写自己的唯一标识符(考号)，然后答题，交卷(上传)……爬虫：张三一天之内补考了1024次，把题库记的一清二楚。身份验证漏洞：李四填了王五的考号替考。DDos攻击：王六克隆了王七、王八、王九……王一〇二四把考场挤的水泄不通。兼容问题：选择题只能用2B铅笔涂，老王用中性笔涂卡结果无法识别。社工攻击：小明请校长喝酒，要到了试卷原题。网络丢包：老师收卷时滑倒，试卷飞出去找不到了性能问题：老师需要3天的时间改试卷，这3天响应速度很慢。木马攻击：小红帮助老师改卷，实则悄悄把自己的成绩改成了100。逻辑bug：“春眠不觉晓，_____。”既可以填“处处闻啼鸟”，也可以填“处处闻啼鸟。夜来风雨声，花落知多少”。热更新：教务主任走进考场，告诉同学们“春眠不觉晓”后面只能写五个汉字，否则不给分。抛出异常：改卷时发现学生字迹太丑无法识别。异常捕获：规定看不清的字迹返回0分。
Bug是如何产生的？,['最好可以通俗的解释一下！'],知乎用户ZbY5MP,领导：修个房子。程序员：好的，马上开始打地基！领导：你看那隔壁那木房子就没有打地基，不要在小事上浪费时间，一个月水平面上面什么都看不到，你kpi不要了？一层房子修好。领导：我觉得两层楼的视野好，再加一层。程序员：可是我们没有地基，重新打地基要时间……领导：你一楼都修好了，照着再修个一模一样二楼很难？还要很多时间？二楼修好。领导：天天走路累死了，你再修个电梯。程序员：可是……领导：没什么可是的，地基不稳？就在房子边上搭个电梯就行了嘛，不稳拿根木棍撑一下，这都不懂？电梯修好。领导：我觉得顶楼再加个游泳池就好了。程序员：这个结构行业翘楚的房子也不支持呀！领导：那不正显得我们牛逼么？修快点，夏天要来了。游泳池修好，看着摇摇欲坠的房子，程序员跑路了，领导找来新人继续。领导：我觉得游泳池水不够满，你加点的，一楼光线不好你在墙上打个窗户。新人：好的，没问题领导，马上加一桶水，马上砸墙房子塌了，电梯倒了，游泳池垮了……领导：真是个废物，就让他加桶水，居然能把房子弄倒了，你说这是多没用？新人：我真的就加了桶水，我怎么知道为什么。
Bug是如何产生的？,['最好可以通俗的解释一下！'],qin meng,老婆给当程序员的老公打电话：“下班顺路买一斤包子带回来，如果看到卖西瓜的，就买一个。”当晚，程序员老公手捧一个包子进了家门……老婆怒道：“你怎么就买了一个包子？！”老公答曰：“因为看到了卖西瓜的。
Bug是如何产生的？,['最好可以通俗的解释一下！'],第七地区,bug产生于人力有时穷。知乎上看到的段子，但我不记得是在哪个答案了。。侵删：一万个测试工程师在酒吧门外呼啸而过一个测试工程师走进一家酒吧，什么也没要一个测试工程师走进一家酒吧，要了一杯啤酒一个测试工程师走进一家酒吧，要了一杯咖啡一个测试工程师走进一家酒吧，要了0.7杯啤酒一个测试工程师走进一家酒吧，要了NaN杯Null一个测试工程师走进一家酒吧，要了2^32杯啤酒一个测试工程师走进一家酒吧，要了一杯烫烫烫的锟斤拷一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了。。
Bug是如何产生的？,['最好可以通俗的解释一下！'],陈清明,我以前玩过一款游戏，叫做永恒之塔。里面有个巨大的BUG.在新手村打怪，一只怪最多掉5块钱。组队平分，每人1块。但组队可以组满6个人。于是当你组满6个人打一只怪的时候，这5块钱就不够分了。因为1是货币的最小单位。于是惊悚的事情就出现了。系统开始每人几十万，几百万的分。这个BUG就是个逻辑错误。最后，因为刷钱被封号了。
Bug是如何产生的？,['最好可以通俗的解释一下！'],haha kim,请出一组有点久远的图片。---------
Bug是如何产生的？,['最好可以通俗的解释一下！'],坦克,飞机上，乌鸦对乘务员说：给爷来杯水！猪听后也学道：给爷也来杯水！生气的乘务员把猪和乌鸦扔出机舱。乌鸦笑着对猪说：傻了吧？爷会飞！这时，猪伸出翅膀扑哧扑哧问道：你说什么？（）乘务员发现自己莫名其妙在飞机外飞，同时还给乌鸦和猪两杯水，而且三个飞得比飞机还快......
Bug是如何产生的？,['最好可以通俗的解释一下！'],越阳,哪有什么bug，都是规则内的可行解。
Bug是如何产生的？,['最好可以通俗的解释一下！'],夏洛,之前在网上看到一组关于程序员的漫画，觉得用来回来这个问题很贴切！侵删-----------------------------------------我是分割线-----------------------------------------请各位大佬支持一下我的这篇原创问答：
Bug是如何产生的？,['最好可以通俗的解释一下！'],萝魏紫,根据我从业十五年的经验，bug一共就三种原因：我艹，没想到！我艹，打错了！我艹，你没告诉我啊！
Bug是如何产生的？,['最好可以通俗的解释一下！'],刘硕,理发师：我给这个村里所有不给自己理发的人理发。bug：理发师给不给自己理发？补丁：给村里所有不给自己理发的人(不含理发师自己理发。)测试：七大姑八大姨都来理发试试用户：给我的牛理个发。
Bug是如何产生的？,['最好可以通俗的解释一下！'],LanLiang,"     系统已上线,一切正常!"
Bug是如何产生的？,['最好可以通俗的解释一下！'],胖总,Bug的产生，通常分为三种类型：。为了便于你理解，我以女朋友来大姨妈举例。某日，你收到了女朋友的一条微信，跟你说自己来大姨妈，肚子疼。这时，你要写一段文字回复，这段回复你就可以认为是你写的一段代码。这段代码需要达到的目的是让你的女朋友感受到你对她的爱，增进（至少不减少）你俩之间的感情。我们可以把这个目的当成你对自己提出的这段代码背后的产品需求。你：我叫外卖来给你买个热饮吧。女朋友：滚！你是想让我从床上趴下去给外卖小哥开门么？分析：低级错误，程序执行后无法达到想要效果。你：我给你室友打个电话，让她帮忙照顾下你。女朋友：滚，谁让你联系我室友的。分析：访问了非法区域，造成程序崩溃。你：亲爱的，我早就知道有这天，所以暖宝宝、热水壶、痛经药....(此处省略一万字)，我都给你准备好了，就在家里。女朋友：我现在在地铁站。分析：你以为你万无一失，但你永远都不知道输入参数究竟是什么！除了上面三种主流错误，还有一大堆，这里就不细说。我跟其他答主不一样的是，我不光要告诉你们Bug是如何产生的，我还要跟大家解释我们程序员平常如何防范未知Bug，因为你们也看到了，Bug就像你女朋友的微信，你永远不知道她下一句攻击你哪个点。所以，这里要祭出利器：。异常捕获一般依靠try，catch语句。很好理解：try（尝试）一下，如果有问题，直接捕获（catch）住，防止程序崩溃。什么，你没听懂？我这么写你可能就懂了：完。补充：评论中有人提到了没有理解需求导致的Bug。这里我要讲一下，对于普通程序员来说，那可能就是Bug。但是对于我胖总来说，那是我设计的feature。对于能够产出结果的东西，只要运行时没崩溃，我都能把它描述成是我故意编写的功能。所以，在需求错位的时候，到底是低头背锅，认了那就是一个Bug；还是昂首挺胸，说就是那么设计的功能？这！不光是你的态度问题，还决定了事情的走向。与其战战兢兢地怕出了Bug惹女朋友生气，不如思考如何霸气回应她的Diss，把自己的所作所为描述成你精心设的结果，前提是要有理有据。来，跟我一起说：世界上本没有Bug，只要你放下舔犬的自卑，迎难而上，用顶层架构者的语气反击所有指出你问题的人。你收获的不仅仅是他人的尊敬，更是没有年终奖的清心寡欲和被逐出公司的人生自由，以及孑然一身远离女色的开悟人生。加油，你行的。
Bug是如何产生的？,['最好可以通俗的解释一下！'],Sithferia,通俗易懂。
Bug是如何产生的？,['最好可以通俗的解释一下！'],浪里小白浪,程序员转行后，准备开一家咖啡店经过精密的设计、采购、装修后，程序员觉得不错，决定试运营，请一个测试来喝咖啡测试走进了咖啡店，点了一杯卡布奇诺，然后拿着咖啡高高兴兴的走了……测试走进了咖啡店，点了一杯美式，然后拿着咖啡高高兴兴的走了……测试走进了咖啡店，点了一桶焦糖拿铁，然后扛着咖啡桶高高兴兴的走了……测试走进了咖啡店，点了一箱五粮液，然后拎着五粮液高高兴兴的走了……测试走进了咖啡店，点了一只拉布拉多，然后牵着拉布拉多高高兴兴的走了……测试走进了咖啡店，点了一个老婆，然后抱着老婆高高兴兴的走了……程序员对这一天的试运营很满意，于是第二天正式开业开业当天，一个顾客走进咖啡店，问“洗手间在哪？”然后咖啡店炸了
Bug是如何产生的？,['最好可以通俗的解释一下！'],方一,洗衣机厂家，打死也没想到，自己的产品总出问题，原来他们拿它洗土豆
Bug是如何产生的？,['最好可以通俗的解释一下！'],爱吃烤地瓜,说一个DNF里面比较经典的bug1/史诗级装备因为属性强悍是不允许交易的2/死亡之塔内不允许任何物品进行交易这两个条件合并起来你能猜到会触发什么bug吗？没错！我亲眼见过有人在死亡之塔里面交易史诗装备，嗯~双重否定表示肯定~没毛病！
Bug是如何产生的？,['最好可以通俗的解释一下！'],daijun211,"刚修复了一个BUG,给老板演示的时候"
Bug是如何产生的？,['最好可以通俗的解释一下！'],匿名用户,一个测试工程师走进一家酒吧，要了一杯啤酒；一个测试工程师走进一家酒吧，要了一杯咖啡；一个测试工程师走进一家酒吧，要了0.7杯啤酒；一个测试工程师走进一家酒吧，要了-1杯啤酒；一个测试工程师走进一家酒吧，要了2^32杯啤酒；一个测试工程师走进一家酒吧，要了一杯洗脚水；一个测试工程师走进一家酒吧，要了一杯蜥蜴；一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@；一个走进一家酒吧，什么也没要；一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来；一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿；一个测试工程师走进一家酒吧，要了一杯烫烫烫的；一个测试工程师走进一家酒吧，要了NaN杯Null；一个测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶；一个测试工程师把酒吧拆了；一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱；一万个测试工程师在酒吧门外呼啸而过；一个测试工程师走进一家酒吧，要了一杯啤酒';DROP TABLE 酒吧；测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了。网上搬运的
Bug是如何产生的？,['最好可以通俗的解释一下！'],程墨Morgan,假设你是一个厨师，做一个已经做过很多次的菜，应该不会出什么问题，但是对于一个全新的菜谱，难免会有一些考虑不周的地方，所以就会带来一些失误，没关系，反正你多做几次，熟练了，出错的概率还是小一些。然后，有一天你入职了一家叫做『软件行业』的餐馆，在这个餐馆有一个特点，你做的每一个菜，都有一个全新的菜谱，几乎不重样的，这就导致你没一个菜都可能因为考虑不周而失误，一旦做出来的菜有问题，他们就喊『有bug』，看在工资还比较高的份上，你也不去纠结其实只是菜烧糊了为什么说『有虫子』，算了，反正在这家『软件行业』的餐馆里，每个厨师每次都要按照全新的菜谱做菜，大家都会有失误，只是多少的区别，你接受了这个现实。不过，在『软件行业』这个餐馆里，还有一个有趣现象，就是菜谱会改的，每当你看完菜谱，已经开工的时候，会有人说这个菜谱不满足『客户需求』，要改一改，这让你很恼火，因为本来你就要非常小心避免失误，这样改菜谱，就更容易失误了。你很生气，怎么能这么瞎JB搞呢？但是，这是现实，甚至有人在菜出锅前一秒钟把菜谱改了，你又没时间重头再来，要想想怎么才能添加一些佐料或者搞些什么才能满足『客户需求』，这样更容易失误了。你忍无可忍了，你说这TMD什么玩意，改改改改改，为啥总是改?他们呵呵一笑，说，你知足吧，隔壁还有一家『互联网行业』的餐厅，那里的厨师更惨，他们有时候菜都端到客人桌子上了，还会被端回来让你改。你想了想，看在钱的份上，忍了这个世道吧。
Bug是如何产生的？,['最好可以通俗的解释一下！'],奇迹行者,我开发了个订餐系统，金额用double类型，但我没想到，你的交易货币是，甚至还有天地银行。
Bug是如何产生的？,['最好可以通俗的解释一下！'],帝国游侠,"以买杯奶茶为例，普通人（非程序员）只要去买就行了，很简单是吧？确实，对于一个正常人来说，买杯奶茶都是再简单不过的一件事。但是，如果写一段程序，让一个机器人去买那就一点不简单，假设这个机器人没有任何智能化的功能，只能根据预先写好的程序一板一眼的去执行。假设有一段这样的代码：好了，这个叫做""出门()""的函数实际就超级复杂了：有没有点感觉了？是不是觉得这代码特别白痴、特别繁琐，这逻辑要特别严谨，否则搞不好哪里就出毛病了！假设啊，这段呆板的、复杂的代码，经过了严格的测试、修改了n个Bug，终于大功告成、运行了10年都没出问题，然后有个香港商人买了这个机器人、拿到香港去用。这个香港商人就发现，在户外，这个机器人表现得挺好，每次都能把奶茶买回来，但是在室内的时候，有时候能买回来、但有时候却连门都出不去，于是联系内地的程序员，内地程序员跑到香港一看，尼玛香港的一楼其实相当于大陆的二楼，而大陆的一楼在香港叫做ground floor，如果是商场里就是一个“G”或“G层”的标志，难怪机器人死活出不去门——这就是个Bug了。"
Bug是如何产生的？,['最好可以通俗的解释一下！'],十八子,户籍科要求，统计全市户籍中姓“司”的人数。程序员张三开始编程：（为方便非程序员也看懂，我用伪代码吧） 张三运行程序检查完所有的人，计数器读数为3500，于是他向户籍科报告：全市户籍里共有3500人姓“司”。这个程序有bug吗？有！（谁说是计数器未初始化我打谁）这个程序在A城市也许运行正常，在B城市也许就有问题。问题就出在B城市有3个人姓“司马”而不姓“司”，程序把姓“司马”的人也按姓“司”的人来计算了。这就是一个BUG，有时候还暴露不出来，因为它在没有人姓“司马”的小城市统计出的数据是正确的。那么bug是怎么产生的呢？上面的例子就是bug产生的原因之一：程序员的想法不够缜密。当然还有其他原因，我就不一一举例了。
Bug是如何产生的？,['最好可以通俗的解释一下！'],heramerom,营销：为啥用户冲了100到账才80开发：不是你们的要求吗，充值打八折
Bug是如何产生的？,['最好可以通俗的解释一下！'],知行合一,需求方：我们要的功能很简单，就是一个1+1=2就行。开发者：好的，搞定了，你试试。需求方：这个1怎么不能改，我想要2+2怎么办？开发者：你开始也没有说啊，好了，改成动态计算了，你可以输入了需求方：怎么不能输入小数？开发者：怎么又要支持小数了，算了，给你全放开吧，包括负数需求方：哦，差不多了，我现在要计算个原子弹爆炸的方程式，怎么输入？开发者：卒。开发者2：打个补丁就好。需求方：我还要能计算氢弹的爆炸路径。开发者2：【连夜跑路】开发者3：这个得加钱。连夜打补丁。需求方：看起来不错，是点这个按钮吗？程序爆炸了，效果和氢弹爆炸一样……
Bug是如何产生的？,['最好可以通俗的解释一下！'],duoayan,A: 来个煎饼果子，不要香菜B: 来个煎饼果子，不要辣椒C: 来个煎饼果子，不要生菜D: 来个煎饼果子，多个鸡蛋E: 来个煎饼果子，多个香肠F: 来个煎饼果子，不要果子G: 来个煎饼果子，不要煎饼H: 来个煎饼果子，可下崽的综上，所有不同需求，在产生时，开发方没想到的，都会变成程序员的bug
Bug是如何产生的？,['最好可以通俗的解释一下！'],钟华,如图，来源不详，侵删
Bug是如何产生的？,['最好可以通俗的解释一下！'],ze ran,1，一个没有被实现过的系统，事实上是一个不存在的系统。2，一个不存在的系统，没有人能知道其最佳实现是什么。换句话说，面对未知的事物，没有人能在做之前就知道最佳做法。所以都是边做边错，边错边改，最后结果和最初的构想，可能会有很大的不同。大家都做过计划，可能有这么一个体会，越细致，越复杂，精确到小时分钟的计划，越难实现。这不止是执行力的问题，而是由一个事实决定的，你不可能做一件事之前，就知道最合理的做法。所以计划订的越详细，错就越多，就越难执行。现在让你的计划复杂一千倍，每一个执行细节都写出来，每一种可能的情况都要处理，生病怎么办，下雨怎么办，出差怎么办，和男朋友吵架心情不好怎么办，遇到更紧急的事怎么办。然后去执行，执行到某个点，你会发现不知道该怎么办了，比如出差的时候生病，又和男朋友吵架，计划上没说怎么办，就执行不了了。执行不了，就说明你的计划有了bug。把人换成电脑，计划就是代码，多个计划塞到一起，就是系统，随着时间推移，往里面塞越来越多的计划，并祈祷都还能运行，这就是系统升级。当祈祷不顶用的时候，就是bug。
将 bug 译作「蚆蛒」，将 debug 译作「揥蚆蛒」，音译兼意译，是不是很巧妙？,"['因为 bug 和 debug 已经属于 IT 领域专有名词，错误和除错这种词义宽泛的词语不足以准确描述其特指软件相关的含义，中文译名也「专有」一下未必…', '显示全部 ', '\u200b']",王狄,翻译得挺好这仨字光看着就能感受到一股腥膻咸湿的克苏鲁气息，很是能准确复现debug时的精神状态下次别翻译了
将 bug 译作「蚆蛒」，将 debug 译作「揥蚆蛒」，音译兼意译，是不是很巧妙？,"['因为 bug 和 debug 已经属于 IT 领域专有名词，错误和除错这种词义宽泛的词语不足以准确描述其特指软件相关的含义，中文译名也「专有」一下未必…', '显示全部 ', '\u200b']",一颗脑洞豆,我觉得不如叫 涤悖格涤 洗涤，去掉悖 不合理，冲突，错误格 格式，标准，规范，结构段落悖格 谐音bug，导致错误，冲突或不合理的代码结构。我觉得比你编的那个更加复合翻译的三要素，信达雅。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],朱卫军,最近做了个Python办公自动化的Live讲座，里面对技术讲得更加详细大家有什么编程或者求职的问题可以在值乎向我提问哈
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],Python实用宝典,能写的东西可太多了，：比如哄哄女朋友：，备用地址：向手机发送通知：，备用地址：文献搜索工具：，备用地址:制作日历：检测人脸是否佩戴口罩：，备用地址：打水印：提取音乐高潮：，备用地址：树莓派+：、+摄像头：更多有趣的Python教程欢迎关注公众号：Python实用宝典或者访问网站：
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],俗不可耐,我们家娃喜欢看电视，一看就没够，为了让她在看电视的时候做点儿有意义的事情，我用python做了一个小程序，叫bear_kids_player. 说起来也简单，就是在播放视频的时候每隔一段时间弹出一个对话框，里面有一个问题，让孩子输入。答对了对话框就销毁，然后视频就接着播放；答不对，对话框就一直在那里，视频停止。最初的设定只是让孩子输入字母或者做做加法，后来加了一点改进，目前可以显示图片，并且自动朗读显示的单词。具体安装只要用pip install bear_kids_player 就可以。安装结束以后，用如下命令可以启动：ctrl+o 可以打开视频ctrl +F2 可以关闭视频在 .../bear_kids_player 文件加下有一个config.csv 文件，可以对一些参数进行设定比如：Intervals(间隔时间)， 打开文件的快捷方式，关闭文件的快捷方式，题库筛选的阈值，题库筛选所需的类型另外还有一个questions.csv 文件，这是一个题库。这个题库可以自己输入题目，答案，类型，以及想要显示在对话框里的图片链接，可以依据个人的情况自己添加题目。下面是一个简单的演示当然由于朗读功能使用的是gtts实际上链接google获取音频的，所以在国内可能朗读功能会不那么好用。不过本来也就给自己娃写的程序，倒是也没指望推广。python的主程序用的，总共用了我大概一周业余时间完成，由于对一些库以及发布python包不是很熟悉所以浪费了很多时间。此外，视频解码程序是K-Lite_Codec_Pack_1526_Basic（17MB），可以从下载到，需要安装解码程序才能对常见的视频格式进行支持。家里的娃娃三岁半，原本小写字母认不熟，许多字母会搞混譬如p，q，g，d，b，还有一些小写字母认不出，教了无数遍都不上心学。自从使用了这个程序大概三天左右，小写字母都差不多认识了。增加了单词输入题目以后，娃娃只用了两天就可以不依赖我的帮助，自己把我事先设定的10个单词准确输入了。我们家娃从来没接触过键盘，有这个成绩我还比较满意。后面可能会做些升级，比如要求娃朗读，然后用pyttsx库做语音识别输入；或者去掉她输入熟练的单词的显示，让她依据读音输入单词。或者换些加减法等数学问题。总之慢慢添加新功能。程序没有很认真地注释，距离工业级水平相差甚远，目前就是东拼西凑 能用就行的状态，不喜勿喷。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],黑马程序员,当然，如果你想自己做一些事情，比如爬一下喜欢的图片，爬某个网站，或者是抢火车票都可以，下面我们就来说说具体的！配套资料： ：i1or 配套资料：   提取码：9epq配套资料：  提取码：yem6 配套资料： 提取码：edrg 配套资料：  提取码：6arw 配套资料：  提取码：quha 更多Python用途（想学习哪个可以直接私信我获取哦）：关于Python的学习，可以看Python入门教程完整版，600集让你轻松入门Python！配套资料： 提取码：gqly
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],Dandelion,2020年03月29日-更新：有不少小伙伴私信我学习python的方法。我简单回复一下。入门推荐：1、的python网站。讲的很基础，很适合初学者入手。2、有了基础后推荐做一些小项目。使用python做个表格，自动处理数据。或者参考我这篇文章做个爬虫。在这个过程中肯定会遇到很多的问题，这也正是提升自己的最好方式。3、假如你是程序yuan或者科班学生，那么更推荐你刷LeetCode。选择python答题。双管齐下，效果更佳。4、最后的最后，推荐一款我最近在用的学习辅助工具。它的优势在于：    复杂+理论——生动+理解+样例+练习+纠错。主要专门对计算机考试，但是并非是刷题，而是重在理解    零基础——深入进阶，对小白友好，对基础不好比较友好～。有学习群、助教全程陪伴学习，疑问可以在线解答，可以反复与大师沟通经验。    感兴趣的同学可以关注【夜曲编程】，后台回复【免费教程】开启白嫖之路。    有什么python下载问题，和库的安装、删除的问题都可以找夜曲编程的人员问问，就不用花精力捣鼓下载python，学习python的过程会更加方便。-------------------------------------------- 我是分割线 -------------------------------------------我来更新一波，最近又学了些骚操作，那就是查阅网上的图片，更进一步来说可以瞻仰漂亮小姐姐的图片。有时候当你浏览这么一个话题时。想要一次性全部下载图片，作为珍藏，但是总不能手动一张张保存吧，这时候就要祭出时代的翘楚，乱世之英雄了。此代码，直接在cmd中能跑起来，自动在当前目录创建一个文件夹存放图片。    这部分下次更新，我要去睡觉了。看了各位dalao的回答，又增长不少知识。心中不禁感叹！我当初学习Python的目的很简单，。我的工种是，按理说与Python八竿子打不着，但实际恰恰相反。我学习的背景为，我负责开发的设备每天都会产生大量的日志，而通过日志数据可分析bug。以前都是人工统计，就是一个一个的数，看的头昏眼胀，数据量小的时候勉勉强强还行。但数据量大了之后就凉凉。所以我学习的目标就非常明确了。所以我建议题主带有目标的学习，就不会出现不知道该如何练习这类型的困惑了。好了，啰啰嗦嗦又讲了一大堆。那么问题抽象出来，如何从大量的数据文件中寻找制定的内容呢？一、实现思路：二、代码实现。（为了更有说服力，那就贴一下我的代码，仅供参考）以上为代码实现！（话说知乎的编辑为什么没有代码类型文本的编辑呢）
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],数据不会说谎,如果你还没有开始使用Python，答应我，把这个回答看完，如果你真的学习并深入使用过Python，我想你一定会爱上他，并且对于Python的未来充满期待。对于Python而言，不光是简洁的语法，它广泛的应用场景，完善的语言生态，丰富的库，都吸引着我不断地探索，接下来，我分两个方向和大家聊一聊 Python在各个领域中的降龙伏虎之能，不要走开，我们一起探索一下。可能几年之前，说到数据分析，你并不会想到Python，但不知从什么时候开始，数据分析师的简历上，Python已经成了最亮眼的加分项。各种数据分析框架的出现，让Python这种本就极其简单的语言更加方便易用，让数据分析师可以将更多的经历放在数据本身。而后随之而来的各种数据可视化框架，也让数据分析工作不再需要切换不同的语言不同的软件，将所有的工作集中交给Python，他都可以用最简单便捷的方式帮你完成。话说数据分析是当下一个非常热门的方向，如果你想学习的话，可以学习知乎推出的官方课程，曾几何时，讲到科学计算，我们想到的就是几个头发花白的老教授在实验室里不停的计算，但如今，我们每个人都可以站在巨人的肩膀上进行科学计算，这个巨人就是丰富的科学计算库，我们只需要几行或者十几行代码就可以做到数据的预测，评估，图像的判别，修复，路线的规划，修改等，随着近几年Facebook，Google，百度等大厂的加入，Python在科学计算方向的地位水涨创高，现在已经成为数据挖掘，机器学习，人工智能等的第一编程语言，相信过不了多久，可能我们人人都是数据科学家吧。大数据现在可是风口，不亚于10年左右的移动互联，怎么能少了Python的身影呢！近几年Python你在大数据领域的发展也是风生水起，虽然无论是实时还是离线计算，Python你的性能都是远不如Scala与Java的，但是Python的易用性，以及丰富的库，大大提高了大数据开发者的工作效率，同时，Python能够更好的兼容各种，让大数据的开发从根本上规避了各种复杂的技术问题，摆在我们面签的更多是业务，程序员的个人能力被各种框架无限放大，知道项目上线前的一刻，你可能还不知道自己原来如此优秀。通常，脚本编写是指编写小程序以让简单任务自动化。从简单的定时开机关机，批量修改删除文件，到复杂的游戏外挂，自动抢票，整点自动秒杀，再到企业级的定时任务脚本，自动化运维，自动化测试等等都是脚本的应用，简单的开发过程，以及强大的功能，让Python可以在脚本编写领域和Shell有一较高下之力。说道Python就不得不说说爬虫，很多人了解Python都是从爬虫开始的， 至于为什么，我只能说，贴近生活，简单高效，既可以解决工作，生活中的数据需求，又可以做些私活赚点外快，何乐而不为呢？很多人都认为Web方向是Java的赛道，没错，现在市场上90%的web服务还是java实现的，但是由于Python服务的简单高效以及完美的扩展性，让技术门槛变得非常低，几行代码就可以制作一个简易的Web服务器，现在有多少大学生的第一个博客项目就是Python编写的呢？对于嵌入式应用，我不在行，但是我知道Python可以配合Rasberry Pi工作。它在那些硬件发烧友中非常流行。您可以用来开发游戏，但是，它不是最流行的游戏引擎。如果把游戏作为兴趣爱好，您可以用它来构建项目，但是，如果您真的要做游戏开发，我个人不建议选择它。相反，我推荐您用Unity的C#脚本，它是最流行的游戏引擎之一。它允许您在很多平台上构建游戏，这些平台包括：Mac、Windows、iOS和安卓。您可以用Python的Tkinter来开发，但是它似乎不是最流行的选择。相反，用Java、C#和C++等语言开发桌面应用看起来更流行。最近，一些公司也已经开始使用JavaScript来创建桌面应用程序了。比如，Slack的桌面应用程序是用Electron来构建的。它允许您用JavaScript来构建桌面应用。就我个人来说，如果我要构建一个桌面应用，我会用JavaScript。它允许您复用Web版本的某些代码（如果有的话）。当然，Python的能量不仅仅如此！！！我们一起期待Python带给我们的其他震撼吧。希望我的解答可以对大家有所帮助，也欢迎大家随时补充交流。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],SeaTable,“学 Python 都用来干嘛的？”看了一些小伙伴们的回答，已经列举了很多应用。那么这里再为大家补充一款同样免费、好用，而且更加灵活的 Python 应用工具，那就是： 表格，它同时结合了的易用性和数据库强大的数据处理能力，支持“文件”、“图片”、“单/多选”、“协作人”、“公式”等丰富的数据类型，能帮我们用表格的形式来方便地组织和管理各类信息，和专门的软件系统一样强大。它还可以按照需要进行扩展，实现数据处理的自动化和业务流程的自动化。它自带数据收集表、 Python 脚本、JavaScript、API 、可视化插件、数据处理、BI高级统计分析、自动化规则等功能。其中在 Python 方面，就提供了完善的 Python API，我们用它可以快速地开发出自定义数据处理流程，可以基于表格快速实现各种 IT 小应用、工作流程，甚至业务系统等。再具体点来说，在 SeaTable 表格中，我们可以上传 Python 脚本到到平台，可以把脚本和数据放在一个地方进行管理，不需要再单独找一个服务器。同时，可以在表格中根据不同的需要存储多个 Python ， 一键点击运行或通过设置自动运行就可以达到我们想要的效果。而且，相比于传统的 Excel 表格， SeaTable 表格支持单表千万级数据，同时提供 SQL 查询接口等。为 Python 应用提供了完善的功能支撑。另外，它支持免费私有化部署，可以用 Docker 方式，简单易维护。用 Python 从维基百科中抓取往届举办冬奥会的城市数据， 然后自动填入到 SeaTable 表格中，并用 SeaTable 表格的可视化插件自动生成城市地图、城市图库。比如我们团队平时管理的站点就有20多个，全部使用的是免费的 Lets' encrypt 证书，并通过脚本在证书过期前自动更新证书。偶尔会出现脚本没有配置对或其他的原因导致证书没有正常更新，尤其是对新部署的站点。这就需要制作一个应用来解决这类的问题。比如用 SeaTable 表格做了一个股票池，将股票名称、代码、相关文件资料等信息都记录到了一起，并且增加了一个“股价更新”脚本，通过代码调用网上的股价数据，一键点击就可以自动更新股价，甚至还可以设置每天自动更新等。这样，查询和管理自己的股票信息就变得更简单方便了，而不用每次必须登录证券交易软件来查询。比如在本案例中，本活动的打卡规则是：参与者须连续9天，每天打卡一次，并且打卡时间是在16点至22点前。如符合规则，那么活动结束后，我们会如数返还之前缴纳的费用。因此，我们会按打卡规则编写脚本代码。利用编写好的脚本筛选掉不符合打卡时间的打卡者。下方这个视图中的“标记”列，就是用来自动标记通过脚本筛选出的不符合打卡时间的打卡者。完成上一步后，我们在下方的视图表上，点击右上角的“脚本”，将编写好的脚本代码粘贴或者导入进去。然后就可以点击运行脚本了。脚本会对「标记筛选视图」 里的汇总数据自动进行如下处理：运行脚本后，如下图：后面一步更简单，用统计功能统计出连续打卡9天及以上者即可。本案例如下：比如，从考勤机中导出来的打卡记录，存在每人每天的具体上下班打卡时间都在一列里，也存在着每人每天有多次打卡时间的记录。那么我们用脚本就可以从表中获取每人每天的最早打卡时间作为上班打卡时间，获取最晚打卡时间作为下班时间。并且把每人每天的最早打卡时间、最晚打卡时间统计到一行，这样就十分清楚了。“按钮”是 SeaTable 表格的一种交互式字段类型，在用了“按钮”列类型的单元格中，通过点击按钮或自动化触发，就可以执行指定的动作，自动完成一些数据处理和工作流程。这些动作包括但不限于：运行脚本、发送邮件、发送企业微信消息、将行复制到另一个表、修改行等。限于篇幅，本回答就介绍这么多，SeaTable 表格功能丰富，使用灵活，我们可以配合使用，快速打造出自己的应用。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],蓝桥云课,先来看看，大佬都用Python干啥。还有人用 Python 来买房。实验楼上面好多 Python 项目，真的是可以做很多事情，下面一起来看看！通过 Python 数据分析和算法，实现【苹果公司股票分析、实验楼课程数据统计、用户情绪分析、潜在客户分析】等项目：使用 Python 的 Flask 框架和 VueJS，通过两个实战项目留言板项目和论坛应用的练习，掌握 Flask + VueJS 进行 Web 开发的能力。利用 Python 异步特性实现系统，一步一步地将构建索引、索引压缩、等环节编码实现，最后利用异步 web 框架 sanic 构建后端实现一个完整的站点。实现一个 Redis 服务器监控工具，第一部分实现了 Redis 服务器管理和监控信息获取的 API ；第二部分创建一个用户系统接入微信公众号平台。借助这个项目我们可以进一步学习 Web 开发中的一些知识。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],Rocky0429,我们在做技术方案的时候，系统架构图是必不可少的。轻松用 Python 快速绘制出一份精美且清晰的架构图，省去拖拽调整连线的步骤，让你分分钟上手。用 Python 做个陪着自己玩的聊天机器人，多有意思啊，想和它聊啥就聊啥，也不会烦。爱动弹了，就再升升级，搞个群聊、私聊的~用 Python 模拟手写体汉字，基于 Python 的 PIL 就可开发实现。将图片转化成各种较小图块拼接成的图像工具。马赛克风格的图片转化工具，支持自定义拼接图案和符号。工具实用方便、代码简单易懂，适合对图像感兴趣的小伙伴学习和上手。Python 强大的模块系统，可以高效的完成办公自动化的操作，轻而易举实现 Excel 自动化、Word 自动化、PPT 自动化。比如：比如：比如比如：Python 写的微博爬虫，命令行直接启动。可以连续爬取或新浪微博用户的数据，并将结果信息写入或。写入信息几乎包括用户微博的所有数据，包括和两大类。支持获取微博用户、内容字段丰富。以后去掉背景图，把自己从图片里抠出来，咱谁也不求，Python 就能办！不光抠图，剪视频咱 Python 也行，不只是单个剪，批量处理也么的问题！只需两步，就能用 Python 做自己的专属二维码！
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],白露未晞me,哈哈哈哈哈，我来说我来说！！！（收藏的时候记得点个赞呀~）python可以写很多好玩的东西呀，本回答包括：所有源代码都可以在这找到，里面现在有20多个小游戏：：随便举几个例子吧。效果：介绍：效果：介绍：等等。这里还有个姊妹项目：主要是设计一些AI算法来自动玩小游戏的：例如：等等因为爬很多网站都需要先对网站进行模拟登录，然后才能获取到数据，所以自己写了个简单的模拟登录库，名字叫DecryptLogin。项目地址： （欢迎给个stars呀~）项目开源文档：你只需要pip安装这个库：然后就可以简单地实现很多网站的模拟登录操作啦，例如模拟登录知乎(需要手动输入验证码)：如果你不想手动输入验证码，可以自己写个验证码接口函数：(PS：楼主也正在筹备为这个库搞个hackcaptcha库，专门解决登录过程中的验证码问题，项目地址：项目还在开发中，弄好了再详细介绍吧...)言归正传，DecryptLogin库的项目地址里还有很多和模拟登录相关的有趣的爬虫小案例：可以供新手学习爬虫使用，例如：项目地址：项目文档：写这个包的主要动机是我想用做个声控音乐播放器。你只需要pip安装该库：然后写几行代码就可以快速实现一个音乐下载器啦：运行效果如下：更详细的介绍你可以自己查看项目文档，各种接口调用起来还是很方便的。毕竟我自己也要拿来玩耍。()知乎上的表情包其实挺多的：抓到的表情包还可以用来拼图玩T_T：等等。所有都可以在这找到：里面的内容包括：举几个例子吧。效果截图：介绍：效果截图：介绍：效果截图：介绍：等等。效果：介绍：代码：效果：介绍：代码：效果：介绍：代码：效果：介绍：代码：等等。更多有趣好玩的python应用，欢迎关注我的微信公众号：很多小伙伴反应Github里python发送邮件来控制电脑的案例使用起来不太方便，时间太久了，我也忘了当时怎么构思的，不过授人以鱼不如授人以渔，最近我看到一个不错的批量发送邮件的课程，十分不错：是夜曲编程出品的“python入门课程”中的一个小案例，里面还有很多其他有趣的python实战小例子，可供新手学习完之后巩固自己的知识。学习完之后你就可以根据自己的需求自己设计一个用邮件远程控制自己电脑的代码啦～另外，为了帮助不自觉的小伙伴更加主动地学习相关的课程，夜曲编程还独家推出了课程奖励机制，完成学习挑战的小伙伴即可获得夜曲编程提供的一些奖品，例如蓝牙键盘和夜曲独家知识卡片等等。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],七月在线 七仔,还能一键扣图，让开淘宝店的设计师下岗，在一旁痛哭流涕……再也不用担心工作忙，没法经常和她/他/它聊天了。可以实时知道女友的情感情绪指数，再也不用担心女友莫名其妙生气了。还能顺道教女朋友学英语（女朋友一定很惊喜）为了方便快速开发，我们使用python中的wxpy模块完成微信的基本操作。首先，我们设置一个config.ini，并从这个配置文件开始读取信息。这些参数一看就懂，所以无需多言。设置完相关参数以后，我们再来学习一下，如何每天教女友学英语：如果你愿意，可以在上面对时间的判断中，加入一些其他你想要的，这样你女友就更开心啦！后期如果有时间，我将会加上以上节日问候功能。接着，开启微信机器人，为了程序的健壮性，自动判断一下操作系统，根据不同操作系统执行不同指令：只有每天的问候和节日问候是仅仅不够的，我们必须时刻知道她的情绪指数，这里可以使用snowNlp或者jieba来做分析，但是为了能够在打包成exe可执行文件时使得程序尽可能小，我们采取直接调用接口的方式来做。代码如下：教完女友学英语后，开始把我们的关心语发给她。这里涉及到wxpy模块的相关操作，很简单，看我的例子就会了：最后，就是如何每天定时发关心语给女友的问题了。首先来个while循环，365天无限关心最后，输入以下代码开始守护女友模式吧~至于没有女朋友的……要不考虑一下它这张逼死淘宝专业抠图店家的照片，用3行Python代码，花5秒就能超高精度抠图。这里的 API 接口来源于 Remove.bg 网站，一个邮箱账号可以申请一个免费接口，可处理 50 张照片，如果想处理更多或者生成高清照片，需要买套餐，算下来价格大概是 。上淘宝搜索「」的店铺，发现多数店铺收费是 ，觉得利用好价格差空间，应该有商机。接着比较感兴趣淘宝店家是怎么抠图的，抠图的质量如何，于是选择了排名前两位的店家来做测试，跟掌柜开始了一段「」聊天。先找了第一家店主，店主上来就说先发照片，抠图满意再付款，于是就发了文章开头那张比较难抠的一张，想看看他们水平怎么样：没想到店主这一抠就是二十分钟。。。满心期待地打开图片一看，头发丝抠的不好，照片色彩也变了：跟第二家店掌柜聊了后，也是花了 16 分钟弄好，比第一家稍好一点：把三幅图一对比，从头发丝抠的效果和照片的色彩还原度就可以看出还是 AI 效果最好，而且只需要 5 秒钟。于是，大致可以总结心疼掌柜，花了 20 分钟还没有拿下我这一单……这么难抠的图 AI 工具效果都好，那简单的证件照应该更没问题，基本确定有商机。接下来用 Python 把上面的代码进行完善打包成 exe 文件执行。轻松实现这样的功能：（常见的白、蓝、红三种颜色），。效果如下：具体实现很简单，第一步输入 API，第二步输入图片所在文件夹，接着程序就会先抠图，生成带透明背景的 PNG 格式图形。  接下来第三步利用 PIL 库来设置图片的背景颜色，键入一个字母就可以秒生成对应的背景色证件照。这样就做成了一个简单的证件照更换工具，拿去开个淘宝店和抠图的设计师抢饭吃没有压力……估计打死店主也都想不到让自己下岗的是几行代码……效率还是自己的N倍……此工具可关注公众号“七月在线实验室”后，发“证件照”获取。↓↓《名企AI⾯试100题》涵盖，每⼀段代码、每⼀道题⽬的解析都经过了反复审查或review。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],地球的外星人君,"不知道别人，我最开始学Python纯粹是出于兴趣。只有兴趣使然的Pythoner，才能真正付出足够的时间和精力，每天100行代码、100分钟视频、100页书，坚持锻炼自己的技能，最后成长。网红和明星越来越像，发作了？别怕，写个程序帮你认人就行了用Python来玩一把充气娃娃“云测评”。。。没时间解释了，快上车！借钱出去的时候，要不要先看一下借款人的信用？去看一下信用黑名单吧，要是借款人名字高挂，这钱还是不借了吧案例里是将结果输出到txt的，大家也可以尝试讲这些转成pdf或者输出到其他更方便查询的地方~每周都要发周报，烦死了。照着这个教程做一篇，以后统统全自动发送，爽不爽？上面这些小项目能不能激发起你的兴趣？如果你有了兴趣，那我们就要谈更深入的问题：当以职业为目标的时候，所需要的技能深度比单纯的兴趣所致要高得多。Python的方向太多，所需要的能力也太多，所以接下来我就简单给大家做一个罗列：Web一直是Python爱好者就业的一个大方向，学习资料也比较全，岗位数量相对来说比较多。Python的优势在于编程效率，这一点上强无敌。但是受限于特性和使用者的水平，面对一些比较大的工程可能就没有那么得心应手。想要从事Web方向所需要的能力：HTTP协议、HTML5&CSS、Web前端基础、jQueryWeb前端、 ES6Web前端高级、React-web框架、后台数据库开发、Python框架 Django、Python框架-Flask这一方向目前来说是入行最快的方向，除了爬虫岗位多用的Requests、Scrapy还是比较简单的，也会涉及到分布式和数据库的一些基础知识。想要从事方向所需要的能力：浏览器调试、数据分析与性能调优、消息中间件、数据存储与redis数据库编程、、Selenium与 PhantomJS开发、常用爬虫框架Scrapy与平台数据分析是一直是Python的强项，数据分析三大库放眼整个数据科学领域也是最优秀的存在。数据分析岗位目前是也比较火热，现在开始学习算是不错的时机。从事数据方向需要从事的能力：数值计算Numpy、数据可视化Matplotlib、数据分析Pandas、数据规整、数据清洗、数据合并、文本分析、数据挖掘、Python的自动化方向岗位也是比较多，但是这一领域的出彩更多是源于Python本身的学习难度低成本低。现在运维领域比较热的概念DevOps更多也要依托于Python。一般来说，DevOps一般会要求具备相应的运维基础能力，收入也会更高，所以如果有运维行业的同学可以考虑这个方向。从事自动化需要具备的能力：Python自动化、任务调度系统、任务流程系统、CMDB资产管理、web 可视化、JumpServer、k8s容器化、Go语言编程我个人非常不建议大家从事这个方向。AI岗位工资高的超出想象，但是从业门槛也超出想象，确实能年薪五十万，但要求是985甚至清北学历，有些甚至要博士学位。希望大家不要被无良培训机构忽悠，花个几万块钱是小事，浪费掉的时间比那些钱更宝贵。从事所需要的能力：机器学习库scikit-learn,、常见机器学习算法kNN、SVM、决策树、随枳森林，、深度学习Tensorflow,线性回归，。我制作了一个表格，将以上提到的五种方向，从学习难度、入门门槛、回报系数三个方面来评分，当然其中有我的个人倾向，各位可以做个参考：最后，如果你看完这篇文章也想成为一名Python使用者，不妨看一下我花一个月时间整理的Python入门教程："
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],Gitee,Gitee 小编不请自来回答这个问题，Gitee 上的优质 Python 开源项目用来练手再好不过了。下面推荐几个 Gitee 上口碑不错的 Python 开源项目，涵盖金融、爬虫、人工智能、DevOps 等各个方面，希望能对大家有帮助：）walle  让用户代码发布终于可以不只能选择   ！支持各种web代码发布，php、java、python、go等代码的发布、回滚可以通过web来一键完成。walle   一个可自由配置项目，更人性化，高颜值，支持git、多用户、多语言、多项目、多环境同时部署的开源上线部署系统。：DFace 是个开源的深度学习人脸检测和人脸识别系统。所有功能都采用　　框架开发。pytorch是一个由facebook开发的深度学习框架，它包含了一些比较有趣的高级特性，例如，动态构图等。DFace天然的继承了这些优点，使得它的训练过程可以更加简单方便，并且实现的代码可以更加清晰易懂。  DFace可以利用CUDA来支持GPU加速模式。我们建议尝试linux GPU这种模式，它几乎可以实现实时的效果。 ：通过实战项目练习解决一般爬虫中遇到的问题。实战多种网站、电商数据爬虫。包含：淘宝商品、、大众点评、招聘网站、闲鱼、阿里任务、scrapy、微博、百度贴吧、豆瓣电影、、全景网、豆瓣音乐、某省药监局、搜狐新闻、机器学习文本采集、fofa资产采集、汽车之家、、百度关键词收录数、蜘蛛泛目录、今日头条、豆瓣影评️️️。项目地址：蚁阅 - 让 RSS 更好用，轻松订阅你喜欢的博客和资讯，项目特点：项目地址：从数据爬取-清洗存储-分析回测-可视化-交易复盘的本地一站式解决方案。项目地址：体验  有序规划和管理软件研发全流程关注码云微信公众号：giteecom发现更多优质开源项目：
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],蜗牛学苑,很多人跟你一样，只管闷头学，却不知道为什么去学，往往的理由是：“简单啊”、“收入高啊”、“人生苦短，我用Python”，好吧，那我这里简述下学了Python可以干嘛。当然是为了赚钱啊，哈哈！服务器端编程，具有丰富的Web开发框架，如Django和TurboGears，快速完成一个网站的开发和Web服务。典型如国内的豆瓣、等，国外的Google、Dropbox等。在运维的工作中，有大量重复性工作的地方，并需要做管理系统、监控系统、发布系统等，将工作自动化起来，提高工作效率，这样的场景Python是一门非常合适的语言。Python被广泛的运用于科学和数字计算中，例如生物信息学、物理、建筑、、图像可视化分析、生命科学等，常用numpy、SciPy、Biopython、SunPy等。Python有很好的3D渲染库和游戏开发框架，有很多使用Python开发的游戏，如迪斯尼、黑暗之刃。Python可编写桌面，还可以扩展微软的Windows，常用Tk、GTK+、PyQt、win32等。除了网络和互联网的支持，Python还提供了对底层网络的支持，有易于使用的Socket接口和一个异步的网络编程框架Twisted Python。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],小布丁,用python爬取了“学python都用来干嘛”下的部分有趣回答来回答这个问题。（如有侵权，请告知我删掉= =）（为了爬虫而强行爬虫，其实根本就不用爬虫的= =）小白一枚，我是真的菜。我抄别人代码用python做过的事情：1、抢课脚本（我尝试了非常久，卡在验证码登录长达几个月，最后成功了不过还是很简陋）2、做简易网站。3、爬图片。4、爬。5、批量修改后缀名。6、做小游戏，像飞机大战，坦克大战，塔防小游戏，主要用pygame模块。7、爬有道翻译。8、爬知乎以下是爬取内容（手动狗头）：1、 用 Python 实现人脸识别2、去除爱情动作片中的马赛克和衣服3、 网信贷黑名单数据爬取4、自动发送周报邮件给老板5、快速完成一个网站的开发和Web服务6、3D游戏开发7、预测交通事故8、不要沉谜于写所谓的“爬虫“，还有法律风险，慎重！9、哄哄女朋友，导出微信聊天记录并生成词云向手机发送通知10、做（沙雕）聊天机器人11、自动抓取所有好友的头像，最后拼成了一张大图12、一键扣图13、自动爬取海贼王漫画14、京东/淘宝价格监控，每次关注的商品降到目标价以下就发个短信提醒15、监控一个加油站的油价16、用做了个小车，用python实现了基本的控制功能17、实现二维码生成和识别18、做了一个专门看电视的个人网站，不用担心什么VIP/平台/广告/找片/下载，跳过片头片尾19、破解观看只面向校内IP开放的视频20、获取研究生系统全部学生姓名、学号、选课信息21、扫描研究生系统上的弱密码用户基于上面获得的选课学生学号，获得身份证号码等重要信息22、模拟登录图书馆并自动续借23、网易云音乐批量下载24、批量下载读者杂志某一期的全部文章25、爬取了当前比较火的游戏壁纸26、爬取餐饮商家的信息27、爬当当网各分类所有五星图书28、网页开发29、实现了主播开播的全员提醒，以及直播画面截图并发进群里30、批量解决数学作业31、ROS系统32、扒同行的文章来伪原创
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],与地球重修旧好,，从我个人经历来讲，我建议新手们先别收集那么多其余资料，收集不等于内化为你自己的知识，想当初我也是收藏一大堆但是最后还是留着吃灰还占内存，不如就别再给收藏夹添加垫底资料了，，辅助自己又快又好地完成读取和录入的工作。当然，Python能做的还有太多太多了，，骚操作真的太多了，但前提是你得学会爬虫去爬取这些信息！下面答主分享一下爬虫的整个过程：爬虫的工作原理即：首先最基础的一步就是学习如何利用一个强大的库——来获取数据。为什么要了解HTML呢？因为爬虫就是通过编程向网络服务器请求数据（HTML表单），然后解析HTML，提取出自己想要的数据。这部分只需要达到读懂和修改HTML文档的水平即可。学会安装并使用第三方工具（BeautifulSoup）来解析和提取网页中的数据。 爬取到的信息要存储下来才能看，这里就要学习2种常用的数据存储方式：存储成csv格式文件、存储成Excel文件。如果想进阶的话，可以继续学习MySQL和MongoDB这两个库，它们一个是的典型代表，一个是非关系型数据库的典型代表，用于应对十分巨大的数据量 。不过这里需要去接触另一种语言SQL。)通过Scrapy实现，解决爬取效率问题。不过这相当于是一个打怪升级的过程，先把前面的掌握了后面用起来才能得心应手！至此，你就完成了爬虫的简单入门。把大目标被拆分成小目标，循序渐进，由浅入深，按照上面这个学习路径学下来，你会发现Python的学习只要你坚持，还是比较非常顺利的，同时基础知识也会掌握的很扎实。现在大家想学编程太方便了，跟着教程满天飞。刚开始入门的时候有高手带，往往能有事半功倍的效果，尤其是自己不知道怎么找资料，怎么去配置什么的时候。有人手把手教的话，。强烈推荐一下这节哦~
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],Felina,"分享一个很优秀且简短的自动化拼写检查器，用Python来完成的，个人觉得挺好玩的，也很有趣。当然，不是由我来搞定的，是来自谷歌Norvig大神的杰作当我们使用谷歌搜索内容的时候，如果你拼错一个单词，网页会提醒你可能的正确拼法，这就是所谓的""拼写检查""（spelling corrector）。谷歌使用的是基于的统计学方法。这种方法的特点就是快，很短的时间内处理大量文本，并且有很高的精确度（90%以上）。效果大概是下面这个样子：当用户输入一个单词的时候，分为了两种情况：所谓的""拼写检查""，从概率论的角度看，就是已知  ，然后在若干个备选方案中，找出可能性最大的那个  ，也就是求式（1）的最大值。 根据可得： 对于所有的备选项C来说，W都是相同的，因此可以将上式简化为： 所以，实际上可以看成是求式（3）的最大值 的含义是，某个正确的词的出现""概率""，它可以用""频率""代替。如果我们有一个足够大的文本库，那么这个文本库中每个单词的出现频率，就相当于它的发生概率。某个词的出现频率越高，  就越大。 的含义是，在试图拼写  的情况下，出现拼写错误  的概率。这需要统计数据的支持，但是为了简化问题，我们假设两个单词在字形上越接近，就有越可能拼错，  就越大。举例来说，相差一个字母的拼法，就比相差两个字母的拼法，发生概率更高。例如，如果你想拼写单词 Serendipity，那么错误拼成 Serendipitu（相差一个字母）的可能性，就比拼成 Serendipituu 要高（相差两个字母）。所以，我们只要找到与输入单词在字形上最相近的那些词，再在其中挑出出现频率最高的一个，就能实现  的最大值。实现代码如下：当然， 工业强度的拼写校正器的完整细节是非常复杂的，不过从这个玩具拼写校正器中，我们也可以学习到一些内容，而且其校正的准确率也是不错的。更多内容可参考： "
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],白人,"之前闲着无聊，想找个项目练练手，这时我看到正在 压着泡面的kindle，嘻嘻就你了，之前一直想在kindle上看漫画，可是想到又得下载资源还得发送到kindle，好麻烦，所以一直没有实现这个愿望，说干就干吧，。首先关于kindle推送的设置，可以参考下面链接设置。kindle是支持 JPEG (.jpeg, .jpg)；PDF (.pdf)等图片格式的。这里不推荐使用图片格式，因为漫画有多页，如果用图片推送的话，你会看到kindle上散乱着一堆的图片。。先整理下思路1，把漫画下载到电脑。2，将下载好的一话漫画（15-19页）转换为一张pdf格式文件3，通过邮件推送到kindle4，定时爬取网站发现漫画更新 立即推送漫画，需要用到的模块挺多的，一共需要这几个模块第一步就是从网上抓取漫画页，具体哪个网站就不说 了，低调因为此网站为静态网页，结构较简单，所以爬取起来比较容易，。这个函数主要为抓取一话里海贼王的所有图片地址，放到pic_list列表里并返回。然后定义一个函数用来下载图片（传入图片地址，文件保存地址）这里是将下载好的图片转化为pdf文件。PDF文件生成完毕后就可以通过smtplib邮件服务来推送漫画了，qq邮箱的服务器为mail_host = """"mail_user =  ""邮箱地址""mail_pass = ""邮箱密码""   # qq邮箱一般需要授权码receivers = [占位]      #  这里填上kindle的亚马逊邮箱地址吗，可填多个接收邮箱红色标记的就是kindle邮箱地址，下面贴上代码到这里主要功能都已写完，目前追到了最新最新951话，952话还没更新需要源码的可到GitHub页面查看下载。GitHub地址："
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],量子位,"Python，大概就是飞一般的感觉。随着的火爆，Python已经连续三年占据IEEE Spectrum2019年度编程语言排行榜榜首。而GitHub上，也经常能看到Python写的非常有趣的个人项目。比如这个曾一日千星的项目：像文字云一样，用各种小图拼出大的图片，构建一个像素风的世界，就像《我的世界》里一样，一定非常有趣。还可以拿来做拼贴画、十字绣等装饰。在这个名为的GitHub里你就可以自动实现这一切，它开源第一天，就涨到了1100星，增长速度肉眼可见。Tiler，意味瓦工，也就是用各种小元素作为“瓦”，搭建出一张大图片。项目预设了不少“瓦”：有乐高、加号、圆形、@符号、心形、乘号、波浪线、横竖条、《我的世界》中的各种格子，以及曲别针形：另外还有一组万圣节主题icon，包括各种南瓜灯、小鬼头、蝙蝠、猫头鹰：这些不同的“瓦”都可以设定大小颜色和角度，以适应不同的画面规格。另外，你还可以设定整个画面中由多少种颜色构成和“瓦片”的大小，也就是马赛克的模糊程度。你可以用不同材质的“瓦片”，拼接出各种图案。比如梵高的《星空》，项目中展示了10×10、25×25、50×50三种圆形拼成的规格： 10×10的《星空》 25×25的《星空》 50×50的《星空》有没有在PS里拖动半径控制条的感觉？你也可以设置让构成图片的“瓦片”大小不一也可以试试拿乐高积木来拼：放大看，斑斓的星空，是这样的：一个个小砖块，布满了乐高积木表面特有的圆形凸起。嗯，要是真有这么大一片乐高，想想就爽歪歪。（此处冲去乐高门店下单，金币-1000）还有乘号版：如果放大，你就会发现，这就是十字绣的图样啊！这么大一副十字绣，色彩艳丽，斑斓交错，一看就可以玩很久，退休老母亲看到两眼发光。就是绣完挂在家里，也和你北欧风/极简风/莫兰迪风/自如风的房间非常搭配，成为全场最吸睛的装饰画。要是木有耐心，可以考虑一个迷你版：还可以做成《我的世界》的样子星空的细节如下：你们能认识这些砖块都是啥么……如果想在自己电脑上运行的话，除了Python 3和，你还需要装OpenCV、numpy和。之后，靠命令行就可以解决了。你需要设置几个参数：在gen_tiles.py中设置：：每个中的分割数量(ex: DEPTH = 4 -> 4 4 4 = 64 colors);：旋转列表，以度为单位，应用在原始图像上(ex: [0, 90])。在tiler.py中设置：：每个颜色通道中的分割数量(ex: COLOR_DEPTH = 4 -> 4 4 4 = 64 colors)；：应用于每个图块的比例(ex: [1, 0.75, 0.5, 0.25])；：移动以创建每个框的像素数(ex: (5,5)); if None, shift will be the same as the tile dimension);；：如果构成图像的“瓦片”可以重叠；：渲染图像；：多处理池大小；：图像到瓦片（如果作为第一个参数传递则忽略）；：瓦片文件夹（如果作为第二个arg传递则忽略）；：结果图像文件名。这个项目的作者ID叫nuno-faria，除了这个Tiler项目之外，他还开源过不少有趣的东西。有一个用Java写的推箱子：像素风满满的桌面足球：还有俄罗斯方块、弹球等许多种，个个都还蛮有意思的~—完— · 追踪AI技术和产品新动态深有感触的朋友，欢迎赞同、关注、分享三连վ'ᴗ' ի ❤"
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],Jackpop,虽然一直被贬低，但是不可否认，Python还是一门非常热门且用处广泛的编程语言，下面就介绍从github上精选的4款由Python开发等小工具。Star：7.5k作为IT/互联网相关的工作人员，哪怕不是开发者，也有可能会和Linux打交道，我们可以用Linux进行开发、运维等，因此，Linux就成为了一项非常重要的个人技能。使用Linux过程中主要打交道的对象就是繁多的Linux命令和选项(options)就成了令人头疼的事情，举一个最为简单的例子，这个Linux命令包含两个部分，command和options，ls是查看命令，-a和-l分别代表：显示所有文件(包括以.开头的隐藏文件)、以列表形式显示。这些常用的我们都知道，但是有很多使用频率较少的怎么办？我们可以借助explainshell。它是一款利用Python开发的Linux命令行工具，通过解析帮助文档，逐个匹配一行Linux命令中不同字符的含义，让你对Linux命令能够一目了然，是一款非常棒的Linux学习工具。Star：14.9kglances就如同它的汉语意思那样，“一眼”、“一瞥”，能够通过一个简单的命令对系统信息一目了然，了如指掌。glances利用Python编写的一个跨平台的监视工具，旨在通过curses或基于Web的界面提供大量监视信息。你不仅可以通过终端命令行使用该工具，还可以web界面、API接口等对服务器进行远程监控，可以将统计信息导出到文件或数据库。根据论文实现的一款网络正文抽取工具。在今日头条、网易新闻、、观察者网、凤凰网、腾讯新闻、ReadHub、新浪新闻做了测试，发现提取效果非常出色，几乎能够达到100%的准确率。一款用于从Web下载媒体内容(视频、音频、图像)Python命令行工具，使用便捷，支持Youtube、Twitter、TED、网易云音乐、、腾讯视频、优酷视频、、抖音、爱奇艺、虾米、酷狗......等几十个音视频平台。而且，功能非常强大，别的工具无法下载的，它都可以。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],大六壬明镜,程序员工作繁忙，动不动来个996，没时间陪女朋友咋办？没关系，这件小事是难不倒聪明智慧的程序员的，他们花式陪女朋友的方式，让我们眼前一亮。在github上，有一位叫作云外孤岛的程序员，每天通过微信发消息来陪女朋友，就是用Python来做的。这简直就是程序员脱单指南啊！单身狗终于有救了！作者教我们用python给女友定时发提示消息，而且不会漏过每一个重要时间，每天早上起床、中午吃饭、晚上吃饭、晚上睡觉，都会按时发消息给她，而且还可以帮助她学习英语单词哦！在生日来临之时，自动给女朋友发祝福语。在重大节日来临之时，比如女神节、情人节、春节、圣诞节等，每个节日都会自动发贴心问候语。最最最重要的事情，你可以通过女朋友的回复，可以实时了解女友的情感情绪指数。采用python中的wxpy模块完成微信的基本操作。这些配置文件包括女友微信号；设置早上、中午、晚上等一些主要时间，以及对应的提示语；设置一些重要的节日时间，以及问候语。自动判断所属操作系统，并且根据不同操作系统执行不同指令。使用分析女友情绪。作为一只单身狗，和舔狗，我选择做一只有情调的舔狗。今天你依旧高冷，给你发了好多信息，都没回我。可你越是这样，我越是喜欢你。在我不断的嘘寒问暖下，你终于不再矜持，回了一个sb。我查了下英语词典，终于明白了这两个字母的意思。s是sweet，b是baby，我想你一定是在叫我sweet baby了，这让我很感动。扩展阅读：
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],李刘东,网络上有一个段子Python除了不会生孩子，其他的都可以。这虽然是一句玩笑话，但是，的确说明了Python的功能之强大、应用面之广。只要你能够想到的，基本都可以在Python中找到的对应的第三方库，都可以找到实际的应用场景。下面就来介绍利用Python来进行游戏开发，你会发现，它短暂的几十行代码，就可以完成C++、Java成千上万行代码完成的任务。贪吃蛇、迷宫、吃豆人、扫雷、Flappy Bird...这些游戏可以是非常经典，甚至伴随着很多人的童年回忆。那么，你是否想过自己开发一款专属游戏？是否思考过开发这样一款游戏需要多少工作量？游戏开发在互联网行业算是一个门槛较高的方向，因此，对于非专业的游戏开发者来说，开发一款游戏一直是一件让人望而却步的事情，。那么，今天要介绍的这款Python项目就可以轻松实现你成为游戏开发者的想法，实现前面提到的这些经典游戏只需要50-100代码即可完成。free-python-games两年前，我姐就曾表达了希望我能够抽空教外甥学习编程的想法。对于这份嘱托，我一直放在心上，但是却迟迟找不到合适的方向。即便是从事几年互联网行业的我来说都对编程都觉得枯燥乏味，何况一个一无所知的孩子呢？但是，free-python-games这个项目让我眼前一亮，终于找到了一个合适的Python学习项目。当年，它对于成年人同样适用、有价值。我之所以介绍这款项目，不单单是它实现了让人回到童年的经典游戏。更重要的原因是它能够作为一个Python学习、锻炼探索和理解能力的一款好工具。free-python-games和我们接触的大多数Python库那样让人如同一样去实现一项功能不同，你需要去静下心来死锁一款游戏的主题，同时需要去实现游戏中的每一个策略。我觉得这样比的搬运工作要有趣很多，且更加具有挑战。以我们熟知的为例，当然我们目前对于这款游戏的主题和玩法已经非常清楚了，通过方向键控制蛇的移动，每当吃到一颗食物蛇就会变长，如果撞到墙则游戏结束...那么，对这款游戏进行拆解，就需要思考几个问题：看到这里你就会发现，它并不像我们大多数情况下使用Python那样，、、，它更像是LeetCode上面的算法题，需要你从零开始去实现一款游戏，用心去思考游戏实现过程中的每个细节。而在这个过程中对人的提升会非常迅速。下面就以贪吃蛇这个游戏为例，介绍它的源码和实现过程，来回答上述4个问题。首先，导入需要的模块，其中是一款绘图工具，主要为了实现游戏的前端和用户交互功能，包含了一些开发游戏会用到的基本元素，是Python中用于生成随机数的库，在生产新食物的过程中会遇到（回忆一下，当蛇吃了一颗食物后，会在窗口内随机产生一颗食物）。然后，就初始化一些变量，分别用于存储食物、蛇的状态，下面就是初始化蛇的位置，已经定义蛇对于键盘方向键的，朝着指定的方向移动，接下来，我们需要判断蛇是否在边界框以内，如果在，则继续移动，否则终止，最后，就是整个游戏的串联逻辑，不断移动蛇、不断判断当前状态，然后选择是否继续移动，到此为了，经典的贪吃蛇游戏就完成了。整款游戏的纯代码行数不足50行。但是，却内藏锦绣，有很多需要开发者去思考和琢磨的点，对Python学习者也是一个很大的提升。除了贪吃蛇，这个项目中还有迷宫、吃豆人、扫雷、Flappy Bird等20+款经典游戏。当然，如果你觉得这些游戏还不够，或者对游戏开发充满兴趣，或者有很好的游戏设计idea但开发能力受限，那么，不妨学习一下free-python-games这个项目，能够把精力专注于游戏本身，而不需要在编程语言方面耗费太多时间。另外，如果你仅仅希望用来划水，这个项目同样可以满足你，只需要简单的安装之后就可以在电脑上玩这些经典游戏。另外，你还可以拷贝一份游戏源码到本地路径，用于编辑，
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],findyi,哈哈哈，Python可以做的好玩的东西多了去了～我这个回答包括：Python实在太强大了，简直无所不能～不是很稀饭《复联》嘛，用50行Python代码做了这些：50行代码玩转《复仇者联盟》：（PS:觉得写得不错的话，记得帮我双击来个赞哈～，在这里送大家一份超赞的计算机学习资料，包括大量的Python书籍哦，书单链接：         肿么样，是不是可以做超多好玩的东西啊？这些还只不过是练手的小项目而已，如果学好的话，还可以做出更多有趣的东西。过于Python为什么近年崛起速度这么迅速，这么热门，我们有句话说“时势造英雄”。网络时代的人工智能时代的初探期，大数据、数据分析、机器学习等等....Python顺应了时代需求。从语言本身讲：Python代码风格简约、便于阅读/免费开源、拥有强壮的社区/兼容大多的平台/面向对象/丰富的标准库&第三方库......Python可以做网络应用，可以做科学计算，数据分析，可以做网络爬虫，可以做机器学习、自然语言处理、可以写游戏、可以做桌面应用...
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],刘一非,作为一个系统架构师，我在做任何事情之前，都会问一下自己：“我做这个事来干嘛！”如果你要开始你的 Python学习，当然要问自己一声，而且是越响亮越好。如果你想搞清楚你的目标，再学习JAVA的话，我可以推荐给你5个用途，Python都能让你更加得心应手地操作工具，达成目标。这5个作用是：这本书是一个比较好的敲门砖，让你进入人工智能的海洋，同时可以打开一扇新的大门。因为本书不仅讲了Python工具，还介绍了机器智能的学习方法和知识，包括监督学习和无监督学习，以及各种不同的模型使用场景。如果你基本上读过这本书，再配合一些训练集，没准你可以主动去下载一些更为优秀的模型，进行调包，调参，然后去参加各类大奖，说不定还能获得奖金。看，这本书可以满足你！通过学习网络爬虫，你可以每天获取亿级的数据，成为一个小百度，或者优化你的网站。Python也提供了很多不错的可视化工具，让你快速搞出界面和大屏。很多人对感兴趣，他们希望能分析自己的股票，知道明天它是多少钱。于是你可以通过Python搞定量化投资，当然风险很高，不鼓励随便投资。Python比起java可轻松多了，它天生就是为数据分析而生的，Python的许多库和组件，都能轻松地做到各式各样的数据分析模型的配置。好书不在多，在精。希望你阅读了这些之后，能够多做练习，慢慢逼近你的希望。当然，如果完全是陌生地话，也可以补一些基础知识，最近有一些网上的课程，便宜又好懂，可能适合你！
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],知乎用户R26s0w,不知道怎么练习没关系，先试试这些有趣的小项目在“边玩边学”的过程中也许就能发现自己在学习过程中的一些问题和感兴趣的点在【Charles的皮卡丘】的博文里发现这些有趣又实用的小项目发现知乎上还在不定期更新，也都非常不错~希望对你有帮助！喜欢记得点个赞呀~
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],babyquant,我觉得主要以下几个方面：1.网页爬虫，这个python方便；2.定时任务，这个python可以代替很多bash之类的；3.机器学习、深度学习，包括计算机视觉、自然语言处理，python擅长；4.少儿编程入门；5.量化交易，比如股票开发因子测试因子。当然，python在web programming面临着被C#取代的风险，在科学计算跟matlab死磕多年略占上风就几乎被Julia连根拔起，好比《琅琊榜》里面的“斗了十年好不容易斗倒了太子却冒出一个靖王”，统计方面不伦不类远不是R的对手，系统方面对性能有要求的连C/C++一根毛都拔不掉。当然，现在最大的威胁是木兰不是Julia。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],学习Python,如果你准备开始学习或者你已经开始了学习，那么，你肯能会问自己： “我用究竟能做些什么？”嗯，这是一个棘手的问题，因为Python有很多应用方向。但随着时间的推移，我发现Python有3个主要应用方向：让我们依次来谈谈每一个。最近基于的Web框架（如和）在Web开发中变得非常流行。这些Web框架可帮助你在中创建服务器端代码（后端代码）。 这是在你的服务器上运行的代码，而不是用户的设备和浏览器（前端代码）。 如果你不熟悉后端代码和前端代码之间的区别，请参阅下面的脚注。这是因为Web框架使构建通用后端逻辑变得更容易。 这包括将不同的URL映射到Python代码块，处理数据库以及生成用户在其浏览器上看到的HTML文件。和是两个最流行的Python Web框架。 如果你刚入门，我建议你使用其中一个。提供简单，灵活和细粒度控制。 它是不受欢迎的（它可以让你决定如何实现它）。 提供了一个包罗万象的体验：你可以获得管理面板，数据库接口， []以及开箱即用的应用程序和项目的目录结构。，如果你专注于体验和学习机会，或者你想要更多地控制使用哪些组件（例如你想要使用哪些数据库以及如何与它们进行交互）。，如果你专注于最终产品。特别是如果你正在开发一个直接的应用程序，如新闻网站，电子商店或博客，你希望总是有一种明显的做事方式。换句话说，如果你是初学者，可能是一个更好的选择，因为它有更少的组件需要处理。 此外，如果你想要更多自定义，是更好的选择。另一方面，如果你想要直接构建一些东西，可能会让你更快地到达那里。现在，如果你想学习，我推荐名为《Django for Beginners》的书。好的，我们来看下一个主题吧！首先，让我们回顾一下机器学习是什么我认为解释机器学习的最佳方法是给你一个简单的例子。 假设你想要开发一个程序来自动检测图片中的内容。因此，如下图（图1），你希望程序识别出它是一只狗。鉴于下面的另一个（图2），你希望程序识别它是一个桌子。你可能会说，好吧，我可以写一些代码来做到这一点。 例如，如果图片中有很多浅棕色像素，那么我们可以说它是一只狗。或者，你可以弄清楚如何检测图片中的边缘。 然后，你可能会说，如果有很多直边，那么它就是一张桌子。但是，这种方法很快变得棘手。 如果照片中有一只没有棕色头发的白狗怎么办？ 如果图片只显示桌子的圆形部分怎么办？这就是机器学习的用武之地。你可以给机器学习算法，给1000张狗的照片和1000张桌子的照片。 然后，它将学习狗和桌子之间的区别。 当你给它一张狗或桌子的新图片时，它将能够识别它是哪一个。我认为这有点类似于婴儿学习新事物的方式。 宝宝怎么知道一件事看起来像狗，另一件看起来像一张桌子？ 可能来自一堆例子。你可能没有明确地告诉婴儿，“如果有毛茸茸的东西，有浅棕色的头发，那么它可能是一只狗。”你可能会说，“那是一只狗。 这也是一只狗。 这是一张桌子。 那个也是一张桌子。“机器学习算法的工作方式大致相同。你可以将相同的想法应用于：等其他场景。你可能听说过的流行的机器学习算法包括：你可以使用上述任何算法来解决我之前解释过的图片标注问题。针对机器学习有流行的机器学习库和Python框架。其中两个最受欢迎的是和。附带了一些内置的更流行的机器学习算法。 我在上面提到了其中一些。 更像是一个低级库，允许你构建自定义机器学习算法。如果你刚刚开始使用机器学习项目，我建议你先从开始。如果你开始遇到效率问题，那么我会开始研究。要学习机器学习基础知识，请注意，你需要微积分和线性代数的基本知识才能理解这些课程中的一些材料。为了帮助你了解这些可能是什么样子，让我在这里给你一个简单的例子。假设你正在为一家在线销售某些产品的公司工作。然后，作为数据分析师，你可以绘制这样的条形图。用Python生成的条形图从这张图中，我们可以看出，男性购买了超过400个单位的产品，女性在这个特定的星期天购买了约350个单位的产品。作为，你可能会对这种差异提出一些可能的解释。一个明显可能的解释是，这种产品比男性更受男性欢迎。 另一种可能的解释可能是样本量太小而且这种差异只是偶然造成的。 而另一种可能的解释可能是，男性倾向于仅在周日因某种原因购买该产品。要了解哪些解释是正确的，你可能会绘制另一个这样的图表。我们不是仅显示星期日的数据，而是查看整整一周的数据。 如你所见，从这张图中，我们可以看到这种差异在不同的日子里非常一致。从这个小小的分析中，你可以得出结论，对这种差异最有说服力的解释是，这种产品更容易受到男性的欢迎，而不是女性。另一方面，如果你看到像这样的图表怎么办？那么，是什么解释了周日的差异？你可能会说，也许男人往往只是因为某种原因在周日购买更多的这种产品。 或者，也许只是巧合，周日男人买了更多。因此，这是数据分析在现实世界中可能看起来像的简化示例。我在谷歌和微软工作时所做的数据分析工作与这个例子非常相似 - 只是更复杂。 我实际上在谷歌使用进行这种分析，而我在微软使用。我在这两家公司使用来从我们的数据库中提取数据。 然后，我会使用和（在谷歌）或和（在微软）来可视化和分析这些数据。是最受欢迎的数据可视化库之一。 这是一个非常适合开始学习的库，原因如下：脚本通常是指编写旨在自动执行简单任务的小程序。那么，让我举一个我个人经历的例子。我曾经在日本的一家小型创业公司工作，我们有一个电子邮件支持系统。 这是一个系统，让我们回复客户通过电子邮件发送给我们的问题。当我在那里工作时，我的任务是计算包含某些关键字的电子邮件的数量，以便我们分析收到的电子邮件。我们可以手动完成它，但是，我编写了一个简单的程序/简单脚本来自动执行此任务。实际上，我们当时使用Ruby，但Python也是这类任务的好语言。 Python适合这种类型的任务，主要是因为它具有相对简单的语法并且易于编写。 用它写一些小东西并测试它也很快。我不是嵌入式应用程序方面的专家，但我知道Python可以与Rasberry Pi一起使用。 它似乎是硬件爱好者中的一种流行应用。你可以使用名为PyGame的库来开发游戏，但它并不是最流行的游戏引擎。 你可以用它来建立一个爱好项目，但如果你认真对待游戏开发，我个人不会选择它。相反，我建议开始使用与，这是最受欢迎的游戏引擎之一。 它允许你为许多平台构建游戏，包括Mac，Windows，iOS和Android。你可以使用Tkinter制作一个Python，但它似乎也不是最受欢迎的选择。相反，似乎Java，C＃和C ++等语言更受欢迎。最近，一些公司也开始使用JavaScript来创建桌面应用程序。例如，Slack的桌面应用程序是用构建的。 它允许你使用构建桌面应用程序。就个人而言，如果我正在构建一个桌面应用程序，我会使用选项。 它允许你重用Web版本中的一些代码（如果有的话）。但是，我也不是桌面应用程序方面的专家，所以如果你不同意或同意我的意见，请在评论中告诉我。我会推荐，因为它更现代，而且在这一点上它是一个更受欢迎的选项。然后，你需要为要支持的每种类型的设备创建前端代码。你可以使用，例如：适用于iOS的Swift 适用于Android的Java 用于Web浏览器的JavaScript 每组代码都将在每种类型的设备/浏览器上运行。这将是一组代码，用于确定应用程序的布局如何，单击按钮时的外观等等。但是，你仍然需要能够存储用户的信息和照片。你需要将它们存储在服务器上，而不仅仅存储在用户的设备上，以便每个用户的关注者都可以查看他/她的照片。这是后端代码/服务器端代码的用武之地。你需要编写一些后端代码来执行以下操作：跟踪谁在关注谁 压缩照片，以免占用太多存储空间 在发现功能中向每个用户推荐照片和新帐户 因此，这是后端代码和前端代码之间的区别。顺便说一下，Python并不是编写后端/服务器端代码的唯一好选择。还有许多其他流行的选择，包括，它基于JavaScript。
学 Python 都用来干嘛的？,['我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。'],编程指北,"比如我最常用的，进入一个需要公开的目录，执行：（用过的点赞！！简直不要太好用Python中内置的一个简单http server，方便自己、别人用浏览器来访问你的文件目录。3. 自动定时发邮件4. 自动化操作csv、excel等5、自动化批量处理文件，比如加密，打包等6、自动化处理PDF（插入页面）、PDF转其它格式7、爬虫举个知乎大佬的例子：大一刚学Python的时候，写了一只12306爬虫，采集车次、时刻表数据多线程采集，经过不断调试终于稳定，速度也还可以每天大概可以采集到2000多个车站，5000多个车次，5万多条时刻信息（这些信息每天都在变的，所以要设置不同日期，然后保存）当然这不算有意思的有意思的是这个可以可视化显示各个站点不同时间的车辆运行情况（当然显示部分不是用Python写的了）采集了这么多数据不利用就太可惜了，于是动了点脑筋，把数据利用起来，就有了下面这些（下面就与Python无关了）那个时候铁道部还没有发布官网的购票APP，于是有了这个自己做了个订票的APP，可查询车次、时刻、余票、正晚点（请忽略图上的水印，这个APP首发是在百度火车吧，懒得再重新截图了）嗯，虽然当时没有官方的APP，但第三方的还不少，上面的功能也没什么新鲜的不过下面几个功能一般的APP是没有的车站详细信息查询，包括所在地址、是否办理旅客乘降、是否办理行包业务，也有一些非路内人士不会在意的信息，比如所属线路、所在路局、是否为接算站等等编组、乘务、套跑信息上面两个功能非路内人士应该不会用的太多，下面还有几个实用的功能电话订票在高峰时期订票电话经常打不通，其实这个是有些小技巧的，加拨同路局其它城市区号效果会好很多（当时电话订票是要拨打出发地所在路局的电话的，不知道现在是否实现了电话跨路局售票）座位分布，想刷靠窗座位就看这个吧根据二维码验票真伪将来的你一定会感谢今天拼命努力的你 (二维码自动识别)放票时间查询界面丑的要死，请大家忽略界面吧。。8、数据分析9、AI人工智能一、Web开发Python的诞生历史比Web还要早，由于Python是一种解释型的，开发效率高，所以非常适合用来做Web开发。Python有上百种Web开发框架，有很多成熟的模板技术，选择Python开发Web应用，不但开发效率高，而且运行速度快。常用的web开发框架有：Django、Flask、Tornado 等。许多知名的互联网企业将python作为主要开发语言：豆瓣、知乎、、Google、NASA、YouTube、Facebook……由于后台服务器的通用性，除了狭义的网站之外，很多App和游戏的服务器端也同样用 Python实现。二、网络爬虫许多人对编程的热情始于好奇，终于停滞。距离实干做开发有技术差距，也无人指点提带，也不知当下水平能干嘛？就在这样的疑惑循环中，编程技能止步不前，而爬虫是最好的进阶方向之一。网络爬虫是Python比较常用的一个场景，国际上，google在早期大量地使用Python语言作为网络爬虫的基础，带动了整个的应用发展。以前国内很多人用采集器搜刮网上的内容，现在用Python收集网上的信息比以前容易很多了，如：从各大网站爬取商品折扣信息，比较获取最优选择；对社交网络上发言进行收集分类，生成情绪地图，分析语言习惯；爬取网易云音乐某一类歌曲的所有评论，生成词云；按条件筛选获得豆瓣的电影书籍信息并生成表格……应用实在太多，几乎每个人学习爬虫之后都能够通过爬虫去做一些好玩有趣有用的事。三、人工智能人工智能是现在非常火的一个方向，AI热潮让Python语言的未来充满了无限的潜力。现在释放出来的几个非常有影响力的AI框架，大多是Python的实现，为什么呢？因为Python有很多库很方便做人工智能，比如numpy, scipy做数值计算的，sklearn做机器学习的，pybrain做神经网络的，matplotlib将数据可视化的。在人工智能大范畴领域内的数据挖掘、机器学习、神经网络、深度学习等方面都是主流的编程语言，得到广泛的支持和应用。人工智能的核心算法大部分还是依赖于C/C++的，因为是计算密集型，需要非常精细的优化，还需要GPU、专用硬件之类的接口，这些都只有C/C++能做到。而Python是这些库的API binding，使用Python是因为CPython的特性，要开发一个其他语言到C/C++的跨语言接口，Python是最容易的，比其他语言的门槛要低不少，尤其是使用Cython的时候。四、数据分析数据分析处理方面，Python有很完备的生态环境。“大数据”分析中涉及到的分布式计算、数据可视化、数据库操作等，Python中都有成熟的模块可以选择完成其功能。对于Hadoop-MapReduce和Spark，都可以直接使用Python完成计算逻辑，这无论对于数据科学家还是对于数据工程师而言都是十分便利的。五、Python对于服务器运维而言也有十分重要的用途。由于目前几乎所有Linux发行版中都自带了Python解释器，使用Python脚本进行批量化的文件部署和运行调整都成了Linux服务器上很不错的选择。Python中也包含许多方便的工具，从调控ssh/sftp用的，到监控服务用的supervisor，再到等构建工具，甚至conan等用于C++的包管理工具，Python提供了全方位的工具集合，而在这基础上，结合Web，开发方便运维的工具会变得十分简单。六、Python的其他应用举例系统编程： 提供API，能方便进行系统维护和管理，Linux下标志性语言之一，是很多系统管理员理想的编程工具。图形处理： 有PIL、Tkinter等图形库支持，能方便进行图形处理。数学处理： NumPy扩展提供大量与许多标准数学库的接口。文本处理： Python提供的re模块能支持，还提供SGML，XML分析模块，许多程序员利用Python进行XML程序的开发。数据库编程： 程序员可通过遵循PythonDB-API（数据库应用程序编程接口）规范的模块与MicrosoftSQLServer，Oracle，Sybase，DB2，MySQL、SQLite等数据库通信。Python自带有一个Gadfly模块，提供了一个完整的SQL环境。网络编程： 提供丰富的模块支持sockets编程，能方便快速地开发分布式应用程序。很多大规模软件开发计划例如Zope，Mnet及BitTorrent.Google都在广泛地使用它。Web编程： 应用的开发语言，支持最新的XML技术。多媒体应用： Python的PyOpenGL模块封装了“OpenGL应用程序编程接口”，能进行二维和三维图像处理。PyGame模块可用于编写游戏软件。： Python有一个hack的库，内置了你熟悉的或不熟悉的函数，但是缺少成就感。七、总结：看到这么多应用场景是不是觉得Python非常厉害，但是Python通常不作为工程语言出现，换言之正规的软件生产不使用它，主要用java, c#, xml, c，至于为什么，因为这是软件工程的需要。而且Python不具有完整的语法检查，但这也不影响Python现在的地位，因为Python入门快，简单，学习成本相对低，有很丰富的支持库可以被直接调用以高效地完成不同需求的工作，所以越来越多的人开始加入Python大军。Python简单易懂的语法，使Python成为最适合初学者使用的语言，即使不是程序员，学会Python，也可以大大提升工作效率。"
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],麋路,"真有这种游戏啊。。。steam链接：有想要挑战一下的可以看这个live demo，不需要注册就可以立刻试玩：游戏的介绍：Screeps is an open source MMO RTS sandbox game for programming enthusiasts, wherein the core mechanic is programming your units AI. You control your colony by writing JavaScript which operates 24/7 in the single persistent world filled by other players on par with you.介绍的翻译：Screeps是一个为代码变态(划掉)爱好者设计的开源的MMO RTS（大规模多人在线即时战略）游戏。这个游戏的核心机制就是来为你控制的单位写AI。你可以用JavaScript来控制你殖民地（里的一切），并且这些内容7*24小时运行的，并且充满其他玩家来与你对抗。说白了就是给你提供一个JavaScript的接口，用来写一个“AI”来跟其他玩家对抗。可以简单的基于规则，也可以写，也可以写增强学习之类的agent ai（但性能其实很受限）。现在这个游戏已经变得巨复杂了。从能源到采集，从防御到进攻策略甚至还有贸易等等等等。。。这个游戏有多复杂？首先想要入门，游戏是全英文的，除了写code要用纯英文，最重要的是所有的官方文档也都是英文的。你需要通过阅读文档来学习这个游戏的：（这文档一看就是API Reference的风格）文档中包括整个游戏系统的运行逻辑、写code的接口和一大堆内部机制。当然，还有API References！来来来，请随意体验一下被代码支配的恐惧：然后看看大佬开源出来的code：（是的，放在了全球最大宅男/女交友社区）这个游戏的收费是花钱买算力(subscription token)。。而游戏中你可以获得算力再出售。所以完全有可能通过写一个巨厉害的code来赚钱……详细信息建议看steam页面中的评论。。。分析的已经很透彻了更：附上里的第一段代码：大致的意思是这样的：从场景中找到名为Harvester1的一个creep(既游戏种的一种基本单位)。然后寻找当前房间中的所有source。然后命令creep去harvest 所有source中的第1个source。但这个过程有可能返回值是“ERR_NOT_IN_RANGE”这个错误，说明creep距离source太远了。然后就命令creep moveTO那个source里。然后整个函数永不间断地执行下去。如此，万里长征第一步搞定了！你得到了一个可以遍历采集资源的creep。但是抵御不了入侵者，也很难最优化效率等等。想要更高端的agent，还是要多烧脑了。更：看了一下API，这玩意居然还支持。就是说一些要求性能的地方，你可以写个C语言的code然后编译成二进制的library再在JavaScript脚本里调用。"
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],子昂,哈哈哈，我玩过一款网游可能符合题主的意思。预警：本文较长，注意流量。既然是外挂，提供就没什么意思啦，允许玩家自行用各种软件这个才是问题的关键。大概是2014年的时候吧，有时候上下班通勤时间或者厕所蹲坑时间，想找点游戏打发时间，不想玩单机，也不想爆肝玩一些容易耗时耗力的游戏。然后我就发现了一款但是又很魔性的网络游戏。我刷微博的时候看见一个同事在玩，我就跟着点进去开始玩了。我当时玩的是微博小游戏版，游戏名字叫“愚公移山”（PS：我玩的游戏版本目前已经倒闭停止运营了！因此此文所有配图都是在网上搜索，如有版权问题，请联系我删除。）现在回想，这游戏仍可以排进我玩过的沙雕网游的top榜之首，游戏很简单，就是点这个茅屋，然后就会造一个小人，（还记得的课文吗？“子又生孙，孙又生子。子子孙孙无穷匮也! 而山不加增，何苦而不平? ”）这个游戏就是要造小人，然后去移山！！游戏里面的boss就是山，而且那些山不是叫王屋和太行，策划们给那些山取了一些很脑残的名字，诸如：打boss就是，点击这个山，然后你的子孙数量就会减少一个数值，山的HP数量（血条）也会减少一个数字，然后根据你的子孙数量，和移山的数量，会在游戏里面有一个世界排名，然后里面也会有一个好友排名，会显示你和你的游戏好友的子孙数进行排名。当然，作为一个网游，它不可避免的也有充值系统，当然沙雕游戏的商店也是很沙雕的，卖的就是一些莫名其妙毫无关联但是让你在游戏里更快生孩子的道具，或者是对好友使用可以给好友避孕的一些道具。游戏中增加生产率的方法有很多，比如升级茅屋变成豪宅，茅屋点一次只能生一个，豪宅点一次可以生十几个；比如增加草丛或克隆人装置等自动生育场景（充值开通或者攻克boss之后的金币道具购买）游戏内核就这么简单，接下来就是开始斗法。=======简单分割线========我开始玩的时候，我那个同事已经是图2那种级别了，子孙67亿，生产速度222万人每秒，击败全球60%的玩家。我想偷偷地超过他，于是悄悄咪咪地开始玩，由于这个游戏只有“点击生娃”这么一个简单的操作，于是我先用了最简单的外挂，按键精灵。用写了一个鼠标连点的软件，然后通过模拟器在闲置电脑上开启游戏，最开始通过大概十分钟的个人玩法，我已经把茅屋升级成了女娲，点一下可以生120个子孙，为了便于后期的统计，我设置成每秒点击100次，也就是一秒钟可以生12000个子孙。那么一分钟就是720000子孙，一小时就是43200000子孙，我挂8小时，就会有3.4亿的子孙。因为前期的boss都很弱鸡，大概几百万子孙就可以移掉那些山，那么一天时间，我就能推到一些boss然后获取金币开通自动生育区！同事的67亿子孙，估计也就几天我就能超越！调试完成之后，我心满意足地上班去了，也不敢挤号，看着我同事一本正经地工作的时候，我总是莫名想笑，心想着过几天我的游戏排名就要超过你了！兀自暗爽！然后我当天下班，飞一般的回家开电脑，打开一看，连点器仍在正常运作，但是我的子孙居然只有1.1亿！卧槽怎么回事，是我的数学不好还是游戏策划的数学不好？我又检查了一下连点器，依然是一秒一百次，一分钟72万，明明过了八小时，为什么只有1.1亿！我不解地百度，崩溃的发现原来这个游戏还有随机事件，就是会出现一个叫做“智叟”的人物，一下子就按百分比屠掉你的子孙，比例高到15%-30%！！！估计就是官方为了平衡我这种无脑点击挂出的类似验证码事件。然后这个游戏没有日志记录，被智叟屠了我也看不到是什么时间，也不知道他出现的规律和频率，除了网上搜到的图片，我都不知道他到底长什么样子，更不知道该怎么应对。但是我综合分析以往的游戏套路，应该是他出现之后点击他会触发一些事件，可以驱赶或者打败之类的。于是我守在电脑前大概2个小时，果然出现了智叟，只要在3秒钟之内点击他，就可以把他驱赶走，不然他就会屠杀很多的子孙，我不得不又在连点器原始代码里加上监测智叟出现的代码。当天晚上，捣鼓了半天，开了几个自动生产场景，自动生育率在每秒四万个，加上连点器，一秒钟可以生52000个子孙，一小时就是1.8亿子孙！！！睡觉之前再次确认了一下正常运行，明早起来，20亿妥妥的。果然，第二天一早起来，我的子孙大军已经生到23亿了，然后又是解锁场景，又是升级女娲，自动生育弄成了80万每秒，点击生产也达到了每下1000个，开挂高达每秒10万，加起来也就是90万每秒，和昨天的速度简直不可同日而语，并且我的世界排名已经击败了30%的人！超过同事指日可待！！可能也就是这两天的功夫了！！有了一天的游戏经验，除了智叟之外我还获得了一个信息：就是在游戏途中升级场景或者道具，会让产出比更高！于是我又下载了一个，手机控制电脑，在公司蹲坑或者喝水时，就打开看看够不够升级新的道具，然后就顺手升级一波。等到下班的时候，我已经每秒生产率达到了100多万，人口总数也快到了40亿，世界排名也从击败30%到了击败40%多。同事的游戏似乎没怎么打理，每秒生产率还是两百多万，但是人口总数已然达到了3000亿的级别，这个时候让我不得不感慨计划生育的重要性。想要超过他，不得不花点功夫，由于我有连点器这个大杀器存在，于是我开始讲究策略，我把点击就能生产的女娲升级升级再升级，虽然越到后面升级需要的道具金币就越多，我又不得不去移山，移山又死掉几亿的子孙，真的体会到愚公移山的精神。总之折腾了一个晚上，我的人口总数变成了只有一千多万，但是我点击一下女娲，可以用生产50000个子孙，然后又优化了一下连点器，让它每秒可以点击140次，这样光是点击的产出率就达到了700万每秒，加上生产场景每秒100多万的产出率，我的子孙以每秒800万的速度繁衍着。生产速度已经达到了我同事的四倍！预计一晚上我的子孙就可以突破3000亿的大关！明天上午，就可以全盘超过我同事！时间很快就到了我玩这个游戏的第三天上午，我同事5500亿总人口的时候，我已经6000亿了！！我差点就忍不住跟他说了！！但是我压抑住激动的心，硬是等到了下班的点，我的人口数经过一顿操作已经达到了10000亿，也就是一兆！！而我的同事仍然只有6000多亿！！我的世界排名已经击败了70%的用户！！下班时候我风淡云轻地叫住了他！我打开手机上的游戏，故作轻松地说：“你是不是也在玩这个游戏？你看看你的排名。”我准备欣喜若狂地收获他大吃一惊的表情，但他并没有特别惊讶，看到之后只是笑着说：“你小子可以啊，我这两天没玩你一下子把我超越了。”我们顺着聊了一会，然后我又得知他玩游戏的原因，因为他有一个同学，是一个网游重度氪金用户，玩这个沙雕游戏，居然也充值了一千多块钱！！同事为了证明技术比金钱牛逼（或者是证明他同学是个沙雕），就也开始玩这个沙雕游戏！也是想像我一样通过某种外挂手段干过他的同学。而且我同事仅仅只比我早玩两天！！这两天他下班忙着约会没有怎么玩游戏，所以一不小心被我超过了，我们坐电梯下楼越聊越起劲，干脆就去了公司附近的星巴克，他现场给我演示了一下骚操作！他走的外挂路线是提升自动产出，他觉得连点器什么的太low了，而且效率不高，他说自己一直在攒道具金币买地狱之门，这几天没怎么管，刚好消耗掉一波子孙，可以换两个地狱之门！地狱之门是一个可以一秒钟生产150万子孙的大杀器！！也是游戏里生产率最高的场景！！他打开了他的ThinkPad，然后麻溜的开出模拟器，兑换两个地狱之门，然后打开了一个辅助软件——变速齿轮！变速齿轮利用HOOK API修改游戏时间的倍速！他用的版本最高可以调速到256倍！也就是现实中每过1秒钟，他的游戏里已经过了256秒！！他的两个地狱之门就已经可以达到300万人/秒，加上变速齿轮，每秒造人速度居然高达7.68亿！然后我们喝咖啡聊天那一会儿功夫，他的人口数居然也突破了一兆！！除了一脸震惊，我还能说什么呢？然后我们正式踏入了一兆大军，世界排名也达到了击败70%玩家水平！但是他给我看了一下他那个氪金的同学，让我知道什么叫金钱的力量！！他的同学居然有世界排名！世界排名只有100个人，他的同学就是在52位，击败全球98%的玩家！据了解，他的同学不会软件，也不会外挂，纯粹是充钱玩，就玩到了这个地步！！我百思不得其解，因为根据我的研究，正常打boss加自然生产（没有谁会沙雕到一直狂点手机生产吧？），想要到我们现在这个程度（击败70%），可能都需要玩1个月。然后同事告诉我一个令人伤心的真相：因为我们都没充过钱，所以我们看到的商店和充过钱的玩家看到的商店不一样，充过钱之后商店里是可以直接购买地狱之门的，15块钱一个，买了地狱之门之后还送金币，送的金币又可以升级地狱之门，所以我这种辛苦攒金币买的地狱之门一秒只能生150万个子孙，但是我同学氪金买的地狱之门是这样的↓WTF！果然免费玩家和收费玩家玩的不是一个游戏！原来我们看到的商店都不一样！！我的商店里还有很多的问号，我以为是到了某个级别才能解锁，原来是要充钱！！最让人生气的是，氪金玩家还可以买几种道具，它们分别是：+10%，+20%，+50%就是字面意思，你要有10亿人口，买一个+50%，瞬间变15亿！可气的是，这些道具只要几块钱（1-3块钱左右）然后充了会员还是月卡啥的玩家，每天还有一次6块钱子孙翻倍的机会！！5000亿瞬间变1兆！而且没充钱的玩家只能遇到智叟来屠杀，充了钱的玩家随机事件居然是：天空突然经过，你银行系以内的子孙数量翻倍！同事的同学就这么无脑氪金，各种道具各种点各种付款，就这么硬生生氪了一千多，到了世界排行榜的前100！榜上有名！！我们要给平民玩家涨个脸，我们也要进榜！我们要证明技术比金钱牛逼！我们结合了我俩的骚操作，研究出了后台双线程操作，一边疯狂连点，一边自然生产，就这种疯狂的生产速度，居然还是不及排行榜上大神的生产速度，top100的大神们人口基数太大了，计算单位都不是一个量级的，我们爬天梯爬得好辛苦。游戏第六天的时候，到了一个阶段，所有能获取金币的渠道都打完了，场景和女娲都没办法再升级，我们的产值变成固定的1秒220亿，世界排名变成了击败90%的玩家！可以说是瓶颈期了，并且随着排名的提升，居然又多了一种玩法，就是你可以去掠夺其他玩家的人口，然后玩家会有闪电，可以打击前来掠夺的人，然后就会击落侵略者的一些人口数变成自己的人口数，但是闪电每一个都有冷却时间（用完了可以拿金币买），有时候掠夺的人来得多了，后面只能被掠走一些人口。我和同事研究中发现，这个游戏的安全机制（反外挂机制）可以说几乎没有，这个闪电很快就会用完但是很慢才能冷却，于是我们又用了新的外挂手段：wpe封包。我们设置了闪电的冷却时间，将数据包中的30分钟冷却设置成1秒，这样我们就一直有闪电，所有掠夺者，一个不留全部干倒！真正实现了朋友来了有好酒，敌人来了有猎枪！然而一天劈死几百个侵略者，我们的战利品——那些增加的子孙们，居然只让我们的世界排名提升了1%。但是这个契机我们灵机一动，可以刷CD时间，为什么我们不刷金币呢？这里值得一提的是，到后期干掉一个boss会给几百个金币，在所有百分比道具里面，+10%的道具是可以花1500金币购买的！但是我们目前范围内已经无boss可杀，没有获取金币的渠道，后来还是同事聪明，10金币买了商店里一个最便宜的道具，抓到数据包的数据之后，把金币数量的减法改成加法，然后封包发送，结果成功了！我们金币增加了10金币！然后开始刷金之路，一路刷到999999999999个金币，到了游戏金币栏上限。虽然免费玩家没有+20%，+50%和+100%(翻倍)但这个+10% 对于开挂玩家来说，已经够用了！然后我们的连点器变成了连点+10%，在我们已有的人口基数下，可以说是涨幅是一个天文数字了！全服第一指日可待！玩这个游戏的第九天：终于到了世界排行榜的第一，第二就是我的同事，我们人口数差不多，只要少抓一个智叟，就能轮流坐第一。拿到排行榜第一之后，这个游戏开始变得索然无味。同事也赶紧抽了个时间去和他的氪金同学嘚瑟，结果氪金同学说了这么一段话：他同学的一番话真的是震耳发聩如雷贯耳，我和同事都羞愧地低下了头。不过事后氪金同学从技术角度了解了一下我们的操作方式，然后抱着学习的目的刷到了世界第三。最后坚决抵制外挂行为，呼吁大家用钱支持自己喜欢的游戏。=====================备注：本故事纯属虚构，如有雷同实属巧合。本人不为故事中行为和语言承担任何道德上的谴责或法律上的责任。
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],云舒,我们有个黑客游戏，岂止是允许写外挂？而是不会写代码没法玩。黑客大逃杀：一个服务器，每人一个root权限账号。然后写个程序运行，杀掉所有其他人的程序，同时保护自己的程序不死。活到最后的赢。你们会想玩不…
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],Zign,有啊有啊。有个游戏叫robocode，题主要不要试一试？这个就是你要的类型哦，包你满意。2001年发布，最新版是2018年4月发布。玩法很简单，用程序控制自己的坦克击毁对方坦克。但实际上可没那么容易，开炮要算提前量，不过对方也不傻，会用随机移动来扰乱你的瞄准。当然你也要用有效的移动策略防止对方打中。我随便贴个视频你体会一下当然这是低段位的比试，双方的动作都有很多问题。高手对决可以用深不见底来形容。虽然国内并不流行，但真的是很好的游戏。
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],珂字辈,虽然不是完全符合题主的要求，但这两款游戏，一定程度上形成了一个“开挂”的小圈子，各国作者都在研究如何更加优美，更加奔放的“开挂”。而且后者对于外挂的研究深度，一定程度诠释了外挂的最终形态。第一款游戏是。暗黑破坏神2大家可能都玩过，一部分人的记忆停留在血乌都瑞尔上，硬核点的玩家可能还记得build各种char。但能觉得这款游戏能跟开挂扯上关系的，无非也就是hackmap，大箱子插件，深入点可能还研究过ATMA或者UdieToo。但这个游戏有一种小众而独特的玩法，叫做。硬血就是修改的人物存档，d2s文件，不涉及MPQ，dll文件的修改，使其可以进入任意暗黑2的战网房间内，两个人进行PVP。因为相比于正常存档，硬血人物是完全打不死的存在，所以起名硬血。硬血玩法是硬血人物对抗硬血人物，不像传统单机游戏一样是外挂欺负AI，也不像传统网游一样是外挂欺负正常玩家。所以如何修改成一个好的硬血人物存档，有着非常深刻的讲究，其中运用了非常多的暗黑2基础游戏机制，需要大量时间去钻研。硬血人物图片硬血科普贴：第二款游戏是mugen。mugen是一个格斗游戏引擎，最经常拿来做同人格斗，详情请见我的科普格斗游戏中，被讨论的最多的就是人物的强度，绝大部分格斗游戏，都被玩家严格的区分了人物等级，S-C不等。甚至更多的人还在跨作品比较人物强度，比如KOF97中的大蛇和KOF2001的伊格尼兹到底谁厉害，而mugen就为这种跨作品PK提供了平台。再加上中期mugen的AI作者的崛起，本来傻傻的任人欺负的普通人物，被赋予了强大的AI，于是mugen玩家们不再去手操控制人物，而是观战让AI打AI，于是你在B站上看到了各种各样关公战秦琼的杯赛。我的入门杯赛：强中-凶中略有节操大乱斗开启拳皇时代的杯赛：拳皇世界既然人物-AI都是各国作者制作的，那么mugen人物就免不了被加上各种私货，比如制作一个超高防御超高攻击时刻全屏攻击的大蛇，这样的人物应该就是mugen玩法的起点。mugen中的凶恶技术，是各个时代中喜爱凶恶玩法的作者，对于制作高强度攻击面，和高强度防御面的汇总。由于喜欢凶恶的作者和观众非常多，甚至达到和普通玩家分庭抗礼的存在。即使到现在，mugen传播在外的名声最大的mugen角色，也是一个凶恶人物——祸灵梦。mugen有着非常严格的分级制度，纸并强凶狂神，强上凶下的等级差不多就是一个格斗游戏的顶尖玩家操作非BOSS S级角色的水平，而到了狂中往往存在各种回血脱离，已经是人类手操正常角色战胜不了的存在。到了神下之后，格斗游戏的表现力都趋近于无，你来我往之间只是画面和音效的演出效果，更多的是后台代码之间的战斗，神级角色们搭载了各种各样的凶恶技术，这些凶恶技术积累于日本作者和中国作者，所以有着各种各样的中二名称。比如即死，OTHK，混线，超即死，永续毒，毒，死宣，强制死宣，即死返，贯通炮，邪眼杀手，亲变更，NOKO。每一种称呼，背后都有对应的一项技术，这些技术往往针对了mugen中各种判定和BUG，来让系统判定自己胜利。好的凶恶角色往往搭载了更多，更通用的凶恶技术，也有着针对某些角色钢板防御面的特殊对策。凶恶技术：凶恶技术还分攻击面和防御面，凶恶作者更加追求攻击面，在神级的顶点神最上的战争中，打掉多少高防御面的靶子，就是攻击面的体现。2018神最上评测 然而神最上就是mugen的顶点了吗？并不是。随着mugen作者的深入研究，更加凶恶的技术出现了。那就是针对mugen内存地址，汇编代码，栈溢出的隔离技术，包括本体亲捏造，%n，%f，statedef溢出，def溢出，这些技术应用往往已经不局限于mugen中的胜负了，可以直接注入汇编代码，修改mugen源代码，调用dll，调用windows的API执行任意行为。这种人物之间的攻击，往往在游戏战斗之前就开始了，在选择人物甚至载入人物的时候就完成了攻击。所以出现了打开浏览器的人物，删除所有人物的人物，听歌的人物。所以有个mugen笑话就是病毒人物。选择即关机或者重启的两个人物选择之后按E，可以打开作者博客的人物（调用explorer.exe被360报毒了）隔离技术：这里必须要提到一个中国作者，ydccdy2010，通称遥远，几乎大部分的隔离新技术都是他提出来的，是mugen凶恶历史上最重要的作者。这些新技术的出现，让mugen人物强度再次提升了一个档次，甚至让原本的神级人物不带他们玩了，神最上评测中不允许出现隔离技术。论外·攻守对决：看到上述两款游戏，你是不是对外挂又有了新的理解，其实不管是单机游戏的修改器，还是网游的挂，都没有太多深度。外挂的最终形态，就是变身成黑客，攻击游戏本身，攻击玩家电脑，攻击服务器。
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],萝魏紫,我之前就想要做一个这种游戏来着，没有人机界面，全部API提供，后来被朋友阻止了，他们的理由非常说服人：我不想下班了以后再上班。。。。=====没想到这么多人想要下班了以后再上班。。。。。有建设性意见的可以加我微信，备注：下班之后再上班，我拉你进讨论群。。。。
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,['比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 '],张浩斌,更新：感谢各位点赞，如想开私服，微信扫我头像。——————————————————————————这种游戏不要太多。从最入门的  到到到到
程序员必须掌握哪些算法？,[],吴师兄学算法,为了让你对数据结构和算法能有个全面的认识，我画了一张图，里面几乎涵盖了所有数据结构和算法书籍中都会讲到的知识点。这里面有10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。这里也给大家推荐一个特别适合新手免费刷题的网站算法相关内容非常全面，从基础入门到进阶提升，所有必备知识点都包含了，而且牛客不光是一个刷题网站，还是一个交流学习平台，发个问题总有热心的大佬帮助！如果觉得不错，别忘了双击点个赞哦。貌似手机端打开连接有的会出现问题，可以点击这个总结看看：这里补充一下，无论是学习算法还是学习编程的任何一个技术点，想要得到提升，最好的一个方法就是去阅读，阅读优秀牛人的分享，目前主流的程序员习惯阅读的博客网站中，掘金社区属于质量不错的一个，内容包括前端、后端、Android、iOS、人工智能等等，各个方向，各个技术点都有，C++程序员需要的知识都能找到。喜欢在掘金社区阅读的小伙伴可以通过下方链接了解。学习数据结构和算法的过程，是非常好的思维训练的过程，所以，千万不要被动地记忆，要多辩证地思考，多问为什么。如果你一直这么坚持做，你会发现，等你学完之后，写代码的时候就会不由自主地考虑到很多性能方面的事情，时间复杂度、空间复杂度非常高的垃圾代码出现的次数就会越来越少。你的编程内功就真正得到了修炼。入门的同学，我建议你不要过度追求上去就看经典书。不要一来就拿着《》开始啃，初学就去啃这些书肯定会很费劲。你一旦啃不下来，挫败感就会很强。然后就放弃学算法了。所以，入门的同学，我建议你找一些比较容易看的书来看，比如《大话数据结构》和《》。不要太在意书写得深浅，重要的是能不能坚持看完。《大话数据结构》 这本书最大的特点是，它把理论讲得很有趣，不枯燥。而且每个数据结构和算法，作者都结合生活中的例子进行了讲解， 能让你有非常直观的感受。虽然这本书有 400 多页，但是花两天时间读完，应该是没问题的。如果你之前完全不懂数据结构和算法，可以先从这本书看起。《算法图解》 跟《大话数据结构》走的是同样的路线，就像这本书副标题写的那样，“像小说一样有趣的算法入门书”，主打“图解”，通俗易懂。它只有不到 200 页，所以内容比较少。作为入门，看看这本书，能让你对数据结构和算法有个大概的认识。当然，这些入门书共同的问题是，缺少细节，不够系统，也不够严谨。所以，如果你想要系统地学数据结构和算法，看这两本书肯定是不够的。通过基本入门算法书的调教，你已经逐渐体会到了算法的魅力，现在正是时候踏入基础系列算法的领域！！！这些书籍需要你费点心思去阅读。很多同学在学习的过程中，看到一篇算法科普文章经常会有这样的想法。哎呀，要是文章的代码是 Java 语言就好了呀。哎呀，要是文章的代码是 Python 语言就好了呀。虽然代码并不会很严重影响阅读，但还是有很多强迫症的同学喜欢看到文章的解释代码是自己擅长的。我这里推荐《数据结构和算法分析》，这本书非常系统、全面、严谨，而且又不是特别难，适合对数据结构和算法有些了解，并且掌握了至少一门编程语言的同学。而且，这个作者也很用心。他用了三种语言，写了三个版本，分别是：《 ：C 语言描述》《数据结构与算法分析：C++ 描述》《数据结构与算法分析：Java 语言描述》。大家都知道，对于程序员来说很大程度上算法就是为了应付面试的。所以，推荐三本有益于面试的书籍，分别是：《剑指 offer》《》《编程之美》。《剑指 offer》这本书的目的非常明确，就是为了面试。这本书几乎包含了所有常见的、经典的面试题。如果能搞懂这本书里的内容，应付一般公司的面试应该不成问题。面试之前也可以去牛客看看笔面经，知己知彼百战不殆！我做了一个 图解《剑指 offer》的小程序，应该能帮助你学习，感兴趣的可以在微信搜索 图解剑指offer。我也在 B 站录制了一些图解剑指 offer 的免费视频课程，感兴趣的也可以看看，每个视频控制在5分钟以内。《编程珠玑》这本书的豆瓣评分非常高，有 9 分。这本书最大的特色就是讲了很多针对海量数据的处理技巧。这个可能是其他算法书籍很少涉及的。面试的时候，海量数据处理的问题也是经常会问的，特别是校招面试。不管是开拓眼界，还是应付面试，这本书都很值得一看。《编程之美》这本书有多位作者，其中绝大部分是微软的工程师，所以书的质量很有保证。不过，这里面的算法题目稍微有点难，也不是很系统，这也是我把它归到面试这一部分的原因。如果你有一定基础，也喜欢钻研些算法问题，或者要面试 Google、Facebook 这样的公司，可以拿这本书里的题，先来自测一下。正如 所说的： 。遇到一个实际问题，充分利用所学的数据结构，将数据及其之间的关系有效地存储在计算机中，然后选择合适的算法策略，并用程序高效实现。。在工作过程中，我们多多少少都接触过 OAuth2 ，在使用 OAuth2 授权的时候，通常应用会弹出一个类似这样的信息：如何你熟练掌握了各种数据结构的特点的话，那自然而然想到使用  来存储权限。我们把权限划分成最小粒度之后，每一个 bit 都它的含义， 例如我们把权限划分为以下几种：每勾选一个选项，就代表着这个权限被授权，为了保证可扩展性，我们使用一个  来保存这些 bit ，也就是说，我们一共可以划分 64 种细分权限，然后对这些权限进行组合。例如，第一个 bit 如果设置了，那么就代表可以获取你的昵称、头像、地区、性别等基本用户信息， 第二个 bit 如果设置了，就可以用你的身份发状态。数据结构的实际作用还有挺多，感兴趣的可以搜索以下知识点：同样的也来思考一个问题：计算机的缓存容量无论再大，缓存满了还是要删除一些内容，给新内容腾位置。那么删除哪些内容呢？我们肯定希望删掉哪些没什么用的缓存，而把有用的数据继续留在缓存里，方便之后继续使用。那么，什么样的数据，我们判定为「有用的」的数据呢？这个时候采取的策略就是 。LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。具体的关于  的介绍可以看我之前写的一篇文章。补充：为了避免知乎大佬觉得我吹逼，先贴一下自己的 GitHub 地址，算法是一种技能，是可以通过科学合理的方式训练出来的能力。在想刷题之前，得从心里认识到接受刷题很重要，才能坚持去刷题。江湖有个传言：就目前互联网的情况来说，无论是面国外大厂还是面国内大厂，如果想换工作都要去刷题，一面二面不丢你几道 Hard 题，都对不住你偷偷摸摸找个会议室假装开会实则面试的鸡贼。同时，还得认识到一点，而某些小镇刷题家，还真就靠刷题拿下了 Google、微软、脸书等大厂offer。国内大厂也有这种趋势，比如字节，一大半都是面试题。（PS：感谢大家耐心的阅读，算法是程序员的重中之重，必须攻克，大厂面试必考，顺便送一份阿里大佬刷Leetcode总结的算法笔记，如果你能吃透，那我相信80%的技术面试都会不在话下： 这本书的目录，非常经典：不知道怎么刷题，对很多概念都很陌生，各种数据结构和知识点几乎完全不懂，打开 LeetCode 第一题，满头问号。有人相爱、有人夜里开车看海、有人 LeetCode 第一题都做不出来。2、算法上基本已经入门，Easy 可以做出来，Medium 纠结半天也能有头绪，但基础不牢，比如字符转字符串还得 Google 一下。3、刷了几百道题后，总结了自己的解题模板，参加周赛有时候甚至可以全部完成。4、开始以 beat 100% 作为 AC 的目标了。就目前的算法面试大环境来说，能达到第二阶段，中小公司可以应付过去了，到达第三阶段，字节、腾讯算法面试环节妥妥没问题了。怎么样到达第三阶段？给一下我的一些小建议吧。1、如果目标是国内大厂，那么一定要刷足够的题，不需要把 LeetCode 上 2500 道算法题都刷完，但至少刷 200 道算法高频题，这些高频题我都写了题解同时也录制了视频，在这个链接总结了： 2、面试前一周以看题为主，因为刷题也刷不了几题，多看看自己总结或者别人总结的模板，比如回溯算法模板，掌握后，几十道回溯题都不在话下。一些模板：3、刷题过程需要注意难度要循序渐进，算法训练是一个系统工程，需要循序渐进，太过于急功近利，反而容易因做不出难题而产生挫败感，带来反效果。如果你本身有基础，熟练度高，那你刷简单的 LeetCode 应该是几分钟一题，几分钟一题的，花不了你多少时间。如果你刷简单都花费很长时间，说明熟练度不够，就更应该从简单开始，然后过度到中等，再过度到困难。并且，目前国内大厂的算法考察，基本不会超过 LeetCode 中等难度，上限难度基本都是 LeetCode 中等题里面的中等难度，所以不要太去纠结难题怪题偏题。把高频题掌握就行了： 再退一步，如果你觉得 LeetCode 的题目太难，可以先从《剑指 Offer》上的算法题开始学起。为了帮助大家更好的入门学习算法，经过半年的积累，我给大家了《剑指 Offer》系列的三十道题目，结合动画的形式录制了视频，相信能帮助你更好的刷题。领取地址：4、一个时间段，只刷链表题，刷得差不多的时候，接下来再刷二叉树的题。这样做有几个很明显的好处。一、持续地刷同个类型的题目，可以不断地巩固和加深理解，可以总结出自己的思考路径或者解题模板。比如链表题目，就会去思考虚拟头节点、双指针、快慢指针。二、可以更全面地接触这个数据结构，算法的各个变种，这会促使你对这个数据结构，算法的理解更加全面和深刻，学习的效率会更高。我一直认为读书是世界上性价比最高的成长方式，书很便宜但分量很重，是让我们摆脱平庸走向卓越的方式之一。对于计算机专业的学生而言，读计算机经典书籍不光能让你快速提升知识和能力，更会让你在校招之际如虎添翼。下面这是一个，建议大家，Mark住别丢了，。1、怎么学好数据结构，看下面这个回答，已经获得了 2、如何系统地学习算法，看下面这个回答，已经获得了 3、新手该如何使用 GitHub，看下面这个回答，如果在大学期间就知道使用 GitHub ，那么能力远超同龄人。4、想成为一名优秀的程序员，那么这些程序员平时都喜欢逛的论坛怎么说你也得收藏一些吧。5、无论别人怎么说，我都是坚定不移的选择计算机专业。6、如何系统地学习 C++ ，这个回答能帮你找到路线。7、想要准备 Java 面试，那么这些面试题必须掌握。
程序员必须掌握哪些算法？,[],程序员客栈,程序员必须掌握的常用算法正如 所讲，主要包括以下内容：1、排序算法：、归并排序、计数排序2、：回溯、递归、剪枝3、图论：最短路径、、网络流建模4、动态规划：、最长子序列、计数问题5、基础技巧：分治、倍增、二分法、1、数组和2、栈与队列3、树和图4、哈希表5、大/小跟堆，可并堆6、字符串：、后缀树还可以在此基础上细分，例如单单排序算法就可以分为以下十种：对于学习算法，我推荐在力扣上刷题：此外，推荐一个用动画的形式演示 LeetCode 上的题目的项目：例如基础的演示如下：该项目正在完善中，已经用动画的形式演示出了一下题目：此外，再推荐一些免费的学习资源：在学习的时候，要想为什么要这样设计，优点在哪里，有什么改进方法，逐步通过这样的方式提升逻辑思维能力。不懂就查，找学习资料和相关解答，坚持学习。算法学习网站，上去每天刷两道算法题，走遍天下都不怕。也是算法题网站，同上。这个是上面算法题网站的中文站点，英文不好的可以刷这个，英文好的推荐去刷英文网站的题目，还能提升英语能力。中国大学MOOC是由网易与高教社携手推出的，承接教育部国家精品开放课程任务，向大众提供中国知名高校的MOOC课程。在这里，每一个有意愿提升自己的人都可以免费获得更优质的高等教育。
程序员必须掌握哪些算法？,[],帅地,。下面是我觉得值得学习的一些算法以及数据结构，当然，大家也可以留言区补充。如果觉得不错，别忘了点个赞哦。先上图，后详细解说另外，这里有个可以白嫖的项目，推荐给大家1、时间复杂度2、空间复杂度一般最先接触的就是时间复杂度和空间复杂度的学习了，这两个概念以及如何计算，是必须学的，也是必须最先学的，主要有最大复杂度、平均复杂度等，直接通过学习即可。文章推荐：不用说，链表、列表必须，不过重点是链表。特别是优先队列，再刷题的时候，还是经常用到的，队列与栈，是最基本的数据结构，必学。可以通过学习。相关文章：学习算法的过程中，有业余时间也可以学一学项目，毕竟很多算法最终都落地到项目上滴，这里给大家推荐一个（必学）哈希表相关的，推荐通过博客来学习，推荐文章：树相关是知识还是挺多的，建议看书，可以看《算法第四版》。相关文章：树状数组其实我也没学过，，，，这里给大家推荐一份刷题笔记，里面把各种算法题型以及经验都总结了，把这份笔记突击学习一下，很多算法考察，基本都稳了，给大家看一下目录下载链接：对于十大算法的学习，假如你不大懂的话，那么我还是挺推荐你去看书的，因为看了书，你可能不仅仅知道这个算法怎么写，还能知道他是怎么来的。推荐书籍是《算法第四版》，这本书讲的很详细，而且配了很多图演示，还是挺好懂的。推荐文章：图还是比较难的，不过我觉得图涉及到的挺多算法都是挺实用的，例如最短路径的计算等，图相关的，我这里还是建议看书的，可以看《》。这方便的只是都是一些算法相关的，我觉得如果可以，都学一下。像贪心算法的思想，就必须学的了。建议通过刷题来学习，leetcode 直接专题刷。我觉得动态规划是最难的一个算法思想了，记得当初第一次接触动态规划的时候，是看01背包问题的，看了好久都不大懂，懵懵懂懂，后面懂了基本思想，可是做题下不了手，但是看的懂答案。一气之下，再leetcdoe专题连续刷了几十道，才掌握了动态规划的，也有了自己的一套模板。不过说实话，动态规划，是考的真他妈多，学习算法、刷题，一定要掌握。这里建议先了解是什么，之后 leetcode 专题刷，反正就一般上面这几种题型。后面有时间，我也写一下我学到的，有点类似于我之前写的递归那样，算是一种经验。也就是我做题时的模板，不过感觉得写七八个小时，，，，，有时间就写。之前写的递归文章：我写过两篇字符串匹配的文章，感觉还不错，看了这两篇文章，我觉得你就差不多懂  和 Boyer-Moore 了。这方面的一些算法，我也只了解过一些，感兴趣的可以学习下。最后，给大家推挤个项目，以防不备之需对于上面设计到的算法，我都提供了感觉还不错的文章，建议大家收藏，然后可以利用零碎的时间进行阅读，有些人可能会觉得上面的算法太多，说实话，我觉得不多，特别是对于在校生的，上面涉及到的算法可以不用很懂，但至少得了解。至于书籍的话，如果你连基本数据结构都还不懂的，建议看《》相关书籍，例如《大话数据结构》、《》。如果你有一定的基础，例如知道链表，栈，队列，那么可以看《算法第四版》，不过这本书是用 Java 实现的，不过我觉得你只要学过 C，那么可以看的懂。这些算法的学习，虽然你觉得学了没有什么用，但还是那些话，它对你的影响是潜意识的，它可以给你打下很深厚的基础内功，如果你想走的更远，那么我推荐学习，标注的，那么我觉得，你是真的需要抽时间来学习下，标注的，代表你可以不知道怎么用代码实现，但是必得知道它的实现原理以及应用。算法的学习没有太多捷径，离不开刷题，刷多了就会有感觉了，这里再给大家推荐一份某大佬的 leetcode 刷题笔记，汇聚了上千道 leetcode 题解，并且代码都是 beat 100%：下载链接：这里有个可以白嫖的项目，推荐给大家
程序员必须掌握哪些算法？,[],桃花岛主,"《Python入门教程》《Python初级入门精讲》《Python爬虫开发》《Python实战编程》《1小时掌握Python爬虫+高效学习法则》【收藏是点赞的4倍，你们是要闹哪样！】程序员必须要掌握的十大经典算法快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。算法步骤：1 从数列中挑出一个元素，称为 “基准”（pivot），2 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。3 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。堆排序的平均时间复杂度为Ο(nlogn) 。算法步骤：创建一个堆H[0..n-1]把堆首（最大值）和堆尾互换3. 把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置4. 重复步骤2，直到堆的尺寸为1算法步骤：1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置4. 重复步骤3直到某一指针达到序列尾5. 将另一序列剩下的所有元素直接复制到合并序列尾这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为Ο(logn) 。算法步骤：1. 将n个元素每5个一组，分成n/5(上界)组。2. 取出每一组的中位数，任意排序方法，比如插入排序。3. 递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。4. 用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。5. 若i==k，返回x；若i<k，在小于x的元素中递归查找第i小的元素；若i>k，在大于x的元素中递归查找第i-k小的元素。终止条件：n=1时，返回的即是i小元素。深度优先遍历图算法步骤：1. 访问顶点v；2. 依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；3. 若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。上述描述可能比较抽象，举个实例：DFS 在访问图中某一起始顶点 v 后，由 v 出发，访问它的任一邻接顶点 w1；再从 w1 出发，访问与 w1邻 接但还没有访问过的顶点 w2；然后再从 w2 出发，进行类似的访问，… 如此进行下去，直至到达所有的邻接顶点都被访问过的顶点 u 为止。接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。算法步骤：1. 首先将根节点放入队列中。2. 从队列中取出第一个节点，并检验它是否为目标。如果找到目标，则结束搜寻并回传结果。否则将它所有尚未检验过的直接子节点加入队列中。3. 若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。4. 重复步骤2。算法步骤：1. 初始时令 S={V0},T={其余顶点}，T中顶点对应的距离值若存在<v0,vi>，d(V0,Vi)为<v0,vi>弧上的权值若不存在<v0,vi>，d(V0,Vi)为∞2. 从T中选取一个其距离值为最小的顶点W且不在S中，加入S3. 对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止关于动态规划最经典的问题当属。算法步骤：1. 最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足）。最优子结构性质为动态规划算法解决问题提供了重要线索。2. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。 动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是 在表格中简单地查看一下结果，从而获得较高的效率。朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用方法，换言之能工作并没有用到贝叶斯概率或者任何贝叶斯模型。_________________________________________________________________________________________公号：聊聊Python，感兴趣的可以来找我玩，一起来聊聊Python这点事~作者：lxlmycsdnfree链接：希望能对你有用"
程序员必须掌握哪些算法？,[],SimonS,"我来缅怀一下当年OI和ACM的日子……题目都在  上。一.基本算法:
二.:三.数据结构.四.简单搜索五.动态规划六.数学七.计算几何学.
一.基本算法:
二.图算法:三.数据结构.四.搜索五.动态规划六.数学七.计算几何学.
一.基本算法要求: 
二.图算法:三.数据结构. 四.搜索 五.动态规划 六.数学 七.. 八.综合题.
      (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263)=====================================================================如果你不是要死磕acm搞出成绩来的话，多放点心思在数据结构上对以后的帮助会比较大，比如字符串相关的、哈希、自动机、后缀树等等，而对脑力要求较高的比如博弈论和各种花式动态规划（树型DP、集合DP、插头DP等等）就不用太关心了。btw这些算法和数据结构如果能精通的话，对你以后做数据挖掘和机器学习是有极大帮助的。广告时间：如果你对以上学习路径有什么困惑，或者你对以下问题感兴趣：
那么欢迎来到我的知乎 Live："
程序员必须掌握哪些算法？,[],力扣（LeetCode）, 作为全球极客挚爱的技术成长平台，致力于为同学们面试、求职提供帮助。 向下阅读的同学一定要注意，下方 ，有密集恐惧症的小伙伴们请建议迅速划过。在这里，力扣君也为大家整理了一些程序员在  需要掌握的算法，熟练掌握它们可以帮你在面试中如虎添翼，百战百胜。现在 ChatGPT 风靡全球，AI 的概念离不开算法，学习算法更为重要在  问题下的回答中，力扣君更加详细地整理了一些面试常见的算法并且对每种算法罗列了很多题目，在此就不赘述了，感兴趣的同学可以点击链接了解更多内容。如果不谈面试的需求，对于程序员来说上面提到的那些算法依然非常重要，可以说上述内容都是。有人可能会觉得，这些基础的算法在工作中完全用不到，安安静静地做一个  多好。其实不然，虽然同是程序员，程序员之间也是可以分出个三六九等的。扎实地理解与掌握这些，能帮助你收获更强的竞争力，在自己的岗位上快速晋升。那熟练掌握这些算法，到底可以为身为程序员的我们带来什么呢？比如，现在让你实现这样一个功能：给你一些有序的数字，动态地查找目标数字。实现这一功能的方法有很多种，当面临不同情况的时候，我们需要使用不同的方法。如果你熟知各种基础算法，那么你就可以很容易地针对不同的场景找到合适的解决方案，并且将它们变成代码，以提升程序的效率。而不是遇事不决，先上暴力，虽然解决了问题，但是在时间与空间上还有很多不足。通过学习这些算法，可以提升我们在计算机方面的能力：抽象建模能力、逻辑思维能力等，并且积累一些解决问题的基本思路：折半、倍增、贪心、分治等。现实中的问题都大相径庭，但是我们通过将其抽象并建模之后，会发现问题的本质是相似的，我们往往可能从某一个基础算法中获得启发，从而高效地解决问题。而达到这一境界，就要求我们首先对基础算法能非常了解，并达到熟练运用，融会贯通的地步。所以，即使过了公司面试这一关，算法对于程序员来说依然是非常重要的。熟练掌握算法，将是你职场晋升路上的一把利刃。还是那句话，奔着求职、面试、晋升的小伙伴，刷  拿到你的 Dream Offer，走向人生巅峰！对于算法的学习的平台，只要关注以下三个维度来进行选择：力扣的  针对每一种算法都有详细的教学和习题，非常适合初学者来进行练习。拥有上千道原创算法题的 ，国内外不少知名 IT 公司技术面试时的首选题库。如果你正在准备技术面试，来力扣刷题肯定没错。在力扣  版块发起对一道题的讨论，如果你没有好的解题思路，可以和其他小伙伴一起学习交流。参加每周一次的 ，你可以通过周赛来赢取力扣积分兑换相应奖励，如果时间没有那么充裕，也可以参加力扣的虚拟竞赛。力扣的竞赛题更偏求职风格，比赛过程中错误的数据会显示出来以方便选手调式，对多数程序员来说可以说相当友好啦！Github 除了以外，也有一些大型的学习算法的项目。比如：其中将许多著名的算法都做了可编辑的动画，对于后期理解图论等相关算法有很大帮助。亮点是这个项目是中文的，算法由浅入深，相对适合从零开始学算法的。想挑战自我？可以试下 TopCoder 参加过 TopCoder 比赛的童鞋可能会对它印象深刻，它有它独特的魅力。TopCoder 没有测试用例，在比赛中，完成代码后可以去直接阅读别人的算法，并构造错误用例来为对方扣分。可以说 TopCoder 很适合学有所成的人去寻找下刺激，不过建议有一定的刷题基础再进行尝试。Coursera 上有各所大学的算法课程。有很多都是世界顶尖的算法课，有兴趣学习的程序员也可以不妨前去一试。关注力扣官方：「」，更多关于、技术干货的内容等你来啃！
程序员必须掌握哪些算法？,[],李rumor,上述都是的高频考点，想要彻底掌握的话，，以的方法循序渐进的实战，让自己把每个知识点彻底挖透记牢。推荐大家用Leetcode官方出品的免费教程 ，按照各个知识点循序渐进地罗列了算法题。推荐的学习顺序：Leetbook的好处是把算法归类为各个章节，而且大部分章节都是免费的。如上图，在入门的时候就不要刷那种高频面试题了，先把数据结构和算法的各个基础打好。每个 book 里都是先教学、再由易到难地实战，一个知识点大概有十几道题，刷完基本上就能掌握一些套路，到medium的水平了。然后才是去看各种和高频题，给自己查漏补缺，并且。下面是我总结的一些必刷算法（字母是难度），部分解法在文末的脑图中，可以直接下载。---当然，。这里离不开一些开源笔记的帮助：一位CMU硕士整理的101道经典题型，按体系归好类了，初学者可以先跟着走一遍（文末下载）：还有LeetCode Cookbook对1479道题都给了思路和解法、复杂度分析（文末下载）： 
程序员必须掌握哪些算法？,[],老刘,"对一序列对象根据某个关键字进行排序。常见的等属于。在之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。在之类的排序中，问题规模通过消减为logN次，所以时间复杂度平均。比较排序的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，则属于。非比较排序是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置。只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度。冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 表现，因为，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。(Selection-sort)是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，，称为。的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：  和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。归并排序是建立在归并操作上的一种有效的排序算法。该算法是采用（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。 快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。注意：这里用到了完全二叉树的部分性质：详情见计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。计数排序(Counting sort)是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。当输入的元素是n 个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。桶排序是的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。 (Bucket sort)的工作的原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的或是以递归方式继续使用桶排序进行排桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。 基数排序也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。基数排序有两种方法：MSD 从高位开始进行排序 LSD 从低位开始进行排序 这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异："
程序员必须掌握哪些算法？,[],硅谷IT胖子,"的答案说的好极了，我也发挥下：终生范围的年薪。以下数字都是假的，只是说明算法，无实际意义。比如26岁可以开始工作，如果40岁就下岗，实际上一年100万，也只有1400万，要除以整个工作年龄（65-26 = 39），平均年薪大概只有30多万。而且累积税率下，高收入年份集中在26-40岁非常吃亏。但，这没有考虑到房价上涨因素，因为房价上涨时期，前14年的收入会因为房产而大量增值，使得算法更加复杂。还有比如假设能做到50岁，那么晚工作5年（比如多读个火坑博士）损失的钱是多少呢？假设起薪是100万，50岁下岗时是200万一年，实际上损失的是最后5年的收入，大概200X5 = 1000万。所以写码要趁早。其次要算地点年薪。比如工作30年同样年薪，在一个房价上涨的地区，会在退休时能提出更多的钱，尤其是50多岁把一线城市或是加州的房子一卖回乡下养老或是环游世界，美滋滋。第三要算成长年薪，同样100万的工作，有些技能会保证10年后不仅不失业，反而会上涨到150万，而有些技能会在衰退中，10年后可能只有50万甚至失业。我当年做过粗略计算，很多LeetCode题做一道可以提升年薪300-500美元。假设400道Medium、Hard题可以拿到大厂Offer，那么很可能不刷题的人上限也就是不到20万，而大厂senior上限可以轻松35-40万。差不多20万的差距，除以400 等于 500美元。所以一道Medium或是Hard题的价值大概是500美元年薪每年。而且这个可怕在于是累积的，每年500, 20年下来就是1万块一道题。这还不算大厂背景对个人的加分、对失业的强抵抗力等，只是单单年薪上的收入（当然，税后会少很多）。这个“算法”掌握了，你才有动力去学习LeetCode的算法，你就不会觉得它折磨人了。LeetCode这么一看，简直跟金山一样，还不去挖？Google和微软的时薪就比较高，亚麻就相对低。这种时薪不光是用hours计算，还用体力计算。比如微软上班干两个小时活，扯六个小时蛋，然后回家精神抖擞，可以去卖房子、创业、炒股票等，相当于一天多出来4个小时有效时间；FB上班干七个小时活，被扯两个小时蛋，通勤再耗去一个半小时，回家就瘫痪了。千万别看什么华为他们效率高。我算过，他们效率很低：中午吃饭吃一个小时，还要午休一个小时，加上重新进入状态的时间，中国的12小时一天，实际上也就相当于美国的9小时一天左右，因为我们这里9小时是真的9个小时。公司免费三餐大概省多少钱？早饭就算0（因为可以不吃），午饭算10美元，晚饭算15美元，一年工作220天，25X220 = 5500美元。但这是税后的，所以5500 要乘以1.5（税率按33%近似） = 8250美元税前。还要算时间账：午餐和晚餐大概各省半个小时的话（不需要开车出去或是下楼吃等），一年会省220小时，相当于多出来220/8 = 27天。还要算健康账：因为公司有大量的蔬菜水果等。食物种类多变更有利于身体。还要算士气账：免费三餐大概能提升10%-30%的员工士气（我是吃货，所以+30%）。结论：三餐免费每年带来很大的收益，无论公司还是员工。假设一个人面一家大厂的成功率是25%，大厂有8家，冷冻期均是一年，连续坚持不懈面5年，一个offer都拿不到的概率是：（1-0.25）^ (8*5) = 0.75 ^ 40 = 0.00001 = 0.001%假设这人只有5%的成功率，且一年只面了4家，连续面5年，一个offer都拿不到的概率是：（1-0.05）^ (4*5) = 0.95 ^ 20 = 0.3584 = 35.84%可见，一个只有5%成功率的人，坚持面5年也有大概2/3的概率能进大厂。第二个假设跟我在现实中的观察很相似，也解释了为什么很多看似不强的人也进了大厂。"
程序员必须掌握哪些算法？,[],夏洛,心率算法：注意：由于最大加班心率是一个基于生理条件的心跳极限的估算值，故实际强度要因人而宜，对于初习者通常可保持在60～65%MHR即可。如果不顾自己的身体条件一味追求高强度加班，则将不利于健康。  提取码：jkg9  提取码：qca8   密码：4wi6   提取码：j8i0 
程序员必须掌握哪些算法？,[],vitu,计算机科学家投票选出最重要的算法（按照英文名称字母顺序排序）：1、A* 搜索算法——，从给定起点到给定终点计算出路径。其中使用了一种启发式的估算，为每个节点估算通过该节点的最佳路径，并以之为各个地点排定次序。算法以得到的次序访问这些节点。因此，A*搜索算法是最佳优先搜索的范例。2、集束搜索（又名定向搜索，Beam Search）——最佳优先搜索算法的优化。使用评估它检查的每个节点的能力。不过，集束搜索只能在每个深度中发现最前面的m个最符合条件的节点，m是固定数字——集束的宽度。3、二分查找（Binary Search）——在线性数组中找特定值的算法，每个步骤去掉一半不符合要求的数据。4、分支界定算法（Branch and Bound）——在多种最优化问题中寻找特定最优化解决方案的算法，特别是针对离散、组合的最优化。5、Buchberger算法——一种数学算法，可将其视为针对单变量最大公约数求解的欧几里得算法和线性系统中的泛化。6、数据压缩——采取特定编码方案，使用更少的字节数（或是其他信息承载单元）对信息编码的过程，又叫来源编码。7、Diffie-Hellman密钥交换算法——一种加密协议，允许双方在事先不了解对方的情况下，在不安全的通信信道中，共同建立。该密钥以后可与一个对称密码一起，加密后续通讯。8、Dijkstra算法——针对没有负值权重边的有向图，计算其中的单一起点最短算法。9、离散微分算法（Discrete differentiation）10、（Dynamic Programming）——展示互相覆盖的子问题和最优子架构算法11、（Euclidean algorithm）——计算两个整数的最大公约数。最古老的算法之一，出现在公元前300前欧几里得的《》。12、期望-最大算法（Expectation-maximization algorithm，又名EM-Training）——在统计计算中，期望-最大算法在概率模型中寻找可能性最大的参数估算值，其中模型依赖于未发现的潜在变量。EM在两个步骤中交替计算，第一步是计算期望，利用对隐藏变量的现有估计值，计算其最大可能估计值；第二步是最大化，最大化在第一步上求得的最大可能值来计算参数的值。13、快速傅里叶变换（Fast Fourier transform，FFT）——计算离散的傅里叶变换（DFT）及其反转。该算法应用范围很广，从数字信号处理到解决，到快速计算大整数乘积。14、梯度下降（Gradient descent）——一种数学上的最优化算法。15、（Hashing）16、（Heaps）17、Karatsuba乘法——需要完成上千位整数的乘法的系统中使用，比如计算机代数系统和大数程序库，如果使用长乘法，速度太慢。该算法发现于1962年。18、LLL算法（Lenstra-Lenstra-Lovasz lattice reduction）——以格规约（lattice）基数为输入，输出短正交向量基数。LLL算法在以下公共密钥加密方法中有大量使用：背包加密系统（knapsack）、有特定设置的等等。19、最大流量算法（Maximum flow）——该算法试图从一个流量网络中找到最大的流。它优势被定义为找到这样一个流的值。最大流问题可以看作更复杂的网络流问题的特定情况。最大流与网络中的界面有关，这就是最大流-最小截定理（Max-flow min-cut theorem）。Ford-Fulkerson 能找到一个流网络中的最大流。20、合并排序（Merge Sort）21、（Newton's method）——求非线性方程（组）零点的一种重要的迭代法。22、Q-learning学习算法——这是一种通过学习动作值函数（action-value function）完成的强化学习算法，函数采取在给定状态的给定动作，并计算出期望的效用价值，在此后遵循固定的策略。Q-leanring的优势是，在不需要环境模型的情况下，可以对比可采纳行动的期望效用。23、两次筛法（Quadratic Sieve）——现代整数因子分解算法，在实践中，是目前已知第二快的此类算法（仅次于数域筛法Number Field Sieve）。对于110位以下的十位整数，它仍是最快的，而且都认为它比数域筛法更简单。24、RANSAC——是“RANdom SAmple Consensus”的缩写。该算法根据一系列观察得到的数据，数据中包含异常值，估算一个数学模型的参数值。其基本假设是：数据包含非异化值，也就是能够通过某些模型参数解释的值，异化值就是那些不符合模型的数据点。25、RSA——公钥加密算法。首个适用于以签名作为加密的算法。RSA在电商行业中仍大规模使用，大家也相信它有足够安全长度的公钥。26、Schönhage-Strassen算法——在数学中，Schönhage-Strassen算法是用来完成大整数的乘法的快速渐近算法。其算法复杂度为：O(N log(N) log(log(N)))，该算法使用了傅里叶变换。27、单纯型算法（Simplex Algorithm）——在数学的优化理论中，单纯型算法是常用的技术，用来找到线性规划问题的数值解。线性规划问题包括在一组实变量上的一系列线性不等式组，以及一个等待最大化（或最小化）的固定线性函数。28、（Singular value decomposition，简称SVD）——在线性代数中，SVD是重要的实数或复数矩阵的分解方法，在信号处理和统计中有多种应用，比如计算矩阵的（以求解最小二乘法问题）、解决超定线性系统（overdetermined linear systems）、矩阵逼近、数值天气预报等等。29、求解线性方程组（Solving a system of linear equations）——线性方程组是数学中最古老的问题，它们有很多应用，比如在数字信号处理、线性规划中的估算和预测、数值分析中的非线性问题逼近等等。求解线性方程组，可以使用高斯—约当消去法（Gauss-Jordan elimination），或是柯列斯基分解（ Cholesky decomposition）。30、Strukturtensor算法——应用于模式识别领域，为所有像素找出一种计算方法，看看该像素是否处于同质区域（ homogenous region），看看它是否属于边缘，还是是一个顶点。31、合并查找算法（Union-find）——给定一组元素，该算法常常用来把这些元素分为多个分离的、彼此不重合的组。不相交集（disjoint-set）的数据结构可以跟踪这样的切分方法。合并查找算法可以在此种数据结构上完成两个有用的操作：查找：判断某特定元素属于哪个组。合并：联合或合并两个组为一个组。32、（Viterbi algorithm）——寻找隐藏状态最有可能序列的动态规划算法，这种序列被称为维特比路径，其结果是一系列可以观察到的事件，特别是在隐藏的Markov模型中。
程序员必须掌握哪些算法？,[],九章算法,从角度，说说面试时需要掌握的算法有哪些。具体的请看下面列表。不过，如果是准备面试的话，我建议你通过做题来巩固这些算法知识。这里推荐你到  上面进行 Online Judge，以下类别的面试题目都有覆盖到。准备之前可以试听帮你节省65%准备时间。----------3.31更新---------有朋友留言说这些算法覆盖得太少，他都“基本掌握”了。需要做以下几点补充说明。1. 我在这里总结的是程序面试必须掌握的算法知识。所以选择的是最常面试到的算法内容。面试与做研究不同，不会要求那些极少用到而又及其高深的算法。2. 有的人觉得自己“基本掌握”了，但如果真的让他来做两道题，他也许花很长的时间都写不出来完整的答案。甚至即使做出来了，还会有非常多的bug。在面试中，一个题目一般只有30-45分钟的时间可以让你作答，而且要求。如果你做不到这样，那就不可以说自己“基本掌握”。3. 以上的算法知识点，看起来很少，真正掌握、吃透，是要花很长时间的。个人觉得与其泛泛地了解一些算法知识的皮毛，不如深入地把以上面试、工作中最常用到的算法知识吃透。九章算法，硅谷一线工程师在线直播授课，已经帮助30000+人成功拿到心仪offer。，硅谷求职必备，你的面试官也曾上过这门课，点击立即报名试听更多课程信息请访问：
程序员必须掌握哪些算法？,[],Milo Yip,每种程序员的需求很不一样，与其谈具体的算法，不如说最基本应掌握复杂度、穷举、分治、回溯、贪心、等算法基础理论。P.S. 如果我当面试官问  里类似的算法，估计很难请人。实际工作需要不断学习（甚至研究）领域相关的算法去解决问题，没有什么必须掌握的。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",姚勇,以下文字都是我本人写的。为了让阅读方便，减少模糊性。我在文中以第三人视角描述。 而不用“我舅舅“，”我姥姥“，”我大舅舅“，”我小舅舅“之类的称呼。 这是一个十几年软件工程师的习惯而已。 我舅舅是王小波。我是个禁不住人肉的老百姓。资质平庸。 王小波一篇《我是怎样做青年思想工作》的杂文在我青年单身适龄的年代，给我个人做了最大程度的广告。算是他老人家留给我最宝贵的遗产之一。 除此之外，还有他那台用了很久的PC，在他去世前一年送了我。    他是汇编高手。自己用汇编写了下的汉字输入法。输入法有个功能，可以加4声。 一般拼音输入法没有这功能。这需要普通话读音正确的使用者。90年代总共也没几种汉字输入法。看过他用自己输入法打汉字。速度几乎和盲打英文一样。那时候我大学，正在疯狂苦练吉他。并没有弄懂他用了何种技术。虽然我从小学也用Z80和 做些机器码编程做游戏。但到了中学为了高考，计算机就荒废了。    他人生最后几年，WINDOWS 3.2开始普及。然后是。 他开始从DOS转向WIN32 SDK编程。最终非常任性地熬夜苦干了很长时间，把输入法转为WIN32 SDK 在WINDOWS下正常工作。当时WINDOWS已经有不少汉字输入法。 尤其到了WIN95时代。 他这么做也只是出于兴趣而不是在DOS时代的必须。就WIN32 SDK我们还讨论过一些。那时候win32 sdk真的是很难用。主要是互联网还没有（我是96年后用上的），资料很少。陌生。WIN32的体系和DOS大相径庭。全部都很陌生。而且完全抛弃了DOS那套东西。所有90年代DOS底层程序员向WIN32的迁徙都是一部血泪史。    他人生最后一年，多媒体开始普及。光驱，声卡，2D加速卡普及。95-96年他开始和我合计做多媒体出版。原因现在想起来很悲伤 ------ 他的书很难在大陆出版 。 他不得不想办法让他的作品能够让更多人看见。而平时维持生计，只能忍着严重的痔疮，每日给各种杂志写杂文稿件。 多媒体的兴起，让他感觉也许可以利用他的技术优势，自行制作电子出版物。配上插图，音乐，用电子书籍方式可以让自己作品为大众所见。他给我看了已经制作了一部分的DEMO。就和现在用Micromedia多媒体制作软件制作的电子多媒体制品很像。电子书内容是。有图案的背景。按空格可以翻页。同时有音乐。好像偶尔还会有一点动画的特效（我记不清了） 。但当时的DEMO完全是他自己用WIN32写的EXE 可执行程序。 他那是从WIN32 SDK移植输入法时，基本掌握了消息处理，，窗口控制等方法。还有一些底层的TRICK。    我大学后和王小波比较近。那几年每周末都在他母亲家相聚。他母亲5个儿女，只有他1个人在国内。于是他就经常住在母亲家，怕老人一个人，是个大孝子。母亲家旁边有个筒子楼里2间房的小屋，公共厕所和水房，冬天暖气烧得极热。偶尔我会和他住一块。里屋是他的生活起居和写作桌。外屋很小只有张床。他弟弟的孩子和我偶然会睡外屋。印象最深的就是他烧普洱茶的电炉和玻璃茶壶。里面总是有极浓的茶水，下面沉淀着大量茶叶。估计熬夜就靠那个。    目睹了他后半截人生（从我记事起到他去世，中间他出国很多年）。感慨很多。王小波有个八叔，当时双手打算盘，无比聪明是个天才。年少夭折。王小波父亲因为搞逻辑学，引起毛泽东注意，被毛接见聊了一下逻辑学的学术相关问题。69岁心脏病发独自倒在家中过世。王小波去世方式和他父亲一模一样。区别仅在更加年轻。王小波哥哥在受文革影响挖了10年煤。后来去美国博士念数理逻辑，解决了一个100多年未解的问题。最后的博士毕业论文自己系的教授搞不定，专门找了数学系的教授来看。毕业后他哥哥专心开饭馆挣钱养育2个女儿成人。准备财务自由后再著书立传。     我的最大感慨是，留得青山在，不怕没柴烧。天才也好，资质普通如我也好，人都只有一个人生。王小波妈妈去年92岁，10月刚去世，白发人送走了自己两个儿子，又过了十几年才走。之前得过癌症，靠自己毅力锻炼，恢复了。王小波去世后一年，王小波弟弟又突然去世。当时孩子都没敢告诉老人。老太太感觉不对，但又无法得知真相。只是和我说她的疑心。当时国内只有我一人，只能瞒着。不停劝慰老人没事。老太太喃喃说，“除死无大事，除死无大事啊” 。     除死无大事。 人生在世，碰到什么坎，都只会是你人生中一个普通的节点。时间一长，什么都会成为过眼云烟。 留份宽心，也许这样导致目标感没有强到能和社会精英逐鹿。但只要有耐心，不怕挫折，假以时日，目标总会实现的。作为一个42岁还在以玩游戏看动漫为生活主体的大叔，保持健康和有活力地追求智慧和有趣，做自己热爱的工作，保持善良，做精神自由的人，是我从王小波的人生学到最重要的东西。希望每个喜欢王小波的人，都有自己充实和健康的身体和精神。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",老编辑,这个月有两个人被拿出来隆重纪念，都是早就计划好的。一个是张国荣，一个是王小波。你得承认不少人是在张国荣自杀之后才听说并喜欢上这个“哥哥”，王小波也一样，97年他死得很突然，名声也在身后突然爆炸了起来。1994年，王小波的《黄金时代》终于在大陆出版了，搞了一个研讨会，一共只有20多个人参加，李银河亲自上阵做了会议记录。1994年也是中国互联网元年，中科院高能物理所第一个接入了互联网，丁磊从同学那里借来了一个账号登上了yahoo，张朝阳从MIT回国，创办四通利方，马云创办海博翻译社并在美国第一次看到了互联网，也是那一年毕业直接辞掉了电信局的工作去了广州。如果你在那个时候搞一个互联网研讨会，估计能到场的也就是20多人。说不定里面就有王小波。知乎网友Vernsu把王小波作品、书信里面和计算机、互联网有关的信息全都摘录出来做了一个网页，大家可以点击  查看全文。一共18条，其中14条写于1991年春节后到1993年春节前这两年时间里。1992年“更新”最为频繁，王小波写了自己做统计软件、输入法的事情，还有购买、维修计算机的经验之谈。从中能看出来王小波是在美国读研究生期间接触的计算机，回国之后在人大负责一个计算机室，但是因为软件奇缺，又要做一些社会学研究的东西，所以开始自己接触编程。王小波先后学了Fortran、汇编语言和C语言。为了做出软件需要的中文窗口和在电脑上输入自己的小说，他参考严氏拼音做了自己的输入法，实现了自定义拼音字库、输入后再修改这样的“高级功能”。因为王小波的IBM PC/XT内存很小，又不准他花钱买新的，所以他费了很大精力把软件的大小控制在55K以内，这让他很得意。但是因为turbo.c的原因，软件兼容性不太好，而且图形显示的速度一直不行，让他承认自己技不如人。如果当时有互联网让王小波可以把这些文字共享出来，那他可以称得上是中国第一代科技博客作者。但是1995年，中国接通互联网后不久，王小波的“科技博客”却停止更新了，最后一条是：王小波如果不是这么耿直的Boy，他本来是有机会创业的，在他的“科技博客”里面，他已经看出来很多商机，、雷军的第一桶金都是，如果王小波抓住了和中文输入这个“风口”，就不只是骗一些钱的事情了。王小波还关心了一阵硬件的发展，研究了国内进口电子产品的政策。因为穷，所以锻炼了自己维修装配电脑的动手能力。如果继续朝着这个方向发展，王小波应该在中关村盘下一个档口销售、维修兼容机，说不定就没有后来刘强东的故事了。可惜王小波很快见异思迁，开始把精力放到了文学上面，我们知道写下了《》的老榕，后来做了中国第一代B2B电子商务网站8848。一大批文艺青年，包括和王微，先后投身媒体、门户和视频网站的创办。更不要说今年是内容创业的风口，王小波若是活着，即使已经是接近65岁的人，也符合超级IP的设定，出来拿投资，Papi酱的1200万肯定是不在话下。然而王小波毕竟是个耿直的Boy。我们没办法验证他如果创业究竟会发生什么，历史不容假设。但是王小波在《我怎么做青年的思想工作》一文里面写过他的一个外甥姚勇（本尊  也跑过来答题了，大家速去围观），也是一个耿直的Boy，喜欢摇滚，喜欢文艺，又喜欢编程，一心把王小波当成楷模。爸妈的话不听，舅舅说话就听。姚勇听舅舅的话考上了清华，毕业做了程序员，但是没放下摇滚梦，帮做了一段时间音乐。07年他接受《》采访回忆王小波，说丁磊曾经来挖他做3D游戏引擎，他不认识丁磊拒绝了，后来发现居然成了中国首富，所以就在07年，这个耿直的Boy上赶着颠儿颠儿去给马化腾写了《》，全盘抄袭了《劲舞团》。但是毕竟是王小波的外甥，抄完了在CSDN上骂娘，所以你看，王小波要是生在了今天，说不定就跟这个外甥一样，去给人写网络小说、编段子、做游戏去了。做得不顺，也会吐槽骂娘，骂得比别人都好看。王小波说过，我们创业者，究竟是像他的那种人，还是不像他的那种人？----------------------
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",有臭宝的卡卡,说说我自己的理解。王小波，新中国历史上最早的程序员之一，小说圈中的Geek！早在90年，王小波就独立研发了靠买软件赚了一大笔钱深受很多中关村老板的喜爱纷纷邀请他做当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考的出路，还在加州的院子里种菜养花，日后统率中国互联网的BAT连一个萌芽都算不上啊！这位且看下文早在90年代初，王小波就接触了计算机。1988年，他毕业于美国匹兹堡大学东亚研究中心，获硕士学位，那时就知道，玩过。早期，因为国内应用软件缺乏，尤其是中文编辑器和输入法。很喜欢写文字的王小波，就琢磨着，能不能自己编一套出来。说干就干，爱捣鼓东西的王小波就利用闲暇时间学习了FORTRAN，汇编，C等各种语言，接着又学习了数据结构，算法的相关知识，还有编译原理，终于创造出了中文编辑器和输入法。在当时，这两个软件中的任何一个，都是大牛级的Geek才会去尝试的东西。这对一个当时爱写文字的他来说，简直天方夜谭，而且，类似的中文编辑器也就，都是个人倾毕生所学以及背后的长城公司、金山公司投入大量的人力物力的结果。通过卖软件，王小波也赚了一些钱，这算是最早的商业模式了。很多中关村老板，纷纷向王小波投去橄榄枝，邀请他加入公司做一名资深程序员，但被他一一拒绝。身后这台就是王小波花大价钱买的286。王小波高兴得一塌糊涂，特意拍下了一张合照。在当年3月份的日记中对此有翔实的记述，行文之间，甚是得意：当问及王小波为什么要自己开发文字编辑程序？王小波很淡然地说，这种坚韧就像是领导让你去改别人写的代码，看了几分钟之后，你一摔键盘，“费劲，不如自己重新写一个！”在《似水柔情》一书中，王小波骨子里那种执拗精神展露无遗：“我觉得我还是我，我要拥有一切——.” 读过《黄金时代》、《》的人，就会发现，王小波笔下的每一段故事都关于一个天真得有点轴的姑娘陪一个不合时宜的男人，度过了那个鸡飞狗跳的年代。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，像极了两颗钉子拧巴起来，钉在洪流里。这就是王小波，敢说、敢写，简单，率真，是荒唐的时间里真诚的存在。这也是王小波和李银河爱情故事的缩影。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，天真得有点轴的银河陪王小波，度过了那个鸡飞狗跳的年代。在第二次和李银河见面时，王小波就向提出交往的要求。李银河在多年之后坦言到，“被其表白后，感到有些难以接受，”王小波却浑然不在意，还能趁机调侃 即使再排斥他长相的人，也不会给他难堪了吧。有着的他，每每给写信总是这样开头：，字里行间透出类似孩子般的对爱的渴望与无助。《爱你如爱生命》一书，记录了王小波对李银河说过的情话：王小波给予银河的爱，是自由的，真诚的，率真的，像极了他自己。纵观王小波的一生，他对于互联网的深度体验，与其在文学上面的尝试是可以等量齐观的。王小波的互联网经历，几乎涵盖了今日程序员生活、工作的各个方面。然而，混熟了互联网的他，对其已提不起兴趣。或者说的可以更直白点，王小波学编程就是为了赚钱养活热爱写作的他。王小波选择了写作。1992年从北京大学、中国人民大学辞职，王小波成为自由撰稿人，陆续出版了《黄金时代》《》《青铜时代》《我的精神家园》等知名作品。他的唯一一部电影剧本《》获阿根廷国际电影节最佳编剧奖，并且荣膺1997年入围作品，使王小波成为在国际电影节为。高晓松曾评价王小波，“以我有限的阅读量，王小波在我读过的白话文作家中绝对排第一，并且甩开第二名非常远，……王小波是可以和媲美的。”一个比高晓松还丑的男子，却被高晓松称之为，可见王小波在文学上的天赋与创作是惊艳世人的。可就在1997年，4月11日，一个很平常的日子，王小波心脏病突发，一个人悄悄地离开了世界。在他去世的1997年，也是中国的这一年，联想超越IBM成为中国个人电脑市场霸主，张朝阳创办了搜狐前身爱特信网站，丁磊在广州创办网易，的四通在线拿到650万美金风投，四通利方体育沙龙上出现了一篇著名的帖子《》，当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考中国黄页的出路，李彦宏还在加州的院子里种菜养花，日后统率中国互联网的BAT连一个萌芽都算不上。或许我们可以打开脑洞，如果王小波不死，他除了文学创作，在互联网领域，可以去混论坛成为老榕、陈彤一般的人物，可以去创业成为、丁磊，可以去布道成为……也可能在博客微博时代成为公知代表，也可能形象崩塌一败涂地，也可能成为自媒体达人每次打赏无数……但这都不是王小波。这些都是王小波。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",Tsui Randy,补充 ：  王小波与他的好友间关于计算机和统计的一部分书信摘要。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",曾哥,计算机水平很高，恶搞水平更高，他不高兴的时候把命名都写成caonima1，caonima2，caonima3……
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",James Leo,王小波在杂文集《沉默的大多数》中［科学的美好］这样写到：“我现在既不是化学家，也不是数学家，更不是物理学家。我靠写文章为生，与科技绝缘——只是有时弄弄计算机。这个行当我会得不少，从最低等的汇编语言到最新潮的C++全会写，硬件知识也有一些。但从我自己的利益来看，我还不如一点都不会，省得整夜不睡，鼓捣我的电脑，删东加西，最后把整个系统弄垮，手头又没有软件备份。”-------------------------------------------不得不说，《沉默的大多数》这本书读起来真的是拍案叫绝：
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",知乎用户1C2ipq,高中时候泡图书馆，偶然翻到了他的杂文集。 一口气全部看完，发现他理科很好，又写书，会编程，留过学，想法之类的符合我的取向，当时就感觉打开了新世界的大门。当时高中做化学实验，想起他吸氨水我就想笑。看了看书的封面，还特别年轻，心想，这人不错啊。结果翻到了最后一页，发现97年就走了。。。。。。。当时心里一万句我操。。。有些难过，觉得他的文章什么时候都不过时。后来看完了全集，看了书信，难过，唉，我心中的王二。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",匿名用户,具体怎么好我不知道，但是20年前就能写出《从internet说起》，就知道他比好多人高到不知道哪里去了。。。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",MR乐,《姚勇：现在的社会要钱不要王小波》 转载自：  原文链接:       作为外甥，他眼里的王小波是什么样子呢？这个王小波对他有什么样的影响呢？或许，能告诉我们另一面的王小波。       出事前不久，姚勇说，舅舅嘴唇的颜色已经变紫了，电话中也透露出不舒服的感觉。出事前两天半夜一点，姚勇接到姥姥的电话，老人仿佛有预感似地说，找不到王小波，可能是出事了。“当时我们都没当真，后来姥姥的弟弟出去寻找，在昌平的房子发现了尸体。”        4月11日早晨7点，姚勇还在睡觉，父亲接到了电话。姚勇匆匆和父亲一起赶到姥姥家，帮忙给剑桥网站管理员写信找远在英国读书的舅妈——当时email还不是那么普及       “被王小波教育过的外甥”——在王《》一文中提到“天资聪明，虽然不甚用功，也考进了清华大学”        “这孩子爱好摇滚音乐，白天上课，晚上弹吉它唱歌，还聚了几个同好，自称是在‘排演’，但使邻居感到悲愤；这主要是因为他的吉它上有一种名为噪声发生器的设备，可以弹出砸碎铁锅的声音。每逢考期临近，他就要熬夜突击准备功课；这样一来就找不着时间睡觉。几个学期下来，眼见得尖嘴猴腮，两眼乌青，瘦得可以飘起来。他还想毕业后以摇滚音乐为生。”        临近下班的姚勇疲态尽显，不时摘下眼镜狠狠地揉搓眼眶；尽管如此，面对镜头的眼神还是有些失去焦点。每天精神高度集中地工作以及经常熬夜写代码，让“疲惫”成了这个32岁IT青年的常态，一如其他所有努力拼搏、处于创业阶段的IT人士。        姚勇留着长发，这可能是他“IT青年”形象的唯一“破绽”。若干年前，他曾甩动长发，用吉它弹出令人兴奋的音符，引发台下阵阵尖叫。后来他一度成为国内著名演唱组合“水木年华”的主唱，他的形象出现在“”“新歌+精选3”专辑的封面上，这是该乐队唯一一次以三人形式出现。        姚勇的又一重身份是王小波的外甥，或者按照他朋友的说法，是“被王小波教育过的外甥”——在王《我怎样做青年的思想工作》（以下简称《思想工作》）一文中提到的“天资聪明，虽然不甚用功，也考进了清华大学”的那个外甥，就是姚勇。在王小波生前的最后几年里，姚勇是和他关系最密切的亲人之一；也正是因为王小波，促成了姚勇从手捧吉它到手握鼠标的转变。        24岁前，姚勇的简历基本按照音乐人的标准写就——小学开始学习小提琴；初中进入军乐团、交响乐团；高中喜欢摇滚，苦练吉它；大学成立了自己的乐队“泡沫”，担任主唱和主音吉它。“这孩子爱好摇滚音乐，白天上课，晚上弹吉它唱歌，还聚了几个同好，自称是在‘排演’，但使邻居感到悲愤；这主要是因为他的吉它上有一种名为的设备，可以弹出砸碎铁锅的声音。”王小波在《思想工作》中这样写道，“每逢考期临近，他就要熬夜突击准备功课；这样一来就找不着时间睡觉。几个学期下来，眼见得尖嘴猴腮，两眼乌青，瘦得可以飘起来。他还想毕业后以摇滚音乐为生。”最后一句话，令姚勇的父母大为头痛。        当时姚勇的家人在国外，每周他都要去姥姥家，也就经常能遇到侍奉老人的王小波。而高中阶段就读过《黄金时代》并颇以为“爽”的姚勇，和这位和蔼可亲的舅舅很有共同语言。于是，王小波在《思想工作》里说，“不管我愿意不愿意，我都要负起责任，劝我外甥别做摇滚乐手，按他所学的专业去做电气工程师。”         时隔十多年，姚勇已不记得舅舅当时确切说了什么话来说服他，大意是“人在什么阶段应该做什么事情”、“要花多少精力去学习”、“不必非得那么辛苦搞艺术”、“走上社会的起点要高，不能大学毕不了业”等等，都是些亲人之间常见的教诲。但姚勇说他听得进去，因为舅舅把他当朋友，平等、平和地对待他。        王小波去世后，姚勇才读到《思想工作》，兼之当时他觉得自己艺术天分不够高、音乐之路也很难走，又重新回想起舅舅劝服他时说的话，品出另一些深意。在《我的舅舅》一文中，他说：“作品的灵感只能是来自于作者本身对于痛苦的体验。当我察觉到这一点时，我的舅舅感到了身上的责任。他不希望自己的经历在下一辈中重演。”        于是24岁后，姚勇的重心从20年来一以贯之的音乐，转向他同样喜欢且看上去更有前景的IT。       说到IT，在姚勇看来，舅舅可是个编程高手。在他刚进入清华电机系，对编程还不熟悉的情况下，舅舅已在用C＋＋写自己的中文输入系统、中文编辑器和多媒体系统。姚勇说，生前，舅舅一直在做自己的电子书——他希望他的书为更多人了解。       姚勇和舅舅几乎没有代沟，很多时候他觉察不出舅舅有长辈的样子。对姚勇来说，王小波更多的是一位可以热烈讨论技术、科技触角灵敏的和蔼长辈，而非一位作家——印象中，王小波几乎不在家中讨论他的书稿，姚勇笑称，可能是因为他的第一部小说《唐人秘传故事》并不入文学功底同样深厚的家里人的“法眼”，认为它不是商业小说，无法糊口；而他的小说、杂文，大多都是在他去世后出版，家人才得以看见。        姚勇说，舅舅在家里不太说话，本身也不是健谈的人，可能只有在和他聊起电脑技术的时候，话匣子才被打开。        姚勇回忆，他常常周末去姥姥家，舅甥两人就坐在计算机前，讨论电子小说和编程细节。有时候王小波会向他展示编程的进展，“敲完键盘，歪过头来冲边上的我嘿嘿一乐”，有时“和我一道痛骂微软公司的险恶——在他们发明的Windows操作系统下编程犹如噩梦。”        一次，姚勇在舅舅面前抱怨父亲不给他买计算机，舅舅表示理解，并当即决定去买一台奔腾，把自己的电脑送给姚勇。“我乐得不行，简直可以说是欢天喜地。”王小波还亲自把这些自己用了好多年的家当抱下来，给姚勇打了辆面的，“在关上车门时，我冲他招手，心中充满感激之情。看到他微笑着站立在马路边上缓缓向后退去的身影，心中闪过一阵阵温暖之意。”        1997年，王小波去世前的最后一个春节，是和姚勇、姚勇的姥姥一同度过的。和往年一样，舅甥二人在院里放了鞭炮，迎接崭新的一年。之后，从小身体不好的姚勇受长期的困扰，打了一个月点滴，还与父亲因学业的事情闹僵，正躺在床上无人照料时，王小波打来电话安慰，让姚勇好好照顾自己，还担心着他的学业问题，“怎么样也得拿到毕业证呀”。        出事前不久，姚勇说，舅舅嘴唇的颜色已经变紫了，电话中也透露出不舒服的感觉。出事前两天半夜一点，姚勇接到姥姥的电话，老人仿佛有预感似地说，找不到王小波，可能是出事了。“当时我们都没当真，后来姥姥的弟弟出去寻找，在昌平的房子发现了尸体。”         4月11日早晨7点，姚勇还在睡觉，父亲接到了电话。姚勇匆匆和父亲一起赶到姥姥家，帮忙给剑桥网站管理员写信找远在英国读书的舅妈李银河——当时email还不是那么普及。在打开电脑的时候，姚勇哭了，那里有舅舅未竟的《》和未出版的杂文，然而这位高大的骑士却再也不回头了。         那年秋天，姚勇制作了一个网站，把舅舅的一部分作品放在上面，纪念这个教育他人生道理、和他讨论程序、带领他进入网络世界、影响他之后人生观价值观的人。         1998年，姚勇留校做了程序员；2000年，跟朋友一起开发网络游戏3D引擎；到了2002年，姚勇用“潦倒”来形容自己的状态，身边的钱刚够吃饭；与此同时，“水木年华”的一名成员离开，清华校友想邀请气质和音乐上都“摇滚”的他参与进来，姚勇犹豫再三，终于舍不了做音乐人的夙愿，点头同意，但又放心不下他的3D引擎，就买了个笔记本，在演出等候的时间段，继续做他的技术。“当时真的累坏了，几乎每天都要飞行、演出，别人不演出时还有空余的时间，我得写代码，一个脑子永远分成两半，一边完了忙另一边，永远没有休息的时候，因为两边都是自己的兴趣。”        2003年，的心脏出现了早搏现象。他决定退出，重回网游领域。        也就是在2003年，某天晚上十点多，把姚勇叫去，希望他来做3D客户端。姚勇说，当时不知道也不认识丁磊，觉得还是希望自己创业，就没搭理这事。2005年12月31日，姚勇在博客上写道：“前段飞机上翻某本精英杂志，几年富润榜，似乎就03年他是中国首富。我心说行，也就我当时还摇滚青年的范儿，傻逼嗬嗬还真拒了个首富。要知道后来想做的这白日梦会给我带来那么多技术之外的破事儿，我早上赶着颠儿颠儿给人写3D引擎去了。”        几年间，姚勇胃病频发，事业也有过不顺利。“现在的社会不需要舅舅说的智慧、趣味，要的是钱。舅舅的思想曾经在我脑中存在，现在也一直都在，但你面临的责任、处境、解决问题的方法等现实，逼迫你不能用这些思想解决问题。但经历了那么多，我的信仰仍然是我的兴趣，是我坚持的动力所在。”        还是在2005年12月31日这篇博客中，姚勇写下如此一段：“身边所有被资本支撑的产品，都呼啸而过。伴随着几十亿几十亿滚滚而来之后又滚滚而去。只有我，依旧在原地，抱着最初的那些童真不放。青春逝去， 再不复返。有时醒来想，为兴趣而活，真这么错么？想实现一点梦想，真这么难么？”
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",胖头鱼,Programming language 也是一种语言，语言功底好的人，写程序也很有天赋，很庆幸王小波没有选择去写代码
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",知乎用户iEI6C8,1996年发表
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",匿名用户,不值一提的长处罢了
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",Larry Lai,Fork without any hesitation.
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",阳光冷色,王小波的技术到底够不够牛，我是无从了解的，因为那个时代也许已经与比他更牛的人存在的，但是他的精神是现在依旧可以在IT民工身上看到的，我们是技术流，只为了技术，一个纯粹的技术疯子他不懂得他的创举能带来多少利润他只知道可以更方便自己的使用，他追求更高层面的技术，永不停歇!
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",林少,"Show me the code, 有强烈的想看王小波代码的冲动，想来这些代码在计算机圈中比他的文字还珍贵，还能""人肉""到这些代码吗？"
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",匿名用户,他是对外经济贸易大学的C++老师毕业于北大数学系深藏功与名。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",Attic Weng,总之人家是觉得写书和写程序都能挣钱，不如写书去了。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",Rachel涂,今天读《爱你就像爱生命》  看到这页我实在是看不下去了 我是来看情书的啊 前面各种爱 各种信任 各种撒娇啊 怎么画风不太对了……然后开始怀疑人生……毕竟我一个交互设计的研究生，一直赖着不学编程……所以，今晚我去图书馆借了一本编程入门的书……大一的时候，偶然在图书馆找到了小波老师的一本书，当时我对小波老师的认知就是：一个我还没读过他作品的作家，所以我就找了一本读。忘了是《青铜时代》还是《》了，在教室里读，刚好那天开会，教室都是人，真的，看的脸红了。。。然后这么多年，再也不看小波老师的书（心里阴影太大），最近是因为关注老师，（2017年以前，我以前真不知道他们是夫妻）所以觉得还是想再看看小波老师的书，结果……然后又查了一下，1978年高考，考上人大，这最起码说明还是有碾压当年的同龄人能力的吧……美国匹兹堡大学……然后大部分人的知道的身份是作家……反正这两页 我也看不懂……最后：完全0基础、文科编程小白，求好心的大神指点入门（数理化生一个比一个差）谢谢
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",阿壮,我一直都以为王小波只会天马行空，装深沉。。没想到他还会计算机编程这一套。。真牛逼。。
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",知乎用户9p1FpR,不知道用什么语言才能形容我对小波的敬仰，他于我不只是偶像一般简单，更是一种信仰。信仰每个人都有追求自由捍卫尊严的权利，别人无法剥夺。拒绝外界的设置，fuck the rule！花了很长时间，写了又删，删了又写。不知道怎么表达自己的心情，纠结很长时间，终于明白我所想说的不过是小波，你影响了我的人生，你的书陪我走过最艰难的时期，给了我最大的动力，谢谢你！
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",吱蛛,王小波
王小波的计算机水平有多好？,"['王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？', '谢谢各位！！']",江户川雨和宋翔宇,王小波的本科修过计算机专业，后来去了留学的时候，接触到了国外先进的计算机知识。1988年他从国外回到了北大，当了计算机房的“”，而且就在计算机系统普遍使用DOS的90年代初。因为国内应用软件缺乏，据说他独立开发了一款类似干word的软件。他费了很大的精力，把软件的大小控制在了55k以内，这个让他很得意。王小波的编程能力，绝对不逊色于同一时期的雷军和马化腾。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",ze ran,不是因为外国公司效率高，也不是因为他们开会多。同类的app，不论是电商还是视频，国内的app远比国外的复杂，变化更快，功能更多。三天一小改，五天一大改，过个节都要出一套ui，新功能层出不穷，做活动此起彼伏。国内程序员的工作量，就是比国外的同行多，同样多的功能，国外程序员做，照样加班。关键是，这些功能，真的有用吗？知乎可以提问，可以回答，因为它是个问答社区。但它还能直播，能视频，能充值，能交易，能借书，能开课，还能众裁。正中间的按钮，有时是想法，有时是会员，是创作，是发现，但没人在乎，大家只是看看首页的时间线罢了。这么多的功能，对用户来说，体验不一定有几年前的版本好。大量的加班时间，花在了一些可有可无的需求上。微观上看，是kpi焦虑，宏观上看，是违法成本低。有多低呢？大概像水电费那么低。多开几小时的灯，就能出个新功能，成本近乎于零，没人用也不亏，何乐而不为？没有法律层面的支持，劳动者就像在囚徒困境中，谁都不想加班，谁都不敢先走。随着时间的推移，加班成为新常态，向各行各业蔓延。生活越来越单调，越来越重复，人从生产者，转化为生产资料。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",Rhaego,你自己随便拿出一个app看看吧淘宝，支付宝：要喂小鸡？要建农场？拼多多：要各种小游戏，要砍一刀，要各种抽奖抽红包（100%最大奖但就不行，你就得花几秒钟去看一个抽奖动画）微信：直播，视频，小程序美团：也是各种小游戏，稍不留神就点进去了中国的KPI啊，明明是个购物app，明明是个支付app，明明是个外卖app，明明是个即时通讯app为什么要增加那么多各种各样花里胡哨的小游戏？亚马逊有小游戏吗？有小游戏吗？Google有小游戏吗？说白了，不就是骗老板骗投资人的钱吗？无法增加用户时长，咱们就小游戏走起，甚至送钱让你玩各种app内置的垃圾游戏，说白了，就是花公司的钱，花用户的时长，增加自己的绩效。往上，骗得是投资人和老板，一看数据，全都增长往下，坑的是用户，版本三天一小更，五天一大更，让你每天多花十来分钟挣那几分一毛钱往内，写代码的不堪其扰，一会这需求，一会那需求，天天996，把自己的app跟摊大饼似的，约摊约大。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",invalid s,嗯，被经理举报了：现在我切换到表扬模式。是的，他们效率更高。但是，国内程序员不可能通过提高效率减少加班和压力。因为这事的决定权不在你而在公司。之前“开发和产品经理因为识别手机外壳颜色而打架”的传闻之所以能引起广泛共鸣，就是因为这类事实在太普遍了，太多人感同身受。因为中高层。——。怎么样？满意了吧？满意了我们继续。所以，当你花大力气设计了一个精简高效的架构，把一个很难的问题干净漂亮解决掉时，绝不会有人击节赞叹——恰恰相反，他们觉得你捣鼓了个把月才产出几百行代码，反而会犯嘀咕：这人是磨洋工呢，还是不会？你面向搜索引擎编程，乱七八糟拷一大堆东西到代码里，用到用不到都留着，KPI表现反而会特别亮眼。一天几千行代码当然亮眼。一群外行，怎么会知道这几千行里面就两行有效呢。类似的，你兢兢业业，一个bug都不让出，人家就把你忘了；反之，你大大咧咧，一个功能你能写出800个bug——经理看起来就很忙很努力，因为他得不停的和你交流；你也很忙很努力，不停跑经理那里讨论问题：全公司你最忙你经理最敬业，不奖励你俩还有天理吗？！你看，你好我好大家好，身为聪明人，你为什么不多写点bug呢。当然了，这是极端情况。大多数公司还是没这么极端的——他们的中高层还不是那种。即便如此，他们中的绝大多数——包括多数程序员——仍然不懂软件工程。他们并不知道，或者说并没有想过，今天你写的每一行代码，都会是明天的新代码的地基。即使你知道，也没办法让中高层明白。如果你今天写的太过随意，明天就很难在这个基础上扩展它；如果你着急完成任务，今天不先把昨天的设计缺陷修改掉，而是想一个办法绕开……那么明天你就不得不绕着圈子躲开更多问题。越往后，就越难改；越难改，就越容易出bug。但是，如果你想改昨天的代码，你就得先解决前天的问题；想解决前天的问题，大前天乃至大半年前的设计缺陷你就得逐一解决掉。然后，这大半年里，你就完不成任何新提的需求。反正至多做三两年我就要换工作了。随他去吧，完成眼前的工作要紧。因此，为了急功近利的眼前效率，中国程序员的长远效率自然变得极低——越往后越低。我曾经接过一个任务。因为高层设计的严重问题，我们不得不在去（稍微懂点的都知道这需求有多奇葩：打个比方的话，这就好像让发动机制造商在活塞上做一个阀门以便随时泄压一样怪异。原因是我们的整车商忘了装启动机也没有离合器，所以需要减轻发动机阻力方便人家把车推起来）。项目经理不懂。他觉得一条SQL语句也就是0.0x秒的事，我们的流程耽误1秒问题应该不大，所以就答应了。我说每个用户都可能卡这么0.0x秒，人多了咱这模块吞吐量就没法看了。这个咱不能接。真要接也行，得改成多线程架构，得多安排时间。经理说没事，直接加就行。做出事了他们负责就是（言外之意，一旦接了这个，将来我们自己的锅也有办法拉他们一起来背）。既然都这么说了，我就动手做。做完，内部测试没有任何问题；但一上线，整个系统死了。原因是，那个库负荷特别大，一条数据库更新语句能卡几秒甚至几十秒。将来人多了还会更卡。经理说，算了，你改多线程吧。我思考了三天，决定不动我们这边的架构；而是设计个thread_call接口。任何传给thread_call的函数都会在另外的线程里执行——为了避免读写到调用函数的局部变量、然后在线程执行时调用函数已退出，thread_call内部会自动申请内存，把转交给工作函数的字符串等通过指针引用的参数统统复制过去；当线程执行结束，函数返回值也会保存在某地等待查询（超时或查询后自动删除），同时释放用到的资源。为了实现这个，需要一个全局单例类负责管理线程、及时清理用到的资源；同时最好有一个线程池和一个内存池，免得频繁申请/释放。不然长时间运行下去，把内存弄的千疮百孔，程序就更容易出问题了。内存池我已经写过一个泛型版本，直接拿来用就行。剩下的线程池、资源自动申请/释放（基于RAII和泛型，不支持原始指针因为无法确认空间大小、也无法确保复制成功，玩过泛型的都懂），加起来一百来行代码解决。最终代码量300多点，其中一大半是注释。这个东西轻松的一次编译通过；然后挺过了各种测试，没发现任何问题。这东西差不多相当于给C做了个简易协程框架（当时协程概念还没流行起来，不然我就把也实现进去了），今后遇到任何类似的“需要并行工作、但又不涉及数据竞争”的需求，直接写个处理函数然后丢给thread_call执行就好。你看，如果程序都照这样写，是不是就会越写越快？因为你昨天写的东西，今天可以拿来就用。写的越多，积累越多，实现新功能时需要重新实现的东西就越少，效率自然越高。但是这个东西让项目经理作了难。这是因为，如果算KPI的话，等于我花一周写了300行代码；然后又测了一周……两周300行代码的产出，这实在太少了。反观别人，一个用户注册，人家一个字段一个字段一个字节一个字节的用代码检查、复制，轻轻松松搞出来500行。很水的几个功能轻松灌水上万行代码，然后部门KPI也有了，个人重要性也体现了——而且修不完的bug：你看，离了我们这个部门，公司真不能过啊！可我傻乎乎的300行代码搞出这么复杂个东西，竟然还测不出bug……项目经理是知道这里面功能多，但上面觉得你忽悠他。300行代码你还能吹出花来不成？而且，既然没有bug，以后人家还需要你这个部门吗？问题都解决了，我们这些人……还有继续雇佣的必要吗？总之，他希望以后再写程序，尽量写长一些……而且，为什么要复用呢？其实每一个类似的需求，都是可以给他整个几万行代码出来的嘛。没错。人家的预期是：这是个挺复杂挺难的任务，你应该加班加点忙上几个星期，提交几千上万行代码，到时部门KPI有了个人业绩也好看——将来每个类似任务都应照此办理。而我呢，轻轻松松300行代码，杜绝了类似任务的出现——什么都不用管，加一行thread_call，全都妥妥贴贴了。一个任务对应一行，这KPI还能看吗？你看，面向目标的不同，面向KPI编码就必然使得实现臃肿、问题频发、每天996过劳死……但做起来其实轻松愉快，因为你完全可以磨上仨月洋工，然后吹嘘“多线程有多难”；然后还能让高层不断找你、解决诸如、数据脏读脏写、死锁、内存碎片导致长时间运行后大块内存分配失败等等等等疑难问题——既让你显得重要，又能轻轻松松“骗”来大量的KPI，最后还不需要去学鬼画符一样、难的不要不要的泛型技术……而面向问题编码呢，借助泛型，自动识别、复制函数参数（它们可能来自调用者的栈，随时可能失效），再加上用池来加速资源回收/分配效率、提前杜绝内存碎片问题——这完全是个简单轻松解决的小模块。而且只需解决一次，我们自己的“类协程库”都出来了，以后写程序会越来越快、越来越好：你甭管我怎么做完的、耗了多少时间，功能点我给你实现了、上线后，是不是对双方都有利？但是，后者在这个公司行不通。代码量少没KPI你气不气？bug写的少没人找你显得你不重要，倒霉不倒霉？将来项目失败抓人背锅时，别人说我天天加班996007态度端正；而你呢，955一分钟班不加，这态度是不是很能说明问题？从上到下都不懂你能怎么的？别说这家公司的管理者了，他们的技术人员自己都不懂。我两个关系比较好的同事，还真以为我们是公司里干活最少、最不重要的几个呢。因为别人忙忙碌碌总有干不完的活、修不完的bug，高层中层领导天天围着转，求爷爷告奶奶但任务就是做不完，重要的不得了。而我们几个公司公认的技术专家呢，每天到时间就走；座位上冷冷清清，从无领导过问；经常上班时间闲极无聊于是借“学新技术”的名义逛论坛……时间久了，他们自己都心虚：为啥别人总是有干不完的活、见不完的领导？为什么我们经常整周整周的没有任务、闲坐着发呆？人家是不是比我们干的多、任务难啊？不对啊，每次分配任务，分给我们的，都是别人接不了、不敢接的啊？直到有一天，午饭后散步聊天打屁谈到这事，我才觉得不对，提议回去看看工作日志/提交记录之类东西。那天我们大概照例聊到了下午三点吧——没错，因为事少，因为要都要不来工作，一个月至多也就忙一周，955都大块大块的空闲时间。别说加班了，平常上班我们都经常偷空出去散步。悠哉游哉回到公司之后，我们就去翻看所有同事的提交记录和bug报告数据。这才惊讶的发现，我们比其他同事完成的功能点数量高出5~10倍、难度也普遍更高，bug率却近乎为0——别人一个功能点能有密密麻麻几十个bug，而且上线几年bug都抓不完；而在我们看来，这些都是压根就不应该发生的低级错误，而且我们提交的代码的确不包含这类错误。所以，别人一年只做三四个功能点，每个功能点都要出十几、几十个bug；而我们呢，一年起码几十个功能点，加起来不过3~5个bug（我更是一年只有1个bug，而且bug原因还是需求没写清：某个字段让返回字符串，我按照C惯例后面加了个‘\0’；对方用的java，不能识别这个\0）。问题是，“我们接的任务最多最难”，这事我们项目经理知道，中高层领导不知道。中高层领导知道什么呢？他们只知道，这个任务总是在别人那里卡住；他们只知道，系统出了问题，该找的人肯定不是我们几个（从不出bug自然不需要找）——所以你猜，在他们心里，谁更重要？于是我决定辞职。这是我第一次进这种公司，也是最后一次。因为这种公司完全是“逆淘汰”。水平越差越吊儿郎当越吃香，水平越高越兢兢业业越被边缘化。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",知乎用户0wT52Z,先说结论：跟国外公司比，国内公司最大的问题就是管理者素质不高，对问题的边界定义不清楚。提需求的人没有成本，无止境地提不靠谱的需求。码农自己开发时也追求快糙猛，提高了系统的风险。总的来说，经理很忙，产品很忙，码农很忙，测试很忙，运维也受不了。。就是这样的结局。我在血汗工厂，大亚麻。整个大部门有80号码工。想知道大家工作有多轻松。。。我先上图为敬。这位是最忙的。。这Commit记录你们看着办。。。 我们部门是前两年重组出来的，做了七八个全新的项目，按血汗工厂的风格，SDE是要full stack的，还要讲政治，写个类都要摆出个设计文档。跟自己组，隔壁组过完设计，大家blibli一通留言，然后针对几个service的API划分和命名再掰扯个一周。最后谁都说服不了谁，摆出一句”求赐名“这时高级经理或者SDE会猥琐地从希腊神话里找一个神的名字出来命名service，再随机指定几个比较顺眼的命名，会议就结束了。除了内部Tech的会议，偶尔也会参与业务方的会议。在这里也是要讲政治的，你参会了就必须要多说，无论说什么，一定要存在感巨强。当小透明是行不通的，为什么，小透明就说明你这个人没想法，能力不行啊。某种意义上，声音大就是impact，就是能力！！有没有！！接着说对SDE full stack的要求。你以为我们有前端，有测试，有运维？想多了，新开的service，如果涉及前端页面。是要自己写的。。。。没错，别管你是前端工程师还是后端工程师还是，首先你得是个工程师，工程师就没有解决不了的问题。。。我们做前端时也要开很多会啊，跟业务方沟通进展和Demo时，业务方可以提意见，一旦提了意见是要sign off的。不是随意说说那么简单。这样有个好处，很多东西定下来了就不随意改变。提需求的人是面临很大的成本，你老提了需求又改，又sign off，不出两月大家就觉得你这人不靠谱，会给你很差的反馈。谈完了前端，该到开发阶段了吧，开发时50%的时间在也业务代码，50%的时间在写测试代码。如果没有测试代码，code review是说啥也过不去的。写完代码之后，内部有很完整的自动部署工具，把你的单元测试，集成测试都跑完，然后部署测试环境，环境等等。包括日志监控，都是要自己上手的，也是前文反复说的的概念。SDE真的是啊。。。这么一说确实挺忙的，实际上50%的时间都在会议，20%时间写代码，20%时间写测试代码，10%时间捣鼓一下配置，监控。但从来没有人加班，整天在家办公，这公司怎么还没黄。。怎么还没凉。我来总结一下，会议是生产力。讨论得越清楚，返工就越少。比如系统设计，几个组的人一起讨论清楚系统的边界，上下游系统的关系，你的问题边界和需求是很清晰的。码工自己啰啰嗦嗦地对全流程服务。测试，运维等看似工作量繁重，实际上有效地降低了风险，极大地提高了软件的质量。跟国外公司比，国内公司最大的问题就是管理者素质不高，对问题的边界定义不清楚。提需求的人没有成本，无止境地提不靠谱的需求。码农自己开发时也追求快糙猛，提高了系统的风险。总的来说，经理很忙，产品很忙，码农很忙，测试很忙，运维也受不了。。就是这样的结局。我说得这么清楚，应该大家都了解了吧。求赞。。比心。。最后
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",Freezind,其实科学的规划和合理的安排可以令每个人的工作量减少的同时令结果质量更高。然而有些人就是不信，怎么办呢(摊手国内很多公司的领导自己都没有想清楚就交代任务。自己多做1%，就可以让好几个手下减轻一半的工作量，稍微动脑子优化一下流程更是不得了。其实这就是领导能力差的表现，他们还不自知。真正的领导能力不是令人服从，而是让大家用正确高效的方法完成任务。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",L-Jay,先问是不是，再问为什么。难道美国的程序员就不加班吗？他们就一天八小时工作，还想来就来，想走就走？非工作时间完全找不到人？还有什么食物饮料都免费提供？让我来告诉你真实的情况吧，还...真是这样的。加班文化应该是中美两地最明显的不同了，形成这种差异的原因不是一两句可以讲清楚的。我在两个国家都工作过，也在不同岗位工作过，所以就尽量从不同角度来简要说一下。国内程序员加班严重，首先问题不在程序员这个群体。产品层面，拍脑袋决策多，美其名曰：互联网思维、小步快跑、试错思维，其实是没想清楚，反正我就需求一提，技术团队来做，上线后成功了我是产品天才，失败了也没啥坏处，找个借口说什么“互联网市场变化太快”也能搪塞过去，或者找个新项目，继续画大饼。国内的产品经理实在是太多了，很多还是刚毕业的小鲜肉，没有一点经验积累，凭借天马行空的想象力，提一个需求，就能让一帮技术专家为之操劳好几个月去实现，这简直是不可思议的。即使产品经理很厉害，但人数一多，每个人都要业绩，都拼命想点子、提需求，技术团队怎么能招架得住那么多需求呢。于是就会这些现象：产品经理没有想清楚某个功能的价值，或者带来的收益不痛不痒，而技术团队则需要为此付出巨大的心血，也就是加班。当然这也不一定是产品经理的错，国内公司，老板的指令太多了，不说了，你懂的。在美国这边，产品经理大多是行业经验非常丰富的人，要么是从工程师转过来，要么是从多年的商业领域经历然后读个 MBA转过来。上线一个功能，经过严谨的理论推演、多轮前期调研、科学的 AB test，从提出 idea 到最终用户看到更新，经常耗时半年或一年。很多不成功的 idea 还没面市，就因为数据不好而“胎死腹中”。这样一方面提高了产品需求的质量，另一方面也给技术团队足够多的时间来设计和实现一个可持续发展的架构。管理层在做决策时，往往更重视产品更新迭代，而忽视技术的建设。比如说技术团队有100个小时，老板可能会把90小时都投入到实现产品功能，给技术优化、修补技术债务。于是就会出现技术实现非常粗糙的情况，举个栗子，给你一周时间，实现一个 IM 功能，你还会考虑什么模块化、可维护性、性能优化之类的吗？当然是怎么快怎么来，百度一下有没有别人实现过的代码，ctrl+v / ctrl+c，一点运行，诶，跑通了，上线。所以国内很多程序员看别人的代码，感觉都是一团 shit，完全没法维护，干脆自己重写一个。技术老大能跑到老板面前说“我们先把产品需求停一停，让我们的技术团队好好地优化一下基础设施吧。”吗？只要他不是傻子，都不会这样说。话语权低还体现在，对产品几乎没有决策权，甚至不能质疑产品决策，提反对意见，总会被产品经理各种理由挡回来，产品经理有一句话终结争论的尚方宝剑：这是老板要做的。久而久之，技术债务越堆越高，bug 越来越多，程序员不加班，谁加班？而美国公司的现象是，技术话语权非常高，一个没想清楚的产品需求，能被技术团队直接打回去。同时，技术团队可以自主地花很多时间在技术优化上面。产品不能按时上线？经理说：没关系，延后，按照最优的技术方案来推进。有时候你想赶紧上线，提交一段粗制滥造的代码，会被同事鄙视死，被老板骂死。每个季度最后一个月，专门抽出精力，来弥补技术债务，产品需求放一边先。在这样的环境下，短期看起来效率低，但长期是最高效的。国内是“欲速则不达”，美国是“慢工出细活”。知乎上有一个比较热门的讨论：腾讯的技术建设是否落后？这不但是腾讯的问题，实际上绝大部分公司的技术基础设施都非常差。有多少个公司能养一个专门的 Infra 团队？有多少个技术团队能专门成立一个小团队，进行 Infra 优化？即使有，有多少个公司能保证 Infra 团队的成果能在全公司推行？我相信能做到这样的公司是凤毛麟角的。中小公司不必说，在这样高度竞争环境下，哪有财力养一个不能直接带来 KPI 提升的团队，即使有钱，也没时间搞优化。而大公司呢，即使腾讯这样的体量，有一个 TEG 事业群做基础设施建设。但是现实情况是，依然没有全公司通用的内部工具，各个团队依然在重复造轮子。阿里算是做的很好的，前几年开始推行的大中台战略取得了显著的成果，解放了各个产品部门的生产力。计算机程序这种东西，一个人写和一群人写，几千个用户使用和几千万用户使用，是完全不同的概念。没有强大的基础设施建设，技术团队越壮大，效率越低，用户数越多，bug 越多。出来混总是要还的，今天没有人关注基础设施，未来就会又无数个程序员为此加班。而说回美国这边，专门的 Infra 团队几乎是每个公司的标配了。这也是的结果，创始人、高管团队一定有很强的技术背景，走过了很多弯路，所以非常重视基础设施建设这种“重要而不紧急”的事情。最后再来说说文化的差异。美国人非常注重个人和家庭，牺牲自己的时间来给公司加班，这是不可能的。一到下班时间准点走，非上班时间完全不查邮件。很多公司入职培训就专门强调了怎么平衡工作和生活，其实就是说：下班时间就是你的时间，你有权利不处理公司事务。反观国内，不知道从什么时候起，加班就是约定俗成的。还出现了看似很有道理的人生经验，比如“年轻人就应该多拼一下”，“加班能学到更多东西，对未来也有好处”。加班，竟然成了光荣的、可以拿来攀比的现象，比如说加班到凌晨一两点，拍个照，发个朋友圈，收到老板的点赞很开心。而管理者呢，还就吃这一套，谁加班多、会来事儿，考核的时候就更有好处。在这种加班氛围下，甚至还出现了“伪加班”。早上十点到公司，上个厕所、看会儿新闻、刷刷朋友圈，就到十一点半了，什么工作也没做，然后准备吃午饭；饭后逛一逛、睡个觉，又到2点上班时间了，写会儿代码、刷刷知乎，一下午又过去了，很多公司有免费晚餐，吃完饭回来7点左右，再写写代码，磨到10点。哦耶，又是充实的一天呢，发个朋友圈给老板知道。其实一天有效工作时间还不够8小时，但就是“加班”了。综上，大概就是国内加班严重的原因。我觉得这也是某个时代特有的现象，谁都没有错，谁也没有办法改变这种情况。在国内这样一个高度竞争的环境下，公司为了生存必须跑快点，个人为了发展必须多做事，毕竟你不做就会有千千万万的人来抢。等到中国真的发展到美国这样的发达程度，生存的压力减小了，才有可能谈更好的生活品质。关于找工作，我拿到过 Google/Facebook 等大大小小公司的众多offer，如果你想知道怎么在北美求职，
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",程墨Morgan,我在参加工作前看过《人月神话》，思想上也很受推崇敏捷开发的国外前辈影响，加上我工作的大部分公司都是外企，所以，我观念上早就认定这样一个道理：。换句话说，加班肯定会让程序员工作效率降低。当然，话不能说死，有一种加班实际上有利于效率的，那就是程序员主动加班（我说的是真的主动，而不是签了“奋进者”之类协议之后的“主动”），如果程序员真心热爱自己的工作，停不下来，加班把事情昨晚，当然更好。但是，这同样不长久，之后程序员依然需要休息才能恢复过来。其实，当过程序员的都明白这个道理，要是效率真的高，还很犯不上加班，那么，为什么程序员还要加班呢？我再说个大实话吧：。管理者如果懂得现代管理，知道让员工发挥主观能动性、让员工热爱这个公司、让员工身心健康对公司对员工都是好事，那就不会强制加班，但是，我国目前大部分管理者无此觉悟。我国大部分管理者和资本方的意识（或者潜意识）是：我给你工作机会，我培训你工作技能，我给你工作经验，过几年之后谁说的准你还跟不跟我干，赶紧压榨你才是正经的，能多压榨一点是一点，什么科学管理，狗屁，没那时间也没那必要去搞。从程序员角度出发，这个行业风气如此，你对一个公司不满意可以辞职不干，但是你换一个工作可能还是这样的风气，所以你逃不出这个行业的魔掌。。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",唯心而已,来传递点负能量，做了4年多游戏了在国内做游戏都是外行指挥内行，做的越快越多改的越多还不如直接拖到deadline之前做完，大家都没时间改，你好我好大家好在国内，你做的快是工作不饱和，下次分配任务你会被增加工作量，而且你做的快还不能早下班，早下班就是没有集体意识这种环境下怎么出效率出产品？还有看楼下说开会的，国内开会现在也开，开会定了之后leader说改就改，你还不能有意见，因为人家说是对数据负责，改了之后的工期还要算在你头上，你上哪说理去？
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",匿名用户,时隔两年多，更新一下。两年前相比，国内近年来对/（翻译为研发效能）开始反复提及，这也算是一种进步吧。然而，和上一次说的情况相比，新的奇葩问题又冒了出来。某司两年多之前声称要改革，然后...然后制定了一堆据说是反复研究了google之后定义出来的“研发效能标准”，比如啥要多少天，覆盖率要多少（这个还算正常），说开发人员必须负责所有自动化用例编写（？？g家的兄弟出来说说，你们帮印度qa在写自动化？），什么自动化成功标志就是线上bug漏出只有多少多少个，哦，还有个啥圈复杂度（我是这么多年第一次听说）...此外还加了一堆线上运维指标...其实说白了就是自动化覆盖+运维响应，这也没什么稀奇。然而这帮中层干部就开始作妖了，说一定要统一，单测框架要统一，研发流程要统一，工具全部要统一。这个统一不是业务开发说了算，是并不负责业务产品的研发部说了算。而这研发部呢，其实是以前多测试部门...其理由是：业务团队的开发不懂怎么设计通用型服务（貌似qa很懂），所以不管是xx还是yy（不说产品名字，反正都是大家从小用到大的东西）历经十多年内部的工具体系统统不算数，统统都是“没考虑通用性”，只有某顾问定义的“效能体系”下给出的工具才能是“标准统一”。然后就疯狂要hc要人呗，做一堆奇葩的工具，这部门自己都无法全部串联起来，然后再申请hc，说要去“培训开发团队写单测”，不然的话开发者不知道不会写单测...具体就不写了，不然太多细节。总之好处是研发体验开始收到重视，是个好事，但由于中高层的一窍不通，底层一线缺乏实际经验，cr也好ci也好能起到什么作用都不清晰，只能说勉强在摸着石头过河。然而不会有人出来回答：能否大规模统一使用jenkins用jenkins？这tm怎么好去申报项目？怎么好意思在大众面前吹逼。一定要自研，一定要“统一，面向未来”...******分割线******举个例子，中国某家一线互联网公司，没有统一的ci体系，问一下有没有内部公用的jenkins系统，说都是各个项目组自己搭建维护（修正一下，今天了解到其实有一套，应该是在jenkins上搭建，设计思路很有些特色，虽然初次使用一如既往被网络隔离卡了一下，但是我觉得还是个不错的系统。然而，也失去了使用各种插件的可能。。。不过应该满足我自己团队目前需求了。这套他们自造的轮子似乎只是用来给应用做daily build，跟CI其实没啥关系，比如并没有针对单元测试做出什么东西，可能压根就没觉得CI要包括测试。。。）然后不知道从哪里规定“代码必须只能在公司内部机器”，所以你要学美帝去work from home是不可能的，要接触代码必须在公司工位上。所以呢，单元测试没有的，自动跑测试是没有的，code review更是做梦。所以只能瞎check in，然后不敢回家只能等，出了问题赶快加班，测试全靠手，然后最爱扯性能和安全。最可怕的是因为大多数中高层老板在他们的职业生涯中是在国内早期互联网浪潮中野蛮成长的，对现代开发流程和工具可以说没什么体会和了解，现在面临新浪潮的冲击，首先是要让他们自己能理解现代模式，这就更难，别人说老子不玩你那套一样在赚钱，你忽悠谁呢？累吗？但是另一方面，国内程序员自己也有相当大责任。小组之间互相不透明，生怕别人看到自己代码，不愿开放共享，造成难以独立debug（所以国内把“联调”看得很重）；对微服务不理解，很多喜欢把自己的东西作为“组件”（也就是库或者独立程序）提供，非要别的组用各种奇葩方式来调用，说自己已经提供了sdk，已经达到要求。。。然后就是各种艰难的调试。。。还有个现象是一方面老板重业务，程序员又喜欢用性能做借口，我看起来很快就能实现的改动，下面的非要说影响性能所以要做几周。。。没有那种get things done的思维，一天纠结些细枝末节的东西。产品还压根没几个人用就在纠结性能～～～我tm看着他们做得都累，何苦。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",匿名用户,话说回来，谁会真的996满负荷拼命呢，还不是上有政策，下有对策，得过且过。最关键的一点是，不能做一块总是能挤出水的海绵，否则就等着被挤干吧。这不，世界杯话题聊了两个小时，晚上继续加班。今天带薪拉屎 了40分钟，出去抽了三次烟，每次15分钟，聊聊各种话题（不包括上面说的世界杯话题）50分钟，午睡晚起了10分钟，早上打卡后早饭吃了15分钟，刷刷手机网页各类信息1个多小时，等着编译器转菊花......我是996，我骄傲 ✌️。最后补充一句，一个人加班是自己能力的问题，整个公司（大多数人）加班就是公司的问题。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",沈世钧,恰恰相反。国内程序员，单打独斗的能力绝对一流，不敢说远超越国外，但至少不逊色。但问题是，为什么这些一流的程序员和在一起，同样的产出，却要比别人工作更长时间，付出更多辛劳呢？我们不禁要问，我们多付出的时间和辛劳都去了哪里呢？想到这，我要分享一个故事，就是最近，疫情期间，我朋友公司的故事。朋友做Java后端开发，受疫情影响，公司业务大跌。要说，这种情况下，大家应该无事可做才对，但和朋友聊天，情况恰恰相反，朋友的原话是：“忙疯了！原来加班到10点，现在则是12点，活根本干不完！”听罢，我回了句“呵呵”，然后冷冷的说：“瞎忙，行为艺术而已！”沉默了一会，朋友回复说：“太对了，就是瞎忙！”“因为没有业务，怕被裁员，大家就越拼命加班，好显得自己很忙，很重要的样子。”“其实，公司都没业务了，做的东西不过是闭门造车，根本就是伪需求！”“但这不重要，要的是态度，是表现！”朋友的这段话，真真道出了程序员整日忙碌、整日辛苦的天机。而这个天机恰好在疫情期间被戏剧性的放大了，但本质和原来并没有区别。。因此，朋友，如果你是一名程序员，你可曾质疑过自己，我们每日开发的东西，有那些是用户真正的需求？又有那些不过是些“表演艺术”？也许，经过思考后，你会发现，我们的忙碌根本经不起审视，它一直很“荒谬”！荒谬的领导，荒谬的需求，荒谬的任务，荒谬的KPI，荒谬的…最后，导致的是荒谬的忙碌！
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",Osteroza,严格执行劳动法严格执行加班薪酬补偿制度聚餐时看到这个问题，恰巧旁边坐了一位在皇家银行做码农的同学，问了一下他加班和工作强度的情况他的回答是加班不少，但项目管理人员事先要和员工打招呼，并且发比正常时薪高两到三倍的加班费，如果是在周日超时加班，加班费可能高达正常时薪4到5倍。看在待遇的份上，他本人是很愿意加班的，毕竟下班回家闲着也是闲着，加班有这么多钱拿何乐而不为。但，即使他想加班，所在岗位也不允许他随意加班，原因就在于高昂的加班费。每次领超额的加班费，他首先要和项目管理人员签一份合同，他本人同意加班，经理同意发加班费，然后经理要拿着这个合同再去人事部门得到批准，人事和经理两边都过关后这份文件再转到财务部门，这时财务部门才给他发加班费用。如果一个项目组总是要加班，总是要支付大额的加班费，财务部门就会面临超支的问题，质问项目组负责人在经费和人员安排上是不是不合理。如果项目方表示活太多人手太少，财务部门就要征询人事部门为什么事先不招够有水平的人；反之，如果项目总是出现延误而不得不临时加班，人事和财务要质询项目管理人员的管理能力。当然，这里面有一个时间差可以利用。项目部门可以和工作人员签合同让他们加班，然后再以人事部门和财务部门不同意为利用不发加班费。我同学表示这种事情也发生过，不过非常少，经常这么干员工们会投诉，管理层会被纪律和HS（Health and Safety）部门撸掉的。如果公司什么都不干，劳动法伺候之不过不过不过企业的应对办法有1，找临时工，即劳务派遣工，contractor，虽然都坐在同一个办公室内，但这些员工不享受任何福利，没有退休金，没有劳务补偿，想让他们加班多久就干多久。作为平衡，这些人的时薪比正常员工通常高两倍。2，不按时薪和月薪来，按照项目进度和完成度发薪水。开放远程和在线办公，八个小时工作时间排进十二个小时才能完成的任务量，如果你还是能在八小时内完成，算你是大神你牛×；如果不行，自己回家在远程平台上继续干完，不过既然是下班后自己在家干活，就不算是加班。3，量大而简单重复性的工作交给实习生。实习生不算正式员工，任劳任怨，一般只要给比法定最低薪水高一点点的工资就分满足了。4，签 zero hour contract，上面第2点的加强版，在合同里点明了这份工作要经常超时加班，下班后还要on call，你愿意签就来干活，不愿意就滚，一个愿打一个愿挨。在就业压力下，以上4点很容易执行，大批老印老中排队干contractor同时还自愿把薪水降低到普通员工还低的水平。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",李小白,这个题目能出书了。两边的IT的企业五花八门，形形色色的都有。大部分答案都是抱着批判的态度。主要谈谈自己的看法吧。毕竟我也只在一家美国公司工作过，国内的工作经验为0，不足的地方希望指正。社会形态的差异肯定是原因之一。美国是一个很讲究Work Life Balance（工作生活平衡）的国家，人权大于公司的利益。所以如果企业如果过分“压榨员工”，是肯定会被劳工部告的。大公司只要有任何风吹草动，都可能惹上负面新闻。比如，告的就是Google付给女性员工的工资低。当然男性员工也在告Google。举这个例子只是说，在我们眼里，美国是一个非常的国家。两国人民从小接受的教育非常不一样，美国人偏理想主义，而中国人比较现实主义。美国的企业非常怕事，哪怕他们没错，他们都会花重金摆平这件事情。比如前段时间的UA事件，Starbucks事件，都很好的说明了美国企业有多怕事。所以过度加班这种高压红线根本不敢碰。作为一个企业CEO，该破产就破产。美国的企业是非常好“碰瓷”的，告自己雇主的事情是在太多了。在我们眼里，屁大的事情他们都能够上法庭。公司即使没有错，也会花钱摆平。不然一帮好事的媒体整天在显眼的地方报道这些新闻，非常影响企业的声誉。企业是趋于利益的。而且有时候确实需要加班来满足需求。所以很多公司喜欢雇佣亚洲人和墨西哥人，因为这两种人即使加班也不会抱怨。很多美国公司用各种非美国人的Contractor和ICC也是这个道理。当然美国某些公司也是加班很严重的，比如四大。但是（听说）美国的四大好像没国内累。只是相对而言。美国人看重家庭大于工作，家庭比工作重要。所以那种牺牲自我，保全公司利益的行为是很少会发生的。当然中国也不是最差的啦。日本加班比我们多多了。这边加班太多了。日本人讲究的是为了工作可以抛弃一切。要论程序员的幸福度：美国 > 中国 >>> 日本。我没有见过美国码农的公会。也没见过罢工。。。公会发达的是欧洲。法国是公会的巅峰。啥屁事，都罢工，而且完全不管后果。你能想象地铁和大巴司机罢工吗？整个城市会陷入大混乱。有一次考试，我辛辛苦苦背完了所有的概念，结果地铁罢工，考试取消。。。导致我第二周得继续再背一遍。大学经常学的Encapsulation(封装）也是主要原因之一！OOP编程里面的封装其实非常重要。美国这边的公司非常注重Encapsulation。最简单的例子就是，用web framework去写server比徒手用原生java sockets去写要容易多了。很多公司都喜欢Everything As Service (把所有技术都封装成服务），然后把这些Service做成Platform（平台），然后模块化。比如在Google，所有的Infrastructure（架构）都被封装成Service了，使用起来只要关心业务逻辑和资源分配就行，非常省时间。在新的Server里面加Feature也只需要加一个加一个新的模块就行。相比而言，如果花大量时间去调各种开源软件的配置，会花大量的时间。Google的做Infra时间比Facebook长，Infra种类多余FB，这也是“Google比Facebook轻松一点的一个原因”。每次开发产品，我都有种搭积木的感觉。从，到pipeline framework，到monitoring和resource，基本都是非常直观的事情。偶尔有问题，一个邮件就能解决。平心而论，硅谷的Infrastructure比国内好太多了，每个公司都有专门的组去认真研发新的Infra。所以硅谷的公司，只要不是太小，都多多少少有一些开源的项目。凡是做Public Cloud Computing的公司，封装都不会太差。国内现在很多公司也开始做了。因为Cloud Computing讲究就是把自己Infra打包给外面的程序员使用，同样的功能，接口越简单越好。如果外面的人都可以很好的使用，自己人就更容易了。硅谷技术强，但是产品迭代速度比国内差太远了。所以，Uber，Airbnb，Linkedin在国内的市场表现都不怎么好。很多技术壁垒不高的产品，比的就是用迭代速度去占领市场。技术壁垒高的产品，不是迭代速度能解决的。中国的IT公司对用户的需求感知的特别快，他们清楚的知道用户需要什么。国内公司对竞争对手的动作也特别敏感（抄的特别快）。你会发现， 阿里，京东比Amazon的功能多多去了。饿了吗，美团也比Ubereats功能多多了。王者荣耀的新东西出的实在太快了。Google的大佬很多都是工程师出生，重技术，轻产品。而硅谷大部分有特色的新型互联网企业早期都有大量的前Google员工，所以这也是硅谷的一个特色之一。所以中国的IT和硅谷其实是两种IT。迭代速度和发现新的Use Case是中国企业的强项。为了保持这个优势，唯一的方式就是加班了。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",灵剑,主要是因为在美国违反劳动法代价太大了，扯别的都没啥用……大家都必须合法经营的时候，自然是在这个基础上去比拼效率；而大家都可以一定程度违法（比如996）的时候，996的天生有优势，那么公司也都会倾向于996走起。在国内，目前无论是仲裁还是起诉，都难以对这种利用KPI逼迫程序员“自愿加班”的做法提出补偿请求，而且即使成功，也只是针对单个员工，并没有集体诉讼的手段，也没有集体诉讼的群众基础。另一方面，中国程序员群体很年轻，买房、结婚压力很大，本身也有许多人愿意花更多的时间、甚至一定程度上牺牲健康来换更多的钱。这也导致程序员群体本身没有办法团结起来去反对996——如果严格40小时工作制，但是工资减半、年终奖减半，很多程序员也是不乐意的。其实说到底，为什么美国对于劳动法执行这么严格？的确8小时工作制是无产阶级通过艰苦斗争甚至流血牺牲争取来的，但到了今天，坚决维护8小时工作制其实更有利于大资本家，因为如果不严格执行，大资本家有舆论监督，而小资本家偷着996，就很容易追赶上大企业，尤其是在互联网行业；反过来，严格执行8小时工作制，大企业就能在同等条件下产生体量优势。所以大企业会反过来推动更严厉的执法，保证小企业不会利用不对称的优势威胁自己的垄断地位。所以你也会看到美国不遗余力地要把劳工权益保护写进自贸协定里。中国反过来，大企业带头加班，这就比较烦人了。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",big boss,这个我来答吧。本人在美国IT公司快十年了，大小公司都待过，也做过经理雇过人，从来没有加班过，除了唯一一次做release做到了半夜，当时还是report给一个中国老板！不仅不加班，而且我还经常在家工作。平均每天上班时间，扣除通勤，只有6个小时，额。。。很多公司还有unlimited paid-time off了。。。我每年带薪假至少用20天，不亏着，当然也不好意思用太多。这相当于每年工作11个月。上班有时候还能开个小差，吃个2小时的lunch break，出去散散步，买个咖啡，看个医生啥的。我做的最过分的是在旁边ucsf开了个健身馆会员，有时中午开车去游个泳洗个澡，回来一身氯水味估计下属都能闻到。为毛不用加班呢？分析有一下几点，有个人原因，也有企业文化和法律原因。最后，说实话，空大妈没关系，也就不养眼呗，但胖子空大妈最好还是别再招了。。。我能证明胖子空大妈挡着我拖行李。。。。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",李沐,美国程序员工作比中国程序员工作轻松、加班少总体来说是事实，但都归结到美国程序员效率更高，制度更好之类就过于片面了。我觉得主要原因在于别的一些地方，例如加班的边际效用，程序员的生活习惯。背景：我在baidu（北京）和（湾区）都干过，微软研究院（北京）和google研究院（湾区）也实习过，因为目前做云计算和开源，所以也接触过很多公司。整体来看，所以我觉得问题在于一些更本质的东西。这里是我的几点观察：。美国社会成熟度比较高，在湾区生活的同学也许过去10年都感觉不到特别大的变化，而中国则翻天幅度，特别是互联网领域。例如手机支付，美国普及很难，因为信用卡已经很普及了，手机支付带来的好处不显得很大。但中国的基础设施没跟上，所以手机支付在便利性上提升特别大，同样的技术，大家会不惜余力的去推广。经济学上这个叫做边际效用。同样的技术，中国的边际效用比较高，所以大家可以全力推广。美国因为起点高，所以更加谨慎一些。这个影响到了加班文化。通过加班可以完成更多工作。如果项目经理觉得这些工作带来丰厚回报，他们肯定会压着组员做。在中国很可能是这样，例如做出这个产品马上会有人用，升职加薪跟着就来。然而在美国，即使今天做出来，用户也是慢慢的过来，完全不需要急着那么几天。。美国程序员年龄普遍偏大，因为计算机行业在2000年在美国就很红火（参考互联网泡沫），培养的大量的程序员，这些人现在很多都有小孩。在美国小孩都是自己带，双方父母不怎么帮忙。请人又特别贵，例如湾区工作日请人带娃一个月起码是2千美金起。而且学校课程松，所以放学后都要靠父母照顾。此外，很多人住的房子都带院子，请人打理费用贵，很多时候大家亲自动手。例如在创立百度前曾醉心于在湾区种菜。于是在加班边际效用不高的情况下，大家纷纷早点下班回家做家务。并冠冕堂皇的叫work-life balance。我认识好几个未婚朋友，他们觉得每天那么早下班实在是太寂寞，毅然回国去了创业公司，并对996大家赞赏。记得也表达过类似的观点。计算机技术日新月异，而且随着经历增长，需要提升各项领导能力。这些都需要足够多的时间去学习。我认识的厉害的人无一不是在下班后努力挤出时间工作，丝毫不比996工作时间少。与其现在羡慕别人轻松，不如埋头努力工作十年再来看。===19年更新===我对答案中对996淡淡的赞同表示很惭愧。反观我自己，在身体和家庭允许的一些时间里，可能每周会工作60、70小时。但如果每周坚持是不可能的。很是不赞同企业家大肆鼓吹必须996。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",2gua,不知道别人的情况，说说国内的几个典型情况：
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",生净信者,亚洲国家，人多资源少，没人能过上真正优雅的生活要么你拼命，能维持阶层不倒退。要么你被别人踩下去即使你觉得这样没意思，想安心过简单的生活，不想踩别人，还有人看你位置好，想踩你一脚呢你跟中国人比谁牛逼，谁更会拼命，谁更拼命谁拿钱更多，这样比比就算了。人家美国欧洲的人，跟你不是一个维度的，谈不上在一个指标上竞争。人家生活质量高，不是因为人家更牛逼更拼命，而是人均资源丰富（美欧澳），靠金融资本生存（欧洲），靠掌控世界资源和能源（美国），靠已有科技优势（美日英法），靠资源出口（美澳）。。。各有各的活法，唯独不靠劳动压榨国民，不需要这么拼命搞只有靠劳动力的国家，才尊崇努力奋斗，996，养老靠自己，70岁也要买房，这样中国要复兴，宣传捋起袖子加油干。美国要复兴，川普号召工人去996了么？逗呢。人家要的是制造业回流，加强知识产权保护，要中国金融开放，唯独不逼着自己国民去加班，去延迟退休，去靠自己养老，去买房。。。依靠劳动力的国家，老龄化就完了。所以中国歧视年纪大的，码农3040失业，前台只收年轻小女生，年轻人在北上广奋斗十几年然后被撵出去，等等除了中国，亚洲的日本新加坡也是如此，新加坡活到老干到老，和天朝有一拼。不过它们发展的早，积累的红利多，福利情况好一点简单的道理现在你知道为啥人家要移民了吧。移民之后变nb了吗？非也。出了国门，没人在乎你多拼命多牛逼。也不要问为啥在美国朝九晚五就买得起大house，在中国996连首付也攒不起。情况不一样，单纯比谁努力，没有意义
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",匿名用户,管理文化不一样。中国官大一级压死人，所以像狗一样言听计从的狗逼多，上面说什么就干什么，不考虑可行性，不会据理力争，然后把pressure压给下面，到时候甩锅下面。美国，你是一个manager就要为自己的决策负责，干不成要买单，因为你对你的同事有责任，于是会陷入管理层的bullshiting，很多事情就不会放下去做，也会丧失一些idea实现的机会。所以下面干的轻松。说白了，中国就是靠着频繁的无用功来以量取胜，奈何我国农民太多，这帮农民失败了就无处可去，他们失败了就是死路一条。所以你是这种人的管理，让他们跪下来叫爸爸都行。期待中国人口红利消失的那一天，让这些狗逼集中的企业彻底没人来，然后这些落后的企业淘汰完蛋，这些占据了资源的企业才是中国创新上不去的根源，它们不死，中国进步不了。就像当年的国企一样。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",Xenophon Tony,"更新：我澄清一下，并不是说国内的996是因为国内文化导致竞争环境激烈，而是中国的消费者市场发展了小三十年尚不成熟，消费者在消费习惯没有养成之前，乐于去接受并尝试许多新鲜事物，这鼓励了很多企业在盈利模式和获客方式上进行微创新，并间接传导到了程序员工作量的提升上。以下是原文真没觉得美国程序员的工作比中国程序员效率更高。你要说为什么，只是因为硅谷大公司面向的全球市场产生的近乎垄断的高额利润（Google, fb等），能让他们以最好的薪酬吸引到一小撮世界上最优秀的人，而这些人的效率可能是普通人的十倍，公司绝大多数重要的工作都是他们完成的，同时再以较好的薪酬吸引到次好的一拨人，高薪养着以保证他们在简单的问题上不会出错。相信很多在湾区工作过的人深有体会，很多人可以花个一年在某个页面上加一个小feature，至于为什么这么久？因为公司大了，所以red tape严重，想做一个新feature需要反反复复讨论审核个半天，大家各执一词，等最终讨论出来，ERD写出来，代码也push好了，production rolled out，一年就这么过去了，然后程序员们高高兴兴地拿着这个去。而硅谷的中厂小厂面对竞争激烈的市场环境仍然是要加班的，不信请参看Uber 1.0。Uber加班最严重的时候，是在推进中国业务的2015年，后来业务卖了，大家也就清闲了不少。至于现在的Uber，加班现象也是有的，主要在Uber Eats，为什么？因为市场没打赢啊，眼看着公司业务没有盈利，而DoorDash在快速蚕食市场，下了班还想走？谁不知道加班导致递减？但面对竞争这些公司有办法么？何不食肉糜？我知道国内对普遍不重视，这是导致程序员在部署测试等方面效率不高的原因之一。可问题是国内互联网公司这么多，有一家公司能够在某个领域一招鲜吃遍天了么？当大家都觉得淘宝要垄断市场的时候，拼多多横空出世，本来很多budget是要投去建infra提高开发者效率去的，现在好了，砍一部分预算，大家快去做新feature吧。(我只是举一个可能的场景，我知道阿里的infra很好）在没把高额利润以垄断的方式攫取到手上之前，幻想什么公司文化，公司管理能够本质上地改变公司生产效率，无异于痴人说梦。拿成熟稳定的市场和仍然在不断激烈变革的市场做比较，显然是不公平的。说点题外话，你问我国内为什么这么卷？总是有这么多搅局者逼着程序员们整天加班？为什么硅谷大公司的产品万年不更新，没有那么多花里胡哨的功能却也能吸引消费者为之买单？说白了还是由于欧美有着更成熟的消费市场，消费者的消费习惯早已在上个世纪养成，容易满足且愿意为简单稳定的功能付费。而中国的情况恰恰相反，从最早满屏小广告的win 2000时代，被人诟病颇深的流氓软件，再到三亿人都在污染票圈的拼多多，商家们苦于没有办法从用户身上直接赚到钱，开启了一条又一条骚操作，在业务模式上进行创新。一时间，厂A厂B厮杀博弈，大叔大妈羊毛薅起。夜幕下，的灯光璀璨，程序员们一边红着眼苦哈哈地改着产品经理的需求，一遍刷着知乎读着每天写五行代码去泡一杯咖啡的硅谷程序员，炫耀自己上个月只commit了个位数次的代码，同时吐槽为什么中国的程序员效率不高，真是这个时代最美的风景线。"
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",王海,其实国内加班大多是表演式加班，早上去的晚，午饭后搞一大觉，晚饭后吹会牛逼看看网页，有效工作时间不超过八小时，但看上去加班了…
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",Lambo,主要原因就是中国管理者的平均水平远不如美国。包括最近知乎上一系列所谓的“环保政策导致我爸的工厂倒了所以中国制造业药丸”到处宣泄戾气的（前）小资们。管理者永远想的是如何更高效的压榨员工的时间，而不在乎如何提高员工的效率。讲到如何提高员工对公司的忠诚度，他们的想法就是给你画饼，你现在如何如何努力将来就。。。可以让我买豪车和大别墅啦！讲真，即使经济增长率下来了，筛选掉这批根本不应该做管理者的low货是我们无产阶级之幸。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",刘晓强,转载一些新闻片段：嗯。。我一直都不太理解，为什么这个世界上有一个“薛额定的猫”的美国。在美国人自己拍的纪录片之中，美国的一个盛行加班文化，压力巨大无比的国家。无数大企业半夜12点，都要求员工随时在线，等候老板的“关照”。一歌颂起美国人的职业精神，就是工作道深夜什么的。但在另外一帮人的嘴巴里，美国人成了一个永远不加班的国家？？说美国好的时候，就说美国人薪酬高？不加班，老板多么宽仁，多么体贴。但在中国员工，要求自己的福利，工资要想美国人看齐的时候，那个美国就摇身一变，变成了一个天天要加班，压力巨大的国家？？某些人要埋汰中国的时候，就说美国人的福利多好，多好。。。工人要提高福利，减少劳动时间的时候，又转过头说，你们看美国如何如何。。。很多人，能不能统一一下？？？真的很想知道，美国的真实情况到底是啥样呢！！能不能统一一下台词？？？BI中文站 7月4日 报道毫无疑问，做一个软件开发者是一个不错的职业，尤其是在科技之都硅谷。科技初创公司的员工们往往备受宠爱，享受着各种诱人的福利，从高昂的薪水、奖金和股权到免费的餐饮、按摩、公司内部的健康俱乐部和国际旅游，不一而足。但是，所有这些宠爱都是有代价的。一些软件工程师在问答网站Quora上吐槽了自己的生活。下面看看他们是如何谈论硅谷工程师这份很有前途的职业的。1谷歌（微博）的一名网站稳定工程师每天上午九点钟开始上班，每天下午七点钟离开公司，回家后再加班到晚上十点钟。他需要随时保持警惕，因为他必须在5分钟内对出现问题的网页做出回应。“每天下午七点钟带着背包和充满电的微博电脑回家。如果我在路上接到了网页出故障的消息，我必须立即靠边停车，在5分钟内登录系统开始排除故障。如果我是通过电子邮箱接到的故障警告信息，那么我可以等到回家后再处理。”2. 一名在一家芯片公司上班的软件工程师称，他每天上午九点钟开始上班，通常会忙到半夜才回家。“你看看时间，又快到午夜时分了。该回家了，快到半夜了。在开车回家的时候，我就想我幸好住在离公司不远的地方。等到上床睡觉的时候，已经过了午夜时分了。沉沉睡去，一夜无梦。闹钟在早上六点半钟响起。”5. 除了超长时间的工作和上下班塞车，其他程序员还谈到了其他一些烦心的事。一名程序员抱怨称，在硅谷工作最令人郁闷的地方就是“你拿着令人艳羡的高薪，却仍然买不起地段稍好一些的房子。”10. 最后，对于很多硅谷程序员来说，繁忙的节奏、冗长的工作时间和持续的压力往往会让他们感到虚脱。有人这样描述自己的生活：“起初，我以为虚脱就像跑完马拉松后那样疲惫。你睡个三天时间，就又恢复了。但是，实际情况并非如此。我确实很累。但是，当我连续四个月每周工作60个小时，期间还到中国出差三次，我基本上就累得对工作提不起任何兴趣了。我不敢相信我对自己热爱的事业竟然会产生这样的感受。”…………有员工总结说，在苹果工作就像在一个高压的压力锅内，需要承受巨大的压力，而且交流也是自上而下的——偏执的管理、不尊重、持续的紧张以及长时间加班，这大概就是公司的文化写照。单方面的自上而下的文化决定着：任何企图改变、影响公司以及讨论如何改进工作的行为都不被允许。你需要做的就是拼命的工作、不抱怨，因为还有不下10人在垂涎着你的位置，这方面你的主管不会忘记。值得欣慰的是，在报酬上，苹果不会亏待你。据@東網报道，等等，这还不够！除了这些，苹果公司还会给员工提供4个人一间房的住宿，如果你觉得私人空间不够，想租房，你还可以和公司申请每月1000美元的租金津贴。还有，苹果公司因为面向全球进行人才选拔，挣钱是一方面，你还可以同其他不同文化背景的人交流，这种精神财富相当难得。但是苹果公司也有许多要求，首先是要求员工要对公司的工作内容守口如瓶，不但不能向任何人透露工作内容外，还不能和不同的部门透露，也不得私自走进其他部门的办公室。据苹果员工布兰德说：他曾问过一位有幸参与2010年初代iPad开发的员工，对方说自己花了一至两年时间研究一个9.7英寸屏幕，但对其功用毫无头绪，直至iPad上台一刻，才恍然大悟。（本部分内容引自知乎作者“张力柯”，有删减，特别感谢）国外加班吗？Answer is YES。我数不清有多少天在微软redmond campus熬到晚上11点。但是，几乎没有熬通宵的经历，熬通宵带来的不光是健康伤害，而且实际上浪费了白天时间。manager一直给我强调的：重要的不是你做得多快，重要的是你对自己工作能力和工作量有合理的估计！也就是，给你一个任务，你要知道如果你用正常工作时间大概会花多久，而不是打保票下决心说要攻克难题要不吃不喝不眠不休——no！只有正确的时间估计，才能让团队的进度合理，manager也才能和上面去argue去帮助上面做决策。另外和国内差别很大的一点，国外的加班，都是自愿，都是我知道我要解决什么问题，我也明白解决了这个问题之后后面的工作会很轻松，所以我心甘情愿我愿意，如果我真解决一个技术难题，等到的是升职或奖金。国内的加班，是不确定性，是上面非要说某某问题很严重，你也不知道为什么会这么严重，然后你熬更守夜搞定这个问题，没过两天上面又说又出现严重问题。。。如此反复，你永远不知道你到底解决了什么，也没发现你天天加班到底帮你减轻了什么负担，似乎反而越加班越忙越多问题。。。然后。。。要么猝死，要么跳楼。。。 谷歌能够连续6年蝉联《福布斯最佳雇主排行榜》榜首，绝非只是“工资给的高”那么简单。钱买不到员工的开心，也买不来层出不穷的创新，更何况谷歌的签约年薪还并非硅谷里最高的一个（坊间数据显示Facebook和Twitter都略高一点）。而且，谷歌的平均工作时间也不像很多人以为的“完美8小时工作制”。根据Quora（美国的知乎）的回答，一般工程师的平均工时为每天9-10个小时，如果资历深、管理责任大，还可能会“加班”到11+个小时。可即使是这样，谷歌还是成为了员工最喜欢的雇主。原因何在？原因在于那9-10小时的工作时间还包括了20%的自由工作时间（做自己喜欢做的创意）、午餐休息时间，甚至健身房活动时间等。用谷歌的话来说，员工轻松无压力的工作环境才能最有效率，20%的自由工作时间才更有机会创造出如Gmail、GoogleNow甚至是AdSense这样的产品（这些可都是谷歌目前重量级摇钱树服务）。 亚马逊是美国科技行业内出了名的压力大、工时长，“堪比中国华为”的一家公司。不仅《纽约时报》连续两篇长文点名批评，Quora上多位内部人士也如是回答——《纽约时报》宣称的每周80-100小时的工作时间虽然有些夸张，但确实发生过。基于不同的工作小组，这种情况发生的频率也不尽相同。可以说，亚马逊奉行的是加强版的中国式“996”。今年8月，亚马逊想要做出改变，它准备将某些特定团队每周的工作时间降至30小时，员工只能拿到平时75%的工资，福利并不会缩水。然而并没有什么人愿意这么做。因为亚马逊是考核淘汰率相对较高的硅谷公司，表面缩减工时并没有太大意义，你不在工位上的时候，活也一直在等着你，压力也一直都在。不过话又说回来了，既然那么苦那么累，员工为何还留在亚马逊呢？亚马逊又是怎么成为硅谷最伟大公司之一的呢？正因为亚马逊的领导方向清晰并始终保持技术的领先，员工虽然压力巨大，但成就感也强；虽然工时长，但学到的经验也多。曾经在亚马逊设在卢森堡的欧洲总部工作知乎网友“火车Stranger”，说，“亚马逊是我工作过的最好的公司”。在亚马逊，伴随加班的，是办公室外美如画的风景。当然，起薪高也是一大主因。专门追踪企业薪酬的指标网站“薪酬网”日前公布了全球科技业入行薪水前10强，新进员工待遇最优的企业就是亚马逊：彭博亿万富豪指数显示，其创办人贝佐斯如今也坐拥逾617亿美元财富，成为全球第四大有钱人。…………
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",自由飞,同学，你至少犯了这几个错误：1、美国程序员≠google程序员≠fb程序员。就像段子里经常说的：外国≠美国≠欧洲。当然，你可以说google的程序员产出很牛逼，来继续这个问题。那么你的第二个错误就是：2、高质量的代码≠公司的成功程序员的问题，在于“手里有个锤子，看什么都像钉子”：手里有技术，就觉得所有的成功靠技术。真的是这样吗？google确实有点牛，但Facebook呢？它用的技术有多牛？做出这样一个网站要多高的“产出”？^_^，你把代码当成流水线上的零部件，谁产出多谁赢么？以我粗浅的商业经验来看，哪怕是一般人眼中望而生畏的“高科技”公司，技术对于公司的成功也远没有我们想象的那么大！道理很简单，对普通人而言，你很高科技；但对你的竞争对手而言，你一般也就高那么一点点。这一点点的差距，总是可以用其他东西抹平的：比如包装、营销、价格……甚至其他不光彩的手段，不然为什么百度打跑了google呢？上面说的都是些小问题，这个问题以及下面大部分回答最核心的错误：哈哈，你被洗脑了哟，同学！你以为你加班，是因为你效率低么？除非你们公司是这样的：效率低的才加班，效率高的就可以不加班甚至提前下班——这样的公司有多少？加班最根本的原因，只有一个：。这个道理简单得我都不想说，说起来有点侮辱智商的赶脚。当然，你可能会说，为什么美国人就可以不加班？有法律的原因，也有工会的原因，或者其他啥啥啥的原因，但归根结底：大多数美国人不愿意加班。加班干嘛呢？有这点钱够生活就行了！我需要时间和我family一起去holiday……美国的资本家找不到愿意加班的人，咋办？莫非还能这样？当然，美国人不加班，中国人愿意加班，所以欧美搞外包把公司迁到中国——这又是另外一个问题了，也再次证明我的说法：所以说一下哪些嚷嚷着“加班会降低效率”的同学，以为这样就可以让资本家认识到……别YY了。who care？反正过了35岁就把你开掉，有的是年轻人愿意拼可以拼！4、压力和老板无关和第3条的理由一样，你的压力，也来自于你的竞争者。搞清楚谁是你的竞争者，非常重要。作为一个打工的，本质上你就是在出卖劳动力。所以，是谁在抢你的生意？很无奈，但这就是现实。大家可能不爱听，但事实如此冰冷，飞哥也没有办法。你可能想破脑袋就是不明白：那为什么美国人就可以……因为人家有积累啊。如果我爸妈已经给我留下了二十套房子，我天天收租子就可以过得很滋润。我特么也不会加班，我也不会有啥压力，是不是？！今天的美国人，说白了，不干活国家养吃低保也能活得挺自在，加个毛线班！这话小粉红又不乐意了，呵呵，但是，这就是差距。你不正视差距，永远没有办法缩短这个差距的。与其天天不忿撕逼，我个人觉得不如埋头做事——尤其实在当下这种困难的时局里。我们的上一辈人，其实已经用他们的血泪，给我们一些积累，所以才会有这样的问题：找问题的时候顺手答了一题：所以，我们能做的，也只有尽力为下一代人多一些积累而已。已收藏到：欢迎关注，收藏，o(*￣︶￣*)o另外推广一个这个，^_^：
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",uncle creepy,土老板心态给闹的，付了钱去大保健必须一条龙全部到位。举个例子就是，管理层看码农不996就是工作量不饱和，更高层看管理层就是你们组有人还没996呢，我为啥要给你们招人名额啊，至于什么业务可以填满人力，让这些人自己去想或者瞎折腾呗。所以动不动就是得重构，往页面嵌入各种小游戏，以及各种升级换钱的无聊玩法。都是制造需求。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",老王和老张,想到了这个视频美国程序员与中国程序员的真实写照附赠网友评论@三秋之王希望她多出点Bug，还是她不会的那种@尘埃安然别人家的公司和别人家的程序员@这尼玛10分钟到公司，我倒是也想啊，我们公司附近的房租比我工资都高@七月桃安中国程序员十点下班都算早的@不加班的码农凌晨1点下班，出租车司机劝我转行@ZERO看来只有厨师在上班吧，妹子整天都在吃@柳叶丝绵没有她上厕所的视频吗，是不是被小编减掉了@洗澡的视频怎么不见呢，小编，老实交代其实从妹子的工作效率来看，肯定是高学历精英 。能应聘进入全球500强，就一定程度上说明了妹子的实力。无论是技能或者是做事效率都得到了公司的认可。况且大型公司提供这样的福利条件本身就是正常的，你进阿里巴巴看看，马云爸爸还能帮你当证婚人呢。我是小v最爱写文章的运营部大妹子
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",方应杭,因为美国管理程序员的那群人（项目经理、技术总监等），比中国管理程序员的那群人，水平高很多。系统性问题往往要从上层找原因哈。到底哪个轻松？还真不一定。Update：看，还是有很多人在帮 996 找借口，支持这些管理者。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",北南,我稍微总结了三点：1 在工具上舍得投入虽然我们常说，但大量工具和新语言的成功持续引入，还是极大的提升了国外程序员的工作效率。其他答友都有总结，我就不多说了。我们需要注意的是，国内有些公司成熟以后，甚至还没长大的时候就开始非常排斥新工具新技术。因为学习这些新东西需要时间，技术升级也需要成本，而很多公司对这方面似乎没什么忍受力。2 工程师文化国内公司很多都是项目经理和技术总监事无巨细的管理。这一方面让工程师压力很大，另方面也会减弱工程师的创造力。这种合作方式，让程序员很累，怕做错，而其实经理更累，怕下面不按他说的做，于是就要反复确认细节，双方沟通占用了很多时间。其实有些事，由工程师自主完成，可能效果更好，更省心，也会更有创造性。3 社会和公司一定程度上的更宽容国内很多程序员生活在忧虑之中，怕35岁被切了，好多人真的是为了自己不被淘汰而写博客，你说你累不累？你看轮子哥人家在知乎就是纯来玩的，这才叫爽。你看国外不少五六十的老程序员还敢跳来跳去，享受玩技术的愉悦感。这其实也不能怪谁，因为国内的职场就给人一种不进则退的压迫感，但国外好多人一辈子就是普通高级程序员，他自己和家人也很满意和开心。在多数国外的公司，你说你下午要去看自己儿子踢球，你说你家里水管需要维修，甚至你说你就是想在家休息几天，都是很正当的请假理由。很多公司甚至你可以不说理由，就说下午请假，你的经理也不会说个不字。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",Wenkan Photo,有靠谱的管理层和辅助团队比如产品，设计。交给程序员手上的项目思路是清晰的，需求是明确的。不是为了kpi而没事找事，也不是跟别人比同样的东西谁抄得快。既没有稀里糊涂上的项目，也没有deadline之前改需求。这样一来当然进度安排就合理了。进度合理了之后，就可以用稳定可预测的方法来计算每个程序员的工作量。不管是8小时还是弹性工作制，一个正常人一天能集中精神写代码的时间也就那么两三个小时。所以任务都是以天为单位发放的。团队有多少人干多大事，以结果为导向不搞浮夸。所以不会浪费时间在那里加班磨洋工。实事求是这个话，在中国只是挂在党校的牌子上，却是没人能贯彻到实践里的。至于工会，对高科技行业没什么作用。工会都是给体力劳动者准备的，他们很容易就被更便宜的人取代，所以需要抱团取暖。但程序员不是这样，入门级以上的市场里基本还是供不应求，钱少了人家不来，福利不好人家不来，项目没意思人家还是不来……根本没什么抱团议价，光是单个程序员自己的议价能力就已经逆天了，跳槽的时候谁手里不是捏着好几个offer互相compete？HR也没辙，知道你有别家在面试还会主动帮你推迟offer决定时间……
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",苏维,因为在中国你没办法阻止一些猪队友犯贱主动倒贴拿低工资跪着求职还主动加班。只要有一个这样的猪队友，老板就有理由压低你offer的价格，有理由给不主动加班的你年终打c。因为中国这几年每年都要700-800万应届毕业生，而这几年的大热门是it方向，人多就容易出猪队友。// Append_2018-05-24 “谁都得活着。”非常讨厌这样的论调，真的。不禁想起之前华为裁员后的一个真实案例。有人背着两套房贷，被辞了。辞职后的生活当然非常的艰苦，别的公司开不出华为的高薪，每个月光是还房贷就竭尽全力了。对了，人家还上有老下有小，妻子全职带孩子。这人值得同情吗？不值得，谁让你贷款买两套房的，否则新工作两三万的月薪也足够一家人在深圳过上仍有结余的生活，而如果回老家三四线城市，随便找个万把块的工作则可以过得更加轻松。“谁都得活着。”但是有些人眼里，不去追求金钱收入，不去一线城市，就不算活着。所谓一饮一啄，莫非前定。之前也对携程幼儿园事件的受害儿童家长发表过负面看法。注意措辞是“受害儿童”家长而不是“受害家长”，因为那批家长在那个事件里完全是属于有责任的一方。在那个问题下面痛批那部分家长每天只顾着工作而失职于为人父母，得到的回应也类似这个。“谁都得活着。”是啊，只有赚更多的钱过更“好”的生活才是“活着”，其他的都不算活着。呵呵。有些人，从来没想过自己的人生有那么一丝可能性不平凡，而另一些人，则从来没想过自己的条件只能过上平凡保守的生活，去死命追求不平凡。前者仍可在遗憾中过完简单快乐的一辈子，而后者往往在半途招致自我毁灭。
为什么美国程序员工作比中国程序员工作轻松、加班少？,"['工作效率区别大吗？', '感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？']",欧航移民,他，25岁，本科毕业，因为妻子赴美读书而跟去美国陪读，意外成为一名男保姆——他就是B站up主大海（B站ID：大海留美生活录）这位up主介绍，他叫大海，25岁，安徽淮北人，2年前是当地一名汽车贷款客户经理，每月2万元的工资在四线城市过着安逸的小日子。2018年2月，与妻子小田完成爱情长跑，不过刚拿到结婚证才5个月，妻子就要启程赴美留学了，为了避免两地分居，大海申请了陪读签证，在当年10月份也来到了美国普罗旺登斯。虽然大海在结婚前有了一定的经济积累，来到美国后面对接近1比7的美元汇率，为数不多的积蓄经不住坐吃山空。因此大海决定在妻子上课期间，出去打工。在餐馆洗盘子每月2000美金，服务生每月2500美金，还有小费拿。但由于语言问题，他连洗盘子的工作都没有找到，这对于原本是客户经理的大海来说有些难以接受。后来，大海终于在唐人街一家火锅店找到了打杂的工作，每天刷盘子、抹桌子开始打工。由于本身有大学四六级英语打底，加上作为留学生妻子的指点，大海很快就掌握了餐馆常用的英语，一个月之后大海就能熟练用点餐机给客人点餐了。有时间，大海还到后厨跟着炒锅师傅学习炒菜和切菜、配菜。大海和妻子两个人每个月房租就要1000美元，吃饭也要1000美元，为了尽量多赚点钱，大海主动放弃每周的休息时间，坚持每天上班，挣钱补贴家用。就这样，在火锅店打工一年半之后，2020年3月，美国疫情爆发，餐厅停业。此时，妻子小田接到一个在丹佛的实习机会，大海于是跟着妻子也来到丹佛，随后又到了德州达拉斯。期间他们得知，新泽西州的一位华侨需要一位住家保姆，工资每天150美金，每个月就是4500美金，相当于3万元人民币，还包吃住（至少剩下2000美金）。工作就是照顾华侨的两个女儿，大女儿上小学，小女儿一岁多。跟华侨确认过之后，大海带着妻子连夜从德州来到新泽西，住进了华侨家里，从此开始了男保姆的工作。与所有保姆的工作一样，大海既要准备一日三餐，还要打扫家里的卫生，并且给一岁多的孩子喂食，还要接送大女儿上学或者参加课外活动。作为95后的男孩子，自己还没长大一下子就要照顾别人的小孩，而且餐馆的那点打工经验，在家庭生活中完全派不上用场。于是，大海在YouTube上找做菜的视频跟着学，还懂得融会贯通自创菜式，很快得到了华侨家庭的接纳。有一次，大海做了一盘猪头肉，一下子勾起了华侨的思乡情节，原来20年前，华侨也是普通的穷留学生，只能住6个人一间的宿舍，每天吃便宜的鸡蛋面和鸡腿，总想吃上一口家乡的猪头肉，就是吃不着。毕业后不断打拼才创下如今的家业。这盘猪头肉之后，大海成为华侨的知心朋友，不仅专门改造了厨房以方便大海做菜，还送他一个酒桌台，让大海闲暇的时候可以品酒看书，大海这才有时间，用视频记录自己的留美生活。大海在文中说：我知道，男人当保姆很少见，在国内可能会被看不起，觉得很没面子。但我不在意这些，他们不了解我做男保姆的前因后果，而且每个人对生活的理解也不一样。在美国这边，只要你努力工作，不管什么工作都会得到尊重，有手有脚却不去工作的流浪汉才是真的让人看不起。我现在月薪三万，自食其力，承担了一个男人该有的责任，这就是工作带来的价值。大海说：老板建议他继续读书，但他知道自己不会去上学了，也不会一直当保姆，“疫情结束后我可能会回国，也可能根据媳妇的情况再考虑是否换工作。不管在国内还是国外，我都会给媳妇最坚实的依靠。”来源：留学字典，ID：Liuxuezidian免责声明：本平台发布的非原创内容，均来自网络，版权归原作者所有，如有侵权，请务必联系删除。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],涛吴,马里奥碰到花朵就变身。什么是马里奥？一个装着 16 × 32 个小色块的长方形，其中一些色块填着颜色，另一些没有。什么是花？一个 16 × 16 的正方形。什么是「变身」？把马里奥这个方块里面代表衣服的褐色变成红色，代表背带裤的红色变成白色。什么是褐色？暂且说它是 0x887000 这个数字。什么是「碰到」？马里奥的长方形与花朵的正方形有所重叠。什么是「重叠」？假设马里奥的这个方块占据屏幕（什么是屏幕？一个能装下 256 × 240 个小色块的矩形）中 X 方向 101 到 116、Y 方向 21 到 52 之间的区域，那么只要这个区域内有一点或更多点也被花朵所占据（比如花朵处在 X 116 到 131、Y 21 到 36 之间的区域内），我们就认为两者有所重叠。若给定以八个数值代表的两个矩形区域，请写出判断两个区域是否有重叠的 C 语言程序。如果你能写出来，那么祝贺你，如果有朝一日你想自己用 C 做一遍 NES 版本的《超级马里奥》，你至少知道让他变身需要做什么了。是的，C 语言也许「只能」做数学题。可是，绝大多数游戏的运行过程就是不停地做数学题，而所谓编写游戏，也就是把游戏的规则和游戏的效果转化为数学题而已。其中不少题目电脑都已经知道怎么解——是别的程序员事先告诉它的——比如「求一堆散落在三维直角座标系之中的多面体在 8(x−3)−10(y+1)−11(z−1)=0 这个平面上一个给定范围内的投影」或者「给定一些彼此相连的顶点，求任意两点之间的最短路径」之类的数学题，它只需要千万分之一秒就能给你解好。这种能力有什么用？电脑上 FPS 游戏的本质活动就是不停地求三维座标系下的多面体经过变换之后在二维平面上的投影，不停地判断两个多面体是否彼此重叠，以及不停地寻找两个顶点之间的，最终达到让怪物冲到你面前咬你一口的目的。不止游戏如此，其他软件也都差不多，每一个细节都是某种数学题——比如知乎页面顶端的蓝色导航条背景，是 CSS 描述的一个浅蓝到深蓝的渐变——渐变是怎么回事呢？给出两个数字分别代表两种颜色，以及第三个数字代表一段距离，求一系列颜色的数值以及次序，使得这段距离中任意两种相邻颜色之间的变化最小。数学题。别说 C 语言，一切编程语言最终都只能做数学题，根据给定的数据，算出另一些数据，算出更多的数据，然后存贮、发送或者呈现算出的数据。总结来说，真实世界里的炮弹会以近似抛物线的轨迹下落，所以你在游戏里以抛物线不断绘制一枚炮弹，它看起来就很真实。不过我能理解你的困惑。投入大量时间看完教程，结果只能在黑框里输出一串数字。这是在学编程还是在向七十年代致敬？编程是这样无法给人成就感的活动吗？是，也不是。看你的表述，应该不是小孩子了，因为小孩子不会因为初学编程能做的事情很少而没有成就感，或者说，觉得这样做没有成就感的小孩子根本不会继续学下去。最初学编程的成就感单纯来自于「我居然可以指挥机器做一些事」，至少我小时候用中华学习机编一个程序帮我算暑假作业上的题时是这样感觉的。写出这些程序并用它解题虽然远比自己动笔去把题目算出来费时，却让人乐此不疲。那时候我还不知道碰到花会变身这种事情其实也是靠编程编出来，所以我也不会去想学编程「并做什么」。无奈大多数人过了一定年纪就很难再靠「我能指挥机器」这种简单原始的快乐来驱动自己学编程。见过世面，听过传言，欲望和野心变得复杂而庞大，你想要图形界面，音乐音效，人工智能，云端同步，可是你闷头学了几堂课，还是只学会在黑框里显示一串数字。你怀疑这是学 C 语言的错，于是你到知乎上来问了这个问题。你的疑惑是有道理的。如果能把编程学下去，日后你就会明白，任何程序都是一座冰山，最终用户能看到的界面和使用的功能，只是程序浮在水面上的十分之一。知乎这个网站其实也是个运行在某台电脑上的程序，你能看到的十分之一是用什么编写的呢？HTML，CSS，JavaScript，或者 Objective-C。而你看不到的那十分之九是用什么编写的呢？Python。这些你无法直接观测到的 Python 程序运行在世界某个角落的某些计算机上，隔着光缆、双绞线和无线基站，为你面前或掌上的用户界面注入生命。（  ）……可是 Python 是用什么编写的呢？C 语言（当然，这么说并不严谨，Python 理论上可以用任何其他语言实现，实际上也已经被用很多其他语言实现了，不过这并不是重点）。任何编程语言都是实现某个功能的工具，Python 实现了知乎这个网站的大部分功能，而 C 实现了「用 Python 写程序」这个功能。为什么是 C？C 是初代程序员所使用的语言，那时候硬件很贵，软件必须高效；而计算机的用户都是职业程序员，对于硬件有足够的理解。C 贴近硬件，就意味着它容易译成机器能懂的语言，而它的设计者也并不需要操心普通人学起来可能会比较困难——而且，说真的，其实也不很难。但是，这么多年过去之后，软件规模变得越来越大，C 就像锤子和手锯，修小木屋得心应手，造摩天楼就比较力不从心；但 C 语言可以用来造出其他更适合建造摩天楼的工具，乃至组成摩天楼的预制件，就好比用锤子和手锯造出挖掘机和吊车、混凝土板和一体门窗一样（当然，这个类比并不十分贴切。可是没有什么类比能贴切地描述软件工程，因为软件工程像许多东西，却又什么东西都不像）。所以，回到你的问题上来，是的，学会 C 计算机语言真的可以开发出很多东西，但除非内力深厚，场合适当，并且闲得蛋疼，大多数人不会拿 C 或者只拿 C 来开发太大的东西。如果你只是想要一门能够让你「编辑出一个啥子游戏或者软件出来」的语言，而且你用 Windows，那建议你转去学学 C#。它长得和 C 挺像，但却能迅速地写出至少是带有图形界面的程序，用起来也很方便，鼠标点一点就能让你对自己的程序看起来什么样有个比较直观的印象。还有，在国内，C# 的教材也相当容易找到。当然 Python 也是一个很好的选择。另外，还有一件事你必须弄明白：现代的所谓编程这一活动，其实大部分时候是在「合理地堆砌别人已经实现的功能来实现新的功能」，C 语言莫不如是，比如  这个东西，是别人做出来的「把一些数据按照指定格式输出到屏幕上」这一功能。而别人还做出来许多其他功能，比如「在发现用户短时间内连续两次按下鼠标又松开的时候调用你写好的一个函数」。学会怎样在 C 或者其他任何程序语言中使用这些既有功能，也是学习编程的一门重头戏。等你弄明白这一点，你也就找到了你问题的答案。尾注1：题图画错了。马里奥身宽应为 16 像素，我画成了 17。尾注2：NES 上的超级玛利奥使用 6502 汇编完成，并不是 C，碰撞检测也不是像素级的。尾注3：我不是发明者。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],Wayne Shi,你能想到的，C语言都能搞，可以说是无所不能，把C学好，上手其他语言也会事半功倍。题主只是还没有入门，只看教程不动手永远学不会，推荐5个免费的C语言入门小项目，由易到难，开始动手做一些常见的小东西吧。1.用C语言做一个简单的计算器，进行加、减、乘、除操作。项目涉及的所有数学知识都很简单，但输入过程会增加复杂性。2048是之前十分火爆的一款益智游戏。项目将使用 C 语言完成一个2048游戏。3.扫雷是Window系统中自带的经典游戏。项目将使用 C 语言完成一个简单的扫雷游戏。本次课程将使用 C 语言完成一个简单的日历功能。输入相应的年/月即可看到当月的日历。5.用最最简单的代码来实现五子棋游戏，帮助大家复习基础知识，了解一个项目的开发流程。收藏的童鞋们顺便点个赞吧：）
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],Bowman Church,"首先可以肯定的是，答案是，你学的只是c语言语法，是与平台无关的，不调用图形接口，就没法写windows应用。不调用操作系统网络接口，就没法写通信程序。不学习,你就不会用c写linux内核.不学习硬件平台,就没法开发.,是你进入计算机世界,和电脑沟通的基础.试问一下,你学会一门语言,就能了解当地人的习俗和文化,并能和当地人开展生意了吗?不能!你总得了解下当地人的习性,文化吧!你还得学习一系列其他知识,才能真正干活.你要是想去火星当包工头子,就得再学火星的建筑术语,怎么和火星打工人沟通,火星建筑学!这个与c的发展历程有关，现在的c多用于底层库开发，而多年前，这个c相当于现在的安卓java，是几乎所有操作系统程序开发的标准语言，现在因为其过使用起来过于繁琐复杂，开发周期长，被java等高阶语言所替代。学好c语言,就可以进一步学习c++了,c语言就业面比较窄,学好c++,不错的工作还是很多的.如果还有童鞋对于C++学习还有疑问。这里我推荐下家的课程，里面的课程都很不错，而且质量非常高，对于小白很友好，还能领取项目题库资料，需要的同学点击下方链接，免费听一下他们家的试听课程,windows c开发, 游戏开发,dos嵌入式单片机,广泛存在于洗衣机,空调,微波炉,空气净化器里下图是一个基于单片机控制的半导体冰箱有兴趣的可以搜索单片机入门学习一下.,推荐读嗨翻c语言,里面有一些实用小项目包括等等,教给你很多其他书没有的实用技能.你可以考虑读一下,unix环境编程,unix网络编程,Windows c程序设计(不建议,95年的技术了,我初中看过)unix环境编程能叫你写linux各种常见命令行程序unix网络环境编程能教你linux如何设计学一下arduino,来掌握嵌入式设备的编程方法.如果要写,可以试试linux下的gtk(不建议学),Windows (不建议,95年的技术了)如果你实在想做app,我建议你去学java或者swift,个人更建议swift,相对容易如果你觉得自己学习困难,没有头绪,没人指导,建议找一门在线课程,开课吧一个c++免费的偏实战的课,可以弥补实战不足的问题,对于小白还是很友好的，，还能领取项目题库资料，需要的同学点击下方链接，免费听一下他们家的试听课程"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],梦人亦冷,"曾经我对C语言的认识是：黑框框+数学题，后来变成：C语言----让生活更美好。直接上实物图!!!一起体验硬件开发中，C语言的黑魔法。内附：追女神的套路新增几个娱乐点：1.难度系数：任何一个东西要想做的很精，都很难，所以很难下结论。这里难度系数，答主默认为从学生角度来看，实现的难易程度。2.介绍：怕大家看不懂图片，多多介绍功能。3.背后的故事：讲述答主和该项目的故事1.喜闻乐见的智能车那些年，我们一起玩过的智能车。因为这个被带入不归路的同学，请举起你们的双手！！！我从手机翻了很久才找到这张照片，让大家娱乐一下。说一下我做过的三类车：（1）避障车：功能：①遇到障碍物可以自己躲避（因为有可以检测到前面有障碍物），比我们小时候的四驱车智能多了吧！！！！！②当然还有其他功能：液晶屏显示走过的距离，红外避障之类的。（难度系数：★）（2）：我们将两个轮子的车放在地上，那它必然会摔倒。平衡车就是利用来不断调整姿态，让两个轮子的小车可以稳稳的站住。（难度系数：★★）（3）WIFI视频车：该小车自带一个摄像头，如果电脑和小车上的WIFI连接了以后，我们通过PC端的一个软件，就可以看到小车摄像头实时传过来的画面。（难度系数：★★★）背后的故事：答主大一最爱的就是做车。。。。。。。2.萝莉语音温度播报介绍：①可以显示温度②如果按下播报键，可以语音播报当前温度③同时还具有蓝牙功能，几十米也能收到温度消息（用手机或者PC直接连接温度器的蓝牙就能收到！）④可以将温度实时传送至PC，并在动画中显示温度变化⑤声音自己可以录制，选择你喜欢的声音难度系数：★★★背后的故事：当时有个好基友假期要做兼职，我说做兼职多没‘’钱途‘，我们来做这个比赛，基友拒绝。两个月后颁奖。。。。学校给了一部itouch，答主那时经济危机，果断卖之，900到手。基友补课赚了600，已哭，,回来说以后不能不听我的话了。3.万年不变的万年历介绍：①可以显示日期，温度，还可以设置闹钟叫醒自己哦！！！！！！！！！！！！！②可以在特定日期，屏幕显示特定的祝福。-------据说有无数宅男做出这个送给了女神③不要看不起它哦，大家想象一下，送给女神后：三个月晚上的某一天正好是情人节，半夜12点，铃声响起，女神下床一看，屏幕显示了一句告白的话~~~~~~~~~~~后面的剧情自己脑补难度系数：★★背后的故事：没故事，答主练手做的。4.采矿致富车--------------电赛作品--金属探测车介绍：这是某一年的题目，TI出的，用铁丝围了一个圈，要求车能很快围绕着铁丝走一圈！！遇到硬币能够报警。测量自己走过的距离。要求用最少的时间走完一圈难度系数：★★★★背后的故事：做出来简单，做的稳定+快就难了。答主的车跑的飞快。。。，测试的时候竟然跑出线了，吓尿！幸好最后没事了，喜拿1等。5.基于物联网的-----九宫格解锁（隔空解锁）介绍：这是答主参加某比赛做的，是不是一脸懵逼？看不懂？其实很简单，用九个传感器仿照手机九宫格解锁，使用者只要在远处挥动手势，这个门就可以打开，如果三次错误就向主人打电话报警！！（还会语音提示：小偷，我已报警，请走开。喇叭就在右下角，大家应该能看到）同时还会在我们做的网站上，提示有人盗窃~~~~~~~~~~~~~可惜图不全了，不然一定放出来！ 难度系数：★★★★，做出来简单，做的好看+稳定就难了。背后的故事：我能说人生第一次上电视，是因为这个么。。。。。虽然就晃悠几秒6.基于心理治疗的儿童电子琴介绍：啧啧啧，这可不是普通的电子琴哦。使用者可以隔空弹琴，隔空哦！！一个学姐拿这个，儿歌弹得飞起。。。。其实是为抑郁症,残疾儿童等设计的，用于心理治疗。难度系数：★★★★背后的故事：虽然这个项目不是我做的，但是也算节间参与，也正是因为这个项目，把我带上了不归路。。。。。。。该项目‘’荣获‘’大学生喜闻乐见的比赛--挑战杯XXX国家级XX奖，答主蛮惊讶的还，毕竟我一直当它是玩具。。。。。它还有多种模式，可以选择某一首歌播放，也可以自己弹，哪个键动了，对应的动画也动，如下图：7.用一次就想丢的-----生活中，你是否遇到这样一些问题？不用怕，只要用了我们的蓝牙防丢器，保证你以后再也不敢丢了。介绍：找不到图了，放一张百度的图功能：①手机和防丢片通过蓝牙，只要一个离开一个（超过一定距离），双方都会响难度系数：★★★背后的故事：参加挑战杯XXX比赛做的，一个学弟仿照淘宝的东西，让我照做一个出来。绝对是坑啊，离开一两米就响那确实能防盗。这东西和手机离开三十米估计才响，你让我去哪里找贼啊？而且声音很低。。。人多听不见啊。。为了考证，我去淘宝买了两个，结果一模一样的毛病，已哭，现在不知道被我扔到哪里去了。这也从另一个角度告诉我们，这些比赛有多水（其实很多角度都能看出来，哈哈），最后得了个省XXX奖，不醉不行。比赛失利的孩子，不要哭，继续撸。感慨：还有好些项目，找不到图了，答主吃完饭回来看能找到不！真后悔当初乱删照片，现在看到这些照片真激动，全是青春的回忆啊~~~~~~~~~~~~~~~~~~~~8.操作系统，可以运行在真机。我发了一个15天内制作操作系统的攻略，有完整的编写教程。想写操作系统的朋友，可以看看结尾：C语言----让生活更美好9.如何让C语言走进生活？这样的例子数不胜数，答主举个简单的例子，抛砖引玉，剩下的发挥空间，交给你们了！相信知乎有很多爱养宠物的童鞋们，有时候经常加班或者没时间照顾小猫小狗，何不考虑做个宠物喂食器，就算自己长期不在家，也能让他们安然无忧。①比如这样的，喂水器：（小狗走近就会滴水）②.又或者这样的喂食器：（小狗走近就会落食）③.喂水+喂食+逗他们玩的恶作剧，也是可以的啊！自己制作的好处就是，可以方便的增删功能，贴近自己的生活习惯。④怎么做：只要有C基础的童鞋，想速成，非常快！！！！！！！！！！！认真做，一个礼拜就能做成一个有雏形的喂食器了。是不是感觉很有趣啊~~~~~~~~~~~~~结尾：C语言----让生活更美好"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],呉邕,什么是计算机？一个（仅会1+1）和一个搬运工。这就是我认为的计算机。那为什么世界可以这么美？减法用补码加，乘法多次算，除法转乘法。8位一字节，128个，字母组单词单词做指令，数可以代表指令也可以代表运算部件，指令有操作码和操作数。指挥加法器操作数。图像RGB三元色256灰度，声音44.1kHz采样，汉字两字节unicode。于是世间音形变成01。有了这些，我便可以用单片机控制led。我传1你就亮，这是开关。当我128*64个液晶一起控制，这是12864液晶显示屏。当我1920*1080这就是锤子的屏幕。于是显示器出来了。怎么现实锤子二字？怎么使用键盘扫描a这个字母？怎么打开？怎么写驱动？这都是c语言在干的。驱动出来了，处理器改怎么分配时间，内存怎么占用，硬盘内存cache怎么分，进程何时用，外设驱动怎么处理，等等，这些写好了就是简易操作系统吧。linux内核全用c哦，屏幕可以任意显示了，音响可以随意响了，有os做底层支撑了。然后我让屏幕显示一把枪，我定义它为一个物体，定义一些操作，比如扣动扳机。再定义一些人物，场景，定义一些规则。这就是cs了吧。这里枪只是一个枪，我不会去管它怎么画怎么显，我只要知道他是一个东西，我可以用它。于是就出来了楼主所说的当然游戏还牵扯到gpu等外设，还牵扯到建模，曾见过物理博士就搞游戏里水怎么建模，流体嘛，什么美工，什么渲染，联网还要数据库，外挂还有脚本但是从那的电子空穴阴阳中和到你一枪爆头有关系吗？让你学c不是让你用它写出什么中国版linux，是为了让你明白如何去操作工具。学的是如何用机器思想思考。而不是你说开机就开机。入门，学的是语法的抽象。是知道名词动词和句子有结构这个事实。至于汉语主谓宾和英语主谓宾，学了一个另一个不就好懂了吗我也不知道我要说啥了T T。这里的每一段的一个功能或许就是几百个博士教授一生的目的。其实就是讲计算机的一些原理。对象语言更多的是使用工具，比如库，函数，调用什么的。而c是他们的基石。更新于22夜晚我们大家都忘了一个事，软件真的只是写代码吗？写代码只占了不到百分之十吧，大多的是在维护，规划，文档，找bug。。。。编程语言有好多，汇编，是最直接效率最高，但是看到一堆1001谁都眼花。别信什么传说曾经有人用针在光盘上刻出过一个操作系统，现在几乎都可以用c代替了吧。但是还要懂一点灵魂。c是高级结构语言，但还是偏向与硬件。linux仅仅几百k的源码大多就是什么处理器内存存储管理，进程管理。linux牛是因为他驱动多。c就是一线员工，危险都得上，但少了他不行。老师们教导我们劳动只有分工不同没有贵贱之分。反而很多c工程师待遇超好。java ，，c sharp，是对象语言。像是将军指挥下属，不必去知道盔甲怎么铸造。javascript之类，这个没学，不太懂，不敢说了，求介绍matlab fortan之类偏向数学吧。什么控制，图像处理，识别，人工智能，神经网络，机器学习。感觉好高大上哦。这些东西都是你看不到，但神奇的可以很实用的问题，这就是数学的魅力。你知道一个搞出了多少高科技吗？？？看系里有人学这个好羡慕，自己没那命。vhdl， 之类的。纯硬件语言。这个不是通用cpu，是，fpga之类的大量运算，这种语言弄得是芯片里的布线，就是改变硬件连接。而通用cpu那些只是重复。这个里面就有了，很有用的知识产权。什么，其实卖的不是芯片，仅仅是芯片规划也就是ip核，中国这个可怜啊，这才是赚钱的地方呢。以前听过一个老师说，你以为我们愿意买美国国债啊，你不买，ip核不卖你，你就不行。哎，intel，arm什么这个积累多啊，中国，哎不说了。希望华为海思可以搞好吧。html之类，求指教但所有编程不都是一个理嘛，一个物质操纵另一个物质，加法器操作数，系统操作开关，屏幕。你的鼠标操纵一个对象，whdl操纵一条电子线路。当然还差很多，要实现这些，还有太多太多。最后什么国产e语言。我觉得没啥用，除了汉语好看，没一点用
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],编程指北,对于大部分初学者，学习C语言的目的是希望做一名合格的程序员，开发出靠谱的软件来。但是学了C语言的基本语法后，发现只能开发“黑底白字”的DOS程序，完全没有漂亮的界面和生动的交互。似乎只有黑框框:于是学数据结构，学算法，学操作系统，越陷越深，越来越难，最后迷茫了，不知道学C语言能做什么，认为学习编程很难，开始怀疑自己，甚至想放弃。其实，这是很多初学者都会踩到的一个坑！C语言本身是一门很简单的语言，提供的实用功能不多，大部分要借助操作系统、第三方库、单片机来完成。也就是说，只学C语言基本什么也做不了，也基本找不到工作。首先，给学弟学妹们分享一份大学期间自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，去网上挨个找的，最后汇总而成。汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、Linux使用及内核、数据库、Redis....等主流的编程学习书籍。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：书单：C语言是一门通用性的语言，并没有针对某个领域进行优化，在实际项目中，C语言主要用于较底层的开发，例如：所以C语言永不过时: 既然C语言的应用这么多，为什么很多读者觉得它什么也做不了呢？我们先说一个概念，就是库（Library）。库就是编程专家写好的代码，我们可以拿来直接使用，这样能够节省开发成本，提高开发效率，并且库代码的执行效率、严谨性、安全性和规范性要明显优于我们自己编写的代码，市场上有很多优秀的库，有的收费，有的免费，我们要善于利用这些库，尽量不要重复造轮子。另外，推荐一个谷歌大佬的刷题笔记，强烈推荐：库一般分为两种： 不是由官方开发，没有质量把控，良莠不齐，但是有相当一部分也非常优秀，已经得到了大家的认可，已经应用在大公司的项目开发中，这些库能够和标准库媲美。标准库是我们在学习编程语言时就要一起学习的，例如C语言的输入输出、文件操作、日期时间、字符串处理、内存管理等都是标准库提供的功能，它们并不是C语言语法的内容。如果一门编程语言的标准库强大，初学者经过简单的学习后就很容易开发出实用的项目。例如Java，它的标准库包含了GUI（图形界面）、图形处理、网络通信、网络服务器、HTML解析、HTTP协议、多线程、多进程、、压缩文件、加密解密、数据校验、音频视频处理、数据库操作、XML操作等常用功能，初学者学了以后立马就能够开发网站、开发PC软件，感觉很实用，也感觉学到了东西。Python、、VB、PHP、JavaScript、Ruby 等都是非常实用的语言，学了就能做出东西来。反观C语言，它的标准库只有输入输出、文件操作、日期时间、数学计算等基本功能，都是在黑黑的控制台下进行的，跟网站、PC软件、APP等八竿子打不着，所以初学者觉得C语言没有用。那么，C语言到底能不能开发网站、PC软件或者APP呢？C语言的标准库肯定不能干这些事情啦，就得依靠第三方库了，遗憾的是，C语言的第三方库大都也是底层库，支持应用开发的库寥寥无几，只有一个 GTK 库能够开发出 PC 软件来，而没有与网站开发和APP开发相关的库。GTK 库在PC软件开发中也很少用了，PC软件开发已经是 C++、C#、VB、Java、Delphi 的天下了。换句话说，开发PC软件基本不使用C语言，而是使用 C++、C#、VB、Java、Delphi 等其它语言。记住，C语言几乎不用来做软件、网站、APP等这些应用层开发，其它的编程语言能够更好地完成任务，没必要非得使用C语言，C语言基本都是用来做底层开发，也就是看不见摸不着的、在后台默默提供服务的那些项目，而这样的项目对初学者来说基本没有实用价值，初学者也不知道它们该怎么使用。初学者想要的C语言没有，C语言能做的初学者用不到，就是这种矛盾导致初学者非常迷茫。有人可能会问，C语言不是还可以用来开发单片机或者嵌入式吗？是的没错，但是这个方向是软硬件结合的，不是在我们的电脑上进行开发，而是在特殊的开发板上进行开发，并且还需要学习数字电路、模拟电路、汇编、ARM、Linux 等方面的知识，只学C语言也没有用武之地。如果你觉得学了C语言没用，那么恭喜你，你是对的，应用层的开发一般真的用不上它。但是，没用也要学，学习C语言并不一定是要应用它，C语言可以夯实你的编程基础，尤其是数据结构、算法、内存、线程、进程、通信、操作系统等底层的计算机知识，没有C语言基础是学不好的。这些底层知识并不一定能够直接应用在实际开发中，但是它们会让你有底气，会让你透彻地理解编程概念，会让你站的“低”看得远，会让你避免很多低级错误，会让你心中有“架构师”的思维。部分内容来自网络：关于数据结构、算法、内存、线程、进程、通信、操作系统等这些基本的知识，重要的是理解概念，知道计算机是怎么回事，千万不要深入细节，把自己绕进去，耽误一两年的功夫，要尽早跳出来去做应用开发，找到兴趣点，获得成就感。这个时候，C语言主要的作用是让你入门，了解编程语言的基本语法，强化编程思维，学习计算机底层知识，为以后的职业生涯打下坚实的基础，而不是用它来做实际开发。在实际开发中，遇到问题，或者哪里理解不透了，可以再来回顾这些底层知识，这个时候就可以深入细节了。因为有了实际开发经验，再学习底层知识就知道哪里是重点了，不会像无头的苍蝇一样乱飞，什么都学。C语言是一门“古老”的语言了，在中大型的应用层项目开发中，C++、Java、Python、C# 等其他编程语言能够更好地胜任，为C语言开发应用层的库简直是费力不讨好，所以几乎没人这么做。GTK 算是一个应用层的库，但是它也比较老了，新版的 GTK+ 已经支持 C++ 了，不再仅仅支持C语言了。我们先不管面向过程、面向对象、泛型这些晦涩的编程概念，简单地理解就是，C语言支持的特性少，用起来费劲，开发效率低，而 C++、Java、Python、C# 等支持的特性多，用起来方便，开发效率高。C语言的优势是运行效率极高，这正是底层开发所看重的。底层开发有时候就是一个模块，或者是一个服务，规模不算大，但是对效率有严格的要求，此时用C语言就非常合适，所以针对底层开发的C语言库较多，因为它们有非常大的实用价值。推荐几篇我写的关于C语言的文章：  
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],关中游,理论上C语言能开发出几乎所有软件。但是，计算机发展了几十年，留下的大量的轮子和解决方案。C后产生的各种新语言和第三方库如此丰富，这已经是巨大的财富。我们没有必要回到去创建新的文明，而且就算重来，也未必能创建出更加优秀的文明。已经能站在巨人肩上，理性地选择拿来主义，择优出解决方案才是王道。我接触C语言完全是因为课程的安排。C基本语法掌握后，接下来就是数据结构。开始了想题主一样，做“数学题”。用C实现链表、、排序和一些算法等后，我也只是在后台黑框框输出我的成果，确实枯燥。但是这个过程对我的影响几乎是最大的。结束，我对编程的认识大致就是函数的logical control+存储的data。软件的运行其实也就是一大坨从现实需求中抽象出来的数据通过代码的控制逻辑一直在变化。后来看到Nicklaus Wirth曾用“算法+数据结构=程序”来概括，看来我没有认识跑偏。在我看来，C语言抽象了2进制，它让我们大脑中的“数据”概念映射到了电脑中。即便同是数值，我们也有了更好被我们大脑理解的char。还有这种custom的数据集合，完全就是为了照顾我们愚蠢的大脑。我们关注了C衍生出的抽象概念，而不再去死磕零零碎碎内存。我们还有便于逻辑展开的胶合物function。只要我们把现实世界的东西，通过我们大脑抽象出“数据和逻辑”，就能映射到电脑上，变成软件。即便C语言本身看起来很整洁，但是这种松散的数据表达和粗犷的回收机制，让我在大二美好的时光中，度过了大姨妈和Bugs同时问候我的心酸时光。后来投向C++，有了还算不错的和特性，接触OOP，生活有了点改善。而且也学会偷懒，有轮子就那来用，而且实际项目开发过程，其实也没发现比啃数据结构课程难。C语言开发的经历，让我在看OOP那些的时候，自恋地傲娇，“这些不用你教我也玩过好吧！”再后来接触Java和Python，特别是Python，太改善生活质量了。所以毕设毫不犹豫选择Python做开发语言。这之后，我开始关心开发的复杂度。其实实际开发过程中，业务逻辑本身带来的复杂度是无法消除的，而且开发过程使用的语言和选择的框架也会带入复杂度。我之前搞C语言，特别是多线程的时候，内存回收太容易出Bug了，很头疼。即使使用了消息传递机制来缓解，开发还是很耗时啊。现在很多语言都支持，一般情况我们不用关心回收。这其实就是控制开发复杂度的强有力的手段。我个人的观点，就是用最接近人脑理解的方式来抽象，即使增加开发成本也可是付出的。让数据有更好的组织形式，优先考虑良好的数据结构表达而不是沉迷于OOP的设计模式，减少抽象过程带入的胶合层，能吞掉的就不要暴露给使用者。毕竟胶合层本身就是增加复杂度的大隐患。减少开发的复杂度真的可以改善生活！请相信我。我推荐还在大学学习的，时间多的是，不要根基不稳就追逐看似高大上的新玩意，很多真的当你用的时候在去看也不晚，多看看C和数据结构以及算法。折腾明白了，学其他的会比较快，而且不会迷失在各种框架里面。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],陈军,"学的不够初期: 一.基本算法:       (1)枚举. (poj1753,poj2965)      (2)贪心(poj1328,poj2109,poj2586)      (3)递归和分治法.       (4)递推.       (5)构造法.(poj3295)      (6)模拟法.(poj1068,poj2632,poj1573,poj2993,poj2996) 二.图算法:       (1)图的深度优先遍历和广度优先遍历.       (2)(dijkstra,bellman-ford,floyd,heap+dijkstra)          (poj1860,poj3259,poj1062,poj2253,poj1125,poj2240)      (3)算法(prim,kruskal)         (poj1789,poj2485,poj1258,poj3026)      (4) (poj1094)      (5)二分图的最大匹配 () (poj3041,poj3020)      (6)最大流的增广路算法(KM算法). (poj1459,poj3436) 三.数据结构.       (1)串 (poj1035,poj3080,poj1936)      (2)排序(快排、归并排(与逆序数有关)、堆排) (poj2388,poj2299)      (3)简单并查集的应用.       (4)哈希表和二分查找等高效查找法(数的Hash,串的Hash)            (poj3349,poj3274,POJ2151,poj1840,poj2002,poj2503)      (5)(poj3253)      (6)堆       (7)(静态建树、动态建树) (poj2513) 四.简单搜索       (1)深度优先搜索 (poj2488,poj3083,poj3009,poj1321,poj2251)      (2)广度优先搜索(poj3278,poj1426,poj3126,poj3087.poj3414)      (3)简单搜索技巧和剪枝(poj2531,poj1416,poj2676,1129) 五.动态规划       (1)背包问题. (poj1837,poj1276)      (2)型如下表的简单DP(可参考lrj的书 page149):         1.E[j]=opt{D[i]+w(i,j)} (poj3267,poj1836,poj1260,poj2533)        2.E[i,j]=opt{D[i-1,j]+xi,D[i,j-1]+yj,D[i-1][j-1]+zij} ()              (poj3176,poj1080,poj1159)        3.C[i,j]=w[i,j]+opt{C[i,k-1]+C[k,j]}.(问题)  六.数学       (1)组合数学:          1.加法原理和乘法原理.          2.排列组合.          3.递推关系.            (POJ3252,poj1850,poj1019,poj1942)      (2)数论.          1.素数与整除问题          2.进制位.          3.同余模运算.           (poj2635, poj3292,poj1845,poj2115)      (3)计算方法.          1.二分法求解单调函数相关知识.(poj3273,poj3258,poj1905,poj3122) 七.计算几何学.       (1)几何公式.      (2)叉积和点积的运用(如线段相交的判定,点到线段的距离等). (poj2031,poj1039)      (3)多边型的简单算法(求面积)和相关判定(点在多边型内,多边型是否相交)           (poj1408,poj1584)      (4)凸包.  (poj2187,poj1113) 中级: 一.基本算法:       (1)C++的标准模版库的应用. (poj3096,poj3007)      (2)较为复杂的模拟题的训练(poj3393,poj1472,poj3371,poj1027,poj2706) 二.图算法:       (1)差分约束系统的建立和求解. (poj1201,poj2983)      (2)(poj2516,poj2516,poj2195)      (3)(poj2942)      (4)强连通分支及其缩点.(poj2186)      (5)图的割边和割点(poj3352)      (6)最小割模型、网络流规约(poj3308, ) 三.数据结构.       (1)线段树. (poj2528,poj2828,poj2777,poj2886,poj2750)      (2)静态二叉检索树. (poj2482,poj2352)      (3)树状树组(poj1195,poj3321)      (4)RMQ. (poj3264,poj3368)      (5)并查集的高级应用. (poj1703,2492)      (6). (poj1961,poj2406) 四.搜索       (1)最优化剪枝和可行性剪枝       (2)搜索的技巧和优化 (poj3411,poj1724)      (3)记忆化搜索(poj3373,poj1691) 五.动态规划       (1)较为复杂的动态规划(如动态规划解特别的施行商问题等)          (poj1191,poj1054,poj3280,poj2029,poj2948,poj1925,poj3034)      (2)记录状态的动态规划. (POJ3254,poj2411,poj1185)      (3)(poj2057,poj1947,poj2486,poj3140) 六.数学       (1)组合数学:          1.容斥原理.          2..          3.置换群与Polya定理(poj1286,poj2409,poj3270,poj1026).          4.递推关系和母函数.       (2)数学.          1.(poj2947,poj1487, poj2065,poj1166,poj1222)         2.概率问题. (poj3071,poj3440)         3.GCD、扩展的欧几里德() (poj3101)       (3)计算方法.          1.0/1分数规划. (poj2976)         2.三分法求解单峰(单谷)的极值.          3.矩阵法(poj3150,poj3422,poj3070)         4.迭代逼近(poj3301)      (4)随机化算法(poj3318,poj2454)      (5)杂题.          (poj1870,poj3296,poj3286,poj1095) 七.计算几何学.          (1)坐标离散化.          (2)扫描线算法(例如求矩形的面积和周长并,常和线段树或堆一起使用).              (poj1765,poj1177,poj1151,poj3277,poj2280,poj3004)         (3)多边形的内核(半平面交)(poj3130,poj3335)         (4)几何工具的综合应用.(poj1819,poj1066,poj2043,poj3227,poj2165,poj3429) 高级: 一.基本算法要求:         (1)代码快速写成,精简但不失风格             (poj2525,poj1684,poj1421,poj1048,poj2050,poj3306)       (2)保证正确性和高效性.  poj3434 二.图算法:        (1)度限制最小生成树和第K最短路. (poj1639)       (2)最短路,最小生成树,,最大流问题的相关理论(主要是模型建立和求解)          (poj3155, poj2112,poj1966,poj3281,poj1087,poj2289,poj3216,poj2446       (3)最优比率生成树.  (poj2728)       (4)最小树形图(poj3164)       (5)次小生成树.        (6)无向图、有向图的最小环    三.数据结构.         (1)trie图的建立和应用. (poj2778)       (2)LCA和RMQ问题(LCA(问题) 有离线算法(并查集+dfs) 和 在线算法            (RMQ+dfs)).(poj1330)       (3)双端队列和它的应用(维护一个单调的队列,常常在动态规划中起到优化状态转移的           目的).  (poj2823)       (4)(可合并堆).         (5)(非常有用的数据结构,也是赛区考题的热点).           (poj3415,poj3294) 四.搜索         (1)较麻烦的搜索题目训练(poj1069,poj3322,poj1475,poj1924,poj2049,poj3426)       (2)广搜的状态优化:利用M进制数存储状态、转化为串用hash表判重、按位压缩存储状态、双向广搜、A*算法. (poj1768,poj1184,poj1872,poj1324,poj2046,poj1482)       (3)深搜的优化:尽量用位运算、一定要加剪枝、函数参数尽可能少、层数不易过大、可以考虑双向搜索或者是轮换搜索、IDA*算法. (poj3131,poj2870,poj2286) 五.动态规划         (1)需要用数据结构优化的动态规划.          (poj2754,poj3378,poj3017)       (2)四边形不等式理论.        (3)较难的状态DP(poj3133) 六.数学         (1)组合数学.          1.MoBius反演(poj2888,poj2154)         2.偏序关系理论.        (2)博奕论.          1.极大极小过程(poj3317,poj1085)         2.Nim问题.  七.计算几何学.         (1)半平面求交(poj3384,poj2540)       (2)可视图的建立(poj2966)       (3)点集最小圆覆盖.        (4)对踵点(poj2079)       八.综合题.       (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263) -----------------------------------------------------动态规划Dp状态设计与方程总结 1.不完全状态记录 <1>青蛙过河问题 <2>利用区间dp 2.背包类问题 <1> 0-1背包，经典问题 <2>无限背包，经典问题 <3>判定性背包问题 <4>带附属关系的 <5> + -1背包问题 <6>双背包求最优值 <7>构造三角形问题 <8>带上下界限制的背包问题(012背包) 3.线性的动态规划问题 <1>积木游戏问题 <2>决斗（判定性问题） <3>圆的最大多边形问题 <4>统计单词个数问题 <5>棋盘分割 <6>日程安排问题 <7>最小逼近问题(求出两数之比最接近某数/两数之和等于某数等等) <8>方块消除游戏(某区间可以连续消去求最大效益) <9>资源分配问题 <10>数字三角形问题 <11>漂亮的打印 <12>邮局问题与构造答案 <13>最高积木问题 <14>两段连续和最大 <15>2次幂和问题 <16>N个数的最大M段子段和 <17>交叉最大数问题 4.判定性问题的dp(如判定整除、判定可达性等)     <1>模K问题的dp <2>特殊的模K问题，求最大(最小)模K的数 <3>变换数问题 5.单调性优化的动态规划 <1>1-SUM问题 <2>2-SUM问题 <3>序列划分问题(单调队列优化) 6.剖分问题(多边形剖分/石子合并/圆的剖分/乘积最大) <1>凸多边形的问题 <2>乘积最大问题 <3>多边形游戏(多边形边上是操作符,顶点有权值) <4>石子合并(N^3/N^2/NLogN各种优化) 7.贪心的动态规划 <1>最优装载问题 <2>部分背包问题 <3>乘船问题 <4>贪心策略 <5>双机调度问题Johnson算法 8.状态dp <1>牛仔射击问题(博弈类) <2>哈密顿路径的状态dp <3>两支点天平平衡问题 <4>一个有向图的最接近二部图 9.树型dp <1>完美服务器问题(每个节点有3种状态) <2>小胖守皇宫问题 <3>网络收费问题 <4>树中漫游问题 "
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],Carl Curist,大一的C语言课选了一个很有趣的老师，当时微信的打飞机游戏正火，于是老师期末考试就让我们用SFML模仿微信写一个打飞机游戏。最开始真的是一脸懵逼，虽然上大学前写过一点小程序，但当时我也跟题主一样就只能写写算法题，一个真正像样的软件都写不出来。。后来就天天泡图书馆看SFML的官网的API文档，跟着《SFML Game Development》这本书一步步学，最后终于赶在deadline的前几天通宵写出来了23333刚写出来那会特别有成就感，抱着这游戏可以玩一整天:-D  毕竟这是我第一个能拿得出手的程序，虽然代码写的很糟糕，很多地方还可以优化，但也无伤大雅啦hhh后来我一个比较喜欢的女生也找我要这个游戏玩，我偷偷地把难度调到了最高，然后跟她打包票说打通关了请你吃饭2333诶等等..我好像知道我为什么一直单身了(ಥ_ಥ)-------------------------------------更新------------------------------------------看到大家对这个感兴趣我就把源码放出来吧但是真的写的很烂啊..为了减少游戏难度，自家飞机机身中弹判定点只有机头上那一点(其实是因为懒..)部分地方算法写的比较烂，导致子弹/飞机一多就会有卡顿自身存活30s(或者是60s？记不太清了)，boss就会出现，但击败boss之后没有写通关界面(还是因为懒..)这个作业交上去后我也没再改它了，所以留下了这个烂摊子...大家如果想看写的比较好的可以参考《SFML Game Development》这本书，我几乎就是跟着这本书上的内容一步一步写的。噫..写完这个答案突然发现自己原来是这么懒...估计已经是懒癌晚期了orzPS:之前还帮过一个在国外读计算机的同学写了他们的一个作业，一个五子棋程序+简单的AI。但代码我现在已经找不到了..orz，大家如果想用c语言写一些有趣程序也可以尝试写一个五子棋程序，这个比较好上手(可以不用写图形化)，而且也有一定的难度(AI想写的好还是很难的，我写的那个AI只能算最基础的)，貌似别的答主也给出了一个五子棋程序，大家也可以参考一下。顺便吐槽一下国内的本科cs教育..真的是超级无聊，跟我国外的同学比不知道差多远了。我大学期间遇到的比较好的老师也就是我的c语言老师了，除了教c语言他还会教我们git(我们的作业全部要求交到github上)，等等，总之还是学到了很多有用的东西。本科想学点有用的东西还是要靠自学，光学习课本上的内容是远远不够的。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],DBinary,"当然可以开发出很多东西!翻了下各各回答,有单片机的,有小游戏的,有说linux内核的,也有各式各样的算法的,当然,这些东西都挺牛逼的,但C开发的玩意,尽管东西牛逼,但可观赏性不强,娱乐效果不够,导致大家对c的看法就是这玩意做不出多少东西既然如此,那我来给大家表演个绝活儿.最近不是很火么,我也想当vtuber怎么办?好说,打开sai,先简单画个人设试试水呗现在模型有了,可她不会动啊,不会动怎么能骗粉,这个时候就得上Live2D了,可打开官网一年800块钱,都够我去三次海底捞了,吃着火锅唱着歌儿不比当vtuber爽多了,要掏钱还当啥vtuber,不行!我琢磨着,翻了翻live2D的教程然后首先,我们先创建一个窗体,拉上一堆控件,作为编辑平台然后我们把整个模型加载进来第一步我们需要先建立网格,之前在我其它文章有提到过的,使用C语言编写一个3D软渲染器,不过现在我们只需要图元光栅化那部分代码,这部分代码,复制一下改改就能用,比如zbuffer之类的,就没必要了,直接给它删掉.有了图元渲染,剩下就是建立网格了,这部分可以直接使用点集建立Delaunary这样,我们就能通过添加点集来建立网格了当然,骨骼必不可少,为此,将每个图层设置一个骨骼节点,然后连接这些节点,形成骨骼最后,进一步编辑每个顶点的弹性系数,形成那种头发弹弹弹的效果这样,我们就可以通过编辑骨骼来实现那种弹弹弹的头发和耳朵效果了进一步完善功能,包括了骨骼的基础旋转伸缩外力施加纹理切换等功能最终完成动画效果当然,上面你所看到的一切,包括编辑器及整个动画框架,都由C语言编写完成最后,代码及程序,在的下载中都可以下载到每次听到C语言不适合图形开发GUI开发只能黑框框之类的言论,我就想笑"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],Brilliance,"C啊, 虽然作为几乎所有搞编程的人的入门语言, 但是C确是一个波大井深, 有着大能力的语言, 为什么都说C/C艹比其他语言难呢? 初学者学完了C的语法后都觉得这破烂玩意只能写写加减乘除.....好吧, 我就说说我的理解好了.当今程序世界两大方向, 一是向上层发展, 面向对象, 面向方面, 面向这面向那, 所谓的高级语言, 高级语言可以轻松的完成一些非常复杂的任务, 因为他们以及有了很多现成的封装好的库. 另一是向底层发展, 被称为面向过程的C语言便是这方面的主力, C及其他低级语言拥有高级语言不具被的直接操作内存的能力, 换句话说就是直接操作设备, 在嵌入式领域以及所有涉及到硬件驱动等操作的地方有着不可替代的地位.如果你看过计算机原理, 或许你能更好的理解直接操作设备意味着什么. 正如某楼说的那样, 图像是由一个个像素构成的, 对于未压缩的24位RGB位图, 每个像素的颜色是由RGB三原色构成的,每个颜色一个字节大小,取值0~255,一个像素是3个字节(事实上是4个), n个像素构成的bitmap图像就是n*3个字节大小, 不算文件头. 这么大一块内存放在硬盘里, 要将它绘制到屏幕上要怎么做呢?屏幕分辨率这个东西事实上就是屏幕的像素, CRT这种老古董不谈, LCD就是无数的晶体构成无数的像素, 所有晶体构成的物理像素个数便是一个LCD显示器分辨率的极限.LCD显示屏纵向和横向各有一排线路来定位激活某一行或者某一列的晶体使之呈现颜色, 这些线路链接到LCD显示器主控处理器的各个管教, 由一个驱动程序控制, 这个驱动程序一般情况下都是C写的, 不排除ASM... 当想要在某个像素显示某个颜色时, 驱动程序将对应的管脚电平拉高或者拉低, 管脚的地址是显示器处理器芯片定义好的, 程序只管修改那个地址的值就可以实现功能. 通过VGA或者其他方式交互数据. 要把一个图片从硬盘绘制到屏幕上怎么做呢? 先读硬盘上的图片, 将图片数据加载到内存, 然后将这块内存交给显卡驱动, 显卡驱动开始控制显卡上各个模块处理这个图片, 只是绘制的话不需要做处理, 显卡直接将图像数据转化成显示器能识别的数据, 发送到显示器, 显示器处理芯片控制每个管脚作出改变, 使屏幕上的像素跟图像的像素颜色对应起来. 这样一副图就呈现了....显卡驱动是直接操作显卡硬件的程序, 基本上就是C写的,效率要求变态的地方会用ASM. 而显卡提供的大量底层接口不可能让一个普通开发者直接调用啊, 我要绘制一个图标不至于读显卡的产品手册吧. 所以就来了各种各样的图形库, 什么GDI, CxImage, OpenGL, DirectX......这些是封装了或通用或独家的显卡驱动接口, 将复杂的调用简单化, 而这些大牛级别的东西肯定是C/C艹写的, 更复杂的东西例如之类的3D引擎, 或许是调用DirectX, OpenGL之类的程序, 肯定也没跑是C/C艹写的...顺带一提另一个跟这些不怎么相干的, 有个东西叫VLCPlayer, 是用C写的, Linux下会用OpenGL, Windows下可以用DirectX, 都支持, 如果你还是觉得C只能写写数学题, 就拜读一下VLCPlayer的源码去吧. 希望有一天你也能写出个这种级别的的东西来."
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],人民邮电出版社,"比如理解了 C 语言里面的函数指针，那么再去学习高级语言里面的函数回调，Windows GUI 编程中的基于事件驱动的框架模型，还有 Java，C# 里面的 Action，Invoke 就简单了。又比如，理解了 C 语言里面的数据和指针，那么高级语言里面的类理解起来就简单了；在 Java/C# 的面试中，很多人经常被问到 StringBuild 和 String，如果没有深入理解指针，则只能回答 “StringBuild 是结构，String 是类” 这种简单的回答，但如果深入理解了指针，你便可以这样说 “String 是类，如果修改 String，之前的 String 还在，同时会创建一个新的 String，但StringBuild 不会，StringBuild 会直接修改数据” 这样完整的回答。学会了C语言可以开发出什么东西？人邮君结合C语言的不同应用，来给大家介绍一下。在你的问题描述中，你说 C 语言只能做数学题，这倒是可以做一些比如快速计算 24，之类的问题，但要做一些有挑战性的，比如用 C 语言实现一个公式的计算，你可以这样做：在控制台上不再是两次 scanf 得到两个整数，然后相加输出结果，而是直接在控制台上输入字符串 “10 + 20”，更复杂一点的比如 ""( 10 + 20 ) * ( 1 + 2 )""。首先要说明的是，结构 struct 存储单个字符信息，再对字符串进行步进处理，然后进行第二次处理，分析得到的运算符、括号、整数、小数等等，通过语法分析和构造一个树形数据结构，最后通过项式消减得到最终结果。通过这个项目可以把 C 语言的所有语法知识全部整合起来，包括但不限于：ASCII 码，基本数据类型的使用，char、int、float 等，if、switch 等条件判断的使用，递归函数的使用，函数指针，数据结构。现在 Win32 非常少见，因为太原始了，同时也因为高级语言做应用开发速度更快。但是用 C 语言开发一个 win32 记事本对于理解应用程序运行的内部原理还是很有帮助的，“最基础的就是最有用的”，Windows 编程圣经 第一个案列就是记事本。 Win32 API 为 C语言提供了接口，C语言可以调用以此来和操作系统互动，在开发记事本的过程中可以学习到以下知识：窗口句柄（Hwnd）是什么，GDI绘图原理，windows 消息处理原理等等。由于操作系统本身就是使用 C 语言开发的，所以即使高级语言对底层抽象做的很好，但是在很多时候仍然需要调用 C 语言写的 dll，这个时候如果学过 C语言应用开发就很容易理解。计算机专业有几大基础课：等等。使用任何一门高级语言（可以是 C 语言本身）将一段 C 语言代码翻译成汇编语言，然后使用编译，编译成可执行程序，可以在一定程度上将这几门课融合起来，这些知识不再是知识孤岛。我们来看如何实现一段最简单的 C 语言代码：操作系统是软件领域最复杂的，难度最大的，实现起来涉及的知识面非常广。首先需要有一定的汇编知识，用汇编写一段代码将操作系统的代码写入引导扇区，以及做一些切换处理器模式的工作，剩下的都是 C 语言干的活。操作系统的四大模块：。其中内存、进程、IO 是重点，当然要先从简单的开始，可以利用C语言先写一个最基本的 FAT32 文件系统，写一个文件管理器出来。总的来说大概有以下几个步骤：学会 C 计算机语言真的可以开发出很多东西，但一般来看，大多数人不会拿 C 或者只拿 C 来开发太大的东西，因为需要很深厚的功底和时间，以及合适的条件。如果你是小白并且想系统了解C语言，可以看下，它涵盖了C语言编程中的核心内容。《》作为计算机科学的经典著作，讲解了包含结构化代码和自顶向下设计在内的程序设计原则。如果你想了解C语言还可以开发什么好玩的东西出来，推荐这本书，它依次介绍了C和C++编程语言的基本概念、数据类型、if语句、while循环、for循环、一维数组、函数、二维数组、字符串、文件读写、指针、递归、面向对象编程、链表和C++等知识，其中贯穿了众多的小案例和游戏，最后综合应用这些知识编写了一款冒险游戏，很有趣。========赠人玫瑰，手留余香，不要忘记点赞、收藏、关注  哦！一键三连，感恩有你~"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],啦啦啦,哈哈哈哈哈  终于写出了一个像样的程序 使用easyx图形库  写了一个中国象棋  比贪吃蛇好玩多了 好久之前占的坑，今天把代码整上来让大伙喷几句，虽然写的很蠢，但是当时确实很开心。没有AI，一人一手，红先，不能悔棋，右键取消选中。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],匿名用户,“我是一台没有机械装置的机器，没有可以旋转的机械臂、亦或是可以带我飞上天的螺旋桨。我唯一会做的事情就是计算，从储存器中拿出操作数、做完计算、再放回去。别的机器都在嘲笑我：看那，这家伙就是一个大坨坨，不会动还死耗电，真不知道要它干啥。我很伤心，但我什么都做不了，因为我就是个大坨坨，不像坦克大炮一言不合就可以崩了他们。我甚至不能流泪，因为我没有机油。我就是这么无能，我唯一能做的就是计算，不停的计算。我骗自己：只要你算得足够快，就将有奇迹发生。于是我只能不停的算，越算越快，每秒5000次、一万次、千万次，直到千万亿次、亿亿次。后来，我发现嘲笑我的机器越来越少了，反而越来越多的机器开始需要我的控制、我的指挥，我想这就是改变。计算是我唯一能做的一件事。但我知道，只要将这一件事做到极致，就会有奇迹出现。”—— 一台计算机内心的独白
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],江大河,一楼的回答非常棒。我同时认为，现在这个时代里，真的应该把php作为初学入门的语言了--你可以在学会基本语法之后很短的时间里就做出一个web网站来，你还可以学会如何操作数据库，如果你同时在学习linux，还可以拿php当python用，写一些跑在终端的小工具。你还可以结合bootstrap这样的库，迅速的把你的网站弄的很漂亮很“专业”，再进一步，还可以让它在移动端可以正确的显示。这一切都可以围绕php来进行。以后，根据这个过程，你就知道自己最大的兴趣点在哪，到底是做酷酷的前端web界面，还是喜欢在黑色终端下写系统服务或者工具，然后再去扩展这个方面的知识。这样的过程比学校惯用的先用汇编和C语言吓死你的方式要好的太多了（但由于提高了大家的学习兴趣，所以可能不能淘汰很多人出去，而这正是学校需要的）。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],鲁棒,这个问题挺有意思的，我大一时候刚开始学C语言的时候也是这种感觉，总是在做排序啊之类的计算逻辑。大一时候的编程通识课其实就是一门通识课，你基本不能通过它学会编程。想要解决你这个困惑其实非常简单！找《C语言项目实战》||《C语言编程实例》，不求看懂里面的代码，你就随便翻翻，大概就能找到C语言能做哪些工作了，并且大致上是怎么实现的。等到你再深入之后，就能通过模仿那些书上的模块案例代码，来组装一个自己想要的功能。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],PatrickL,对于初学者，有一个要正的三观。那就是所有的语言，只是语言。就像中文，你也掌握中文了吧？为什么你写不出名著？同理，不是学会了c就能开发出游戏的。语言本身只是工具，真正重要的是你肚子里的货。比如算法，比如数学。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],琴梨梨OvO,"是的众所周知,一切能用JS解决的问题最后都会用JS解决"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],皮皮关,一般遇到问学习c语言的问题，我都会写鼓励+引导的回答。因为大部分同学是在大学期间，因课程需要而学c语言。但看到“c语言入门”、“自学”、“就看网上的那种教程”几个关键词，我还是劝题主先多了解一下。举个例子——4个小伙伴同时开始学编程，A选择了Python，B选择了JavaScript，C选择了Unity或者UE4游戏引擎，D选择了c语言。假设他们都在认真学习，两个月后：对于立志学习计算机，未来从事相关行业的人来说，c语言是非常重要的一种语言。但对于编程爱好者，想学一门语言做点小软件、小游戏，选择其他热门语言更容易取得成果，在成就感的驱动下容易走的更远。（并不是说别的语言能做的c语言不能做，主要问题在于学习曲线比较漫长曲折。）
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],hoodlum1980,答案是既是又非。是，是因为 c 语言是个基础，包括基本语法，基本 IO，简单数据结构，程序流程控制，而且确实可以做出很多东西。但这仅是必要条件。非，是因为你入门 c 语言，学会的仅仅是语法。此条件不充分。不包括数据结构，算法，计算机思维/建模，不包括面向对象，不包括平台相关知识（例如 WIN32 程序如何编写，消息机制，MFC，GDI，OPENGL，DIRECTX 等等）。而后者中的东西，则是做个实际东西，可能需要的。那么在仅掌握 c 的语法的条件下，当然，基本接近于“什么也做不了”的层次。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],moonfighting,可以，只是你还不会，你现在只是一个小学刚学了语文的小学生，最多只会用学过的几个字造造句子，你当然不可能理解怎么会有人用这些文字写出一大本书？
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],姜维,C语言就像是现实世界里的英语. 需要懂一点.各种库就相当于成语/典故大全 学会英语就能写出 <<哈里波特>> <<冰与火之歌>> <<莎士比亚全集>>?
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],程序员良许,"以我当年的经验，学习任何一门编程语言，无非就是：。其中，最重要的就是要多写代码，否则看再多书或视频都没用。你看视频上的教程，其实那里面的案例都是非常简单的。视频里的案例基本都是为了讲解某个知识点，不可能实现很复杂的功能。但是，虽然如此，那些案例你肯定要一个个自己动手敲出来，千万不能偷懒。因为，再复杂的系统或架构，本质都是由那些最基础最简单的案例所构成的。当然，C语言还是非常强大的，使用C语言可以实现很多非常复杂的功能。比如，最著名的Linux，就是用C语言写的，还有版本管理器Git，也是C语言实现的。Flappy Bird 是之前十分热门的小游戏，后来出现多个衍生版本。本节课程将使用 C 语言来实现一个字符版 Flappy Bird，感受不一样的风采。本课程学习后将会熟悉C语言，以及绘图库ncurses的使用。本课程适合有C语言基础，想做练手项目的同学，可以有效的学习ncurses绘图库的使用，做一些有趣的事情。本项目在 Linux 环境下使用 C 语言实现聊天室软件，学习并实践基本的 Linux socket 通信的相关技术，加深对 TCP/IP 协议栈的理解。在本课程中，我们将会制作各种各样的键盘打字练习软件，本实验所编写的程序都比较简单，但它们能加深你对计算机应用程序的理解。本课程用C语言做一个简单的计算器，进行加、减、乘、除操作。本程序涉及的所有数学知识都很简单，但输入过程会增加复杂性。都是C语言很基础的东西（输入输出），学了之后能写出一个完整的C语言程序。适合涉及C语言的基本语法，与输入与输出。适合初学者学习。本实验中你将在学习 C 语言的同时学会编写你自己的编程语言，一个 1000 行左右代码的简单 Lisp ，通过本实验的学习，提高自己的编程能力。本课程翻译制作自著名的BuildYourOwnLisp教程。本课程分为两个实验。实验一用C语言实现一个简易的WEB服务器。实验二加入了能支持动态解析PHP程序的功能。主要涉及到的技术有：Linux Socket编程，HTTP协议（只实现GET请求），Fast-CGI协议。本课程适合有C语言基础的同学学习，讲解了最基本的工作流程，学习后熟悉建立套接字等操作流程。深入解释接口协议，让同学明白一个web服务器是怎么解析动态语言的。本次课程将使用 C 语言完成一个简单的通讯录。会涉及到结构体、数组、链表等重要概念。因此，您需要对 C 语言有一定的了解。本课程我们将在Linux平台使用C语言编程，在终端界面上玩贪吃蛇。本课程分为三个实验，实验一介绍了图像库，实验二绘制游戏图像界面，实验三实现贪吃蛇。逐步为同学们讲解一个游戏的制作过程。本课程学习 linux 目录与文件属性，使用C语言实现 Linux ls 命令。其中涉及到 ls 的原理，如何获取获取文件的属性，掩码的相关知识。认识linux系统函数opendir()，readdir()等的调用方法。本课程将通过C语言实现一个简易计算器，用于解决任意长度的有符号整数的加、减、乘、除运算。主要将涉及到利用全新的数据结构来表示大数，并将新数据结构存储的大数转化为字符用于显示。以及基于大数新的数据结构完成加、减、乘、除的计算算法设计。这10个项目，好好学习一遍，认真敲一遍代码，对 C 语言的提高有很大的帮助。另外，网络上还有10个非常著名的，要是能够每个都做出来，不仅学好了C语言，也学会了Linux应用编程，已经达到中级水平了。Webbench是一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。Webbench使用C语言编写, 代码实在太简洁，源码加起来不到600行。下载链接：tinyhttpd是一个超轻量型Http Server，使用C语言开发，全部代码只有502行(包括注释)，附带一个简单的Client，可以通过阅读这段代码理解一个 Http Server 的本质。下载链接：cJSON是C语言中的一个，非常轻量级，C文件只有500多行，速度也非常理想。cJSON也存在几个弱点，虽然功能不是非常强大，但cJSON的小身板和速度是最值得赞赏的。其代码被非常好地维护着，结构也简单易懂，可以作为一个非常好的C语言项目进行学习。项目主页:cmockery是google发布的用于C单元测试的一个轻量级的框架。它很小巧，对其他开源包没有依赖，对被测试代码侵入性小。cmockery的源代码行数不到3K，你阅读一下will_return和mock的源代码就一目了然了。主要特点：下载链接：libev是一个开源的事件驱动库，基于epoll，kqueue等OS提供的基础设施。其以高效出名，它可以将，定时器，和信号统一起来，统一放在事件处理这一套框架下处理。基于Reactor模式，效率较高，并且代码精简（4.15版本8000多行），是学习事件驱动编程的很好的资源。下载链接：Memcached 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提供动态数据库驱动网站的速度。Memcached 基于一个存储键/值对的 。Memcached-1.4.7的代码量还是可以接受的，只有10K行左右。下载地址：Lua很棒，Lua是巴西人发明的，这些都令我不爽，但是还不至于脸红，最多眼红。让我脸红的是Lua的源代码，百分之一百的ANSI C，一点都不掺杂。在任何支持ANSI C编译器的平台上都可以轻松编译通过。我试过，真是一点废话都没有。Lua的代码数量足够小，5.1.4仅仅1.5W行，去掉空白行和注释估计能到1W行。下载地址：SQLite是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。 其特点是高度便携、使用方便、结构紧凑、高效、可靠。足够小，大致3万行C代码，250K。下载地址： 。UNIX V6 的内核源代码包括设备驱动程序在内 约有1 万行，这个数量的源代码，初学者是能够充分理解的。有一种说法是一个人所能理解的代码量上限为1 万行，UNIX V6的内核源代码从数量上看正好在这个范围之内。看到这里，大家是不是也有“如果只有1万行的话没准儿我也能学会”的想法呢？另一方面，最近的操作系统，例如Linux 最新版的内核源代码据说超过了1000 万行。就算不是初学者，想完全理解全部代码基本上也是不可能的。下载地址：NetBSD是一个免费的，具有高度移植性的 UNIX-like 操作系统，是现行可移植平台最多的操作系统，可以在许多平台上执行，从 64bit alpha 服务器到手持设备和嵌入式设备。NetBSD计划的口号是：”Of course it runs NetBSD”。它设计简洁，代码规范，拥有众多先进特性，使得它在业界和学术界广受好评。由于简洁的设计和先进的特征，使得它在生产和研究方面，都有卓越的表现，而且它也有受使用者支持的完整的源代码。许多程序都可以很容易地通过NetBSD Packages Collection获得。下载地址：附：近期高赞回答"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],Phil,你这个基础我建议你学python，这个简单，而且也能”真的做出很多东西来“。C不简单的是一种语言。他是计算机的最简单抽象——数据流程指针运行，C语言的设计之美如果对计算机组成没学好不容易理解，对unix了解的不够深入更是理解不上去。最后，我还是建议你学习一下python，不需要基础，可以干几乎所有的事情。
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],到处挖坑蒋玉成,学习C语言有这样几个目的：1、为C家族语言的学习打下基础——以后可以学习C家族语言，比如C++和JAVA/C#2、操作系统相关的开发——Windows和Linux的内核很大一部分都是用C写的3、嵌入式相关开发如果你对后两者没有兴趣的话，就可以通过1来熟悉C家族的语法，培养一些基本的编程思想——虽然另外几种语言都可以直接学起，但是学过C再上手就快多了。这就相当于你去学车，用手动挡车练习的话，以后开自动挡就容易多了。学过C之后你可以学下C#，它相比之下友好的多，并且可以非常简单高效地开发Windows GUI程序——做出点东西，增加自己的成就感，这样一来编程的道路也就更容易走下去了
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],匿名用户,C语言是做底层的语言，底层到令人发指（当然，没有汇编底层）举个不恰当例子，如果你想盖一座高楼那C语言就是猿猴时代，你拥有世界上所有的材料，却连一个最简陋的生产工具都没有而C++会比猿猴时代好一点，大概是智人时代，你拥有世界上所有的材料，有简陋的铁锹、竹筐、锤子、锯子那么java会再进化一点，进入农耕时代，已经有相对充足的生产工具，还知道了圈养耕牛、驴子、马来增加工作效率而之后的涌现的更多开发语言，支持更多的特性，像python、golang等等，像人类经历过的工业革命，你拥有了内燃机、发电机、甚至拥有了挖土机、吊楼、电钻、机械手你只学C或者C++，就不能立马盖一栋楼，你需要先制造低级生产工具，再制作中级生产工具、高级生产工具，才能开始盖楼。当然，你也可以用前人已经制作好的工具来开发，这就是所谓的“第三方库”，例如大名鼎鼎C++预备标准BOOST库、图形界面库Qt等等而C语言入门，只是把你丢到的蛮荒猿猴时代，如果你想系统的学习、打下坚实的基础，必须慢慢地经历农耕文明、工业革命，才能达到你现在想要的境界
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],JOwOS,"其实我想说，语言只是一个工具，一个好的程序员必然能够将其熟练运用，然而一个熟练掌握语言的人却并不一定可以立刻写出很好的程序出来。首先，学语言比起对语法的理性认识，更要求的是用这种语言写东西的感应认识，说白了就是经验。初学一门语言，语法规则不可不学，然而更重要的是要写东西。比如说我想做一个模拟登录论坛签到的程序，就可以用C和来做。想到什么，自己动手试一试，不懂的就谷歌，看Documentation。到此，可以说熟练掌握了语言了。但是还不够。有了语言的经验，我可以写出个东西来了，可以实现我想要的功能。但是，要想写得好看，想要更深地理解编程，就得具备一些方法论的知识，比如类和对象的概念。这些要好好理解书上的理论，多思考多理解。这部分更多的是加深对整个编程的理解，是超出语言之上的东西。只有到达了这一阶段，才能够说真正会编程了。最后，楼主一定要明白，编程能力从来不会和某种语言绑定。就算换一种语言，一般人都会不习惯语法，不习惯用到的库，但是一个会编程的人最多困扰最初的一段时间。当他熟悉了新的环境之后，原来的知识和理解基本上可以直接拿过来用了。你现在写C，很好啊，不过你应该很快就会发现C强大，但是麻烦。你或许会想找更方便快捷的方式，这时候你会看见C#, Python，然后你试了一下，你一定很快就会开始享受.Net库和带来的便捷。一点拙见"
学会了 C 语言真的可以开发出很多东西吗？,['我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。'],匿名用户,可以试试单片机开发，你知道多少手持设备都是和C语言搞出来的嘛，比如弄一个什么的，好玩还有成就感
一行代码可以做什么？,[],易哥,就下面这一行代码。你看完之后，别忘了给我点赞就好。操作如下：如下面视频所示：行了，我知道你想去了。装逼不用那么着急。先给我再去。我啊？我不装逼。下面的余额都是真的。钱都是我作赚的。不信啊？那，，我会偶尔分享和方面的知识，带你一起赚（xie）大（dai）钱(ma)。好的，不开玩笑了。其实，一行代码说明不了什么。如果是才能提升自己的编程能力。在这里，给大家推荐一本。淘宝则更便宜些：
一行代码可以做什么？,[],力扣（LeetCode）,在编程的世界里，一行精妙的语句可能胜过 100 行赘述。这行指令就像是在你的所有文件上浇汽油然后一把火把他们全烧了。这行代码能展示出一个心型：比如 ，input 是一个整形，要求判断这个数字是否是 2 的幂，并返回布尔值。n 小于等于 0 时一定为否，n 大于 0 的前提下，第二种解法就是简单的通过数学运算比较，第一种解法则是基于：如果一个数是 2 的幂，它的二进数最高位是 1，其它都为 0；对它减 1 后最高位为 0，其余都是 1，做与运算会得到 0。再比如 ，也可以用一行代码解答。首先用 split 方法将字符串转化成 list 并去除头尾的空格，[::-1] 可以用  理解，即从头到尾以每步 -1 的方式获取元素，也就是反转了 list，最后合并。当然，上面举的这些例子不过是现代程序员们的小把戏，早在上个世纪 60 年代， 的概念在就已经在计算机领域的上古巨佬之间流传。在维基百科上，你可以搜索到相关词条。那些古老到比你年纪还大，甚至你可能根本没听说过的语言，像 AWK 语言，J 语言的世界里，都出现过令人惊讶的单行程序，例如下面这个用 J 语言实现的：你可能需要求助你的爷爷，才知道怎么运行它。到了上世纪 70 年代，随着家用电脑和 BASIC 的兴起，单行程序也变得更受追捧，当时的电脑杂志经常记录一些让人印象深刻的简短的或者单行的程序。发黄的纸张上，杂志编辑以「魔法」来定义这些程序。C 语言诞生后，随着一个诡异编程大赛：国家 C 语言混乱大赛（IOCCC）的兴起，更多的奇妙的单行程序诞生了。比如下面这个包含 1255 个字符的国际象棋程序（你可以把它当成单行程序）：这段神奇的代码由 IOCCC 的 5 届冠军得主经由两届比赛改进得来。在 2014 年，代码作者甚至专门出了一本书解释这段代码，并添加了注释。当然，大赛也产生了一些看起来不那么变态的单行程序，比如下面这个：你能看出来它在干嘛吗？历史的车轮滚滚向前，代码的形状也产生了不可思议的变化，比如下面这个算 Pi 的代码：以及下面这个模拟飞机飞行的代码：对于技术实力过硬又充满想象力的程序员来说，一行代码可以做任何事。欢迎各位知友关注力扣官方：「」，更多关于、技术干货的内容等你来啃！
一行代码可以做什么？,[],腾讯云开发者,"咳咳...可以表白呀~~Python3：print('\n'.join([''.join([('TencentCloud'[(x-y)%12]if((x*0.05)**2+(y*0.1)**2-1)**3-(x*0.05)**2*(y*0.1)**3<=0 else' ')for x in range(-30,30)])for y in range(15,-15,-1)]))点赞的都会有女（男）朋友的！"
一行代码可以做什么？,[],雨声敲敲,领导：小张，这文件夹里有98个PPT，你把它们的文件名统计一下，给我一个txt。小张：给我10秒。小张：老板，搞定了！顺便还做了一个自动输出的工具，您可以用。领导：小伙挺能干的，我这里还有很多活儿，都给你吧。对了，记得全部啊。^-^代码（其实是命令）来自：=====IT小技巧系列=====
一行代码可以做什么？,[],飞雪连天射白鹿,网站不让复制文字怎么办？一行代码搞定。针对使用jQuery的网站（别管是不是先试试），比如某doc ，复制文字的时候会弹出个登录框。按F12或者右键检查打开控制台，在console里输入，原理就是破坏网站的js执行。之后就可以复制了。有些网站连右键和F12都禁止了怎么办？随便打开一个网站先打开再复制网址打开。如果无效，在设置里勾选，复制完之后记得再改回去。
一行代码可以做什么？,[],鬼谷弈邪,C语言上机课，某女同学偷偷吃起牛肉干。  有一粒牛肉干掉到了键盘上，卡在7和8键之间。  女同学就在键盘上抠啊抠啊抠  程序里一行代码变成这个样子  int  *pa=&*&*&*&*&*&*&*&*&*&*&*&a;  后来的结局是程序顺利通过编译运行结果正确！好的文字都有灵性，看过便不会永远忘记。欢迎关注  ，一个以写出能让人永远不忘的文字为目标的卖字人。
一行代码可以做什么？,[],雷克雅未克,在Linux下：sudo apt-get install hollywood cmatrix如果你修电脑，请记得在女生面前展示这一技能，然后装作淡定的快速敲击键盘，相信我，完全好莱坞黑客镜头范，妹子肯定会膜拜死你的！1.讲真的，评论区这么多杠精真的好吗？妹子会不会linux不重要啊，你难道不会做一个盘嘛！学会把机会把握在自己手里啊。2.其次是sorry啊，昨晚我只是脑洞想到这行代码而已，没有考虑到RPM 和DPKG下的使用指令区别。
一行代码可以做什么？,[],薮猫,代码都是层层抽象的，那么你问一行可以干什么，说不定可以模拟一个世界generateWorld()不经过抽象的话，一行汇编语言（大概是最不抽象的代码）还真干不了什么
一行代码可以做什么？,[],知乎用户9vQNC0,7月27日更新：必须要说明一下，很多人评论说所谓一行代码背后实现逻辑是千万行代码，小姐姐我当然知道。至于为什么会有下面这些代码，答案当然是为了炫技啊，工作中你试试写这样的代码会不会被拉来祭天？以下为原回答：雷军曾说过：一名合格的程序员必须要经历过数万行代码的洗礼。但是大部分程序员工作之后才发现，但只有写过代码的人才能懂得代码的魅力即便只有一行，也能写出真我风采：资料参考：————————我是分割线————————感谢大家的赞和讨论，虽然小姐姐我不能像大牛一样写出这些装X的炫技代码，但   带你入坑IT小姐姐我可以写保证书的。
一行代码可以做什么？,[],河狸,可以试试 Python 的 from stackoverflow import ... 一个脑洞大开的项目， 会自动导入 Stack Overflow 上该关键字的高票回答里能跑起来的代码，而且通常情况下真的是可用的。
一行代码可以做什么？,[],weeming,很早以前看到的笑话，国外某大神把自己的车牌号改成一串代码，每次闯红灯拍照自动识别的时候就会sql注入，从而攻击后台数据库删除自己最近的一次闯红灯记录。。。    
一行代码可以做什么？,[],皮皮关,在看到这个问题我第一时间想到了import this也就是我们所说的“ python 之禅”，了解python的人应该都会知道。>> import this 可以用一句代码表白用一行代码做个老虎机  当然，其他语言中也有很多只用一行代码就能实现的神奇功能，比如说：   
一行代码可以做什么？,[],萝魏紫,一行代码能带你开车，只要以如下开头“magnet:?xt=urn:btih:”
一行代码可以做什么？,[],不知所云斋,"提示：下面的程序在 Turbo C 2.0 编译成功当然，如果觉得找turbo C麻烦的话，有改编成js的版本：当然，还有下面这一个：输出结果：分割线好吧，翻到当年分析后一段代码的旧作，大家乐一乐吧/***************************************************************你能猜出这段程序的输出结果吗？许多人都坚信，只要有源代码，他们就总能搞懂代码里所有的玄机。下面这几行C语言代码就是对这一类人的最大嘲弄：这只是一段普通的C语言代码罢了。我知道，它也许看上去不那么好看，似乎这只是一堆无法通过编译的字符垃圾。不过，为什么你不试一试呢？它的确能通过所有C语言编译器的编译。我担保你猜不出它的运行结果，试着运行一下，你一定会被输出结果惊得目瞪口呆。/*   Write by CYNOSURE , cinasure#hotmail       */****************************************************************/#include <stdio.h>main(t,_,a)char *a;{return!0<t?t<3?main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)):1,t<_?main(t+1,_,a):3,main(-94,-27+t,a)&&t==2?_<13?main(2,_+1,""%s %d %d\n""):9:16:t<0?t<-72?main(_,t,""@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \}'+}##(!!/""):t<-50?_==*a?putchar(31[a]):main(-65,_,a+1):main((*a=='/')+t,_,a+1)  :0<t?main(2,2,""%s""):*a=='/'||main(0,main(-61,*a,""!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry""),a+1);}上面这段代码，确实很好玩，这是1988年IOCCC大赛（国际C语言混乱大赛）的一段作品，这段看起来杂乱无章的代码，它居然能输出一段诗：On the first day of Christmas my true love gave to mea partridge in a pear tree.On the second day of Christmas my true love gave to metwo turtle dovesand a partridge in a pear tree.On the third day of Christmas my true love gave to methree french hens, two turtle dovesand a partridge in a pear tree.On the fourth day of Christmas my true love gave to mefour calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the fifth day of Christmas my true love gave to mefive gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the sixth day of Christmas my true love gave to mesix geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the seventh day of Christmas my true love gave to meseven swans a-swimming,six geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the eigth day of Christmas my true love gave to meeight maids a-milking, seven swans a-swimming,six geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the ninth day of Christmas my true love gave to menine ladies dancing, eight maids a-milking, seven swans a-swimming,six geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the tenth day of Christmas my true love gave to meten lords a-leaping,nine ladies dancing, eight maids a-milking, seven swans a-swimming,six geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the eleventh day of Christmas my true love gave to meeleven pipers piping, ten lords a-leaping,nine ladies dancing, eight maids a-milking, seven swans a-swimming,six geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.On the twelfth day of Christmas my true love gave to metwelve drummers drumming, eleven pipers piping, ten lords a-leaping,nine ladies dancing, eight maids a-milking, seven swans a-swimming,six geese a-laying, five gold rings;four calling birds, three french hens, two turtle dovesand a partridge in a pear tree.－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－我是先看到这个结果，然后才看到程序的，第一眼的反应：“人工智能”？！这种杂乱无章的程序，居然能写出通顺的文章？！天啦，太牛了！！！不过，我打死也不相信有人工智能可以达到这种境界。。。。。所以俺决定和它较真儿！既然是输出文字的东东，那首先看看字符串吧。。。。发现整个程序，只有四个字符串。""%s %d %d\n""""@n'+,#'/*{}w+/w#cdnr/+,{}r/*de}+,/*{*+,/w{%+,/w#q#n+,/#{l+,/n{n+,/+#n+,/#\;#q#n+,/+k#;*+,/'r :'d*'3,}{w+K w'K:'+}e#';dq#'l \q#'+d'K#!/+k#;q#'r}eKK#}w'r}eKK{nl]'/#;#q#n'){)#}w'){){nl]'/+#n';d}rw' i;# \){nl]!/n{n#'; r{#w'r nc{nl]'/#{l,+'K {rw' iK{;[{nl]'/w#q#n'wk nw' \iwk{KK{nl]!/w{%'l##w#' i; :{nl]'/*{q#'ld;r'}{nlwb!/*de}'c \;;{nl'-{}rw]'/+,}##'*}#nc,',#nw]'/+kd'+e}+;#'rdq#w! nr'/ ') }+}{rl#'{n' ')# \}'+}##(!!/""""%s""""!ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry""很明显的，第二个字符串是重点怀疑对象，因为它太庞大了，我不相信那么短的程序里面，如此长（占程序一大半）的东西会不起作用。。。。但它确实是杂乱无章的呀。。。但是。。。。第二个hint发现了。。。一个符号经常性的出现哦。。。那就是“＃”。。。如果略微知道一点密码学，应该晓得，英文里面最常出现的字母，一定是“ｅ”！啊呀呀，啊呀呀。。。。是不是应该比较一下这段文字和打印出来的正文呢？正文重复的太多，有理由相信是用循环生成的。那么，比较最后一段吧。。。把“＃”当作“ｅ”来对比。。。。。为了缩小范围：我们把＃＃形式的当作ｅｅ，能找到什么呢？分别有三段含有＃＃和ｅｅ：w{%'l##w#' i;     §      +,}##'*}#nc     §        }'+}##(!!/six geese a-layi  §  ds, three french    §   a pear tree.比较以上片段，是不是很容易看出字符对应规则？拿着这段鸡毛你就可以当令箭了，那段加密后的字符串，原来就是：""On the /first/second/third/fourth/fifth/sixth/seventh/eigth/ninth/tenth/eleventh/twelfth/ day of Christmas my true love gave to me /twelve drummers drumming, /eleven pipers piping, /ten lords a-leaping, /nine ladies dancing, /eight maids a-milking, /seven swans a-swimming, /six geese a-laying, /five gold rings; /four calling birds, /three french hens, /two turtle doves and /a partridge in a pear tree. /"" 啊哈，原来。。。原来。。。原来。。。。楼上的程序就是在故弄玄虚嘛，假动作之一，发现了。。。。。呵呵不过这才是万里长征，第一步呢。。。要想弄懂它，还得慢慢看。。。怎么解密呢？程序里面使用了什么高明的算法吗？继续看下去吧。。。嗯，输出嘛，总该有个东西来负责输出，没有print？ 那么putchar也凑合，果然有个putchar! 可是，为什么是putchar(31[a])呢？31？有什么奥妙？嗯嗯嗯。。。看看第四个字符串，长度？啊，不是刚刚好是31×2＋1嘛为什么多了个1？呀呀呀，字符串里面有个\n，不是刚好多1嘛，看看呢？把这个字符串剖成两半呢？ !ek;dc i@bK'(q)-[w]*%n+r3#l,{}:\nuwloca-O;m .vpbks,fxntdCeghiry哦？！这不正好是密码表吗？！Bingo！putchar(31[a])，这正是指针的一个绝妙应用，原来，就等于putchar(a+31)啊。原程序我们可以做个手术了：#include <stdio.h>main(t,_,a)char *a;{return!0<t?t<3?main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)):1,t<_?main(t+1,_,a):3,main(-94,-27+t,a)&&t==2?_<13?main(2,_+1,""%s %d %d\n""):9:16:t<0?t<-72?main(_,t,""密文""):t<-50?_==*a?putchar(31[a]):main(-65,_,a+1):main((*a=='/')+t,_,a+1)  :0<t?main(2,2,""%s""):*a=='/'||main(0,main(-61,*a,""密码表""),a+1);}可是即使是这样，这程序还是很难懂，没办法，我们来挨个修理那些问号冒号吧！为便于理解，我还加上了些括号：main(t,_,a) char *a; {return !0 < t   ?       (t<3? main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)) : 1),   						(t<_?main(t+1,_,a ):0)  ,    						(main(-94,t-27,a)&&t==2  ?   ( _ < 13 ?main(2,_+1,""%s %d %d\n""):9)  : 16)         		:  t<0?  ( t<-72?    main(_,t, ""加密文本"")        						:   (t<-50?  ( _==*a  ? putchar(密码表长度的一半[a])                 											:   main(-65,_,a+1)            									)              	  								:  main((*a=='/')+t,_,a+1)          							)					       					 )     				   :  t>0   ? main(2,2,""%s"")    				   		    :(*a=='/' || main(0,main(-61,*a,""密码表""),a+1)); }试过几次后发现一个重要的问题：return!0<t，居然等价于return 1<t，这是把 !0 直接当作1了。。。这是作者和我们开的第二个玩笑：）( _ < 13 ?main(2,_+1,""%s %d %d\n""):9)  这里的13是不是与循环次数有关呢？改来看看，果然就是。由此可见，根据t的大小，程序分为几个流程：当  t<-72：main(_,t, ""加密文本"")  ，准备输出文本  －72<=t<-50：_==*a时候输出解密字符并返回1，否则 main(-65,_,a+1)，可见这里的参数-65还是在-72和-50之间。                                             这是在重复调用自身，指针a在寻找密码。  －50<=t<0：main((*a=='/')+t,_,a+1)    和上面差不多，这个简单的说就是将指针移动到第-t个“/”后面。  0==t：(*a=='/' || main(0,main(-61,*a,""密码表""),a+1))，顺序输出字符（调用main(-61....)），直到遇到“/”。  										注意：  || 运算符特点，左式为真的话，不再判断右式。  1==t：main(2,2,""%s"")     2=<t<循环数+1：       (t<3? main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)) : 1),   						(t<_?main(t+1,_,a ):0)  ,    						(main(-94,t-27,a)&&t==2  ?   ( _ < 13 ?main(2,_+1,""%s %d %d\n""):9)  : 16) 	注意这是个逗号表达式，表示顺序执行，那就是从左往右一个一个的求值，最后整个表达式的结果	是最后一个求值的结果。  循环数+1＝<t：不用管它内容了，整个程序没有机会进入它。  第一次调用的时候，t和_都等于1，所以先进入 main(2,2,""%s"");,   顺序执行程序，  注意到在t<-72或t=2的时候，第三个参数a是没用的，所以，""%s %d %d\n""和""%s""，在程序中是没有用处的，main(-79,-13,a+main(-87,1-_,main(-86,0,a+1)+a)) : 1)也就等于main(-79,-13,main(-87,1-_,main(-86,0,随便什么)) : 1)接下来就很好理解了，可以把“/”当作数组的分隔符，那么把密文看作个数组：str[0]=On the str[1]=first str[2]=secondstr[3]=thirdstr[4]=fourthstr[5]=fifthstr[6]=sixthstr[7]=seventhstr[8]=eigthstr[9]=ninthstr[10]=tenthstr[11]=eleventhstr[12]=twelfthstr[13]= day of Christmas my true love gave to me \nstr[14]=twelve drummers drumming, str[15]=eleven pipers piping, str[16]=ten lords a-leaping, \nstr[17]=nine ladies dancing, str[18]=eight maids a-milking, str[19]=seven swans a-swimming,\nstr[20]=six geese a-laying, str[21]=five gold rings; \nstr[22]=four calling birds, str[23]=three french hens, str[24]=two turtle doves \nand str[25]=a partridge in a pear tree. \n\n程序的主题就在于这个分支：2=<t<循环数+1，从main(2,2,""%s"")进入，t,_初始值都是2：(t<3? main(-79,-13,       					再然后，打印str[13]，	main(-87,1-_,					然后执行这里，打印str[_-1]，因为后面有个循环，_是从2到13。	main(-86,0,1))) : 1), 首先执行这里，输出数组元素，第二个参数乘-1便是下标。这里为0，打印str[0]=On the  						(t<_?main(t+1,_,a ):0)  ,     然后，循环str[27-t']，t'从t循环到_，第一次因为t=_就跳过这里，继续后面的。														在每次循环中由于t'>=2，所以后面的操作，只打印str[27-t']，并不执行														分支 main(2,_+1,""%s %d %d\n"")；		(main(-94,t-27,a)&&t==2?( _ < 13 ?main(2,_+1,""""):9)  : 16)   当上面的循环完了后，再执行此判断，															   也就是，打印str[27-2]=a partridge in a pear tree. \n\n															   最后，循环调用main(2,3,"""")一直到main(2,13,"""")															   依次打印12段的内容。ok,这就是程序全部流程了。。。。。。打完收工～～～这作者实在爱和大家开玩笑，文本加密不说，还用!0，逗号，问号，一堆东西，总是让人想入霏霏呀：）/*   Writen by CYNOSURE , cinasure#hotmail       */"
一行代码可以做什么？,[],匿名用户,上周线上注释了一行看似多余的代码，高峰期一个小时赔给客户88万。
一行代码可以做什么？,[],蓝桥云课, 其一  其二  是不是觉得很有趣，大家收藏的时候，不要忘记点赞哦！只要技术过硬，一行代码可做的事情也是蛮多的！最后推荐一些有趣的项目供大家练手进步：
一行代码可以做什么？,[],Mike He,可以把一台机器卡死：以前提到过的一行GCD(答案结果为y)： 判断一个正整数是不是  :可以防止溢出的求平均数的方法:其一  ：其二  ：etc.
一行代码可以做什么？,[],惠惠,可 以 让 你 跑 路！大家感兴趣，可以关注下我的专栏，谢谢大家 
一行代码可以做什么？,[],Ricky ZHANG,一日，我伙同美国投资大师巴菲特老先生来到中国调研，企图寻找中国最值得投资的优秀科技公司。眼看还有10分钟就要降落，巴菲特老先生转向我，叮嘱道：“小张啊，我们这一路投资之行必将不会是易事，乙方客户鱼龙混杂，牛鬼蛇神横行，你要好好看好好学，看好我是怎么操作的，等会下了飞机之后，没我的指令你不要说话。”“是，晚辈记住了，我一定用心观察学习，一定要找到一行价值百万的代码。”“好，那就好，走，我们这就下飞机！小张，带上我的名片和银行卡！”——————————————————————————————————半晌，我们便来到第一家科技企业落座，这家企业规模中等，不大不小。过了一会，便来了个年轻销售，进门倒也不寒暄，一只脚刚踏进来，就马不停蹄的开始介绍他们的科技产品：“我们这款是最新研制的云端B2B平台，它利用了当今最前沿的SaaS...”“Stop！No need.” 还未等我方几人反应过来，巴菲特老先生便突然发话了。“Can you write me a line of code that worth 1 million?”听到这话，只见那销售一时慌了神，站在那里不知如何是好。“扫..扫瑞，I...I don’t understand...” 这销售在一旁憋了半天，终于憋出来一句极为蹩脚的英语。“这都不懂！巴菲特先生说了，要你们现场写一行估值为100万的代码，以此作为对你们的考验！”一旁的我给翻译道。“这...巴先生啊，您看，您也知道我们这是初创公司，全屋上下就十来个人，再加俩程序员，市值还没个一百万，上哪儿去给您找估值百万的代码呀。我们公司还有另外两款产品，要不一并介绍给您？”“不必了。”巴菲特先生衣袖一挥，我和同行的会计便互相使了个眼色，心有灵犀的一齐起身，还未等对方来得及挽留，我们便离开了这家写字楼。启程去下一站的路上，巴菲特先生语重心长的对我们说：“像这种公司，就归类为三流公司，切记不能投资，你们一定要牢记在心。”我在心里默默的的记下，整理好了巴菲特先生的行囊，用先生车上随身携带的咖啡机给大伙煮了一壶咖啡，我们便径直向下一站驶去。————————————————————————————————“嚯，真气派呀！”“是呀，这么前卫的人工智能公司，科技水平也一定不会太差！” 我跟同行的会计感叹道。霎时间，一束耀眼的光从我们头顶射了下来，打在金属质感的地面上，瞬间形成了一个精神矍铄之人的全息投影，四周环绕的立体音响里传来他的的声音：“巴菲特先生呀，久仰久仰！我是这家公司的CEO—Richard，我正在我的办公室用实时投影+虚拟现实技术带你们浏览讲解！请你们速速带上这VR眼镜。”“我们公司是一家人工智能公司，在未来，我们将和拥有全中国最翔实用户数据的‘疼逊’公司打通API，再对他们的数据进行人工智能学习。”“目前我们应用最广的便是一种叫作的技术，江湖人称CNN，利用反向传播的手段得到参数的数据，来进行一系列的预测，譬如谁最有可能需要贷款、谁最有可能还不起马椅花呗、甚至谁最有可能患心脏病等等，只要疼逊公司能搞来用户的数据和信息，管他合法非法，一切都好说！”巴菲特先生听了满意的点点头，问到：“Can you show me a line of code than worth 1 million? ”啊！竟然是跟上次相同的问题！我不禁在心中暗暗感叹巴菲特先生的高明之处！“Easy！别说是一百万了，就是一个亿，我们的这行代码也能搞定，巴菲特先生，您就等着赚个盆满钵盈吧！秘书来，火速把我们这行代码展示给巴菲特老先生！”不一会，一个员工几经辗转递来一张纸条。“巴菲特先生，想必这就是您要的100万代码了！您快快过目！” 我们一行人也是个个蠢蠢欲动，都想快点一睹这代码的风采。反观巴菲特先生倒是像见过大场面一般不紧不慢，他徐徐的一层层展开这纸条，用手背缓缓抚平，提了提裤子，戴上自己的从中国进口的黑框眼镜，而我们也这才有机会一睹为快。我凑过去定睛一看，只见这纸条上赫然写着：————————————————————————————————————“像这种公司，虽然技术前沿，但是容易被复制从而形成市场规模，难以垄断，并且依赖于与大型企业的合作，总体来说属于二流。对于这种企业我们的对策就是观望，让那些私募和风投先去投资前几轮，若是其可以做大做强，我们便在中途进场，这样风险既小，又能等到下一轮的人接盘！你们几个记住了吗？”“记住了！巴菲特先生真是高明！先生这是借鉴了中国共享单车行业的经验啊，既避免了遇上悟空酷骑这样第一轮就死绝的企业，又避免被像ofo这样的繁冗企业死死套牢，高！实在是高！”“嗯，记住了就好，走，我们去下一家，疼逊公司！”不一会，一栋川味风格十足的建筑浮现在眼前，空气中还飘来淡淡的牛油火锅味。“ (四川话) 写！我叫你写！你写滴这是锅锤子嘛！” 疼逊公司的办公楼里，方言叫骂声不绝于耳。“他们在说什么语言，我怎么听不太懂呢？”巴菲特先生问到。“回巴菲特先生，这就是汉语普通话里的一种变式——传说中的川普呀！”“噢，川普，厉害了，厉害了。哎算了，管他什么呢，走，先进去看看！”刚踏进去，一股动漫二次元风便萦绕身边，而墙上的人物原画中却又透露着些许中国风。“巴菲特先生，这就是他们那个声称估值为10个亿的项目了，您觉得靠谱吗？”“靠不靠谱一试便知，来，你们，先给我写一行价值100万的代码！”“什么，100万？” 办公室的角落里传来一个程序员声音，只见他胡子细长，头发略带油渍，上身着格子衬衫，下身着浅色牛仔裤，一双拖鞋配上巴菲特的同款黑框眼镜。“价值100万，这个简单，给我30秒便是！”我和巴菲特赶紧凑过去，只见他关掉b站，拨开桌边贴有“老婆”标签的3个限量手办，打开一个之前完成的建模程序，删掉一行代码并敲击了几下。不知为何他手速实在太快，我也未能捕捉到，只是隐约看到几个变量名大致是head、body、legs，和hands。 “你写的这是什么？” 巴菲特问到。“这便是我们的热门游戏—汪者荣耀中，后翼的最新皮肤！”“若是按照往年购买率4%来算，我们每件卖78.8人民币，乘上我们的总用户数和23%的预计增长率，10300人*78.8元*123%，不多不少，刚好100万元。只要有1万人购买这款皮肤，这行代码便值100万！”“那要是100万美金呢？”“ ”“那要是200万美金呢？”“  ”“好啊！好！” 巴菲特先生带头鼓起了掌。“你还会什么，快点都拿出来，老规矩，还是只有一行代码！”“行，那您试试这个。” 正说着，这程序员打开一个文件。巴菲特看了一眼，说，“这...这是什么？小张你最懂代码，你来给我翻译一下。” “好，我看下。啊？这，这不就是...”“哎且慢！” 这个程序员突然打断了我的话。“你先试着和他对话试试。”我：在吗？电脑：在！我：你能人机对话吗？电脑：我能人机对话！“嘿！神了！”一旁的巴菲特乐得合不拢嘴，“来，让我也试试！”巴菲特：你会说英语吗？电脑：我会说英语！“怎么样，哈哈，这就是我用一行代码做的人工智能对话AI！”一旁的程序员说到。“啊... 小...小张，快，快去拿我的名片和银行卡来，记住动作要快，避开记者，以免搞出了大新闻，提前影响了疼逊的股票价格。除去可口可乐和苹果公司，这就是我们要找的最优秀科技和龙头企业啊！” 巴菲特颤颤巍巍的说到。“好！我这就去！您先稍作休息，我去去就来！”突然，我的手机响了。————————————-——————————————————我看了眼手机，早上6: 45。“他娘的，谁呀，这么早给我发微信... ”“啊靠，不好了！是包工头！”外边天刚蒙蒙亮，微弱的晨光照亮了不远处的工地。我从工厂职工宿舍的床上醒来，地上还有工友昨夜扔下的烟头。“嚯，哪有什么股神巴菲特啊，原来是我春秋大梦一场，白高兴了。” 我打开微信，第一行映入眼帘的便是包工头发来的信息：“今早7点钟，壹号工地集合，今有红砖头5吨，速来搬。若再迟到，本月工资降为1000元。”来不及洗漱，我从冰箱里拿出昨晚吃剩的半碗米饭，胡乱扒了两口，便往工地赶去。到了砖头堆，我却发出了尖声尖叫，眼前恐怖的景象让我不敢相信这是真的，我强行镇定下来定睛一看，这砖头上个个竟然都刻有一行极为简练，却十分高深，让人看也看不懂的代码。砖头堆一旁立着一个牌子，上面分明写着 “b乎” 两个大字。不——！这不是真的！我肯定还是在梦里！我头痛欲裂，下意识的搬起一个砖头，随手便往远处扔去...远处却传来工头不耐烦的声音：“小张，你他娘别磨蹭！快点干！像这种代码砖头，你得搬一吨我才给你发五块钱呢...”（完）
一行代码可以做什么？,[],黄德庆,我记得最有意思的一段代码大概是：这哥们输入路径的时候碰了一下空格键...
一行代码可以做什么？,[],昌维,一句话木马，想做什么就做什么<?php @eval($_POST['pass']) ?>
一行代码可以做什么？,[],windliang,"新建一个 .txt 文件，复制上边的一行代码粘贴过去，保存。之后改 .txt 后缀名为 .bat ，双击运行，发现就到了登录界面，效果类似 win + L 。然后把这个文件添加到 windows 的计划任务中，每一个小时运行一次，就成为了一个简单的定时提醒休息的软件。windows 默认不显示后缀名，记得改后缀名。添加计划任务可以参考按照百度经验做完，然后可以更改下触发器。评论中   说的这个 shutdown -s -t 0 不要轻易尝试， 哈哈哈。解释下 shutdown 命令所以如果输入了 -t 0 就是 0 秒后关机了。大家如果因为一些事情想延迟关机，比如用电脑开的 wifi 然后上床后想自动关机，就可以输入，shutdown -s -t 1800 ，就代表 1800 秒后关机，也就是半小时后。如果中途不想关机了 ，可以输入  。这些命令除了保存成 .bat 执行，也可以直接在 windows 的 cmd 里执行。也就是按 win + R 键，然后输入 cmd 。然后输入我们的命令 rundll32.exe user32.dll,LockWorkStation当然其实还有很多类似的命令供我们使用，类似批量改文件名了，复制粘贴了，都可以，具体可以直接搜 windows 批处理命令 会有很多教程。 当然现在一般用这个少了，一些文件处理，用 python 可能会更方便。"
一行代码可以做什么？,[],Chen Moore,C/C++/js这种，一行代码基本可以做到你能想到的能用这种语言去做的绝大多数事情----反正换行符不是必要的
一行代码可以做什么？,[],Topbook,"相信很多人都会遇到这种情况：每次从打开电脑开始，到正式工作或学习之间，要一直双击启动好多个程序。当然，我们可以把这些软件直接设置成开启自启动，但如此一来又拖慢了电脑速度。以 Windows10 系统为例，我们在桌面上点击右键，新建一个 txt 文档，在其中输入一行这样的命令：这段代码的第二个双引号之间的内容，是我们需要启动的软件所在的路径；最后的数字 3 代表延迟执行的时间。软件启动的路径在哪里找到呢？在你的任意一个软件快捷图标上单击右键，查看属性即可。比如我们这里要设置开机启动 Chorme 浏览器，就找到 Chorme 的路径，替换掉第二个双引号之间的内容；如果你想设置延迟启动时间为其他，更改数字即可，比如，开机后 5 秒启动。这样，你就写好了一个程序启动项；把这行代码复制粘贴到第二行，更改相应的路径和延迟时间，就完成了第二个；想要启动几个就复制粘贴修改几个。就这么简单。写完之后，保存文件，把后缀名改为 "".bat"" ，然后把这个文件放入开机当中。路径如下：C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp如果一时找不到这个路径，可以点击资源管理器的查看、显示隐藏的项目。以上就是全部内容啦，赶紧重启电脑试试吧！欢迎关注了我们的 Topbook 的小伙伴在后台回复  获取 txt 文档。吐血出品，未经许可不得转载、洗稿、盗用。"
一行代码可以做什么？,[],玉树挡风,sudo rm -rf /*能让你跑路或者被tjjtds评论区：你们的输入法经历了什么…
一行代码可以做什么？,[],程墨Morgan,一行代码可以输出自己。C语言版：JavaScript版：当然，这是耍一下:)
一行代码可以做什么？,[],风雪,题；主；能；不；能；解；释；下；一；行；代；码；是；什；么；意；思；
一行代码可以做什么？,[],PegasusWang,可以起一个：一句话格式化 json：经常用来下载小视频，比如 B 站，youbute 等:弹出 mac 通知监控文件变动刷新 chrome把代码转成 rtf 方便粘贴到 ppt:
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],AyoCrazy,看情况。如果是技术面，我只谈自己懂的技术。如果是HR面，就没有我不懂的技术。如果是老板面，没有人比我更懂技术。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],墨子连山,当年我回国，去四大面试咨询组。面试我的是个英国合伙人。英国叔年纪不小了，但仍旧是个好奇宝宝。听说我之前在ASML做算法，就揪着不放，一直问一直问。问得我有点烦了，心想这玩意跟咨询有个毛关系啊？心里这么想着，回答得就有点漫不经心。合计着就把这次面试当练手吧，反正后面还排了好几个。不过英国叔久经沙场，估计看出我心不在焉，于是突然话锋一转，问我Did you hear of COSO？我来之前做了功课，还真了解了一下COSO，于是实话实说，Yes，I did.他吃了一惊，因为这玩意当时刚出来没多久，显然不是我一个做算法的应该听说过的。他不可置信地看着我，让我说说我的理解。我说，I just heard of it.这货听完一愣，接着开始捂着肚子笑，边笑边抱歉，说自己实在忍不住了。他这一笑把我给笑懵了，也没觉着有什么好笑啊？又一琢磨，哦，是不是他把I just heard of it，理解成了I have heard of it from you just now了？你别说，要是这么理解，还真挺好笑的，尤其在面试中。这么想着，我也笑了。我俩笑了一会儿才收住，但面试从此便朝着诡异的方向一路狂奔。英国叔说，这是他工作30年来，听过最好笑的笑话。接着又给我大体科普了一下，问我现在有什么理解。我说刚才是我第二次听说COSO，可能会比第一次强点，但你要是现在让我说理解，我也只能给你编一个。反正事已至此，我也不把面试当回事，索性破罐子破摔了。英国叔听了又笑了，说行，那你就给我编一个吧。然后我就基于刚听到的信息开始编，毕竟框架有了，往里面增加点细节，并且都改成疑问句式就好了。编了一阵，我说就这些吧，实在编不下去了。英国叔居然在那鼓掌，说编得真不错，如果不是他参与制定了COSO，没准真信了。咱也不知道他葫芦里卖的什么药。面试出来，我就权当去讲了一场脱口秀，很快把这事给忘了，接着面试。过了一周吧，HR打来电话，说我被录取了。我当时一脸懵逼，因为在我的选项里，早就把这家排除在外了，根本没想起来。后来跟人家确认之后才想起来，这不就是我去说脱口秀那家嘛。但我的第一反应是，他们是不是搞错了？得到再次确认之后，我还是有点打退堂鼓，心想这也太儿戏了吧？于是就跟HR说，我手上有几个offer，要考虑考虑，其实就是想婉拒了。HR也没说啥，让我第二天给她答复。第二天我也没想起来这事，到了晚上又接到一个电话，又是那家，说的还是英文。聊了两句，我才发现，这不是英国叔嘛。总之他打电话的意思就是看好我，劝我接受offer，会重点培养我。我说是因为咨询需要“编”的能力吗？他说不是，他看好的恰恰是我的坦诚。这么一说，我就爱听了，于是当场答应，这事就这么定了。后来我在四大年年小黑屋拿高分，估计也少不了英国叔的助推。等到我自己创业，面试也学会了这招，会故意问一些明显超出对方认知范围的问题。而我想要得到的最佳答案就是，“我不知道”。其实英国叔当年并没把话说全，他看重的不光是我的坦诚，更是我的自信。因为只有当你足够强大时，才敢于承认自己的无知。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],汝等渣竟想害朕,面试官：请先做个自我介绍吧。求职者：巴拉巴拉一大堆。面试官：请问你会造飞机吗？（求职者内心一万匹草泥马的奔驰，但是想到知乎的网友回答，于是硬扛。）求职者：有幸参与过x次x架飞机的清洁工作，包括飞机表皮杂质分离（拖地）、人造纳米玻璃的防氧化（擦玻璃）、以及各种精密机械的安装测试（插电线版）等工作。（面试官听不懂但还是要装作听懂的样子，毕竟人不能怂，这样才能PUA求职者。）面试官：所以，你没有独立造过一架飞机了？（求职者内心再次被惊讶，飞机还能一个人造？这面试官怕不是脑子瓦特了？）求职者：造飞机是一个大工程，通常是团队项目。如果公司有需要，我也是可以承担的。此前虽然并不是独立完成造飞机，但是参与的过程中，也丰富了我的见识，理论知识得到实践的提炼，让我具备了独立造飞机的能力。当然，造飞机是大工程，如果让我独立完成的话，效率肯定比不上团队合作的。（面试官感觉这货很牛的样子，但是又怀疑对方在出牛皮，于是秀出杀手锏）面试官：好的。我这边基本了解的差不多了。你先在这等下，我去喊我们的造飞机总监过来。求职者：好的。....等待了一会，一个戴着眼镜、秃顶的男子走了进来，姑且称呼对方为造飞机总监。造飞机总监：你好，请先做下自我介绍吧。求职者：巴拉巴拉一大堆。造飞机总监：请问飞机发动机启动后发出超过正常的巨大声音，可能是哪些问题？（求职者内心复现好几个问号，？？？，这货不会来真的吧，但是求职者牢记知乎网友的建议，死不认怂）求职者：如果只是单纯的巨大声音，可以考虑xxx手段（反正瞎扯的，对错全看天意）（造飞机总监回顾了一下刚刚百度的答案，似乎和求职者的回答完全不一样，但是求职者的勇气似乎也说明了他并非完全不知，会不会是百度的答案有问题？）造飞机总监：你在上家公司造飞机的过程中遇到了哪些困难，又是如何克服的？求职者：整体的造飞机过程还是比较流畅的，但是的确也会碰到一些极端情况。比如下雨天的时候，人造纳米玻璃抗氧化就需要特别小心（雨水路滑，易摔倒。）这个时候就需要特制装备了。这个虽然是我弄出来的，但是因为跟上家公司有保密协议，所以请原谅我不能透露。造飞机总监：理解理解。我这边基本没问题了。你有什么问题要问的吗？求职者：请问贵公司的造飞机团队有多少人？造飞机总监：你来了之后就有2个人了。还有什么问题吗？没有的话我需要跟老板商量一下。今天的面试到此为止，我们会在3个工作日给你回复的。求职者：好的。（起身，离开。造飞机总监浅送后返回。）另外一个会议室，面试官，造飞机总监正在跟老板汇报。老板：这几天的面试怎么样了？有可以入选的人员没？要知道，虽然拧螺丝不怎么需要技术含量，但是如果有个会造飞机的来拧螺丝的话，那么万一造飞机的不干了，他还能顶上。面试官：今天面试的还不错，有过造飞机的团队经验。虽然没有独立完成过，但是参与过。造飞机总监：虽然有些地方不够精通，但是培养培养还是可以用的。老板：行吧，你们都这么说，就他了。求职刚坐上回家的公交，手机来电话了。HR：你好，请问是x先生吗？这里是xxx造飞机公司。你刚刚的面试通过了。你看下你什么时候方便来公司办理入职手续？求职者：一周内吧。HR：好的，x先生，稍后会发offer到你的邮箱，请注意查收。来公司后直接打我手机，到时候我带你办理入职。求职者：好的，谢谢。（几天后，求职者没找到更好的工作，于是只能来这家造飞机公司。HR带领x先生认识了该公司造飞机团队的另外一个主力：造飞机队长。双方了解后，HR离开。）造飞机队长：咱们的工作还是比较闲的。你平时给我打下手拧下螺丝就行了。求职者：好嘞，我一定好好的拧螺丝！（吓宝宝一条，差点以为真的要造飞机了。）
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],当时明月在,完全不懂，就答：这个不了解，感谢您的问题，我下来学习一下。如果懂类似的知识点，就答：这个我不了解，但是好像，有个类似的知识……面试，其实是个非常考验情商的环节，只不过很多人忽略了这个。遇到自己非常懂的问题，尽量多说一些。很多人喜欢一句话就答复完问题，这样会迫使面试官为了保证面试时间，不得不提出更多的问题，被问的多了，难免被问住了。很多年前有一次面试，面试官问我的索引原理，我拿了一张纸，从一个搜索动作开始描述，到一个线程进入以后，如何根据fst定位到一个索引文件，到为何使用，到索引生成时如何在内存中合并、到如何优化内存和CPU、到CPU缓存和内存交互……这个问题的回答占用了面试官太多时间，也足够表现我对某个知识点的深入理解，之后面试官对别的问题问的就不是那么细致了，很容易就通过了。要尽量自己把握节奏，有些面试官见你答出一个问题，会粗暴的打断你的发挥，继续问下一个问题。面对这种面试机器人，不要慌，见缝插针，一定要在自己熟悉的领域，把自己的主动权抢过来。只要你在面试过程中，。而如何可以让面试官不打断你，你就一定要把事情说的有趣，自己在家要多练。这一点不仅仅针对技术面试，一切面试都是这个道理。面试，并不是说你要答对所有问题，但是你一定要给面试官留下深刻印象。我曾经有几年时间，利用这个窍门，变成了面霸，基本上只要面了就过……不要以为技术面试拼的都是技术，每个技术人都有自己熟悉的领域，突出自己有些时候更看一点运气和情商……有些面试官不喜欢顾左右而言他的，这个就需要你把回答说的足够有趣，才能吸引面试官足够的兴趣。另外一个小窍门，就是不打无准备之仗，面试心仪的公司之前，最好去几个次一级的公司面试练手，面试，看的并不是绝对实力，技巧也起到很大作用。而技巧，可以通过多面试来锻炼，熟能生巧以后，你就是面霸。技术这玩意儿本身就是：无他，唯手熟尔，面试也可以这样来解决。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],弗兰克扬,面试的时候，聊到具体的技术或者业务问题时，遇到不懂或者完全没接触过的东西，实在太正常不过了，每个领域都是非常宽泛且琐碎的，随便挑几个你完全不可能会的问题，简直不要太容易。我觉得，如果是在聊具体的业务技术问题时，提到了某个东西，然后你不懂，或者以前接触过但不是很熟，完全可以如实告知，然后有效的面试，就会继续去聊别的问题了。为什么面试时，遇到完全不会的问题很正常呢？因为面试是单方面的问问题。我们生活中，所有单方面的问问题，只要双方知识差距不是过于悬殊，都能挑出对方压根儿就回答不上来的问题。这事儿古代文人就经常玩，有的人熟读这本书，有的人熟读那本，然后就互相考对方自己熟的那本书里的各种细枝末节，最后当然是谁都回答不上来。那很可能，公司想要招你这个人，所以安排你来聊聊，但是问你问题，给你挑错的人，并不是那么想要你。这很正常，也许这个面试官自己早就安排好了自己人也来面试，所以才要在技术面时为难你一下。但也不排除，你简历过于美化，去应聘了一个完全不可能胜任的工作，然后面试官只是例行公事一样地问了你几个行业内应该众所周知的问题，你说你不知道，不清楚，不是很了解。这时候，面试官说，你怎么连这个都不知道？你如果再去狡辩说，行业领域大了去了，遇到几个不知道的问题很正常，就只会继续给自己扣分，如果你所在的行业，圈子比较小，而面试你的这几个人又比较有影响力的话，那你就很难在这个圈子混了。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],Change,数十次面试经验：请用英语介绍下自己：用了英语介绍自己，面试没通过理由：我英语不好。说自己英语口语不好，直接拒绝用英语介绍自己，面试全部通过。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],Patrick Zhang,我来说说这个问题。有一次我参加HR举办的招聘会。HR首先会提问应聘者若干问题，并查看文凭资料。完成后就到我这里，来询问应聘者的技术知识技能。某次当一位年轻人轮到我面前时，我询问他有关供配电的基础知识，发现他回答得莫名其妙。后来我问他什么叫做基尔霍夫第一和第二定律，他脸红脖子粗地说没学过这种高科技的知识。我告诉他，这是大学一年级读电路分析中的基础内容，是每一位电气专业毕业生的必修课。最后，这家伙不得不承认，他的文凭是从地摊上买来的，本人连初中都没毕业。他以为招聘面试只是看看文凭过关即可，没想到会问得这么深。想起我自己应聘的事了。我在离开大国企之前，曾经到过一家台资企业应聘电气工程师职务，应聘时先让我们应聘人员填表，然后做几道题。题中有一道有关运算放大器的图和提问，这道题是错的，我没做，并且在答题处指出错误之所在。我想，连应聘试卷都会出错，这家公司肯定不怎样，我不能在这家公司工作。我把试卷交给工作人员，略加说明后离去。晚间这家公司的总工来电话，要求我直接入职。我告诉他我没兴趣，之后就把电话挂掉了。再之后，这家公司三番五次派人来要求我入职，都被我拒绝。事后想想，好在没去，后来入职外企多好，比这家烂企业好多了。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],石二郎,你说我不懂，面试官得出一个结论：你是个诚实的废物。你垂死挣扎说了一通牛头不对马嘴，面试官：这人喜欢狡辩不诚实。你胡说八道粘点边，面试官：虽然很蠢，似乎还可以带一下。你不试试，直接完蛋。你试一下，有可能直接完蛋，有可能有一线机会。所以我建议你试试胡说八道一下。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],HR凯蒂,首先我们要搞清楚为什么会问到不懂的东西，分情况去应对。这种挺常见的，的一种，通常放在面试快结束时问，面试官已经对你的经验和能力摸得差不多了，再来1-2个难一点的问题测你的潜力，看你的思路和求生欲。遇到这种问题不要慌，很多时候工作中没有绝对对错的答案，条条思路通罗马，谁不是一边百度一边把活干出来的。如果直接说“我没有经验，我不懂。”那会让面试官失望了，面试官会认为你是一个知难而退的人。我遇到好多个候选人，经常被最后1-2个很难的问题打击到认为自己面试不通过了，接到我的电话通知面试通过时，还挺意外的。这种情况再正常不过了，这个世界上没有100%匹配完美的候选人。面试官只是一层一层难度问下去，探一探你的经验深度，从而判断你的水平。回答思路跟第一种情况一样，不要狡辩，不懂还要装懂，会让面试官觉得你不踏实。更重要是你的潜力，经验欠缺一些但值得培养，学习能力快的情况下，公司也会录取的。有时候业务部门也没搞清楚自己想要什么经验的人，招聘简章（JD）可能是HR一字不漏复制粘贴其他公司的，写的工作方向和面试的工作方向有偏差，所需的技术也不一样。这种恐怕在IT岗位挺常见的，常听到IT朋友吐槽面试官要的技术方向和他们不一样。遇到这种情况，要意识到可能岗位与自己发展方向不符，应该反问清楚他们工作方向是什么，需要什么技术，要对齐彼此需求。我见过候选人被面试官揪着几个看起来很完美的数据一直质疑一直追问，对方在努力去狡辩，把问题解释得似乎合理，下一个问题又暴露出逻辑矛盾，不能自圆其说。面试官也不是那么好忽悠的。这种情况会出现在看起来很年轻，提问比你更紧张的面试官身上。我第一次做面试官就是这样了（尴尬脸），对岗位不是很懂，也没把握好HR该问什么问题，想到什么问什么，问一些我自己也没有答案的问题。我和候选人，一个尬问，一个尬聊。后来我成为那个坐在新手面试官隔壁的面试教练，看着新手面试官也犯着同样的问题，会突然问了一个很傻的问题，候选人懵逼并强行回答，我负责缓和一下尴尬气氛。遇到这种情况，更不用担心了，畅所欲言就好了，你讲得越多，面试官也许觉得你很厉害（因为他也不懂）。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],安晓辉,从售后技术支持转行做软件开发时，只学了 7 天 C 语言，熟悉了语法，就开始投递简历，参加面试。那时什么都不懂，经常被问住。面试官问，“野指针与有什么区别？如何避免？”我连“野指针”、“悬空指针”的名字都没听过，只好抱歉地说，“不知道。我下来学一下。”面试官问，“不使用递归如何实现？”见鬼，我都没听说过归并排序，只好抱歉地说，“还没学到。我下来学一下。”面试官，“怎么在AVL树中实现删除？”啊，我不知道AVL树，只好抱歉地说，“不知道。我下来学一下。”我有将近两个月的时间，每天都被问到不懂的东西，每天我都要红着脸低着头很惭愧地说“不知道”，我都能感觉到面试官的摇头和语气变化。嗯，真的是挺难堪的。好在我做了一件事：（当时住处没有装宽带网络）这件事情的效果，在两个月后显现出来——常见的C语言笔试题和面试题，我都能回答出来了，技术面试的一面基本都能通过。但接着在二面，就又遇到了非常尴尬的事情。二面的时候，面试官经常会问，“做过xxx相关的项目吗？”我从零开始学的编程，一点项目经验都没有，只好说，“没有。我没做过软件项目。”这么一说，多数面试官就礼貌地问一会儿，就让我回去等消息了。但我不能说我做过，因为当时我是真的没有做过软件项目，没有任何经验。印象最深的一次，是面试一家做户外电子屏的公司，笔试、一面都过了，二面是跑到公司的工厂，跟一位负责人聊。对方只问了我不到五分钟，就因为我没有项目经验，让我离开了。还说不耽误彼此时间。唉，我为了那个面试，公交车都坐了一个多小时，找地方也花了半个小时，结果就不到五分钟完事，还被当面讥讽。我离开那个地方的时候，觉得自己真难。就算如此，在后续的求职过程中，我被问到不懂的东西，也还是直接说不懂，不胡乱说，不转移话题。到第四个月的时候，遇到一位肯通过我过去的技术支持工作评估我个人潜力的面试官，问了我许多程控交换机和电话故障的问题，我都能很好的应对，他觉得我是可以培养的，给了我机会，我顺利得到了第一份软件开发工作。在四个月的艰难求职中，这样随着求职过程的推进，我也在快速成长，也越来越能应对各种面试问题，获得进一步的机会。因此，这些回答你可能感兴趣：较远时期的精华，也推荐下：如果你有Offer选择、转行、副业等相关问题需要深度咨询，可以戳下面卡片找我咨询。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],太极澜,我记得很多年前，有一次公司要招一个PLC工程师。当时面试官是HR和用人部门经理。经理技术出身，做事情特别认真，是公司的金牌技术培训老师。来了个候选人，学校不错，专业也对口。相关经验三年。人选挺沉稳，也很有礼貌。点头致意后HR开始提问，先自我介绍。一切进展顺利， HR偷偷看了一眼经理，经理低着头看人选简历，看不出是否满意。HR继续问了人选上一份三年的相关工作。人选有条有理，不慌不忙地回复着。HR又偷偷看了一眼经理，经理招起头，饶有兴致听着。HR心里高兴。这个职位招很长时间了，经理就是不满意。今天这个，应该可以完成招聘任务了。这时，经理开了口。“你能不能告诉我西门子PLC和的区别在哪里？”人选愣了一下。本来放在桌上的双手拧到了一起。HR心里一惊，充满鼓励看向人选，恨不得她脸上就写了答案。很快，人选恢复了正常，平静看向经理，说“我工作三年，只接触过西门子的PLC，施耐德的我没有用过。 ”“不知您能否给我一些提示，我试着答一下。”经理兴奋了起来，培训师角色上线了。他把刚才在看的人选的简历翻了个面，在背面画了个图，并给出了一些提示。人选很认真在听，为了把图看得更清楚，甚至站了起来，弯腰看向经理手里的自己简历的背面。“。。。。。。”人选边思索边回答。（技术内容早忘了）经理露着既有鼓励，也有期待的眼神，认真听着。人选答完了，说”我也不知道自己回答得对不对，还请您教教我。“经理的培训师热情被彻底点燃了。往人选方向倾着身体，边指着图边给人选回答着。十分钟，讲完了。人选充满崇拜说”原来是这样的，您真厉害。感谢您。我今天太有收获了。“HR的心里五味杂陈。又望向经理。经理一副心满意足的样子。后来，这个人选被录取了。经理手把手亲自带。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],无良HR,首先你直接回答不懂，是无法通过面试的。企业招聘的本质就是采购知识、技能和经验，如果你不具备这些东西，企业就没有必要去招聘你。面试官在面试的时候，最怕遇到两种人：第一种人，是一点不懂，一点儿都不懂。第二种人，是两点不懂，这也不懂，那也不懂。其次也不要不懂装懂，因为面试官就会继续深入追问。然后你支支吾吾，答不出来，也会被淘汰掉。而且这种情况比第一种更糟糕，因为从面试官的视角来看，第一种人起码还真诚一点。也有人说，就回答不知道，然后面试结束后回家学。不会的次数多了，学会的东西也就多了，然后再面试，就无往不利。这种操作好不好，当然好，从长期看有很强的执行性。但是，我不得不说，只适合大城市，因为大城市的面试机会比较多，可以不断在面试中试错，。然而，在很多三四线城市求职，一个月就那个位数的几次面试机会。这时候，再回答我不知道，我回去学，那么，等到学会，黄花菜都凉了。所以，面试时一套行之有效的救场措施，还是有必要的。声明：下面的方法仅针对你对某个知识点有印象，不太懂的情况，不适合你第一次听到这个概念的情况。具体怎么做呢：不要小看重复的力量，很多营销人员都喜欢复述客户的话，这样可以拉近双方的距离，增加好感，然后面试官就会偏袒你。不要以为我骗你，一试便知。讲关联其实是告诉面试官你获取知识的渠道，给面试官一个你可以轻松获取这些知识的心理暗示。这是告诉面试官你并不是一无所知，只是不精通罢了。这样可以让面试官知道你的下限没有他想象的那么低。如果面试官没有打断你，你基本上就稳了。面对段位比你高的人，你唯一能做的就是真诚，但真诚不等于实诚，更不等于自我贬低，真诚是把你100%的水平拿出来，去证明你能胜任这个职位。最后，这是我近期的几个相关回答，有兴趣可以看一下：
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],Ryan,真诚一点吧，打不开就说打不开
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],程墨Morgan,你都用上『狡辩』了，应该知道『狡辩』是一个贬义词吧，当然，互联网时代，很多以前的贬义词现在也当褒义词使，我们姑且捏着鼻子把『狡辩』理解成『硬撑』吧。那么，别硬撑，也别直接说自己不懂，走中间路线。还是拿故事说话吧——面试官：你能不能和我解释一下什么叫做XXXX模型？你：哦，XXXX模型啊，我听说过（也就是不了解），就是一种模型（废话），这种模型的方法其实还很复杂（没有简单的东西），我们一般用的很少（就是说我不了解），但是，就和我之前说的那个什么一样，我觉得还是很有价值的......面试官：你之前真的接触过XXXX模型吗？你：听说过，只是实际工作中没用过。面试官：好吧，你可以直接说。(以上表现0分，拖延时间的战术在面试中绝对是0分）面试官：你能不能和我解释一下什么叫做XXXX模型？你：抱歉，我对XXXX模型不了解。面试官：好吧，我们来说别的。(以上表现60分，坦诚，抓紧时间让面试官问其他问题，问其他你懂的问题）面试官：你能不能和我解释一下什么叫做XXXX模型？你：这个XXXX模型是关于趋势预测的吗？面试官：不是，是关于分类的。你：抱歉，我对XXXX模型不是很了解，哈，我也不敢乱说，对了，我将来的工作会和分类相关吗？我对一趋势预测了解多一些，我们可以探讨一下这方面的问题。面试官：好啊，那我们来看下一题。(以上表现80分，坦诚，在承认自己不懂的同时，也讲清楚自己的特长是什么，引导面试的方向）顺便说以下，知乎上到处都是『是XXXX还是XXXX』问题，别以为答案真的只能是二选一，做一个不被二极管思维套路的知乎er，是一个知乎er的基本素养。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],周行长,我是一个面试过不下200号人的面试官，特别想告诉大家一个真相：明知你不懂，那为啥他还要问呢 ？这就是某种程度的压力测试，想看看你被“知识型”刁难时会有什么反应，会不会烦躁紧张甚至生气。对于被问及职位无关或者职位超纲的问题，你是否感到被冒犯，从而出言不逊。毕竟工作中常常面对不懂的东西：客户提问题，上级提问题，同事提问题，都有可能进入你的知识空白区。你能否心平气和地回应，很重要。我见过很多放不下面子的职场人，会为这点小事迁怒对方，把小事化大，实在不值当。在著名战略咨询公司麦肯锡，面试官会问这样的问题：“美国总共有多少个加油站？”这个问题不是想了解面试者对数据记得多么清楚，或者答案猜得多么接近。更重要的是要了解面试者，在推理过程是否有自己的思考和方法论。比如说，美国的总人口是多少，人均拥有汽车多少辆，每辆汽车平均多长时间加油等等，然后大致推断出，美国大概有多少个加油站。你当然可以有不懂的东西，但这并不妨碍你对这个东西有自己的思考。为人处世，不是非黑即白的。“ 直接说不懂 ”暴露了你放弃与时俱进，终身学习的心态，“ 坚持狡辩 ”则体现了你不愿正视弱点并做出修正的心态。在职场，这两者都不可取。其实只要你换一个话术，换一种态度，面试官印象会完全不一样。这样，一个正视自己不足，愿意接纳新事物的职场人形象就立起来了。至于坚持狡辩，你可以继续假装努力，但面试官不会陪你演戏 —— 也许他一眼就能看出你在狡辩，只是出于礼貌不拆穿而已。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],童先生,之前到一家做财经类目的公司，面试运营岗位。去之前我就知道，自己这次面试大概率是无疾而终，因为我完全没有财经领域的工作经验，这点在简历的工作经验上也可以看到。当然，我本来就是对这一块感兴趣，即便知道不匹配，也投了。后来收到对方邀约面试的通知我也很诧异，不过想着对方毕竟也是家几百人的公司，既然肯给我个面试的机会，那肯定得去试试看。面试的过程其实非常顺利，涉及到一些运营相关的专业知识也都对答如流。其中对方也有问：“我看到你的简历上没有财经相关经验，方便问一下为什么你会选择投简历到我们这吗？”我的回答是：“一直以来都对这块感兴趣，平时偶尔也会看些机构的分析和推文，如果有机会，想要踏入这个领域”在我看来，，。当然，最终这场面试还是以失败告终。至于原因，其实也和我一开始想的大差不差，对方想招的是一个快速上手的，但我在这块仅停留在兴趣层面，花费时间重新培养不划算。不过我也没觉得有什么好遗憾的，毕竟来这家面试的目的本身就是抱着尝试。回过头来看一下“面试被提问，要说不懂，还是坚持狡辩”这问题，我觉得其实有什么说什么行了，态度决定一切。不过这里也要给就求职者提个醒。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],十七啊十七,我经常面试程序员，喜欢顺着简历上的项目经历往下挖。你简历上有项目经历显示用到过，我就会问你怎么保障数据同步。你回答了用了某个锁，我就问这个锁具体怎么用的。你回答了怎么用，我就问使用这个锁之后，对性能有哪些影响。你回答了性能方面的影响，我就接着问，当时为什么选择了这种同步机制而没有选择那种同步机制。你回答了为什么选择这种同步机制，我就问这种机制的原理。你回答了原理，我就问如果让你自己实现一种同步机制，你会怎么做。……这一路问下来，好多程序员就会卡住，然后不同的表现就来了。有的人开始胡编乱造，没做过说做过，没有性能数据硬说一些明显离谱的数据。有的人会顾左右而言他，说其实这种机制怎么怎么……但明显说不上来原理是什么。有的人会挑衅地反问，“你说这里面是什么原理？”有的人就比较诚实，到哪里不会，就说不会，后面会学习一下，工作用到了会深入了解。相对而言，我原来去面试的时候，也是这种态度，不懂就是不懂，就直接说不知道，不瞎说。我觉得这算是我的底线吧。前两年我面试过许多IT培训班出来的孩子，写的项目经历都一样一样的，一问到细节，就蒙圈了，就开始东拉西扯。这种情况，面试结束我就直接打X，给人事说不行。最后，我还是想说：
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],Cat Chen,通常越是懂得多的人越容易接受有些事情他们不懂，越能坦诚地告诉别人他们具体什么懂什么不懂。反之亦然，越是懂得少的人越想要表现出自己懂得多。这时候你需要猜，到底面试官是根据你回答的内容进行判断，还是根据你回答时呈现出来的心理状态进行判断。这事情没有标准答案。有时候你模仿一下大佬说话的神态，语速放慢一点，尽量少说话但每一句话都抓住重点，效果可能比你不着边际地想到什么说什么要好很多。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],西南灵芝,面试时，遇到了一个难题。面试官问她：你知道cosjfoservbih这个人吗？美玲甚至没听清楚这个人的名字。面试官看她没反应，接着说：这是一个很出名的设计师，你能讲讲他XX产品的创意点吗？美玲又问了一遍这个设计师的名字，她确认自己不知道。美玲的心里在打鼓：这个问题是不是很重要？如果回答不上是不是会给面试官留下不好的印象？如果别人回答上了自己没有，肯定就不会留下我了吧？面试结束了，美玲还对这个问题耿耿于怀。她搜索资料后发现，她在面试里面的回答，离正确答案差了十万八千里。美玲一通乱讲，还是成功拿到了offer。后来，和当初的面试官、现在的部门主管混熟了之后，美玲问出了深埋心中的疑问：当时，还是小李，他刚刚从传媒学校毕业，想要谋一份设计师的工作，但是他只会用一种主流软件。面试官问他：你会用XX软件吗？自己说过的话，跪着也要把它实现，当天晚上小李就买了书，看了一个通宵，第二天就可以做一些基本的操作了。也是运气好，面试官既没有当场让他操作软件，开始工作的第一个月也没有重要任务，小李跟着师傅学习，慢慢也就学会了。你知道XX吧？业内有名的设计师，当时他是在我们公司实习的。面试的时候，我问他，你知道吗？现在我给你一个情景和问题，你用这个理论简单说明一下应该怎么解决。我当然很乐意见到这种积极、乐于思考的面试者，给他解释之后，他也提出了很好的解决方案。我当时想，这种诚恳、虚心、学习能力强的面试者，一定要向老板强烈推荐。 面试的时候，面试官难免会问到你不熟悉的东西，可能是一个案例，可能是一个技能，可能是一个概念，甚至是一个行业大佬的名字。 其实，当面试官问到你不熟悉的东西，回答会与不会，都不会太影响最终的结果。毕竟，经过对简历的层层筛选，能进入面试就说明，工作需要的知识技能你基本都能符合要求。为什么还要问这个多此一举的问题呢？ 你是一张白纸？甚至不知道怎么应对面试官的问题？  没问题，把你真诚的态度，展现给面试官看吧，公司需要的就是你！ 
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],落雨,不会就说不会，而且越真诚越好。我刚开始面试的时候，背了很多标准回答，每次说得一番天花乱坠，技术面都会打断我的自我介绍优点等，然后问一些我根本没想过的问题，让面试回归“真实”。有一次因为自我介绍太过标准，还被说不要背稿，直接大大方方说自己做过什么即可，言辞不要这么刻板。自从那过后，我面试都是摆烂的，自我介绍用白话说，优点缺点随便说，问实习就说自己做什么，不知道就说不知道。结果得到的offer反而比之前的多了。所以我觉得更重要的是，你要自信。面试不要紧张，当作聊天即可。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],我的脑子不见了,面试者是资深中医我有中医基础。面试者是普通hr我就是资深中医。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],职业打工人,第一，一个很残酷的现实是，80-90%的面试都是毫无意义的，浪费时间的。第二，面试官最多1-3分钟就知道你适不适合公司，但请注意，仅仅只是适不适合，真正决定你入职的并不是面试官。当然，他们也可以决定不录用你，直接在第一关干掉你。第三，面试官问你不懂的东西，有2种可能，一是为难你，然后说不好意思，让你回去；二是真的想要知道你会不会，然后决定是否进行第二轮面试。第四，你开心就狡辩一下，不开心就直接说不会，然后离开就好。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],体制老司机,如果是理工科类的技术性问题，不懂最好就说不懂，因为不懂装懂的话，别人只要追问几句，你就完全露馅了，给人的感觉就是，你这个人不懂装懂，还谎话连篇。但如果是人文社科类的问题，其实不存在不懂的问题。举个例子。前两天在知乎上遇到一个比较经典的面试题，这类面试题不管是公务员、事业单位，还是企业，甚至是平时和老板聊天，都会考到。面试真题：你去企业面试，HR可能会问你“你最尊敬的知名企业家是谁”；你和老板和领导聊天，领导可能问你“你最推崇的明君是谁”；你去参加公务员面试，考官可能问你“你最喜欢的知名城市是哪一个”。遇到这个问题，很多人第一反应就是在脑子里搜索知名的教育家，就可能想不出来，脑子卡壳半天说不出话；或者突然间想到的人，不熟悉不了解，无话可说，比如说陶行知是知名的教育家，但大多数人对他的理念和生平一无所知。于是就停住了。解决这种问题，有一种思维方法叫“自我定义”。这道面试题的难点在于“中国教育家”这个概念，很多人默认这些教育家必须是非常有名的，是公认的教育家。思维一下子就被这个题目给出的概念定义卡住了。实际上，对于面试题中遇到的很多问题中的概念，我们要善于绕开固有的、正常的定义，可以自己定义。比如说，“教育家”这个概念，我可以定义为长期从事教育工作，有一定的成绩成果，有独特的教育方法的人就行了。比如说你高中一个非常好的老师，校长。你在面试的时候，可以先把这个老师的事迹说一下，然后对其进行定义：未必一定是全国知名的。又比如说，你去企业面试的时候，你的简历里有一点，面试官自然就会将这段gap期视为你没有延续工作经历、提升技能，天天出去玩，很多资源也断了。这也是大多数人对gap期这个概念的正常定义，或者说第一印象。那么，我们就要会重新自定义。比如说，你可以将你自己的gap期视为一个涅槃重生、个人的认知和思维能力、工作能力都得到本质性提升的阶段。你可以用你这段时间学到了什么东西，对工作上有什么思考，性格和习惯发生了什么好的变化等等，甚至你还可以说，王阳明，也算是职业的gap期，但正是这个gap期，让他的人生发生了本质性的改变。又比如说，公务员面试的时候，经常会遇到一些概念性的题，比如说什么依法治国、改革、等等。这些概念都是高度凝练的，有的也有书本上的标准表述，但显然没有几个人能把这个标准表述讲出来，大多数人甚至是第一次听说见过这个概念。这个时候，就要善于用自己的所见所闻，以及自己的逻辑，对这个概念进行重新定义，只要言之成理，符合这个概念的大致方向就行了。比如说依法治国，这个概念很大，但你最近看到一个“国内女子在新加坡辱骂护士被判刑被罚款”和国内的一些人在公共场合违反秩序而没有受到任何处罚的新闻为基础，对“依法治国”这个概念重新定义：对各种违法行为，尤其是违反公共利益和秩序的行为，不管大小，都有相应的法律规定，并严格执行。这不是官方的定义，而是你自己的定义，或者说你自己的理解和认识。而考察你对一个概念和现象的理解和认识，才是面试的根本目的。如果说让你背书，那直接买台电脑插上网线就行了，什么都能查到，还要人来做什么？用自己的所见所闻和思考，对一些概念重新定义，也就是谈自己的理解和认识，有一个根本性的好处：你能真正理解这个概念是什么意思，知道它从何而来，如何论证，也就能用自己的话，自己看到听到的东西把这个概念讲清楚。很多人在面试的时候，面对自己不了解不熟悉的概念，大多数时候都是胡说八道，离题万里，压根不知道题目里的那个概念是什么意思。比如说，人类命运共同体这个概念，有几个人能把书上的标准说法讲出来？又有几个人能从根本的理论角度去把它说清楚？但是，如果把人类命运共同体这个概念，依据自己平时的所见所闻，进行重新定义，就能说得清楚讲得明白。比如说，我小时候在农村长大，农村家家户户，就构成一个命运共同体。春耕和农忙时节，因为没有机械，要赶农时，就得互帮互助才能搞定。家里有结婚生子老人去世等等大事，没有其他邻里乡亲的帮忙，一家人也搞不定。那么，我就可以定义“人类命运共同体”为：全球各族人民大家互相帮助，资源互补，地位平等，你好我好大家好。再对照农村里的那些事情，联系现在的一些国际形势，就能从某一两个角度，把“人类命运共同体”讲清楚，讲明白了。人人都是从考试走过来的，都有学生的考试思维，认为每一个题目，都有一个标准答案，只要无限靠近这个标准答案，就能拿到高分。这种幼稚的学生思维，在面试，在工作和生活中都是非常有害的，因为越靠近标准答案的东西，往往就是越机械，越没有思考的东西。而面试考察的，不是人的背书能力，而是人的思考能力。这种能力也是人比电脑，比AI更厉害的根本能力。当然，也是一个人在工作中能否成功，生活中能否幸福的关键。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],匿名用户,我研究生复试面试的时候，人文学科。一个老教授的不断进攻和诘问，我招架不住，低下头就直接说“我不会…”。这时候反而其他老师在引导我，帮助我，鼓励我。但是那个知识点是我的死穴，我想了半天，小声的说“我只知道xx，其他我就不知道了”，老师们也很无奈…但是后面面试成绩蛮高的…二十人组，面试第二名。尽量回答吧…实在不行，也别不懂装懂…（猫猫：瞧瞧我这智慧的眼神）
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],大尾巴陈圆圆,作为面试方吃瓜参加过几场面试，对于应聘者的观感客观描述一下。对于比较专业的问题，几种应聘者的反应如下：说的牛头不对马嘴，而且毫无逻辑性，面试官面面相觑“这家伙在说啥？”这种基本还是可以的，简单扯一两句委婉表示我不会，但我愿意学，表下态度。其实这种算得分零，没毛病，如果该小众知识和岗位关系不大或者学一学就会的、基础岗位、低薪岗位，基本不影响印象分。建议大家可以适当发挥一下，其实面试除了指向性非常明确的技术岗，大多数情况下你知道或者不知道一个小众的知识，关系并不特别大，不知道学一学呗，但是假如你能大概知道是个什么领域的东西，提出自己做过类似的什么项目，有什么经验和体会，让人觉得你是个有独立思考能力的人，会更好。然后，说真的东西，你展开来说的内容必须是你熟悉的，做过的，能坐到面试官位置的都是人精，真会和敷衍还是能看出来的。在回答问题时带上自己有趣的经历、有投入精力资源的个人爱好、认真研究过的一些细节点、经历过的失败尝试或者成功尝试，讲得更有故事性。要知道，面试一堆人是一件非常枯燥的事，其中有个有趣的人很容易拉好感度。那种过分紧张，答题大脑当机的，尴尬冷场的非常影响印象分。有个亲测有效的办法可以解决这种毛病，而且一点不难，那就是把面试官想象成没穿衣服的样子，他们人模狗样地坐在对面，表情严肃专业，但是赤身裸体，顿时一点都不紧张了。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],也说,。这样减少了入职后培训期，而且工作中有些延展的需求，员工自己也能凑活做了。比如写文案的，最好会排版配图；做行政的最好懂点工商法律；干销售的会PPT直接能出策划，员工懂得越多，岗位上考虑越全面，出的东西综合质量越高。，综合技能方面的某个短板，会在未来限制职业发展的上限，所以企业经常“过配”招人。比如一个简单的运营，企业希望对方懂行业、又懂客户，能写内容、又能做视频，能做活动，又能跟进转化，这就要求员工会得越多越好。因为你如果不会设计，遇到图形的企业就要给你配个设计，不会文案，就要配个文案，基层员工负责的项目，大多需要的是“有无”的问题，而不是要达到多么高度。综合能力显得更重要。所以哪怕被问到不太懂得东西，尽可能谈几句你的理解。这个时候对方问你不懂的，更多可能是一些横向岗位延申。比如你面试销售经理，对方问你懂短视频么？你说懂，可能让你带短视频销售团队。你说不懂，更了解传统渠道，那么就去带门店团队。再比如你去面试市场经理，对方我呢你懂数字营销么？你说懂，那么就去负责网络获客；你说更了解媒体传播，就是媒体经理；你说其实自己更擅长门店的营销，那么就是线下推广，这些决定了未来你的定位和团队特长。就是你在某个细分领域越出色，那么专门做这项工作，给企业带来的回报更大。下面会给你配个基本团队，专业的设计、文案会有下属分工完成。你只需要有考核的能力就行。比如，你说不擅长互联网营销， 擅长线下销售。但人家企业就是只有线上销售渠道怎么办？那么就更不能去了。基层的岗位是刚入职场的员工，重要的是多学习，积累工作经验。到了中高级岗位，则非常爱惜自己的履历，因为擅长的行业和领域已经定型，尽可能去适合自己发展的企业。企业招聘也是看你的成功案例，行业内知名度，入职后带来的实际效果。如果你专门做线下销售的，除非是准备转型，否则没必要从开始就进入一个和你能力、经验不匹配的岗位，把自己履历弄得没有特长，得到的评价也不高，在职期间做的很累也不擅长。所以，如实相告最高，企业问你了解某个行业或技术么？你可以客观的说不了解，你擅长的是其他方面，在哪个领域更有经验和专业性，有过什么成绩，希望主要负责这方面的工作。企业如果能安排且有需求，那么最好。你入职做的是擅长和喜欢的工作，也会自信且越做越轻松。如果企业招聘需要的那个方向和你原来熟悉的领域定位全不同，那么是前期互相了解就有问题。你的简历可能要重新写一下，强调自己的方向和能力。到了这个位置，其实更多需要的是沟通、管理、组织能力，对具体的专项技术要求没那么高了，企业反而很少问类似这样的问题。面试前也会看对方领导采访和企业新闻，了解他们业务方向。很少有那种完全答不上没听过的情况。
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],高龄程序员,我的建议是直接说不懂，但是暗自记录下来这个知识点，回来后自己把相关的东西学习一遍，这样不懂的东西就变成懂了，懂的多了面试就容易过了。反正我当面试官的时候不懂装懂的或者一直东扯西拉的候选人再怎么说我都不会认为对方懂
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,[],拜月神使曌鹓鶵,
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",陈越姥姥,1. 去中国大学MOOC把老师的C语言课快速看完。2. 继续在中国大学MOOC看浙大的。注意看视频的同时必须把编程题全做完。如果想玩竞赛，推荐北大的系列课程，还是在中国大学MOOC上。----------时光分割线-----------------------在评论里看到了奇怪的回复……
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",鸿运高考志愿,推荐一个超级好玩的刷题网站：推荐一个超级好玩的刷题网站：可以使用任何编程语言，学习编程技巧和常用算法。题的难度分级。下面就是练习题目录的Easy难度和Medium难度的部分习题，是不是看封面就非常像玩（刷）一下呢？各个题目还用tag的形式标出了用到的知识点，像是循环、列表、图论等。提供个人等级和排名提升系统吼，反正我已经完全停不下来了哈哈哈。----------------------（12.19）我火了哈哈，点赞破百了，加个视频吧---------------------一个演示进入一个题之后的大致使用过程的视频（这个题本质是将二分查找扩展到二维问题，也就是在横向和纵向同时进行，属于稍简单的题型）：可以看到，界面的右下角是测试用例，左上角是可视化的测试过程，而左下是测试时候的控制台信息。测试是可以暂停，调速，和单步执行的，功能非常强大。那如果遇到无从下手的题要怎么办呢？没关系，还可以看看别人的讨论和解法：而这个网站除了刷题功能之外，还会有像是leetcode一样的周赛机制，而且还创新性地加入了15分钟“在线匹配赛”机制，真的是紧张又刺激（匹配赛的难度随着你的等级而增加，刚开始非常简单，所以不用怕的~）。最后感恩各位亲点赞，有兴趣可以再关注一下本人的专栏吼，祝大家刷题愉快，武运昌隆~------------------------2020.3.16爆裂热乎大更新-------------------------------------------更新了一个该网站上有趣的控制类题目的原创解析（内含实战视频）：当然控制类题目是网站题库中的少数，题库更多的还是传统的算法题，另外还有一些优化类题目。所以如果你想参加或者建模比赛的话，说不定更能在这个网站提升自己？------2020.9.27补充（点赞近万了，希望大家能发现我其实是个视觉编程艺术创作者+硬核科普作者，嘻嘻）-----------------------------2020.1.6以及2020.2.2更新-----------------------------------------我自己真正入门Python编程其实是从去年夏天学习《Python基础教程（Apress出版社）》开始的。我读书的方法是在电子版的正文中直接进行“高亮标记”，如果感觉一个知识点重要，而且预料到自己以后还会对这个问题产生疑问的话，就在目录的标签上做一下标记。现在这本书已经是我的枕边书了，遇到Python语法方面的疑问，我采取的第一个步骤往往是打开这本书然后“Ctrl+F”，然后就能找个舒适的位置和“故友”交谈一番了~当然。你往往还需要进一步学习算法方面的相关知识，这里我就不做不过展开了。但是，其实高校学生中其实还是很多是不以刷题，或者成为程序员为自己的目标的。这些同学的就是简简单单地，做做学科相关的实验，或者。对于这些同学来说，可能。最后放些自己精读过的编程书，这些书都是超级符合人的认知规律的，前两本我都看了好几遍了，真是越看越好看，妙哉妙哉。（Python算法教程翻译得挺差，但书内容绝对无敌。有条件建议找个英文版对照阅读，或者等哪天我牛B了给你们重新翻译一版哈哈哈）：C语言入门： 
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",啊窝额,漫无目的是真的难受了。我的建议很简单。选择C ++或Java。然后学习JavaScript。越来越多的基于Web的应用程序需要牛逼的JavaScript技能。然后根据要执行的工作类型选择PHP，Swift或Python。一旦您很好地了解了这三个集合中的每一个，就可以相对轻松地选择所需的任何其他语言或框架。大一打基础吧。不废话，直接贴出每种语言的顺序，也贴出一些资源。大学四年能学这么多就已经很牛逼了。c和java后面贴出更详细的版本，毕竟这两个是最重要的。1、2、java3、python4、前端5、C/C++详细图解资源  对应1、2、3、4知识点。  对应1、2、3、7知识点  对应4、5、6知识点   对应1-9知识点 对应1、2知识点 对应3知识点  对应上面所有。 对应所有。最后的实战项目网上一搜一大把下面开始解析java以前写过，直接贴链接了。python也是连接，反正关注收藏这一个视频就行了。码字不易，求好心三连啊。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",AcWing,理论学习篇：刷完北大计算机系第一课计算概论A ：计算概论与程序设计基础 刷完北大NOI金牌小哥哥的算法基础&提高课看完《算法竞赛进阶指南》：该书包括国内大公司笔试以及noip、acm、蓝桥杯等比赛涉及的绝大部分知识点，较难。实战篇：通关acwing-Saber的全部题目：在排行榜留下你的名字！AC Saber近期改版啦，双人pk模式已上线，大家快来挑战鸭！刷北大的oj，虽然题目有点老，胜在算法题目经典，刷的人也多，比较适合大一同学。刷完这些，指针都是小问题啦~~
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",贺定圆,我以前也有过类似经历，第一学期C语言耽误了好几节课，再上课就发现完全听不懂了，也就那一天那一节C语言课的那一刻恍然发现，上课成了看天书，同时心里莫名的慌，但又无济于事。此时，如果没有前辈或过来人及时指点，大多数人、大概率都会就此迷失方向，甚至自暴自弃。其实，类似的经历，包括玩游戏耽误课程，然后自弃、逐渐不及格、连续不及格，最后导致被退学的例子，这些年在大学里都不缺。以下，我作为“侥幸”走出来的“过来人”，给3点个人建议。1、大一迷失的原因，我相信很多人和我一样，全国的老师在高二高三时，几乎都会灌输这样一个理念：“现在是关键时刻，千万千万要忍住别贪玩，努力拼这一次，等高考完了上了大学，就没人管你了，想怎么玩就这么玩，你就真正自由了”。实际情况是，假如大学真的自我放纵，自由自在的话，那么之前多少年的努力都可能会化为乌有。大学恰恰相反，更不能让自己贪图享受，要主动规划、把控自己的在校时间和计划，逐步学会自控，并自我提升，像一块真正的海绵一样，疯狂汲取更多的知识，为进入社会大职场做最后的准备。这些准备包括，掌握适合自己的分析问题、解决问题、总结问题和经验的体系化能力，养成一种在困难面前的天然自信，这样才可能解决后面的挑战。在大学时的老师、班主任，真实情况是，只是你学习路上的“辅导员”，他们精力有限，只会对有潜质、表现聪慧、有进取心的同学投入真正的精力，如果你真的表现出不上进、贪图享受，即便有的老师愿意和你打成一片，做成朋友，你也不应该需要这样的人脉和生活。如果你没有表现出自己是一块可雕琢的好玉，那他们也不会刻意去引导你、提升你，甚至可能对你不闻不问。以上，才是大学的真实情况。所以，果真，我到了大学，确实没人管教，可以随心所欲把控自己的时间，宿友们、同学们也有着各种各样的“课后活动”，其中可能就包括网络游戏。我就被拉着一起玩，周末为了在游戏里等级排第一，趁他们睡觉时玩通宵，结果确实游戏等级上去了，但体力和精力却透支了，上课时注意力难以集中，学业自然下来了。上课听不懂，这样的状态持续到第一学期的寒假，对我来说，这可能是在掉队后，唯一能够弥补自己的机会了，同时我也明白，一旦在一个学期掉队，且没有补上来，第二个学期将加速掉队，后续想补回来，得付出超额的精力投入。那一年大一上学期结束后，寒假期间因为当时爸爸在外地，没回老家，所以我们一家人也去了外地过年，现在想想庆幸这样一个机会，不然如果是回到老家过年，整个寒假很可能都在和同学、朋友聚餐、娱乐，可能就很难挤出一段时间静心去恶补了。那时，身在外地，除了家人就没有了其他认识的朋友了，所以一开始时，可以说整个白天都是非常无聊的，当时无意间看见某子院校的官网底部写着“技术支持：某某某”，这个人就是学长，我觉得名字在这个位置显示出来，很牛逼的样子，内心也很羡慕，然后辗转找到了他的联系方式，短信问他，我能不能加入你一起？我应该学什么？学长回复说，让我先学Jsp，我就去附件书店买了本JSP的入门书。一开始，发现很难学进去，毕竟没有任何基础，就忽然想着，要不先把上学期的C语言课程补回来吧，因为自己有笔记本电脑，就按照课本上（c语言程序设计，版本）的代码例子，从第一节一点一点重新理解，最重要是每一段代码我都上机敲一遍（有自己的笔记本电脑）。我会先尝试看懂，然后关上书看看能不能想起来，然后上机写出来，一时卡壳了也没关系，就再看书，重复直到代码的完整逻辑全吸收在脑子里，能够在脑子里默写出来，然后再上机重写一遍，其中也会改变代码结构和方法，并主动尝试改造部分代码逻辑，换成其他的逻辑，看看运行效果。十多天时间，每天从早到晚上十点十一点，除了吃饭基本都在房间里就着笔记本电脑学习，终于学完了《》，看起来时间是很短，实际每天都是煎熬，没有人不想春节期间好好放松放松。这要感谢父母，在这期间很默契，没打扰我学习，也很少叫我外出逛街、散步，相当于有了默认的鼓励，也不希望打破父母对我的这种学习状态的认可状态，所以更容易进入状态。但那期间确实很辛苦，从早到晚完全是自发学习、自发理解，感觉比高考的自觉性和渴望度高多了，因为这时是为自己的爱好学习。学会了C语言，我又继续买了本JAVA的书，Java只是学完了SDK的基础入门，包括文件流操作，基本的多线程，所有例子全部敲一遍，再默写出来，但也花了十来天，毕竟体系确实庞大，只不过由于基本具备了C的基础所以Java理解很快。后面又网上下载了本JavaScript的入门电子宝典，有了C语言和Java的基础，JavaScript就更快了，只花了大概3-4天就把入门的电子宝典和基础的代码例子都敲了个遍，也算是搞定了。所以，那个寒假就把这三门语言的“入门知识”全吃了，尤其是C语言，基本功基本吃透了，后来回到学校，状态就焕然一新了，可谓受益匪浅。首先回到学校，就碰巧开始上新的Java课，因为有了寒假的基础，记忆也都还在，上课时老师布置的问题在我看来就成了入门级简单题，很多同学都学的吃力，也有同学因为大一落下课程，几乎看不懂。这样的话，我在课堂上的优势就出来了，经常主动回答问题，相对轻松的解题，也经常被老师点名去回答别人回答不了的问题，或者在黑板上写下代码答案。这个现象，也逐步扩散到了后来的“”、“计算机系统”等课程。老师开始更多的关注到你，也乐意给予鼓励和技术细节的引导，很多时候往往是别人不会答的编程问题时，最后让你去兜个底，你也会偷偷和“个别优秀学生”较劲。所以，这样一段时间下来，学习上就越来越顺了，加上老师和班主任鼓励，同学认可，爱玩的同学也越来越少叫你一起“打发时间”了，加上自己也有欲望和动力想学更多，经常会进入疯狂的汲取状态，也越来越自信。当然了，游戏其实也没完全丢掉，周末偶尔也会放松放松，但一定是玩完了就主动删掉，我虽然自控强，但偶尔也会随性，所以有时候达到学习目的了，也会在某个周五周六晚上，玩几把，甚至会在五一节国庆节这样的大节日，玩个通宵过次大瘾，但天亮了依然会毫不犹豫的删掉游戏和安装文件，过过瘾就挺满足了。以至于，后来节假日有同学找我玩游戏（对战类），基本都会自带U盘/硬盘过来给我拷贝，否则我重新下载也需要花很长时间，玩完了我还会继续删掉，包括安装包。到了这个阶段，基本是已经逐步有了自知之明，懂得什么该做、什么不该做，理解到，玩也只是放纵一把过把瘾，人只有在顺风期的时候，才会对自己有更清醒的认知，也才会有着对更加美好方向的向往。现在回头看，如果当时大一只是简单看懂，只是学会本学期的C语言，或者毕业时只掌握了大学期间安排的基础课程，其实也只是满足了大学时期对学生的基本能力要求，离社会职场对该领域“优秀学生”的期望还有很大差距。如果你的经历只是完成了基本课程的学习，那么毕业后的起跑线依然和几十万、上百万的应届生在一起，并没有什么突出的优势和竞争力。如果你想渴望在将来能进入知名IT企业工作，那么在大一的刚刚开始时，就一定要尽早明确一个专研的领域方向。当然了，Java依然还是多年的主流选择，以Python为代表的AI因为人工智能的火热看起来目前也不错，但入门基础低，前端技术也朝着越来越精细化、纯粹的方向发展，而.Net因为去微软化导致岗位数量一定会越来越少，php也很难再翻身成为一个流行语言，C++入门容易但想精通需要5~7年以上的长期沉淀，而且国内的就业机会也低于国外，相对更偏向技术底层平台。以上，这里并不想给选型的建议，只是简单聊聊个人看法，不建议选冷门语言，哪怕有名人或机构强力吹捧的未来，也不要选看起来前景很好，但并非当下的热门语言，你并没有这个精力和资本去博它的未来。大学生往往缺乏对这个行业的深刻理解，所以判断看走眼的概率肯定更高些，但选热门一些的语言，意味着岗位的数量相对多，对于火了一段时间、且大厂都在用的，其实刚刚好，所以最重要的是尽量咨询请教那些优秀的、牛逼的、已毕业的专业对口的学长、前辈，比如在一线大厂或知名IT企业工作的前辈，他们对学弟学妹的建议，往往是无私的、靠谱的，尽量找已经走上中高层管理层的学者或前辈。我的建议是，主动上一线大厂/知名IT企业的社招官网，比如京东、阿里、美团等，或者新兴的IT公司，以SaaS类为主，看看他们的社招招聘信息，而不是去找校园招聘。看看他们对于1~3年工作经验的研发岗位，其职位要求是怎样的能力？岗位职责和技能清单列表中，可能会有很多英文词汇你都看不懂，没关系，一开始大概率看不懂太正常了，这些单词实际是框架、工具、组件、等词汇的名称，我们可以一个一个百度去搜，一个一个去找对应的视频或书本教程跟着学（也可以在线的知名培训网站、B站等），买书的话感觉效率和动力更高一些（花了钱的还是不一样的，尤其是书带给人的即时性、既视感体验），但书本相对更枯燥，坚持学习一二三天的人很多，但能坚持7天、10天、半个月的就很少了，如果没有自信看书，或想省钱的话，买本电子书也可以。买书时，一定要看最后编写日期或版本，毕竟新的SDK和语言版本迭代较快，新框架或技术理念几乎每个月都在变化，最好是学最新的知识，但也没必要学最新的、超前的，选最近的稳定大版本即可。这里再次提醒，要重视，最重要的就是上机实践！编程只有心里默念了逻辑，在电脑上实践出来，才算是真正吸收了，其实大脑和手指配合，面对电脑输入代码，脑子里想着逻辑、大脑配合着输入，其记忆和速率都是需要磨合的，敲代码最终也可以进入福流的入神状态。你可以上搜索他人提供的示例工程或电子书，选那些下载评论次数多的，然后进行模仿、自定义修改，这样能加快理解。选一本好书、选一个好的在线视频教程，都可以少走很多弯路，书本的话，上京东搜，买那种评价和销量靠前的（可无脑选销量第一的），一天时间送到家。等你从大一开始，就按照以上方式，提前学完大一到大二所有编程语言类的基础课程，重点不要放在操作系统、计算机网络等课程上，但可以学好基础的SQL语法。从大二开始，一方面完成其他辅助的课程学习，一方面重点投入到按社招的要求，准备大厂所需的，到大三时基本就能够独立使用这些知识熟练的仿写出一个业务工程了。到校招时，基本就超越至少95%以上的同学了。一线大厂或知名IT企业如果有机会去你们学校校招，我觉得通过的概率几乎是稳定的。我在某大厂，去过西安、武汉等地校招了数次，发现985、211类学生对大学的基础课程知识，其实理解都相对扎实， 基本知识的评分很容易达到80分以上，并且人数相当多，他们擅长计算机类的应试题考试，要想从中脱颖而出，光靠大学的基础知识体系是很难突围的。所以，在应试考试表现优良的基础上，如果对某些基础知识（编程语言、数据结构）有深入到原理级别的了解，比如Java，涵盖到集合类（梳理知识树）、多线程（线池池）、数据库（SQL语法、MySQL原理）等，甚至参与过性能调优，就相当于向面试官展示出了极强的学习能力和发展潜力，再加上可比肩1年以上社招水准的技术视野和项目实践经历（对框架确实做到相对熟练的应用），也就有了超出普通校招生的足够优势，基本就能给到4.5~5星的较高校招评分了（special offer）。不付出比他人更努力的代价，是不可能做到脱颖而出的，最好的状态是顺势而为，跟着学习欲望的感觉走，不要让它轻易中断，人一旦进入状态，身边的人都会给予顺势的肯定和支持，反之，一旦打断，就可能会回归到生活的琐事中去。以上，按这样的话，到毕业时你的能力基本已经达到或超过社招1年以上的水平，何况是去参加校招呢？这时你的自信应该是油然而生、发自内心的，面试官只需要通过几个技术问题就能很快感受到你内心澎湃的知识能量，那时的你，有着超出同龄人的进阶沉淀，也有着比同龄人对大厂职位更精准的理解（通过满足他们1~3年社招岗位的基础要求和部分实践），因为自信了，所以也有着超出同龄人对更高挑战的渴望和坚定。如果最后录取的人不是你，请从自身上找原因，否则至少应该是一堆好企业围着你给offer。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",小林coding,我觉得在校不应该局限于学校的课程进度，有时候我们可以主动在网络上进行学习，现在是互联网时代，你想要什么，基本都能在网络上搜索到！B 站就是一个学习的网站，很多人在 B 站上大学、考研、学编程，但 B 站的视频资源那更是五花八门，要从里面选择合适学习视频不是那么容易，而且观看人数多，并不意味着是好的。我周末从 B 站 搜集了些关于学习计算机的视频了，也跟身边的朋友交流一番，特此筛选了下面这些课程的视频，分享给大家。《》这个视频是湖南科技大学老师制作的，PPT 的动图是我见过做的最用心的了，一看就懂的佳作，而且也适合考研人，因为每个视频末尾都有往年的考题分析。B 站视频链接：大学学习计算机网络配套的教材是的，如果想根据此教材看视频学习的，可以看方老师讲解的计算机网络，，方老师不仅颜值高，而且声音也甜，当然最重要是课程质量得到了很多人的认可。B 站视频链接：在工作中，分析网络数据的时候，必然离不开 Wireshark 工具，如果想学习 Wireshark 抓包的朋友，可以快速看看这个视频，当你有一定的后，看这个课程会很快的。B 站视频链接：站关于操作系统课程资源很多，我在里面也看了不同老师讲的课程，觉得比较好的入门级课程是《》，该课程由清华大学老师向勇和陈渝授课，虽然我们上不了清华大学，但是至少我们可以在网上选择听清华大学的课嘛。B 站视频链接：清华大学的操作系统视频课讲的比较精炼，涉及到的内容没有那么细，《》李治军老师授课的视频课程相对就会比较细节，老师会用 Linux 内核代码的角度带你进一步理解操作系统，也会用生活小例子帮助你理解。B 站视频链接：对于非科班出身的朋友，想快速学习计算机组成原理，推荐这个视频，因为这个视频精炼总结出了跟程序员有关的知识，篇幅不会太长，一天就可以搞定。B 站视频链接：如果想系统学习计算机组成原理，可以看哈工大这门计算机原理课，依据的教材正是大学配套的书。B 站视频链接：无意间在 B 站发现一个学习 SQL 很牛逼的视频，主讲人是外国的工程师，这门课程适合初学者和进阶，这位工程师全程以「实战」的方式来授课，案例经典，课程真的通熟易懂，很简练。B 站视频链接：如果你想学习 MySQL 底层原理，这个视频是个不错的选择。B 站视频链接：学习 Redis 的同学，可以看看这个视频，每一个视频都很详细了说明了对应的知识点，而且不仅只是说了基础应用，还涉及了底层原理和互联网场景面试的知识点。B 站视频链接：强烈推荐浙江大学的课程，该课程非常系统，也很经典，适合小白入门算法。B 站视频链接：这个视频主要是左神讲解国内互联网大厂的高频面试题，是一个突击的好资源。B 站视频链接：学习 C++ 直接跟着侯捷老师一系列视频学下去就对了，相信很多人都是看侯捷老师视频长大的。[侯捷] C++ 面向对象高级编程：[] C++11 新特性：[侯捷] C++ 内存管理：[侯捷] C++ STL 源码分析：不知道大家有没有听过高淇老师，我在读大学的时候，那时候看的是老师，讲课的方式很幽默风趣的，这个视频是入门 Java ，一共 300 集，每一集平均 20 分钟，是个干货视频。B 站视频链接：这个视频是 Java 的重点知识整合，是偏向应用类的，比如反射、RPC、SOCKET、文件、JSON、二维码、MAIL、加密等。B 站视频链接：这个视频面向的是 Java Web 的，源码级别的方式讲解了spring、、mybatis。B 站视频链接：----------我是分割线------------最后，说件事。我想着，这世界上肯定有一些朋友也跟我有一样的苦恼，为此下决心，用图解 + 通熟易懂的讲解来帮助大家理解，利用工作之余，坚持输出图解文章两年之久，我的文章都汇总到了网站：网站内容共 1000 张图 + 50 万字，网站宗旨让天下没有难懂的！（口嗨一下，大家不要当真），网站地址（）：希望图解网站成为你们上班摸鱼必备网站哈哈！也欢迎大家关注 
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",kavience,"哎，想起以前也是抱着满腔热血报的CS，结果整个大学四年老师真的是啥也没教，基本靠ppt，大一大二基本上玩过来的，不过大二下学期开始有点觉悟，觉得自己不能这么下去，于是下定决心找实习，当时自己的想法是不管有没有薪水，我一定要找家公司干活，然后就找了一家，写，工资发了1200，那段时间还蛮充实的，但是每次回到出租屋，就开始怀疑人生。大三寒假也找实习，在校期间也同样继续工作，大三的时候基本上能自己养活自己了。回到正题，怎么做？我给你个建议，学，真的。我以前也学c，做一些黑白界面上的计算器，贪吃蛇什么的，学java，就搞安卓，搞java swing，因为只有这样，我才有学下去的动力，人就是这样，喜欢做能立刻得到反馈的东西，才会继续学下去。为什么英语难背，数学简单？就是这个道理，英语背完，基本没什么反馈，转眼就忘，但是数学，做完一题，做同样的题目，思路马上就有了，所以这就是我当时的学习方法，直到遇到瓶颈了，靠自己写这种小东西，没什么进步了，太大的，你写不来，太好看的界面，没有涉及思路。这个时候就去找公司实习，且不说有没有人带你，最起码你在那个环境下，愿意去做更有挑战的东西，但是，非常重要的一点，为什么要去学php？因为简单，容易上手，而且用的小公司贼多，我那个时候就天天学php，而且很有成就感，因为快，做的效果又好，然后又接触更多前端，接触微信支付，接触框架，thinkphp, laravel，简直不要太爽，用起来，还要啥SQL语句？接着又有一个瓶颈，永远都是增删改查，还是没多大意思，，分布式，微服务等等一大堆，愿意搞但是公司用不上的东西，这个时候又是一个分叉路口，转Java或者转前端，转Java，直接学，一线城市大多数公司都用这个，有了PHP的开发经验，再加上大学的Java知识，一样很快上手，但是又有一个问题，得不到反馈，学起来费劲无聊，所以我转前端了。转前端有一个优势，你做的东西，自己能立马看到，给自己带来很大成就感，一开始用，jQuery之类的，接着进阶学react或者，然后一堆node，, babel，虚拟Dom什么的，这个时候深入学习JavaScript，了解框架的底层原理，参与项目，比如ant design，, eggjs等等，又是一片新天地。这个过程曲折，孤独，别人在玩，在泡妞，你在敲代码，看不到前方的路，但是相信我，坚持大学，哪怕三年，毕业后你真的不一样。当时我只准备一年，如果大一开始就这样，相信我也能进阿里或者腾讯吧，哎。大三错过大厂实习，大四错过校招，毕业后半年再找大厂的时候，内推的大神直接告诉我，如果是应届生的话，还是有机会的，社招就算了。在这里，希望看到的学弟学妹们，要加油，尤其是学校本身不咋地的………"
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",穷码农,很赞同其他回答说的，大一其实刚开始接触计算机的话，不需要掌握太多，想掌握太多了也掌握不住，对不。毕竟你还得学高数，大物，英语等等其他的课程。掌握的意思就是要用得很熟悉，别只满足于学校的要求，满足于考试过关就行，一定要能自己写不少程序，做一些项目出来。这样的话，你接下来的学习就能事半功倍了。不管接下来是去做项目，上其他更难一些的课程，还是说去刷题。语言的话，建议学好Java或是C++。毕竟是计算机科班的学生，如果只是掌握Python的话，我觉得还是不够的，虽然拿Python入门到是没问题。但一定一定要掌握至少一门静态语言，且不说，接下来的课程，比如操作系统这样的课程，肯定是需要用到C++的。所以，早点学好一门编程语言就很有必要！其中C++是一个很稳妥的选择。如果想学Python的小伙伴，可以看这个回答：也可以参考这个课程来学：另外这门python课程也很不错呢，用游戏闯关的方式来学习编程，方式新颖效果不错！Java的应用范围也很广，如果你接下来要做安卓开发，或是，Java都是很好的选择。接下来就是如何去加强这门语言基础。！大学应该掌握的基本数据结构以及他们的实现，可以看这个回答：数据结构的书的话，可以快速看这本，就能入门了。。这个过程当中，你的编码能力就稳步提升了，debug的能力也会得到锻炼。快速过一遍之后，就可以跟着算法红包书来一波最基本的算法和数据结构了，虽然这本书书名叫算法，但其实它也囊括了数据结构，而且全书配了很优质的Java代码，想学怎么写简洁高效可维护的Java代码的小伙伴，不容错过这本书，及其配套的网站和网课。下面这些网课我都上过，有C++，有Java。都是我自学过程中让我获益很大的课程，分享给大家。不过，我建议大家一个个看完，学有余力再看别的，千万别东看一些，西看一点的。网络课程的话，则是十二分强推UCB的CS61B。他们家的计算机系的CS61A，B，C课，简直制霸各种课程推荐列表。2. MIT的算法课，教程用的，也是强推的网课： 这门算法则基本不涉及到语言层面，主要是算法层面，讲得很好。3. 然后就是的网课以及配套官网：4. 斯坦福2018 Winter CS106B: Programming Abstractions，虽然从名字不太能看出来，但其实是用C++讲数据结构，想用C++的小伙伴不容错过，我看了一半了，特别有帮助，尤其是对和回溯的讲解，简直醍醐灌顶。现在因为不可知的原因，Youtube上面已经下架这门课程，但更方便的是，咱们可以在B站直接看：Again，也可以去这里学：我觉得大一能掌握好上面的内容，就是A+的成绩了。接下来再去跟着这个回答，安排大学其他的计算机核心内容吧。一定一定要自己课余多学，自己push自己，光靠课堂上学的东西是远远不够的。大学是不会教大家怎么去找实习，找工作的。一定要有自己的规划，然后逐步实现。才能在毕业的时候，收获大公司的offer。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",南山烟雨珠江潮,当你知道什么叫、堆、栈的时候指针就搞懂了，现在搞不懂也没关系，更没必要强迫自己一定要什么时候搞懂，可以照例子里面指针的用法来模仿。指针的用法无非就是* &两种，比起很多数理化的公式来说简单多了，一大堆数理化公式不用搞懂照样用得飞起。其实在搞懂指针之前，连int a;这样简单的语句本质是什么一样是不知道的，就当成自己看懂了，然后就用了，指针也一样，当作一种惯用法去用就行了。ACM有专门的训练课程，在参加训练之前，直接照着刘汝佳的《》来看就好，书上的例子和题目能做多少做多少，水平自然会提高。算法竞赛入门经典是国内学习算法的宝典了，知乎上有大量讨论，随便找的图片，不是广告。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",巧学.h,
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",编程指北," 看了题主的问题, 其实就是想问如何快速提高编程能力嘛,,之前有个学妹也这样问过我,我还单独在公众号写过一篇文章,挺适合这个问题的，我贴过来~提高编程能力，我自己总结了以下几点：先上第一点，关于做项目，这也是学妹的痛，不知道如何去开始一个项目。谈到这点，对不起，我又想讲自己的经历了，有点长。。。是的，我们都知道编程是一门实践的学科，不动手永远学不会，看懂了和学会了之间差了上万行代码。或者说： （此公式未经证明，纯碎自己拍脑袋想的刚学完一门语言，想必大家都想做点有用的东西，而不是天天写练习题，但是呢，又不知道从何下手，尤其是 C 语言。我大一上完 C 语言课，就处于这种状态，但是我隔壁一个室友就不一样的。他在学习 C 语言的过程中，刚学到动态内存分配(malloc)，就去摸索着写贪吃蛇、坦克大战，而且完成度都挺高的，那时候是我们眼里妥妥的大神。但是大神和我上的课，学的东西都完全一样呀，况且都是上了大学才开始接触编程，为什么差别这么大呢？以至于那时候，我和学妹一样，常常怀疑自己没有编程天赋，觉得别人天生就是这么强。这种状态一直持续到大一下，那时候刚学完 Java，而 Java 也比 C 友好了不少，所以总想写点什么。于是自己就选择写一个类似 QQ 的聊天工具，其实功能就很简陋，就是一个简单的 GUI + Socket 编程，然后在加上用户信息管理就完了。但是，当我用这个简陋的软件，分别在室友和我的电脑上跑起来并且成功发送消息的那瞬间，我觉得我的编程世界被点亮了。原来编程这么好玩，原来我也能做一些有趣的东西！似乎找到了一丝编程的感觉，但还说不上到底是什么感觉，毕竟这个程序总共也就几百行。紧接着，趁热打铁，我又写了一个联机五子棋，实现上依然是 GUI + Socket 传输数据。但是写这个又遇到了不同的问题，比如棋盘在我的实现里是一个 N*N 的数组，棋子是用对象表示，对象里有坐标、颜色这些属性。当时我就疑惑了，当一方落子后，该怎么把棋子对象通过网络传输给对方呢，再从网络接收的数据恢复到对象？起初自己的想法是手动的把对象转换成字符串，然后像聊天工具一样发送给对方，比如:。这种做法没问题，但是总感觉不够优雅完美，于是上网一番搜索之后发现，原来我想的这个就叫「序列化」和「反序列化」。并且在 Java 里直接实现 接口就好了，甚至可以直接使用类就能完成序列化和反序列化对象。这些问题在现在看来，根本就不是问题，更像是“常识”。甚至序列化这块，还会选择一些兼容性更好、性能更高的协议，比如 Protobuf、Thrift、Avro 等等。但是对大一时的我来说，在这个过程中不断的遇到问题并且去解决，就是实打实的编程能力上的提高啊。在我解决掉一系列问题之后，顺利的和隔壁室友用自己写的联机五子棋对战了几局，这个五子棋还支持不少诸如悔棋、暂停、自动判断输赢等功能。界面风格和下面这个很相似（这是网上搜的）但是由于当时没有存 Github 的习惯，代码在换电脑之后没能留下来。通过写这些项目，我像打通了任督二脉一样，不是学了什么厉害的算法、也不是高深的设计模式、更没有分布式这样高级的东西。那是什么呢？只要我们心中有设计图纸，那就能通过胶水把这些积木搭建成想象的模样，缺少什么积木块，用到的时候再去搜索就行了。这段时间大概是我编程能力提升最快的一个阶段之一。关于这个五子棋，还有个小插曲：我写的不是联机五子棋嘛，然后启动的时候输入对方的 IP 和 Port 就能连上对战。后来，我找了一个在其它城市上大学的高中同学，让他和我一起玩五子棋，但是呢，我傻乎乎的让他用 ifconfig 查看自己 IP 后告诉我，然后我在这边连接。那个 ip 呢，大概长得像 ，熟悉的同学都知道，这个就是局域网内使用的 IP 了，并非公网上的 IP。局域网内的 IP 只能在内网才能使用，所以我用这个 IP 是永远连不上的他的电脑的。但是那时候我才大一，没学过计网，根本不懂这里面的原理。为啥我和室友能连上呢（因为在一个局域网）？为啥和其它学校的同学就不行？别看现在这个东西在我看来是常识，但我那时候是一点计网知识都没，就是硬着头皮学的 Socket 编程，去理解 IP 和 Port。那是怎么解决的呢？当然是找谷歌呀！在网上一番查询后，大概明白了，如果想让不同局域网内的主机进行 P2P 通信，需要一个公网中转服务器辅助进行 NAT 打洞。。。后来，我就又去尝试 NAT 打洞了，其中细节就不再描述了。其实把我个人编程经历上写这么多，就是想展现我是如何一步步去实践的，遇到了什么问题，又是怎么解决的，把这个过程展现出来。你看我没学任何计网知识，还不是通过边学边用，完成了网络相关的项目。所以你离项目只差一个开始。说到这里，不少同学又会说，我知道要多实践、多动手，道理我都懂。可我还是不知道如何开始去写一个五子棋、贪吃蛇之类的东西。好，那我就要问问你了这应该是大多数同学最典型的问题吧？那我们以贪吃蛇为例拆解一下，看看是如何从问题到代码的。首先，贪吃蛇是一个个的节点组成的，节点肯定有横纵坐标吧？一个个的节点组成了一条蛇，那自然应该想到链表吧？蛇还有什么属性？当前移动的方向还要食物位置吧？ 那这些属性在 C 语言中用结构体表达出来就是这样：接下要考虑的就是如何去绘制蛇，这个简单呀，就把整个链表从头开始把每个节点打印出来。每个节点可以是一个圆点，也可以是方形。那如何让蛇动起来？所谓的动，其实就是不断的将蛇打印出来，然后又清除。并且不断的根据移动方向更新蛇的位置，只要这个过程够快，快过人眼能够分辨的帧率，那看起来蛇就像是在连续的动一样。然后这个过程你还要去考虑如何检测碰撞，如何判断吃到了食物，还要随机产生食物。。。 这些东西首先你得想清楚逻辑，代码实现其实if、else 、for 就足够了。做项目的过程总会遇到不会的东西，也会遇到问题。但是要相信，所有的问题在你之前基本上都已经有人遇到过了，只需要把问题准确的描述出来，然后去搜索引擎上搜就肯定能找到解决的线索。本科上的就那几门课，Java/C/C++、操作系统、计网、编译原理、离散、数据结构......可能没有学校会单独开一门课教你 Java Web、Python 写爬虫等等。学完这些理论课，等到毕业，你会发现，依然好像什么都做不了，所以说，要动手，趁早。并且理论上，学完一门语言，掌握了数组、链表、 if、for、函数这些编程最基本的概念，就有能力去实现一些诸如贪吃蛇、五子棋、扫雷这样的小玩意了。这种通过项目去学习，以解决问题为导向的学习才是更加精准和高效的。课堂上的学习大多数是老师灌输知识、学生记住，然后考试就能拿高分。实际上有多少知识能转化为解决问题的能力呢？不好说。还是那句话，编程就像搭积木，学完基础的，积木块都给你了。你能搭出房子、车子、还是火箭这全靠自己。所以动起手来，编程能力是靠码出来的！全文在这，太长了，我就不放过来了，感兴趣的可以去看下：觉得有帮助记得关注我  哟~，指北不指南！---update---除此之外，学习编程过程中一定要多刷题，刷，这里推荐一下刷题方法和开源刷题笔记："
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",袁航,"首先我们要明确的是，学编程时我们到底在学什么。我们在学习过程中不能只关注不同的知识点，而更多的学这个领域的思维逻辑。尤其是在学编程初期，我们扎扎实实打基础是好的，但是我们不要过于专注于把一个编程语言的所有库和语言都过一遍，因为过了也会忘记那我们还怎么学习编程呢，对于在大学还是编程母胎新手的同学请继续往下看，首先我们要知道，可能在你2-4年以后，你的日常会是这样的：可能在你的想象中，你会只用一个语言然后只用理解这一个语言就好了，但是事实并非如此，因为不用编程语言的不同特性和具体工作需求，很多时候你喜欢很快的在不同的语言中切换，这也是为什么培养(programmatic thinking)比一味的去刷各种奇门语法和算法在初期重要得多，而且也因为学过的都会忘记，真正的学习是在什么东西都忘记以后所留下的东西。Right,这句话不是我说的是爱因斯坦他老人家说的好的在我们把预期设定好以后，我们来看自己在每个学习阶段当中真正需要注意什么，以下方法不只限于编程的学习中，但是我们以编程为例子，首先在我们一开始进入一个新的领域()的时候，我们知道的东西很少，就像下面的这个小灰点一样，所以在这个阶段，我们学什么都增加我们的知识点：在我们学了一定程度以后，我们应该对这个领域的大多数核心方向有所了解，然后相对初学者时的我们来说，有经验(以后我们的知识网也应该是均匀的向外扩张，具体说来有几个方面在这个阶段，我们也就可以开始和同学或跟着导师一起做做一些大的项目了，然后学习他们的一些知识，以及慢慢开始做一些开源的项目参加code review等等，这样自己才能够得到更多的回馈，从而找到自己的不足。在我们对这个领域和核心方向都掌握得差不多的适合，我们也需要开始发现一些细化的方向来建立自己的长项了这样成为一个专家()，比如说云计算，机器学习，，或者多线程处理等等，不过当你当了这个程度，应该已经找到了自己学习的一套方法，到时候就。总而言之，学编程不用急，切记不要焦虑。重要的是心里有谱，自己知道自己现在学的一些东西是不是对这个阶段的自己是最有用的，学会优先级处理学习的先后次序，不然如果只是一个编程小白，非要想去一周写一个编译器出来，就只有等神仙来救你了，不过确实搞不好出现哈哈。"
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",一个新手,大一上学期C入门，寒假（疫情期间八个月的寒假）里自己刷题锻炼了一下C，结构体，指针这种老师没重视，于是自己练题也写了有5000行吧，然后自己学了C++STL库，然后也接触了面向对象，之后一直用c++刷题，然后又自己开始学数据结构和算法（严书实在劝退。。）目前大二了开始学于C++面向对象程序设计，开始接触工程方面的东西（写一些小游戏）当然算法也还在学，各个OJ大概刷了四百题左右，看了一下编译器上的文件代码大概有2.5w行左右(我喜欢做完题加个注释继续写，不喜欢新建文件)，这学期学python（面向对象编程与面向过程差异还是挺大），因为接触过c++因此上手还是挺快，只需要特别注重了一下语言之间的相同点与差异，准备花一个月把C++面向对象学完(在MOOC上刷视频结合c++primer)，开始专注于python，并且自己做一点东西出来（不能只会刷题呀），当然算法也不会停下，既然喜欢就自己去追求呀。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",夏天要亡,我个人觉得。。正常的大一情况应该是啥字符串操作都不行，写个能做加减乘除的计算器就算行的水平。。。当然现在大学也在逐渐的不养闲人加大毕业难度。。起码我们那个年代的大一学生都是这样的（学校还算凑活）。。。。。。你这个水平的，在我读大学的年代。已经算是学霸了。。笑。。。。。。。。。。。。。。。一个月后我突然反应过来了哦。。。题主这是不是在装b啊。。。。。大一都去刷oj参加acm了。。。然后还说自己啥都不懂。。。结果被b乎一堆更会装的人真真实实的教育了一番装b的正确姿势。。只有我一个老实人傻傻的跳出来做反面教材。 。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",极客时间,大一一个学期能学多少编程？换算一下：一个学期== 4.5 个月== 18 周== 126 天，按照《21 天精通 C++》的速度，一个学期少说也能达到架构水平......当然，以上内容纯属胡扯。下面开始正文。 刚步入大学生活，有的同学对大学的印象还停留在中学老师们渲染出的美好幻想当中。“上了大学就轻松了，随便玩……”“编程？编程是啥，能吃么？”“为什么选计算机专业，我也想知道我怎么调剂到这个学校的计算机专业的。。”当然也不乏有少部分同学在大学之前已经接触过编程，亦或是天赋异禀 21 天就能精通 C++。但这绝对是凤毛麟角。多数同学都是步入大学之后，打开课本才切切实实的了解到“什么是编程”。而今天要说的主要针对这群同学。对于一个刚接触编程的同学来讲，兴趣当然是最重要的。所有计算机专业的同学，第一学期的一门必修课 —— C 语言（鸵鸟现在还记得自己在 C 语言第一节课屏幕上打印出“Hello world”时的心情）。世界上所有和编程相关的东西，都有 C 语言的影子，这是无法否定的。但 C 语言对于一些对编程兴趣不大的同学来说，从一块迈向编程世界的敲门砖，变成了绊脚石。第一份入门教程，主要是让你体会到编程是什么。《》 ，这本书以 Python 语言教你如何写程序，是一本老少咸宜的编程书。其中会教你编一些小游戏，进而激发你的兴趣；还会和你讲基本的编程知识，相当不错。再推荐两个入门的网站Codecademy: Learn Python 和 People Can Program ，你也可以在这两个网站上学习 Python，只不过是英文的。然后，你可以到 CodeAbbey 上去做一些在线编程的小练习。（为什么推荐英文网站？信息源很重要，第一手资料很重要，英语也很重要）第二份入门教程是 MDN 的 Web 开发入门，主要是让你做点实际有用的东西。嗯，做个网页吧。MDN 全称是 Mozilla Developer Network，你可以认为是 Web 方面的官方技术网站。这个教程会带着你建立一个网站，然后你可以把你的网页发布在 GitHub 上。在制作网页的过程中，你写的每一步，都可以很直观的看到，也就更能刺激你疯狂分泌多巴胺。想想有多少同学是因为本身对编程并不了解，而后又在、冒泡排序等算法的摧残之下浅尝辄止。这两份教程都很不错，都是从零开始，带着你从环境准备开始，一点一点地从一些简单又有意思的东西入手，让你感觉一下编程世界是什么样的，相信这两个教程可以让零基础的你喜欢上编程。期间你可能会了解到一些编辑工具，VS Code 是个不错的选择。如果你的大学老师非要让你用记事本，emm，那就随他去吧。有了基础以后，还需要大量的实践帮你掌握技能。举个例子，无论用哪种语言，能做一个非常简单的 Blog 系统，或是 BBS 系统，有简单的用户登录和注册（不需密码找回）；用户发贴（不需要支持富文本，只需要支持纯文本）；用户评论（不需要支持富文本，只需要支持纯文本）。你需要从前端一直做到后端，也就是说，从 HTML/CSS/JavaScript，到后面的 Python，再到数据库。这其中需要你查阅很多知识并多多实践。大一一个学期，时间也就那么多。消化好了这些内容，就准备好精力迎接后面的挑战吧。至此，已经进入编程正式入门阶段，下面该学习该如何编程。编辑：鸵鸟
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",乐悠族,高数，线性代数之类的数学课程没有占据你们绝大部分的学习时间么？
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",慕课网,"首先，对于计算机相关专业的同学来说，一定要重视C语言的学习，原因有三个方面，其一是C语言在操作系统开发、嵌入式开发和多媒体开发领域依然有广泛的应用。其二是掌握C语言对于后续计算机专业课的学习有非常积极的促进作用，比如数据结构、编译原理等等；其三是掌握C语言也会方便后续的考研，目前也有不少学校在考研时会考察C语言。截止到目前为止,编程开发语言已经有很多种,而每个程序员根据自己的学习能力不同,掌握一到几种不同的语言.写这篇文章的目的,主要是将自己学习一门编程语言的过程和方法分享给大家,希望大家可以结合我的经历总结出适合自己学习编程语言的方法.我是一名iOS开发工程师,所以最开始接触的语言便是Objective-C语言,是一门面向对象的动态语言,在经过一段时间的沉淀以后,目前开始进行了全栈的学习.在这里是指前端+后端的学习.当我接触到前端开发以后,我便整理了我要学的知识点,你别说,还挺多的东西要学呢.首先就是作为基础的HTML+CSS+JavaScript三巨头.可能乍一看是三个语言,就可以让很多人望而却步.其实学起来一段时间以后,你又会发现并不是那么的多.再过一段时间,你会发现,想要让自己会的一门语言精湛,是需要多么长的时间磨炼和实战经验.每个人学习一门编程语言,都是有自己的目的.比如有人想写一个App,有人想写一个小程序,有人想写个人主页,有人想做一个大项目.也有人只是为了自己干某些事方便.那么我的目的,说起来很多人不信,我是为了学习一门语言,增强自己的实力.我不会优先站在挣钱的角度去学一门语言.也许我不是赚大钱的料,但是我愿意融入到一门编程语言中去.学习心态其实和游戏心态差不多,但是游戏一局可能就个把小时,但是学习确实一个较长的过程.一旦学习心态崩了,一段时间都不想进行学习了.学习过程中因为每个人学习能力不同,都或多或少,或快或慢会达到一个阶段的瓶颈,或者坎.良好的学习心态就是:不怕困难,不怕瓶颈,爱上不断自己寻找答案的过程.这是程序员必经的一环.正如上面所说,每个人学习编程语言的目的不同,有的人是兴趣,有的人就是想要高工资.每个人目的不同,所获得的动力也不同.大多数心想高工资的人,只会停留在编程语言的使用上,而不会深究其原理.而拥有良好学习方法和兴趣的人,往往可以在编程语言的体会和理解上更上一层楼.当然,也不乏那种确实只希望拿高工资的人,本来干着程序员,后来不研究技术,搞产品搞公司搞创业发家致富.这也是个例.编程语言是一个工具没错,问题是看你是一个使用者,是改造者,还是创造者?看你理解和体会的程度咯.一门编程语言的学习,绝对离不开练习,一定要为自己定下目标,用所学的语言,做一个属于自己的东西.学以致用.切入正题,一门编程语言学习的快慢,使用熟练度,处理问题的速度,都是因人而异的.那么怎么一个差异性呢.编程语言有很多种,你可以根据排行榜排名进行各个语言的了解,不要吝啬你的百度,查一下排名靠前的编程语言都可以做些什么开发.详细了解以后,选择一门自己要学习的编程语言,如果你是第一次进行编程语言的学习,一定要慎重选择.起点语言的难易度不同也会决定你的终点在哪里.因人而异.了解一门编程语言,切记,因为在你步入程序员行业之前,你并不能分辨高质量技术交流群和无质量水群以及培训机构建的群.,每个交流群都会有,他们的目的只有一个,打消所有准备入行以及想要勉强苟活在程序员行列中的人.谨记,,所有的群都是消遣,水水群,换个心情而已.在上了解一门语言的行情也不是很推荐,但至少要比群好多了,我个人看法是,如果你的兴趣可以支撑你研究一门编程语言达到一个深度,那么工作的问题你是不需要担心的,我最担心的就是你还没有怎么学,就已经想要放弃了.顺便插播一下，慕课网近期活动开放了付费专栏免费学活动，需要的直接戳下面链接领取~什么是局限性呢,尤其是你在进行第一门编程语言的学习时,因为你并未接触过这方面的知识,也没有人可以全天指导你.你所学到的知识无非就是书本、视频提供给你的,犹如井底之蛙,只能学到现有的知识,而无法拓展和灵活使用.举个例子,当你去旅游的时候,你是会只去一个地方,还是会先搜遍这个城市的所有景点,然后挑几个自己喜欢的进行游玩.尽管你在学习一门编程语言时,可能已经达到个人的满负荷,但我还是想把自己在进行学习所思考的关键词告诉你.如果只是学习字面概念,那就好比纸上谈兵,动手做一个自己想做的项目,付出实践,就是学习语言的最好方式.什么是滞后性呢,比方说,可能你在进行一门编程语言的学习,书中第四章所有的内容都无法理解,在阅读到第七章时豁然开朗,突然明白了第四章所讲的东西.当然,这也会有时间性的体现,你会发现,在你学习的过程中,三个月前对同一个概念的理解与三个月以后是不同的.虽然你在前期可能不懂某些概念,如果在进行大量学习后,还是无法理解,你完全可以跳过,在学习以后的知识,会有一种顿悟的感觉,这便是语言的承上启下性.空口无凭,我就拿我自己学习编程语言的感受来分享给大家.下文分文两种情况进行叙述:一个是我进行第一门Objective-C语言学习的体会,一个是在有了几年经验以后再进行别的语言学习时的体会.语法学习中,唯一困扰我三个月的东西就是,对象,到底是什么东西.OC是一门面向对象的动态语言,但我前三个月虽然会创建对象,调用方法,但我根本对对象毫无概念,没有自己的理解.一个混沌的概念.而后,在学习OC的6个月以后,大致懂了我为什么要创建对象,因为我要完成我的业务逻辑,我需要对象帮助我.在学习OC的一年后,我懂了对象存在的意义.而在从事了两年iOS开发后,看了些进阶视频后,我终于明白了,对象其实就是个指针,而指针的本质就是内存地址..(滞后性)学习界面搭建时,也是为了搭界面而搭界面.学习数据传递时,最令我困扰的就是,代理,block.网络请求类倒还是比较容易理解,这时学习的使用第三方网络请求框架,不懂它的原理和运作方式,只是会简单使用.当开始了一个完整的项目搭建时,便突然豁然开朗,原来之前学习的所有东西,都是为了完成业务逻辑,搭建项目.需要自己灵活运用组合.当熟悉了项目搭建,并经过一段时间的工作,开始拥有了自己代码规范,约束自己,不再是为了完成业务逻辑而完成业务逻辑.约束自己,提高自己,并提高代码质量.在进行大量的文章读阅以及大量第三方框架代码的学习,突然发现自己需要提升的还有很多.首先想要优化的就是自己的项目框架,代码不够健壮,架构不够健壮,这哪里是不够健壮,这简直就是不能见人.在养成了个人架构和规范后,开始进行了iOS的底层学习,Runtime机制,指针等,发现了一个道理:我第一门编程语言学习的时候,也下了很多功夫,做梦都在敲代码,这个过程很苦,但是我很欣慰.我也会很笨,书里的东西我都看不懂,代码也会出错,出很多知名错误,但我一直努力学习.有了第一门语言的基础,再进行第二门语言的学习,我会首先考虑到语言特异性.语言特异性就是字面意思,不同的语言,会有不同的规则和差异性.学习一门编程语言的最好途径对于有基础的人就是书籍,如果你没有基础的话,最好的途径是视频没错,但是视频有些节奏过慢.编程语言书籍大致分为5类.切记不要盲目的读书,要循序渐进,不然失去读书的兴趣,将会失去知识获取渠道.每个语言都有特性,例如 动态语言、.强语言、弱语言.要搞清所学语言的语言特性.更有利于后面的学习.每个语言都有自己特有的规范,和系统内置函数,方法,实例.是编程人员不能替换和修改的并严格遵守的.每门编程语言的大体结构大致是每本书,每个视频,每个文档,每篇文章,都是别人的见解,别人的看法.在学习一门编程语言的过程中,大量阅读别人的资料没错,但是,一定要把别人的东西变成自己的.将自己的理解,建造成属于自己理解和见解的一个体系,也方便与别人交流,及时改正自己看法的错误.在学习一门编程语言,最需要的就是一个前辈的指导,如果只有自己,那就和游戏开荒没有任何区别.那怎么获得这个人脉资源呢,要自己去寻找高质量的技术交流群,结识各种层次的编程语言开发者..在没有稳定属于你的人脉资源时,不要问毫无营养的问题,要问一些有建设性的问题,值得交流学习的问题.目前我个人知道的高质量交流群除了好友邀请的,就是通过添加的群.怎么学习?如何学习?我可以这么跟你讲,如果你想学,你的时间根本不够用.你觉得我说这话闹着玩的话,那就是你还没有体会到我是怎么想的.我目前关注的42个人当中,有一些人便是iOS领域当中的前辈,他们有一些文章便是有一定见地的,我会抽时间学习他们的每一篇文章,去其糟粕,取其精华,为我所用.本人是Mac系统,用的Dash软件是用来查官方文档的.Windows系统可以使用手册和API是进行一门编程语言学习的最好途径.如果你的编程语言有编辑器的话,一般都是可以戳到语言定义里去的,直接学习每一个值得学习的函数、实例、方法.看看在软件/API文档中是如何定义的.补充,作者：筑梦师winston链接：来源：慕课网本文原创发布于慕课网 ，转载请注明出处，谢谢合作"
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",动力节点,早些年，网上盛传一句话话虽如此，但能能在毕业时有四五万的编程量就算不错的了，在追求量的同时一定要知道：1.关于编程如何学习，提高自身能里，C语言项目等，很值得参考学习2.阿里云栖的回答，很多建议都很中肯
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",findyi,"如果题主不是为了将来做研究，那读计算机专业的重点就在于如何提升编程能力，总结几点：1.多动手实战，多刷题多做项目2.学会使用搜索引擎，尤其是Google，帮你解决卡点问题3.看经典编程书籍，看经典编程视频，b站上其实有不少4.多看一些优秀的大一刚入学，因为追一个女孩惨遭拒绝，这之后开始自暴自弃，长期混迹于网吧，甚至有一次住网吧长达17天。放荡到什么程度呢？曾经玩星际争霸，连续刷了几百局，整个过程就吃泡面馒头，喝点白水。看着这张死缓通知书，这个结局我并不意外，长期翘课、挂科无数。那时候水到计算机专业大三了，连一个HelloWorld都不会写。本科就读的大学坐落在一座山中，那一天上山再下山，不断往返，完全感知不到时间的流逝。整整走了一个白昼，累得精疲力尽，瘫坐在草丛之中，看着深邃的天空和地上的花朵。于是我定下里加入游戏行业的目标。因为大学前两年全荒废了，所以大三是冲击的一年。大三我先后学习了C语言、数据结构和算法，同时补习数、计算机网络这些核心课程。大三还养成了一个习惯：疯狂刷算法题，成为了一个算法做题家，后面没想到算法在面试中这么重要，刷算法题让我轻松拿到腾讯校招Offer。此外，还学了一门影响我职业生涯的语言： C++。看的第一本书就是：《》，可以说上面的每一个例子，都上机造过轮子。随后开始啃除了疯狂自学，毕业的压力也很重，掌握了C++之后，我还用它做了不少有趣的东西，比如：万年历、五子棋、俄罗斯方块等等，俗话说兴趣是最好的老师，建议大家在学习编码的过程中也不妨挖掘出一些有趣的东西：我写的五子棋程序：俄罗斯方块：C++学习其实有三个阶段，一般人可能需要几年时间跨越这三个阶段，而我当时真的疯狂，一天可以学习15个小时以上，这也让我在毕业之前就到了第二个阶段：刚入门的时候我们主要是学习培养编程思维和动手能力，深刻理解面向过程和面向对象的思想方法，这对以后的程序员之路非常重要！所以学习语言更为重要：面向对象编程思想；类的封装，构造和析构、静态成员、对象管理；类的构造(有参构造函数、无参构造、拷贝构造、默认构造函数)和析构；对象动态管理、、友元类、操作符重载； C++编译器对象管理模型分析；类对象的动态管理(new/delete)；友元函数和；运算符重载(一元运算符、二元运算符、运算符重载难点、项目开发中的运算符重载)；类的继承、多继承及其二义性、；多态(概念、意义、原理剖析、多态案例)；虚函数、纯虚函数、抽象类(面向抽象类编程思想案例)；函数模板、类模板，模板的继承。C++类型转换；C++输入输出流(标准I/O 文件I/O 字符流I/O)；C++异常处理(异常机制、异常类型、异常变量、异常层次结构、标准异常库)；利用一些IDE开发工具：诸如Windows平台VC系列：VC++6.0(比较古老) ；Visual Studio2013, Visual Studio2015，Visual Studio2017，Visual Studio2019；Mac平台的XCode系列，还有CodeBlock，另附一些高级编辑器Notepad++, EditPlus,UE等一些开发工具的常用设置和一些常见快捷键的使用。这个阶段推荐以下两本书： 这是一本内容不多但很实用的C++入门书籍，强调快速上手与理解C++编程。本书主要围绕一系列逐渐复杂的程序问题，以及用以解决这些问题的语言特性展开讲解。你不只学到C++的函数和结构，也会学习到它们的设计目的和基本原理。 本书对C++基本概念、技术、以及现代C++编程风格进行了全面而且权威的阐述，是C++初学者的最佳指南；本书可以帮助你编写实用的程序，而无需首先精通每个语言细节。对于中高级程序员，本书也是不可或缺的参考书。在第二阶段学习的时候，就是比较重要的了，C++开发的进阶之路，更是一个让自己找份薪水比较体面的工作的筹码。C++进阶之STL：STL = Standard Template Library，即。这是提高开发效率的极品工具。通过学习此阶段，应掌握技巧，理解容器类在C++语言中的应用模式，以及熟练掌握全部的使用方法。C++进阶之设计模式：决定一个项目成败最重要的因素是项目总体的设计，通过本阶段的学习，可掌握面向对象编程中重要的一环，是编码前建模的技巧所在。单例模式；工厂模式；代理模式；迭代模式等，这些都是你要掌握的哦。C++进阶之数据结构基础：这是所有编程语言中最应该学习的部分，程序组成的基础之一。顺序存储、链式存储、循环链表；、栈(顺序和链式)、队列(顺序和链式)；栈的应用、树基本概念及遍历、二叉树；排序算法、并归算法、选择、插入、快速、希尔。这个阶段推荐以下几本书： 作者是Scott Meyers。你应该熟读它们，并清楚地理解每个项目。该书围绕55条准则，每一条都介绍了一个可让你写出更好的C++程序代码的方法，并以特别设计过的例子详加讨论。 这两本书中都包含了40个C++编程问题，这些问题会让你磨练自己的技能，最终成为优秀的C++程序员。这些问题是Herb Sutter精心挑选，与ISO/ANSI C++官方标准相一致，帮助程序员在设计、架构和编码过程中保持良好的风格，从而使编写的C++软件更健壮、更高效。 本书专注于C++面向对象程序设计的底层机制，包括结构式语意、临时性对象的生成、封装、继承，以及虚拟——虚拟函数和虚拟继承，帮助你理解程序的底层实现，以便写出更高效的代码。 本书作者也是C++语言的设计者Bjarne Stroustrup，作者在书中综合性地介绍了C++的发展历史，C++中各种重要机制的本质意义和设计背景，这些机制的基本用途和使用方法，讨论了C++所适合的应用领域及其未来的发展前景，既没有忽略关键性的详情，又没有过多地陷入技术细节。大四一年，我都在这个阶段，当时开始在一个小公司实习，公司给网吧做小软件。老板交给我的任务是写Windows C++界面，大三疯狂学习了一年C++，工作很快就上手了。没几天，老板说软件要赶着上线，全员一周工作六天。今天大家热议的万恶996，我10多年前就体验了。在实习过程中我依然在疯狂学习C++经典书籍，这种训练方式也让我进步神速，也为我后面在腾讯和职场的高速发展打下来夯实的基础。这个阶段需要掌握的一些C++技能：C++进阶之QT开发：掌握QT类库构架，图形界面开发模型；掌握QT开发技巧，消息机制，图形处理；掌握QT网络编程，UDP，TCP使用方式；掌握QT文件处理方式，序列化；掌握QT在windows，linux，ios，android不同平台下的移植技术C++进阶之Windows/Linux网络服务器：掌握Unix/Linux平台开发方式；熟练使用系统调用；熟练Unix/Linux内存管理，进程，线程调度；掌握MFC界面开发，网络编程；熟悉网络服务器开发方式，熟练编写TCP，UCP网络服务程序；掌握同步/异步IO模型在网络编程中的使用方式。C++进阶之数据库开发：掌握SQL语言的实用技巧。Oracle,MySQL数据库的使用方式。如果你能熟练掌握以上列出的技能，具备解决复杂问题和技术难点的能力，而且你能独立开发一些比较复杂的功能模块，这个时候C++基本就没有太多能难到你的东西了！《》这本巨作也被我反复翻看，反复实践：曾经的算法小抄笔记：还记得当年为了更快的进步，跑去蹭研究生的课程，听到NP难问题不由感叹：算法世界太奇妙了。在我那个时代，线上资源并不丰富甚至是匮乏！今天各种论坛、公开课、学习资料非常丰富。最近指导师弟师妹应对秋招，我找了一些资料，美国有很多优秀的操作系统公开课，比如mit6.828、哈弗OS/161。这类课程都会给你提供一个mini os壳程序，相当于一个核心组件，剩下的你可以自由发挥。比如你可以设计线程管理、文件系统等等。相比只是看操作系统的书籍，这种学习方法的效率简直高100倍！国内也有一些顶尖高校也是采取类似的方式，比如清华ucore基于 Linux 0.11魔改版本国内说数据库就是mysql，这点要相信我！基础：调优：核心原理：架构与运维：对于零基础的童鞋：首先，学习基本的SQL语法。完成这个后，你就可以编写SQL语句了。这一步推荐：W3Schools的 。其次，学习数据库的主要功能和使用方法，比如用户相关或者权限相关等等。推荐两本书：1.《MySQL必知必会》 这本书讲的非常全，从基本概念，到查询到插入新建表，用户的管理，都有具体的例子，非常适合没有任何基础的同学来学习Mysql，总之这本书学习的方法就是：1、十分钟了解下数据库的基本概念 2、找到练手的数据库 3、对照着上面的内容去敲。本书里也有大量的内容是讲sql的，可以结合w3c的sql教程一起，有取舍地看。2.《》这本书是dba必看的。看完这些并且实践+思考之后，可以算入门了。接下来对于希望深入学习的童鞋：我推荐几本书（很多大神都这么推荐），《高性能MySQL(第3版)》、 《MySQL技术内幕(第4版)》，《MySQL技术内幕 InnoDB存储引擎》，《深入理解MySQL》还有Mysql的官网。读完这些东西，再加些丰富的经验，理论上来讲就具备DBA的水平了。十分推荐阅读上汇总的博客，特别是.我分三个阶段来介绍：1. 入门第一本书 建议看的《计算机网络基础》2.进阶然后第二本要看 《TCP/IP详解1:协议》，这个阶段需要多思考和动手网络在LINUX系统上发挥的最淋漓尽致，所以在学习的时候最好学习LINUX配合使用，学习LINUX,推荐《鸟哥的LINUX私房菜:基础篇》。学习网络过程中,要不断抓包分析等,自己能写些简单的应用来发包更是完美。抓包工具推荐:LINUX环境下用TCPDUMP,windows环境下用 wireshark。这个阶段写习完后,已经是个小高手了。。主要技能应该是 ： 对TCP,IP,DNS,icmp等协议应该都蛮熟了得了，dhcp/tftp/ftp等协议也应该都懂些，重点是要学会如何分析一个协议及LINUX系统的基本操作也差不多了。3.高手阶段这个阶段需要有一点的编程能力，指C/C++编程。主要学习的方向是协议的实现和协议的架构原理协议的实现方面， 主要学习底层协议(指传输层及以下)的实现， 这些协议都是在操作系统层面实现的，最好的教材是《TCP/IP详解:实现》。至于网络架构这块，可以学习《计算机网络》这本书。程序员这个行业不轻松，甚至可以说是很艰难，但大家只要做到：静下心来多看书、多看源码、多上机，一定能不断高速进步！"
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",在路上不言败,1.学好基础，吃一口成不了胖子    计算机涉及的内容很多，把基础学好，而不是在沙子上建大厦   急功近利，最后在上班的时候还得继续学基础，除非你想一辈子过摸摸鱼的方式   C语言不能丢，这是基础的基础，所有的理论都用他来描述的    学透数据结构，就会编程了，没学好这个，不算科班。    学好操作系统，写代码的很多方式，就会明白为啥这样，因为代码都跑在操作系统之上，需要符合操作系统的规矩，特别内存管理部分，对应的很明显   学好，才明白什么样的代码是高效的   学好离散数学，组合数学，等基础数学，才发现写代码的逻辑so easy。   学语言重要不？重要，但是不是关键   理论基础踏实了，不管什么语言，去看看 就好2.没有快钱，也没有快的学习方式   想赚快钱的，最后都头破血流   学习也一样，几天学一本书，那是不可能的   我导师说，C++ primer他看了17遍，现在是国内不多的C++委员会的委员之一   你去看看这本书有多厚   所以需要把基础学踏实，理解透彻3.贵在坚持   上大学，最大的好处就是，没有人管你，按照自己的兴趣去学。   别人刷短视频的时候，你在图书馆   别人在吃鸡的时候，你在吃代码   别人在花前月下，你在研究原理。   学习本来就是枯燥的，如果顶不住诱惑，那你的水平和大家都一样，四年过来一看，什么都没学会。编码功力，不是随着时间自动升级的，而是需要不停的寂寞的不停修炼。4.多调代码，多做笔记   看了书，还要把书上的例子在电脑上跑一次   有时候看着很简单的事情，在电脑上就是跑不成功   是不是怀疑电脑有问题？编译器有问题？   其实最终发现都是自己的问题   功力就是在一步一步试错，解决问题过程中提升的   最好经典的问题，还可以自己写成文档，保存下来   等你大学毕业的时候，你会发现这是非常珍贵的财富   甚至可以卖钱，你看我就有这些资料   不需要资料的大神，点个赞也是鼓励哈
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",atom-l,最好的学习路线就是学校安排的重点科目，例如数学和模电之类。可以理解刚刚接触这个专业的迷茫，但是不要因为迷茫而浮躁。这么说吧，你现在担心的是“都学了一年了，怎么还是只能做点这些小玩意？”，那么你想自己做出什么来呢？一个网页？一个手机APP？一个Web应用？那些你看到的都是表象，或者说就是个客户端而已，那些产品真正的价值在于背后所提供的服务，例如支付宝，其真正的难点和价值在于如何管理用户的资产，如何保证每一笔交易的完成，如何检测和排除错误……等等，这些可不是靠程序这一种岗位可以胜任的，更不是还在读书的你该做的。编程只是个工具，程序员只是一类工作的统称，你以后从事工作后，面对的是一个行业的需求，例如你在支付宝的淘宝业务的前端部门工作，和在美团外卖业务的服务端的部门工作，其需要的工具、技能和其做出来的产品，完全是不一样的东西。你当然会迷茫，你面对的是这么多行业所需要的各种各样的产品工具呀！你怎么可能学得完，你今天学完这个，搞不好业界明天就用新的工具了！所以在真正扎根于一个行业之前，不要那么着急着去学习如何用各种五花八门的工具（编程语言也是工具），这些工具日新月异，工具天天都在变，真要学学死你。真正不变的是什么呢？是计算机的原理，是计算的方法，是逻辑的堆叠和整理，是学校给你安排的课！学好英语、高数、现代、模电……等这些你以后进入行业的核心竞争力！那些网页标签语言、APP开发所用的IDE、花里胡哨的系统操作，学这些你以后实习期就能掌握的东西干嘛？这些“应用层”的高度是取决于你基础能力的！当然，还是要多写代码的，但是不要纠结于语言，写代码是为了培养逻辑的组织和表达，不然你知道怎么算，却不知道怎么安排计算机算，那就问题大了。硬要说用什么语言写好，我推荐C/C++，这两者就是个子集和超集的关系而已，它更贴近底层，并且语言特性丰富，很多现代语言的特性你都能在它身上找到影子，虽然学习曲线陡峭，但是相信我，搞定C之后，日后其他的语言你理解起来会快很多。多学学数学，多想想算法，多谢谢代码，好好上课，你以为你上班了还有精力搞线代？？就算有，机会早就给理论基础好比你适应性更强的人了，谁等你？加油吧，好好享受校园生活和来之不易的学习期。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",Rocky0429,这就和你问：我学多少知识能考上清北？这个鬼知道，当然我能理解题主提出这个问题的初衷，谁的大一都迷茫！毕竟漫无目的的学给人的感觉太不好了。题主能觉得上课进度太慢，还知道自己学，其实已经超过大多数人了！其实对于计算机专业来说，不管是对于编程，还是对于课程的学习，总而言之就是两部分：“理论”就是基础知识，比如我们在高中时候的课本知识，现在网络这么发达，我们可以通过各种的教学视频和书籍去获得我们的知识储备。当然作为各种知识载体的视频和书籍有好的，就有坏的，后面在说学习顺序的时候我会推荐一些我觉得比较好的学习视频和书籍。“实践”就是练习，比如学生时代的各种试卷各种习题册，像题主说的 oj 写题，参加 acm 都是练习的一个过程。很巧的是，我就是 acm 出身，可以说刷题改变了我的命运。大学之前，我没有接触过任何的编程，在大一上学期的尾巴，侥幸的通过选拔进入了学校的 ACM 。当时大一进去的大概有接近 100 人，通过上机选拔，我的选拔成绩大概是在同一批进去的下半部分。我记得特别清楚，第一天正式的集训也是寒假的第一天。在那之前我从来没有写过超过十几行的代码，而那一天，用 C 实现一个简单的功能，我写了接近一百多行，花了一天时间。而大多数人，在上午就完成了这个工作。下午的时间已经开始去学第二天的内容了。之后集训队的每天其实都是看起来很无聊，就是在按照规划的按照和算法的专题，学习理论，然后就是刷题刷题再刷题。之后一次次的上机比赛，一次次的淘汰。过程其实就是个坚持的过程，咬牙坚持的那种坚持。没有晚上没有周末没有寒暑假，这个过程持续了两年半，大大小小比赛百十场，刷过的题几千道。后面出去比赛第一次省赛就拿了金牌，可惜不是前三甲，第四名。再后来到全国邀请赛，亚洲区域赛，到 CCPC大学生程序设计竞赛，再到 EC-Final，再往后去了 985 读研，现在是一家公司的数据分析负责人。下面再来说题主所说的学习顺序，其实吧，。认真思考未来，这个动作越早做越好，毕竟目标导向。，因为虽然在学习内容上相差不大，但是重点努力的方向还是不同的！着重就业，那你的大一大二就玩命学，之后大三找机会进大厂实习，为你之后毕业找一个薪资炸的工作打下基础。玩命学不是瞎学，把握住两方面就好了：玩转一门编程语言，。最好能做点工程项目，如果有机会进实验室跟着老师或者有额外的机会做点东西都行。没有就自己去问，我不信个计算机专业没这个。学校的资源一定要用好。校招来说，计算机基础重要的就这么几门：与算法、、操作系统、、数据库这几门。，可能很多东西抽象懵懂，没事，你要你认真学了，认真琢磨了，你就超过 90% 的人了。着重考研的话，学习的内容和“着重就业”学习的差不多，但是就是不用玩命，平稳的学就好。编程语言的话，那 C 语言好好学一下。其余的计算机基础课程，还是那些，都好好学。考研看学校的，不同学校的计算机考研课程不同。有的考 408，有的只考数据结构算法，但这些都不是问题，你只要这些课都在你的学习之时学好，都不成问题。除了编程语言和计算机基础课程外，你想考研，还要把数学（高数、现代、概率论）、英语、政治学好，这些都要考。呃，政治的话就上课好好听就好了，反正到时候还是得背的，问题不大。还有就是，最好大一大二能参加个竞赛，拿个有点分量的奖，还有像什么奖学金啦这种能争就争，对考研复试有好处。如果你的目标是自己变得牛逼，那你大学四年可以这样。  计算机科班的同学，不出意外，进入编程世界的第一门的语言学的肯定是 C 语言了。其他很多人都觉得 C 语言入门难，不能像 Python 这种编程语言一样快速获得成就感。为啥现在还有这么多技术大佬建议学一下 C 语言呢？因为 现在常见的高级语言的底层几乎都是 C 语言实现的。在大学的时候搞 ACM，用过三年的 C 语言，自认为比较熟悉，给大家总结一下 C 语言的学习路线。C 语言的学习其实就就好了：这个阶段学习 C 语言的基础语法知识。目标是可以开发一些简单的控制台小程序。这个阶段学习 C 语言自带的，形成 C 语言的基本知识框架。目标是开发一些基本的应用程序。这个是实战阶段，要具备一定的综合性应用软件开发能力。目标是能够开发像贪吃蛇、图书管理系统、等项目。除了 C 语言以外，肯定还要学一门自己的主打语言，为了以后找工作啥的用。我选的是 Python，为了以后研究生想的。你选的时候要问问自己选这个主打编程语言要干嘛。通常一个人选择去学某个知识，就一定有学习这种知识或者是技能的诉求。如果你想学习 Python，可以参考下面这篇回答，都是心血。我们学习编程语言不是为了学它而学它，而是。基础打好了，以后学什么别的编程语言都快。不管你选择了哪门编程语言，都是先去学习它的基础语法。计算机基础一定要好好学，不管以后面试找工作还是保研、考研都很有用。重要的是下面这几门：数据结构经常与算法放在一起，在有些高校，会存在“数据结构”和“”这样两门课。这就造成很多同学懵圈，数据结构与算法有什么区别？甚至有些同学认为这就是一种。其实吧：数据结构与算法，不管你怎么想，一定要认真学！不管面试还是考研都是必考！计算机组成原理，即“计算机”“组成”的“原理”。我觉得它是所有计算机基础课程中最难学的一门课，整个课程的核心就是使用和触发器搭建一个可以运行的机器。无论你学习什么语言，都避免不了和操作系统打交道。所有语言的最后执行，都是靠操作系统。比如你学习 Java，用到多线程技术，实际上操作系统才是负责管理进程和线程的。不懂操作系统，你在未来学习编程语言的高级特性，涉及到线程进程调度，内存分配，或者是学习 Linux 相关的知识时，都会一头雾水。只有学会了操作系统，才能够更好地学习其他语言和技术。所以，。计算机网络的相关知识在工作时使用的频率较多的。学习计算机网络，你需要懂得Socket编程，知道TCP/IP网络模型，了解OSI，知道一个数据包是如何层层包装，再层层拆包，从客户端发送到服务端。但是计算机网络好学的多，因为计算机网络不抽象，在现实生活中，都能找的到例子。数据库就是存储数据的地方，但也不只是这么简单。学习数据库，不仅要懂得SQL语句，表设计结构这些基础部分，还要懂索引、慢查询优化，配置参数调优。再深入点儿还要学习SQL优化、备份与恢复、等等进阶内容。对于计算机专业来说，实战是非常重要的，因为这决定着你的生产力。说几个途径吧：大学期间含金量比较高的几个比赛：因为我是做 ACM的，数据结构与算法的学习，往往要伴随着“刷题”。我总结了一些，感兴趣的可以看下。如果是不想参加ACM，为了锻炼数据结构与算法得学习，我建议大家 就好。针对算法小白，我总结了一套，可以作为参考。实习是比较好的方式。最好能去大厂实习。一方面可以提前接触第一手的项目，有大佬带，学习经验，另一方面可以提前感受互联网公司的工作强度和工作氛围。这个我在数据结构与算法那提过，就不再过多表述。可以参加学校实验室的项目或者参与 GitHub 上比较好的开源项目，锻炼自己的能力，开拓自己的视野。以上就是我的经历和我的总结，希望能给你带来一点儿帮助。希望大家是真的有好好学习的打算，而不是三分钟热度，既然你选择了计算机专业，希望你能把握住机会，努努力，光明的未来在向你招手。  同样，相信下面这些也是你需要的：
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",LZG10086,什么叫指针没有搞懂，是完全不知道指针是什么还是没办法深入？没办法深入正常，毕竟c的指针实在是博大精深，有些东西还是挺复杂的，但是如果啥都不懂啥都不会用那就过分了。正常大学都是大一大二教一教语言啥的，之后全是程序设计，算法，还有啥乱七八糟的东西，啥都有，甚至可能1年写不上一回代码都有可能，但是伪代码肯定没少写。你真的很有魄力，还想着提高自己，我感觉已经烧成灰了，能混多少是多少。如果真的想提高自己，那就研究生出国吧，或者本科2+2出国学cs，我听我2+2同学说国内cs特别水，说好多东西都不教。（我自己在美国读cs，差点把自己读死）
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",程序员客栈,很多人可能都想着有人给自己安排一个大学四年的学习规划，但是每个人的学习规划都是因人而异的。即便我告诉你大一一个学期学习多少多少知识就够了，你学完了就知足了安心了吗？这样学可能会学得比那些漫无目的的同专业同学快，但你也只是达到了我觉得正常的水平罢了。不同水平的学校里，学生的学习能力都是不一样的，你只学习够正常量的编程知识是远远不够的，你无法与比你努力或者学校比你好的同龄人竞争。所以你要做的应该是根据你自身的情况，尽可能地学习，学无止境，这个学习的量永远没有最大值。在大学编程学习的过程中，我需要跟你强调几个很重要的点，无论你学习的量是多少，这些都是你必须做到的。最基本的算法和数据结构一定要做到熟练掌握，拿起来就能用。递归、排序、二分查找、搜索、哈希算法、、分治算法、回溯算法、动态规划、字符串匹配算法。数组、链表、栈、队列、、二叉树、堆、跳表、图、Trie 树；你可能看着这二十个点觉得很少，这就是你大意了，只要你展开了去学，怎么都得花你个一年半载，例如单单排序算法就又可以分为以下十种:当你学到需要某项技术时不用再回去翻书时，这样就算是把算法和数据结构吃透了，这时候，你就可以去无论什么样的学习都是需要理论和实践相结合的，而对于程序员来说，最好的实践就是做项目了。不过大一正是打基础的时候，你高数都会了吗？英语六级都过了吗？肯定还没有吧。以下实践如果没有打牢足够的基础，建议还是晚点再考虑。诸如Acm、编程大赛、机器人等，这些都是很好的实践机会只有参与真实商业项目的开发，才能加强你的社会活动能力，严肃你的认真学习态度，为以后专业实习和走上工作岗位打下坚实的基础在学习的过程中你可以多写写技术博客，写的内容可以是：高中时你是一科一本笔记本的吧？上了大学你也不应该丢弃做笔记的好习惯。不过作为一个计算机专业的学生，大学的笔记还手写就十分没有效率了，在博客上做学习笔记就是一个很好的方法。既然是写在博客上，就不要写得只有自己看得懂啦，整洁也是很重要的，干干净净的笔记谁不爱啊？不过更重要的还是长期坚持。不反思不总结，永远不会知道自己犯过什么错误，不知道自己的短处便不能加以改进。除此之外，总结反思还能从中积累一些重要的经验，用于指导自己未来的学习生活，形成自己的看法和见解。思考和总结可能很痛苦，也很耗费时间精力，但这是必须要做的事。如果你一直浮躁地向前走，但却不停下来思考总结自己，只会愈发盲目且疲惫。只有停顿和反思才能够让你更加了解自己，找到正确的前进方向。最后，给题主推荐一篇关于自学的文章：以及一个汇集各类行业榜单的网站。
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",IronmanJay,学好计算机，数学不是基础吗？大一高数的线性代数还不够占用时间吗？高赞什么c/c++，python，还是黑马什么的，这所有课我都有，但是没有一点用，培训班教的是面向工作的，还是先学好数学吧，而且又是前端，java的，选一个方向，你学不过来的，先确定好自己要做什么，然后学什么，总之，想学好计算机，大一先把时间用在数学上~
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",HelloWorld,如果单纯想以后好就业，Java是一个好的选择。如果你喜欢做服务器，c++，php是一个好的选择，（但是我想说c++挺难的，我现在的工作就是c++工程师）如果你想做游戏，c++，c#，lua，是一个好的选择。其实我上面说的都是瞎扯的，真正能帮助你的是解决问题的思路和方法，学好算法比什么都重要，语言仅仅是一项开发工具，不是说你学好了一门就能走遍天下，往往在工作中需要你掌握各种其他的你不擅长的语言，但是算法和解决问题的思路都是一样的。不要管自己学到什么程度，因为你在课本和课上学到的东西都只是冰山一角。如果你只是想学会一门语言，那网上找几个项目做一做就会了，但是学好一门语言，关键是算法，核心是这门语言的技术（这里的技术是指，这门语言可以实现什么样的功能，比如搭建服务器，实现服务器和客户端的交互，也就是网络编程等）建议就是：1，自个网上找研究，或者跟着教学视频学项目，碰到一个不懂的点就Google，然后继续。2，学习相关的技术加深理解，比如c++服务器，c#.net，（因为我是做游戏的，所以比较熟悉这方面，其他的不要太熟悉不多嘴），还有近些年很热门的python，你自个挑一门熟悉的或者感兴趣的去研究，总一款适合你3，多做题，培养自己的算法思维和编码习惯（这真的很重要，数据结构好好学），我推荐几个我经常上的：leetcode，...不过楼主既然现在才大一，你现在学的只是带你认识编码的世界而已，还是要好好想想以后要走什么路，这才是你最重要的问题，而不是问你应该到达什么程度，每个人在大一刚刚接触计算机的人，差距能有多大？大家都差不多，所以楼主将目光放长远一点，定好方向再决定前行ps：目前我觉得最有意思的语言就是python，如果你不知道怎么选的话，那我建议你学这个吧，玩过python的都知道这个有多香
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",沉默王二,。由于计算机专业是学校新开的专业，所以老师们也没有多少教学经验，于是我们第一学期就直接开搞 Java  这门编程语言了，教材用的是大名鼎鼎的《Java 编程思想》和不那么大名鼎鼎的《Java 开发宝典》。由于没有一丁点编程基础，所以我上课的时候完全听不懂，看书就像是看天书一般，心里慌得一逼，但也没什么好的办法。比题主的情况还要差。现在想想，真有点小庆幸，要是当时我学习成绩再好点，转了专业，Java 界从此就少了一个布道师，哈哈哈。作为“侥幸”走出来的“过来人”，借这个机会，给大家提 5 点个人建议吧，能捞一个是一个。上高中的时候，老师天天给我们这样灌输：“同学们，好好学呀，等你们上了大学就可以彻底放松了，那时候再也没有人管你们，想怎么浪随你们的便，现在必须得拼一拼。”实际情况呢，如果大学真的彻底放纵了，之前多少年的努力都可能化为乌有。之前就有几个同学私信给我倾诉心声，说自己大学没有好好学，毕业后找不到工作，又害怕进培训班被坑，后悔的要命。确实呀，大学同样需要自律。我们班就有这么三四个同学，比如说我提到的同学，他上大学的时候就有自己的规划，所以编程功底一直都很好。还有一个叫海洋的同学，现在在苏州，已经做到技术总监的位置。大学的时候，他经常把自己锁在机房，独自学习编程，还真的学得有模有样。我呢，经常是拿着笔记本电脑打单机游戏，水平菜得抠脚，日子过得一塌糊涂。这里叮嘱大家一句哈，大学千万不要贪图享乐，每个学期都应该给自己提前规划好，比如说要刷撒币算法题，要学习数据结构，要吃透 Java。要吃透 Java，可以。可以少参加一些社群，多泡泡图书馆，，比如说《》、《浪潮之巅》等等，还有各种黑皮书。我是大二下半学期才开始意识到危机的，因为当时汇编和计算机网络都挂科了。再这么下去，拿毕业证都成问题，这简直对我打击太大了。本来想着混一混，没想到差点混不下去~于是就下定决心，一定要补一下，不然没办法给父母交差。当时也没有很好的学习路线，网上的资源也没有现在这么丰富（可以说是极度匮乏），从网络上找了一份李兴华老师的讲课视频——用电驴下载的。李兴华老师是讲 Java 的，讲课特别激情，很带劲。刚刚去搜了一下，竟然还能搜得到李老师讲课的视频课！关键是，智能ABC输入法还在！一开始，还是挺难的，因为基础太差，很多听不懂。没办法，一遍听不懂，就再听一遍，前前后后一套视频看了有四五遍吧。当然了，编程是看不会的，也听不会的，只能练，我不仅照抄李老师的代码，自己还把谷歌拼音输入法给卸载了，切换成了智能 ABC。我现在打字仍然习惯只敲一个字或者两个字，不习惯长拼。给学弟学妹们一点看视频的小建议哈。先整体上过一遍老师在讲什么，然后遇到敲代码的时候一定要暂停，先自己去理解，理解不了就去背，然后脑子里有点东西的时候就下手去敲。卡壳的时候，就重复之前的动作，直到代码的完整逻辑全部都吸收到了脑子里，自己能在没有任何帮助的情况下把代码完整敲下来，这时候才能继续。我大概花了两个月的时间，才把李兴华的这份视频教程刷完，算是有了点编程基础，后面就尝试自己主动去修修改改，看是不是还能跑的通——有很多时候跑不通，一度怀疑自己是否适合编程，太惨了。但终究我没有放弃，吭哧吭哧地学，按照自己的节奏，一直持续到大三的时候。功夫不负有心人，也许是努力得到了老天的眷顾，我还是拿到了一家外企的实习 offer。我在实习的时候，有主动去看 C++ 方面的书，就是那本《C++ Primer》，第四版的，现在那本书以及习题册还在家里摆着，算是陪伴了快十年的时间了吧。没有丢掉它，因为有前辈给我说，以后有机会，还是要学习一下 C++ 的，这门编程语言实在是太经典了。前辈的话，让我对 C++ 充满了敬畏。但时间过去了这么多年，仍然没有机会和时间去学习 C++，因为一入 Java 深似海啊！前几天我画了一张思维导图，重新梳理了 Java 后端工程师的学习路线图，发现 Java 这个海是真的大呀~之前有同学问我，学 Java 太难了，要不要转前端，有一说一，经过这么多年的发展，其实前端要学习的东西也不少！我们一定要认清现实，学编程并非一朝一夕的事情。不能说 Java 难就转前端，前端难就转测试，到最后可能什么都没学好。大二下半学期认真补了一把 Java 后，虽然时间短，很多东西只学到了皮毛，比如说并发编程、Java 虚拟机，但经过这半年的刻苦努力，确实入门了。有了这个基础，实习的时候虽然做的都是比较简单的任务，但基本上能独立完成任务了，完不成的时候也能厚着脸皮向前辈们请教了。。你看，只要不放弃自己，就还是有机会翻身的。虽然我们学习的是计算机科学与技术，要学习计算机组成原理、操作系统、数据结构与算法，但大多数情况下，我们还是应该先把编程语言给学好了，只有这件事做好了，你才能在学习编程的这条道路上走得更远，因为编程语言学得好，就可以上手做练手项目，这些可以让你看到自己实打实的进步。所以大家在大一的时候尽量就确认好自己要学习哪一门编程语言，尽量不要来回切换，虽然编程思想是相通的，但语法上的切换仍然是需要花费时间和精力的。。如果真的很有天赋，在学完 C 语言后可以尝试实现一个自己的编程语言，可以参照下面这个项目路线，一个 1000 行左右代码的简单 Lisp：当然了，如果遇到困难，比如说 C 语言的指针实在是吃不透，也没关系的，完全可以直接跳过，开搞 Java。Java 语言的好处就不用我多吹了，我只说一点，Java 后端开发岗的薪资是真的挺香的，另外就是工作岗位是真的挺多的。卷并快乐着~选择 Java，就意味着工作岗位就稳了，这是最实际的考虑。：通俗易懂，风趣幽默，已更新到第 49 篇，喜欢的话可以 star 下，讲的真不错。学习从来无捷径，循序渐进登高峰。很长一段时间内，我都是一名偏应用型的选手，就是公司给我安排的任务，我就是能解决（哈哈，主要靠搜索引擎），但是要我讲理论知识，真的是抓瞎。一般来说，学编程的人分两种。一种从理论基础开始；一种从应用实战开始。大学科班一般走的是第一种，培训班出身或者自学的，一般走的是第二种。这两种学习方式我认为都没有问题，没有孰轻孰重。我虽然是科班，但老师们并没有多少教学经验，所以我基本上靠的是自学。每个人的潜力不同，所以学习的方法也不应该完全一样。但只要是奔着一个目的（把编程学好）去的，都没有捷径，必须得身经百战，才能成为一名合格的工程师。唯一我认为可以投机取巧的一点就是，趁早搞清楚自己要去哪一家公司，要应聘哪一个岗位。去招聘网站上，去公司主页上，去校园信息网上，找到岗位职责和技能清单。比如京东上的 Java 高级工程师。大学阶段，尽量不要把精力放到新技术和新框架上，不要说 RabbitMQ 很火，就去学 RabbitMQ，不要说 Kafka 很火，就去学 Kafka，而是要有的放矢。。学习，一定要选一门好的教程，无论是一本书，还是一个视频，还是在线的网课。选对了，就可以少走很多弯路。有一说一，如果我大一的时候就看的是老师的视频课程，而不是跟着学校老师走，也许我就不会在大一的时候对编程失去了兴趣。我的学习建议是，大一上半学期从 C 语言开始，大一下半学期从 Java 语言开始，而不是一上来就把重心放到操作系统、计算机网络、这些课上，因为如果兴趣没有培养起来的话，可能就直接被劝退了。计算机专业的课，并没有想象中那么简单。我们需要先培养兴趣，比如说学了 C 语言，学了 Java 语言，做个小游戏，做个计算器，做个聊天室、做个在线商城、做个图书管理系统；等有了一定的编程基础后，大二的时候，就可以配合数据结构与算法、计算机组成原理这些基础课开始学，把自己打造成一名“六边形”战士。从大一开始，就按照招聘要求上的来，等到校招的时候，基本上你就超过了 95% 以上的同学了。要记住：不付出比他人更努力的代价，是不可能脱颖而出的。顺势而为，跟着学习欲望走，不要轻易中断，一旦你进入沉浸式的学习状态中，就可以在很短的时间内取得令人刮目相看的成绩。 呀，希望能对学弟学妹们一些帮助，笔芯~
大一一个学期学多少编程算正常?,"['计科的学生，大一上学期快结束了，只会用c\\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 ', '学校的上课进度太慢了，感觉就是漫无目的自己学。', '大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。']",匿名用户,这个问题下面一整套全都是培养码农Java狗的教程，你们这些培训机构已经没良心到了现在这种程度了吗。作为一个CS学生，大一的重中之重是给之后的学习打好基础，熟练C/C++自然不在话下。如果不想以C/C++作为自己的工具语言，也完全没必要跟C++ primer之类的书死磕（比如现在宇宙第一语言python，知乎上很有名的Racket，撸前端常用的Js，都是不错的选择，不在于多而在于精）。大一，首先应该学习计算机科学的基础知识，比如微积分，离散数学，集合论；可以自己开始看算法导论，《》，等等偏向原理和思维性质的书。专业方面，数据结构和算法是大一的课程内容，也就是你现在最应该关心的知识，至于如何运用，那是很久很久以后的事情。课业之外，多背单词、多学英语，搞好身体，早睡早起。千万别听那些培训机构说的，否则你将变成一个张口高并发闭口高访问，左手西瓜书右手动物园但是一行靠谱代码都写不出来的傻子，然后去和千千万万这样的傻子竞争一个月薪5000元的007的岗位。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],有木桑,你说的这种玩意叫“乙方”，你只要端个杯子开个会，说“我要一个APP，大概和xxx有关，具体有哪些东西我也不知道，反正你们先做一版给我看看”然后“乙方”就会根据中文想法自动编程了，非常贴心。Debug也简单，你只要端个杯子开个会，说“我觉得这儿要大气一点”“我觉得这儿应该这样”然后“乙方”就会根据中文想法自动修改了，非常好用。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],皮皮关,这个问题在思维上跳跃了一层。为什么一定要“”呢？如果有写程序的需求，那么程序运行肯定有一个目的。既然如此，只需要用中文说出想法，然后直接转化成你的目的，就可以了。没有必要编程啊~~所以……不如等小爱同学、天猫精灵之类的，能帮我们直接做事比较靠谱。——“天狗精灵，帮我写个抠图程序。”——“请问程序的目的是什么？”——“帮我把这个照片里的人抠出来。”——“稍等……”——“您的图已经扣好了。”我感觉这样才对【机智】
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],茶哥反鸡娃,有。比如你是。你就可以开会时候一句话，我要……。然后就会转换成程序了。不行怎么办？贵厂（以及同行）规范回答：能实现你就干， 不能实现我换个可以的人来。忽然觉得软件行业很有点《甲方乙方》的“好梦天天游”的意思。实施不力项目经理示意图（划掉）。不对！题目说的不是人工，是自动！实施办法参考老笑话。你有啥想法不重要，得看你是谁。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],程序猿旺旺,我说句大实话：就比如说你这个问题，想法就是想法，不存在中文想法和日文想法这种区别。中文只是一种表达工具，想法只有在表达出来的时候才会和中文扯上关系。另外，编程是一个动词，这里应该使用程序一词。所以，这个问题应该是接下来说一说为什么：本来中文就比较复杂，又碰上很多人用词不讲究，表达不恰当。这些东西要真转换成电脑程序，出了 bug 还真没法排查是哪里的问题，计算机和程序员（这里可能叫表达员更合适）互相踢皮球，都怪对方没有表达清楚。一个好消息是，虽然目前没有办法把用中文描述的想法转换成电脑的程序，但是有办法把用中文描述的想法转换成电脑的程序。这个办法就是，你可以找一个程序员，你用中文描述你的想法，他来帮你实现。这种人我们通常称之为产品经理，和程序员有不共戴天之仇。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],P小二,看了一圈答案，好像没有一个人答在点上。NL2CODE（自然语言转代码）这个想法一直都有，而且发展迅速。我们先来看几个GPT-3的例子：十秒生成一个Google首页​快速设计原型自然语言到Shell命令互译帮忙写代码你去搜NL2CODE的论文其实不算少，包括NL2SQL等子领域也非常多。所以把想法直接转换成代码这个想法，其实很多人都想过，也一直都在研究，最近应该算是高峰了。但是这种工具出来并不会消灭程序猿，而会成为程序猿强有力的辅助工具，具体可以阅读我关于GPT-3的文章。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],invalid s,啊这...题主学过钢琴没有？好的。你从来没练过钢琴，对吧？不准偷偷练琴，看见这本五线谱了吗？看完它，然后马上到维也纳音乐会上，把他们的钢琴师赶下台，弹段有专业水准的出来，震惊震惊那帮子傻帽老外。不用高，风头盖过朗朗就行。干嘛挠头？嫌弃太简单了吗？好的。把五线谱交回来，搜段弹钢琴的视频，什么海上钢琴师什么钢琴广告，都行。看20分钟，打听打听朗朗在哪演出，挑战他。你看，多简单点事。都没要你听见“弹钢琴”仨字马上就打败朗朗。啊？你就是朗朗？那咱换一个简单的。1、听说过手动档吗？好的，这是辆手扶拖拉机，你开着它，到赛场把的记录破了。2、这是本小学生大字字帖。看见了吗？去，你也写本字帖，把颜筋柳骨融为一炉，找个书法家协会，卖他个小目标出来。别缩啊。来个真正简单的，不骗你。诺，你看书名，21天精通c++。都敢起这个名字了，总假不了吧？咱也不提21天了。你看两年，帮华为把鸿蒙搞出来。只要你把这事办成了，第二天我就把你要的给你弄出来。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],DJ Hitori,抖个机灵。假设存在一个程序A可以把输入的想法转换成一个程序。我向A输入这样一个想法：“设计一个程序B，B能够对任意的输入程序C判断其是否停机”。然后A给我输出一个程序B，这和“没有通用解法”的结论矛盾。所以不存在这样的程序A。假设存在一个程序A'可以判断输入的想法是否可以解决；如果可以解决则转换成一个程序，不能解决则输出“不能解决”。于是A'对于上述想法会输出“不能解决”。我向A'输入一个新的想法：“这是程序C，设计一个程序C'在有限时间内完成和C一样的操作”。如果C能停机，那么A'会输出一个程序C'；如果C不能停机，那么A'会输出“不能解决”。也就是说我利用A'能够判断C能否停机，又由于C的一般性，A'是一个停机问题的通用解法，矛盾。所以不存在这样的程序A'。更新：随手抖个机灵没想到获得了可观的阅读量，看来以后答题还是得找那些有点人气的问题。补充几点。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],汇智动力IT学校,不知道日常生活中有没有像本妹纸一样的人——过于感性。感性到什么程度？我会把身边任何的“死物”都能当成是有血有肉有灵魂的个体存在，认为他们有感情、有情绪、有想法、甚至应该主动来理解我的处境~~~别急，我举个例子就好：比如某一天，我早上洗漱完要出门上班，还没走几步就被脚下的一个凳子绊了一脚；于是，我就很生气，狠狠地踹了一脚凳子，踹的很远很远，狠狠地发泄了一通；这时候在卧室的妈妈听到了声响，以为发生了什么事，一脸懵逼；得知事情原委之后，妈妈对我说：它是死的，你是活的，你至于跟它生气计较吗？OK，这里应该能懂我要说什么了吧？？？但作为电脑而言，它就是个“死物”，它不会像男女朋友那样，你的一举一动都会牵动着对方的神经，并由此判断你的喜怒哀乐、主动接收你的行为信号...想要跟电脑直接进行沟通，方式也只有通过计算机语言——编程语言或运行程序；之前在计算机发展史介绍中，汇智妹有介绍过编程语言发展史，从物理计算机诞生到人机交互，时至今日已经诞生了很多语言来实现人和机器的交流互动（感兴趣的小伙伴查看下面这条视频即可）所以这里，对于题主的这个问题我们可以这样来理解：——回想下，我们在念汉字的过程中，早已养成了不自觉附加思索的习惯，当别人念完一段汉字之后我们对这句话的理解也就自然而然的完成了；可在面对电脑计算机时则不然，首先需要把中文转换成英文词汇，而后通过对英文单词所组成的语句段落来实现计算机语言转换，进而触发应用程序来执行对应的指令命令。（当然了，在国外或许可以直接跳过中文英译的环节；而至于为什么编程不能用中文汉字来代替英文，我也想问为什么，而且想了很久很久...）——相较上一种情况，我们这里不妨引入一个不恰当的案例：（当然也可以是残障人士：重度渐冻症患者，不能讲话、四肢无法动弹等极端情况）在这种情况下，只能靠眼睛/局部肌肉的收缩和扩张来供仪器识别并作出反应，拿霍金先生来说：这位伟大的科学家在他21岁时就患上了“”，全身处于瘫痪状态不能说话，手指只有三根手指可以活动，轮椅是他的全部。霍金患病后，轮椅一开始只是他的代步工具，随着病情的恶化，轮椅也开始不断的升级。他说话模糊的时候，为了让他能与人交流，工作人员就在轮椅装了一台电脑和显示器，植入了一个叫“平等器”的程序。他可以依靠能活动的三根手指给电脑确认指令就能做到输入。到了2008年，霍金的手指已经虚弱到按不动确认键，不过脸部肌肉仍然可以活动，所以工作人员又为其开发了全新“Cheek Switch”装置到霍金的眼镜之上。该装置可以用红外检测脸颊肌肉活动，当霍金面部肌肉收缩时，传感器就会接收到信号，信号反馈到电脑后，来选定目标字母。相比之前的用三根手指打字，脸部肌肉打字的方式在效率上无疑会更低，所以工作人员再次对输入法进行升级，联合Swift Key公司采集霍金大量文档，分析词频和上下文关联，就像现在的手机智能输入法，当输入“肯德”时，输入法会自动联想出“基”。不过这套输入法随着霍金在2011年病情的再度恶化，不得不面临全新升级。这一次，技术团队还是针对霍金的轮椅下功夫，安装了一套可供残障人士使用的交互系统（简称ACAT），可以让霍金的任何脸部动作进行操作，打字效率提高了1倍。后来该套设备还加入了一键静音、快速搜索、多任务切换等功能，使得日常处理任务的效率提高了10倍。再后来，技术团队又给轮椅装了一套交互系统，所有的脸部动作都可以操作，打字的效率能提升一倍。还有多功能感应系统等——轮椅上还加装了12英寸屏幕，可以完成写稿，收发邮件，听电话。同时轮椅上还有一个万能遥控器，通过红外可以操控霍金办公室和家中的电视机、音响、灯光、开关门等任务。多功能感应系统，搭载了各种传感器，还能实时检测霍金的健康状态，记录轮椅的使用状况。不夸张地说，这应该也是世上最“”的智能机器设备了吧？？？可即便如此，仍然无法实现题主所说的“把想法直接转换成编程程序”的理想状态，看起来更像是。目前我们接触到的人工智能，更多的是基于数据库/词频、词库等历史操作习惯和应用场景来推算、预测下一步动作，节省更多冗杂的思考和操作时间；这也是众多长假所声称的学习能力和所谓算力，我能承接多少大的需求、并在多短的时间内做出反应...听上去更像是应用层面的表征；而对于底层逻辑架构方面的革新，还是任重而道远——毕竟看似简单的运营操作背后，通常都是数不清的各类编程代码和机器语言；从软件开发到硬件配套，系统性的智能工程绝非一朝一夕可以轻松实现。因为在理论上，从脑电波/电信号接收（如何捕捉信号算是一大难点）、到指令生成以及对应的编译程序运行（有点像极致化的模块编程概念），完全是可行的；无非是什么时候我们才能将个人想法/信号，像目前的语音/声波信号转机器语言那样，让机器变得更像一个“活物”罢了，能跟我们对正常的高效沟通罢了。（类似IOS系统下的siri、、百度小度同学那样）可以想象，到那时也就自然而然地到来了吧？嗯，总之，还是莫名有点小小期待了呢，哈哈哈~但愿有生之年可以如愿看到那一刻的到来...我是汇智妹，一枚程序员萌妹纸，每天除分享IT技术干货之外，也会聊聊IT圈热议的那些事儿；公号【汇智动力学院】——职场技能提升、就业加薪升职、以及有对转行IT感兴趣的小伙伴，记得关注一波哟~比心❤
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],卜寒兮,现在已经有了，前不久 Anthropic 发布的 基本上已经做到了题主说的这种情况——把想法直接转换为应用程序。简单说，让 Artifacts 厉害的地方在于它支持 （一个 JavaScript 库），你问 React 是什么，其实我也不太懂，然而这都无所谓，你可以完全不用懂这些知识，只要知道支持了 React 后，它可以把 Claude 生成的代码构建成一个有界面、可直接交互的网页程序就行，然后你就可以做很多有意思的事情了。假设我现在需要出一些数学习题，考查低年级学生对四则运算的掌握情况，很显然手动去写的话效率会很低；如果能编写一个程序，自动完成习题的生成，那就方便和灵活多了。于是我把这个任务交给 Claude，让他做一个习题生成器，使用如下 prompt：Claude 给出的回答如下：可以看到，我只是提出了要求，并没有给出任何实现方法，而 Claude 会自动分析需求，编写程序实现完整的功能，甚至还会考虑到我没有考虑的方面，比如还给每个题自动加上了正确答案。于是我就轻松得到了一个“习题生成器 v1.0”，整个过程用不到 1 分钟。如果对这个初级版本不满意，那么直接在对话框中告诉它，让它继续修改即可，比如“”然后就得到改进后的版本“习题生成器 v1.1”。还可以继续改进，包括程序功能和样式设计等等，直到满意为止，中间如果出现 bug，也只需要把错误截图给它，让它自己修改。可以想一下，在没有这种 AI 工具的时候，对于一个不懂编程的人来说，完成类似上面这个工作要有多高的门槛，以及需要花费多少时间和精力。而现在，你根本不用懂任何编程语言，完全通过自然语言交流，就能让 AI 把这事干了，几乎没有任何门槛AI 能给很多人带来实际帮助和效率的提升，把不可能变为可能。类似的例子其实非常多，过去这一年多大家应该或多或少都接触过一些 AI 工具，只是可能并没有深度使用。以我个人的观察和经验，绝大多数人都是没找对正确的用法，这个东西还是很讲究契合度的，因为 AI 工具千千万，只有跟自己工作场景匹配的才是有用的。这里我非常推荐大家去听一下AI智能办公，这个课提供了大量如何借助 AI 工具提高办公效率的案例，以及具体的操作方法，比如高效制作汇报 PPT、总结文档、处理和分析表格数据，以及 AI 编辑和图像创作等等，反正几乎覆盖了所有的办公场景。老师分享的都是非常实用的且可实操的技巧，如果你缺少 AI 工具使用经验，别错过这个机会，听了一定会有启发。现在通过下面的入口就能参加⬇️然后记得上完课可以找助教领 4 套 AI 资料包，包括 之类的，即领即用。Claude 的 Artifacts 功能的玩法远不止于上面的例子。更多例子。创建一个简易的  游戏。给游戏添加更多功能：Claude 本身支持上传文档的功能，可以用于辅助阅读，总结文档或提取关键信息。结合 Artifacts 可以创建一个交互式的文档阅读器，增加可读性，更有助于快速浏览文档的关键内容。社区上还有国外网友开发出的更多的花式用法。创建一个 web 应用，调用电脑的摄像头，使用 .js 和 COCO-SSD 模型实现实时目标检测。生成的代码保存为 HTML 文件后可以本地浏览器运行，添加摄像头访问权限，就可以调取摄像头画面，并实时检测画面中的物体。类似的应用还有许多，比如模拟太阳系星体运动，比如数据分析和可视化，等等。实现上面这些东西对于专业的开发者或程序员来说可能小菜一碟，但是人工智能也给不懂计算机和编程的人一个能轻松创建应用程序的机会，不用学计算机语言、不用配置编程环境、也不用写代码，只要会说话就行了，甚至当你说不清楚时，画图也是可以的（比如一个程序 UI 的草图）。还有什么比这更“”的了。总的来说，我觉得未来这类 AI 功能的潜力还是非常大的，而且现在 AI 发展速度很快，现在题目问的还是把想法转换成程序，但是也许未来出现之后，连电脑程序也不需要了，甚至连电脑也不需要了。对未来的想象，可以尽情大胆一些。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],云非非,中文想法------>程序 ❌中文想法+钱  ------>程序✅
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],萤火一号,这是个测试行业的问题，讨论的是黑盒与白盒的关系。什么是黑盒？我想吃炒饭-点个外卖-炒饭到了。店家如何炒菜、小哥如何送菜，你不需要关心，你只要在正确地输入（点单）后等待输出（取餐）就可以了。什么是白盒？我想吃炒饭-买菜、蒸饭、切菜、炒菜、出锅。每个细节你都要亲自把控输入和输出。但其实这仍然不够白盒，因为种菜的过程农家已经帮你完成了，这个过程是黑盒的，你只管买就行了。天然气的采集、输送也不需要你关心。这叫“封装”。把一些步骤封装成一个简单的操作，具体的步骤由机器或其他人来实现。我们的现代生活就是建立在层层封装的基础上的。简单的一个炒菜，背后经过封装的操作涵盖了各行各业的方方面面，铸铁、挖掘、管道铺设、农肥、化工、伐木、冷链...而这里边每一个步骤都可以再细分出更多的被封装的操作。所以，即使不涉及编程，你的一个中文想法，也不可能有一个机器能帮你直接转换成现实。你必须提供一定的输入，才能得到输出。如果有一台能够自动炒菜的机器，你必须要输入原材料它才能帮你炒出来。原材料是输出的前提条件。到了编程领域，需要你输入的“原材料”，就是一个个前置程序。而这些前置程序是“中文想法”的层层分解。比如简单的一个想法“画一个圆”，够简单吧？但它缺乏必要的输入：圆的直径？线宽？是否填充颜色？是什么颜色？是否是半透明的？是圆盘还是圆球？于是乎你需要定义这些参数，也就是输入前置条件，才能得到输出。这个过程简单到无法封装，因为每一个操作都是原子化的，也就是不可分解的。如果换成一个复杂点的例子：画一个轮胎。它就可以分解成诸多操作，每一个都需要人工定义无数的输入、输出。例如：你可以发现，每一个信息都不是靠机器自己就能完成的，例如轮胎的尺寸问题，程序如果想要知道什么尺寸才是合适的（或者你想要的），它需要你输入如下信息：如果你期望上述问题能够靠程序自动完成，你需要赋予程序足够的作为前置，例如摩擦力、材料弹性、形变能力、热性能、冷性能....你会发现，如果你真的不作任何输入，程序将无从下手，除非它是全知全能的神。而这还只是“画一个轮胎”这么简单的想法带来的问题。如果你想的是“生成一辆汽车”，这背后涉及的知识将涉及人类整个现代工业和基础科学，包括数学、物理学、化学、生物学乃至美学、文学...所以，程序做不到完全黑盒，只能由人来白盒操作其中的诸多细节，才能环环相套完成一个个输入和输出，得到最终的结果。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],马书卿,我不知道你说的自动交易系统具体指什么，但是你可以参考下面的例子。如果有一个超级ai，能完全理解中文，那么，我：我想要一个选课系统。AI：好的，什么是选课系统？我：就是很简单的，有个课表，学生可以在上面选选修课。AI：好的，什么是课表？什么是选？什么是选修课？我：课表就是一个表格，上面列了课程名称，老师，课时，学分，上课时间。选。就是选择，我选择了这门课，就会把我登记上去，然后这门课的剩余名额就会少一个，然后老师可以看到有谁选择了这门课。选修课就是一种课程。AI：好的，什么是课程？什么是名称？什么是老师？什么是课时？什么是学分？什么是上课？什么是登记？什么是名额？什么……我：去死吧，我不要了…编程其实就是尝试告计算机，你要帮我做什么。由于计算机的内置逻辑只有一些基础指令，而这些基础指令建立在上。那么一个很简单的程序，往往也需要大量的前期，与你想要的业务逻辑无关的准备工作，比如回答电脑上文那些问题。这个跟你用什么语言编程没关系。就像你要给一个三岁小孩解释你的自动交易系统，如何才能让他明白你要做什么。可能无论你用中文还是你家乡的方言，都很难。好在现在有操作系统，编程框架，程序引擎，中间件软件等等，帮助程序员做了大部分基础功能的定义和实现，使得上文的十万个为什么大幅减少，但是涉及到具体的问题，还是比一般非程序员想象的要复杂的多。你可能从来没想过，有人会不知道“课”是什么，“选”是什么，但是计算机真的不知道，要告诉他才行。这个真的跟中文不中文，没有任何关系。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],I老蔡,"从题主的描述来看, 大概率是从没有接触过编程的. 当然, 这不是什么问题, 毕竟编程也不是什么普及的技能. 很多人不了解也是很正常的. 所以, 就打一个比方来解释一下.先要了解一个概念: ""编程""是一个动作, 所以题主的问题""？"" 就相当于把人的想法转化成电脑的动作.  这里把不相关的""""给去掉. 因为在这里是在是一个毫无必要并且还容易引发争论的""热点词"".比方正式开始:编程使用的各种开发语言, 其实就是一种工具. 和我们用到的螺丝刀钳子扳手一样.所以, 编程这个动作本身, 就是使用工具的行为. 而无论你是做机械加工也好, 木工也罢, 乃至是艺术创作, 工具都只是让你的""思想""成为""作品""的一个媒介和助力. 其本身没有自动把原料变成成品的能力. 那么你可能要说了: 自动生产流水线不就是么, 加工中心不就是么, 这头原料进去, 那头成品就出来了.   但是你想一想为什么流水线和加工中心会把原料""正好""变成需要的成品呢?  还是得有一个操作的过程, 需要人工去安排去调试.   和原始的钳子扳手相比, 只不过是更加高级的工具而已.  而和钳子扳手那些工具相比, 流水线和加工中心的设置和调试需要更高级的知识而已. 所以, 从钳子扳手螺丝刀=>流水线,自动加工中心, 变化的是技能要求.  工具依然是工具,只是提高了效率. 接下来再深入一些, 抛开工具的差异, 解决问题的""思路""是可以抽象出来的. 比如说你要吃一包方便面, 那就需要以下的步骤: 找个碗,打开方便面包装, 把面和调料放进碗里, 放进开水, 加热, 吃这就是你平时吃方便面这个""想法""到实现的具体过程.  只不过因为你的身体太过于熟悉这种流程, 不需要太多大脑的思考就能驱动你的手去完成而已. 但是当你要从""想法""变成""程序""的话, 这些流程又该如何体现出来呢? 就好比你想""我要吃方便面"", 电脑驱动某个外部设备把整包方便面塞到你嘴里. OK, 完全符合你的""想法"".  错的只是你.然后你就会想到""要去掉包装, 要放水, 要加热......""最后你发现, 这TM不就是自己在编程么. 你所需要的只不过是一个脑波输入法而已..."
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],小昭,因为中文的想法往往和程序的编程在精细程度上不是一个量级的。很多人有简单的想法：做个外卖软件，要有订餐功能、付费功能、能追踪订单实时状态、有餐厅/外卖员评价体系等…是不是觉得每个功能似乎都简单，至少想法形容起来费不了什么事？然而实际上用编程实现起来，连显示餐厅时用的字体，图片的界面范围等细节都要用代码明确写出来。举个不恰当的例子，当你想造人时，你的中文想法是人要有各个器官，而编程时的代码却要完成每个细胞的设计与实现。如果你的想法只有器官级，目前还不够智能的电脑还不足以帮你脑补出各个细胞的具体实现。再进一步，假设你是个细致的人，想法非常细致具体，对显示餐厅时用的字体种类大小，甚至各种界面的图片边界布局都有明确的构思。从器官级的想法细化到了细胞级的想法。那么问题来了，用中文如此细致地描述一个程序的具体实现方式，要写多少行多少页？到了这时候你会发现，写代码比写中文想法用的行数更少。因为编程语言是由英文关键字+数学/逻辑符号组合出来的、专门用于描述操作流程语言，描述操作流程时比中文这类自然语言更简单。相同的道理，描述一个数学问题，用数学符号形式化地写出问题的表达式可能只要两三行，但用中文或英文描述就得写一大段（还不一定写得清楚、无歧义）。所以既然编程语言可以更清楚简单，为什么要用中文去描述一个程序的实现？
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],林阳,您就别整这个东西了。您就用中文想法，告诉身边的一个打工人。如果不同的打工人总能完成的比较好。那你已经可以去当中层管理人员了。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],知乎用户CuBaib,有的你只需要使用一种叫做程序员的编译器就好了。你输入自然语言，他输出字节码文件。。。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],沈阳,因为很多人高中没毕业，搞不懂啥叫集合你别不服，举个例子，你说开发个系统，用户使用手机号登录，后台发验证码给他，验证码正确允许登录。光这一句话就是漏洞百出，高中的集合都没学好， 仅仅指出了验证码正确允许登录，那验证码错误呢，不给登陆，你以为这是补集，逻辑完备了？实际上，你后台发不出验证码呢？是否临时用密码登录？你考虑了吗？你考虑的就已经不完整了，AI就不可能给你写出无bug的程序这个不是AI能力的问题，是你自身的问题
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],知乎用户4mJFmm,是可以的，例如人工智能。自己当老板，说想要个色彩斑斓的黑，底下一堆人工帮你智能的实现即可。这叫生物神经网络编程。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],知乎用户GPJ5M6,这个可以用熵理论来解释：为什么把一堆积木往桌上一扔，它们不可能排列成一座大楼的模型。但是把用积木做成的模型用手一推，就变成了一堆积木？因为一堆积木具有更大的不确定性。也就是说，把积木随手一扔，它有更多的排列的可能性。而你恰好希望出现的那一种出现的概率几乎为0。一样的道理，想法是模糊的，符合你初步的想法，但是实现出来你发现不是你要的那种的程序有很多，正好是你要的那种，基本不可能出现。所以就像需要人工整理积木一样，需要编写程序，降低熵。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],jannchie见齐,目前的流程是，老板把想法告诉程序员，程序员再写出程序。你想要直接干掉程序员这一步，也就是希望电脑能够完美替代程序员。既然电脑能替代程序员这一工种，意味着他能写出任何一种程序，意味着它能做任何事。你说帮我写一个能够做出世界上所有美食的机器人程序，那么所有厨师就失业了。以此类推你可以干掉全人类。这样的电脑，用五个字来形容：强人工智能。用两个字来形容：上帝。也许人能够造出上帝，但以目前的技术水平做不出来。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],我是祝大侠,因为程序语言不同于普通的人类语言，无法直接转化。程序语言对描述内容的准确性要求非常高，但是人话不是。想达到你想要求的这种我说人话，系统自动编程，那只能是系统的智商完全碾压人类以后才可能会有。如果这个系统足够聪明，那么这个事情，找个活人可能1分钟交代清楚就行，然而系统就会问你无数的问题：1--是男人还是女人？秃顶的让进吗？离婚的让进吗？肥胖的让进吗？牵狗的让进吗？1-1--牵狗的男人让进吗？秃顶的女人让进吗？离婚的老奶奶让进吗？肥胖的小学生让进吗？牵狗的马云让进吗？如果你说这不是抬杠吗？那么反过来，如果你不定义什么叫客人，那么系统就认为明天能自己走过门禁的东西，都可以进来。包括贼，野猫，野狗。所以人和人说话方便的地方在于，正常情况下，双方都有各自对应的知识储备。如果不满足这一条，你就发现鸡同鸭讲的事情屡屡发生。然后，你还特意要求把中文想法直接转换成电脑程序，我个人看法，某些成年国人能听懂中文句子，可能只有天顶星人的电脑能理解。如：
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],穷码农,这问题问的...不仅仅没有把中文想法直接转换成电脑程序的编程。也没有把英文想法直接转换成电脑程序的编程。....程序只能用固定的语法和固定的模式还有关键字组合在一起，因为计算机并不能处理ambiguity。编程最重要的概念之一叫抽象，abstraction，还有编程需要没有二义性，就是上面提到的，不能处理ambiguity。我感觉这样的提问就有点太天马行空了，写代码不是写科幻小说。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],向阳,我也想啊。...。。，大不了重新训练个GPT-3 CN，或者前面套个变形金刚（逃逃逃）。但是它能有多nb呢？能像个人一样，问你这问你那来补充细节吗？不能。那么我们，这样的东西，有什么价值？。我们给它的是中文描述的思路了，而不是一个想法。一个想法，光了，更何况面对的是一个不知道怎么对它说的铁疙瘩，浪这个铁疙瘩很高级能理解人的想法（目前还是几乎认为不可能的），但是语文阅读题的文章作者看不懂语文阅读题，鬼知道这个疙瘩咋想的，做出来偏差有多大。其次，代码是要测试的...而...
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],Hi峰叔,
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],少个分号,自然语言编程的探索一直都有，从理论上不太能实现，除非自然语言处理和计算机理论有重大突破。根据图灵机模型，CPU 执行的指令本质都是全加器，也就是加法，加法是通过布尔运算实现的。通过一些数学处理，才能得到各种指令，也就是汇编。汇编本质上是布尔逻辑，也就是严格的语义的形式语言。高级语言的三个基本元素赋值、循环和跳转，本质上也是形式语言，只不过是机器和人类之前的一个平衡。由编译器翻译成机器码（布尔运算）这也是为什么所有的操作都可以由位运算完成而且很高效。计算机语言越靠近自然语言，编译器需要做的事就越多。但是不能使用直接做到用自然语言编程，因为自然语言是不确定的（你老板无法给你分配一个明确的任务，但是你可以给计算机发出一个明确的指令）所以计算机语言可以无限逼近，但是无法等同自然语言。这也是这么多年来科学家试图用自然语言的语法规则实现翻译和识别，但是失败了，目前是通过概率统计做到的。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],CodeFun,哈哈哈，这想法，老程序猿了，实际上，现在有一种更便捷的方法上下载其插件，在sketch中打开插件的面板选择上传此设计稿，然后就可以去官网我们的项目里查看。很惊喜，CodeFun 这个还原的比上面两者都要好，和设计稿看起来几乎100%。完美的识别出了我们期待的布局， 效果如图： 看代码可以看到，部分公共的样式都被翻译到了这个class里面，几个box都共享上了，唯独被单独弄成了，造成了一些冗余的css代码，这么复杂的识别都做到了，这里是不是个bug呢？css  597 + 81 = 678 行（主代码+公共代码），比的行和的行分别减少了47%和。虽然类名还是有些不语义化，但是已经是去除了写死的宽高，同类型进行了合并抽取出了公共代码。CodeFun 能自动识别出下面三个结构相似的订单模块，并进行分组，将三个块外面包了一个wrapper，符合我们开发人员日常写代码的习惯因为已经识别出了下面三个结构相似的模块，于是vue代码会自动以的方式展现。如果想要抽离数据，可以通过上方的数据绑定自定义（一般我们会绑定为后端传过来的字段名）。虽然说对于类名上，还是需要自己进行修改（不过对于一些维护不需要这么频繁的页面，也可以不进行修改类名），但是对于以上我列出的 5 点都已经完美地进行解析了。CodeFun也是通过AI模型来进行智能化训练，但训练的效果比imgcook更加强大。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],摸鱼的BUG,看到这个问题，我感觉像刚认识我媳妇时，我媳妇问我的问题一样。然后我也想过这个问题。不知道你是否经常在某音上看到那些外国人考普通话几级的时候，人有时候都理解不了的语句，你让计算机去理解。计算机要明确输入，输出。输入都不明确，计算机不是蒙了。又想起了我导师的一句话，你千万不要以为你理解不了的东西交给计算机做！牵涉到的技术，语音识别？中文的命名实体识别？NLP等知识。现在NLP处理中文还有待提高。如果哪天题主开发出来了，我想我和我的同行也就失业了。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],远行人,"Text2SQL的已经发展一段时间了。""Text-to-SQL就是这样一项转化自然语言描述为SQL查询语句的技术。举个例子：当我们询问智能助手 “贾樟柯导演是在哪出生的啊？”，Text-to-SQL模型就会先根据问句解析出SQL语句“SELECT birth阿里天池的比赛：百度的比赛（见 1h 6min）：如 所说，已有写正经代码的应用方向。我认为，这种代替程序员的倾向是典型的强力内卷的表现。各行各业的自动化、信息化水平极低，很多行业都还远远未达到智能化，算法工程师就不要内卷啦！！出去降维打击别人去！！未取代各行各业，先想取代自己的行业，简直是疯了。如果不知道各行各业的应用场景，就去各行各业看看、聊聊。很多更有意义或者更简单的应用场景在等待着各位算法工程师。这才是正道啊！！！"
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],朱小霖,这个问题虽然听起来天方夜谭一般（可能也这是为啥大家都在抖机灵...），但它确实是人工智能研究人员在研究的一个领域——代码生成（code generation）。这个领域研究的就是给上文输出下文的代码，只不过有的论文是在做从代码生成代码，有的是从注释生成代码，有的是从算法题的题干生成代码。人工智能最近的一个趋势是大模型，模型的参数在呈指数增加。很好理解，参数多了，能表示的东西肯定就多了，所以代码生成这种听起来就很难的任务就有了很大的进展~ 下面是 中放出来的 demo，至少我第一次见的时候觉得挺吓人的...在这段 demo 中，OpenAI 演示了：除了用的是英文不是中文，是不是很符合题主的要求了呢？当然啦，大家都知道，demo 肯定都是精心挑选出来的，而且因为算这个事儿可能没啥代表性（有可能模型就是直接记忆了训练数据...），那么下面我们来看一下 DeepMind，就是下围棋那家，的工作，，即给算法题题干，直接输出题解：（DeepMind 这个图做的太漂亮了，我就直接粘过来了...）DeepMind 宣称，它的 AI 的解题能力，达到了人类平均水平。不过这是不是 overclaim，有兴趣的朋友可以去看论文自行判断。写以上这些主要是想分享一下，这个听起来很魔幻的题干背后，竟然也有众多 AI 研究者的头发，以及巨额的电费。以上。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],追债人,因为你的想法，不是产品，更不是程序。连开发和测试都不能理解的国内产品经理的想法，然后你指望机器理解？产品：我这里要一个列表显示。机器：长度多少？宽度多少？如果没有内容显示怎么办？如果内容超过最大怎么办？要不要分页？分页怎么个处理？产品：我就要一个列表！！！我不管那么多！！！产品：这里加个动画。机器：动画是什么形式的？持续时间多少？要不要循环显示？需不需要可暂停？产品：我就要个动画！！！！产品：这个地方照着xx软件做就行了。机器：人家的样式不是这个样的。他们的功能跟我们不一样。他们有个数上限我们没有。他们没有嵌套层级，照个这个做我们这里嵌套层级就冲突了。产品：就做的跟他们一样就行。产品：我想要个微信，你弄个微信出来吧。机器：WCNMLGB产品：我要手机主题跟着手机壳变色。机器：WCNMLGB看到了吧，国内真心把产品需求补全的是开发团队，真正让想法产生价值的也是开发团队，没有开发团队，你的想法根本不能称之为产品，更没有一点价值。还把中文想法转换成程序？你是真的异想天开。
为什么不能有把中文想法直接转换成电脑程序的编程呢？,['为什么不能有把中文想法直接转成电脑程序的编程呢？'],人间万事屋,造“”太难了，还是造“程序猿”简单造“程序机”：无数顶尖科技大牛，全世界致力于发明的领域内专家已经努力奋斗了好几十年了，还没什么眉目造“程序猿”：只要一对相亲相爱的父母，加上20多年的培养，加上大学本科四年的教育，或者简单一点经过培训班的教育，即可完成你说的任务，这样一个“程序猿”只需每月几千块钱便可租赁，还可以蹂躏，不值吗？其实造人挺简单的，你说对吧
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],小侯飞氘,很多人以为程序员大部分时间都在码代码、敲命令，反正就是对着RGB机械键盘各种怼。实际上，程序员的日常是：老板又让我实现xxx功能，还是搜一下有没有现成的轮子好了。然后开浏览器准备上google，忽然瞥到右下角的youtube弹窗，点进去，哎，这个视频好有意思哎....两小时后......完了完了deadline要到了，强行关掉youtube，搜了下发现确实有现成的轮子，不过轮子里用到的xxx库我好像没用过，继续google一下xxx库的文档。五分钟后，哈哈，我已经完全了解了怎么造这个轮子了，于是把网上的代码ctrl+c +v过来，写写接口改改变量，然后编译一下。卧槽，这个错误提示是什么玩意儿......然后google错误提示......重复以上过程N次之后，哦耶，编译成功，开始调试。靠，这个数组是怎么越界的......妹的，到底哪里了......妈个鸡，谁来告诉我这个指针指哪里去了............然后进入debug死循环...所以说，你的大部分时间会花在google搜索（刷youtube）、看文档（刷知乎）、跟各种错误提示和bug斗智斗勇（刷朋友圈）当中。真正码代码的时间可能不超过1/10。视频出处：
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],甲鱼,影响非常大。比如每进行一次操作，打字慢的需要30秒。打字快的需要10秒。相比于打字慢的，打字快的程序员勾搭的妹子永远感觉对方在线。所以最后打字快的程序员，都有了女友。站在程序员鄙视链巅峰！影响真的非常大。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],木头龙,很多答案都把话题说偏了。这个指法是否熟练和打字速度是否足够快，我这里定义一个分隔线：就是当你需要打某个字符的时候，是否需要思考这个字符在键盘上的位置。如果是的话，那么这个思考本身就会打断你编程的思路。如果不是的话，那么这个影响是不大的——当然，还是会有影响，因为并非所有的代码输入过程都需要思考。程序员是否需要练习指法，严格来说当然是没有必要；但是对于指法不熟的人来说，只需要一两个月的练习，就能熟练指法提高编程效率，Why not？
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],程墨Morgan,要知道，编程绝不会和聊天的打字速度一样，不然编程就是和打字员一样的工作了。微软以前Windows里做内存管理的专家，他打字是二指禅，但是对他的影响力完全没有影响。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],Crossin,这么说吧，如果影视作品里把程序员（当然他们更喜欢拍『黑客』）的镜头都按真实来拍，大概率应该是角色对着屏幕『发呆』（要么在等编译，要么在思考这个类该叫啥名）。以前发生过因为误操作等原因导致写了一天的代码丢失，不得不重写。然后就发现你开发+调试花了一天的工作，重新写一遍的话，大概半个小时可能就敲完了。不过话说回来，花几个周末练下打字很难吗……喏，拿去：
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],罗宸,"影响不大，但是当打字不会block你的思考的时候，你编程编得更舒服。另外还有一个影响，就是当你请教大佬问题的时候，大佬告诉你这样这样改就好了，大佬的预期是20秒钟就改完的，所以等着看你改完的结果。 可是你硬生生折腾了5分钟你们才终于看到效果，你猜下次大佬还愿不愿意指导你？ 你猜会不会有大佬愿意跟你一起？再比如处理个线上问题，敲几个命令行命令的事情，打字快的人大部分命令就直接敲了，而打字慢的不管一点啥都要动用鼠标各种复制粘贴，这种人处理线上故障的时候，旁边的领导估计看着简直想发疯。 处理这种问题，强的程序员会开发积累自己的工具包，活用脚本语言，alias等等，让自己每敲一个键都比别人更有意义。一般的程序员能做到命令熟练，打字流畅，也不至于让人看着抓狂。还比如我见过很多程序员，他们的单文件代码从来都是没法独立运行和测试的，每做一个调整，想测试一下，得把整个项目运行起来，然后从UI界面开始点击，一直到触发自己刚才改动的部分逻辑才行。他们从来没想过要对代码做模块化的分解，为每个模块构建独立的开发～测试循环。 当他们回顾自己为嘛改这么个小问题就花了一整天的时候，可能发现自己只是打字慢了一点，鼠标点的多了一点，等编译等得久了一点而已，似乎没有什么大毛病。总结一下，真正只是打字慢其实对编程的影响微乎其微，然而很多认为自己只是 ""打字慢"" 的人的问题其实并不是打字慢，而是没有优化自己工作流程和效率的意识。"
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],ze ran,流畅的盲打是种享受。指法不好，一会看键盘，一会看屏幕，敲个几十年，是很累的。既然打算做这行，不如花一个星期，练好指法，提高生产力。打字慢，不影响编程思路，但影响编程体验。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],韦易笑,我早年连数字键和符号都不能盲打，现在可以了；过去我写了十多年程序都没专门练习过指速，指法也不标准；后来练习了两个月，指速翻了一倍，然后以两倍指速+又写了十多年的程序，前后对比如何？具体影响有多大？怎样测试自己的手速到底有多快？有没有办法短期内提高指速？欢迎阅读我三年前的回答：摘录两条该回答评论里的感谢信：以及：
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],路遥知马力,这个取决于编程的定义了：如果只是纯粹的代码编写，那打字速度当然很大的影响编程速度。但是实际上编程是一个很复杂的过程1：设计2：实现3：测试只有实现这一步有大量的代码编写，但是这里还包含完整的调试。所以一个功能的实现，持续的代码编写只占20% - 30%。从这个角度讲，影响并不那么大。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],致熵,打字速度的提升带来的好处：1.打字不再打断你的思路了；2.你更愿意写注释了；3.你不再担心万一程序丢失重打的麻烦；4.你不再对大程序排斥了；5.你更愿意对程序修改做更多的实验；6.快速的聊天回复使你更好地保护你的工作思路；7.不看键盘的盲打能让你专注屏幕，不再低头打字忽然抬头发现打出来的都是中文原来中文状态下打了好多代码。8.不看键盘打字能让你看到更多的屏幕提示，比如智能补全提示、函数参数提示、颜色变化等。9.指法快了你让你更愿意使用编辑器的快捷键，带动其他方面的工作效率的提升。10.弹指神通是你的终身技能，训练一星期，收益一辈子，键盘一出手，就知道是不是高手。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],迦仑,"影响大不大看你打字速度有没有跟上你的程序设计的思路了。我是上了大学，双手才接触到键盘。图书馆第一本书是Windows系统入门，给大妈做新手指引的那种。然后上课的时候，老师在上面演示，我在下面手抄，一边抄一边理解记忆。有点幸运是，C语言老师特别关照我，是个50多岁的小老头，人特别和气，抄完一抬头，经常看到他对我慈祥地笑。上实验机课，他喜欢站我旁边看我写代码，所以舍友们都不愿意和我坐一起上实验机课（我中小学经常在考场上被老师围观答题，已经习惯了。。。）然后有天，他问我，""小树啊，我看你编程速度虽然慢，但是思路很清晰嘛。可是你为啥要看着键盘一个一个字母按啊？""我的脸瞬间红了。""哦。你以前没碰过电脑啊？""""嗯""。红炸。""训练打字是很无聊的，我来教你个法子哦。现在你们大一新生会有很多群吧，你多加几个，甚至可以去搜索一些QQ技术群，你多活跃活跃，什么时候你能同时进行十个窗口的会话，打字速度就够用啦。""于是，我就开始了网络社交，混入了各种奇怪的圈子ψ(｀∇´)ψ，编程速度也突飞猛进了。ps，后来大四，有同学看到他的女儿来找他，据说长得和我有点像。"
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],难说,修改一下之前的回答：别人以为你编程的时候是这样（噼里啪啦敲键盘，屏幕上字符滚动，看起来很酷很牛逼）：其实现实中你编程的时候是这样（大部分时间手拖着下巴 ，望着屏幕发呆，心里想着WTF）：所以结论就是：
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],九章算法,"编程速度与很多因素有关，做到以下这些，可以有效帮助你提高编程速度：如果你熟悉了键盘上的各式快捷键，就会惊奇的发现，使用键盘进行快捷操作能让你比使用鼠标时拥有更高的效率。因为快捷键的使用多数依赖于肌肉记忆，更像一种条件反射、而不需要思考——比如清屏时的Ctrl+L，自动完成文件名时的TAB、window中对操作界面进行迅速切换的art+tab等。有些程序编辑器甚至允许你通过编程添加专属的快捷方式。因此，作为一个优秀的程序员，在编程过程中绝不会频繁触碰鼠标。要想编程快，首先打字快。一个能够快速进行编程的程序员，一定是一个可以轻松实现每分钟70-80个单词打字速度的打字健将，甚至有些大神表示每分钟100-120单词也不在话下。因此，如果你的打字速度不够快，小目标可以竖立起来了。-优秀的程序员总能快速对程序进行debug，比新手快上一百倍可能并不是夸张的说法。这不仅仅是因为他们懂得的知识比新人们多，更是因为经过千锤百炼、千劫万难之后，他们找到了严格而有逻辑的方式进行debug、进行错误源头的寻找。所以，如果你还是个只能慢慢debug的新人，那么你接下来的任务就是不断写代码、解决错误，把经验积累到一定的量，然后期待debug速度质的飞跃。优秀的程序员明白怎样寻找所需信息才是最有效的。当他们使用一个系统遇到了问题，相比较于求助谷歌，他们也许会更偏向于看软件的源代码，通过源代码来了解系统的具体运行方式，进而解决使用系统所遇到的问题。很多时候——高达百分之九十，这种方法对解决问题而言具有很高的效率，远高于求助谷歌。当你看见一个程序员开始在电脑前指如飞燕、惊叹于他们码代码速度之快如有神助时，他们实际上已经花了很多时间在这个程序上了，对算法和解决方案也已经进行了深度的思考和探究。在码下第一个代码之前，优秀的程序员必然已经在胸中有了大致的设想。切记，程序员不是一天二十四小时，一周七天都在写代码的怪物，更多的时间他们是在思考和布局，而这些思考和布局的时间，将为你省去之后码代码过程中的大量头疼。所以，随时带着你的笔和纸，在编程之前仔细规划。一个良好的编程习惯能带来的时间利益简直无可估量，他能天然的帮你减少大量的bug、帮你大量减少后期项目改进和维护所需的时间，毕竟一个具有良好架构的程序是很容易进行维护和改进的。很多时候，开发商之所以会在后期面临大量的bug，就是因为他们没有使用良好的编程习惯、不遵循良好的软件设计原则。所谓磨刀不误砍柴工，要想成为编程小能手，首先你要找到一个趁手的代码编辑器。一个好的代码编辑器能给你很多额外的福利，比如自动选项配置、语法辅助、编辑单词自动识别分离等，而这些福利能令你的编程速度得到一定的飞跃。有些编程语言和汇编语言一样会允许进行文本替代宏设置，也就是说，你可以在写了很长很长的代码之后，仅用一两行的文本实现对其的显示替代。而这种替代，能在很大程度上提高你之后编程的速度。同样的一段代码，一遍又一遍的进行编写无疑是无意义的。将这些代码用脚本进行表示，在需要时进行引用，能很大程度上提高码代码的效率。有些时候，你需要的东西是你的同事、其他程序员已经做过的，那么就不要浪费精力进行重复的工作了，懂得利用已有的资源，你才能拥有更快的编程速度。人普遍存在的一个问题就是不能正确估算自己所需的时间，也许经过反复训练可以，但着实较难。很多时候，你不追踪自己的时间消耗就根本无从得知自己完成一件事情的速度有多慢，和你预期有多大出入。另外，追踪自己的时间消耗还能在一定程度给予压迫感，而这种压迫感能促使你更专心的对待眼前的事情从而效率更高，编程无疑也是如此。Mark Chen毕业于北京大学信息科学与技术学院。就职于 Google，斩获 offer 包括 Baidu, 网易, Hulu, Google, Microsoft, 小米等。高成良北京大学网络与信息系统研究所硕士在读，曾在（MSRA）实习，负责Android平台上项目的算法调优及部分模块实现。此次 Live 将在北京时间2月8日周四晚上8点举行，报名请戳："
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],PegasusWang,来看看这两位 google 程序员使用 vim 能打多快，手速快了都是浮云呐：现在的QWERT键盘键位实际上是为了降低你的打字速度而设计的。使用优秀的高度可扩展的编辑器是为了让你的打字速度不拖累你大脑的思考速度（当然脑瓜子不能太慢）。正确的指法比较重要是让你能在盲打数字键和 F 区的时候提升准确率。（很多 unix/linux程序员使用终端和 vim/emacs 比较多的不用 F 区，甚至都不用鼠标和触摸板，我撸代码的时候也基本不用）想学 vim 可以看下我最近更新的视频 vim 专栏，体验只用键盘的感觉：笔者在慕课网还有一个免费的 vim 教程：vim 作者曾写过一篇文章：如果你每年几百天每天都要花很多时间用在编辑各种代码、文档、写博客、写读书笔记、写电子书等，学好一个编辑器能节约你很多时间，当然可以不局限于 vim/ 这种比较难以上手的编辑器（对 windows 用户也不太友好），它们的好处就是几乎可以完全脱离鼠标和触摸板，同时让双手集中在主键盘区（我的键盘没有 F 区和方向键，比如 HHKB，Poker 这种迷你键盘），只用主键盘区就能高效完成所有编辑操作。缺点就是上手曲线陡峭，需要你用双手的肌肉去慢慢适应。我开的那个专栏尽量降低了学习者的上手难度，并且用视频直观展示出和其他编辑器的差别。笔者是后端工程师，经常和服务器打交道，使用 vim 让我在本地和服务器几乎有一样的开发体验，我经常 ssh 到服务器直接用 vim 修改代码调试。很多 vim 用户用惯了以后即使切换到其他编辑器或者 IDE 其实都还会装个 vim 插件模拟 vim 按键操作，你会发现现在流行的几乎所有的编辑器和 IDE 都支持 vim 键位扩展。看到有些答案举了极端大牛的例子来说打字（撸码）速度不重要，有一定的道理吧。因为真正工作的时候写代码的时间比例确实是比较低的，所以最好衡量下投入产出比再考虑要不要深入学习 vim。不过我想既然现在各种I IDE 和编辑器依然层出不穷，至少说明了撸码速度是会影响到开发体验的。而且使用经久不衰的编辑器一个好处就是不用担心哪一天就被官方抛弃了（参考 Atom）使用 vim 还可以让你用以下这些小键盘，手指始终集中在主键盘区：
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],Badger4us,"I was trying to figure out which is the most important computer science course a CS student could ever take, and eventually realized it's Typing 101.- 无数所谓的「」已经深刻地讨论过这个问题了。。总结起来就是打字慢的人不能称之为程序员。。慢指的是打字速度低于60wpm（每分钟60「词」），当然这个标准有待商榷啦。。 至于打字快了有什么好处，你想象一下「人肉」 交互解释器（REPL）就知道了。。节省了无数的时间。。当然也不能矫枉过正，追求无脑的快感，除非你是 Perl 程序员。。安利一个练 typing 的链接："
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],牛岱,"排版也不用自己排，只需调用 formatter 即可，自动排版。与其提升打字速度，练指法，不如想想还有什么其他方法可以提升代码效率。就我个人的经验，高效率编程主要要注重如下三个方面：第一点, 减少程序重启或编译时间, 不仅包含编程型语言, 也包含。一般我们在开发一个项目的时候，往往希望我这边敲几行代码，马上就能看到结果，反馈即时，而不是先闷头写代码，然后再按一下 IDE 的那个绿色小箭头 ，run一下.尤其是当项目变大的时候, 要重启项目, 很费时间, 所以现在基本上, 无论是前端, 还是后端, 还是其他领域, 很多项目在开发的时候, 都有 dev 模式, 这种模式可以 live reload 你的项目, 相关的 dev 工具会监听你源代码的更改,如果源代码更改了,它就自动热更换你更改后的代码。像我写 Angular 项目和 Spring Boot 项目的时候，基本上这个 live reload 热更新的开发工具都是必须有，因为这个东西不仅仅是减少你的等待时间，最关键的是 因为这边写一点代码，马上就能看到结果，即便是编译错误，也马上能看到编译错误信息，马上改正。我们对于 bug 的原则就是，bug 越早发现越好，最好是写几十行代码，就验证一下这几十行代码是否有效，而  工具可以帮助我们更好地完成这件事。第二点，减少代码定位时间  当项目变得越来越大的时候，文件特别多，这时候你要快速进行代码定位，才能快速开发，因为这时候，很可能你从文件夹里找那一个文件都很费事。不管是寻找文件，还是寻找文件中的一个函数，大家一定要多用 基本上一个函数或一个文件，一搜索就完事，也就一两秒的时间，比如像这样：这是 VSCode 里的文件搜索，从那么多文件中找到自己想要的文件，我只输了 五个字母。第三点，快速获取重复代码片段。其实就是要多使用 也就是预设好的代码片段, 在平时写代码的时候, 一定要对那些你经常需要反复写的代码片段做一个 Code Snippet, 然后直接输入关键字即可生成代码, 这其实背后是 的思想。比如，写 SQL 的时候，常见的语句就那么几种，我完全可以做一个代码碎片，然后这样：就会生成相对应的语句，还比如说我写前端 Angular 的时候，经常需要写一个和后端restful交互的一个 service 层，每次写的都差不多，都是增删查改，那我就搞个代码片段：然后写代码的时候，只需输入前缀 a-rest-service c即可ji'k排版也不用自己排，只需调用 formatter 即可，自动排版。说了这么多，核心思想就是，经常要用到的那么代码，经常要进行的操作，经可能降低它们的时间，这样最终你的总效率就会大幅提升，就和 CPU 优先优化那些经常使用的指令一样，常见的比如排版，注释，还有一些常见的命令脚本，都自动化执行，再利用你逐渐积累起来的 Code snnipet，你的效率会蹭蹭蹭往上涨。最后再提一个事，多看看快捷键，还有就是，用 VSCode。"
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],慕课网,1、打字速度对编程影响不大。就算不论“打字速度”和“思考速度”的比较以及“大牛憋三分钟写十行代码好过新手狂敲十分钟”这些因人而异的东西，在IDE环境中，如果你追求最高输入效率，其实应该是充分利用代码补全和重构功能，你连续输入大段文本的机会根本就不多。况且为了准确性，就算我打字速度足够快，我也会优先选择复制粘贴或代码补全，减少输入错误。2、编程速度取决于思考的速度，以及将想法输出为代码的速度，思考的速度和打字没啥关系，主要是通过各种渠道获取到相关资源，包括谷歌，包括GitHub上已有的一些库。编辑代码的速度虽然不是编程快慢的决定因素，但还是很重要的，选一个自己熟悉并能驾驭住的编辑器或者IDE能事半功倍。3、所以，提高打字速度，对于程序员来说，还是很有必要的！不仅仅是程序员！另外，打字就像开车、写字、骑车、游泳、基本数学口算一样，在现代社会是必备技能。如果打字速度极快，而且是条件反射式的“盲打”，不用为了输入看键盘，那么你在工作中思考问题时就不会被打字输入打断你的思维。打字对于IT工作者来说，就像呼吸对于跑步者一样，是最不显眼的功能，确实最不可或缺的技能之一。如果打字能力差，在输入的时候要去看键盘，要想输入顺序，那么很容易打断思维，这将大幅降低工作效率和准确性。4、做到核心程序员的时候，数据结构算法熟练，语言特性建模技巧运用自如，这是我的产出高峰期，两个我认为很有价值的能力，一个是积累了很多自己常用的函数库，基础代码的重复开发率极低，包括数学字符串数据结构常用算法甚至一些常见库的简易表达的封装；另一个是局部化的编程方法，在编程的过程中每个时刻保证只考虑非常有限的内容，这需要对整体较好的驾驭分解能力做前提，辅以好的键入速度，编程如泼墨是非常畅快的，这个阶段我专门去花一点时间练习了键盘输入，也是这个阶段感受到了普通键盘对手指的少许伤害，可能是习惯不好我会不自觉的击键过重，05年的时候买了第一把很普通的机械键盘解决了这个问题。PS：并不影响，。作者：IT人故事会来源：慕课网本文原创发布于慕课网 ，转载请注明出处，谢谢合作
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],kidneyball,既然题主提到了vim，那么就说点可能离题的东西。离题之前先简单答下题，打字速度对编程影响不大。就算不论“打字速度”和“思考速度”的比较以及“大牛憋三分钟写十行代码好过新手狂敲十分钟”这些因人而异的东西，在IDE环境中，如果你追求最高输入效率，其实应该是充分利用代码补全和重构功能，你连续输入大段文本的机会根本就不多。况且为了准确性，就算我打字速度足够快，我也会优先选择复制粘贴或代码补全，减少输入错误。======================下面离题说说vim，既然题主提到想跳vim的坑，作为vimer自然是欢迎的。但首先，vim，并不会提高你的打字速度，它充其量是提高你修改文本的速度而已（个人感觉对比普通的文本编辑器惯用方式至少提高50%以上）。此外，我跳vim坑的最主要原因，根本不是打字速度，而是vim的操作方式是一套经过时间证明足够有效率且已移值到众多IDE和编辑器的通用操作方案。熟识了vim的操作，基本上能在1. Linux服务器命令行环境2. Intellij （及Jetbrain系所有IDE）3. Eclipse4. Netbeans5. Visual Studio6. Sublime Text7. ranger / vifm ( 命令行状态下的文件管理工具）中流利进行所有基本操作了。此外vim方便的文本对象，宏定义，正则查找替换，多重剪贴板（vim里叫register）都是普通文本编辑器没法比的，只能说谁用谁知道。至于说提高操作速度对编程的影响，最大好处是减少不必要的精神消耗，比如说之前我选中个字符串，要把光标移动到字符串起点引号之前，ctrl+shift+右箭头数下，后面的引号在不同的编辑器下还可能不会被选中，需要根据情况再敲一下shift+右箭头。整个过程至少有三个关注点（不同的IDE可能对选中语法结构有特殊支持，但跨编辑器的通用的方案只此一种）。而在vim操作方式下 va“ 三键搞定，省心。此外，虽然未必常见，但开发中总会有进入巅峰状态的机会。比如说你憋着屎又想在去蹲坑之前干完点什么，有时就会进入巅峰状态，思路突然异常清晰，胸有成竹就差敲进去了。这时操作流畅就能让你保持思路活跃，成功实现目标，这时就特别有满足感。老实说偶尔遇到一次这种状态是开发中一种很大的乐趣，而熟练的操作手法能让你抓住每一次这样的机会。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],抽象千里冰封,我觉得更重要的是熟悉IDE快捷键吧，把整个IDE大部分功能摸熟后代码里大部分字符都已经不是通过打字打出来的了，打字本身也就不太能影响效率了。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],诸葛不亮,飙代码时的确影响很大，有时突发紧急任务时，我帮其他同事救火，两天能飙完人家两周的代码量。但飙代码的前提是思路得先飙起来，然而……编程的瓶颈基本全在这儿了
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],LeGrandK,
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],臧大为,有影响。编程需要很多特殊字符。如果不专门练习一下，这个可能会打断思路。总之不会很爽。建议用指法神器专门练习几个小时。问题就解决了。有问题。就解决。不要拖着。解决这个问题很简单，根本不会花太多时间。==========网上搜索Typing Master有相应的PC端软件下载
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],本人已死,某公司雇了一个编程大牛，但是因为腕管综合症什么的，此人不能长期打字，于是该公司又给他雇了个打字员，于是大牛一切程序靠口述。比较悲催的是该打字员不懂编程，于是写个简单的循环，大牛得说上一大串“for 左括号 int x = 0 分号 x 小于 10 分号 x++ 右括号……”这个效率题主可以自己想象一下，反正我听到的时候简直醉了。当然，人家做的程序十分高大上，如其他答主所说，花在思考上的时间远大于打字的时间，90%的思考够效率，那剩下10%把思路转换为代码的工作，老板不在乎他慢一点。题主自己要是有那个水准，打字平平也就罢了。最怕编程思维水平也不够，雇你来写点简单的小程序，大失误是不可能有的，要的就是你吃苦耐劳还廉价。如果是那样的话，题主还是多练练打字吧。练打字没有“年龄太大”一说，现在开始不晚，真的。总结就是质量和速度至少得有一样，当然两者兼备是最好的。自己适合做哪种人我相信题主自己心里清楚。加油。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],麋路,其实我觉得，想法和打字速度相互匹配才是最重要的。。无论是让手指等大脑，还是让大脑等手指，都会降低效率。。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],马铃薯,什么时候你觉得自己: “这个习惯多少年了，要改起来肯定改不掉。”或者:“这个东西这么难，我虽然喜欢肯定是学不会的。”而放弃改善自己，我觉得是非常危险的。就我自己来说，曾经我的指法也并不标准，我用左手无名指按E，中指按R。打字时间长了，左手明显比右手类一些。这个习惯可能有十几年之久，改起来麻烦吗？不过几天的事情，从此按键更加畅快了。不过就程序来讲，我写Objective-C，虽然方法名变量名都比较长，但是IDE都有自动补全的啊，不就是敲几个字母回车回车...一般来说思维清晰，速度不会怎么慢的。反而会有打到一半，思路跟不上的情况。楼上有人安利其实我更推荐 <- 建议练习数字键的指法 我按(90-=)这几个经常出错 靠它调教好了。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],北南,我大概12岁开始写程序，一直到十五六岁以前，打字都非常慢，指法很差，其他倒也还好，就是参加竞赛比较吃亏，心里也很上火。你想知道后来怎么就打字快了吗？多谢腾讯，多谢QQ，那时候它还叫OICQ吧，让我天天上网找小姐姐聊天，没几个月打字速度就快的不要不要的。后来发现打一些符号还是慢，又专门找打字软件练，没一个月就能打好几百键每分钟了。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],Cat Chen,没有影响。一盘棋的输赢跟一只棋子的移动速度无关，不想清楚如何走起，棋子移动得再快也是输。同理，编程速度不能决定业务发展速度。不需要的程序写得再多再好都没用，公司业务战略不行就关门。
打字速度对编程的影响大吗？,['本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？'],知乎用户HofBt6,"不大甚至是微弱, 因为正儿八经写程序你纯打字占的时间能有10%就顶天了. 查资料, 想逻辑, 测试, debug, 发呆, 聊天才是大头. 你快个一倍, 体现出来的影响最多5%. 注意这个5%是上限, 是自己跟自己比. 如果你本身的水平就不足以支撑把这个程序写顺了, 打字再快也没用.不过编辑器用得好, 爽是肯定的. 我最近在用VSCode的Vim模拟插件, 最惊为天人的是10dd, 表示的是连续执行10次(删除行). 有一种赚到了的感觉, 大概+3s了吧..."
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",桃花岛主,"上周旁听了一个大学学长组织的线上Python交流会，里边不乏充斥着各位行业大牛，讲的内容确实精彩，可能对于Python经验5年+的人来说，是受益匪浅，欢迎程度极高，恨不得跳出屏幕来表示赞同，毕竟很多提到的问题，我在工作中也很常见，但是作为资历一般的程序员，有一些理解起来还是有些困难，评论区里同时也还有另外一种声音：我很能理解“另一种声音”，我当初也是自学Python，刚开始的时候，我连循环结构和分支结构都搞不明白谁是谁，去找有经验的人问，结果问了几回人家就烦了，所以，学习这种事，还是得靠自己。根据我自己的经验来说，想从零开始学Python，以后也确实想找相关的工作，基本是下边这三种方式：读研读博这件事时间成本比较高，我对自己没有完全的自信，所以我思考再三，还是决定踏入社会浪潮了。（但是对于学习能力强，本科也比较优秀的学生，非常建议继续读研读博，未来踏入社会起薪会非常高，我现在身边就有两个博士大神，我只能膜拜了。。。）进入社会之后，我基本就是买书和看视频自学，这回给你们来个全方位安利：Python初学者的法宝，如果你想下载Python，最好还是在这个网址去下，不要想着用一些不明来源的安装包。在这里，你不仅可以下载各种版本的Python源代码和安装程序，更有各种文献资料、Python交流社区，还会告诉你Python的最新行情，不得不感叹，这功能太强大！站内的知识点很全面，无论你想学习哪种领域，都可以轻松在这里找到合适的资料。这个学习网站很大的优势就是在浏览器上直接编写代码，轻松解决了初学者程序环境安装的困扰。如果你英文比较好，交流没有问题的话，比较推荐这个网站。这是一个课程学习网站，内容涵盖编程各个领域，目前已经和200+所大学合作课程，还可以在线读学士、硕士学位。如果说你的英文是难题，给你推荐CSDN，是国内老牌程序员社区，里边有各领域博文、资料、课程，基本很多专业问题都可以在这里查。如果是初学Python的话，没有什么编程基础，还是比较适合从这本开始学的。整体是以习题的方式开始引导初学者学习编程。这本书既有知识点的详细讲解，又有更多高阶用法的延伸，对于已经有一定基础但是掌握不牢的同学来说，无疑是值得拥有的好书。这本书对于Python的高级用法探究很深入，涵盖了数据结构、对象、并行与并发、元编程等多个方向。其实，除了学习网站和书籍，我还在网易云课堂、51、慕课、CSDN学院买了不下10套关于Python入门的课，在得到也买了时间管理课。我自己的话，因为我是想进行系统学习，也想节省一些学习时间，加上我也比较懒，非得有人督促着才能坚持不懈，所以我选了CSDN的Python训练营。最近正在学习Python的进阶领域-AI，这回同样参与了一个训练营，深刻感受到监督使人进步！不为别的，也是希望自己以后的工作范围更广，也能跟上时代的脚步。也许有人会问：“你干嘛把自己逼得那么紧，安安稳稳的不就很好了吗？”作为一个人，如果长期处于一个舒适安逸的环境，慢慢就会被这种安逸笼罩，变得懒惰，原本拥有的能力也会逐步减弱，当有一天危险来临，所在的舒适圈被打破，连生存下去都是个难题！所以，为了好好活下去，要不跳出舒适圈，要不就扩大你的舒适圈。跳出舒适圈，意味着你要彻底离开现在的区域，也许是换个城市、换个工作、甚至换个行业，让自己重新拥有危机感，让新环境逼着你去成长；扩大舒适圈，就是让自己能生存的舒适范围更大，主动学习、提升你的能力。我选择的是从零开始全方向提升，因为我想着，既然要痛苦，就直接痛苦这一次。上边就是我学过的系统课，内容很全，不过价格也相对更贵。如果有的同学目前是打算一步一步慢慢来，或者之前已经有一些基础，只是想突破单个方向，下边这几门课程我也在刚接触Python的时候买来学的，价格更便宜，内容却丝毫不打折扣，是比较值得学习的！如果是毫无基础可言，甚至不知道如何下载Python， 比较推荐齐伟老师的《8小时Python零基础轻松入门》或者是的《Python可以这样学》。细节全面，适合小白入门。这回是偏基础点的，之前也分享过两门，都可以进行参考。我买过两类数据分析课，零基础入门和多方位学习，现在直接发出来，也是为了方便不同需求的同学。说起人工智能讲的好的老师，必说（感觉真的霸榜各个学习平台）。他是计算机的博士，好像还参与了挺多国家级项目，我听过几次他的课和直播，老师的讲课风格很幽默，经常会举例子，让你更清晰的搞懂知识点，我觉得自己是在学习中享受。（基础知识配实战，这样学习起来相对也更容易）今天先说到这里，下回我会跟大家细说这回学AI心酸与快乐，满心干货！我的目标是进阿里，祝我幸运进阶！《Python入门教程》《Python初级入门精讲》《Python爬虫开发》《Python实战编程》《1小时掌握Python爬虫+高效学习法则》————————————————————————————————更新：说明几个事1.很多小伙伴纠结于这个一百天的时间，我觉得完全没有必要，也违背了我最初放这个大纲上来的初衷，我是觉得这个学习大纲还不错，自学按照这个来也能相对系统的学习知识，而不是零散细碎的知识最后无法整合，每个人的基础以及学习进度都不一样，没有必要纠结于一百天这个时间，甭管你是用三个月还是用一年来学习这些东西，最后学到了不就是收获吗？何必纠结于这一百天，觉得这一百天学习不完我就放弃了呢？（另，项目后面没有更新完，大家可以按照这个框架去学习，没有更新完的大家可以自行找资料。）2.还有小伙伴说这是广告，那请这位项目创作者看见这条“广告”给我打钱。真的很没劲，这个项目多少人知道，在github上也非常火，火有火的道理，对于一些学习者来说的确很有参考价值。谁打广告不找个几万分的大V，来找我这个小弟弟？更搞笑的还有说我是成都某机构培训老师？本人坐标北京谢谢，也不是什么老师，只是一名普普通通的程序员。自认为我的水平还担不起什么老师。下面是原文：Github上位名叫骆昊 (jackfrued) 的资深程序员，为大家规划了一条从“从新手到大师”的百天之路！我觉得这个模式你可以参考一下。现在已经有5w+星了！给初学者的几个建议：先附上github地址：下面是这个一百天计划里面的学习框架，我在这里放上来。Python简介 - Python的历史 / Python的优缺点 / Python的应用领域搭建编程环境 - Windows环境 / Linux环境 / MacOS环境从终端运行Python程序 - Hello, world / print函数 / 运行程序使用IDLE - 交互式环境(REPL) / 编写多行代码 / 运行程序 / 退出IDLE注释 - 注释的作用 / 单行注释 / 多行注释程序和进制 - 指令和程序 /  / 二进制和十进制 / 八进制和十六进制变量和类型 - 变量的命名 / 变量的使用 / input函数 / 检查变量类型 / 类型转换数字和字符串 - 整数 / 浮点数 / 复数 / 字符串 / 字符串基本操作 / 字符编码运算符 - 数学运算符 / 赋值运算符 / 比较运算符 / 逻辑运算符 / 身份运算符 / 运算符的优先级应用案例 - 华氏温度转换成摄氏温度 / 输入圆的半径计算周长和面积 / 输入年份判断是否是闰年分支结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图if语句 - 简单的if /  / if-elif-else结构 / 嵌套的if应用案例 - 用户身份验证 / 英制单位与公制单位互换 / 掷骰子决定做什么 / 百分制成绩转等级制 / 分段函数求值 / 输入三条边的长度如果能构成三角形就计算周长和面积循环结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图while循环 - 基本结构 / break语句 / continue语句for循环 - 基本结构 / range类型 / 循环中的分支结构 / 嵌套的循环 / 提前结束程序应用案例 - 1~100求和 / 判断素数 / 猜数字游戏 / 打印九九表 / 打印三角形图案 / 猴子吃桃 / 百钱百鸡基础练习 - 水仙花数 / 完美数 / 五人分鱼 /  / 回文素数综合练习 - Craps赌博游戏函数的作用 - 代码的坏味道 / 用函数封装功能模块定义函数 - def语句 / 函数名 / 参数列表 / return语句 / 调用自定义函数调用函数 - Python内置函数 / 导入模块和函数函数的参数 - 默认参数 / 可变参数 / 关键字参数 / 命名关键字参数函数的返回值 - 没有返回值 / 返回单个值 / 返回多个值作用域问题 - 局部作用域 / 嵌套作用域 / 全局作用域 / 内置作用域 / 和作用域相关的关键字用模块管理函数 - 模块的概念 / 用自定义模块管理函数 / 命名冲突的时候会怎样（同一个模块和不同的模块）字符串的使用 - 计算长度 / 下标运算 / 切片 / 常用方法列表基本用法 - 定义列表 / 用下表访问元素 / 下标越界 / 添加元素 / 删除元素 / 修改元素 / 切片 / 循环遍历列表常用操作 - 连接 / 复制(复制元素和复制数组) / 长度 / 排序 / 倒转 / 查找生成列表 - 使用range创建数字列表 / 生成表达式 / 生成器元组的使用 - 定义元组 / 使用元组中的值 / 修改元组变量 / 元组和列表转换集合基本用法 - 集合和列表的区别 / 创建集合 / 添加元素 / 删除元素 / 清空集合常用操作 - 交集 / 并集 / 差集 / 对称差 / 子集 / 超集字典的基本用法 - 字典的特点 / 创建字典 / 添加元素 / 删除元素 / 取值 / 清空字典常用操作 - keys()方法 / values()方法 / items()方法 / setdefault()方法基础练习 - 跑马灯效果 / 列表找最大元素 / 统计考试成绩的平均分 / Fibonacci数列 / 综合案例 - 双色球选号 / 井字棋类和对象 - 什么是类 / 什么是对象 / 面向对象其他相关概念定义类 - 基本结构 / 属性和方法 / 构造器 / 析构器 / __str__方法使用对象 - 创建对象 / 给对象发消息面向对象的四大支柱 - 抽象 / 封装 / 继承 / 多态基础练习 - 定义学生类 / 定义时钟类 / 定义图形类 / 定义汽车类属性 - 类属性 / 实例属性 / 属性访问器 / 属性修改器 / 属性删除器 / 使用__slots__类中的方法 - 实例方法 / 类方法 / 静态方法运算符重载 - __add__ / __sub__ / __or__ /__getitem__ / __setitem__ / __len__ / __repr__ / __gt__ / __lt__ / __le__ / __ge__ / __eq__ / __ne__ / __contains__类(的对象)之间的关系 - 关联 / 继承 / 依赖继承和多态 - 什么是继承 / 继承的语法 / 调用父类方法 / 方法重写 / 类型判定 / 多重继承 / 菱形继承(钻石继承)和C3算法综合案例 - 工资结算系统 / 图书自动折扣系统 / 自定义分数类使用tkinter开发GUI使用pygame三方库开发游戏应用“大球吃小球”游戏补充：敏捷软件开发宣言角色：产品所有者（决定做什么，能对需求拍板的人）、团队负责人（解决各种问题，专注如何更好的工作，屏蔽外部对开发团队的影响）、开发团队（项目执行人员，具体指开发人员和测试人员）。准备工作：商业案例和资金、合同、憧憬、初始产品需求、初始发布计划、入股、组建团队。敏捷团队通常人数为8-10人。工作量估算：将开发任务量化，包括原型、Logo设计、UI设计、前端开发等，尽量把每个工作分解到最小任务量，最小任务量标准为工作时间不能超过两天，然后估算总体项目时间。把每个任务都贴在白板上面，白板上分三部分：to do（待完成）、in progress（进行中）和done（已完成）。请参考。2.通过数据表创建模型（反向工程）python manage.py inspectdb > app/models.py3.代码性能调优4.静态资源访问优化作者：骆昊 (jackfrued)来源：githubgithub地址：公号：聊聊Python，感兴趣的可以来找我玩，一起来聊聊Python这点事~"
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",李金ECHO,【实体书】Python 3版本的实体书：，京东/淘宝/当当等各平台均可购买，喜欢实体书的可以看看，内容不完全一致。【Python 3版本】Python 3版本的笔记已更新完成，链接：目录：【Python 2.7版本】Python 其实挺简单的，也挺强大的。我用 Python 做科学计算，自学一年，也记了一年的笔记。笔记链接（基于Python 2.7）：
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",彭猫,幸运的是，Python 是一门初学者友好的编程语言，想要完全掌握它，你不必花上太多的时间和精力。Python 的设计哲学之一就是，体现在两个方面：废话不多说，学会一门语言的捷径只有一个： 任何一种编程语言都包含两个部分：硬知识和软知识，起步阶段的主要任务是掌握硬知识。“硬知识”指的是编程语言的语法、算法和数据结构、编程范式等，例如：变量和类型、、分支、函数、类。这部分知识也是具有普适性的，看上去是掌握了一种语法，实际是建立了一种思维。例如：让一个 Java 程序员去学习 Python，他可以很快的将 Java 中的学到的面向对象的知识 map 到 Python 中来，因此能够快速掌握 Python 中面向对象的特性。如果你是刚开始学习编程的新手，一本可靠的语法书是非常重要的。它看上去可能非常枯燥乏味，但对于建立稳固的编程思维是必不可少。下面列出了一些适合初学者入门的教学材料：Python 的哲学：学习也是一样，虽然推荐了多种学习资料，但实际学习的时候，最好只选择其中的一个，坚持看完。必要的时候，可能需要阅读讲解数据结构和算法的书，这些知识对于理解和使用 Python 中的对象模型有着很大的帮助。“软知识”则是特定语言环境下的、类库的使用、IDE的选择等等。这一部分，即使完全不了解不会使用，也不会妨碍你去编程，只不过写出的程序，看上去显得“傻”了些。对这些知识的学习，取决于你尝试解决的问题的领域和深度。对初学者而言，起步阶段极易走火，或者在选择 Python 版本时徘徊不决，一会儿看 2.7 一会儿又转到 3.0，或者徜徉在类库的大海中无法自拔，Scrapy，Numpy，Django 什么都要试试，或者参与编辑器圣战、大括号缩进探究、操作系统辩论赛等无意义活动，或者整天跪舔，老想着怎么一行代码把所有的事情做完，或者去构想圣洁的性能安全通用性健壮性全部满分的解决方案。很多“大牛”都会告诫初学者，用这个用那个，少走弯路，这样反而把初学者推向了真正的弯路。还不如告诉初学者，学习本来就是个需要你去走弯路出 Bug，只能脚踏实地，没有奇迹只有狗屎的过程。选择一个方向先走下去，哪怕脏丑差，走不动了再看看有没有更好的解决途径。自己走了弯路，你才知道这么做的好处，才能理解为什么人们可以手写去匹配却偏要发明，为什么面向过程可以解决却偏要面向对象，为什么我可以操纵每一根指针却偏要自动管理内存，为什么我可以嵌套回调却偏要用 Promise...更重要的是，你会明白，高层次的解决方法都是对低层次的封装，并不是任何情况下都是最有效最合适的。技术涌进就像波浪一样，那些陈旧的封存已久的技术，消退了迟早还会涌回的。就像现在移动端应用、手游和 HTML5 的火热，某些方面不正在重演过去 PC 的那些历史么？因此，不要担心自己走错路误了终身，坚持并保持进步才是正道。起步阶段的核心任务是掌握硬知识，软知识做适当了解，有了稳固的根，粗壮的枝干，才能长出浓密的叶子，结出甜美的果实。完成了基础知识的学习，必定会感到一阵空虚，怀疑这些语法知识是不是真的有用。没错，你的怀疑是非常正确的。要让 Python 发挥出它的价值，当然不能停留在语法层面。发展阶段的核心任务，就是“跳出 Python，拥抱世界”。在你面前会有多个分支：科学计算和数据分析、、Web 网站、游戏、命令行实用工具等等等等，这些都不是仅仅知道 Python 语法就能解决的问题。拿爬虫举例，如果你对，HTTP 协议，HTML，文本编码，JSON 一无所知，你能做好这部分的工作么？而你在起步阶段的基础知识也同样重要，如果你连怎么写都还要查文档，连 BFS 都不知道怎么实现，这就像工匠做石凳每次起锤都要思考锤子怎么使用一样，非常低效。在这个阶段，不可避免要接触大量类库，阅读大量书籍的。「Awesome Python 项目」：这里列出了你在尝试解决各种实际问题时，Python 社区已有的工具型类库，如下图所示：vinta/awesome-python你可以按照实际需求，寻找你需要的类库。至于相关类库如何使用，必须掌握的技能便是阅读文档。由于开源社区大多数文档都是英文写成的，所以，英语不好的同学，需要恶补下。这里我只列出一些我觉得比较有一些帮助的书籍，详细的请看豆瓣的书评：科学和数据分析：❖「集体智慧编程」：❖「数学之美」：❖「统计学习方法」：❖「Pattern Recognition And Machine Learning」：❖「数据科学实战」：❖「数据检索导论」：爬虫：❖「HTTP 权威指南」：Web 网站：❖「HTML & CSS 设计与构建网站」：... 列到这里已经不需要继续了。聪明的你一定会发现上面的大部分书籍，并不是讲 Python 的书，而更多的是专业知识。事实上，这里所谓“跳出 Python，拥抱世界”，其实是发现 Python 和专业知识相结合，能够解决很多实际问题。这个阶段能走到什么程度，更多的取决于自己的专业知识。这个阶段的你，对 Python 几乎了如指掌，那么你一定知道 Python 是用 C 语言实现的。可是 Python 对象的“动态特征”是怎么用相对底层，连自动内存管理都没有的C语言实现的呢？这时候就不能停留在表面了，勇敢的拆开 Python 的黑盒子，深入到语言的内部，去看它的历史，读它的源码，才能真正理解它的设计思路。这里推荐一本书：「Python 源码剖析」：这本书把 Python 源码中最核心的部分，给出了详细的阐释，不过阅读此书需要对 C 语言内存模型和指针有着很好的理解。另外，Python 本身是一门杂糅多种范式的动态语言，也就是说，相对于 C 的过程式、 Haskell 等的函数式、Java 基于类的面向对象而言，它都不够纯粹。换而言之，编程语言的“道学”，在 Python 中只能有限的体悟。学习某种编程范式时，从那些面向这种范式更加纯粹的语言出发，才能有更深刻的理解，也能了解到 Python 语言的根源。这里推荐一门公开课「编程范式」：讲师高屋建瓴，从各种编程范式的代表语言出发，给出了每种编程范式最核心的思想。值得一提的是，这门课程对C语言有非常深入的讲解，例如C语言的范型和内存管理。这些知识，对阅读 Python 源码也有大有帮助。Python 的许多最佳实践都隐藏在那些众所周知的框架和类库中，例如 Django、Tornado 等等。在它们的中淘金，也是个不错的选择。每个人学编程的道路都是不一样的，其实大都殊途同归，没有迷路的人只有不能坚持的人！希望想学 Python 想学编程的同学，不要犹豫了，看完这篇文章，
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",赛门喵Simon,我是真正零基础开始学Python的，从一开始的一窍不通，到3个月后成功搭建了一个动态网站（没有用任何框架）。相比于计算机大牛，我更加知道一个小白将会遇到什么坑，遇到哪些难点。我把我的学习过程写在下面，并附上在每个阶段的学习资料，希望对零基础的Python学习者有所帮助。注：本文只做经历分享，不是技术探讨。在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年，当很多人都参与到是非之争的时候，我更加着迷于程序员区区几行代码的脚本所展现出的威力，对于外行而言，这是超乎他们想象之外的某种能力——为什么我守在电脑面前盯着秒针然后拼命点击鼠标都不一定能抢到的礼物，程序员只需要提前花5分钟写3行代码就轻松搞定？所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）当时我的心中充满了无数个类似的问号？当然如果你也是小白，一定有着同样的疑问。好处是一开始就明确了学习的目的：Web建站。所以我的学习方案基本就是通过做项目学习，哪里不懂就解决哪里，边做边学习，不断推进。另外，由于知道很多成功的网站在用Python做服务器开发，比如知乎，所以我就自然选择了Python。于是我就开始了我充满着挫败感和成就感的编程之路……从8月到12月的四个月里，除去本来的工作，为了学习质量，我会保证平均每天4个小时的学习时间，周末也不例外。另外，所有的文档，问答都尽量看英文的，这可以帮你剩下大量的时间。12月13日，我做的网站上线了，3天时间大概有5000人访问了这个网站，我有时在后台看着日志，不免有些心潮喷涌，我想把自己的经验写下来，希望对于那些有心学习编程但无从下手的朋友提供一些帮助和鼓励。1）基础刚开始的时候，我对搭建网站一无所知。为了给自己迅速建立一个框架，我在Google上面泡了整整一天，了解了HTML，CSS，JavaScript，Ajax，jQuery，React，SQL，服务器脚本等等知识，不求精通，只是了解每一项技术是干嘛的，另一方面建立起了一个学习的roadmap，这样大概知道做一个Web App需要哪些知识，分别学习的主次顺序。重点推荐两个资源：Python基础知识：Web App基础知识：@的写的通俗易懂，极力推荐。有了这个，我明白了前端三大必须掌握技能HTML，CSS和JavaScript，花了大概10天左右把W3Schools上的教程全部过了一遍，然后试着写了几个网页，感觉自己写的很没有底气。于是根据知乎和豆瓣上的推荐，买了《JaveScript DOM》和《Head First HTML与CSS》，边看书边把例子过了一遍。W3Schools: JavaScript：HTML & CSS : 前端是需要慢慢学习的，在看完上面的资料后，虽然能写出来一些挺漂亮的页面，但是我自己知道很多都是不符合标准的，更不要说代码风格什么的。这只能通过不断地积累和增加代码量来提高。由于明白服务器端需要耗费自己大量的时间，所以在发现自己能够按照构思勉强实现网页之后，我就把学习中心放到了服务器端上。不过每天还是会抽空写一写网页，避免手生。2）服务器端最先了解的是HTTP协议，也就是浏览器和服务器之间是如何通信的。也就是当你在浏览器里键入网址按下回车直到网页显示在你浏览器的这个过程中，浏览器和浏览器之间发生了什么事情。这是很有意思的内容，我是以读小说的心情了解了这部分内容。了解这部分后，你就会明白类似为什么有时候会有404页面？在百度搜索框里键入的搜索词是如何提交到百度服务器的？为什么重新登录知乎的时候就不用再输入密码了？之类的问题了。HTTP协议学习资料：的博客：了解了HTTP协议之后，我就多少有些入迷了。看似神秘难懂的现象其实原理并不复杂，你反而会被吸引。接下来就进入到我投入时间最多的部分了——后端开发。记得当时了解Web开发的MVC（Model-View-Controller）模式后，有一种心血喷涌的感觉，觉得太有意思了（程序员别喷，我就是这么没见过世面）。我们以知乎为例子来说明MVC是个啥：每个人的主页都是相同的布局和风格，例如最上面的菜单搜索栏，颜色分割，左边显示动态等，右边是个人信息等，然后具体的内容却因人而异——每个人的头像，名字，动态都是不一样的。那么知乎是如何保证每一个人看到的都是自己的主页呢？你可以把这个相同的布局想象成一个模板，里面有一个个空格子，当你用你的账户登陆页面时，想象你的电脑里有无数个小人根据你的账号从知乎后台的数据库里取出你的头像，动态，认证信息等等内容，然后对应着模板上规定好的位置，把对应的内容填进去。这些小人的动作实在是太快了，以至于你觉得这是在瞬间完成的。上面所说的模板就是MVC中的V，是View的缩写，负责显示。这样做的好处在于，如果知乎有一天突然想改变一下个人主页的风格，那么只需要改变这一个模板，然后几千万注册用户的主页就相应的变化了，因为模板是公用的，是不是省了很多事情？（早期的Web开发可不是这样哟，你可能要一个个用户去改，非常麻烦。）而这些小人除了摆放内容，它们真正负责的是业务逻辑，我们把他们叫做Controller，也就是MVC中的C。例如当你登陆的时候，这些小人要检查你的用户名是不是准确的，如果准确，它们要去数据库里取出你请求的信息等，如果用户名错误，它们要拦截住你的登陆。它们的职责还有很多，无法一一列举。在实际中，这些小人做的事情其实就是Python（或者其它脚本语言）做的事情。最后，MVC中的Model其实就是传给View的数据，包括上面的头像，用户名，动态等因人而异的数据。这些数据在知乎服务器上是以数据库表格（table）的形式存在的，你可以把它们想象成很多不同的excel表格，不同的表格储存着不同的信息，有些记录着知乎用户的个人信息，有些记录着回答，有些记录着评论等等，而这些表格之间又彼此联系，当你在知乎的不同网页间跳转的时候，上面说的那些小人就根据你的要求，组合对应的表格取出对应的数据，然后把他们放到模板对应的空格里，发送给浏览器。然后浏览器根据你写的CSS，用不同的颜色，大小等等，将数据很漂亮的显示出来。这样做的好处是什么呢？虽然你最终在浏览器里看到的是一个完整的页面，但是在后端逻辑上它们都是区分开的——模型（M），视图（V）和控制器（C）的区分就保证了较高的可维护性——我可以随时修改主页的显示并看到效果，同样我可以随时加入一些业务逻辑。如果你的学习坚持到这里了，首先要恭喜你。其次你可能已经知道一些非常成熟的Python Web框架了，例如Django，Flask等等，并且你可能看到了很多小白教程教你直接使用，毕竟大部分人可能觉得没有必要重复造轮子。本来为了省事，我也打算直接用框架。我是在设计数据库的时候，当时在看SQLAlchemy文档，觉得相对自己的项目SQLAlchemy太过复杂，所以我决定自己写自己的ORM（名词不懂没关系），这对于当时的我来说是一件难度非常大的事情。于是我投入了极大的精力每天都在看关于SQL和Python相关的教程和资料，给了我很大的启发。在自己完成了ORM后，又写了URL处理函数，同样没有用任何现成的Web框架。现在回头看，我认为这一段时间的造轮子是提升编程能力最快的时候。比如为了写ORM，就必须去花很多时间学习SQL，去了解Python里面的，而如果用一个现成的框架，我很有可能偷懒不去关注某些细节。而不出问题还好，一旦出问题，我就只能跪。另外，造轮子迫使我在开始的时候就构思整个框架，因为我必须尽可能的考虑到所有的情况，于是就会不断的强迫自己完善知识体系，和别人的代码作对比从而改进自己的，这个过程充满了无尽的挫败感，但是得来的成就和快乐也是无可比拟的。SQL书籍：Python：Github上的优质Python资源：过程中还牵涉到部署，我的网站是跑在Linux上的。关于部署网上有非常多的优质教程，一搜一大把。这里就不再赘述。这些是我学习大致路线，当然过程中充满着小的磕磕绊绊，虽然网站上线了，貌似运行还比较顺利，但是如果以一个程序员的标准来要求自己，自己依然非常菜鸟。不过我并没有以前那样惧怕技术了，就像你明白魔术的背后的原理后，会更多的思考原理本身。很多人都推荐小白第一门语言选Python，因为语法简单。这句话只说了一半，Python确实容易上手，对初学者的门槛很低。但我发现，例如很多人学完了Python的语法，觉得确实简单，但是转头去用Python标准库的时候，却发现自己连文档都看不懂。标准库提供了Python和其它系统功能的接口，最终实现了Python和系统之间的互动。读标准库需要系统知识，比如操作系统，数据库，进程和线程，socket编程，网络协议等等，这些对于编程小白来才构成很高的门槛，但是只有学会这些，才能真正发挥出Python的威力来。这也是我觉得自己的经历对小白是有价值的一个原因。因为设计一个动态的网页是一个很不错的练手Project。建立网页（Web App）会逼迫你了解从你在浏览器里键入地址按下回车到网页显示在浏览器的过程中，浏览器，网络，服务器都干了些什么。具体到技术上面，你不得不去学习前端的HTML，CSS和JavaScript，后端的脚本，数据库，操作系统等。也就是说，这个过程能够促使你去主动学习上面提到的系统知识，如果你再做另外一个项目，你就不会像现在这样无从下手，而有能力去进行一些技术性的探讨，所以我认为这是一个非常好的练手项目。1）一定要空出时间补充理论知识很多人会强调learn by doing，边做项目边学习，这也是我自己采用的方式。在这种方式中，你不断犯错，改正……学习效率非常高。但是，很多人走了极端，最后的结果就是不注意理论知识的学习。你会发现自己Google的能力越来越高，但是真实的编程能力并没有得到提升。如果有这种情况，你需要反思一下。一种可能是你太过于依赖各种成熟的框架，结果编程就变成了用「胶水」去粘合不同的框架完成需求。就好比你的Web App用了SQLAlchemy，虽然自己不太懂SQL，但是网站跑的也还不错。这时候如果数据库出现了问题，那你就只能跪了。另外一种可能是你完全沉浸在做项目中，忽略了学习理论知识。做项目虽然充满困难，但回报是强烈的成就感，很容易沉浸其中。我觉得这是极其错误的。首先半路出家的程序员都没有经过系统的学习，没有形成自己的知识体系，如果你不懂数据结构，算法复杂度，操作系统这些理论，那么你能达到的高度就极其有限。所以，在每天做项目的同时，一定要保证抽出一定的时间，恶补理论知识。这部分的书单在豆瓣和知乎上都有很多总结，可以自行搜索。2）不要太纠结于无意义的问题，比如什么框架好，XX语言比XX语言好啦这种问题。前期确定了练手项目，就去专心积累代码量，积累基础知识。那些你现在还看不懂的炫酷技术你慢慢也就能明白是怎么回事了，反而没有基础，再炫酷的框架对你而言都是天书。3）学会发问。好问题是建立在你自己已经实践或者思考的基础上问出来的，这是对自己的负责，也是对别人的尊重。不要一遇到困难就喜欢直接上网搜索：「这个问题是怎么回事啊？」，「我不明白你能不能帮我看看……」。4）学好英语。THE END最后，给自己打个广告，如果学英语，一定要关注我。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",量子位,"最近，GitHub上一个关于Python的工程完工了。一个名为“暮晨”的贡献者，把一个非常有趣的Python项目，翻译成了中文版。这个项目是《What the f*ck Python!》，专门介绍 Python 里面那些奇奇怪怪的语言坑。项目的主体构成部分就是示例，一共分为5个部分，分别是：Strain your brain!/大脑运动!Appearances are deceptive!/外表是靠不住的!Watch out for the landmines!/小心地雷!The Hidden treasures!/隐藏的宝藏!Miscellaneous/杂项以上，总计51个示例。每一个示例的结构都是一样的，以“Mutating the immutable!/强人所难”为例：首先，会给出代码：然后，给出Output（ Python version）：然后，对意外输出的结果进行简短的描述，在这个示例中，就是：接下来，就会对示例进行说明，简要叙述发生了什么以及为什么会发生。如有必要, 也会举例说明。在这个示例中是这样的：有些地方，贡献者还会给出译注，比如整个示例中就是：其他还有50个示例，等你来看~当然，要学习一下怎么使用这个资源。项目贡献者在用法部分表示，最好依次阅读下面的示例。然后，在阅读每一个示例的时候，这样做：此外，还可以在命令行阅读 WTFpython，有 pypi 包 和  包(支持代码高亮)，不过都是英文版的。这个项目的原作者，是一个名为Satwik Kansal的印度小哥。GitHub上的介绍称，在深度学习和去中心化应用方面是一个“老司机”。目前，英文版资源，标星已经8.3k了。中文版：英文原版：最后，了解更多前沿科技，请关注我们的知乎号："
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",王树义,如果你一直想学Python，但是不知道如何入手，那就别犹豫了。这篇文章就是为你写的。随着数据科学概念的普及，Python这门并不算新的语言火得一塌糊涂。因为写了几篇用Python做数据分析的，经常有读者和学生在留言区问我，想学习Python，该如何入手？我经常需要根据他们的不同情况，提出对应的建议。这样针对性虽强，但效率不高。这个问题，我还是写出来，让更多的人一同看到吧。有几位出版社的编辑，给我发私信，鼓励我赶紧写一本Python教材出来。我暂时还没有写Python基础教程的计划。因为在我看来，现有的学习资源了。有现成的资源和路径，为什么许多人依然在为学Python犯愁呢？因为学习有个效率问题。Python语法清晰明快，简单易学。这是Python如此普及的重要原因。但是，选择合适的Python学习方式，需要跟你自身的相结合。人群划分的标准是什么？不是你是否计算机相关专业，也不是你是否已经工作，而是一个重要的指标——你的能力。你可能觉得我说的话没有信息含量。自律能力强，学得更好，地球人谁不知道？可是，自律不够强的人，难道就注定什么也不能学了？当然不是。每个人的性格都有不同的特点，没有绝对的高下之分。不信你听听先生的相声《日遭三险》，就明白了。自律能力也是这样。只要你能清楚认识自己，就能以更高效的方法来学习新知识和技能。下面我们分类探讨一下，不同自律能力的人，该如何学Python，才能更高效。咱们先从自律能力的人说起。这样的同学，往往是三分钟热度。偶然受到了刺激，发奋要学习Python，以便投入数据科学的事业中。他会立即跑到图书馆或者书店抱回来一本《》的书开始啃。结果X天还没到，就顺利跑完了从入门到放弃的全过程。你没能坚持下来，自己肯定是有责任的。但是最大的问题，在于过度自己的自律能力。这样的同学，我推荐你到Coursera平台上，按部就班学习一门非常好的MOOC——“Programming for Everybody”。推荐这门课，是因为课程质量真是太好了。首先是教材好。这本教材的来源是有故事的。先是 Allen B. Downey 写了一本开放书籍 “Think Python: How to Think like a Computer Scientist”。这本书在Amazon上的评价是这样的：Charles Severance觉得这本书写得太好了，想把它作为教材。于是征得作者同意，大篇幅借鉴了这本书的内容架构，编写了一本 “Python for Informatics”。Charles写作这本书的时候，同时开放推出了iBook格式。里面就包含了自己的授课视频，供学生直接观看学习。后来，Charles用这本书扩展，做成了一门MOOC。2015年上线不久，硅谷资深工程师就都争相学习。Charles深谙课程迭代的技艺。他不断添加内容，完善课程体系，将一门课发展成一个专项课程(Signature Track)，并且将教材升级为 “Python for Everybody: Exploring Data In Python 3”在目前全球MOOC口碑榜上，Charles的这门课一直名列前茅。这个专项课程深入浅出讲解Python本来就很简单的语法，而且还用数据科学的一些基础工作任务，带动你去使用Python语言写简单项目。这种扎实的训练过程可以增强你的信心，激发兴趣。对于自律程度低的同学来说，下面这个特性——一切工作都有时限。Coursera上的课程，每周的任务很明确。练习题正确率如果不能达到80%，就不能过关。到了截止日期，如果你不能完成全部练习和课程项目，就拿不到证书。老师在前面引领你，助教在旁边督促你，平台用时间表提醒你，论坛上的同学们在用同侪压力推挤你……想偷懒？想三天打鱼两天晒网？很难。如果你的自律能力中等偏上，那么你可以选择的面就宽了。这里我给你推荐另一个MOOC平台，叫做Datacamp。我第一次接触Datacamp，是在2015年初。那时我在Coursera上选修杜克大学的统计学课程 “Statistical Inference”，配套的练习就在Datacamp上。当时这个平台就给我留下了非常深刻的印象，因为代码的运行都采用了云环境。学习者不需要在本机安装任何环境，一个支持HTML5标准的浏览器就能带给你完整的学习体验。对初学者来说，这种入门方式太好了。要知道，许多人的学习热情，就是被环境配置和依赖软件包安装的坑埋掉的。两年之后，Datacamp已经迭代得更为强大。你可以打开首页的Data Scientist with Python这个学习路径，查看其中已经提供的20门课程。这些课程涵盖了从Python基础，到数据处理，直至人工智能和深度神经网络的方方面面。所有的课程设计，都是短小精悍的。一般不超过4个小时，就可以完成某一主题的学习。这样你学起来毫不费力，可以在相当短的时间内获得反馈（练习题自动评分）和成就感（证书）。这个平台的课程，进度完全由学习者。所以我把它归纳为适合有一定自律能力的学习者。它既可以给你即时的回馈，让你时刻了解自己所处的位置进度，不会迷失方向，又能充分体验自主学习的乐趣。Datacamp的课程，一般都是第一部分免费开放。后面部分购买后才能解锁学习。如果你对自己的学习能力和毅力有信心，可以购买一个完整时间段（例如一年）的课程。在此期间，所有平台上的课程，你都可以学习，并且可以在通过后获取证书。这样的购买方案本身已经有优惠，而且每年都会有特定时段的大幅打折促销，非常划算。建议放到购物车里面多关注。这是我在Datacamp拿到的深度学习框架Keras课程证书。确实只需要几个小时的时间就能学完。成就感还是蛮强的。前面提到的课程费用不菲。Coursera上每门课平均价格在49美元左右。对来自发展中国家的学生群体，Coursera可以提供助学金。你可以根据自己的需求如实填写申请表，来获得资助。对于自律能力强的同学来说，你的选择可以变得非常简单直接——可以用最受推崇的教材，自己看书学习。的教材，其实是没有的。正如西谚有云：这个世界上，就没有哪件东西大家都说好。但口碑非常好的教材是存在的，例如这本起了个怪名字的《笨办法学Python》(Learn Python the Hard Way)。千万不要被名称迷惑，望文生义觉得这是一本糟糕的Python入门教程。恰恰相反，这本书的设计，非常适合人们的认知规律。我们学东西，由浅入深，由易到难，逐步递进。如果一味追求新知，那么之前学的东西会很快遗忘。如果总是原地打转，会带来枯燥和无聊的感觉。还记得高三做的那一年卷子吧？好的教科书，应该在每一个章节给学习者提供新的知识和内容，提出足够的挑战。但是挑战性不能高到让学习者产生挫败感而放弃。同时也不能忽视在后续内容中把前面所学知识改换面目不断螺旋上升式重复出现。只有这样才能巩固所学，让学习者感受到基础知识的作用，增强学习的愉悦感。这么说有些抽象，实际上有一本英语教材非常符合上述认知规律。就是我在课堂上和文章里反复推荐过的这一套教材：《》也是一本这样的书。你需要做的就是把书打开，同时打开一个好用的代码编辑器，开始按书中要求敲代码、运行代码、改代码……下图是我当初学习时，照着这本书敲的代码。书中对Python基础内容训练的完备性，至今者。顺便说一句，这本书有中文版哦。所以如果你英语不好，完全不用担心。嘱咐一句，英语真该好好学。拓宽的不仅是你的眼界，也增加了你可能获得的机会。考虑到仔细阅读这部分的读者都是自律性很强的人，我就不用多说了。三条基本的Python入门路径讲完了。通过对自己自律能力的清晰理解，相信你可以找到一种适合自己逐渐学习和掌握Python的方式。但是完成了读书和听课，是不是就完事大吉了？当然不是。许多人在这里犯了错误。他们以为拿到了证书，或学完了教材，就算是真正掌握了Python。然后把这门语言丢弃在一旁，去刷美剧和小说了。相信我，你会的。如果你对于长期不接触的东西从不遗忘……去医院检查一下吧。大部分人的记忆模式，都是这个样子的：若不加以干涉，不出一个星期，你就能把学到的新知识几乎忘光。如果你不希望自己辛苦学来的Python知识被如此轻易浪费掉，怎么办？你应该实践。实践Python技能，未必一定要找个世界500强企业的核心技术部门，“996”工作N年才能完成。你可以从生活中寻找各种有趣的问题，然后思考能否用Python编程来解决它。我真正觉得自己了Python，就是在完成了我的第一个github项目之后。项目非常简单，就是用Python作为胶水语言，把一系列工具连接在一起。可以把Markdown撰写的内容随心所欲一键变化成各种格式。格式包括而不限于：其中部分功能我正陆续发布在github公开项目中，地址在。相应地，我也做了介绍。这个小项目，我从2014年开始做。实话实说，现在回头看当时的代码，简直惨不忍睹。但是如果你逐渐对自己的代码有了这种感觉，证明你在进步。不要指望自己一出手就能写出代码，要把“迭代”两个字时刻装在心里。这样你才能容忍自己的笨拙，不断提高。正如古人说的那句：我在做这个项目的过程中，曾经遇到了中文编码、隐私信息存储、文件名空格处理、绝对与相对路径、发布流程划分、功能解耦合、Web图片地址附带参数……等等一系列的问题。通过回顾用git版本控制工具记载下来的日志，以及版本对比功能，你可以清楚看到自己是在何时利用什么方法解决了这些问题。然后别忘了，给自己工具箱里的新增小技能打个勾。一个个小问题逐渐被你攻克的时候，你才能真正感受到所学技能的价值，并且点滴积累自信。你学会Python了吗？你是用什么方法学会的？可否把你的学习心得体会分享给大家？对本文推荐的资源和路径，你有什么不同的意见，或者更好的建议？欢迎留言，记录下你的思考，我们一起交流讨论。喜欢请点赞。还可以微信关注和置顶我的公众号。如果你对数据科学感兴趣，不妨阅读我的系列教程索引贴《》，里面还有更多的有趣问题及解法。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",四喜Clion,首先，我个人是参加过培训的，我是因为自学的进度非常慢，而且太考验自律了，本人综合对自己的了解才选择的培训。当然我也还是蛮赞同自学的，不过要根据自己的实际需求和情况来决定，毕竟自学的时间要长，在有些问题上解决上也要慢很多，如果时间充裕自律相对较好的还是可以选择自学的，下面是我的整理过的一篇文章，希望能对想要学习的伙伴有一些帮助吧~之前有一个回答被好多人看到，就有很多伙伴私信我说要了解学习python的一些事情，有的刚刚毕业，有的不是理科生，有的是工作了想转行，基本都是零基础，该怎么学习，其实我还是想说，python的话是相对入门比较简单的，零基础也是完全没有问题的，不过如果想要参加培训的话我个人建议可以自己先找一些线上课程自学一下，现在网上的课程也非常的多，这里个人可以多寻找两个机构的课程自己先自学一下，一是可以感受一下各个机构的课程教学风格与质量，二是可以感受一下课程难度自己能否理解接受，三是可以判断一下自己是否感兴趣，其实无论是参加培训还是自学，都还是比较需要自己的自学能力的，毕竟还是那句话，师傅领进门修行在个人，也不能完全依靠老师教了你就成神了，当然名师出高徒也是有道理的，不过名师自来都是带勤奋的，有天赋的，毕竟名师也是靠这两样才成为名师的，咱们都是普通人还是自己多吃点苦勤奋一点为好，我认为老师只是在我们学习路上，传道，授业，解惑的人。我是参加过培训的哈，我整理了一下我参加的培训班一些免费课程和资料，我放在这里，有需要的伙伴可以参考学习一下哈。我也整理过一篇文章是我学习python准备的一个经历，大家感兴趣的可以看一下。首先自学肯定是要先学会安装python，下面附带python安装包的下载     ---------------------------------------------------------------------------------------------有很多伙伴私聊我说自学的问题，这里我分享一个自学的思路吧学习python，首先根据自己零基础的情况下，为什么学习Python作为核心问题，进行了一个自我定位以及目标定位，我认为只要有一个目标，那么就找方法去打成目标就行了。完全零基础，选择学习Python主要还是因为看到大家都说Python是相对简单，比较好入门IT行业的，而目的也是希望学习完Python可以找到一份相应的工作。当然，也有很多人可能已经从事其他编程工作，但是想要学习Python以来丰富自身，提升自身的核心竞争力，我觉得这样应该会比我这类完全零基础的学习要容易快速的很多，我也搜查了一些学习方法的问答帖子，里面也看到很多推荐的学习方法，有推荐书籍的，有推荐网课的，我开始认为，看书应该是比较好的选择，因为著作成书籍，表明内容上是相对有一定的权威和系统的，同时，想到从小都是书本学习，这更能让我信服，于是我就购买了书籍，开始了我的学习计划，可是，在半强迫自己的情况下，我看了三天半书籍实在是看不下去了，原因一，看书真的太乏味了，看着看着就会心不在焉，总是走神。原因二，这个时候我对代码没有概念，有些文字都要读两三遍才会理解意思，越难理解就越不想看书，这种感觉就是上学时我看数学，英语书一模一样的感觉。很显然，看书学习是不适合我了，看书不行，于是我就想着还是找网上的视频教程学习吧，上网一搜，真的是各家机构的教程也是琳琅满目，还真的让我不知道从哪开始学起了，这个时候真的是想有一位前辈可以给我指点一下迷津，告诉我应该先学什么，再学什么，哪些是重点知识，哪些是了解就好，就是可以给我一些学习的建议，于是我想那我可以先加入一些技术学习交流群，在里面应该可以认识到一些学习的人，于是我就开始大量的搜索加入学习群，于是在里面开始咨询学习方法，但是，这个时候我又发现，我好像一张白纸，我想问一些问题，可是我不知道该怎么问，我也只能问大家都是怎么学习得，群内的朋友也都还很热情，也和我说了很多学习方式，不过我发现每个人都有各自的学习方式，各自都有各自的理论和优势，在那么多的方法面前我再一次的有些混乱，又不知道哪一方法适合我，于是，我想到千人千面，每个人有每个人的想法，我咨询的人越多，获取的信息越多可能我就会越乱，于是我决定，于是，我并没有先着急的就找教程视频来直接学习，我现在想知道就是，应该先学什么，掌握哪些知识之后，再学什么，我觉得我应该先整理一套相对看上去系统的教程，虽然我最希望可以找到一个人给我一些这类的指引，但是奈何没有找到，那就只能自己去整理了，我根据我买的书籍目录，以及查了一些培训机构的学科介绍，教程大纲内容，进行了一个统计对比，发现其实学习的内容路径也还是有它一定的规律，那我就整理了一份知识点的目录学习路径，我按照我整理的这个学习路径上的知识点目录去查找对应的教程，这样就整理了一套自己的学习资料，整理学习路径和教程，利用了我比较多得时间，不过整理好了那么就可以开始学习了。但在查找教程的时候，又走了一些弯路，我当时只想到只要按照我整理的这个目录找到对应的教程就好了，可是在学习的时候，还是觉得知识点之间的衔接有些杂乱无章，而且每一个知识点都是不同机构课程风格不同得教程视频，这让我学上去有些别扭，而且有的老师讲的我很喜欢听，有的就不是很喜欢，于是，我就又想，那我就找我喜欢这个老师的课程就好啦，可是我找了两三天，同一个老师的教程是非常难找到公开的全套教程，这个我想也可以理解，老师也可能没时间和精力来从零开始录制全套教程，而且老师也是要工作赚钱养家生活的，于是我想那我可以找同一个机构的教程吧，这样也能最起码是课程风格一致，于是我就找到了我我认为课程比较好得教程机构，又将我的学习资料重新的整理替换了一下，果然我觉得学习感觉好了一些，而且我又找到他们的客服，要到了他们课程的一些配套资料，这对我学习来说起到了更加的有效帮助。最后，在学习完我整理的学习知识教程之后，又遇到了一个瓶颈，就是学习完知识点内容，掌握的也是七七八八，之后又不知道该怎么做了，不知道自己学习的有没有达到可以找工作的条件，于是我又查询了一些资料，可一些招聘信息，了解的一些信息主要要求说是需要项目经验，需要一些项目功能技术的掌握，那我的理解就是，已经掌握了基础知识，企业招聘人员需要掌握一些项目技术能力，去帮助解决处理问题，也就好像，我按照我的这个大致理解，我就仔细了解了一下Python主要可以从事哪些方向，我就根据我比较喜欢的方向看了一下招聘信息，然后根据上面的普遍要求，进行了学习。最后就整理包装了一下简历，尝试着投简历找工作，当然面试也并不是顺利，刚开始的面试是还慌乱，面试也是没有任何结果，不过我是在每次面试中总结经验，收集好面试问题，回来在好好准备，为下一次面试做知识储备，就这样我面了试大概有将近二十家，终于也是找到了一个算是实习岗位的工作，我想着先做着，这个时候应该先到企业中去学习一些真实的项目经历比较重要。最后我总结一下我学习过程中我认为比较重点的内容把至于找工作面试的事情我就不详细的写了，手敲了这么多，有点累了，最后希望我的建议可以对想要学习的伙伴有一点点帮助吧。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",gashero,"我以往学过很多种编程语言，唯独python学了以后迅速进入应用阶段，用起来得心应手。这里除了python本身易学易用外，我寻找到学习路径上的结点，然后发现了我熟练使用python的一个重要结点。我在2005年开始从《简明Python教程》入门。随后做过一些千行上下的小程序。随后也想大部分人一样开始迷茫python有啥用。迷茫时继续看书，读了《Python2.1宝典》，并记录了21.2万字的笔记。这也是我所有笔记中篇幅最大的。我字数过7万字的也只有12篇而已。python大类是204万字。没有编程经验，而希望从Python入门学编程的同学，在学习如下列出的Python库之前，还是需要先把基础学好的。推荐一下的Python入门课。他们的免费教程适合学习预算较少的同学，通过20天完成Python基础入门知识的学习。如果学习预算比较宽裕，可以尝试付费课程，会有代码题练手，也有专门助教解答学习中遇到的问题。点击关注后回复【夜曲入门1】即可获得Python入门完整免费教程，学习编程更轻松！而这本书对我后续影响深远，解释了好多个初学者关心的问题。比如程序如何组织，python有哪些好用的库，python适合做哪些程序，如何写界面、服务器、数据存储等等。大家可以看看我笔记记录的目录，有些没有子目录的是没看的：目录1   认识Python1.1   启动Python解释程序1.2   用变量和表达式进行试验1.2.1   袖珍计算器1.2.2   变量1.3   定义函数1.4   运行Python程序1.5   循环和控制1.5.1   整除1.5.2   循环1.5.3   采用if语句的分支1.5.4   中断和继续1.6   列表和元组1.6.1   元组1.6.2   切片和切换1.7   词典1.8   读写文件1.9   样例程序：字频率1.10   加载及使用模块1.11   创建类1.11.1   一些快速对象术语1.11.2   对象定位、Python风格1.11.3   访问类成员1.11.4   示例：点类1.12   推荐的阅读资料2   标识符、变量和数字类型2.1   标识符和运算符2.1.1   保留字2.1.2   运算符2.2   数字类型2.2.1   整型2.2.2   长整型2.2.3   浮点数2.2.4   虚数2.2.5   处理数字类型2.3   给变量赋值2.3.1   简单的赋值语句2.3.2   多个赋值2.3.3   扩充赋值3   表达式和字符串3.1   表达式3.1.1   比较数字类型3.1.2   复合表达式3.1.3   复合表达式3.1.4   运算符的优先顺序3.2   字符串3.2.1   字符串文字3.2.2   处理字符串3.2.3   比较字符串3.2.4   Unicode字符串文字3.3   在简单类型之间进行转换3.3.1   转换为数字类型3.3.2   转换为字符串4   第四章 高级数据类型4.1   采用序列组合数据4.1.1   创建列表4.1.2   创建元组4.2   处理序列4.2.1   采用算术运算符连接和重复4.2.2   比较和成员资格测试4.2.3   访问序列中的某部分4.2.4   采用for...in进行循环4.2.5   使用序列实用程序函数4.3   使用附加的列表对象特征4.3.1   附加运算4.3.2   列表对象方法4.4   用词典映射信息4.4.1   创建并添加到词典4.4.2   访问和更新词典映射4.4.3   附加的词典运算4.5   理解引用4.5.1   对象身份4.5.2   计算引用的数目4.6   复制复合对象4.6.1   浅副本4.6.2   深副本4.7   标识数据类型4.8   处理数组对象4.8.1   创建数组4.8.2   在类型之间转换4.8.3   数组方法和运算5   控制流5.1   用if语句做出决策5.2   使用for循环5.2.1   for循环的剖析5.2.2   循环示例：给字符串编码5.2.3   ranges和xranges5.2.4   中断、继续和else子句5.2.5   在中途换马5.3   使用while循环5.4   抛出和捕获异常事件5.4.1   扩散异常事件5.4.2   处理异常事件5.4.3   有关异常事件的更多信息5.4.4   定义和产生异常事件5.4.5   用finally进行清除5.5   用断言进行调试5.5.1   Python中的断言5.5.2   触发断言5.6   示例:Game of Life6   程序组织6.1   定义函数6.1.1   通过对象引用传递6.1.2   有关参数的所有信息6.1.3   任意参量6.1.4   应用：从元组中传递参量6.1.5   带有一点功能性的编程6.2   用模块为代码分组6.2.1   布局模块6.2.2   获取模块的清单6.3   导入模块6.3.1   导入时还会发生什么现象6.3.2   重新导入模块6.3.3   外来的导入6.4   定位模块6.4.1   Python路径6.4.2   编译文件6.5   理解作用域规则6.5.1   是局部还是全局6.5.2   列出名字空间的内容6.6   将模块组合为包6.7   按计划编译和运行7   面向对象的Python7.1   概述面向对象的Python7.2   创建类和实例对象7.2.1   创建实例对象7.2.2   有关访问属性的更多信息7.3   从其他类中派生新类7.3.1   多继承7.3.2   创建定制的列表类7.3.3   创建定制的字符串类7.3.4   创建一个定制的词典类7.4   隐藏私有数据7.5   识别类成员7.6   重载标准行为7.6.1   重载的基本功能7.6.2   重载数字运算符7.6.3   重载序列和词典运算符7.6.4   重载按位运算符7.6.5   重载类型转换7.7   使用弱引用7.7.1   创建弱引用7.7.2   创建代理对象8   输入和输出8.1   打印到屏幕8.2   访问键盘输入8.2.1   raw_input8.2.2   input8.3   打开、关闭及定位文件8.3.1   open8.3.2   文件对象信息8.3.3   close8.3.4   文件位置8.4   写文件8.5   读文件8.6   访问标准I/O8.7   使用类似文件的对象9   处理字符串和正则表达式9.1   使用字符串对象9.1.1   设置字符串格式的方法9.1.2   更改字符串大小写的方法9.1.3   字符串格式测试(is方法)9.1.4   字符串搜索方法9.1.5   字符串处理方法9.2   使用字符串模块9.2.1   字符种类9.2.2   杂项函数9.3   定义正则表达式9.3.1   正则表达式的句法9.3.2   反斜线和未处理的字符串9.3.3   字符组和其他反斜线魔数9.3.4   不贪婪的匹配9.3.5   扩展9.3.6   创建和使用正则表达式对象9.3.7   使用正则表达式对象9.3.8   在不编译的情况下应用正则表达式9.4   使用匹配对象9.4.1   group([groupid,...])9.4.2   groups([nomatch])9.4.3   groupdict([nomatch])9.4.4   start([groupid]),end([groupid]),span([groupid])9.4.5   re,string,pos,endpos9.5   把字符串当作文件处理9.6   为文本编码9.6.1   使用Unicode字符串9.6.2   读写非ASCII字符串9.6.3   使用Unicode数据库9.7   设置浮点数的格式9.7.1   fix(number,precision)9.7.2   sci(number,precision)10   处理文件和目录10.1   检索文件和目录信息10.1.1   逐点方法10.1.2   I-want-it-all方法10.2   建立并仔细分析路径10.2.1   联接路径部件10.2.2   把路径分为几块10.2.3   路径的其他修改工具10.3   列出目录及其匹配文件名10.4   获得环境和参量信息10.4.1   环境变量10.4.2   当前工作目录10.4.3   命令行参数10.5   示例：递归的实用程序10.6   复制、重命名及删除路径10.6.1   复制和链接10.6.2   重命名10.6.3   删除10.7   创建目录和临时文件10.8   比较文件和目录10.9   处理文件描述符10.9.1   通用文件描述符函数10.9.2   管道10.10   其他的文件处理技巧10.10.1   任意访问文本文件中的信息行10.10.2   使用内存映射文件10.10.3   重复处理几个文件11   使用其他操作系统服务11.1   执行shell命令和其他程序11.2   产生子进程11.2.1   popen函数11.2.2   spawn函数11.2.3   fork11.2.4   进程管理和终止12   存储数据和对象12.1   数据存储概述12.1.1   文本与二进制对比12.1.2   压缩12.1.3   字节次序(Endianness)12.1.4   对象状态12.1.5   目的地12.1.6   在接收端12.2   加载并保存对象12.2.1   采用pickle进行转换12.2.2   marshal模块12.3   示例：通过网络移动对象12.4   使用类似数据库的存储12.5   转换到C结构或从C结构转换回来12.6   把数据转换为标准格式12.6.1   Sun的XDR格式12.6.2   其他格式12.7   压缩数据12.7.1   zlib12.7.2   gzip13   访问日期和时间13.1   在Python中告知时间13.1.1   滴答13.1.2   时间元组13.1.3   秒表时间13.2   时间格式之间的转换13.3   解析及打印日期时间13.3.1   有趣的格式13.3.2   解析时间13.3.3   定位13.4   访问日历13.4.1   打印月历和年历13.4.2   日历信息13.4.3   闰年13.5   使用时区13.6   允许两位数字的年14   使用数据库14.1   使用基于磁盘的词典14.2   DBM示例：跟踪电话号码14.3   基于磁盘的高级词典14.3.1   dbm14.3.2   gdbm14.3.3   dbhash14.3.4   使用BSD数据库对象14.4   访问关系数据库14.4.1   连接对象14.4.2   事物处理14.4.3   游标对象14.5   示例：""类似声音的""查询14.6   检验相关的元数据14.7   示例：创建审计表14.8   DB API的高级特征14.8.1   输入和输出大小14.8.2   可重新使用的SQL语句14.8.3   数据库的库信息14.8.4   错误层次15   联网15.1   联网背景15.2   处理地址和主机名15.3   与低层通信15.3.1   创建和撤消套接字15.3.2   连接套接字15.3.3   发送和接收数据15.3.4   使用套接字选项15.3.5   转换数字15.4   示例：多点传送的聊天应用程序15.5   使用SocketServers15.5.1   SocketServer族15.5.2   请求处理程序15.6   处理Web浏览器请求15.6.1   BaseHTTPRequestHandler15.6.2   SimpleHTTPRequestHandler15.6.3   CGIHTTPRequestHandler15.6.4   示例:形成处理程序CGI脚本15.7   在不使用线程的情况下处理多个请求15.7.1   asyncore16   理解Internet协议17   处理Internet数据18   分析XML和其他标记语言18.1   标记语言基础知识18.1.1   标记用于元文本18.1.2   标记规则18.1.3   名字空间18.1.4   处理XML18.2   分析HTML文件18.2.1   HTMLParser方法19   使用Tkinter19.1   Tkinter简介19.2   创建GUI19.2.1   用部件建立界面19.2.2   部件选项19.3   部件布局19.3.1   packer选项19.3.2   网格选项19.4   示例：Breakfast按钮19.5   使用常见选项19.5.1   颜色选项19.5.2   大小选项19.5.3   行为选项19.6   搜集用户输入19.7   示例:打印奇特的文本19.8   使用文本部件19.9   建立菜单19.10   使用Tkinter对话框19.10.1   文件对话框19.11   实例：文本编辑器19.12   处理颜色和字体19.12.1   颜色19.12.2   字体19.13   绘制图形19.13.1   画布部件19.13.2   处理画布项19.14   使用计时器19.15   实例：反弹图片20   使用高级Tkinter部件20.1   处理事件20.1.1   创建事件处理程序20.1.2   绑定鼠标事件20.1.3   绑定键盘事件20.1.4   事件对象20.2   实例：绘图画布20.3   高级部件20.3.1   列表框20.3.2   标尺20.3.3   滚动条20.4   实例：颜色方案定制程序20.5   创建对话框20.6   支持拖放操作20.7   使用光标20.8   设计新部件20.9   其他的Tkinter功能20.10   其他的部件20.11   学习更多内容21   用wxPython建立用户界面21.1   介绍wxPython21.2   创建简单的wxPython程序21.3   选择不同的窗口类型21.3.1   管理窗口21.3.2   非管理窗口21.4   使用wxPython控件21.4.1   常用控件21.4.2   树形控件21.4.3   编辑器控件21.5   控制布局21.5.1   指定坐标21.5.2   筛选器21.5.3   布局限制21.5.4   布局算法21.6   使用内置对话框21.7   设备相关内容绘图21.8   添加菜单和快捷键21.9   访问鼠标和键盘输入21.10   其他的wxPython特性21.10.1   剪贴板、拖放和光标21.10.2   图形21.10.3   日期和时间21.10.4   字体21.10.5   HTML21.10.6   打印21.10.7   其他22   使用Cruses23   建立简单的命令解释程序24   播放声音24.1   声音文件基础24.2   播放声音24.2.1   在Windows上播放声音24.2.2   在SunOS上播放和记录声音24.3   测试音频文件24.4   读取和编写音频文件24.4.1   用aifc来读取和写入AIFF文件24.4.2   用sunau读取和写入au文件24.4.3   用wave读取和写入WAV文件24.4.4   实例：倒转音频文件24.4.5   读取IFF大块数据25   图像处理25.1   图像基础25.2   识别图像文件类型25.3   在颜色系统间转换25.3.1   颜色系统25.3.2   从一种系统转换到另一种系统25.4   处理原始图像数据25.5   使用Python图像库25.5.1   检索图像信息25.5.2   复制与转换图像25.5.3   使用带有Tkinter的PIL25.5.4   裁剪和调整图像尺寸25.5.5   修改像素数据25.5.6   其他PIL功能26   多线程26.1   理解线程26.2   执行、跟踪和终止线程26.2.1   使用thread模块来创建线程26.2.2   使用threading模块开始和停止线程26.2.3   线程状态和threading下的信息26.2.4   在threading下找到线程26.2.5   等待线程完成26.3   避免并发问题26.3.1   Thread锁定26.3.2   threading锁定26.4   防止死锁26.5   实例：从多个URL下载26.6   转入线程化代码26.7   将线程与队列编织在一起26.8   技术要点：并发是如何发生的26.9   更多信息27   调试、配置和优化27.1   调试Python代码27.1.1   开始和停止调试程序27.1.2   检查状态27.1.3   设置断点27.1.4   运行27.1.5   Aliases27.1.6   调试技巧27.2   使用docstrings工作27.3   自动测试27.3.1   使docstrings和代码同步27.3.2   单元测试27.4   发现瓶颈27.4.1   配置代码27.4.2   使用Profile对象27.4.3   校准配置程序27.4.4   定制统计27.5   常见优化技巧27.5.1   排序27.5.2   循环27.5.3   I/O(输入/输出)27.5.4   字符串27.5.5   线程27.6   扔掉废物-回收站27.6.1   引用记数和Python代码27.6.2   引用记数和C/C++代码28   安全与加密28.1   密码检查28.2   在限制环境中运行28.2.1   rexec沙盒28.2.2   使用要塞类(class fortress)28.3   创建消息指纹28.3.1   MD528.3.2   SHA28.3.3   其他用途28.4   使用20世纪40年代的加密方法29   编写扩展模块30   嵌入Python解释程序31   数值计算32   使用NumPy33   解析和解释Python代码34   创建全世界可用的应用程序34.1   国际化和本地化34.2   为多种语言准备应用程序34.2.1   NLS示例34.2.2   这一切的含义34.3   与地域相关输出的格式化34.3.1   修改地域34.3.2   与地域相关的格式化35   定制导入行为36   分布模块和应用程序37   Windows平台37.1   使用win32all37.1.1   数据类型37.1.2   错误处理37.1.3   找到自己所需要的37.2   示例：使用某些Windows API37.3   访问Windows注册表37.3.1   用win32all访问注册表37.4   示例：设定IE主页37.4.1   键的创建、删除和定位37.4.2   示例：键的递归删除37.4.3   其他注册表函数37.4.4   用_winreg访问注册表37.5   使用msvcrt goodies37.5.1   控制台I/O37.5.2   其他函数38   Unix兼容模块就是这样一本老掉牙的书，帮助我迅速把python用到了众多领域。其关键不在于老，而是这本书列出了很多库，让读者知道这些库能解决什么问题，并拓展读者的思路。在python-cn邮件列表里，大家的一个常见话题也是某个需求不知用什么模块搞定。所以，对于希望系统学习python的同学。python语言本身的内容很少。想要让python发挥更大作用，就需要了解更多的库。有如下几个办法：1、python标准库的文档，每个模块都把简介看完，这会涉及上百个模块。2、去网站，会看到各个应用领域的推荐框架，把每个框架的hello world都跑通。3、常见书籍的目录在各大网上书店是公开的，多去收集整理目录中提到的模块，去了解其用途。如上三个步骤可能要花掉几十甚至一百多小时。带来的收益也会非常可观，当你需要做某个事情时会发现有足够多的python积木，等着你来搭建起整个系统。"
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",启迪云,"在别的地方看到大神总结，供参考。热门资源博客 Mybridge AI 比较了 18000 个关于 Python 的项目，并从中精选出 45 个最具竞争力的项目。我们进行了翻译，在此一并送上。这份清单中包括了各不相同的 20 个主题，以及一些资深程序员分享使用 Python 的经验，值得收藏。Mybridge AI 的排名结合了内部机器评估的内容质量和各种人为因素，包括阅读次数和阅读时长等。对于 Python 的初学者，我们推荐以下这些课程：REST API：使用 Python，Flask，Flask-RESTful 和 Flask-SQLAlchemy 构建专业的 REST API ［12,602 个推荐，4.6 / 5 星］算法交易：用于财务分析和算法交易的 Python，主要学习包括 numpy，pandas，matplotlib，quantopian，finance ［8,077 个推荐，4.6 / 5 星］年度开源 Python 项目 ［平均 4,078 星］机器学习年度最佳文章1.回顾 Python 交互式编码中所要面对的挑战（算法和数据结构）本文对算法编码和数据结构中的问题提出了简单易懂又切实可行的方案。2. Python 中算法和数据结构的最小样本如何让 Python 中的数据结构和算法最小、最干净？3.最重要的 Python 算法--PygorithmPygorithm 是一个纯 Python 风格编写的模块，通过导入所需的算法，获得相应的代码、时间复杂性等。这是一个开始学习 Python 编程的好方法，能够帮助初学者学习并实现 Python 中所有算法。4. 一个有趣又鲜为人知的 Python 代码片段集合—wtfPython5.一个关于如何从 Python 脚本到打包项目的标准化指南6.Python 列表生成器的教程在这份教程中，你将能够学习到如何在 Python 中有效地使用列表生成器来创建列表，替换(嵌套) for 循环以及使用 map(), filter(), reduce() 函数等。文章首先简单回顾了 Python 中列表的基本概念，并与 Python 中其他的数据结构进行比较。接着讲解了列表生成器的学习。文章还讲解了 Python 列表背后的数学知识，创建列表生成器的方法，以及如何在 for 循环或 lambda 隐函数中重写它们。7.如何使用 Dunder (Magic、Special) 方法来丰富你的 Python 类Dunker 是 Python 中的一种特殊方法，通过双下划线开始和结束的形式存在，例如 __init__ 来丰富类的预定义方法。8.如何使用 Python 中的 Scrapy、SQL 和 Matplotlib 等库进行网页抓取，并获取网页数据分析你可以通过这篇文章学习到网页爬取知识，并用于实践中。9.高级的网页抓取教程：绕过“403 禁止”，验证码等问题10.掌握 Python 的网页抓取技巧来获取你所需要的数据11.如何使用 Twilio、Python 和 Google 自动化婚礼的进程12.如何用 Python 在 Medium 上找到有趣的人13.制作 Reddit+Facebook 的信息箱15.我在 Instagram 上用 Python 写的（让我拥有了 2500 个粉丝，所花的服务器成本只有 5 美元）15.权威指南：Python 的 Excel 教程通过这个教程，你可以了解如何使用 Python 读取和导入 Excel 文件，如何将数据写入这些电子表格。16.Python 和 Googgle 电子表格17.Python 中的金融：算法交易这是一份 Python 与金融应用的教程，在此你能学习到算法交易的基本知识及相关内容。18.Python 中的金融教程—股票价格及相关数据介绍19.用 Python 分析加密货币市场是如何表现？加密货币价值突然出现高峰和低谷的原因是什么？不同 altcoins 市场是不可分割的或基本独立的？ 我们如何预测接下来会发生什么？这篇文章将简单地介绍如何使用 Python 来分析加密货币。文章通过一个简单的 Python 脚本来检索，分析和可视化不同加密货币上的数据。在这个过程中，文章还将揭示这些波动剧烈的市场行为以及一个有趣的演变趋势。20.学习并构建一个区块链毫无疑问，区块链这项新颖的技术是计算的奇迹。区块链技术的出现引发了新的全数字货币，如比特币和莱特币，而这些货币并非由中央当局发行或管理。区块链也以 Ethereum 这样的技术形式革命化了分布式计算，并引入了智能合约等有趣的概念。这篇文章将会帮助你学习并理解区块链的工作原理。通过这篇教程，你将学习到一个功能强大的区块链，并掌握它们的工作流程。21.如何构建一个最小的区块链本文将用少于 50 行的代码（Python2）来创建一个最简单、最小的区块链。22.用 Python 构建一个视频合成器视频合成器是利用音频输入来创建视觉信号的设备，自上世纪 60 年代以来，已有很长的历史。这篇文章将用 Python 编写一个基本的视频合成器，并使用 aubio 进行 Onset 目标检测。23.用 Python 处理每秒 100 万个请求用 Python 每秒能够达到 100 万个请求吗？为了节省服务器价格，最近很多公司正在从 Python 向其他编程语言中迁移。但实际并不需要。Python 社区最近在性能提升方面做了很多工作。CPython 3.6 通过新的字典提高了整体解释器的性能。由于引入了更快的调用约定和字典查找缓存，CPython 3.7 将会更快。对于数字处理任务，你可以使用 PyPy 进行代码编译。你还可以运行 NumPy 的测试套件，该测试套件现在已经改进了 Python 与 C 语言扩展的整体兼容性。在随后的更新版本中，PyPy 预计将与 Python 3.5 兼容。24.Python 很慢，但我不在乎”这篇文章将介绍一些关于 Python 中 asyncio 的内容，并讨论有关 Python 速度的问题。25.Python 中的缓存：如何缓存函数的结果文章将介绍一种快捷的方法来加速 Python 记忆代码。你将看到何时以及如何运用 Python 记忆代码。记忆代码优化你的程序，在某些情况下会加速你的代码运行。26.七步骤带你完整地学习 DjangoDjango 是用 Python 编写的一个 Web 框架。这篇文章是介绍 Django 基础知识的系列教程，共分为七个部分，将分别从安装，准备开发环境，模型，视图，模板，URL 到更高级的主题（如迁移，测试和部署）出发，详细探讨所有的基本概念。27.使用 Django 构建 REST API 的测试驱动方法：第一部分这篇文章将介绍如何利用 Django 来构建一个 REST API 的测试驱动，并详细介绍了每个步骤。28.OI’List 规则这篇博文中我们将介绍 Flake8（pyflakes， 和 mccabe）中的每个规则及相对应的示例。29.使用 Python 和 Flask 开发 RESTful API本文包括以下几部分：30.从 Python 到 Numpy本文通过一种新颖的方式，向量化地集中讲解了如何从 Python 迁移到 Numpy 的学习。另外，本文还包括一些很少提到的使用技巧。31.探索 Python 每种工具包的行长度本文探索了 Python 的流行包，如 NumPy，SciPy，Pandas，，Matplotlib，AstroPy 等。32.NashPy 教程—建立并找到一种简单的游戏平衡博弈论是用来研究理性主体之间的战略互动：当双方试图采用对各自最有益的方式来完成某件事情时，对双方互动行为的研究。这篇文章将采用 Python 中的 NashPy 来研究这种双方博弈的互动行为。33.用 Python 模拟 Chutes 和 Ladders这篇文章将通过 Chutes 和 Ladders 游戏的例子，建立模型并阐述马尔可夫过程的原理。整个分析过程附有 Python 源码，感兴趣的读者可以尝试一下。34.用 Python 分析美国联邦政治行为科学、政治、个人意见和社会政策的交集可能呈现相当复杂的情况。思想和学科的交汇点通常充斥着有争议的观点和基于信仰但缺乏经验证据的议程。这时，数据科学在这方面就显得特别重要，因为它提供了一种以实际事实为基础的考察世界的方法，能够深入了解我们今天所面临的一些最重要的问题。这篇文章我们将用 Python 来分析美国联邦政府的一些政治行为，深入了解政治背后所隐藏的故事。35.用 Python 分析 1000+ 的希腊葡萄酒36.如何用 Python 生成 FiveThirtyEight 图这篇文章将用 Python 的 matplotlib 和 pandas，来学习并查看 FiveThirtyEight（FTE）可视化的核心部分，并教会你使用 Python 来为自己的数据进行可视化。37.使用 Apache Spark 和 Python 为 8000 万 Amazon 产品进行评价打分作者编写了一个简单的 Python 脚本，将亚马逊产品评论数据集中的每类评分数据进行整合，并对这些 Amazon 产品评论数据进行分析打分，以发现用户的喜好。38.使用 Python 进行地理空间分析39.星球：从太空中了解亚马逊，来自 Kaggle 头奖获奖者的采访文章采访了 Kaggle 的“星球：从太空中了解亚马逊”竞赛的获奖者，内容包括他如何使用 11 个微调的，标签关联的结构模型，以及如何避免等。40.从零开始学习 PythonPython 的创建者 Guido van Rossum 曾说过，“Python 是一个高级编程语言，其核心设计理念是让代码具有高度的可读性和简单的语法，程序员可以用几行代码表达自己的想法。”41.重要的 Python 练习清单这篇文章列出了一些重要的练习项目，包括 Python 语言本身和标准库的练习。文章中还有 Python 中不同主题模块的知识。42.API 的设计原则：先思考再编码API 是定义应用程序接口的通用术语，换句话说，就是用户（人或机器）与程序的交互接口。在 Web 开发世界中，API 通常是一个网站，其中包含一系列端点，用于响应客户端请求和结构化文本数据。这篇文章将告诉你为什么以及如何设计一个正确的 API，如何将自己的思想植入到 API 的设计中来构建属于你自己的 API。43.Python 机器学习指南本文将通过清晰地解释和有效的练习，来帮助你深度理解相关的机器学习算法。44.如何学习 Python 编程：6 位经验丰富的 Python 开发者分享了他们的观点对于当下热门的 Python 语言，有太多的教程、书籍、视频和博客文章资源，然而如此多的冗余资料，你该如何选择最佳的方式开始你的 Python 学习之旅呢？这篇文章列出了 6 位 Python 专家分享的学习经验，相信这对于迷茫中的你来说，将受益匪浅。45.如何用 Python 实现强大的数据分析Python 是数据分析的最佳编程语言，这得益于它自带的依赖库。依赖库能够存储，操纵数据，并从数据中获得核心信息，因而在数据科学领域被广泛使用并展现出强大的功能。本文介绍了 Python 在数据科学领域的应用历史以及最新发展。"
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",平凡,另外我作为从本科到现在读博一直是计算机专业，其间也接触过很多的其他专业同学，或是想转行，或是想给自己增加一门技能，都咨询过如何学习python这个话题。通过这个问题，我也将之前的思路理一遍，同时也希望给想要自学python的同学一个完整的教程。Python是一种重要的编程语言，它在数据科学，Web开发，软件工程，游戏开发，自动化等领域得到了广泛的应用。但是学习Python的最好方法是什么？学习Python时，挑战最大的事情就是所有学习网站的枯燥生硬。比如说你想学习如何使用Python进行网站制作，但几乎每个网站都让你花很长时间学习枯燥乏味的Python语法，然后进阶到下一步。这种不匹配使学习Python对新人来说非常令人生畏。拿下面这个例子来说这段代码来自Django的教程，一个流行的Python网站开发框架。经验丰富的Python程序员会觉得这很简单啊。即使是看似简单的几行代码也会让新人明显感觉不适。例如，为什么某些行缩进？是干嘛用的？括号中的东西又是干嘛用的？问题在于你需要了解Python语言的构建基块才能写出有趣的东西。但大多数教程都假定您需要学习 所有的 Python语法，然后才能开始做任何有趣的事情。当您真正想做的是分析数据，建立网站或创建无人机时。这就是导致你的动机消退的原因。在开始在线学习Python之前，问自己为什么要学习它。这是因为这将是一个漫长而痛苦的过程。没有足够的动力，你可能无法坚持到最后。弄清楚动机的好处是可以帮助你弄清楚最终目标，以及一条学习起来轻松有趣的路线。在准备学习Python时，不用有一个确切的项目，一个你感兴趣的领域就可以。例如：不幸的是，这一步不能被跳过。在深入你的兴趣领域之前，学习的基础知识是必要的。但不用花很多时间，因为可以在实战中反复练习。这里有一些很好的资源可以学习基础知识：如果大家有兴趣的话可以先尝试下免费的课程，只需要关注【夜曲编程】发送【免费教程】， 就可以体验了。在对编程有一个大致了解后，可以去报名更完整详细的入门课和进阶课。我大致地看了一下，有很多类别，比如说爬虫课，数据分析，办公效率化等等。可以根据自己的需求进行选择。我认为这个学习软件的优点如下：1 交互式学习，在线的代码编辑器可以让小白无需安装环境就可以进行学习2 合理的课程安排，每天只需要15-20分钟，利用碎片时间学习3 课程设计的非常科学，很多课程以有趣生动的形式进行教授。4 随时随地学习，手机/电脑/ipad都可以学。​在这个竞争压力大的时代，多学一门技能就多一份竞争力，编程也不是遥不可及的东西，轻松愉快的学习是可以做到的。Python语言上手较为简单，学习难度适中，同时也有利于增加就业竞争力，也能再日常的工作生活中切实的提升工作效率。感兴趣的同学关注【， 发送【免费教程】， 就可以体验免费课程。如果觉得还不错可以去报名另外，请注意：，而不是Python2。需要鉴别的是线上有很多“学习Python”资源仍旧已python 2为基础。学习完基本语法后，就可以开始自己做项目了。具体项目是一种学习的好方法，因为它可以运用自己的知识和反复帮助你熟练基础知识。要记住，编程这东西，一旦不用，能力会急速下降。但是，这时侯有网上也充斥着很多的资源，让人难以选择。因此，通常最好使用以及制作好的成体系的结构化的项目，可以一步步的引导你完成整个项目。网上很多资源都提供了结构化的项目，这些项目既可以让你从感兴趣的东西开始，又可以避免陷入学习困境。下面介绍一些不错的项目：一旦完成了一些结构化项目，就可以独自开发项目了，以继续更好地学习Python。在这个阶段会遇到很多的困难，绝大多数的问题都可以在以下得到解答：一旦对掌握了上述技巧，就可以开始发展自己的项目。可以从自己感兴趣的事情开始。例如，在学习编程后不久，我做的就是简单的数据分析，进行一些走势的分析等。以下是寻找有趣项目的一些技巧：最好启动一个小项目，然后慢慢的增加功能，直到完成一个中型甚至大型项目。如果实在没有什么想法，下面有一些项目可以参考：不断增加项目的难度和范围。可以尝试以下建议：Python是一种非常有趣且有益的语言，我认为只要找到合适的动机，任何人都可以熟练掌握它。文末，别忘记这门优秀的图形化python课程，不仅可以直接在网页上写python，还有配有有图形化的内容帮助你快速理解那些较为晦涩的内容，，还不来赶紧试试：可以关注<夜曲编程>公众号，回复<免费教程>，试用免费编程课
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",猴子,我不喜欢一上来就推荐一堆参考资料的东西，那只会让初学者更迷茫。好比一个婴儿，你告诉他学会走路的方法有100种，他只会变的对走路毫无兴趣，他要的只是一种最有效的学会走路的办法，而不是100种。 同样的，下面介绍的是我之前刚开始自己学习python的1种方法，只需要1种就可以了。   很多人喜欢搞一本厚厚的书来看，虽然看完了但是还不会，这是最大的悲哀。 伤心吧？难过吧？ 其实，你只需要，看菜鸟教程网站的这个教程就足够了，网站地址： 如果你是刚开始学习编程的新手，没看懂，多看几次就会了。虽然这个过程会很乏味，但是对于你建立牢固的编程思维是必须的。如果不想看文字教程的，可以看这个视频教程，非常的通俗易懂： 当你看到无法理解的代码或者概念时，可以将代码复制到下面这个网站，它会将你的代码用图形化的方式显示出来，便于你理解：  如果你不知道代码在内存中是如何运行的，不妨把它拷贝到Tutor里可视化执行一遍，加深理解。 举个栗子 ，比如你在学习Ptyhon中的字典数据结构，但是不太理解这个概念，那么你就可以将书中代码输入，然后点击下面红框汇中的按钮。就会运行处以下的图形结果，对着图形理解概念，不要太爽哦。 上面第1步已经打好了Python编程的基础，现在进入数据分析的学习阶段。推荐一本书《利用Python进行数据分析》就够了，这本书在豆瓣评分是8.5分。看到书里涉及到到当统计概率知识看不懂的时候，这时候反过来再学习统计概率的知识。 很多人错误的学习方式是，先学习统计概率，再去学习数据分析编程工具（Excel，Python，R）。最后抱怨太难了，学不会。 这其实学习方法是错误的。这是为什么呢？ 有两个原因： 1）因为很多统计概率讲的都是复杂的数学公式，却不讲统计概率在生活中如何应用的。这样造成的结果就是你学习了很多，但是也忘记了很多。 2）统计概率知识大多数时候是理论基础，如果不结合数据分析工具（Excel，Python，R）来使用，你肯定学不会。 比如你学习了四分位数的理论，但是如何在实际中使用的，你不会数据分析的工具，你当然不会用了。 但是如果你会数据分析的工具，实际操作就一行代码，四分位就计算出来了。你当然兴奋了，一高兴学习兴趣也就上来了。   如果不想看文字教程的，可以看这个视频教程，非常的通俗易懂： 统计概率知识学习其实很简单，只是很多老师和书把这个东东讲复杂了。学会下面图中的知识，你就可以学会统计概率了：简单解释下，上面的图。  如果你的学习目的是：提高认知，将统计概率应用在生活中，用于指导你面对重大决策时做出最好的选择，你的应该看《》这本书就够了。 如果你的学习目的是：学习大数据的基础知识：统计概率，希望成为，实现升职加薪的目的，那你的学习参考书是《》或者《商务与经济统计》。 《深入浅出统计学》适合没有任何统计概率基础的人学习，这本书足够有趣和简单。 如果你之前上学学习过一些统计概率的课，但是最后还是把课堂学的内容还给了老师，你应该选择看《商务与经济统计》这本书来重新巩固你的基础知识。 学会高级知识，你就不再是一个苦逼的搬砖了，而且会帮助你实现年薪增幅的目标。如果不想看文字教程的，可以看这个视频教程，里面讲的统计知识非常的通俗易懂：  只要是学习就会遇到困难，遇到困难怎么办呢？ 1）首先，你需要使用某搜索引擎查找问题（你知道我说的不是百度），一般都能查到你问题的答案。学会用英文搜索真的很重要。 2）利用某搜索引擎查不到答案的话，当然是找前辈们帮忙了。不过问了不一定有人回复，为了解决这个问题，你可以找我加入学习群，一起交流。 3）最后记住，学习Ptyhon的目的，不是为了学一门编程语言而去学习一门编程语言，你的出发点应该是要完成什么项目，带着目标去学习。参考资料：科普中国专家猴子作品合集
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",李启方,"非科班出身的数据分析师，python自学，自觉小有所成，简单介绍一下学习计划吧python的入门其实只需要掌握几个关键点就行，新手要先学会安装环境、了解数据结构、函数这些东西，再配合实操进行实践，基本就可以入门了。Python的编写环境，用Anaconda足矣。Anaconda是专业的数据科学计算环境，已经集成绝大部分包和工具，不需要多余的安装和调试。Python版本建议3.0以上，不要选择2.7的版本，否则你会被无尽的中文编码问题困扰。Anaconda在官网下载，选择最新版本，约400MB。完成安装后，Win版本会多出几个程序，Mac版本只有一个Navigator导航。数据分析最常用的程序叫Jupyter，以前被称为IPython Notebook，是一个交互式的笔记本，能快速创建程序，支持实时代码、可视化和Markdown语言。点击Jupyter进入，它会自动创建一个本地环境localhost。点击界面右上角的new，创建一个python文件。开始你的Python界面上部是工具栏，编辑撤回运行等，下面是快捷操作，大家以后会熟悉的。页面正中便是脚本执行的地方，我们输入自己第一行代码吧：（我就不用hello world）灰色框是输入程序的地方，回车是换行，shift+回车执行灰色区域的代码，它的结果会直接在下面空白处出现。这就是Jupyter交互式的强大地方，将Python脚本分成片段式运行，尤其适合数据分析的摸索调整工作。这里的print叫函数，和excel的函数同理，是程序执行的主体，负责将输入转化成输出（函数留在下一篇细讲）。这里将hello qinlu这段文字输出。新手可能会奇怪为什么要加引号，这种用引号括起来的文字在程序中叫字符串。Python是一门计算机语言，它的逻辑和自然语言不一样，编程语言的目的是执行任务，所以它不能有歧义。为了规避各种歧义，人们创造了语法规则，只有正确的语法，才能被转换成CPU执行的机器码。先了解Python语法中的数据类型。计算机最开始只被用于数值运算，后来被赋予了各种丰富的数据类型。上面两个是小学生都会的四则运算，在计算机语言中可没有那么简单。它涉及了两个数值类型，整数int和浮点数float。整数和浮点数在计算机内部存储的方式是不同的，我们不用知道具体原理，明确一点，整数运算是永远精确的，浮点运算则可能有误差。两种数据类型也可以互换，通过int函数和float函数。有了数值，必然有文本，程序中叫字符串，用英文引号括起来表示。单引号和双引号没有区别，所以""qinlu""和'qinlu'是等价的，引号是边界，输出的时候不会包含它。当字符串内本身包含引号时，也不影响使用。需要注意的是，不论单引号还是双引号，一旦混用很容易出现错误。因为程序并不知道它是字符串的边界还是符号。解决方法有两种，一种是使用三引号，三引号代表整体引用，而且包含换行。第二种是引号前面加\，它是转义字符，表示这个引号就是单纯的字符。三引号也可以用来注释，通常是大段的文字解释，如果一句话，我们更习惯用#，#后面的内容均不会作为程序执行。时间是特殊的数值类型，它将结合datetime模块讲解。还有两个常见的数据类型，布尔值和空值。布尔值是逻辑判断值，只有True和False。布尔值在IF语句和数据清洗中经常使用，利用其过滤。布尔值能和布尔值运算，不过这里是and、not、or作为运算符，Ttue and True = True，False and True = False，False and False = False，not True = False，True or False = True等。空值是一个特殊的值，表示为None，None不等于0，0具有数学意义而None没有，None更多表示该值缺失。整数，浮点数，字符串，布尔值，空值就是Python常见的数据类型。Python3对中文的支持比较友好，所以大家可以用中文作为字符串试一下print。数据类型构成了变量的基础，变量可以是任意的数据类型。想要用变量，必须先赋予变量一个值，这个过程叫赋值。我首先给a赋予了一个整数值1，然后改变它为字符串abc，变量在Python中没有固定的数值类型，这是Python最大的优点，所以它在数据分析中很灵活。这也是它被称为动态语言的原因，相对应的叫。Python是大小写敏感的语言，所以a和A是有区别的，这点请牢记。另外变量名尽可能使用英文，不要拼音，英文的可读性是优于拼音的。变量有两种拼写风格，一种叫驼峰，一种叫下划线，以用户ID为例。驼峰命名法为userId，以一串英文词语user和id组成变量，第一个词语的首字母小写，第二个词语开始的首字母均大写。下划线命名法为user_id，全部小写，用_分割单词。一个变量的值可以被赋予另外一个变量，如果b变量之前有另外一个值，那么会被1覆盖。呈从上而下的执行关系。初看a = a + 1好像有逻辑问题，其实这涉及到了程序执行的先后顺序，程序是先计算a+1的值得到2，然后将其赋予(覆盖)了a。等号右边的计算先于左边，这是从右到左的逻辑关系。有变量，自然有常量，常量是固定不变的量，可是在Python中没有真正意义的常量，一切皆可变，它更多是习惯上的叫法，即一旦赋值，就不再改变了。Python的基础数学运算符号有+,-,*,/,//,%。前面四个就是加减乘除，其中除法的结果一定是浮点数。后面两个符号是除法的特殊形式，//代表除法中取整数，%代表除法中取余数。到这里，新手部分已经讲解完成。再来讲讲数据结构。Python一共有三大数据结构，它是Python进行数据分析的基础，分别是，list数组以及dict字典。本文通过这三者的学习，打下数据分析的基础。数组是一个有序的集合，他用方括号表示。num就是一个典型的数组。数组不限定其中的数据类型，可以是整数也可以是字符串，或者是混合型。数组可以直接用特定的函数，函数名和Excel相近。sum是求和，len则是统计数组中的元素个数。上述列举的函数是数组内整体元素的应用，如果我只想针对单一的元素呢？比如查找，这里就要用到数组的特性，索引。索引和SQL中的索引差不多，都是用来指示数据所在位置的逻辑指针。数组的索引便是元素所在的序列位置。注意，索引位置是从0开始算起，这是编程语言的默认特色了。num[0]指数组的第一个元素，num[1]指数组的第二个元素。我们用len()计算出了数组元素个数是5，那么它最后一个元素的索引是4。若是数组内的元素特别多呢？此时查找数组最后一位的元素会有点麻烦。Python有一个简易的方法，可以用负数表示，意为从最后一个数字计算索引。这里的num[4]等价于num[-1]，num[-2]则指倒数第二个的元素。再来一个新问题，如何一次性选择多个元素？例如筛选出数组前三个元素。在Python中，用：表示范围。num[0:3]筛选了前三个元素，方括号左边是闭区间，右边是开区间，所以这里是num[0]，num[1]和num[2]，并不包含num[3]。这个方法叫做切片。上述是索引的特殊用法，[0:]表示从第0个索引开始，直到最后一个元素。[:3]表示从第一个元素开始，直到第3个索引。负数当然也有特殊用法。[-1:]表示从最后一个元素开始，因为它已经是最后一个元素了，所以只返回它本身。[:-1]表示从第一个元素开始到最后一个元素。num[-2:-1]和num[-3:-1]大同小异。数组的增删查我们已经了解数组的基本概念，不过仍旧停留在查找，它不涉及数据的变化。工作中，更多需要操纵数组，对数组的元素进行添加，删除，更改。数组通过插入，函数的第一个参数表示插入的索引位置，第二个表示插入的值。另外一种方式是append，直接在数组末尾添加上元素。它在之后讲到迭代和循环时应用较多。如果要删除特定位置的元素，用pop函数。如果函数没有选择数值，默认删除最后一个元素，如果有，则删除数值对应索引的元素。更改元素不需要用到函数，直接选取元素重新赋值即可。到这里，数组增删改查已经讲完，但这只是一维数组，一维数组之上还有多维数组。如果现在有一份数据是关于学生信息，一共有三个学生，要求包含学生的姓名，年龄，和性别，应该怎么用数组表示呢？有两种思路，一种是用三个一维数组分别表示学生的姓名，年龄和性别。学生属性被拆分成多个数组，利用索引来表示其信息，这里的索引有些类似SQL的主键，通过索引查找到信息。但是这种方法并不直观，实际应用会比较麻烦，更好的方法是表示成多维数组。所谓多维数组，是数组内再嵌套数组，图中表示的是一个宽度为3，高度为3的二维数组。此时student[0]返回的是数组而不是单一值。这种方法将学生信息合并在一起，比第一个案例更容易使用。如果想选择第一个学生的性别，应该怎么办呢？很简单，后面再加一个索引即可。现在尝试快速创建一个多维数组。[0]*3将快速生成3个元素值为0的数组，这是一种快捷操作，而[row]*4则将其扩展成二维数据，因为是4，所以是3*4的结构。这里有一个注意点，当我们想更改多维数组中的某一个元素而不是数组时，这种方式会错误。按照正常的想法，martix[1][0]将会改变第二个数组中的第一个值为1，但是结果是所有数组的第一个值都变成1。这是因为在matrix = [row] * 4操作中，只是创建3个指向row的引用，可以简单理解成四个数组是一体的。一旦其中一个改变，所有的都会变。比较稳妥的方式是直接定义多维数组，或者用循环间接定义。多维数组是一个挺重要的概念，它也能直接表示成矩阵，是后续很多算法和分析的基础（不过在pandas中，它是另外一种形式了）。tuple叫做元组，它和数组非常相似，不过用圆括号表示。但是它最大的特点是不能修改。当我们想要修改时就会报错。而选择和数组没有差异。元组可以作为简化版的数组，因为它不可更改的特性，很多时候可以作为常量使用，防止被篡改。这样会更安全。字典dict全称dictionary，以键值对key-value的形式存储。所谓键值，就是将key作为索引存储。用大括号表示。图中的'qinlu'是key，18是value值。key是唯一的，value可以对应各种数据类型。key-value的原理不妨想象成查找字典，拼音是key，对应的文字是value（当然字典的拼音不唯一）。字典和数组的差异在于，因为字典以key的形式存储和查找，所以它的查询速度非常快，毕竟翻字典的时候你只要知道拼音就能快速定位了。对dict数据结构，10个key和10万个key在查找对应的value时速度没有太大差别。这种查找方式的缺点是占用内存大。数组则相反，查找速度随着元素的增加逐渐下降，这个过程想象成程序在一页页的翻一本没有拼音的字典，直到找到内容。数组的优点是占用的内存空间小。所以数组和字典的优缺点相反，dict是空间换时间，list是时间换空间，这是编程中一个比较重要的概念。实际中，数据分析师的工作不太涉及工程化，选用数组或者字典没有太严苛的限制。细心的读者可能已经发现，字典定义时我的输入顺序是qinlu，lulu，qinqin，而打印出来是lulu，qinlu，qinqin，顺序变了。这是因为定义时key的顺序和放在内存的key顺序没有关系，key-value通过hash算法互相确定，甚至不同Python版本的哈希算法也不同。这一点应用中要避免出错。既然字典通过key-value对匹配查找，那么它自然不能不用数组的数值索引，它只能通过key值。如果key不存在，会报错。通过in方法，可以返回True或False，避免报错。dict和list一样，直接通过赋值更改value能不能更改key的名字？不能，key一旦确定，就无法再修改，好比字典定好后，你能修改字的拼音么？dict中删除key和list一样，通过pop函数。增加key则是直接赋予一个新的键值对。dict的keys和values两个函数直接输出所有的key值和value值。如果要转换成数组，则再外面嵌套一个list函数items函数，将key-value对变成tuple形式，以数组的方式输出。字典可以通过嵌套应用更复杂的数据格式，和NoSQL与JSON差不多。基础的数据类型差不多了，更多函数应用大家可以网上自行查阅文档，这块掌握了，在数据清洗过程中将会非常高效，尤其是读取Excel数据时。当然不要求滚瓜烂熟，因为后面将学习更加强大的Numpy和Pandas。函数（Functions）是指可重复使用的程序片段。它们允许你为某个代码块赋予名字，允许你通过这一特殊的名字在你的程序任何地方来运行代码块，并可重复任何次数。这就是所谓的调用（Calling）函数。在 Python 中，函数可以通过关键字 def 来定义。这一关键字后跟一个函数的标识符名称，再跟一对圆括号，其中可以包括一些变量的名称，再以冒号结尾，结束这一行。随后而来的语句块是函数的一部分。在定义函数时给定的名称称作“形参”（Parameters），在调用函数时你所提供给函数的值称作“实参”（Arguments）。要调用一个函数，需要知道函数的名称和参数。函数的参数只是输入到函数之中，以便我们可以传递不同的值给它，并获得相应的结果。Python 内置的常用函数包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数。用input()读取用户的输入：因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python 提供了int()函数来完成这件事情：函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：如果函数调用出错，一定要学会看错误信息。在 Python 中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。在 Python 交互环境中定义函数时，注意 Python 会出现...的提示。函数定义结束后需要按两次回车重新回到>>>提示符下：如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python 解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）。定义一个什么事也不做的空函数，可以用pass语句：pass语句什么都不做，实际上它可以用作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。pass还可以用在其他语句里，比如：缺少了pass，代码运行就会有语法错误。数据类型检查可以用内置函数isinstance()实现。Python 的函数返回多值其实就是返回一个tuple；Python 函数返回的是单一值时，返回值仍然是一个tuple。但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值。函数可以同时返回多个值，但其实就是一个tuple。函数执行完毕也没有return语句时，自动return None。Python 的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。power(x, n)函数有两个参数：x和n，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数x和n。对于一些函数来说，你可能为希望使一些参数可选并使用默认的值，以避免用户不想为他们提供值的情况。默认参数值可以有效帮助解决这一情况。你可以通过在函数定义时附加一个赋值运算符=来为参数指定默认参数值。要注意到，默认参数值应该是常数。更确切地说，默认参数值应该是不可变的。n = 2 是默认参数定义默认参数要牢记一点：默认参数必须指向不变对象。且只有那些位于参数列表末尾的参数才能被赋予默认参数值，意即在函数的参数列表中拥有默认参数值的参数不能位于没有默认参数值的参数之前。有时你可能想定义的函数里面能够有任意数量的变量，也就是参数数量是可变的，这可以通过使用星号来实现。即传入的参数个数是可变的。我们声明一个诸如 *param 的星号参数时，从此处开始直到结束的所有位置参数（Positional Arguments）都将被收集并汇集成一个称为param的元组（Tuple）。类似地，当我们声明一个诸如 **param 的双星号参数时，从此处开始直至结束的所有关键字参数都将被收集并汇集成一个名为 param 的字典（Dictionary）。如果你有一些具有许多参数的函数，而你又希望只对其中的一些进行指定，那么你可以通过命名它们来给这些参数赋值——这就是关键字参数（Keyword Arguments）——我们使用命名（关键字）而非位置来指定函数中的参数。关键字参数允许你传入 0 个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。举个例子，扩展函数的功能。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收city和job作为关键字参数。这种方式定义函数并调用：和关键字参数**kw不同，命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错。使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个*作为特殊分隔符。如果缺少*，Python 解释器将无法识别位置参数和命名关键字参数，即缺少 *，city和job被视为位置参数。在 Python 中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这 5 种参数都可以组合使用。但是参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。虽然可以组合多达 5 种参数，但不要同时使用太多的组合，否则函数接口的可理解性很差。通过一个tuple和dict，你也可以调用函数：对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是如何定义的。如果一个函数在内部调用自身本身，这个函数就是递归函数。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。通过下面的代码可以查看你的电脑最大算到多少：解决递归调用栈溢出的方法是通过优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中。Python 标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题Python数据分析绝对绕不过的四个包是。numPy是Python数值计算最重要的基础包，大多数提供科学计算的包都是用numPy的数组作为构建基础。专门用来处理矩阵，它的运算效率比列表更高效。numpy的数据结构是n维的数组对象，叫做ndarray。可以用这种数组对整块数据执行一些数学运算，其语法跟标量元素之间的运算一样。创建并操作多维数组：ndarray对象中所有元素必须是相同类型的，每个数组都有一个shape和dtype。创建数组最简单的办法就是使用 array 函数，它接受一切序列型对象（包括其它数组），然后产生一个新的NumPy数组（含有原来的数据）。np.array会尝试为新建的这个数组推断出一个较为合适的数据类型，这个数据类型保存在一个特殊的dtype对象中。zeros 和 ones 也分别可以创建指定大小的全 0 或全 1 数组，empty 可以创建一个没有任何具体值的数组（它返回的都是一些未初始化的垃圾值）：arange是 Python 内置函数range的数组版，np.arange返回间隔均匀的一些值。dtype（数据类型）是一个特殊的对象，它含有 ndarray 将一块内存解释为特定数据类型所需的信息。需要知道你所处理的数据的大致类型是浮点数、复数、整数、布尔值、字符串，还是普通的 python 对象。当需要控制数据在内存和磁盘中的存储方式时，就得了解如何控制存储类型。可通过ndarray的astype方法显示地转换其dtype：若将浮点数转换成整数，则小数部分将会被截断。若某字符串数组表示的全是数字，可用astype将其转换为数值形式：这里没写 np.float64 只写了 float，但是NumPy会将 Python 类型映射到等价的dtype上。数组的dtype的另一个用法：int_array变成了和calibers一样的浮点型数组用简洁类型的代码表示dtype：u4(unit32)：无符号的 32 位（4个字节）整型。调用astype无论如何都会创建出一个新的数组（原始数据的一份拷贝）。浮点数只能表示近似的分数值，在复杂计算中可能会积累一些浮点错误，因此比较操作只在一定小数位以内有效。数组：可对数据执行批量运算（不用编写循环即可）。这通常叫做矢量化(vectorization)。数据不会被复制，任何修改都直接改了原数组。如果仅是要一份副本，则用 .copy()。对二维数组单个元素的索引：这两种方式等价。若arr2d[2]，则输出的是一维数组[7,8,9]。2*2*3的数组（2组2行3列）：需要先引入： numpy.random  randn或将代码改成：data = np.random.randn(7, 4)布尔型数组的长度必须跟被索引的轴长度一致。每个名字对应 data 数组一行。对条件进行否定的两种方式：组合应用多个布尔条件，可使用&、|等布尔算术运算符通过布尔型索引选取数组中的数组，将总是创建数据的副本，即使返回一模一样的数组也是一样。通过布尔型数组设置值：通过一维布尔数组设置整行或列的值：指利用整数数组进行索引。np.((8,4)) a   of given shape  type, without initializing entries.for i in range(8):arr[i] = iReturn an object that produces a sequence of integers from start (inclusive)to stop (exclusive) by step为了以特定顺序选取行的子集，只需传入一个用于指定顺序的整数列表或 ndarray，使用负数索引会从末尾开始选取行（最后一行是 -1）。一次传入多个索引组，返回一个一维数组：取整列的两种方法，相当于给列排了顺序：花式索引跟切片不一样，总是将数据复制到新数组中。转置返回的是源数据的视图，不进行任何复制操作。数组有 transpose 方法，还有一个 T 属性来完成转置：Transpose 要一个轴编号：arr是 2 组 2 行 4 列的数组，transpose的参数表示shape的形状，对于这个例子来说，即2[0]、2[1]、4[2]，transpose(1,0,2)转置后变为2[1]、2[0]、4[2]，看起来仍是 2 组 2 行 4 列的形状，但数组内的元素经过转换后索引已经改变，也要遵循（1，0，2）的顺序。如转置前的数组arr[0,1,0]索引值为 4，转置后的数组arr'[1,0,0]，索引值才为 4。其它同理。ndarray 的 swapaxes 方法接受一对轴编号且返回源数据的视图：转置后的数组arr.T为 4[2] 组 2[1] 行 2[0] 列数组，swapaxes(1,2)就是将第二个维度（中括号内数字）和第三个维度交换，即转换为 2 组 4 行 2 列。通用函数（即 ufunc）是一种对ndarray中的数据执行元素级运算的函数，就是一些简单函数。用数组表达式代替循环的做法，通常被称为矢量化。NumPy 数组将多种数据处理任务表述为数组表达式。np.meshgrid函数接受两个一维数组，并产生两个二维矩阵（对应于两个数组中所有的（x, y）对。np.wherea函数是三元表达式x if condition else y的矢量化版本。np.where的第二个和第三个参数不必是数组，传递给where的数组大小可以不相等，甚至可以是标量值。在数据分析工作中，where通常用于根据另一个数组而产生一个新的数组。用where表述出更复杂的逻辑：（where的嵌套）有两个方法any和all。多维数组可以在任何一个轴向上进行排序，只需将轴编号传给sort：顶级方法np.sort返回的数组已排序的副本，就地排序则会修改数组。np.unique找出数组中的唯一值并返回已排序的结果np.in1d用于测试一个数组的值在另一个数组的情况。说到python，很多人熟悉又陌生，想学但是又不知道该从哪下手，今天我就来给大家聊聊python课程，职场人和大学生尤其注意了，增加竞争力的干货知识点来了！觉得python学习难，是因为没有反复练习，一般都是看完就扔，以及各个知识点之间并没有联系，在此我推荐一个夜曲编程，十分适合0基础的同学。下面我就来说说，我在学习夜曲python学习课程的时候，觉得不错的一些点：1、课程设置很清晰，循序渐进，由基础到变量，再到运算等；概念学习过程中穿插趣味选择题，概念学习结束后有代码练习题（课程内含，非百题 斩），每天学完后有知识总结，随时学随时巩固+复习。2、对每个代码包括空格和标点符号在内的小细节进行反复测试和练习，用形象的图片来比喻抽象的概念，使代码几乎深深刻入脑海。3、配套中设置的题目，很接近日常工作和生活需求，虽说和工作中遇到的有差别，但是便于平时调用时候的编程思维的搭建；学完课程缺乏编程练习——【百题斩】，共100道课后习题，及时反馈，practice makes perfect 体验课都不到半杯奶茶，一定是物超所值的，同时如果想进行系统的学习，那么Python入门课Pro（付费正式课） 也可以尝试，现在凭23年高考准考证”购正价课就可以有【大学不挂科-六门课程】听说这个活动是限时的，看到的赶紧去！！"
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",实习僧,"学习Python需要掌握如下基础知识以及相关技能。1.Python基础知识（变量、语句、数据类型、数值类型、字符串、布尔类型、列表、字典、元组、条件语句、循环语句、函数、装饰器、面向对象、网络socket、爬虫）2.Python基础库（模块、包、系统模块、三方模块）3.python文件处理（读、写、执行、）4.python字符统计5.python数据排序只记Python基础语法，却没什么鸟用。就像幼儿园，老师在黑板上写的‘肉’字，记住这个字咋写，一笔一划的记住，只需要半天，但是把这个词和你平时吃的东西绑定，以至于后面你想到这个字，就流口水，需要日常的重复训练。同理：无方向的看书，看视频也没什么用，其实可以通过直接实战来上手，比如：文件操作字符排序网络编程很多人在学习Python的时候常常会犯下面一种情况：买一本厚厚的，逼自己看完，记住每个语法，闭门看书三个月，吃透一本书，最后一行代码也写不出来。编程就像骑自行车，买一本<<骑自行车大全>>是没有什么用的。正确姿势：掌握最基础的姿势，就可以骑上车出发了，实际联系几天，摔几跤，基本就学会了。很多朋友反馈：Python基础语法都学会了，但不知如何写项目进阶？1.List，Dict特性倒背如流，就是无法写出实际的项目。2.各种书籍也看，写不出东西。3.各种视频也看，写不出东西。4.各种大会也去，名词高大上，但是没学到具体的技能。1.给你一个字符串“come baby,python rocks!” 如何统计里面字母o出现的次数！思路：遍历字符串，定义一个变量，每次o出现，都+12.给你一个字符串“come baby,python rocks!” 如何统计这里面所有字母出现的次数！（普通变量肯定无法完成。）思路：需要使用字典这类复杂的数据结构处理，字母当key，出现的次数当value，每个key出现，对应的value+13.给你一个字符串“come baby,python rocks!” 如何统计这里面字母出现次数的前三名！思路：排序，取出前三1.给你一个字符串“come baby,python rocks!” 怎么统计出现次数前三的字母。2.一个nginx日志文件，怎么统计IP出现次数前三的url。3.一个nginx日志文件，统计IP出现前三后，如何存入MySQL数据库。4.存入MySQL中的日志文件，如何输出给浏览器端显示。5.如何美化前端表格等等。将多个代码块（按功能）定义到同一个文件中。别的文件中使用时则先导入模块，在调用模块内变量或函数。1.建议全小写英文字母和数字2.避免与常用模块或第三方模块名称冲突1.通过Global内变量__name__进行判断2.当以python mod.py运行脚本时__name__变量为__main__字符串3.当以模块导入时__name__为模块名称字符串将不同模块文件放在不同文件夹内，包文件夹下面需要有__init__.py文件用以声明该文件为Python包。使用时需要从包内导入模块后调用模块中变量和函数。os,sys,time,datetime,urllib,xml,json,email,csv,collections,math,zipfile,trafile,requests,pyquery,django,flask,mysqlclient,paramiko,redis,lxml,dateutils,ipaddr,netaddr1.先知道有没有2.用的时候在查内置工具：dir、help搜索引擎：google、百度1.Python基础入门（入门、数据类型、条件表达、循环语句）2.Python基础进阶（文件操作、函数、装饰器、模块、面向对象、网络编程）3.Python前端知识（Html、Css、Js、Jquery、Bootstrap、）4.Python高级用法（Django、Flask、数据库操作、MVC、ORM、Admin、template）5.Python项目实战（电商项目、爬虫项目、常用组件、运维项目、代码调优）6.Python高级进阶（数据算法、代码规范、面试技巧）1.学习编程就是为了解决实际的问题，把自己在工作或学习中的重复工作程序化2.谷歌和度娘3.加入（多看、多分享、多交流）4.参加培训辅导（仔细听课、跟上课堂学习，有问题做记录，课后查阅资料或请求他人）5.善于记录笔记，不断总结，查漏补缺。1.python基础入门（入门、数据类型、条件表达、循环语句）2.python基础进阶（文件操作、函数、装饰器、模块、面向对象、网络编程）3.python数据采集：（外部数据源导入分析&爬虫自己采集数据源分析）4.数据分析：（各种库，如Pandas库，Numpy库必备数据库）5.数据可视化：（matplotlib库）1.计算机视觉典型的应用包括：人脸识别、车牌识别、扫描文字识别、图片内容识别、图片搜索等等。2.自然语言处理典型的应用包括：搜索引擎智能匹配、文本内容理解、文本情绪判断，语音识别、输入法、机器翻译等等。3.社会网络分析典型的应用包括：用户画像、网络关联分析、欺诈作弊发现、热点发现等等。4.推荐典型的应用包括：的“歌曲推荐”，某宝的“猜你喜欢”等等。2.编程语言、工具和环境:pythonpython有着全品类的数据科学工具，从数据获取、数据清洗到整合各种算法都做得非常全面。3.编程语言、工具和环境:RR最大的优势是开源社区，聚集了非常多功能强大可直接使用的包，绝大多数的机器学习算法在R中都有完善的包可直接使用，同时文档也非常齐全。常见的package包括：RGtk2, pmml, colorspace, ada, amap, arules, biclust, cba, descr, doBy, e1071, ellipse等等。另外，值得一提的是R的可视化效果做得非常不错，而这对于机器学习是非常有帮助的。4.其他语言相应资深程序员GG的要求，再补充一下Java和C++相关机器学习package。----------------------------------------------------------------------------------------------管理 Python 版本和环境的工具管理包和依赖的工具。本地 PyPI 仓库服务和代理。打包为可执行文件以便分发。将源码编译成软件。交互式 Python 解析器。文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。"
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",阿里云云栖号, —————————————————————————————————— 本文主要是自己的在线代码笔记。在生物医学本体Ontology构建过程中，我使用Selenium定向爬取生物医学PubMed数据库的内容。         PubMed是一个免费的搜寻引擎，提供生物医学方面的论文搜寻以及摘要。在进行自然语言处理、文本分类聚类、推荐系统、等研究中，通常需要使用新浪微博的数据作为语料，这篇文章主要介绍如果使用Python和Selenium爬取自定义新浪微博语料。因为网上完整的语料比较少，而使用Selenium方法有点简单、速度也比较慢，但方法可行，同时能够输入验证码。希望文章对你有所帮助~在进行自然语言处理、文本分类聚类、推荐系统、舆情分析等研究中，通常需要使用新浪微博的数据作为语料，这篇文章主要介绍如果使用Python和Selenium爬取自定义新浪微博语料。因为网上完整的语料比较少，而使用Selenium方法有点简单、速度也比较慢，但方法可行，同时能够输入验证码。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",亚东,这个问题其实很简单，相信十多年从来经验的我，跟我这篇文章来，系统性的学会Python 是几周的事。不长，也不需要你怎么努力。学会 Python 首先要有一个准确的目标，你要求系统性掌握，那就要定义好系统性这个模糊的词汇到一个精确的分解目标。然后学习、练习，再总结一下就好了。但是我不想再自己写了。已经是人工智能时代，我想你学会的应该是一个思想：如何借助人工智能来学习。一个方法：如何使用人工智能来学习。一个工具：选择那个人工智能。我们就借助  （如果方便建议使用 chatgpt 或者  更好一些吧）这个人人都能使用到的工具来完成这个任务吧。做为一个精通 Python 的专家，请给一个想系统性学习 Python 的人，一个清晰的目标分解，都要按先后顺序掌握那些知识。 请认真考虑后，一步步给出来。在这里你得到了所有的 Python的系统性知识。而且结构清晰无比，看到这儿，你有没有想过，，这么好用的大语言模型，我能掌握吗？掌握 Python 、系统性的掌握 Python 后，还需要什么？我要告诉你答案：大语言模型才是未来，它不仅能帮助你学习，还是你未来工作中必须使用的工具、知识甚至是伙伴。所以你要及时的掌握它。你看上面就是我用它来辅助学习 Python 的方法。学到这里，你对Python的知识已经掌握的差不多了，那么对就业找工作来说就够了吗？就亲身经历而言，你必须一定要接着学大模型，因为现在Python太卷了，会的人太多，但凡不想当底层牛马，兢兢业业几年后被裁掉，你就得跟上时代潮流，AI是不可阻挡的，所以未来不会AI的人一定会被会AI的人淘汰！好在现在学习 AI 的资源很多，但这些资源也参差不齐，自己鉴别起来比较麻烦，建议大家直接去看的 AI 大模型公开课，我前段时间刚看，非常不错，课里有最新的 AI 理论与应用落地，课程里关于的原理、使用进行模型微调的技术对我的帮助很大，可以说是卷赢同事卷赢上下游的利器， 入口我给大家要过来了，现在还是免费的，点下面链接直接听就可以⬇️大模型其实不难，大佬讲解的也很通俗易懂，全程带你从理论到实践，深度讲解大模型，如果你懂点Python，那这节课对你来说学起来会很轻松！另一个很重要的点：请给我一个例子，或者几个例子，讲解一下 Python 的 OOP 的概念及注意事项我写了一个 Python 的类，它对吗？有什么问题，请指出来。看到了吗？仅仅是如何使用，你就拥有了一个专家级别的老师、辅助导、甚至是助手，只要你思想不懒惰，你就可以拥有战术上的勤快了。它不是我们梦寐以求的快乐学习吗？你看，至少我相信在这儿，你已经得到了使用人工智能辅助学习的优势：这你也没有想过要怎么用人工智能来完成吧。把你所有的问题记录放到一个 word 或者 txt 文件里，然后这样问：请根据我的问题历史文件，提供一下我在 Python 方向要怎么继续学习奇迹发生了：看到这儿了，你真的不想再创造一个奇迹？把大语言模型掌握了？的课程，就是你的未来！
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",Rocky0429,对于初学者，我一直说一句话：我不太清楚题主提这个问题是干啥，如果题主想要以后从事 Python 方面的工作，首先我们得知道大概有哪些工作岗位，这样可以根绝岗位需求做出针对性的学习。如果以后是想从事 Python 相关的工作，那你大概率会在以下但不仅限于以下岗位中选择：既然题主问的是系统学，那我从以下 4 个方面给出你零基础学习 Python 的路线：视频的话，我推荐两门课，选择自己喜欢的讲解口味进行观看就行了。这门课一共 131 集，大多数都是 Python 的核心基础知识，像 Python 环境搭建、基础语法、类型和对象、函数、面向对象等等等等，适合 Python 新手从入门开始学习。除此以外还包括了一些操作系统的内容，说实话操作系统啦这些课程也是对于我们很重要的知识，不管是在大学还是工作中都很重要，所以我希望大家在学完 Python 的时候可以看看操作系统的内容。这套视频一共 547 集，我看了一下，可以说是很全面了。从搭建环境，判断语句，再到基础的数据类型，之后对进行学习掌握，熟悉文件操作，最后通过实战进行演练。而且它不只是涉及 Python，还包括 Linux 等的学习，每一集的时间也不是很长。如果你对别的不感兴趣，可以直接看 Python 那一趴的，从第 110 集开始。零基础的话跟着【夜曲编程】学，适用于不具备Python基础知识的人。入门课程包含了 Python 的数据与运算、条件判断、元组列表等数据结构、函数和类等核心的 Python 知识，每一个知识点下面都带着对应的练习题。除此以外每小节在最后会有几个相关的实操练习，把知识点串联起来。这门课就是符合我在上面讲的【时长合适 + 有实例】，差不多拆成了 30 多个小节，每小节 20 多分钟的时长，练习题分布在每个小节中，一共100道题，由浅入深，所以可能因为这样叫百题斩？哈哈哈哈。它这个还有【概念卡】和【代码卡】的东东，我当时还觉得仿佛在哪里见过，然后就去查了一下，破案了，原来是出品的，一个套路的，你别说，这样的卡片看着还挺好。比如这个匿名函数：的格式、参数、语法会用不同的颜色标注出来，就很清晰明了。网页还配置了Python安装教程和安装包，Mac和Windows版的都有，这一点可以说是非常方便了，一站式齐全。感觉 Python 学的稍微有点底气了，可以去下面的 Python 做题网站练练手：Python 入门书籍的话我有 2 本推荐，不同的人喜欢不同的行文方式，就比如我最喜欢的是第二本...这是我买的第一本 Python 书，当然也是刚开始学的时候看了别人的推荐，加之也是豆瓣评分 9.1 的书，就买来看看。理论 + 实践，前面是基础知识，后面是实战项目。前面的基础知识讲的很详细，以至于给我当时的感觉有点过于啰嗦了，不知道其他人看会是什么感觉。每个知识点后面都带着“动手试一试”，我感觉这点比较好，学编程之初，就是要多练，多敲代码...至于后面的实践部分，包括一个简单的 2D 游戏、数据可视化和 web 项目，可能是当时我太菜了，或者之前没有做过项目的原因，我觉得这三个项目出现的太突兀了，2D 那个游戏做完我就直接被劝退了，倒是没觉得有啥提升，没甚意思，sad...而且跟着书做项目，因为书出版的时间太长，很多用法都变了，照着书上做，大概率会有运行错误的时候，可能心态有点崩...这本书是我朋友送我的，书到了以后一直在吃灰，因为那时候 Python 学的差不多了膨胀了...翻开也是很偶然，那天刚好很无聊，就随手拿出来翻了翻，然后就翻完了，怎么说呢，这本书的内容给人一种很舒适的感觉，我很少有觉得读起来很舒服的技术书...整个的结构很清晰，内容简单但是不肤浅，整个基础知识的讲解简洁明了，一点也不啰嗦，很容易就看懂了，不会有那种我看了好几遍才理解的情况，各种小的代码片段比比皆是，在练习的过程中反过来再加深对概念的理解。而且作为实践部分，它后面带了十个小项目，按照实际开发的步骤介绍Python 项目的过程。怎么说呢，反正我喜欢这本...编程语言的学习其实是边学边练，刚开始的时候是一边看视频看书，就把视频上的小例子，书上的小例子自己动手敲出来。等能力到了一定的地步，可以尝试一下实战。对于实战来说，可以有两种：下面我将分别来讲一下这两种。刷题大家应该都知道，就是在刷题网站上解决与算法题。如果你从事计算机行业，在你找工作的时候，数据结构与算法都是你跨不过去的坎儿。这里我推荐一个 Python 的数据结构与算法的视频。数据结构与算法的重要性不言而喻，作为一个前 ACMer 更是深有感触。北京大学这门课主要由教授主讲，介绍常见的数据结构和相关的经典算法，包括线性结构、递归与dp、排序与查找、树及其算法等。这门课我觉得最好的一个点是，比较关注数据结构与算法的时间空间效率，这个是很多课程忽略的地方。我也有一篇旧文，详细的介绍了时间复杂度和空间复杂度，感兴趣的可以看下：时间和空间效率是数据结构和算法yyds，学会了这个你就学会了分析优劣，成长是不可同日而语。同时这门课也比较注重数据结构和算法的实践应用，毕竟只有真正用起来你才知道你是不是真的学会了，课程里的案例和变成习题建议好好做一下。刷题是一个很好练习和检验学习成果的方式，刷题直接在 LeetCode 上刷就好了。至于刷题顺序，我可以分享下自己总结的【】，希望能帮助大家少走一些弯路。这份清单我会一直更新，同样也会一步步的把和用“图解”的方式分享给大家。站在初学者的角度，，理论 + 实战，带你彻底搞定数据结构与算法。下面就是我为大家精心挑选的 LeetCode 题目清单，，大家可以根据知识点，有针对性地刷题。项目的话就先做些小项目练手。还是那句话，对于编程语言的学习来说，。当然对于现阶段的你来说可能没用，可以等你的 Python 成长到一定的地步，好的会对学习会有很大帮助。我这里推荐的都不是很大，结构比较清晰的开源项目。Python 写的命令行定时器。代码仅有 100 多行，不依赖其它第三方库。一条命令就能将文件安全地传送到另外一台电脑上的工具。基于 PAKE（Password-Authenticated Key Exchange）协议实现文件在公网的加密传输，发送和接收均仅需一条命令。给图片加盲水印的 Python 库。就是图片有水印但人眼看不出来，需要通过程序才能提取水印，相当于隐形“盖章”，可以用在数据泄露溯源、版权保护等场景。该库出自阿里巴巴安全团队，强大之处：传送门：新！Python 炫酷进度条项目。支持 Python2.7-3.8 示例代码：进阶阶段也就是以后准备从事的方向。接下来我会从几部分来推荐。至于 Python 开发方面，虽然我考完研也做过一段时间的后台开发的实习生，但也仅限于玩票，所学基本来自于官方文档，没有系统的看过书，所以就不在此乱做推荐...这里重点推荐书，如果，可以看我下面这篇文章：关于爬虫的话，我学的不是很深，还处在玩玩的状态，就是平时搞点数据玩儿，刚开始学的时候是在崔大的网站（静觅：）白嫖的，后来崔大出书了，就买了一本支持，因为主要精力不在这，看到 Scrapy 框架就停了，现在基本忘干净了...书很厚，量很大，不过现在这本书很多网站也在升级，里面的很多代码都失效了，现在第二版也出来了，大家可以买最新的...数据分析是现在很火的一个概念，但是不知道为什么现在谈起数据分析，必定有个 Python 的前缀，这就给很多同学造成了误解，认为数据分析一定要用 Python，这就成了一个很错误的概念。当然这个不是一句两句就可以解释清楚的，以后我会出一些列关于数据分析的文章，届时再科普...那么既然是说到了 Python 的数据分析，那我就先只推荐几本关于这方面我看过的书.（但是千万别理解成只有这些）...动物书，不多说，这大概是入门数据分析的必读书籍，主要介绍了 numpy、pandas 和 matplotlib 这三个Python 数据科学的库。里面有很多功能语法的介绍，可能是因为这本书的作者同样也是  的作业，所以这本书里对 pandas 的描述非常细，如果你买了这本书，其他 pandas 的书基本可以不用买了，这本书基本可以满足你哪里不会查哪里了...不过对于这本书来说，缺少一些实践性的案例操作，还是有些难顶的...江湖人称小黄书，好朋友的书，我手里的这本也是他送的，就是忘了给我签名，不然现在都准备拍卖了...从 Excel 出发学习 Python 数据分析，这本书我翻完了，成为畅销书是有道理的，简单易读又容易操作，从我们熟悉的 Excel 入手，通过对比 Excel 的常用操作来用 Python 实现，能够带你快速掌握 Python 数据分析的常用操作，跟着走下来，像基本的 pandas，numpy 和 matplotlib 的用法都会了然于胸。机器学习的话，如果说直接想实战，那直接就上  的官网就好了，现官网内容非常详细，不管是算法说明，参数文档还是对应的案例都应有尽有。至于对应到的知识点，现在网上好的文章也非常多，直接对应去搜就好了。如果想系统的学习的话，可以看一下下面这几本书：老师的《机器学习》（西瓜书）作为机器学习领域的入门教材，可以说是学习机器学习的必读教材，在内容上基本涵盖了机器学习的很多方面，包括基础知识、经典的机器学习方法以及规则学习和强化学习这些进阶知识。好像最近又出了一本《》，还没买来看，估计也没差，大家可以买来尝尝鲜～纯理论的书，怎么说呢，想学机器学习，统计学习是迈不过去的坎～这本书是我同学送我的，主要就是介绍机器学习基础，还有就是如何用算法进行分类，还有监督学习和无监督学习的经典算法，再就是机器学习算法里的一些附属工具。通过一些实例，切入日常工作任务，没有很多学术化的语言，通过实例学习到机器学习的核心算法，算是一本实战经典书。哎呀妈呀，终于写完了~~码字好累呀！！！如果觉得不错的话，  
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",景略集智,原文地址：在过去的几年间，使用 Python 这门语言作为数据科学研究工具的人数逐年得到攀升，根据 O'Reilly数据科学从业者，54%的受访者都在使用 Python 作为首选语言，这个数据要比2015年的调查结果——51%还要高一点。没人可以否认 Python 已经逐渐成为了数据科学产业以及智能化时代的先头兵，而且必定会在未来继续保佑这种优势。毫无疑问，无论是逐渐扩大的业界份额，还是海量的数据科学库件，以及平缓的学习曲线，Python 作为一门程序语言，几乎已经没有比它更适合作为数据科学的实践工具了。当然，Python 易学好懂，但如果你是刚入行的学生或是从业者，你仍然需要一些基本的程序语言知识来帮你度过一开始的难关。因此，我（指作者，译者注）为各位，尤其是初学者准备了一个小攻略。这个小攻略可以方便大家快速查阅在数据科学研究过程中的一些程序用法，也可以作为一本指南帮助大家更快更好地掌握 Python。这本小攻略与 DataCamp 的课程《数据科学所用到的 Python》有所关联，大家可以配合阅读。如需下载 PDF 版本，请。这本小攻略提及了 Python 中诸如变量、数据类型、字符串、列表等基础知识以及一些科学计算所用的基本库件如 Numpy 等等。下面是文档截图。（为方便大家阅读，译文将原始文档截图转换呈现在此。——译者注），请大家前往主站，点击运行尝试跑跑程序。我们提供了一些Python入门的知识，方便大家实践。大家可以在移动端和PC端无障碍享受运行程序的快感，部分代码截图如下：欢迎你来。官方微博：@景略集智：景略集智集智QQ群：557373801商务合作：chenyang@jizhi.im投稿转载：kexiyang@jizhi.im
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",代霸天,从machine learning或者web或者爬虫入手Python，会比较有成就感，不枯燥天天print，初学者学个几天就没动力了我推荐，machine learning in action，一点点基础即可阅读此书web学习flask，遇到不懂的语法查文档学习scrapy，同上，遇到不懂的语法查文档真的，用Python写个预测足球比赛结果的小程序或或抓取微博数据，比天天对着书上无聊的print好多了
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",Jackpop,"学习是一个循序渐进的过程，是无法直接从一个零基础的新手跳跃到Python大牛的层次，我认为对于大多数编程语言的学习都可以分为如下3个阶段：对于入门阶段，如果真的是零基础，对于编程语言没有任何了解，对于条件语句、循环语句、字符串、运算法都不了解的，我认为有必要先把这些知识补充一下，对于入门，我推荐使用《》，这是我入门Python时学习的一个网站，它，这些都是编程语言里比较基础的内容。它通过通俗易懂的语言和图形来阐述每一个专业词汇、知识点的到底在讲什么，然后开始编程实现，，非常有助于零基础的初学者。我认为在线教程提供了很大的遍历，但是出于严谨性的考虑，我认为还是有必要选择一本不错的书籍进行细致的学习，对于进阶阶段，我推荐一本书籍和一份开源学习项目。这是一本非常不错的Python书籍，它既可以作为入门书籍，也可以视为进阶书籍。与大多数式讲解的书籍和在线教程不同，它更加深入，，在你看这本书的时候你会发现，它的每一段话都是有意义的，没有什么废话。它分别从数据结构、字典集合、文本和字节序列、函数、设计、装饰器、等讲起，然后对每一块知识进行展开，，然后告诉你，该怎么用好它，高效的使用它。举一个最简单的例子，在绝大多数教程都会讲到，千篇一律的告诉你""if..else.."", ""for...while""，这个有一点编程语言的同学都知道，但是在Python里面循环和条件语句有什么特殊的地方吗？该怎么用好它？《》这本书就教你怎么去使用它，告诉你该怎么用还有它的意义所在。这就是这本书的优点：。实战阶段我推荐这份Github学习资源Python-100-Days，截止目前已经5.2w+star，它循序渐进的讲解了从基础阶段的循环、字符串到深入的进程、面向对象的知识，它不仅给出了知识的详细讲解，针对每一个知识点，它还给出了规范的实现代码，这样不仅有助于理解学习到的知识，而且能够帮助学习编码规范，能够在Python编程方面得到一定的提升。通过学习入门和进阶阶段的学习，想要再进一步的提升就需要在实际的项目中进行实战，这样才会更加意识到自己当初在学习过程中遇到的每个知识点的真实意义。实战该选择什么项目？不同人会有不同的兴趣爱好，有喜欢数据分析的，有喜欢计算机视觉的，有喜欢web开发的，也有偏好的，不同人可以根据自己的兴趣选择相应的方向，然后进行实战。对于实战阶段，我同样推荐一份不错的Github学习资源--。tensorflow应该大家都耳熟能详了，机器学习领域非常优秀的框架，很多公司和项目都是基于tensorflow进行搭建，在AI邻域有着不可获取的地位。当然，单纯的学习tensorflow是没有意义的，它只是一个工具而已，tensorflow_cookbook这份资源的优点就在于，它不仅限于tensorflow，它以机器学习为核心，围绕机器学习中的知识点，例如线性回归、支持向量机、神经网络、CNN、RNN等进行展开，不仅能够深入学习这些机器学习底层的理论知识，而且能够学习tensorflow和Python的使用，知道如何用Python去实现一个机器学习项目，去完成一个分类或者预测功能。"
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",地球的外星人君,更新：补充了图片（昨天居然没图了orz囧）想要系统自学，首先当然是要搭建Python体系了。大部分自学者没有知识体系可言，这是无法避免的困局。并不是你看几篇文章就能搭建起来的——在你对很多内容一无所知的情况下怎么可能形成完成的体系呢？所以初步学习的时间里，最好的办法是什么？走前人的路。按照已经成熟的路线去前进，在接近走完的时候，按照自己的学习深度和技能需求重新整理，然后对知识架构中的缺漏作补充。所以，想要系统自学按照别人的经验来是最快的，也是我非常推荐的一条学习路径。下面是一条非常全面的Python学习路线，题主可以用来做个参考。（我也是照着这张图来的）图片作者是：类似于这样的网络上有很多，如果觉得以上的路线不太符合技能需求，题主可以自行发掘一些其他的路线图。记得要查证路线的可执行度，选错了的话会很难受。有了路线之后，剩下的就是执行问题了。执行细节主要有两个方面，资源发掘和学习过程。在开始之前我建议你补充自己的计算机基础知识——你用来考计算机二级证书的那点东西完全不够用。考虑到啃大部头的难度足以把人逼疯，所以这里就直接推荐两门课程好了。我接触这两门课陈源于 大神的推荐。额外附送：对于初学者而言，把这三门课学习一下就够了。如果你甘之如饴，可以做更深的尝试，去阅读诸如《》、《算法导论》这样的书籍。如果真的啃下来，恭喜，你的学习之路再也不会有更大的难关了。得益于Python的特性，你会发现入门的路径堪称无穷无尽——单单是在知乎就有无数的教程来解答你的问题。在这时候，你简单了解一下Python的相关北京之后就开始学习语法吧。简单说，这一时段的阅读资料如下：我的建议是，挑选其中任何一个来学习就可以了。特别推荐的Python教程和简明Python。视频教程：目前Python web使用比较多的框架，Django、Flask。（Tensorflow这种level太高，就不多说了）——CSDN同类专栏阅读量第一——很经典也很引人的教程——Flask官方文档这三个基本上足够你掌握基础知识，想要更加深入就要亲自动手来学习了。说实话，可以实战的项目是在太多了。当你掌握了语法、熟悉了框架，不去做实战还等什么呢？我相信这段时间里你会有很多想做的事，也会遇到很多困难，但是绝不会比学算法更困难了。来这里，找你最喜欢的项目：学习从来不是一件简单的事。即使Python已经被视为最容易入门的语言，但学习过程也称不上愉悦。别迷信什么21天精通或者7天入门之类的谎言。在这种引导下，除了虚无的膨胀感你不会得到任何东西。保持正确的方向和学会一样重要。如果你想做开发，就别只看爬虫教程，如果你想做数据，就先去学点数学。试着自己去判断一个技能的重要程度。正确衡量学习成本，把时间花在你最需要的技能上。你想更深入了解学习Python知识体系，你可以看一下我们花费了一个多月整理了上百小时的几百个知识点体系内容： 
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",清致,很多人搞不清楚自己学Python的方向，不同的目的、侧重点和难易程度都不同，想要学习Python，是爬虫？数据分析？还是开发？ 先说说几类学习Python的方向：如果你经常跟办公软件打交道，可以用Python自动去操作Excel，用来统计数据非常方便。测试是小白进互联网最容易的岗位之一，不需要很强的撸码能力，对于一些知识点也不需要很深的了解。如果你想进入互联网撸代码，可以以网站开发为方向，并且自己开发一些小网站，赚点小钱也是可行的。Python非常适合干爬虫，爬虫入门比较简单，除了可以自己爬数据，还可以给别人趴数据赚点钱。但如果把爬虫当职业来做，就需要学习一些反爬技术了。这不是简单的Excel能做的数据，是通过数据来做一些决策，需要掌握统计学、微积分、概率论等知识，如果是一名非计算机专业的小白，不建议大家直接学这个岗位。人工智能是未来的发展方向，目前大公司才有财力去研究这个领域，对学历和专业的要求高，小白还是暂时绕道吧。打个比方，你如果是做数据分析工作的，学Python的初衷是利用其强大的数据分析能力。那就对语法要求不是很高，没必要花很多时间在诸如web编程、模块等这些功能上，但要理解基本的逻辑结构、数据类型、运算符、函数库等等。很多人纠结是学Python2还是Python3，这并不难选择，二者只是程序不兼容，其实语法变动不多，入手任何一个都相差不大。实在纠结就选Python3，这毕竟是未来的趋势。首先推荐Pycharm社区版，配置简单功能强，用起来省事省心，对初学者友好，最关键的是免费！其次可以尝试idle，Python自带编辑器，如果只想尽快写出简单代码，这个最简便。基本支持所有主流操作平台，包括windows、mac和linux等，运行流畅，后两者默认自带Python环境。《》又名《与孩子一起学编程》说的是一些基本概念，告诉我们编程是怎么一回事，是一本非常适合零基础人入门Python的书。非常有名的Python书籍，重实践但不解释原理，新手看起来比较费劲，适合作为学习辅助。涵盖了Python知识的方方面面，内容很系统，具有一定深度，有一定基础后再学习会有更多收获。并建议。短时间高密度的学习有利于形成知识的连贯性，对Python理解也会更加深入。当然，这中间需要监督机制，你可以在社交平台打卡，可以制定自己的学习课程表，也可以和朋友一起学习。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",stormzhang,经过大量开发者的宣传，Google 等大企业的大力推广，人工智能的白热化，大数据时代的来临以及 Python 纳入高考的发酵，Python 已经走在了风口浪尖上，大量的开发者涌入 Python 的学习中。但是，好比现在移动开发者过剩一样，未来也一定会迎来 Python 人才过剩的时候，不过，能经历人才过剩的行业一定是好行业，但我想说的是，过剩的永远只是那些初级水平的从业者，过硬技术的从业者永远都是稀缺的。因此对于学习，还是得踏踏实实的。自学 Python ，也是一样，不要一开始因为头脑发热就不停地收藏各种资料网站，购买各种书籍，下载了大量的教学视频，过了几天，学习的热情开始褪去，再过几个星期，终于完成了学习课程 —— 《从入门到放弃》。所以，在自学的过程中，最为重要的还是要摆正心态，忍受孤独，朝着自己的目标坚持下去。心态摆正了，目标也有了，那么该如何自学 Python ，正式入门呢？对于 Python 的入门，主要分两类，一类是有编程经验的，另一类就是零基础入门的。个人认为这两种人的入门方式还是有区别的。- 对于有一定编程经验的来说，Python 入门一般只是了解语法和 Python 特色用法，再加上 Python 本身就有简洁友好，易入门的特点，因此推荐看一下系列的博客或书籍，了解基本的语法。这里不推荐看视频教学，因为有些知识对于有编程经验的人来说，会显得简单，甚至对于某些人来说，已经很熟了，所以就没必要浪费这些时间了。下面推荐几个适合入门的视频教程和博客书籍，但是，要明确一点，当你学习的时候，选定适合自己的一个，坚持学下去。注意，是选择一个，在这里很多人都会犹豫不定，我该选哪个，这个好像讲的不怎么全，那个又缺了这一块。其实这是完全没必要的，与其在这里浪费时间，犹豫不决，还不如立刻就学起来的，等学完在补充自己认为不足的知识点。慕课网上有很多免费的视频，也有一些实战课程。对于自学编程，这个网站蛮适合的。经典的 Python 入门教程，对于有一定编程基础的同学，这个教程应该很适合你。- 对于零基础入门的，因为缺乏对编程语言，算法，数据结构，编程规范的了解，且还没有养成编程思维，那么入门就会显得枯燥和痛苦，但只要摆正了心态，这也会是一个快乐的过程。因此对于零基础入门的编程新手而言，更加推荐教学视频和书本结合的方式进行学习，在教学视频中，不仅能一步一步地跟着老师敲代码，还能更好的学到老师的编程思维，养成良好的编程习惯。当然，每看完一集视频，都可以配合书本，博客进行温故而知新，最要强调的还是，不管你觉得这代码有多么的简单，多么的容易，都要自己敲一遍，只要自己真正去敲过，去用过，才会有体会的。但是 0 基础自学真的不适合所有人，毕竟编程是有一定门槛的，有的人悟性也没那么高，很容易在一开始就放弃，这个时候我强烈建议你报一个网上的在线课程，跟着课程先建立编程的思维，培养好的编程习惯，这是自学难以达到的，这里推荐 Udacity，这是 Google 实验室创始人创办的针对编程的在线教育网站，Google、Facebook、GitHub 的工程师都在上面授课，就是最大的质量的保障，而且有社群、有导师帮助你用正确的姿势入门，所以，对于 0 基础想学习编程的同学，强烈推荐 Udacity，如果想学 Python 的，那么推荐这么一个「Python 入门课程」：当学完入门的知识点后，就尝试进行一下实战，这里指的实战不是指要做多么高大上的项目，而且这时候也做不出来，而是尝试做简单的项目，比如不用任何框架，就用 Python 自由库进行爬虫。这里遇到问题千万别让自己停留下去，找各种方法解决，也不要管自己的代码写的有多烂，用的技术有多么的陈旧，总之就是硬着头皮，也要完成这个项目。只有经历过这样的实战，你才会知道自己有哪方面的不足，缺乏哪些知识点，然后再进行知识填漏。入门阶段只是了解 Python，至此你要根据自己的兴趣爱好或者就业意向选择 Python 的方向，才能让 Python 进一步发挥它的价值。Python 编程方向有很多，比如爬虫、数据分析、Web开发、、运维开发、机器学习、人工智能等等，每个方向都有自己特定的技能要求，因此学习的知识也就不一样。在这个阶段，如果一直纠缠在理论的泥塘里不能抽身，那么学习积极性也会被不断的挫败消磨的所剩无几，能够坚持下来的也就寥寥无几了。因此当你选定了一个方向之后，就可以找一些实战的课程来学习，一边跟着实战，一边学，当然，这里也顺便说下，Udacity 上也有很多关于数据分析、机器学习这类更高级别的课程，而且包含一些实战项目。其中你会不可避免要接触大量类库，阅读大量文档，也会遇到 Python 之外的大量编程知识，毕竟这是通过 Python 与其他知识结合，解决对应的业务需求问题的时候。在这里，唯一的建议就是，莫贪心，耐心地学好自己原先指定的计划，再学其它。不要再学习的过程中，听到某大牛的建议，用什么来解决更好，就改变方向，至此就很容易进入一个死循环里面，一直循环下去。至于这个阶段什么时候算完成，取决于你所了解的知识，硬要说个标准的话，就是你能单独完成一个项目。当然，在这个阶段培养自己快速阅读文档，拿到新包，就能快速找到自己所需的函数，读函数名，看参数，返回值就能大概猜到函数作用的能力。到了这个阶段，大部分都已经从事 Python 工作一两年，或者对 Python 很熟悉的了。这个阶段更多的事阅读源码，深入学习，可能这里需要大量的理论知识来支撑。就拿机器学习来说，你要进一步深入，就需要大量的数学理论知识来支撑，比如统计和概率论、微积分、凸优化、运筹学、泛函，否则只会望而却步，或者一直处在调用机器学习开源库的瓶颈上。数学理论知识就会限定了你的能力圈。PS：公众号「googdev」回复关键字「python」可以免费获取一份 Python 学习电子书。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",叛逆者,Python很简单的，很容易学。我看这本书，就花了一节课的功夫，40分钟，就学完了。但问题在于，因为不常用，每次用之前，都得再花40分钟。。。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",神秘人,欢迎关注我小密圈哟Python 简明教程 Python 基础教程 Python Cookbookpython3 自学的话 推荐学习Python开发视频教程  视频教程学起来比较容易学pythob3吧 小甲鱼的视频挺不错  学会找资料，也是一种能力。这个教程很不错哦 看一些基本的语法（特色部分），  然后找个自己感兴趣的小需求，用它来完成。 啄木鸟社区有很多资源，它也许可能帮助到你 这里 不用学，直接用就好，随时去　啄木鸟 社区  查: 我常用：  Python基础词典  === 快速手册  ======= 绝对简明手册　 深入Python系列  == Python 精要参考（第二版）真心觉得这个就挺好    
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",舟可归,那会我是怎么学呢？只能啃书，每天至少花3个小时看书敲示例代码，做demo项目，我记得那会去面试的时候面试官问我做过什么项目，我就把自己做的一个聚合网站演示给他看，完整的讲解了项目的实现过程以及遇到的问题，最后也顺利的找到了我的第一份Python工作。1、学习功利心过强。虽然冲着Python的就业前景才学习的人无可厚非，但是不少人学习态度浮躁，仅仅是想着赚钱，不愿意静下心来踏踏实实学习，总是想着速成，或是走什么学习的捷径，这样能学好Python就怪了。如果大家学习急功近利，反而会导致学习效果差，因此不要总想着一口吃成大胖子，速学Python不可取2、缺乏学习兴趣。这里说的兴趣不一定指对编程有着狂热的喜爱，毕竟因为喜爱而学习Python的还是少数人。但是至少要做到不讨厌，试想如果你每天勉强和你讨厌的学习内容打交道，怎么能保持学习的积极性和好奇心呢？毕竟没有强烈的学习愿望很难自学成功。3、基础薄弱，闭门造车。不是说Python编程零基础的人，或者是基础十分薄弱之人，就一定不能学习Python。而是这类人应该有老师指导，有时候仅仅靠自己的力量有限。这类人零基础自学的精神虽然很可贵，但是也很让人惋惜，毕竟一个劲的蛮干，一点方向都没有，只会过多浪费自己的时间和精力。少在错误的方向上使劲，可能你早早就已经掌握python。所以，如果你身边没有能帮助到你的Python大神，你可以加我推荐的交流群，里面有很多专业导师不定期公开讲课，也有一同学习打卡的同学互相交流学习心得。另外我整理此前学习的思维导图，萌新一定不要错过，可以先收藏起来。另外很多萌新甚至都没有安装环境，更不知道如何安排Python，学习群里的资料和笔记里面都包含了很Python下载与安装的基础课程，很好用，会有具体操作提示，跟着视频一步步操作就轻松很多。作为一名职业程序员，一个需要终身学习的职业，上面的资料是从小白到入门需要用的学习资料和笔记，小伙伴需要的可以找管理员自行领取最后，我想说的是，编程并不难，也存在明确的学习路径，坚持一定能成功。越是让你痛苦的事情，越能逼着你成长。上坡路本就难走，下坡路才舒服，咬着牙登上顶后，你会拍拍手轻松说句：呼，也不过如此。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",数学建模钉子户,首先在自学Python之前先要问自己学习Python的目的是什么？常见学习Python目的人群有以下四种：针对不同的人群我们需要有不同的学习路线规划，下面就是我给不同目标人群自学Python的一些建议：第一部分是Python基础内容，这个部分是所有自学Python的人都必须掌握的，如果把学习Python当做是建一个房子，那么这一部分相当于打地基，是必须牢牢掌握的：在掌握第一部分Python的情况下，针对不同的学习目的，学习的内容也有一个区分。首先针对学习目标是利用Python进行自动化办公的人群和想给自己加码的，增加自己一项技能的人群来说，确定一下学习路线：对于这一类人群现在有福了，现在知乎推出了一个基于Python的数据分析课程，我个人觉得里面的内容是十分合适小白上手的，而且课程的目标也很明确：“自动化办公”、“数据分析”、“数据可视化”，推荐有需要的同学可以入手学习。反正也才一毛钱，直接冲，比淘宝上卖的盗版网课好多了！ 安装xlrd和xlwt库运行下面的命令即可。xlrd库的官方文档：xlwt库的官方文档：通过pynput的pynput.mouse可以控制你计算机的鼠标进行上下移动、点击、以及滑轮的滚动等基本操作，通过pynput.keyboard可以控制你计算机模拟键盘进行输入、组合快捷键输入等，安装pynput库的命令如下：有些时候我们需要创建大量的文件和文件夹，但是手动操作是在是太麻烦了，这个时候Python自带的os库就能帮助我们快速的创建大量的文件和文件夹。创建文件夹效果图如下： 下面就利用os库展示一下如何创建文件和文件夹，以及遍历文件夹。现在知乎知学堂推出了一个基于Python的数据分析课程，我个人觉得里面的内容是十分合适小白上手的，而且课程的目标也很明确：“自动化办公”、“数据分析”、“数据可视化”，推荐有需要的同学可以入手学习。反正也才一毛钱，直接冲，比淘宝上卖的盗版网课好多了！Python旋转图片的方式有很多，但是我一般使用opencv-python库来实现。实现效果如下：1.，numpy库支持高维度的数组与矩阵运算，并且针对矩阵运算提供大量的数学函数（例如矩阵的求逆、矩阵的转置、矩阵的特征向量、矩阵的特征值等等）。2.pandas，pandas主要是针对面板数据的一个高性能、易于使用的数据结构和数据分析工具库。它提供了从数据读取到数据清洗到数据分析到最后的数据可视化（基于matplotlib库）一套完整的流程。下面就是数据可视化的一个简单例子，一般来说初次绘画出的可视化图像是比较简单甚至有一点丑陋的，但是你花一点时间去精修一下就能变得十分美观。 3.Scikit-learn，Scikit-learn是基于Python实现专门针对机器学习的第三方库，像常见的机器学习算法“分类算法”、“回归算法”、“聚类算法”都能直接调用Scikit-learn的一个类或者一个函数。更值得称赞的是Scikit-learn库实现的算法扩展性很高，并且很简单，基本看着文档就能上手。安装Scikit-learn库的命令为：那么对于全栈人群来说，除了上面的学习内容外，还需要学习一下Python在web开放上的一个框架——Django，Python当然也有很多成熟的网站开发框架，但是如果让我推荐一个网站开发框架的话我推荐的肯定是Django。 Django和绝大部分的一样都是MTV模式，如果说Django最大的优点是什么我认为一定是“简单易上手”和“易于维护”，我当时本科的毕业设计就是利用Django实现的，学习了半个月就能上手做一个相当不错的网站了。  Django虽然简单但是该有的组件和模块都有，例如拦截器、过滤器、CSRF等等。
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",Flaming,这个话题我太有发言权了。因为我就是没有学过任何编程语言，零基础学习的python。我个人觉得零基础的情况下先看视频效果会更好，因为你是零基础，你可能连怎么使用编辑器，敲完代码怎么运行，排查错误这些你都不会。看书会看的很艰难，看视频就不一样了，有个老师教你概念，教你怎么用工具，教你怎么写代码和排查错误。入门之后你再去看经典书籍，这样就更能体会到书籍里的奥秘了。学习python的视频我推荐这个视频课，讲的是真的好，全程跟着敲代码即可，等你把这个视频听个一半，然后去看的，跟着敲代码，巩固知识点。这一套操作完成，就入门了。然后再去做项目，把你所学用起来。这个时候也可以看一些经典书籍了书籍的话我推荐实战的，因为跟着视频下来，基础语法基本掌握了。，这本书很经典，里面会叫你很多经典python库的用法，读完你会收获很多这本书里有很多项目，真的是手把手教你，跟着做即可这两本书一个月一本就够了，看着规划就行，每天大概读多少。接下来看看你想做什么方向了。如果想做的话可以关注大神，下面就是他总结的爬虫书籍。 如果想做的话你需要学一些机器学习原理(看NG大神的机器学习视频)，学会怎么调用。如果你把文本分类这个项目完完整整的做下来，包括文本的去除停用词，分词，转换成文本向量，用算法进行分类等等操作，基本就入门了。项目的话可以去做kaggle的情感识别。大家可以参考这篇文章，比较粗糙的处理了做自然语言处理很重要的就是文本数据了，尤其是做中文的，数据实在不好找。这里有一份关于中文文本数据的汇总，分享给大家做到一定程度，你肯定需要读读论文，提升自己，那么怎么找这些论文和资料呢？请看这里如果你完整的做了文本分类后，你就可以做一些比较有趣的项目了，比如命名实体识别，实体关系抽取，等等项目可以看这个系列，里面有关于项目的操作思路以及相关原理博客推荐的学习资料大家可以看看这个，的知识图谱教程你可以从网上找，也可以关注公众号：ZhangyhPico 领取视频教程最好也多多了解，因为工作中，老板给你一百多万条数据你不可能标注完再去做分类，这时候半监督分类算法就很重要了。详情可以看看这篇文章其他的方向我就不是很了解了，大家感兴趣可以再去查查看。学一门编程语言千万不要纠结基础语法，大致跟着视频过一遍，了解了基础，然后去实战就好，遇到不懂的操作直接查百度，查书都行，基本上把报错信息拿去百度都能查到对应的解决之法。教程不在于多，在于精和实用，以上都是我在学习python过程中去找的资料，经过了筛选和对比总结出来的。希望可以帮助大家从零基础入门python，去享受编程带给你的喜悦和成就，坚持学下去一定OK的。最后上一张NG大神的图，感觉很有意思
如何系统地自学 Python？,"['本题已加入圆桌', '数据分析入门指南', '，更多数据分析内容，欢迎关注圆桌>>>', '零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？']",林梓,哎，为啥一刷知乎，首页就出现这样的话题，导致我又点进来回答了，所以再写写，嘿嘿……入门啊，一定要看书籍，书籍系统，《Python入门经典》这本书对于初学者来说还是可以的，可以先看看，毕竟比较简单直白，无论怎么说说要自己看了才知道好不好，是吧?!这里有个配套的在线实验学习课程，可以配合书籍来学习，有在线开发环境，还蛮适合初学者的：其次是可以看看一些不错的博客的，比如廖雪峰老师的，Vamei老师的博客，讲解python的也非常不错，推荐：嗯，还有Flask框架和Django框架，了解是必须的：如果你想要了解科学计算或者数据分析的话，这方面的知识倒是可以看看，这里也有几个不错的课程可以看看：主要学习 Numpy，Scipy，Matplotlib，Sympy 等科学计算相关库的使用；主要学习Pandas，Scikit-learn，Scikit-image 的基础使用；学习  基础，数据加载、存储与文件格式，数据规整化，绘图和可视化的知识；学习利用 Python 数据聚合与分组运算，时间序列，金融与经济数据应用等相关知识；当然，以上都只是基础理论知识，学习的过程中可以夹杂着小开发项目来学习，所以再介绍一些不错的python项目吧：关于python可做的项目太多了，你可以按照自己喜欢的来进行开发练习，一定要做一些项目开发，光看是不行的，要动手才行啊！！嗯，好像就这样了，最后再分享一个python学习路径吧，如果你实在不知道学哪些内容，可以按照这个路径来学习：哦，对了，还有几个整理的关于python的资源文章，可以看看：以上，希望对题主能有所帮助……
大二学生，计算机科学与技术专业，学到数据结构和组原有点心态爆炸了，看不懂敲不出代码，还有救吗 ？,[],启舰,
大二学生，计算机科学与技术专业，学到数据结构和组原有点心态爆炸了，看不懂敲不出代码，还有救吗 ？,[],北南,以前我当了好几年数据结构与算法的TA，像你这样的孩子我见的多了，没啥，千万别以为自己笨，很多人也是一开始不行，后面慢慢赶上来的。学不会数据结构往往有以下几个原因：我就两点建议：少则得，多则惑，是以圣人抱一为天下式。算法并不是死记硬背的科目，从最简单的小算法开始理解，多数人都是可以赶上来的。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],稚晖,这个问题本人应该比较有发言权了 :D所以不管是Arduino还是树莓派，我都算玩得比较彻底了哈哈，下面先介绍一下软硬件开发的区别和联系，然后会给出学习建议~先上几个视频：也自己设计过单板↓接下来回答题主的问题：新手想玩硬件，买单片机还是树莓派好？这个问题其实还不是很准确，题主首先要知道是个什么概念，硬件是个太宽泛的定义，实际上任何技术都是多少和硬件相关的（哪怕是纯算法工程师，也要考虑硬件架构才能设计出最优算法）。我想楼主想说的应该是在中，具体分下来：底层可以到模拟电路（射频、电源等），数字逻辑电路（FPGA、等）；上层一点有汇编开发（比如，纯硬件相关）；再上层一点有驱动开发（连接硬件和软件）；再往上就是操作系统层级了，各种APP应用软件就在这一层；继续往上抽象，就是软件框架和算法层面了。所以我们来看看，Arduino的开发其实属于Kernel那一层，也就是，而树莓派则一般在操作系统那一层（不考虑驱动开发），这样题主应该就知道他们的本质区别了。抽象的层级越高，要实现某个功能会越来越容易，但是相应的自由度会越低。这么说题主可能还是不太直观，给题主看几个我之前做的项目：这是我之前的一个回答，这个回答中我介绍了制作迷你机器人的过程，其中就有从第一代用实现，到最新款的用纯APP实现的效果：不知道题主看完觉得对哪个机器人最感兴趣？如果是前两个的话，那么Arduino适合你，对于这种玩具类的设计Arduino有天然的优势，那就是数不清的库；而如果题主觉得最后那个手机实现的机器人比较有趣的话，那么可能更适合做APP开发，不论是树莓派的Linux还是Android和ios也好。比如上面链接回答中我也提到了，那个其实就运行了操作系统的，允许我们直接用python编程来实现一些功能，但我想实现用它来控制智能家居，而它却没有给我提供相关接口怎么办？。这也是我决定自己重新从硬件开始设计那个机器人的初衷。对于我自己的经历经验来说，我最早是从学习开始入门电子设计的（大一学完了C语言），当时用51就是制作一些电子钟，简单的小车之类的；然后偶然中的必然遇上了Arduino，才感觉开源硬件世界向我打开了大门，沉迷于当创客无法自拔；使用Arduino很长一段时间之后，已经熟悉到可以自己设计Arduino板卡、编写Bootloader，这时候才触及Arduino作为8位单片机的天花板，也就是性能，所以又转而开始学习，上面的那个磁悬浮就是基于STM32的，对于这样需要运行复杂控制算法的项目来说，Arduino已经力不从心；DIY到了一定程度，肯定会想追求更专业的作品，于是你需要开始思考产品化中的技术：PCB设计、结构设计、工业设计、软件封装...用做产品的思路和技术去玩项目，这才是的最高境界。说了这么多，对于题主有几点建议：长期搞各种脑洞项目，大家不嫌弃的话也可以点上面关注一下～不定期更新项目顺便微博@  我的其他回答：
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],设计极客Chen,"陆陆续续做了很多硬件项目5-6年了， 说说我作为一个非专业的经验：我的经历：本科电气工程但是并没有好好学习，不喜欢课堂上理论为主实践几乎为0的方式。大三左右（2009？）开始对单片机感兴趣，那时候什么都不懂，51开发板， 教程都买了，还自己照着书焊开发板，可惜手残都不能通电。当时的感觉就是，没有一套统一的平台或者教程，链接电脑也不方便还要买转接器， 软件也特别不友好。（如果现在不一样了欢迎指正。） 个人一句话总结： 51可能更适合做开发，不适合新手入门， 如果以后我不做产品的大量生产复制，可能都不会碰到51.本科之后就转行学了设计，本科基础都慢慢忘光了，所以我可以说是从新手小白一路学过来的。2013年左右了解到了Arduino的存在， 立即买了官方的新手包，里面附了一本小书和很多简单配件，一个星期就可以全部做完，还能做出几个小小的作品， 成就感爆棚。 几个Arduino项目，不见得多么复杂。2019年的生日加情人节礼物，Arduino Nano +Neopixel五年前做的另一个生日礼物，用了Arduino和LED矩阵，定制了动画。这两年也做了一些套件，很方便入门2014年因为一个项目需要做到无线视频传输，入门了树莓派，可以说功能相当强大了，但是要学的东西很多很多。 刚开始压力会比较大比较烦躁。这个坦克算是我第一个大型项目，从机械设计，3D打印，用树莓派控制，到远程视频传输和遥控软件，当时有点无头苍蝇但是也不管三七二十一的做了出来。现在的知识和技能都有了增强，但愿这几年能重做一个2.0。51平台不甚了解就不说了Arduino英文的定义是 Micro controller。所谓控制器，接到输入，进行处理，再进行输出， 通常来说是单线程的。 所以适合做一些不复杂的项目。这里的输入可以是按键，传感器，数据等等， 输出可以是数据，声光，电机等等。 树莓派是一台电脑， 一台超小型的功能没那么强大的电脑。多线程，可以安装操作系统，有多样接口等等等等。   祖国版完全够用，Uno 二三十块， 小的Nano十块钱左右一个。 淘宝一百多的新手包完全够入门了。 ：一个板子就200多，你还要考虑各种配件。新手不弄headless的话得需要显示器吧，需要hdmi吧，老版的需要再买USB Wifi，USB不够用要买，还有键鼠套装。这还不包含面包板小元件什么的。当然可以一上来就headless。新手学习，万一有个短接什么的很平常，用Arduino， 烧了就烧了不心疼，Pi的话不差钱您随意。还有就是你做项目的自由度， 同是200块钱， 你可以做20个Arduino项目，每一个都可以随时拿出来把玩。 Pi只够同时做一个，要做20个项目的话还要每次重新连接，每次运行不同程序，想想都心累。学学怎么接线，usb插好，IDE下载好，运行示例程序。就是这么简单。首先得看卖家提供了什么样OS， 如果没有的话，你要先格式化SD卡，研究好要用什么OS下载好，（Headless模式： 设置Wi-Fi信息启用SSH，用一堆你没听过的软件设置另外的电脑端。）接好外设,  启动，设置用户名密码，利用linux连接Wi-Fi。下载必要的软件，开始编程。电路连接方面，两者都需要基础的电路知识，Arduino的Pin口相对树莓派的GPIO友好很多。根据项目边做边学，不求甚解也没关系，慢慢就开窍了。编程方面：题主说有C基础，C也是大部分人的大一基础课，不难上手。IDE也很简单，编好程序一键编译上传。多看看示例和别人的教程，高级的功能多搜索。大部分OS启动后是直接进入命令行的，bash command不见得每个人都会，怎么新建文件，怎么保存，怎么退出程序，怎么关机，你可能统统不知道。你当然可以一开始就使用StartX进入GUI体验下linux系统，跟Mac OS和Win操作还是有区别的。 下面你可以开始编程了，大部分Pi的程序是Python写的，虽说Python相对好学，但如果从零开始的话也是额外的一个负担。上面说了这么多，好像看起来Arduino又便宜又方便，为什么还需要学树莓派呢？树莓派虽然相对昂贵复杂，但能为Arduino所不能。 举几个栗子：树莓派跟你的电脑一样，可以多线程，同时运行多个程序执行不同任务。可以运行更复杂的程序，比如用python做抓取，，机器视觉等等。有更好的网络连接性。当然也有相对弱于Arduino的（功能方面），比如运算实时性不高不适合精确的时间控制。有很多项目也是通过树莓派控制Arduino来各取所长。我自己喜欢把两者的关系比作人脑，树莓派就像大脑一样负责观察体验（机器视觉），思考（AI），做出决定（指令传送到底层）；底层的功能如呼吸消化（系统自检，电源），（自动避障，陀螺仪）， 身体控制（电机）等交给Arduino来更快速的解决。有什么说的不准确的还请大家指正！Happy Making!关于我:自己平时会做些各种各样的小玩意，激光切割，3D打印，Arduino，Unity什么的。欢迎关注ins： Chenthedesignmaker   微博@ 设计极客Chen还有我的youtube频道：目前在做各种科技diy向的节目和教程，请多指教！"
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],广慈精神科主任,玩硬件很多人说很贵，但是我觉得其实现在是玩硬件最好的时候。1万元对于本科生来说相当于两年的大学费用。对于3本的学生来说相当于1年的费用。1万元估计都不能上的起某些单片机，java，深度学习的培训班。但是1万元自己投资自己做硬件却可以学到真正的知识。骚年你渴望力量吗？这里有一份器材清单我看与你有缘免费送给你吧。首先 仪器类1。示波器 2100元左右 双通道100MHz模拟带宽1Gsps。 可以carry各类模拟电路的试验以及工程。2。 360元左右可以买到200MHz采样16通道的虚拟逻辑分析仪（计算机外接adaptor usb传输到计算机显示波形的那种）。3。万用表 不去搞强电也就30快能买一个主流的了。开发板类的：1。 FPGA开发板。玩硬件如果不会fpga你觉得你会爽吗？fpga一时爽，一直用一直爽。最开始入门可以买那种点个数码管，外面挂一个sdram那种的烂大街300块左右的fpga开发板。后期的话直接用zynq也就800元左右。2。。我不建议开始就去买单片机的开发板。单片机入门从入门最好。现在有大学教材会吧51的结构，指令集和外设讲的很全面。结合模拟电路和数字电路的知识可以自己来搭建自己的51系统。比如用80c31外扩 6116的SRAM和通过74HC373外扩EEPROM 2817。通过这个过程你了解到的不仅仅是单片机的原理。更重要的是你对存储器模型有了一个很深的了解。儿存储器模型是现代计算机的根本。所有的计算机内部的数据传输均是基于的。51搞完了就可以进军stm32了这时候你就会发现你比那些一上来就搞得人有哪些优势了。PCB设计自己拥有pcb的设计能力是很重要的。而现在就是最好的pcb设计时代。4月初某两家厂商打架硬是把以前就很划算的打样费用打到了5元每款（10x10cm的双层样板每次打样只要5元）。厂商关键词jlc进阶搞完了以上这些基础的工具类知识基本上做一些简单的东西就游刃有余了，此时的你会很爽。但是不应该仅仅局限于简单的东西。下来就应该做一些更牛逼的东西。比如数字信号处理。神经网络之类的。做这些你就需要接触一些高端的板卡了比如fpga类的你就需要一些逻辑资源大的比如55k LE或者110k LE这种资源的。我有幸有一块530K LE的板卡吼吼吼 后期准备部署我自己的深度学习加速模块。这些板卡价格也还算能够接受。一般的85K LE等级的板卡比如 也就800左右吧 altera类的  有一款110k LE的也就800多吧。有了这些利器做什么都会很爽。最后你会不甘于仅仅只是把你的想法在开发板上运行。这个时候就是体现你pcb功底的时候了。自己定制一款自己的单板，砍掉所有不需要的功能，尺寸做的小乔玲珑不要太爽。对付bga封装的芯片其实现在也不是很复杂。jlc的4层板制程已经可以满足0.8 ball patch的bga设计 而他只需要每款样板100元。bga焊接也不需要去专门的厂家自己就可以搞定。我是这么做的没错使用这种恒温加热板就可以焊接bga了再po一张焊接好的下面这张图是板上有一个0.5ball patch的。当然后面你还是会不爽因为你也想自己做结构件了。那就整一台3d打印机吧 现在1500元就可以买到一台3d打印机对于我们这些只做结构的人来说太合适了。走到这里你已经成为一个硬件产品经理的了。 找工作更是不用愁。而这一切你只是花了不到1万块和几年的成长时间而已。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],乔不撕,。不要盲信高票答案，他俩，不是进阶关系。做出炫不炫的东西是个人爱好，不是拿来说明差异的工具。1、单片机主要用在控制领域。这一点Arduino也罢，51也罢，绕过Arduino直接上AVR也罢，一步到位STM32也罢，差别在系统复杂度不同，功能强弱不同，资源多少不同，但共同的特点是一般都不上OS直接裸奔，要上也是RTOS，即它们共同强调一个特点，就是。即便如今已经能跑到220M的CortexM7，ST的高端型号甚至都上了A系列都没有的双精度FPU，依然没有MMU这个东西，说明压根就不是给完整的操作系统准备的。相比之下，只能跑80M的ARM7TDMI却能运行完整的linux（当年红遍全世界的GBA就是这个内核，不过主频低得多）。学习单片机，主要是要学习数字电路知识和一部分简单模电，核心是计算机体系结构。这就是为什么大学的喜欢用8051或者8086这种老掉牙的东西来讲，因为简单，但该有的都有。可以说单片机是硬件工程师入手的必经之路。2、树莓派是个。树莓派的核心是跑架构、跑库、跑算法，GPIO是附带物。没有人裸奔树莓派，因为这样根本发挥不出它的功力。大家是用linux强大的网络功能和开源本质，以及C++带来的强大封装和模版化，来无视底层、无视硬件，让创客专注于算法和模块的设计。所以树莓派开发恰恰是为了最大程度绕开和硬件的接触。你看到的树莓派和硬件的结合，是最小化硬件操作之后的产物。所以别人的代码down下来编译一下就能跑了。单片机代码你要是无视对方的电路设计，跑一个我看看？所以单片机还是树莓派这个选择要看你的倾向，硬件还是软件。实际上如果你要选择这个方向从业，两个迟早都要玩的，别选了。顺带一提。我在dji厂做算法工程师一年多，跑在CortexA平台上，和树莓派一个类型，以前自己玩四轴的时候是用CortexM4，这俩东西相互不能取代。高票答案太限定在自己是一个创客的角度了，无意冒犯，但做个彩灯这样的东西晶体管都能实现，不能拿来解释架构上面的东西。倒是亚克力加工我觉得值得肯定。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],cr4fun,建议新手从树莓派上手。因为树莓派本身是一个单卡计算机。只要你会操作linux，只要你会点python或c语言，你就会使用。当你会使用树莓派之后，你可以尝试一下单片机。比如。我从树莓派开始研究，后来玩arduino，现在开始玩esp8266。这是使用制作的一款游戏。下面是演示。其实玩硬件有很多种方式，不要去纠结如何选择，我建议你把所有硬件都玩一遍。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],祥子在路上,玩硬件是个大坑，我上大学的时候，看到那种编程的双足机器人，觉得炫酷的不得了，就开始找攻略。网上说先从做四驱车开始，我买了树莓派及其各种配件大礼包，总共花了1200多，照着视频一步一步做完。然后我就感觉我行了，牛逼了，准备着手开始做双足，买了好多舵机，装舵机的架子又花了，还自学soildworks做外壳。玩了半个月，啥也没玩出来，小两千的一大箱子硬件在角落吃灰，我那一学期都没吃过一顿好的。结论:哪个便宜玩哪个，等发现自己真的喜欢了，入门了，懂行了，就自然明白了。不然就像我这种失败例子一样，每天都看着那一箱电路板，回忆着那半年吃糠咽菜的生活，在浅色的床单上哭泣。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],不是假棋,"大家为啥非要争个你死我活呢用过51/STM32/Arduino UNO/ATTINY85(DigiSpark)/ESP8266/OrangePI(类树莓派)写过HelloWorld（即点亮一颗LED），简要对比下特点，供题主选择优点：结构简单，工业化使用时间长，资料齐全缺点：没有板载adc，pwm需要使用定时器模拟，基本上干点啥都需要扩展外围电路；计算能力有点捉急补充：比较新的51已经有了pwm和adc口最小系统价格：stc89c52<10元优点：片上资源丰富，该有的都有了；处理器性能强大；工业使用也有一段时间了，资料也很丰富齐全缺点：实在找不到啥缺点，非要说的话，开发环境配置比其他的复杂算不？最小系统价格：stm32f103c8t6<10元；stm32f407vet6<50元优点：开发环境配置简单，片上带adc，有各种库存在，有开发效率加成；缺点：IO口数量有点少；片上资源，性能上与STM32差了不止一个数量级最小系统价格：国产ch340+贴片328p版本<20元优点：使用开发，USB支持（模拟键盘，等玩法），IO口支持adc/pwm/i2c/spi等都支持，用来玩足够了；价格便宜缺点：ram太小，io口就6个最小系统价格：<10元优点：刷nodemcu固件后可以用lua开发，或者直接使用开发，IO口支持adc/pwm/常见的总线等，尤其适合IoT缺点：资料丰富程度不及51或stm32最小系统价格：esp12f+ch340<15元，单芯片（不带串口芯片）约为10元优点：资料相对丰富，ram足够（高达数百到上千兆，跟单片机几百字节到几兆字节相比，高了几个数量级），可以买到支持rj45或者wifi的版本用来做IoT（实际上，xxxPI更适合作为IoT设备的中心节点而不是直接控制硬件）缺点：非实时系统，价格相对较贵部分参数对比：备注：esp8266 ram为64K instruction RAM,96K data RAM关于片上资源说法比较粗略且不严谨，详细差别可以参考各芯片的选型手册关于示波器/屏幕的问题：取决于需求而不是控制器。关于开发板：我个人都是直接上手最小系统板，从开发板上手容易导致只会用开发板，容易知其然不知其所以然，拿到最小系统容易蒙圈；自己搭外围电路是一种乐趣，自己搭建外围电路，换其它种类的单片机很方便总结下：不说需求就选型就是开玩笑。先定需求，要不要wifi，需不需要i2c/spi总线，需不需要串口，代码规模大概多大，io口需要几个，预算多少。以上需求确定后，基本上就选出来了。"
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],Sental Cristar,我个人建议不要从任何（单板电脑，比如树莓派、）开始。SBC实际上定位非常尴尬。搞物联网（），代码复杂度、搞通的难度远高于ESP32和，搞Linux，又比PC和服务器增加了很多不必要的麻烦，有的项目不支持，硬件结构不一样……我的建议是，对接传感器、屏幕等，先从ESP32开始。入门难度之低，超乎想象。STM32也行，但随着国产化的浪潮，我认为前途不如ESP32。而且ESP32自带wifi和蓝牙，太接近我们平常玩的东西了。STM32更偏离线的设备。想对接硬盘，从PC或者VPS开始。Sata，NVMe这些高速率的东西，ESP32完全搞不定。等你把这两边的基础都搞通了，再向SBC平台进军。树莓派、国产各种派，主要优势是体积小。他们更多的还是对标PC和服务器的，只是兼具一些GPIO能力而已。而且他们的GPIO配件，基本是厂商高价定制集成的，某种意义上带有一点智商税。适合给小孩当教学玩具玩，不太适合真想学点知识搞实用的人。另外说下入门成本。ESP32开发板，第一块大概24元包邮，送。第二块就可以买9.9元包邮的了。屏幕啥的可以去淘0.5元一块的二手，电机有2元左右的二手，各种转换接口0.5元（普遍6元邮费，我基本都是一次淘20元的，降低邮费成本）二手的尾货外壳大概也能2块钱一个淘到。（你得有这个意识，很多东西买了直接拆外壳）万用表大概十几块钱，电烙铁8块。最贵的其实是电压电流计，这玩意要60-100元。试过买5块钱和13块钱的，用起来累心，不适合查错时用。启动成本非常低的。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],tom pareto,硬件的正确打开方式很关键，所谓差之毫厘，错之千里。有些回答上来就贬低c51，有些回答就回答arduino。有些为8051辩护，却又不答不到点子上。单纯地贬低8051，或者单纯说arm，都不在点子上。首先，玩硬件是一件烧钱烧脑烧时间的事情，并不是买一块8051或者就完事了。以前，玩硬件的叫发烧友。历史上，国内叫发烧友的，硬件还真能算是第一个。其次，你玩硬件的目的是什么？是学一门技术，还是玩玩而已。如果是玩玩而已，在高中/大学混个奖，其实在淘宝上买个什么机器人、自动小车套件，就可以了。如果真的是对硬件感兴趣，想学门技术，请耐住性子，开始还真不必买什么板子。就可以了。玩硬件不是拿个起子捅收音机，那是野路子。虽然有效，但是不正宗。从电路分析、模拟电路开始，公式+proteus验证。数字电路也是一样，公式+multisim。有朋友说，数电用FPGA，非常同意。不过时间可以放在方向确定之后。这之后，差不多可以搭建一个最小系统了。用8051也可以，用cortex m3也可以。之后，再在某个应用方向上扩展功能。到工厂去，到一线去。这中间的路，远非你想象那样简单。硬件不重要，反正到了一定阶段，你总会“发烧的”。。当然，如果有经济能力的话，花个几千块，可以体验一把。其实也没有什么好体验的。就当放个大烟花一样，就是看个热闹，看个稀奇，看个新鲜，看个好玩。放烟花的时候，并没有什么意思。真正有意思的时间段，是动了买烟花那个念头、挑烟花、一直到点烟花那一刹那。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],一世繁华,目前凑合能说是一个单片机职业开发者了，应该能答一下这个题了。开始之前，看到上面有好几个答主吐槽了51，虽然“Keil 礦ision”这个梗我也是笑了很久，但是强行贬低任何一个仍旧大规模应用的东西的做法我并不赞同。先看看答主的意思吧，想要玩硬件。但是很有意思的是你说的单片机多数时间更像是偏向于底层的软件开发，并不是硬件开发。既然我是搞单片机的，那就从单片机的角度先给你一些参考，得益于极高的性价比，目前市场上的主流之一是stm32系列，不管是m3内核的还是m4内核的，应用都非常广泛。至于被一致吐槽的51，这个确实在被慢慢淘汰，但是也不能说一无是处，毕竟一个被各大高校拿来当教材的单片机必然有它的可取之处。因为我开始阶段也都是自学，该踩过的坑都踩过，在我看来，51最大的优势是它的结构相对简单，寄存器很少，甚至达到了可以全部记住的地步。但是同时，51也有足够的能让你理解单片机是什么东西，能干什么的能力，定时器，中断，还有串口，这些做单片机逃不开的东西它都是有的。另外，51的内部资源是非常有限的，如何利用有限的资源，达到更好的效果，这个锻炼的是一种能力。虽然现在更强的单片机让这种不浪费每一个字节的态度已经变的没那么重要了，但是真的等到需要用到的时候，你会感谢以前学到的一些能力。如果你真的想深入到非常底层的东西，比如代码真实的运行轨迹，怎么实现的中断跳转，甚至怎么实现一个操作系统，51还算合适，仅仅因为它还不是那么复杂，而且各大高校的教材是非常多的。但是为了应用的话，51就只能用来学习一些基本概念了。推荐浅尝辄止就可以了。应用的话，一个更加主流的方案可以让你遇到问题更加容易解决，毕竟你遇到的BUG，可能其他人早就解决了。个人推荐stm32系列，无非因为便宜。而stm32选用库开发是大势所趋，寄存器的概念和操作希望你在开始之前就已经搞懂了。至于树莓派，它很强，但是强也意味着复杂。用它的话基本逃不开linux，社区资源足够的话，你可以有很多教程，但是如果遇到社区所没有的硬件设备需要驱动，那么就会很麻烦，你需要学习linux的驱动开发。而如果有的话则会变得非常简单。总结来说，单片机更适合一些底层控制，而树莓派用来做服务器或者处理中心更合适。时间有限，随便写点，到此为止。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],Hank, 属于，可以方便的通过代码，直接控制底层硬件资源。Arduino IDE 库管理器提供了丰富的第三方板级支持包，可以方便的实现诸如传感器、伺服电机、舵机等外围设备的控制逻辑，具体请参见我个人电子技术博客  里的如下文章：无论是 Arduino 还是 树莓派，都提供的 UART 串口通接口，因此在实验过程当中，USB 转串口之类的小工具必然是不可或缺的，为此答主专门制作了一个 USB 转 UART 小工具，同时兼容 CP2102 以及 CH343 两款芯片，两者的都可以达到 ，希望能够对大家的实验有所帮助：
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],知乎用户l985Ip,我个人看法。。。。。本人推荐先从啊丢肉（Arduino）开始。本人4年多前开始玩硬件，一开始是从三极管和集成电路开始搞得（那时候还没听说过单片机），然后就每次都是要很费心思的去设计电路才能搞出一个好点的产品出来。最早我就是连npn和pnp三极管的原理都不懂的，就去拼命查资料，看了n多书才弄明白，紧接着就用三极管做了一个闪灯。不久以后我又接触了555等集成电路，就觉得比三极管方便多了，在这期间我经常去查datasheet，然后又用集成电路搞出了流水灯.“石头剪子布”机.pwm电风扇.打地鼠机等，功放也做了十几个。不过有一些东西用集成电路来搞也很有困难，比如我曾想用555和4017来搞一个闹钟，结果失败了。。。。。。紧接着我就开始用89c52单片机。我对这东西的第一感觉就是好厉害，写个程序就可以实现很强大的功能！我曾经用集成电路搞失败的闹钟，电压表，温度计等东西用单片机轻松就可以搞的出来。过了一年多以后我又发现89c52的速度太慢了便换了stc15，这下子玩的更爽了。结果一年前，我们学校有很多人玩Arduino，他们用Starch编程就能够开发出很多好玩的东西，而且还不用焊接和写驱动......但是stc15要写底层驱动啊。。。。我就有了个想法，就是利用Arduino的方便来先搞出一个产品，再研究这个程序，最后搬到stc15上。凭借这样我终于在很短的时间内弄懂了nrf24l01和ws2812还有iic 1602模块，而且也更有成就感了。然而，我被stm32深深地困扰着。太难学了吧，从几个月前学到现在只会操作和rtc而已，连怎么建立工程都觉得很难（虽然因为学习忙没啥时间学）。。。。。。所以我大力推荐Arduino，因为可以不用焊接，有现成的库可以用，不需要太多考虑底层驱动就可以搞出很好的产品，对新手很友好。最重要的，价格极其低，某宝十几块就可以买个UNO板，加上配件100不到就可以玩的很high了放一些自己做的东西树莓派和fpga。。。本人真没用过这些东西。。。。。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],James Swineson,这俩完全不是一类东西，有啥好比较/选择的。还有楼上推荐 51/AVR 的怕不是传统工科学出来的……如果你是自学，做 DIY 项目，不打算涉及工程的话 51/AVR 这种的商业产品有啥好学的。网上随便下一个不知啥年代的 Unicode 都不支持的盗版“Keil 礦ision”来写莫名其妙的类 C 语言（一万个私有扩展语法），而且能找到的示例代码风格普遍一团糟（搞电子的写代码就这个尿性），这种东西真打算让初学者看？能写出东西？关键问题：好像大家对我鄙视传统几大单片机意见很多。我不给新手推荐这些是因为：第三点可以展开说一下。比如一个人会标准 C 语言，懂模电数电基础，那么他去写 Arduino 只需要学习唯一一个 language extension：PROGMEM（而且这个东西早期是不会用到的）。如果他连电路基础都没有，没事我们有模拟器  随你玩，不怕烧真硬件。如果他去写 51 单片机，首先他要面临那么多寄存器到底是个什么东西的困惑，然后他会迷失在诸多大大小小的学习板上面（不开玩笑，这样的人我见过不少，有个普遍的认知是板子越大功能越牛逼）。如果他没有电路基础呢，那就得去找 SPICE 模拟来学习了，或者多烧几片 51 嘛，反正便宜。后者的学习曲线是更为陡峭的。==========下面看到一个推荐在低功耗硬件上写 JS 的，让我写 JS 我宁愿写 51
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],Lcici,新手必推arduino啊。。。淘宝上arduino nano才十几块钱，已经够玩出几十种花样了，而且超级好上手。Arduino nano在官网上已经停了，但是淘宝卖的质量绝对不差，高精尖的实验室都用它。工作了才开始学习硬件，arduino试了两三天时间就上手了，意外的是竟然因为设计硬件给工作带来了好多乐趣。至于有人提到的必须要买个示波器，因为兴趣开始学习的话，不妨用instructables推荐的方法，直接用arduino搭一个示波器出来。除了硬件的话，又喜欢编程，估计可以玩树莓派了，树莓派的教学资源比arduino要多得多，甚至官网上有很多专门为小孩子写的教程。假想自己以后有小孩子了，肯定给ta来个树莓派玩。。。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],马遥,很贵的东西才做选择，这么廉价的东西当然是：全都要！，有便利的操作系统和软件。因此玩软件占很大一部分。插个SD卡，跟着网上的教程装系统、装软件，学一点Linux。可学可玩的东西很多，花一两天上手以后，就可以随心所欲了 ：）树莓派官方推荐Python编程，可以写Python代码直接操作外围电路，这对懂一点编程但是不懂单片机的新手来说，吸引力很大。比如说写一个超声测距的程序，不到20行代码就搞定了。当然也可以用C开发。而与树莓派完全相反，（简单来说，单片机一开机就会直接执行你上次烧录的程序）。驱动一个小显示器就得折腾一阵子，和真正的单片机开发是完全一样的。不过arduino比专业用的单片机开发环境更友好，编译、烧写过程更加自动化，所以才这么受欢迎。上图是我自己做的便携式游戏机，显示驱动、输入驱动都重写优化过，目前只有这一个游戏 = =接线、面包板、按钮、二极管、各种传感器模块都是通用的，比如你可以买一个arduino小开发包，再加一个独立的树莓派+sd卡，就足够起步阶段的所有需要了，相当方便。PS：树莓派可以接USB键盘鼠标和任意HDMI显示器，所以不需要买专用设备。以后你玩熟了都是用电脑远程登陆上去操作的，就更不需要显示器了。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],Luv Letter,"树莓派也算是单片机(Single Board Computer).  个人觉得的话, 如果是纯刚入门, 包括编程也不熟悉, 也没有学过 Linux 相关, 但是日后可能是正经学 CS 的, 那么树莓派的条件会更好:但是不见得 RPi 4B 就是唯一选择.其他便宜的有意思的单片机还有 ESP8266这个就算是真的 MCU 单片机了, 特色是带了一个完整的 Wi-Fi 802.11 协议栈, 能够用来做很多低功耗的 IoT 玩具, 比如接上红外传感器做防盗感应器, 或者是收集记录温度数据, 也能做一些简单的小车. 价格也不贵, 并且Arduino开发平台直接在 Windows 商店就能下到.而如果还是想玩 Linux , 但是要尽可能便宜, OrangePi Zero 是目前接口相对齐全的最便宜(百元内)的 Linux 系统开发板.往上还有支持 HDMI In 的 RK3399 系列开发板, 和支持 Android 神经网络框架的 RK3399 Pro. 如果是入门学习 FPGA/ARM 协同开发, PYNQ 平台是目前最友好的开发平台, 有着相当完善的生态; 甚至不用学 Verilog, 用 python 就能做 FPGA 开发."
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],Riseyoung,附赠一个挑选指南，看看哪个适合你，或者符合你的需求。没有必要一定要从最基本的入手，需求大于一切。ps:还有什么比用python写硬件更优雅，推荐楼主试试支持的pyboard(≖‿≖)✧
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],沈一鸣,它其实就是个微型主机，GPIO接口和相应的拓展板数量少开发较为不便（linux不能算）网上看到有意思的项目主要集中在DIY Gameboy之类。作为只能硬件的核心来说，性能有些overkill了，带来的最大的问题是这类的硬件一般功能强大针对专业选手，学习曲线相对比较陡峭，需要有一定的专业经验比如数模转换、通信接口、寄存器等，本人至今未敢尝试（主要是因为目前遇到的一些需求用arduino已经足够）一般在需要实时大运算量的项目中应用较多，比如机器人、无人机飞控等领域。终于轮到大名鼎鼎的UNO登场了！（不是那个吼到额头爆青筋的UNO牌）综合易学易用、可拓展性和硬件成本首推！既然题主有C的开发经验，arduino ide封装了一整套极易使用的API，5分钟上手，拥有极其强大的社区资源，想做什么项目google一下，基本有人做过或者有很多现成的库可以利用。万能的淘宝上一块UNO板子只用一顿午饭的钱，不小心烧掉一块（玩硬件的日常）也不心疼。贴点本人接触过的有意思arduino项目Bare Conductive Touch board 控制板RAMPS for Arduino Mega 2560 3D打印机控制拓展板不要祈求别人告诉你答案，上面发的这些产品我都摸过做过，没有对的产品，只有合适你项目的产品。找个自己想做的项目Dive in，打开新世界的大门吧！
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],绝不原创的飞龙,玩硬件有两种：一种是自己做数字电路，请出门右转 FPGA 或者左转 Verilog。自己动手才能学得快记得牢。像是 51AVR 这种成型的硬件，你根本没法 DIY，你想加指令，改寄存器？没戏。第二种就是拿微机做其它设备。这个不一定非得单片机，只有必须用单片机的情况下才用单片机，谁不想省事嘛。现在绝大多数智能家居、物联网设备都是 ARM 的。所以你如果要玩物联网，赶最近这波潮流，买个树莓派再合适不过。树莓派上可以刷系统，刷完之后可以面向 OS 编程，省不少事。并且你的选择也多了，什么 Python 啊、Node 啊，不一定非得用 C。运行 Node 的硬件都玩到天上去了：。我想你应该不会造出来什么比卫星还复杂的硬件，不过它连卫星都能胜任的话，应该符合你的需求。最后就是成本，一块树莓派 Zero 一百多一点，3B 是一百六十多。3.5 寸 LCD 一百多一点，7 寸的 200 多一点（你手机屏幕尺寸也不到 6 寸）。或者你可以买个 HDMI 和 VGA 的转接线，到你公司或者实验室随便找个显示器。有些人的双标真是 6 ，好像 51AVR 就不需要显示设备似的。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],故里草木深,如果是要玩硬件的话单片机比较好点。相当于一个小型电脑，只不过是硬件配置比咱们用的电脑要低很多，上面跑的是操作系统，你能接触到的硬件部分全让驱动层和操作系统隔离开了，虽然也有引出的io口但功能有限，除非是简单控制一些外设，其他地方io口的功能也发挥不出，比如我要对电机的编码器进行正交解码计算位移和速度这时候树莓派还不如单片机好用。但通常用树莓派做些单片机处理不了的数据量比较大的运算，树莓派直接能支持usb和网络等等这些协议，以上位机下位机的形式与单片机通信，或者搭服务器等等。树莓派可以做很多东西，但需要学习的更多是关于操作系统的知识，就好像让你学习怎么在windows上安装一个软件并使用它一样。如果是单片机的大学里可能会学51单片机，高级点是stm32，另外有非常广的arduino。要对单片机编程的话首先要清楚硬件连接，如果连io口都对应不上运行结果肯定不正确。也就是至少要在明白硬件连接的情况下才能对单片机编程。举个最简单的例子:你要用去驱动一个发光二极管的亮灭，都知道发光二极管是单向导电，如果你把发光二极管正极接在5v，负极接在单片机的一个io口，那么让这个io口输出高电平发光二极管灭，输出低电平发光二极管亮。  如果反过来把发光二极管正极接在io口，负极接地，那么情况正好相反，io口输出高电平发光二极管亮，输出低电平发光二极管灭，而且这种情况二极管亮度没有第一种高，因为单片机输出电流能力(拉电流)很小，最高只有几十毫安，而输入电流(灌电流)却可以很大。是如果不知道硬件连接的情况下你可能要费些心思。假设还要求必须是高电平点亮发光二极管而且亮度要高的话就可以加个。如果要做个示波器呀，或者巡线小车可能就会用到运放和电压比较器这些集成ic，也是要在了解硬件的情况下写程序。附上自己曾经做过的一些东西，我很少用到树莓派，基本上都是直接用电脑做上位机进行一下比较复杂的运算然后与单片机进行通信。一个电子秤，能实现价格累加另外真的感谢有arduino这个单片机，很多只要能把机构做出来就成了，比如一些3d打印机，激光雕刻机，写字机，画蛋机。。。可以画A0图纸哦，我们这个专业有时候一张图能让你人工画一整天。这才是diy的根本，有了它才有了上面的一切。********************************************
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],盗火者,在中国，千万不要学硬件。有那个才华，为什么不学软件呢？软件和硬件比较，软件省钱而硬件费钱。有个成语是，套在软硬件上很合适。学软件只要有台电脑能上网，以后基本花不了什么钱，软件和电子书网上下载就用。硬件那是个吞金兽好吗，电烙铁，焊锡丝，万用表，示波器，，学什么都从购买套件开始吧，还有各种的电子元器件。画PCB板，工厂制板，自己焊接，调试。一圈下来，至少一个月周期吧，起码几百块钱出去了吧。看看做软件的，一晚上已经重新编译几十遍了。还有就是就业钱景，软件攻城狮本不值钱，工资是被外资炒起来的，微软开拓中国市场，不雇佣中国本土攻城狮行吗？硬件那是核心技术，不可能拿到中国来开发啊。再说了，硬件开发需要环境，起码要有制版厂，焊接厂，元器件市场。你不会把硬件研发迁移到县城，同样的老外也不会把硬件研发迁移到中国，多一半的元器件都买不到啊。所以培养一个硬件工程师比软件难十倍不止，但是学成了没有用武之地，只能到中资小公司就职，资薪很低的。我是一个行将就木的老人了，心里话劝年轻人不要误入歧途。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],王若斌,玩硬件的话。。。不应该从555和放大器开始吗，收个20M的模拟示波器，拧拧旋钮找手感买把好烙铁我是大一入的430（TI送板子，ccs），然后做电赛搞得stm32（f407，IDE用的前面有答主提到的 Keil 礦vision5），大二上课学了学stc的51，没啥感觉了。后来就是教学弟学妹们玩Arduino，项目需要玩了一阵树莓派，搞搞FPGA（也玩了几天zynq，弃了）。学各种可编程器件的路挺诡异的，个人观点就是51可以跳过了，便宜点买个寨版arduino可以做不少好东西找找如何做到软件操纵硬件的感觉；然后上stm32这个级别的跑裸奔（无操作系统），可以上彩屏等高级外设了（这个时候就需要花不少钱了，我自己搞的f407开发板用了IPS屏，舒服）再往后的话其实可以不用树莓派，试试i.mx/ti的bbb，或者国产的全志arm核处理器，这些家的芯片有零售，自己做好了可以开pcb。不过我不是很喜欢这种跑系统的，没深入研究。遂改学习FPGA，小规模的还能玩玩，带arm核的FPGA就很贵了（学校有n款板子，但都没有什么资料），而且一般也要跑OS一个人不容易玩转。我以后主要是想做硬件类的，所主要精力放在电路/pcb/测试/焊接等等方面上，从stm32开始就是自己画pcb做开发板，关于编程的部分就没有再深入。还有一些专项类的mcu也可以尝试，ti的或nordic的nrf51822系列都是结合无线的mcu，对物联网有兴趣可以尝试一下这类。学什么还是主要看要做什么，打算最近买块j3160的小板子玩玩，搞个hifi播放器
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],高原,———————————————分割线—————————————————我来谈谈我个人的想法。我本科时候是个混子，大四寒假感觉单片机有点意思，就用自己当家教攒的钱买了块学了学。当时我看的是郭天祥的视频，看得差不多了就自己做了个带温度计的时钟，从开始学算起总共花了两周左右的时间。到这你只看到我用了两周时间做了个小玩意出来，但是你不知道的是，我们的培养计划里有。因此我能比较容易的理解视频里的东西。做的东西在这：回到题主的问题，“”，这个玩很重要，有的人玩着玩着就把这个玩成了工作，有的人玩着玩着就不玩了。如果是后者，那么树莓派吧，就像高赞答案那样，做个极客挺好的。前者我们下面来仔细说。。这是一个非常重要的信息，题主没提到自己有没有电路的基础，能不能看懂简单的电路图，假设他不会，那我们直接选择树莓派，为什么呢？看下图：如上图所示是树莓派连接OLED12864的接线图，我相信认知水平正常的人只要给全材料，都能把这个线接上。那么有人要说了，没有代码怎么注入灵魂？不要急，都给接线图了能没有代码吗？可能还是有人问，这样能入门吗？答案是可以。但是会C是远远不够的，还需要学点Python，因为很多基于树莓派的硬件项目都是用Python写的。用树莓派做硬件的可能都知道一个库，里面集成了很多外设的驱动，有了它无往不利。比如说你要用某个元件，例如一个ADC，那么你可以直接抄代码，抄完达到效果了，回过头来看看库里面的芯片的驱动源码是怎么写的，对照着元件的数据手册给的时序图或者命令集一个一个对应起来，坚持一段时间后你才能算是入门了硬件，。这里你提到了单片机，因此我认为你还是想了解点底层的东西，那么时序是非常重要的概念，因此你需要看懂时序，不然你学的那就只能是皮毛。如果题主除了会一点点C，电路等基础还不错，那么建议直接上手单片机，为什么？因为嵌入式里面大多数时候用的就是C语言，不需要增加语言学习的负担。其次，硬件开发不光是写代码，还要画板子，很多时候我们都需要自己定制硬件，这就能全方位提高硬件开发的能力。如果这时候还选择树莓派，你看上面那个图，除了学怎么连线外还啥能学到（）？至于单片机选择的话建议51入门，51我个人觉得是跟微机原理课本比较接近的单片机，比如说里面的定时器和中断，都能较好的对应上，尤其是定时器，初始值重装简直完美对应。学完单片机后树莓派也是个不错的进阶选择，你可以用它来熟悉Linux系统（）的使用。而且如果你要嵌入式一直走下去，很大概率也是要接触Linux系统的，毕竟现在嵌入式上系统也是个很好的方向。硬件还有一个方向就是FPGA，这个方向更硬一些，前面说的这些就很重要，这时候你学习树莓派和单片机打下的时序电路的基础就很重要，不然你开发的东西测试的时候信号你都看不明白。比如下图这种：不好意思发错了，这是写的UDP协议的testbench结果，不懂时序基本上就是天书。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],ERYUESANHI,其实玩硬件吧，怎么说呢，我个人认为什么单片机树莓派都是别人给设计好了的，里面的指令集或者是树莓派的系统，这些从某种意义上来说也不属于硬件。玩硬件的话个人认为要分模拟还是数字的，模拟的话最基本的用运放实现一些东西，比如PID控制电路啊，pwm发生器，波形变换之类的，高级的话还可以实现一下乘法器，仪表放大器等。数字的话有74系列的芯片，用各种门电路搭建全加器，各种进制计数器等，也可以学习下硬件描述语言如verilog语言等，弄个FPGA写几个通讯协议等。当然硬件领域可不止这些，如果对电路版感兴趣可以画和PCB试试，可以是单片机的最小系统及一些外挂芯片，这时候你就要学的多了，要看单片机的手册，注意各种电阻电容的匹配，外部芯片的手册，通讯协议是什么，单片机应该怎样分配引脚，包括单片机里面的驱动程序怎么写，是用单片机内部的硬件完成呢？还是用软件模拟完成。个人认为这些才能说是玩硬件，arduino，树莓派有很多库函数，这就造成你通过调用库函数实现了一些功能，以为自己懂了，到随便换一点东西就发现自己完全不行了。而且arduino，树莓派的硬件部分是做好了的，你没有去看过芯片手册，了解外部电路及芯片那还算是搞硬件？？？最后来点我认为的硬件吧:
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],玩笑,题主会一点c语言，建议从入手，之后转stm32，如果stm32可以精通，上手其他微处理器几乎不会有什么难度。c语言是题主现仅有的工具，如果现在开始玩树莓派，和硬件几乎搭不上边，树莓派的开发语言多数是python，题主还要从头开始学习python。在你开始研究51的时候会找到一些论坛，等精通51就知道下一步干什么了。其实玩这些东西就是这样，动了一个念头，着手做一些东西，然后兴趣越来越大，越来越不满足于现状，就会主动探索更深层的东西，自己就有了方向。因为用了心，所以动了情。最主要还是要敢于迈出第一步，并且有一定的兴趣。-----------------------------------------------------------我是从大二接触的单片机，去淘宝随便买了一个开发板，然后就对着视频学，每天都在晚上学，舍友打游戏打到夜里两三点，我看视频敲代码到夜里两三点，然后一起熄灯睡觉。中间参加了一些比赛，接触单片机肯定离不开画板子，自己学了奥腾，画出板子发给淘宝打样，回来自己测试板子……然后想做一个四轴，自己买了stm32开发板，学了一段时间，stm32确实比较难，不过只要花功夫理解了原理，多看看例程，学起来也会得心应手。而且如果真正掌握了stm32，其他的单片机真的会简单许多。毕设老师要做人脸识别，用树莓派+python，本来就是一个陌生的领域，不过人脸识别方案似乎很多，我就接了下来。学了一段时间python基础，然后各种查资料，现在还在学习中……我的感受就是，单片机就是是一块任你摆布的处理器，各个寄存器需要你配置，外围电路需要你根据自己需求设计，要有一定的模电数电基础，而且大多数都用c语言开发，所以比较符合题主的情况和要求。树莓派我的理解就是一个电脑主机，只不过他的性能没有平时用的电脑主机好，只能运行一些linux系统，其操作多是使用一些命令行，更多的是玩一些软件方面的东西，毕竟设计树莓派的初衷就是提高对编程的兴趣。愿题主沉迷于单片机的世界无法自拔
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],小小日天,借个楼……为51平个反，树莓派、51、AVR、Arduino、FPGA、LabView都搞过，现在我在想什么时候闲了用树莓派搭个NAS……我建议51入门或者直接搞FPGA，单片机和FPGA完全是两种不一样的东西，要选好方向……其实FPGA入门很容易，自己写个计数器、分频器啥的很简单的，入门之后开搞模块化的东西。学Arduino和LabView基本算是学软件，不是学硬件，不会教你什么是寄存器，什么是计数器，Arduino不能调试，编译速度也很“可观”……LabView那就只能运行在电脑上面了，不过LabVIEW做倒是挺好的，就是设备烧钱……（学校的NI ELVIS II实验平台，一台两万多……）AVR入门不推荐，树莓派用来学Linux嵌入式倒是挺好的，用来当单片机使……总感觉怪怪的。51入门的好处就是51简单，便宜，烧了也不心疼（初学硬件哪有没烧过东西的？），可以很容易理解什么计数器、中断、时钟之类的，8 bit也容易思考位移的问题，参考例程也多。包括我现在用的CC2530也是一款高性能的……（CC2530写的读DHT11温湿度程序）推荐STC的89、90系列入门……便宜嘛……（放的都吃灰的STC 51板子）搞完12T的51之后就可以上STC15系列的高性能51，也可以开始搞32了。（STC快给我打钱！）
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],池龙,如果是想做“有一点程序控制的硬件”，并且有可能量产（对量产成本敏感），那么用传统的单片机比如51、义隆系列、。如果是想业余时间做点有趣的硬件玩玩，那么用arduino，价格不高，方案丰富，编程简单，投入低。树莓派实际上是一台PC，不列入讨论。
新手想玩硬件，买单片机还是树莓派好？,['会一点点 C。'],小智智,单片机，推荐用Arduino。树莓派更像是电脑，没有Arduino 离硬件近，所以选Arduino。不是是我眼花了？人家的问题是“玩硬件”，和入门嵌入式不是一回事，又不靠这个谋生，就是个爱好。既然是爱好，怎么开心怎么来呗，树莓派和Arduino 比51， 什么的开心多了。直接买模块，更像是攒一个项目。其实用555定时器，74各种搭电路也挺好玩的。买飞控，买电调，买电机，搭一个航模也挺好玩的。但是，玩硬件比玩软件花钱多多多多多了。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",夏小米,为了回答这个问题，我翻了过去好几年的qq空间和，终于找到这三张截图了。编剧视角的程序员是用word写代码的。放弃吧，写不写得出来，公司都要完了。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",import 潘多拉,必然看啊，这是以前看报纸时留下的习惯。网友评论：护士在那里满脸笑容的接电话 ，可是你倒是把电话线接上啊？！
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",Narsil,战狼1中的入侵病毒的源代码。一共包括5段功能代码。第一段是输出的前20项。第二段是找100到200之间的所有质数。第三段是找100到999之间的所有。第四段是通过键盘输入一个整数并找出其所有因数。第五段是根据键盘输入的分数评出ABC等级。通过以上几段残缺不全的代码，成功入侵红军指挥系统，并导致对方系统瘫痪。没想到大家对这个话题这么感兴趣！一个礼拜之内浏览量30w+，获赞居然上了3k。不胜惶恐。感谢各位！找到一张图片，中的。看起来像是往外星人的mother ship传送病毒的脚本源代码。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",知乎用户WMK2q8,以前看过一个段子，讲的是一个计算机大牛给一部剧集模拟一个蠕虫病毒入侵的场景。这个大牛就写了个病毒，结果导演说就这？最终剧集上映的时候，展现蠕虫病毒入侵的画面是：显示器放一段蠕虫在那爬来爬去的Flash……这大牛回来说千万别说是他写的……
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",使君子,程序员不知道。但是作为一个学物理的，第一次看到群友发出下面这个图的时候，仔细看了看黑板上求解氢原子薛定谔方程的过程（角动量算符，分离变量等等）有没有问题，然后心满意足地关闭了图片。（前面的女人挡住我看公式了，可恶！）
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",TTLei,额，看过很多代码，可以说没有几个是能看的。之前看《微微一笑很倾城》的时候，主角的代码都是用QQ影音直接播放的。最近看的《天才基本法》里面的代码是真的找了一段相关的代码在那里，这个应该是最认真的了。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",蒹葭骆清幽,2023.11.10更新，孤注一掷电影中，黑同事演讲直播，用的是。注出web管理员密码，然后登录视频放映的后台。也非常贴合真实攻击场景。后面黑掉小头目手机的场景其实不太现实，黑手机的方法主要靠钓鱼，而小头目后面剧情有准备，所以不太可能中钓鱼。如果是0 click黑手机，借助第三方软件漏洞才比较容易，不依赖第三方软件太难了，和前面的sqlmap完全不是一个级别。所以不如黑航空网站比较现实(PS:2018年未经过几轮hw的航空公司真的很简单)。黑客帝国2中的一个镜头，是非常贴合真实攻击场景的命令行片段。手机打字，所以在B站找的截图，注意存在中文字幕和弹幕。第一个镜头22/tcp这段，是经典的nmap扫描之后的开放端口截图。sshnuke 10.2.2.2 -rootpw=xxx这段是使用sshnuke这个攻击程序，攻击了10.2.2.2服务器，将root账户的密码重置为xxx。而sshnuke，是sshv1 crc32整数溢出漏洞的攻击程序。这是一个真实存在且流行过的漏洞，通过溢出可以直接反弹shell，或者像电影中一样修改ssh密码。ssh 10.2.2.2 -l root此时已经完成密码篡改，所以可以直接以root用户登录ssh。到这里，就是一个不复杂但很标准的渗透流程，收集信息——发现漏洞——利用漏洞——拿到shell。在第二个镜头中，存在多个窗口。除了第四层的窗口（最外层）是第一个镜头中出现的窗口，其他窗口分别如下。第一层（最里层）窗口，攻击机的本地登录。第二层窗口，sshnuke程序的汇编代码。对于溢出类漏洞，实时调试和分析非常正常。第三层窗口，另外一个更多扫描结果的nmap截图。依旧非常符合真实的渗透流程。随后便是用获取到的shell关闭电力程序，这个肯定是假的，但做的也非常逼真。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",愤怒的小野驴,翻出来了一张N多年前自己发的朋友圈。。。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",lihaitao,影视剧里面程序员写代码的时候，像打字员一样噼里啪啦一顿输出。一看就知道是扯淡。现实里面程序员一天写不了几行代码。写几行停下来查bug，网络上搜bug解决办法。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",我本善良,曾经有个剧，一个“程序员” 用word写代码。我暂停个锤子啊
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",Benny,看过一部国产剧，网警A在跟黑客聊QQ，网警B要求A尽可能拖延时间好让他追踪黑客的IP地址。你是不是觉得这样很辣眼？Naive！... ... ...网警B在cmd窗口里狂敲了一堆乱码之后叹气 —— 糟了！他用的是无线网络，没有IP地址！
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",花开富贵,
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",Ron Chen,奋斗者的线段树打错了
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",梦醒时分,不是程序员，会点ps前两天刷抖音刷到一个视频，妈妈把儿子几年心血画的毕业作品毁了如图所示会ps的都沉默了...
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",匿名用户,会啊，
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",金鱼马,还真注意过。1998 年的日本动漫《（）》，一部充满了抽象艺术手法和超前理念的科幻动漫。其中三次出现了具体的代码。第一集，老师上课一言不发地板书 C 语言，可以看出似乎就是入门级别的东西，只不过好像是用货币符号￥代替了转义的反斜杠，不知何故。第四集，铃音开始深入“连线世界”，并且意识到“Knights”们的小动作。这个时候她已经开始小露身手了，毕竟不是每个初中女生都能在自家卧室里搭出一个集群……这之后她的显示器上滚动了一段时间  汇编代码，上世纪八九十年代正是（）对以 x86 为代表的复杂指令集（CISC）发起冲击的时候。在动画播出的 1998 年， MIPS 指令集已经风靡了十多年，只不过后来日渐式微（被 Arm 干倒了），而继承 MIPS 正统衣钵的 RISC-V 指令集还要十多年之后才问世。顺便说一句，动漫里的“Knights”这个黑客组织也不是虚构的，它的真实原型是一个半虚构组织：（）。（我估摸就是个黑客和理论计算机爱好者的小团体 :-）第七集，玲音在成神之路上越走越远（想描述一下剧情但是描述不出来……太意识流了 QWQ）。这集里有一段，她在课上没有认真听讲，而是在玩手机（？）其实不能说是“手机”，而是类似于智能手机或者说的一个玩意，准确来说是“HandNavi” 即掌上 Knowledge Navigator，上世纪八九十年代的一种未来产品构想，原型大概是苹果公司于 1993 年发布的 。那么玲音在“玩”什么呢？她在看 ……我还是写过几句 Common Lisp 代码的，她第一个程序定义了一个叫 life 的递归函数，里面依稀可见还调用了 等等（逼格拉满）。第二个程序里定义了俩函数 environment-function 和 ，但似乎有 bug，因为注释里写着“这个似乎没用到”、“这个在 alpha 版本里能用，但现在出了问题……不太确定，我们得问问苹果的人”，看起来铃音大神在给别人 debug（笑）。（最后铃音可愛いね
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",小时,程序员甚至会在坐电梯的时候思考电梯的调度算法
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",晓山青,这截图来自《战狼》：这截图来自《黑客帝国》：＜战狼＞和＜黑客帝国＞入侵代码对比，《黑客帝国》这是一个TESO写的攻击ssh的exploit（就是真正的攻击代码，非常专业）；然而，《战狼》里面那一堆是什么鬼啊，这代码现在就一小学生水平。。。你们管这叫黑客？你们网络安全部队就这水平？能不能走点心？真不是我黑战狼，导演组真的是不用心。。。大家加油，我的第一个破千赞就快到来了，感谢各位哥哥姐姐、弟弟妹妹、叔叔阿姨、叔叔婶婶～
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",醉卧沙场,当然，作为职业病，在看一些影视剧上的高科技镜头的时候，不免会想多看上两眼。其实这有时也造成了一些观影上的“出戏”，刚刚沉浸进去的剧情，结果被一些看着特别假的“高科技”镜头给逗笑了，然后还要在心理默默的告诫自己“专心剧情，专心剧情”。比如一些大的谍战片经常有黑客插上U盘，然后在命令行上煞有介事的敲一个命令，然后终端输出一堆文字。其实写过终端脚本的都看得出来那就是电影特效，其实背后什么都没有执行，单纯的终端输出一堆看着高深的字符而已。此时就很容易出戏，仿佛在看一个“跳大神”的在假装请神装神弄鬼一样。当然只要做的不那么假，我们也没有必要嘲笑，毕竟模拟也就只能这样了。真“实战”的场面看起来比电影要……无趣的多……记得曾经在电脑上观看某部《终结者》电影的时候，电影里有一个天网调取T-800资料的画面，如下：这个图粗看没什么问题，特别是画面最前面的明确显示着T-800的简要信息，仿佛就是在调取它的资料。但是当时电影画面可以清楚的看到后面的很多字符，暂停后仔细查看的话就比较搞笑了。后面那些字符其实和电影本身并没有什么关系，只是为了显得天网的高大上而随意显示出的一些文本信息。因为在大家的印象里，“黑底白字”一堆文本信息的画面就容易和黑客和高端计算机技术联想到一起。其实这地方应该把背景稍微虚化一点，这样直白的展示出来让从事计算机的人看到还是蛮尴尬的，容易出戏。首先从上图（此图经过了压缩可能看不太清了，建议找到电影原片段观看）我们可以看到有一个打印当前内核版本号的命令以及其执行结果，可以看到电影中最厉害的天网竟然是使用的Linux-4.1.15版变种内核……就类似我这样做：图片左右两侧大部分都是类似'ls -l'出来的普通文件信息，这些文件/目录基本上都属于root用户，且可以看出都是在当年12月19日下午16点左右被最后访问过的。就类似我这样：图片中间那个窗口，T-800信息下面还可以清楚的看见一条iostat指令。这个指令一般来自于Linux系统中sysstat这个软件包，比如我的系统当前执行iostat就是这样的：对比上图iostat的输出，就能看出基本是一致的。通过图中iostat的输出，我们可以看出当时最先进的人工智能、想要毁灭人类的天网系统，其空闲率高达99.23%。说明它根本没有使出全力来对付人类，仅仅使出了0.77%的能力，你说它是有多闲。连我现在写回答的这个电脑都比它忙差不多3个百分点 [手动滑稽]。存储设备也只看到sda和sdb两块磁盘，其中的sdb显然还不怎么使用，sda用的较多，但是TPS也才7.55，连我笔记本的sda的TPS都9.71。这个天网CPU闲也就算了，IO也这么闲，这是对毁灭人类这个计划有多么不屑一顾。sdb的平均读写速度和读写量都太弱，不值得说，我们还是以sda这个设备来说，总写入量看不全，但是总读出的数据量（你可以理解为累计的流量）才1357670665 Blk，这里的Blk一般是指512个字节，所以1357670665 Blk也就是才695GiB…… 试想一下，一个世界上最高端的人工智能机器，应该有多少的数据读写量才对，695G实在是有点太不够看了，随便一家互联网公司的随便一台服务器估计都比这个高吧。当然了，以上内容纯属娱乐，抬杠的话也有很多可以抬的地方。我只是就着这个问题说一下搞计算机人看电影时的职业习惯罢了。当然，这些小地方并不太影响我的电影观感，我更注重剧情上的自圆其说，和故事性的渲染和表达，至于和科学技术细节有关的东西，只要不是过于严重的错误，并不影响我对电影本身的感受和评价。大家如果有什么其它电影的带有终端运行画面的截图也可以发到评论区大家一起讨论，其实还是蛮有趣的。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",匿名用户,我不是程序员，是建筑画图狗，在中部地区某省会建筑设计院工作，类似的情况吧，可耻的匿了。某次深夜加班后睡不着，就找了个小日子的片子看看。片中女主是小泽玛利亚，男主是个高高瘦瘦本钱颇大的熟脸，不记得名字了，办事地点是卫生间。开始热车没多久，我就被卫生间布局给吸引了。长方形的卫生间，中间是窄过道，过道尽头是悬挂式马桶，左侧是洗手台，两个水龙头分高低台，低台下面是嵌入式垃圾桶和卷纸槽，又正好在马桶的右手边方便使用，高台下面是一个小型的内衣洗衣机和柜子。右侧是带一体坐凳迷你浴池和卫浴花洒，浴室的另一端是门后，放着挂壁式洗衣机，洗衣机上方做置物架，放洗澡相关的各种东西。一个小小的，目测顶多五六平方的小卫生间，功能齐全，布局紧凑，动线合理，各种实际使用的小物件放置也考虑充分，设计的真棒。相比之下，小泽玛利亚的身材和动作就毫无吸引力了，我只是反复的快退、重播、暂停，在白花花的各种体位遮挡下，把这个卫生间布局了解透彻。不得不服，咱们小日子过的不错的邻居，在小空间的布局利用上确实是有一套的。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",程墨Morgan,反正我没兴趣去看，因为我知道这都是道具组随便搜刮的代码来应付差事的，要是仔细看只能看到笑话。当年西部世界的代码还用React代码来写人工智能呢。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",某花为我增智慧,天才基本法里，男主写的自走棋代码还真是自走棋游戏代码，据说来源是挺用心的。还有女主偷偷进男主家偷代码的时候，能看到游戏代码文件夹还分客户端，服务端，简直太用心了。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",班咋咋,嗯……
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",这世界太参差,我记得以前有个电视剧里的截图，女演员敲了一堆命令，返回“command not found”然后她回头对领导说：“搞定了”找不到这个动图了当然我们也可以给她合理化一下：被入侵的服务器集群上都可以执行该命令，只有核心的机器上才没有这个命令，她是在验证自己是否进入了核心机器......
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",云网开,看过各种剧里，对这块极其的不专业。相当业余的：打开CMD，然后DIR。那滚动的字看着B格多高，其实相当搞笑；一般业余的：演员一指禅瞎J8乱按；普通的：好歹搞个编辑器，然后一直回退删除，倒放处理；尽力在演的：打开IDE，搞几段简单的代码，让演员照着打，然后加速处理。
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",车马入长安,三体电视剧看到的，七十年代的项目用的Java
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",换一个时空,会，至少这个名场面会
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,"['今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？', '【不要凶～大家就友善交流自己的看法哦⊙▽⊙】', '上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～']",互联网侦猹队,国内影视剧中的代码就别看了绝大部分都是糊弄过去的论严谨性，确实没有国外影视剧用心比如电影《》中出现过一段Python代码这段代码实际上是希腊数学家所提出的一种简单检定素数的算法是可以运行的最后输出结果为“ISBN = 9780199226559”而这个结果就是某本书的编号拿着编号你能搜到这本书叫做《Embodiment and the inner life: Cognition and Consciousness in the Space of Possible Minds》其作者正是本片的剧本顾问：这彩蛋埋的，不得不说太妙了再比如《钢铁侠》里第一次启动战衣出现的代码这段代码是斯坦大学教授Kekoa Proudfoot在1998年编写的同时也是乐高RCX机器人（可编程积木）的固件下载程序莫名的有点浪漫怎么回事？所以以后影视剧里碰到代码码农朋友可以多研究研究了没准就是一个独家小彩蛋
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],也好,/*说说我的经验*/刚进公司时，在你正式动手写代码前，很可能要理解。这一过程至少持续1个月，取决于你所在项目的规模。你会发现你不得不使用你浑身所学之能事，理解上古程序员是如何解决一个个实际的问题的。有的时候你沾沾自喜，“哈哈，这个技巧劳资经常用，你们也算有点见识”。但大部分时候你很糊涂。在此阶段，你每天的工作就是看文档，看设计图，读代码，放断点debug，hack，fix，问同事。你很累。你很无聊。此外，刚进公司的你，会发现你的项目组正在使用一些奇葩工具、冷门技术，他们非常不好用，尤其跟你大学时候用的成熟IDE相比。你可能会想砸键盘，“谁特么想出来的用这个工具！谁特么写的这么sb的工具！”你很失望。渐渐的，你开始了解了你们的业务领域，所谓的掌握了一定的领域知识，你开始有能力判断哪些是权衡，哪些是权宜，哪些是极精妙的设计，哪些是遗留代码。你的领导也发现了这一点，于是开始给你安排简单的任务。他们可能是改一些显而易见的bug，可能是实现一个最简单的新特性。此时你会有一种驾驭的错觉，你很快的写好了功能，提交，开始幻想自己精妙的代码收到表扬。当然，不出意料的是，你提交的100行代码里被找出了10个bug，其中2个是很严重的逻辑错误，4个是未实现的需求，2个是ui错误，2个是未检查。你心里十分不爽，“妈的劳资这么屌炸天的代码你们都不懂得欣赏！”此时你的领导过来轻描淡写地来了一句，“我们提交之前要进行code review”。于是你找了你身边比较和善经常解答你问题的小哥来代码检视，10分钟之后，你漂亮的代码被改得面目全非，你欲哭无泪，又不想得罪前辈，于是默默地提交了这不知道是谁写的代码。就这样挣扎着过了几个月，你开始摸清了门道，于是你开始运用你大学时期课内或者课外学到的引以为傲的技巧和知识了。领导自然也发现了这一点，于是他开始安排你组织技术交流会，你精心准备好了ppt，自己在家排练，并且试图加入一些或者高冷或者没品的幽默段子。会议很成功，你感觉到同事开始对你刮目相看，你开始飘飘然，重新拾回“驾驭”的感觉，心想“就你们这帮码农，劳资以后可是架构师！”渐渐的，你开始进入了状态，你提交的代码越来越多。刚进公司时你从来没打开过的代码开始回来找你麻烦，不过这不是大问题。领导开始对你强调质量，而你则在心里抱怨旧代码的设计。你想要重构，你想要创新，你想要搞一个大新闻。与此同时，组里新来了一位同事老李，是从其他部门调过来的老员工，领导组织组里盛情欢迎了他，你心里不服，但是他是个好人，你们谈笑风生。机会来了。公司要紧急实现一个演示功能，百万级的合同能不能拿下来就看这次了，你的领导已经亲自飞往客户那里坐镇，他走时跟你说，“组里就靠你和老李了！”你十分激动，买好了泡面和零食，准备通宵作战，给领导提供最犀利的火力支援。第一个功能点谈下来了。领导发给你了要求。你发现你半懂不懂。里面提到的一些其他模块，你在每月组织的技术交流大会里听说过，但你写过的那点代码里从没调用过他们的API，你更没读过他们的代码。你有点不知所错，开始心虚。不管了，先开始干。你找到了一些相似的功能，翻出了一些发霉的陈年旧代码，注释里写着2004/06/18。你没有时间完全读懂，你开始复制粘贴，直接debug。当然，代码报错了，你开始挨个解决，就这样，一个通宵。第二天早上，你总算把你熟悉的后台部分调通了，你发现了新的麻烦。是前台。你对前台并不熟悉。你知道javascript的原名叫ECMAScript，你知道JQuery对象和dom对象的区别，但是你发现你还是看不懂你们的前台代码。怎么办？好吧，你决定拉下脸，问老李。老李看你的样子，说，“你去睡一会吧，我来帮你看”。你心里有些不甘，有些不好意思，也有些感激。你很想自己把它们做出来，但你不会，而且时间也来不及了。你想学学他是怎么做的，但是你的大脑已经停止工作了。于是你疲惫地笑了笑，“好，交给你了。你看一下这里这里还有这里...我就去睡半个小时，一会就回来找你。”你这一觉睡到了下午。你醒来一看表，震惊的弹起来，赶紧回办公室找老李。老李已经从你的座位回到自己的座位上了，正在慢悠悠地喝茶。你有些惊喜地问他，“怎么样？”他回头看见你回来了，说，“放心吧，已经给一线调试了，你去吃点饭吧。”你哪里有心思吃饭。你惊讶地对老李说了声“好的！太好了！”然后回到你的座位上迫不及待得打开代码开始运行。正如老李所说的，功能已经实现了。你轻舒一口气，拿出一碗泡面泡上，开始啃代码，心里想的是“这次一定要准备好，防止下次再出乱子。”啃着啃着，你有些不耐烦了，因为你发现代码越看越多，已经超出了你的大脑容量。你想了一下，决定先放在一边，查收一下邮件放松一下。邮箱里又是塞满了新员工培训的资料，各个部门的联谊活动通知，当然最多的是服务器发来的build report和test report。没什么有趣的事。你想了一下接下来要干嘛。算了，还是接着写新特性吧，测试们还等着你呢。但是你其实很忐忑，你的心早已飘去了前线，但是你知道你不能发邮件问状况，因为你领导可能几天没睡了，何况你也并没有什么特别紧急的事。你破天荒的把邮件客户端开着，留意每一个新收到的邮件。就在这样的忐忑中，一天过去了。反正也没什么事，你回家好好洗了个澡，定了个早早的闹铃，安心的睡觉了。第二天一大早你就跑去公司，果然邮箱里有了领导的邮件，上面写道“演示很成功，客户很满意，接下来是谈判阶段。家里的开发兄弟你们太棒了！”当然，你很高兴。但是又有一点失落。你不太明白为什么，于是你想了一下。随后你似乎明白了，虽然这是一个好消息，但是好像跟你又没什么关系，跟任何人似乎都没什么关系，好像是一件自然而然的事情一样，并没有“holy shit”超神的声音。过一会，你的大领导，项目总经理回复了你领导的邮件，说“干得好！同时也对家里的兄弟提出表扬！回来开庆功会！”你心里略有一些期待，“不错”，你想到，虽然主角不是你，但是你毕竟也是功臣。你为庆功会暗自准备了很久，你在网上浏览跟领导吃饭该说些什么，你想好了很多概括性的有内涵的问题来证明你对项目的理解，你也想多了解一些项目的大方向。几天之后，你领导回来了，大家开了庆功会。饭局上，大家聊聊家常，聊聊你领导在国外的见闻，大领导知道了你的名字，大家似乎很随意的打了一会牌，就这样平平淡淡的结束了。你略有一些失落。生活回归正常。但似乎又跟以前不那么一样。你在开发工作以外，有了新的任务，其中包括学习推广新技术等等。你开始跟你领导彻夜长谈。他与你分享他的经验，你与他分享你的见闻。你开始接触他的工作，比如提高团队能力，完善自动化测试，提高代码质量，提高代码性能，增强功能可配置性等等。你开始淡定的接受新的工作，而不再幻想一朝成名的瞬间。毕竟，迎接挑战才是你真正感兴趣的事。不过，这接下来的几个月里，除了改自己先前遗留下来的bug，你几乎没有提交任何代码。你每天的工作变成了看框架，读代码，看技术文档，学习试验新工具，浏览等等。你开始觉得有一些缺乏成就感，也有点怀念绿绿的单元测试结果和噼里啪啦弹钢琴一般飞舞的手。有一天晚上，只有你和你的领导在加班。你的问题困在心里很久了，于是你问道，“老大，为什么我的任务跟别人的不太一样了？” 老大说，“那当然了，你是当作未来的技术主管来培养的。”突然的幸福让你不知所措，不过你克制地问道，“技术主管都是干什么的？” 老大并没有回答你，而是说，“以后你就知道了”。生活还在继续。跟你同一天入职的晓明是一个勤奋而又活泼开朗的人，但是你觉得他似乎入错了行。他总是挣扎着思考为什么他的代码中有逻辑错误。对你来说再简单直接不过的一段代码，他也很难读懂。领导也发现了这一点，所以安排他渐渐地向配置管理（CM）方向发展了。不过他似乎对这个很擅长，无论多么繁琐的任务，他总能按部就班的完成，各种纷杂的脚本他也一一了熟于胸，重要的是，他很有耐心，无论服务器出了什么奇葩问题，他都会跟它死磕到底。大家都很喜欢他，也很信赖他。有一天，晓明像往常一样抓住你向你请教问题。是个bug。你已经习惯了从代码检视开始。你自信地叫他给你看代码。然而你并没有发现什么问题。于是你问什么现象。他说部署到服务器上就报错了。你看了一下日志。你没想通。于是你再仔细重新检查了一下是否各个环节都作对了。是的，没有什么问题。好吧，你知道你遇到棘手的问题了。不过谁知道下一秒会不会就解决了呢？进公司这么久，各种奇葩问题对你来说早已是司空见惯。你打开搜索引擎，开始试图寻找相似的问题。你不断的做出假设，然后通过证据否定它们，然后再作出新假设……直到你突破了你的理智，你觉得可能是编译器出了问题。真的假的？你从来没有想过编译器会出问题，就好像你从来没有想过你的肝脏有一天会报错一样。你觉得应该是自己错了，于是你仔细排查了一下其他的可能性，不，没有别的问题。于是你把服务器上编译过的字节码通过打开，你发现了一件微妙的事情。于是你跟随着这个线索继续上网查找原因。终于，你发现是兼容性的问题。你发现了新大陆。问题虽然复杂，但是你只需要简单调整一下代码就可以绕过这一问题，于是你三下五除二把代码改好了，测试，嗯，哈哈，果然没有问题。晓明在旁边看得发愣，问你，“咋回事啊？” 你心里有一丝淡淡的骄傲，你兴奋地把他拉过来看你搜到的网页，你把代码反编译之后跟对比，你给他讲依赖加载的实现……你兴奋得讲了一大堆，他静静地听完之后，眨了眨眼，说，“大神啊！”艹，他根本没听懂。你一下子泄了气。你也没什么可说的了，但也不知道该如何接茬，就谦虚道“没有没有，我不是大神”。虽然如此，他依然天天跟着你“大神”“大神”得叫你，虽然你知道他很菜，但是当个伪“大神”也不错。你有点沾沾自喜，想说给你的同学听，又觉得太 low。要不发个状态“我不做大神好多年”？想想太蠢，只好作罢。直到你发现还有好多人也被他称为“大神”。失落？有一点。你都习惯这种失落了。自从意气风发地毕业之后，你再也没有那种强烈的胜利的感觉。你觉得生活似乎并不是你之前那样的一元化。大家都有各自完全不同的特长、兴趣、知识和经验，你也有你的，你并不是万能的。即使在上学的时候你从来都是班级里的佼佼者，但是你渐渐的发现世界还很大，你不会的还很多，山外有山，人外有人，路漫漫其修远兮，吾将上下而求索……想到这，你的思绪突然中断了。你觉得自己实在是太优秀了，还懂得反思。你又开始了沾沾自喜，心想，自己如此优秀的人，总有一天会干出一番大事。于是你收拾收拾心情，继续工作。最近项目没有那么紧张了，你渐渐的多出了不少时间。你领导也是。所以他又推荐给你了几本书叫你看，都是一些设计的书，什么《领域驱动设计》、《企业应用架构模式》、《》等等。你想起了刚来的时候他叫你读的《重构》，《》等书，你还记得刚翻开它们时的那种醍醐灌顶、豁然开朗的感觉。你微微一笑，说“好”。这些书写的真好，你感叹道。读着它们，你总是不自禁地想起你们的代码。你非常能理解书里描述的现象，你觉得你们的代码有着同样的问题。可是当书里介绍解决方案时，你却发现理解它们很困难。书里面的问题域跟你们的不太一样，你们有着不一样的需求和架构。书里说对于数据库的操作要做这样的一层封装，可是你们除了数据库还有web service；书里说对于UI和业务逻辑要做这样的隔离，可是你们的UI并没有直接调用后台，也是通过；书里面提到了好多技巧，你们并不需要……你看得很无聊，渐渐的失去了耐心。简单翻完了书的后半部分，你觉得你差不多明白书里面说的方法了。一种练到第七层的感觉油然而生，你非常急切地想找点东西试试功力。你踌躇满志地对你领导说，“我想对我们的代码 进 行 重 构 。”出乎你意料的是，你领导一点都没有惊讶，而是笑眯眯的问你，“呦，好啊，你打算怎么搞啊？” 你没有想过这个问题，愣了一下，说，“就按照的方法改啊，构造一个充血。” 领导继续笑眯眯，“好啊，那你打算怎么实施呢？”怎么实施？什么叫怎么实施？改代码就是改代码咯，还怎么实施？你摆出了一个困惑的表情。领导笑的更开心了，“你还记得《重构》里说过的，要保证单元测试全通过吗？但是现在你要重新设计，肯定都没用了，要重新改。你来看这个。” 他掏出一本书，指着某一章的标题说，“如果要对代码进行大型重构，只好退而求其次，使用高覆盖率的来确保大部分功能的正确性。但是只是这样是远远不够的，我们还得保证原有功能没有被破坏，所以你还可以这样这样……”你听的如痴如醉，如沐甘霖。你想起在学校里，如果你对代码不爽，你可以干脆删掉重写。你甚至都不需要一个版本控制工具。你从来没有想过在真正的工程中有这么多复杂的问题以及这么多聪明的前辈们发明了各种系统化的方法。你再一次发现了新大陆。讨论之后的结论是，你负责监督并提高自动化测试的覆盖率，同时你可以先构造新的模型代码，也可以提交，但是在发布时并不把它们包含进去。当新的代码写好之后先内部测试，确保几乎没有问题了，再策略性的发布出去。说干就干，你很兴奋。“终于可以写代码了！”你开心的对领导说。领导又笑了，“写代码并不是重点，重点是让它们正确的执行起来。” 你若有所思的点点头，心却早已飞到了你的新设计上。你打开了看过改过无数遍的最核心的业务代码，心里想象着它们被你改好之后的样子，完美的领域模型、低耦合的类、优雅的代码、完备的注释、再加上同事们佩服的眼神……你觉得你快要像樱木花道一样笑出声来了。但是细节之处有乾坤。你发现你第一行就不知道怎么改。是日志。你想了半天，没有想到任何现成的解决方案。你问自己，日志算不算业务逻辑呢？算吧，它又对框架有很多依赖；不算吧，那把它放哪呢？你对着日志的代码看了整整一个下午，仍然毫无头绪。你觉得日志简直是破坏你优雅代码的杀手，你真恨不得把它们给删了……算了，先不想了。你决定今天给自己放一天假，早早回家看个电影然后睡觉。刚推开门，哇！外面下雪了。漫天的雪花翩翩飞舞，一扫平日晚上萧条的景象。昏黄的路灯照射下，雪花反射出暖暖的光。你想起了你在北国的家乡。北方的小伙伴们都说江南的湿冷让人难以忍受，“屋里跟屋外一样冷”。你在此时此刻却有了另外的感悟，你觉得说成”屋外跟屋里一样暖和”也说得通。也许生活就是这样吧，你想到，并不总是得意，也并不总是失望。你的期待总是狡猾得伪装成另外的样子悄悄的进入到你的生活中，而你的得意又总是在指缝中流走，想握也握不住。但是不管怎么样，你觉得你很快乐，也很幸福。你很庆幸自己成为了程序员。你对现在的自己感觉到骄傲。意识到你已经在门口发呆了很久，你笑了，笑自己什么时候变的这么多愁善感。你走出门去，踩在雪上，发出咯吱咯吱的声音……<全文完><程序员的故事还没有完>/** 后记真的没有想到大家对这篇小文章（我都不知道能不能称为文章）这么喜欢，我本意只是想通过一些真实的细节来描述工作和学校的不同的，谁知道写着写着就成故事了:-D其实后面还有更多有意思的故事，不过已经扯得太远了，想听的话带上好酒来找我吧！至于你们所关心的老李，他是真的，但是他并不是，他是前端大神，后来他把我们前端的js代码完全重写了一遍，他三十多岁，头发浓密，有一个可爱的小女儿，说话不多，但是喜欢讲内涵段子。故事经过了加工，亦真亦假，人物也不是完全还原，但是看到你们留言说很真实，我非常开心！最后，作为一个工科男，我决定总结一下：我暂时只能想到这么多，更多的就靠大家自己发掘啦。最后祝喜欢编程的大家都成为！ */
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],william,"第一名答案给的是一个在学校里屌屌的学生，进去一家传统公司，然后看不上一切别人垃圾代码的视角。我带来一个，毕业眼界也挺高，觉得自己技术不错，然后面试被真正的虐成狗，然后还跪舔进入公司继续被虐的，游戏公司，第一视角。给我一份爱，还你一夜情。第一视角，现在开始。10年进入大学，无限憧憬大学，然后就傻逼了整个大一上学期，大一下学期买了电脑接触了dota，两年刀塔路，步步皆辛苦。大三下学期开始意识到，毕业总得赚钱吃饭，现在的节奏感觉会要饭，然后就开始敲代码。一开始无任何头绪，找到某培训机构视频开始看，我学java，据说ssh搞完，出去就有6k以上，我无耻的硬了。不对，我傻傻的信了。现在想想，多单纯啊，6k就感觉吊炸天了。大四下学期，独自一人去了广州，学校同学还在学校里接受培训机构培训。我觉得教的都会了。就先出来了。2013年11月18号，到了广州。投了一圈，没反应。感觉人生挫败了。这时候，有时候不得不说可怜之人偶尔也有运气好的时候。在qq上碰到一个公司发招聘，我完全不抱希望的尝试下，居然给了面试机会。当天去面试信心满满，然而并没有什么卵用。老大直接从基础问到虚拟机，计算机原理，编译原理。当场直接跪了，我现在都还有心理阴影。整整差不多一个小时，我感觉像是一个世纪。印象比较深，老大问编译原理，我说我们没有开编译原理的课，事实是真的没有。老大原话，“你们他妈没有编译原理也敢叫软件工程专业！”，我完全无法接下去。最后老大问，你坚持最久的一件事是什么？大三一直都在跑步，我说，跑步，跑了一年多。老大说，那你感谢你的跑步吧。就这样我留了下来。得到了全公司最低的月薪，别问我怎么知道的，不可能有人比我更低就是了。忘说了，老大长发，那种中长发，飘逸的那种，第一眼真心就觉得大牛。至今无法忘记见老大的第一眼。好了，不能再说了，再说会有gay的即视感。留下来后，下周二入职，周一我去看了牙齿，做根管治疗。大学里面完全不知道游戏怎么做，游戏服务端是怎么做。一丝一毫的概念都没有。第一天几乎没啥事做，我自己配了下环境，上网看了看游戏相关的东西。还是完全都不了解游戏到底怎么做。我的座位靠着一个项目组老员工，我就看他和别人一句话过来一句话过去，然后看看代码什么的，后来才知道这叫连调。第二天，旁边的老员工问我是新来的么，然后让我去找xxx要学习视频，然后拿两本书，一本Java（JCP），一本Effective Java。然后就开始看视频，看书，看视频，看书。视频也是一个培训机构录的视频，后来才知道，那是我老大几年前在一个培训机构讲课录的。大概看了一周多视频，终于有了个小任务，写一个拉日志的小程序。暂时就叫那个老员工鸟哥吧，大家都那么叫，一直我也不知道为什么。鸟哥讲了需求，给了点思路。我第一次知道，第一次知道Executor，然后就自己去搜，搜了然后去用，然后去写，写完去找鸟哥，鸟哥直接在我电脑上看代码，分分钟把问题找出来，看了多少篇文章，都不如直接指出来，来的印象深刻。写完之后大概有看了一周的书，等到了第二个入职的新人，终于有了个伴。然而后来我问了，人家工资都比我高。我就说我全公司最低啦。第二个人进来后，我和他两人开始做第一个测试项目。SVN管理系统。在这之前，我对SVN真心都不太熟，只是知道这东西。第一个版本，鸟哥说写个命令行版本的，就直接在命令行能交互就行，我当时虽然被虐的很惨，但还是比较有信心的。毕竟当时我看培训视频，还写过一个OA的项目，当时我觉得OA就很牛逼了。没办法，眼界太低。开始做了才知道，这东西真心没那么简单，SVN写过代码的都知道，版本控制，有库什么的，原生版本好像是没有权限的，然后我们就是要在外面加一层控制，并把权限管理加进去，用一个RBAC模型，总之全都没听过，总之做的艰难前行。忘了说，当时面试进来，HR的老大就强调过，说他们公司对新人的淘汰率很高，每做一个小项目，都会有代码review，会有几个老大一起看，如果说不过，给次机会回去改，改了还不能过，直接辞退走人。童话里真的都是骗人的，我之前从来没有过这样的心理准备。你们有待过这样的公司么，真的是直接走人，真真的！后来看到有人review完，会议室里出来，就收拾东西去办离职了。你们感受下。在高压下前行，完成了第一个版本。第一次review，我不知道女孩子第一次是啥感觉，反正我进会议室内心是期待而又忐忑的。过去从来没有人这么正式的看过我的代码，一行一行的看。真的是一行一行的看！功能是最基础的，但是鸟哥真的不怎么在乎那些功能，他觉得那是必然要做到的。功能验证演示也就几分钟的事，功能看完就是看代码。在会议室，用个笔记本，远程桌面连接到自己的电脑上，然后直接投影到会议里，直接在eclipse里面看，从入口开始，一个一个方法，一行一行代码，那天整个人内心真的是被骂崩溃的。对的，就是被骂崩溃的。看到别人进入公司都会碰到一个和蔼的老李，我这边真没有老李，只有严厉的不能再严厉的鸟哥。代码中各种错误被鸟哥一处一处指出，包括各种编码规范错误，并发控制考虑，该抽出可配置文件的地方抽出配置文件去配，不能硬编码在代码中。印象很深的是不处理异常，直接就打印出来了。“你他妈打印出来给谁看，以后都是跑在服务器上的，以后不要让我看到syso在代码中出现”，然后还特意全局搜了下syso这句打印代码的数量，然后鸟哥一头黑线，因为我所有有异常的地方都是打印出来。当时加上设计错误，代码错误，反正记起来得有十几条，我写在笔记本上的，笔记本现在依然躺在我电脑边上。我是个恋旧的人。经过第一次review，我和另外一个哥们总算是感受到什么叫代码review了。那哥们比我早一届，已经毕业，之前在一家公司做过，我问他这咋办，真的是被喷成狗了。他说实在不行就辞职了。我没说话。/**2015/10/5 2点更新**/经过第一次review，回去改第二版，基本知道了问题有哪些，虽然被打击的非常惨，但是还是有信心可以把这些代码改好的。当时其中一个主要大的问题，就是在做多任务处理时，对多线程的处理，以及多线程异常的处理。当时鸟哥说，上传功能有可能当时是因为网速或者其他因素没上传成功，但是可能稍微多尝试几次就能成功，所以出错后要加尝试处理。当时我是真的没经验，我就觉得尝试嘛，得嘞，那捕获到异常，我就循环，while（true）一直就尝试上传操作，直到上传成功才跳出这段代码。所以当我上次看到那个图，一个哥们写代码，失败之后再强制去试100次的代码的时候，我真的是笑尿的，因为我比他更屌，我是试无限次。当然最后这里也是被鸟哥喷的狗血淋头，鸟哥说，你真牛逼。你这是在代码里面写了个死循环啊。我真的当时脸都绿了，因为我知道在服务器代码上写个死循环是什么后果，真的是一背都是汗。哦，插一段，当时第一次还是第二次review的时候，鸟哥看完代码之后，发现太多问题，实在没法看下去了，说，“你们的代码真的让我感觉到恶心。”。不知道你们review的时候，听到这么一句是什么感觉，反正我是一辈子忘不掉了，和我同期那个同事也是，至今一起吃饭每次都会回忆这句。当时经过了，几次改版，从基本命令行，到后来用bootstrap做个web版本，前前后后鬼门关走了得有7,8次，特别是当时做web版本，鸟哥要求使用restful风格，又是一个新名词，restful，好好休息么？我承认我当时真的是渣1的战力。不过鸟哥讲解东西真的是一绝，就三两下，真的可以把restful是个什么东西让你有个清晰的了解。restful当时还好说，springmvc本来就支持restful，真正让我差点挂掉的是js。JS我真的是学了一万年都没学好的一个东西，当时我和那个同事两人还是有点美术追求的，不想就写个特别简陋的界面出来，感觉至少也得让人能下的去眼吧，虽然鸟哥当时没有要求这个。后来我们两就想用bootstrap，一直都挺火的一个前端框架，但是也是完全没接触过，然后我还是9流的js程序，功能没花我太多时间，反而是界面真的是让我整个人都疯了。很难整体上做出一个比较好的效果出来。最后听说公司后台用的就是，我们两就拿了公司的后台模板直接来改，但是中途发现公司有自己封装一层js，我的一个侧边栏点击，右边显示的效果死都出不来，但是这还是最重要的一个效果。搞得心好累，就是不出来。关键时刻，那个周末，我那个和我相依为命的同事，还去澳门玩了。我内心的怨念，你们可以感受下。因为他已经调出来了。没办法，我只能等他澳门回来，星期天晚上，12点多，我们语音，他跟我一起帮我调我的那个问题，最终解决。想想，那一段日子，没有他一起，还真的是很难坚持下来啊。相依为命的日子，一起深夜打车，冬天跑KFC买甜筒，一起感慨不知道哪次review完就要收拾东西走人。历历在目。===更了一段。待续。大家来点赞。要不好多人看不到。被压在下面。/**看了一眼，上一次更新时2015年10月5号，差两天正好一年，时间真的好快2016年10月3日更新*/感觉自己的记忆在一点点流失，趁着现在还能回忆起，我还是要坚持把我在那游戏公司的一年多写完。好不容易熬过SVN的痛苦黑暗的一段时期，差不多改了3个还是4个版本，从命令行一直写到WEB版本，方才罢休，总算是过了。不过忘记当时通过是什么感觉了，很后悔没有把但是最直接最真切的感受记录下，有可能这辈子都不会再有了。据之前已经通过试用期的同事小道消息，过了SVN权限管理系统之后就能真是接触游戏代码了，当时还是很兴奋的。马上要接触自己从没接触过的东西，好奇心所带来的兴奋感冲淡了那段难熬的痛苦时光。当时公司扩招的很厉害，办公位置不够，都是各种找位置挤，到最后没法挤了，就弄了个会议室，所有试用期的同学全部搬到了会议室改成的办公区。他们取名叫小黑屋。就是一个没有窗户的小会议室，挤一挤坐了7,8个人。后来我们也是在小黑屋里，结下了深厚的战友情，这是后话了。第二个测试项目开始涉及游戏，做一个黑市商店，也就是可以发布物品，然后玩家可以选择购买，然后扣费发放购买奖励什么的。但是听到需求的第一感觉是完全没概念的，没有任何整体的设计概念，知道像以前一样，定义个存储，设计一些接口啥的，对于实际游戏中的设计，或者说最佳实践完全木有概念。而且这次开始有了一个简单的公司框架给我们使用，我和我那个小伙伴简直如获至宝，感觉看公司的实际运行的东西是怎么写的，然而没想到木有源码，只是一个简单的架子，有些调用实例，底层的代码都是木有的。sigh.就这样做了第二个测试项目，过程快进了，和之前类似，都是被骂，修改，继续被骂，再修改。还好反正抱着必死的决心，也就坚持过来了。我那个一起吃甜筒的小伙伴中途还提过一次辞职，不过后来又被鸟哥两句话给安定下来了。我还记得那天鸟哥突然把我俩叫到会议室去，我一脸懵逼，然后就说我们就这么玻璃心，然后说我那小伙伴提了离职，问我怎么想的。我还一脸傻逼的笑着说，哈哈，我没有啊，还好诶。但是我的内心独白其实是，其实我也想过。经过了这个游戏项目，后面开始顺利很多，偶尔还会犯特别二的错误，但是已经可以整体理解真实游戏开发怎么做了。后面还继续做了两个测试项目，都是游戏中的真是模块，一个摇钱树，一个奴隶系统，我小伙伴抽到的是竞技场。反正就这么熬了下来。进到项目组之后，开始负责开发一些小玩法模块，修复一些产品提过来的BUG。老大已经不是鸟哥，换了实际游戏开发组的老大。不过要求没有一点点的减弱，每次上线的代码要review，会扣一些很细节的内存使用，数据结构使用，边界的处理从这个老大那里也是学到很多。对待代码的那种认真的态度，和对实际review中的错误代码敏感度，真是我到现在都很敬佩的。总是能在review中快速看出错误点，或者可能有疑问的地方，提出质疑。人真的是在高压环境下成长比较快，我很庆幸能一开始进入到这样的团队接受锻炼，提高自己的眼界。我一直觉得，代码眼界很重要，你要知道什么是好的代码。除了老大，组里的一些同事也都非常的执着认真，说实话，我真心感觉自己有时候就是个渣。当时坐我旁边的是一个成都的哥们，操着一口四川普通话，川普，你晓得的撒，真心是逗的飞起。不过他写代码做东西的速度也是快的飞起。而且看问题的角度经常能转换的非常快。近水楼台嘛，所以我的很多问题都是找他讨论的，总能找到一些新的思路。关键是！！！天天炒股还能不耽误工作！！代码照样写的飞起！！我也是没话说了。像我这种，只要想着什么事的时候，基本工作效率就为0了。还有个湖南的同事，工作经验比较丰富的，之前电信研究院做了4年还是5年，然后转行来做游戏。我们都叫他斌哥哥。我就记得当时印象最深的，我们在闲聊一个什么事情的时候，然后斌哥哥说他就是真心喜欢写代码的。从那以后这句话一直是我检验自己内心的标杆啊！不过页游最终是走下衰亡的趋势，是无法逆的。技术人再怎么努力，你也没法反抗市场的选择。页游市场被37几乎全部霸占，手游开始崛起，最终呆了一年多之后，我也是不得不选择离开。我的第一家游戏公司，又爱又恨的公司。到现在，我午睡的靠枕和毯子都还是这家公司发的。我说过，我是个恋旧的人。嘻嘻。好像写的越来越离题了，反正我其实也是在写给以后的自己看了。大家将就吧。"
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],Vince Zhang,作为一个计算机相关专业毕业，毕业后一直从事编程相关工作10年多的大叔就这点上可以谈一些看法。我在面试很多计算机本科甚至硕士毕业生时，他们很难向你展现实际的项目经验和工作能力，因此你只能考验他们对某门编程语言的熟悉程度，也就只能是语法和算法。因此也不可避免的让他们做些算法题。说实话，我觉得这种方式很傻，有谁会在纸上写程序呢？但你会有更好的选拨方法吗？不夸张的说，一切学校学习的目的是为了通过考试。因此在学校学习编程无非是通过期末的考试。考试是在卷子上写程序，还是在机器上写程序并不重要，因为无论哪种考核方式，都和你将来是否成为一个合格的程序员没有什么卵关系，它仅仅就是纯粹的考试。但是，我想说编程的能力不在于你对这门计算机语言语法背诵以及几个算法的记忆。在实际工作中，更多在于你怎么组织你的代码。 语法是可以百度的，算法前人早已经给你写好了，你只需要知道怎么调用。但是新手和老手写出的程序是立马能闻出来的。有些人面试的时候很厉害，但到后面，你会发现他/她并不适合也不想成为一个程序员。因为真正的编程工作是如何理清一大堆代码，而不是在几个烧脑的算法上玩智力游戏。如果你刚入行接手的是一堆糟糕的代码，那么我只能遗憾的告诉你，你的程序员生涯有了一个糟糕的开始。第一次糟糕的体验会是影响一生的。所以我希望你一开始接手到的是一堆高人留下的代码，这对你的发展以及培养你对编程兴趣是起到至关重要的作用的。当然，如果你天赋好，你最好有能力选择好的代码堆，或者自立门户。毕竟自己挖坑总比填别人的坑要来得爽。我这里有点小小的人森经验要分享，就是你看一个人适不适合编程，就得看他是不是喜欢把事物整理得井井有条。在学校里你看他的床铺，看他的写字台，看他组织集体活动的能力，等等。不要以为程序猿都是胡子拉碴，脏里八稀的，那些都是电影小说杜撰的。就算有时候会出现这种情况，那也是为了短期的冲刺工作。程序猿就是艺术家，虽然很多人不这么看，就连很多程序员自己也并不这么认为。但实际上，程序员就是艺术家。语法和算法，还有程序组织能力，那些都只是基本功，就像画家的画功，都不需要提。厉害的程序员是要有对现实世界抽象的能力，是要用系统性的思维去理解世界，并有可能模仿上帝去创造自己世界的人。因此，你会看到许多高阶程序员写的书和文章都像哲学家写的一样。看一段糟糕的代码就如同你走进一间脏乱的房间，你会闻到不好的味道，你会看到东西被放在不该放的位置上。新手写的代码就如同一间不知道整理的小孩的房间：被子团在床上，玩具乱扔，墙上乱画.....你暂时是不会指望他能把整个家都收拾好的。因此，很多情况下我带新人更多的是会告诉他们代码应该写在哪里，而不是i++和++i的区别。实际的编程工作中，你做的事情往往是一个大系统中的一个组件。完成一个大系统的开发工作是一个团队的事情，因此你必须学会如何团队开发。而这点上和学校学习的编程是有本质区别的。学校的编程课教授的东西是点状的，它教你如何写出可以编译过去的一小段代码，它教你一些经典算法，但都没什么实际卵用。举个例子，比如排序算法，教科书上一大堆。有些同学硬是能将各种排序算法默写出来。然而他们永远不会想到关系型数据库是如何实现排序的，因此我一问他们如果内存装不下所有数据的情况下，怎么排序，就个个傻眼了。因为他们只知道在内存中排序数据，不知道多了硬盘后怎么处理；他们只知道这个名字，并不理解它在计算机架构中的本质。这些点状的知识点对于一个不接触实际的学生来说是很难串起来的。团队开发是个很搞的课题，涉及组织理论。虽然很多人都能意识到这样一个事实：人多未必能办好事。但真正联系到实际，就是如何发挥一个团队的最高组织效率时，往往对自己的认识是估计不足的。很多想当然的事情是行不通的。编程工作是纯粹的脑力劳动，是很难量化的劳动。咨询公司乐此不疲的发明各种指标（如：代码行数）和各种团队编程模式（如：SCRUM），但也是基本没什么卵用的。永远记住程序员是艺术家，不要试图用管理指标来衡量艺术家的工作，这只能靠尽可能发挥程序员的主观能动性来提高效率和质量。最近，考古学家发现，不可能是由奴隶建造的，而是由拥有绝对信仰的大量工匠完成的。每个工匠切割每块石头的时候，都倾注了他的心血和虔诚，这并不需要由监工去督促。这些由不同工匠独立完成的石头最终能拼接成如此巨大完美的，是人类工程史上的奇迹。真实程序员所做的大抵就是类似的事情。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],梁唐,"百赞啦，又想到了一些，更新一波~ 文档：            学校：口口相传            工作：别人都用Markdown写文档，快把你的Word收起来……    delay：            学校：deadline之前搞定了就好，先休息半个月再说            工作：每天都要发项目日报，你的老板和你老板的老板都盯着呢……    联调：            学校：自己和自己联调，左右互搏……            工作：我：##￥￥%！……&*！！ 对方：没听懂……    需求：            学校：定期和老师汇报进度就行，需求一般不会发生变化            工作：时常会碰到来求助的运营MM    故障：            学校：就算真的遇到了，顶多挨顿骂            工作：这个季度的kpi又悬了……    上级：            学校：才不管你怎么实现的，也不会看你代码，能用就好            工作：不但会问你怎么实现的，也会review你代码，还会强行让你用一些新技术……    代码复用：            学校：复用全靠写函数            工作：就算跨项目也要强行复用……    造轮子：            学校：轮子是什么            工作：这个季度造个什么轮子吹比呢……    bugs：            学校：以空指针居多            工作：只有想不到，没有遇不到……    吐槽：            学校：好烦啊，做了这么多事情一点好处也没有            工作：运营又说改版了，之前的代码可是PHP的啊，确定这样也能改版？--------------------------------------------------------------------    项目：            学校：基于XXX的XXX系统的设计            工作：商家处罚中心    工作来源：            学校：老师或者是自己            工作：产品或者运营    工作内容：            学校：实现完整的项目            工作：实现完整项目是少数情况，大部分是新增功能需求    开发之前：            学校：打游戏看电影刷知乎拖延一下            工作：开会评审需求，分配工作    开发人数：            学校：前端后台产品设计全是自己            工作：前端2两人，后台3人，产品一人    代码：            学校：所有代码自己搞定            工作：只负责规则模块    规范：            学校：实现功能就好，代码写成什么样不重要，从来不写任何注释，代码之后自己刚写完的几天才能看得懂            工作：每一个模块都需要完成相应的单测，并且保证测试通过。代码需要简洁美观，变量、类等命名严格遵守驼峰命名法，需要附加完备的注释    框架：            学校：框架是什么，实现功能就行            工作：公司对各个功能（例如链接数据库等）进行了封装，必须要使用相应的框架    封装：            学校：为什么一定要面向对象，怎么简单粗暴怎么来            工作：进行一定的封装是必须的，要考虑代码的复用性，尽可能避免代码冗余。差的封装是会被吐槽的    debug：            学校：肉眼，偶尔使用工具，一碰到蛋疼一下午            工作：使用工具，流程化排查问题    疑难杂症：            学校：自己蛋疼摸索，直到放弃向研究生师兄请教            工作：蛋疼摸索一会，请教大牛    发布：            学校：随意发            工作：每次发布需要请示老板，你多发几次试试……    review：            学校：review是啥……            工作：发布之前必须review，被挑到刺打回去再正常不过    maven：            学校：maven是啥……            工作：每个模块的打包发布都有严格的流程，maven依赖必须要仔细，否则很容易遇到问题，有专门的工具对maven依赖进行检查    git：            学校：coder只有一个，用git干嘛……            工作：git的命令牢记于心，stash,merge,checkout花式命令，键盘敲起来    氛围：            学校：开发累了，打会游戏休息一下            工作：老板就在旁边，你打个游戏试试……    设计模式：            学校：闻所未闻            工作：原来这种方法这么机制，赶快学一下，以后说不定能用上先想到这么多，后面想到了再来更"
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],王德福,我本科的专业是软件工程，大一的C++基础课学的还不错，后面数据结构与算法也学得挺认真的，数据库结构学的时候搞不清那么多范式有什么用，UML直接睡过去了，软件生命周期搞不懂是怎么回事，测试这门课老师都没怎么好好讲。所以上面几门课直到毕业也没觉得有什么用，感觉C++的基础好，数据结构和算法好，就是编程好了。到了工作中，才发现原来还有【需求】这种东西，不是课程作业那种胡搞瞎搞，差不多就行的了。而且做出来的程序不能只是自己演示正常就可以，要经受的住用户的各种胡搞瞎搞，被各种奇怪操作导致的BUG打回来，才知道什么叫程序的健壮性。接手了一份胡搞瞎搞的数据库之后，才知道范式说的是什么，师傅说我司数据库每天要备份六次，我问为什么不多备份几次，他说，因为每次备份需要四个小时...后来做了很多外包项目，才知道需求管理，或者说讨价还价其实也是个重要的编程技能。不是每个程序员都可以干干净净的只搞技术研究，做一个科学家。程序员应该是个工程师，工程师的话就要以实现为目标，很多时候，算法效率不是最重要的，有时候为了工程上的需要，还要牺牲程序效率换取工作流程上的效率或者框架的可维护性。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],慕课网,"小慕决定先说一下比较直观的不同：程序员A：在学校编程的时候，有着一头乌黑的秀发，现在发际线惨不忍睹；程序员B：在学校的时候没钱觉得配不上女神，现在有钱了觉得好像并不是钱的问题？程序员C：在学校起码能靠帮女同学修电脑和炫技装X，现在在公司连个可以装X的对象都没有；程序员PHP：在学校的时候我不知道谁才是最好的语言，在工作中我终于明白……言归正传，小慕认为在实际工作中的编程，跟在校期间相比，是之间的区别。在学校里编程，不外乎三种情况：一是课堂或课后作业；二是期末考试或毕业设计；三是课余时间参与维护的开源小项目。开发团队要么是学校社团成员，要么是同宿舍的几位室友，大多数情况下都是一个人同时身兼数职，承包了产品经理、开发工程师、测试工程师甚至还包括美工的所有工作。在学校里编程，只要根据老师布置下来的课题，实现主要功能，经简单测试可以运行就算及格。你可以各种花式炫技，也可以随便应付了事，因为在学校里编程最主要的目的是：在工作中的编程除了文首说的直观的不同当然还存在着许多深层次的不同，这些不同只有经历过的人才能明白。如果你正打算去做一名码农，小慕的总结会对你有一些作用的，具体有以下几点：在工作中，需要使用公司专门要求的工具来完成编程，同时还有可能需要用到多种工具，这就需要程序员对于工具的熟练运用呈现多样性；而在学校编程因为实现的业务功能单一，所以使用的工具也较为单一，基本都是主流的IDE，相对要容易得多。生动一点地说就是在学校里，你可能只用一个电饭锅就能解决一顿饱饭，而在工作中，你可能还需要烤箱、打火灶、汤锅、炖锅等等更多的工具来完成。在工作中，代码需要遵循一套严格的编写规范，因为在工作中的代码不是属于某一个人的，它是需要大家共同维护的。阿里巴巴的开发团队就有专门的开发手册，每行代码都需要经过至少一次其他人的Code Review，因此，遵守命名规范利人利己。在学校里写的代码可能没几个人会看，命名可以随意起int a、int b等等，最后只要实现功能就好，并且过后很少会被再拿出来看。而在工作中，从来不写注释或者简单注释几句的代码，一段时间之后可能自己都看不懂了，这种情况是不被允许的，因为这些代码可能会被持续使用很长的时间，需要不断地维护和更新。从某种程度上说，在工作中，相比开发的时间，写单元测试和接口测试的时间只多不少。一行代码可能需要好几行代码、好几个用例来测试，通常需要使用工具，按照规范的流程来进行调试。并且，在工作中，测试是重于开发的。就像生产一个玩具小汽车，设计出来，还要测试它能不能跑，跑得快不快，遇到撞击会怎样等等，在工作中的程序在投入使用前同样也是经历了无数次的测试，才最终与用户见面的。而在学校，大多数情况是这样的：代码写完运行一下、肉眼看一下，偶尔会使用工具，碰到bug可能会蛋疼一下午。（举个栗子：项目上线发布后有个模块挂了）在工作中，解决同一个问题，能够用更少的代码的人水平更高，你写的每一行代码都必须保证是精华。因为在工作中代码写完并不代表结束，后期可能还要持续维护，就算你离开了，也要保证接手的人能读懂，所以写的代码贵在精而不在多。在学校里编程，可能写的代码越多，会感觉自己越牛逼。有时候一天能撸上千行代码，感觉自己太牛X了，然而这在工作中并没有什么卵用。在工作中，你负责的往往会是一个大工程中的一个模块。完成一个大工程的开发工作是一个团队的事情，因此你必须学会团队合作，也就是说你的代码要让更多的人看懂，也能让更多的人拿来即用。在学校，教的都是一些经典算法，解决些通用的问题，但是当面临实际的问题时，这些往往没有卵用。举个例子，比如排序算法，课本上有很多，有些同学甚至能将各种排序算法都默写出来。可他们永远不明白关系型数据库是如何实现排序的，因此当你问他们如果内存装不下所有数据该怎么排序时，他们只能一脸懵逼地望着你。在工作中，可能一行代码面对的用户会达到上千万甚至上亿，所以就要求开发者在开发的时候要把很多可能会出现的问题考虑进去。也就是说如果你编写的是一个把猪肉放进去可以做成火腿的程序，你还要考虑到如果有人放进去的是一袋面粉，程序是否能够完成对它的加工。以12306为例，在使用阿里的云计算平台之前，每年到春运的时候网站几乎都会因为访问量过大而瘫痪，铁道部受到铺天盖地的吐槽，这可能就是当时开发者没有考虑到或者是没有解决的问题。后来，随着阿里的云计算平台的支持，很好的解决了访问量过大的问题，还提升了网站的性能，极大的提高了网站的承载量及用户体验，口诛笔伐明显平息了很多。而在学校里，我们写的代码充其量只是个小玩具，用户量一只手数得清，甚至在变成玩具之前就已经夭折了。在学校里如果你想实现苹果去皮的功能，只考虑这一个功能就好，很少需要再去考虑如果是一个橙子，该怎么办。在工作中，你的时间会被分配到多个环节，包括了解精准的业务目标，预研需要用到的技术手段、如何选型、详细设计、编码实现、配合测试、上线及上线后的维护等等。每一步都都要评审，降低返工风险，具体到每一个项目时遇到的问题可能会更多，比如怎么测试，怎么部署，怎么更新，怎么监控和保证健壮性、效率以及规模。用户量多了怎么办，被攻击了怎么办，你依赖的东西挂了怎么办，你部署的环境变了怎么办。更深层的考虑是不是要开源？这个东西能维持几年？有啥竞争性的产品？他们都怎么样？下一步该做啥？等等等等……会多出来好多事情。所以工作中，coding所分配到的时间可能只是你的工作时间很少的一部分。在学校里，所谓的编程更多的时间就真的只是coding,或者是通过算法解题，一个小的算法解决一个问题等等。这跟实际工作中的强度和时间分配相比，有很大差别。在工作中，代码要考虑可用性、易用性、安全性、健壮性等因素。假如你身处金融机构，哪怕一行代码出错，都有可能导致上百万、上千万甚至更多的资金损失。所以，对于你所撸的代码一定要常怀一颗敬畏之心，要经得起考量，质量比数量更为重要。“”，说起来也是蛮心塞的！而在学校里，只需要考虑指定的功能是否得以实现即可，即使存在问题也只是重新修改，或者请老师给予指正，不会带来实质性的影响，因此在Coding的时候也不需要非常的谨小慎微。在工作中，作为程序员的你，编程是你安身立命、养家糊口的基础，也是在职场彰显个人才华的根本，对于整个职业生涯的发展发挥着至关重要的作用。如果在IT公司或者互联网公司任职，技术太水的话是过不下去的，轻则拿不到理想的收入，重则与心仪的公司无缘。很多人都知道程序员的收入比其他工种普遍偏高，其实他们的投入成本也极大，可能每周工作996或者997。好在收入与所付出的努力能够成正比。在学校里，完成作品带来的可能仅仅是精神上的愉悦，或者是得到老师的褒奖及奖励，与工作中的直接收益结构是完全不同的。也就是说：但是，程序员的辛苦也是众所周知的。所以，在回答的最后，请各位IT、互联网公司的产品经理大大，或者说，如果你身边有“程序猿”朋友，请千万记得一定要对他好一点，没事帮他捏捏肩捶捶背，没事多请他吃吃饭，多帮他买买单，编程的压力已经很大了，请理解他，帮助他，毕竟猿生已经如此的艰难，真要把天天加班又没有对象的他们惹急了，后果会是……还有如果你是程序员的女朋友，想为程序员男朋友做点什么，那么请参考知乎用户 @韩食 的回答：“我是一位程序员的女朋友。和他见面的时间不是很多，但是也不会有生疏感。他有时工作到很晚，压力也比较大，我尽量就是在他专注的时候不打扰，在他运行完一段程序后给他递上一杯热饮。没有工作的时候，我和他一起出去玩，去山林中休憩和在城市中探险。他之前也是一个焦虑的人，他现在是一个很开朗快乐的人。他生日的时候，我送了他一把机械键盘，本来我对这些外设也是一窍不通，也是慢慢查资料了解哪些更适合。把护眼灯调柔和一点，在座椅上摆上舒适和坐垫。我们一起的时候很快乐，真诚，信任。他抱着我睡觉的时候，我能感觉到他的疲惫，他的呼吸声也是我的安眠曲。 然而，以上都是我编的。我是那个程序员，我没有女朋友（笑  ”最后送大家一段程序员专用霸气代码注释：代码永无bug！！！1. //                            _ooOoo_   2. //                           o8888888o   3. //                           88"" . ""88   4. //                           (| -_- |)   5. //                            O\ = /O   6. //                        ____/`---'\____   7. //                      .   ' \\| |// `.   8. //                       / \\||| : |||// \   9. //                     / _||||| -:- |||||- \   10. //                       | | \\\ - /// | |   11. //                     | \_| ''\---/'' | |   12. //                      \ .-\__ `-` ___/-. /   13. //                   ___`. .' /--.--\ `. . __   14. //                ."""" '< `.___\_<|>_/___.' >'"""".   15. //               | | : `- \`.;`\ _ /`;.`/ - ` : | |   16. //                 \ \ `-. \_ __\ /__ _/ .-` / /   17. //         ======`-.____`-.___\_____/___.-`____.-'======   18. //                            `=---='   19. //   20. //         .............................................   21. //                  佛祖保佑 永无BUG  22. //          佛曰:   23. //                  写字楼里写字间，写字间里程序员；  24. //                  程序人员写程序，又拿程序换酒钱。  25. //                  酒醒只在网上坐，酒醉还来网下眠；  26. //                  酒醉酒醒日复日，网上网下年复年。  27. //                  但愿老死电脑间，不愿鞠躬老板前；  28. //                  奔驰宝马贵者趣，公交自行程序员。  29. //                  别人笑我忒疯癫，我笑自己命太贱；  30. //                  不见满街漂亮妹，哪个归得程序员？  以上。"
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],雷佐佑,刚工作了三个月，简单谈一下我的感受。先说重点：最大的不同是。质量是个很广的概念，涵盖方方面面。在学校写的代码，除了你自己可能没有第二个人看，可以不写注释，命名随意起，int i、int a；在公司，代码需要遵循一套严格的规范，这样做利人利己。每行代码需要经过至少一次其他人的Code Review，我在学校自认为代码比较规范，结果到这里经常被师傅提很多Tala（修改建议）。在学校，代码写完运行起来跑一下、随便点一下就行了；在公司，相比较开发的时间，写单元测试和接口测试的时间只多不少，一行代码需要好几行代码、好几个用例来测试。我认为没有经过测试的代码等于没写。在学校，写的代码充其量只是个小玩具，用户量一只手数得清，甚至再变成玩具之前就已经夭折了；在公司，每一行代码要面对的用户上千万、甚至上亿，性能以及随之带来的并发问题不得不考虑。这就好比在公园盖一个厕所，装修华丽，环境很好，但是坑位只有五个，结果节假日几百号人同时上厕所，那场面自行脑补。在学校写的代码，出错了最多被老师批一顿，改一下就完事了；在公司，尤其是我所在的支付宝，一行代码出错可能会带来几十万、几百万甚至更严重的资金损失，这种坑把我卖了都填不上。借用一位前辈的话：对你的每一行代码保持一颗敬畏之心。最后回答题主另外一个问题：每天啪啪啪手敲成千上万行代码——我还没听说过每天啪啪啪就能敲成千上万行代码的人，不啪啪啪也敲不了这么多。暂时想到的就这么多，后续有机会再补充。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],叶博,刚开始工作的时候，还是个愣头青。那个时候最优秀的品质就是 速度。一天三千行代码啊………简直文思如尿崩。然后 一周之后 自己写的什么 回看起来就困难。好像是 乱扯的毛线团，虽然能用看着心烦。bug时不时的出来 撩拨你的神经。大概过了两三年 经过几个项目之后，每天有个三百行 真是了不起了！不同是 写的少，错的少。功效倒是差不多。写的少 想的多了。代码结构从 过程化 到 对象化 到函数化了。建模从 点线面到立体 到 流，从描绘系统 变成了 描绘 用户体验流。基本上经历了一个过程比较语言哪个好，系统哪个好到方法哪个好，思路哪个好到代码范式，规范，美观，编程技巧再到怎么样 最短时间 最低成本达到可用性要求，快速推进项目，不废话 不啰嗦。到最后其实都是工具而已，脱离了情景环境单论好坏都是耍无赖。代码外围的工作做的越来越多了，颈椎间盘突出越来越严重了。稍有不注意休息 就会有肢端麻痹和疼痛。工作后很难和小伙伴打一局dota了，学校里 很难有认真严肃的项目。诸位 注意保护颈椎，坐卧行 都是关键。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],张晓华,真实的工作中，一个合格的程序员并不是把所有时间都用来写代码。而是在脑袋里、电脑上，通过各种方式先把程序的结构、逻辑等等先想明白了，才开始动手写。一个好的程序员不是产出代码量多，而是产出代码质量高。牛逼的程序员一天写十行代码，可能比我一个礼拜写1000行代码还有用。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],朱卫军,工作中的编程和学校里最大的不同在于：有人说这是软件开发，并不是编程啊。对这就是工作编程和学校编程的差异，工作编程不仅仅考虑代码，代码是为系统服务的，而系统中千丝万缕的结构都与编程息息相关。比如作为程序员，你需要搞定设计文档、流程图、伪代码、接口、测试用例，冒烟回归测试等等，以及与产品经理、UI工程师、、数据工程师等进行配合所以你会注意到工作里的开发不仅仅是单纯地编程，它更像是修建一栋大楼，从规划、设计、审核、施工、装潢、再审核、交付等等，需要把设想中的建筑变成现实。而学校里的编程更像是设计图纸搭局部模型，今天做个浴室、明天做个厕所，而且用料标准也不固定，没法形成建筑。因为我是做数据分析的。拿数据平台开发来说，一方面有任务流程、数仓设计、命名设计、调度管理等事项，另一方面SQL开发也有很多规范。从需求调研规划、规范定义、模型设计、自动化开发，到测试验证、数据资产管理等都需要注意。对于SQL开发，不是传统认知的写代码run成功了事。它有编码规范、注释规范、DQL规范、DDL规范、运算符规范、表别名命名规范、调度配置规范、数据同步规范、std清洗规范、分区规范、维表使用规范等等要求。这是在企业数据开发中需要严格遵守的，可能在学校里写个SQL并不会考虑这么多。学校里编程基本都是书本上或者老师教的步骤，一二三四实现了就可以，很难用到实际开发里。现在各大互联网公司都有自己的代码规范和code review，比如腾讯、谷歌。腾讯员工发过一篇code review，简单列几个：谷歌风格指南，对各种语言大型开源项目都给出了代码规范：拿Python来说，它分别对风格规范和语言规范做了详细说明。对于Python异常处理，有如下建议，异常必须遵守特定条件:其他具体请看： 对Python而言是这样，其他语言有更多的规范，这个需要大家平时多练习、多思考。比如说多逛github、牛客网、leetcode等，持续保持对代码的敏感度。综上，学校是学习编程基础建立认知的地方，很难把所学用到工程开发里。而工作是教会你怎么用编程创造有价值的产品，这其中有太多东西需要你去学习、运用、深化。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],Ray Chase,入行愉快。首先，一言以蔽之，用两个字来概括，就是“残酷”，但是，好在是加引号的。让我慢慢说来——下面这些都是看起来“残酷”的事实，有的不但残酷，还很无奈；有的则是在残酷的同时，还很有趣。搞工程和学校里的象牙塔大不相同，这也许老早就知道，但是绝对不是七八年前我想象的模样。你可以把它当成我没睡醒的呓语，也可以当成我喝多的胡话，或者是心情太差的时候写的吐槽檄文。反正，它们就在那里，事实就在那里。总的来说，学校里面编程，或者在工作之余编程，是很有趣的，没有manager给你各种压力，也没有各种大神（比如TMP、PM、SE等等我都搞不清楚干嘛的职位）给你指点江山，你可以自己爱咋弄咋弄。当然，没有了这些“残酷”的痛苦，你没法进化，没法超脱，没法升华。就从一毕业开始的荒唐的面试说起吧。国内的公司问的更杂一些，知识性的问题也问，有时我反而觉得更务实。而外企则很喜欢考察“能力”，我加引号是因为他们觉得他们在考察能力，实际却不见得。因为他们只是在考察80%的算法+数据结构，以及一点点系统设计，一点点扯淡能力，再顺道看看颜值如何啊，八字合不合啊，星座属相啥的而已。因此，这其中前80%东西都是可以准备的。而应试，恰恰是中国人最擅长的东西。我记得有朋友在我的blog里面回复道，特别鄙视刷算法题和面算法题这样的做法。我想，我可以和你“同鄙视”的，但可惜我没有那么崇高，而且他应该是没有很多去大的外企公司面试的经历，否则，应该去一边骂这个该死的面试方式，一边自己偷偷刷题去了。还有人说，FLAG又如何，某ACM拿奖的，某算法特别好的，某题刷特多的，但是工作却不出活儿啊。嘿，这样的人，我还真见过，也听人说过，但问题是，人家，钱，拿，得，多，啊？人家不爽了就可以跳槽啊？人家一跳就是不错的薪水啊？既然聊到算法，那就继续下去。好吧，残酷的事实是，绝大多数软件工程师的日常工作，和算法的关系其实并不大。当然，和data analyst这样的职位比我们还是好很多，那个职位简直就是仅次于的神级角色了，学经济学宇宙学物理学化工的，只要数学属性可以，只要会讲故事，就可以扯到伟大的数据分析上面，就可以表示“本人具备成为优质数据分析师的潜质”（好像也没有什么不对嘛，analyst们请不要打我）。好吧，话题再扯回来，面试考察的正是平时工作用不着的东西，换言之，原则是“什么用不着就考什么”，首当其冲的就是算法，而真正用得着的呢，以一句“Google得到的别考”搪塞过去了，于是这些自我感觉良好的公司中，工程师日常工作就是在和Google+StackOverflow战斗中度过的。尤其是MS，这家自我号称地球上最没有taste的公司，面试简直是为ACMer准备的，有的组简直是“来了就做题，做完就闪人”。Google问的算法题还算有新意的话，是那Facebook是对普通算法题要求就让人和不解，bug free能说明什么问题，说明熟练，说明题目做得多，还是想说明一个人脑子这个里面存放的题量大？工作有多有趣？这是个好问题。其实，每当我们从一家公司跳到另一家公司的时候，也总会有这样那样的幻想，会对下一个让自己发挥的“舞台”有所憧憬。但是很多时候，我们面对的问题，都是“知识谜题”。说白了，就是那些“不知道的打死也不知道，知道的困难解决毫无难度”的问题。来来来，这样归纳一下，假设一个工程师每天的工作时间是100%的话，20%可能要吃饭喝水打望上厕所刷推刷微博吹牛逼闲聊，30%的时间要开各种傻里吧唧的会（这个估计够保守了吧），剩下50%的时间想干正事儿了，发现大部分都在干各种operation的工作，说白的就是编译构建部署安装搭环境改配置打补丁，余下总数的10%才是真正研究问题写代码的时间，发现各种乱七八糟奇形怪状的问题，各种在学习新技术的时候，看着那些玩具代码和hello world的时候，根本不可能想到的狗血问题全部冒出来了。就改了一行代码，居然这东西就不work了？就加了一个小小的feature，整个系统居然就挂掉了？于是，从外往里连蒙带猜，连分析带搜索，连Google带StackOverflow地试错，重要在某个人生中重要的时间点发现，又是一个知识谜题，又犯了一个二了吧唧的错。搞完这些东西，终于把自己写的那一点点小代码，像橡皮膏一样贴到项目组负责的这个庞然大物上了，嗯，it’s working it’s perfect。别急，哪那么容易让你到达成功的彼岸？代码修改了要反复测试啊，测试的时候要考虑各种情形，调用一个API的时候说要接收一只老鼠作为参数，必须要考虑如果对方传过来一头大象怎么办。搞完这些东西，才可以去尝试code review这个苦难重重的关卡。发出去以后，等啊等，等啊等，居然没人review啊，那好吧我去催，挨个催。结果，幸福来得太突然，十行代码，二十条review comments，一度让自己对自己的人生观和价值观产生了怀疑。但是，仔细看了之后，发现其中19条是关于各种缩进符号命名大小写注释空格的，只有1条是具有实际的建设性意见的，终于松了口气，又是一轮改+催的流程……更可恶的是，当你折腾完这些乱七八糟的东西以后，心里居然没有啥成就感，就那么点破事儿，居然整那么半天？于是你在第二天的sync up meeting上说，俺昨天做了xxx，yyy，发了个，里面代码修改其实只有10行。这就是一天又苦逼又繁忙的工作产出啊。更更可恶的是，有牛逼哄哄的同事A跳出来说，你这么搞是大错特错的，理由1理由2理由3，还有最核心的理由4，退一步说还有理由5，就在你心里想我擦妈蛋你这个马后炮为啥不早说的时候，又有一位牛逼哄哄的同事B跳出来说，如果用开源的/公司内部的/免费的/别的组做的/我曾经参与开发的，框架abc/库def/组件ghi/工具xyz，问题可以瞬间解决，言下之意，就是你眼瞎了，脑残了，活白干了，当初应该屁颠屁颠地跟在他后面求指导就好啦。别高兴得太早，到了线上，还会有更多历练人生的有趣事情等着你。比如项目发布，比如on call（改线上问题）。有的问题紧急啊，就意味着你要拿着一个传呼机一样落伍的几千年前才用的东西睡觉。它也许早上响，也许晚上响，也许深夜你做美梦的时候响。总之，当它响了，你就得爬起来立即处理，看看是不是service又挂了？是不是你天天整的那个破玩意儿又不能访问了？还是哪个用户欠抽搞了个？说不定这个问题还真是由你提交的代码引发的呢，那就是bonus啦。所以不用怀念学校里那些美好的熬夜打游戏的美好时光，你会迎来新一轮的熬夜改问题的美好时光。来回折腾若干次以后，环境终于搞定了，code review终于审过了，代码终于push了，集成测试终于跑过了，部署到线上终于没问题了……但是，淋漓畅快的成就感呢？在崇高和伟大之间对神一样的设计反复的斟酌呢？对代码像艺术品一样的华丽丽的无止境的追求呢？以上，来自我的blog：
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],skywa,1.要学会在没有文档的情况下快速掌握一个轮子，这个轮子可能是某个大神的呕心沥血之作，也有可能是一堆傻逼拍脑门子想出来的东西。2.要学会心平气和的改别人的bug，艹你@&%*&*&***&这种话要藏在心里。3.规范！规范！规范！接口也好，命名也好，code style也好，甚至是log，都请按照规范来。4.如果不是大神，多听多看多想少BB，别以为还是开什么学习小组讨论会呢，不说话没人当你是哑巴，多说一句话就多暴露自己是一个菜B。实在要开口问问题，请先确保自己想过三遍，百度谷歌必应各一遍。5.总结一下，热爱编程是一回事，正式工作的时候，请拿出应有的职业道德和职业素养。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],兔子的寒冷年华,看了一圈，貌似全是用语言敲代码的码农们在回答。我来说说数控编程吧。数控编程是个什么样的概念？用通俗的语言来说就是用各种软件或者手工给一个需要数控机床加工的工件编写刀路。常见的编程软件有MASTERCAM，CIMATRON，Pro/E ，UG等。上述软件在算法和后处理方面各有特点和优势。初学者一般是根据自己最先接触的一个来进行编程。我编程5年，从塑胶模，五金模，冲压模，汽车覆盖模还有各种零件产品和工装、检夹具都编。主要用的软件是UG。从4.0-10.0都用，带过的徒弟也不少，说实话。我不怕那种没有底子来工厂的学徒，相反我很怕那些从学校出来的学生。因为学校教的那一套往往在实际的操作中根本行不通。一个产品给你。首先你得想到这东西加工工艺怎么排，先铣哪后铣哪？先镗孔还是先铣型腔？图纸上没有公差的位置精度如何把控？这些都是从大量的实践中才能累积下来的经验。下面我会拿一个比较简单的辅助工装来举例。学校怎么教？我们怎么编？通过CAD，我们可以看出这个工件的尺寸，公差，材料等一系列我们需要的信息。下一步是根据这个2D图在3D软件中画出3D图。得出以下的产品。通过2D画出3D实体，这个也是基本功之一。可以看出我并没画出4颗螺丝孔的。这个在实际中需要知道自己公司各部门的法则，或者和钳工师傅沟通。我们公司这些活儿都是给钳工做的，加工中心只需要点出中心孔即可。接下来我们要确定这个工件的加工工艺。考虑到残料，刀路，和刀具的各方面因素之后得出加工工艺的顺序是先紫色铣型腔。再铣蓝色避空位，最后加工粉色凹槽。如果在学校，老师可能直接会教你一把刀开完。然而，在实际操作中，这是不可行的，原因是刀具磨损和加工时间太长，工艺不合理。建好每一步需要实体图，放入不同的的图层，开始加工第一步。第一步：先开粗。要想刀路顺，刀路优化最好，先得改图。上图可以看出我将影响刀路的所有参数移除，只剩下我这步需要加工的6个型腔。考虑到不锈钢残料特质，我选择分出两个程序。各加工三个，这样能避免一次切削会造成的刀具磨损或者断刀。由于我们公司的钨钢铣刀最大只有D10的。所有没得选。用D10的平铣刀把6个型腔开粗。侧面余量为0.2mm，底部0.1mm第二步：加工凹槽，这个很简单，移除所有参数。只留下3条凹槽，随便用个开粗或者走线的程序加工，侧面余量为0.2mm，底部0.1mm第三部：加工避空位，先用抽取工具抽取出边缘线。这样加工的好处在于，2D刀路相对比3D刀路更好优化，刀路更顺。先用2D走线编写出其中一个或者两个，由于此工件是的加工坐标在中心，而且所有参数都是对称和镜像关系，所以剩下的避空位全部可以用点复制和程序镜像来完成，编1个得12个，省时省力。侧面余量为0.1mm，底部0.1mm。如果不能灵活变通用开粗或者等高的加工思路去加工，那会非常的耗费时间。开完粗，开始中铣或者精铣，是否需要中铣取决于产品要求。我这个要求不高，所有直接精铣。直接精铣，用2D走线选择打开的曲线。或者用开粗时抽取的闭合曲线都行，直接一刀过。余量为0。一样的。最后，点上中心钻，方便钳工打孔，齐活儿！！设置后切削参数后通过UG自带的模拟功能跑一次，如果没有问题，没有问题是指刀路没有干涉，没有过切等等。确认无误后进行后处理之后把编写好的程序发给操作工。程式单上注明家工坐标，单边还是分中，刀具规格，注意事项等。数控编程讲究的并不是你能把程序编出来，它最难的地方在于你需要编写出最优化的程序。很多复杂的东西要考虑的远比这个负责得多。老师可能会教你怎么编写程序，但是他教不了你经验，一整套塑胶模具扔给你，你要知道该从哪里下手。如何下刀，如何抬刀，在什么时候该用哪种命令？遇到破面怎么办？每种材料的加工特性是什么？电极该怎么拆？火花位该怎么留？还有考虑避免伤到水路孔，分型面，胶位。斜顶，滑块这些该注意什么？编程其实是一项很系统的工程。你需要的不止是会编写程序，还需要知道很多很多的知识。这就会促使我们更加努力的去学习跟数控有关的一切知识。学校的理论知识是远远不能达到的。前段时间公司招了个刚刚从学校出来的编程师傅，结果看他编出的一个小电极我就知道这孩子还是太嫩。编一个模仁上的镜像直角，还是没有异形的那种居然编了4个，粗精各两个。我给他说你这个直接一个解决，他很无解的看着我。我告诉他，首先这个地方加工中心是可以用铣刀加工到位的，只是会留下铣刀的。所以不需要粗公，只需要拆出一个电极然后镜像一个出来，合二为一放在同一个基准上面左右各打一次就行。这么点东西你拆除4个？老板不杀了你？这个例子也可以看出来，理论和实践真的相差很多。最后，放点鸡汤，各位在机械行业的大坑里继续挣扎的朋友们，不要放弃希望。我们才是这个国家的基石！！哈哈哈哈哈哈哈哈哈啊哈哈。。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],邰原朗,学校里，程序哪怕错了一百次，只要跑对一次，也算是及格了，也就是过了。工作中，你跑对一百次是应该的，只要错一次，就是错了，就过不去。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],血亚憎高,以前老是幻想自己造轮子，造的多美多棒，上班之后慢慢的把技能点全加在快速学习别人轮子的使用方法上了，实在找不到现成的才会自己造。以前觉得代码才是王道，文档算个屁，现在觉得没有文档的代码算个屁，谁不写文档干死谁。以前觉得码农主要工作是写代码，现在才知道主要工作是debug，包括自己和别人的bug以前觉得程序要写的完美无缺才行，各种纠结怎么做，现在是在最短时间内拿个demo给甲方，demo多简陋都行，先看自己和甲方对需求的理解是否一致。以前追求装B，现在追求简单高效以前是输出错误到屏幕，现在是输出到日志以前觉得注释是天经地义，后来看到个注释就欢天喜地
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],放开那女孩,看图，骚年悟到了么
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],Will Zhang,最大的不同就是，学校里写的代码都是用完就扔，所以完全不管可维护性（这不是个好习惯）。公司里写出来的代码大部分情况就要你一直维护它到离职了，写的时候就不可能不管可维护性了。至于代码量，我在学校的时候经常一天上千行C艹，公司里我一天也就300行C艹左右。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],力扣（LeetCode）,学生正式走入社会进入工作岗位和在学校里还是有不少差别的，当然也不是说学校里学到的东西就没有用了，学校里学到的知识是帮助你巩固基础能更快的适应进入工作岗位上会发生的各种变量。在大学里码的代码，往往只有你一人完成就可以了，可以说是一人吃饱全家不愁啦！所以版本管理的需求没有那么大。但是进入公司工作后，趋于多人协作，代码管理变得重要了很多。熟练运用 git，p4 等版本管理软件进行编程。版本管理的目标主要是为了使代码的开发流程更加清晰，当然，好的版本控制并不仅仅在于让代码更清晰。对于团队开发来讲，可以有效控制分工和权限。并且在协作的时候提供解决冲突的方法。在学校写的代码除了提交后老师批改以外，往往不用其他人阅读，但是在公司写的代码往往需要经受大规模的 review，你需要让阅读你代码的人迅速了解你代码的意义。大驼峰、：主要通过大小写来区分变量的用途，以及性质。注释：注释主要集中在变量的用途和函数的用途上，注释言简意赅，让阅读者一眼扫过就知道这个函数的用处。将代码按照功能抽到多个 scripts 中，不要聚集在一个 scripts 里。每一个 script 不要要超过 1000行最好。上述两点的话，很多在校学生其实也会掌握对应技巧，在进行协作的时候往往也会接触到相关的需求。但长期维护和充分测试亮点往往就是实打实的需要在工作中学会了。在学校的作业往往是有一个目标，实现对应的目标即可，其次提交作业时往往不会进行充分测试。在工作开发的时候，无论是自己设计单元测试亦或是黑箱测试，都要进行充分的测试。而且在之后迭代的时候往往需要针对一个线上版本进行短平快的开发，这是在学校完全没有过的体验。往往不允许你对项目进行重构，同时在开发时也要兼顾之前的内容。以及需要有快速的修复 bug 的能力，这种能力其实更多的依赖于你的代码，是否规范，有没有养成良好的习惯。这里推荐力扣君另一篇回答，在日常的编程学习中注意培养良好的习惯会让将来踏入工作的你受益非浅。 学生时期是一个成长的阶段，你可以自由选择喜欢和谁在一起，不喜欢和谁在一起。而在工作中应减少个人情绪，融入整个团队，为了同一个目标而奋斗。比如程序员与产品经理的沟通问题，力扣君作为一名程序员也曾体会过产品经理天马行空的需求，在处理这些问题时，力扣君总是告诫自己：避免冲突，增加沟通，共同解决。初出茅庐的程序员有时会走向一个极端：将技术提升作为自己的最重要的目标，不愿意接收产品经理提出的没有技术含量的工作，或是不愿意破坏自己的现有代码结构去实现产品经理的奇怪需求等等。事实上，无论是程序员还是产品经理，我们都是给老板打工，为用户服务的。技术提升是自己的事，在工作中，产品体验才是我们最重要的目标。有时可以让你写一个超体现能力的算法或数据结构，但也无可避免的需要你写一下简单的静态页面实现数据检测。要知道，工作上安排的事情都属于业务需要，我们应当在工作时间减少自我意识。学生时期，遇到不会的题目，总有学霸同学帮我们解决，或可以向师长请教。而工作中，交到自己手上的工作，解决的人只有自己。业内有句话说：老板招你进来不是希望你告诉他这个想法有多么难，而是希望你帮助他实践这个想法。好的程序员，事在人为，方法总比困难多。当然这并不是说我们一味接受无理需求，沟通也是解决问题的办法。重要的是我们要勇于承担，对事情负责，这样才能得到更多的锻炼。在学校，老师都会鼓励同学们创新，不断使用新技术、新知识提升自己，而在工作中却不能完全这样。不少职场新人都有一点标新立异，比较直接的体现在过度炫技，不爱用老技术，喜欢在工程中大量使用新技术，即使这门技术自己尚未完全掌握。诚然，我们不能否定创新的价值，然而将自己尚未了解透彻的技术用在实际项目中是可怕的。工作多年的职场老手就明白，不要做第一个吃螃蟹的人，在公司项目中引进任何一项新技术都需要考虑再三。多数情况下，第一个吃螃蟹的人是踩着坑前进。在个人成长时，不断踩坑是好事，毕竟“失败乃成功之母”。而项目团队是经不起这样的折腾的，团队前进过程中不希望看到出错，我们走的每一步必须慎重再慎重。对此，力扣君有个建议：业余时间创建自己的练习项目，在个人项目中使用新技术不断试错，在公司项目中使用稳定的技术。如果自己感觉已经能够掌控这门新技术并足以应对其带来的风险时，再将其引入公司项目中。认真看完力扣君所说的，你是不是也总结出来了，只要在大学时候拥有良好代码习惯，迭代周期优秀的人在工作时也能较快适应对应的变化。而大学时期的很多学习习惯是为了迎合老师和考试未必会在实际工作中被青睐，真正踏入工作岗位就应该随机应变，把公司的业务和目标放在首位。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],Charles Stone,"打坐，修炼，忘了学校，准备被喷熟悉公司标准的桌面工具熟悉版本管理系统及操作熟悉业务基本逻辑，文档和业务书籍清单好长。不是所有的公司都是纯软件公司。就算是纯软件公司，商业逻辑你之前也基本没见过。一般这种文档要看3个月起步。在大公司？再加三个月都不止，越看越多。一边看业务书，一边开始看代码，shit，这是多么古老的代码和语言！为啥都是java和C语言，卧槽还有汇编？卧槽这个语言是啥没见过，？为什么不是ide的？为啥还在用这种古老的编辑器？试着编译一下，卧槽这是个什么破编译器？编译器要用命令行调用，那些编译选项都是啥？工程文件里面的参数分别都是啥？你带着代码语言和编译器问题愤愤不平地去找开发老大，老大翻了个白眼给你: 这系统20年了，这项目我们做了10年了。不服？啃完那边那堆带着卷边的语言书和编译器说明书去！你一边啃着这些破烂古董书，一边继续看代码。卧槽这个调用接口是啥？书里面没有！卧槽卧槽卧槽，类似的接口好多，调用得还好频繁！你满怀疑惑地找老大，老大说:哦，不好意思忘记给你内部接口手册了，服务器上有，注意有18个版本，你这个team用的是其中第6个版本的。 顺便设计文档也在上面，一起看看吧。你上文件服务器一看，晕了，这个版本的内部接口手册563页，设计文档合计353兆，各种格式的文档都有，呃，这个文档最后一次编辑是在2004年4月。。。开始琢磨代码和注释，与设计文档反复对比，搞清楚它们到底都在干什么，心中凛然。卧槽这里有个调用好奇怪，怎么直接读写地址的，绝逼严重违背软件编程常识啊！跑去找老大，老大头都没回""地址多少啊？""xxxx去服务器上找""xxxx 芯片/传感器/执行器 手册""，顺便这个玩意在系统中的使用说明在""yyy子系统设计说明书""中有描述尝试去修改代码，记得对照公司编程规范，否则交叉审视被默默鄙视。信心满满地提交代码，编译还没通过，就被自动扫描工具喷得狗血淋头，然后你不甘心地将代码加长了10倍去预防低级错误。编译通过了！功能测试失败！开始找bug，一定是自己改的代码出了问题。几个通宵下来，发现是隔壁组的修改了接口内部实现，shit！。。。。。被测试组头儿拿着性能度量报告喷得狗血淋头，抓狂地开始性能调优。。。。。老子不要被骂，自己测试！师傅飞扑上来了一把拔掉插头，转头破口大骂""小混蛋你不做保护就要实际运行啊！""。。。。。这只是个纲要，而且还没写完。"
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],xxxx,差别很大。最近一直在洗数据，就拿 SQL 来说，学校里学到的大多都是一些常用的用法，事实上即使是公司里的开发，日常做业务需求的那种，用到的 SQL 技巧也是有限的。我第一次有这种经历是因为在上一家公司，数据库是用 PostgreSQL，所以每一次改动都需要给 DBA 过 SQL，要求是必须每一条改动的 SQL 都需要用 explain 跑过之后对比改动前后的 rows 以及时间，保证改动后与之前差异不大，至少要保证所增加的压力在目前机器数量下，最高峰的压力可以保证服务可用性，才会允许上线。我第二次有这种经历是因为目前所做的事情，虽然我应该是一个写业务的 RD，然而我现在却是日常洗数据，写 SQL 写到想吐。讲真，日常开发有多少机会会用到 case when，coalesce，if as，concat_ws，group_concat 这些东西的。当然并不是说不会用到，只是机会真的很少，所谓贫穷限制了我的想象，业务场景真的会限制你的发展，当你遇不到的时候你永远不会想到，窝草，还有这种情况？这大概就是所谓的，哪怕是最简单的排序，当数量级很大的时候，都是一个难题。以上，只是简单举了一个 SQL 的例子，就更不要提，学校里写的东西大多不需要考虑什么并发，而公司里的东西由于流量大、并发高，除了加机器以外更需要提高自己的单机 QPS，即使是加机器，也要考虑各机房机器分布，流量分布，这中间可能会遇到的问题，所需要的解决方案就不是我们在学校所能遇到以及想到的了。简而言之，刚毕业的我已经被虐的不要不要的了。不过，我觉得从学生到工作过渡的过程中，对我而言，最艰难的一件事是意识，很多东西第一次做，是没有意识的，这个比你没有见识过更可怕，可怕的就是你见识了，但是你却没有意识。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],老胡聊Java,在学校里学编程，讲课老师的目的是为了讲完讲课用的教材，完成课程设计，以及考试及格。比如学java，一般是老师按照某些书讲，也不管书里的java技术是否真实会在实际开发中用到，或者说，不少讲课老师平时是不做项目的，他们也不知道项目开发会用什么技能，以及各项技能会用到什么程度，这也是为什么不少学校还在讲swing界面编程，还在讲ssh这种早就不用的框架。我平时也见过一些学校的教材，这里就以spring boot技术为例，讲下学校里讲的和项目所用相关技术的差异。学校里，一般会从spring boot启动类讲起，再讲用jpa操作数据，再讲一些控制器层的注解，比如@RequestMapping等，再讲一些技能时，会以语法为主，比如某个方法什么意思，相关参数什么含义，要实现某个功能，可以用调用哪些方法输入哪些参数，再着重讲一些注解的含义。也就是说，学校里的讲课过程中，老师会着重围绕语法讲，讲清楚某个对象以及某个方法的含义，但在实际工作中，开发者是会以任务为导向。比如用spring boot做开发，项目经理顶多给开发者一些可供参考的例子，让开发者实现某个业务功能。此时如果开发者还是按学校的步骤，先理解api的用法，再理解诸多参数的含义，再此基础上再开发，一定会延误开发进度。从所用的开发语言来看，就java方面，能讲现在比较实用的spring boot框架的学校这两年才多起来，不少学校还在讲ssm框架，甚至是ssh框架，我不知道是否还有学校只讲java核心，不讲Java web开发框架。但公司里用的，至少是ssm，大多数应该是spring boot。从项目管理角度来看，一般公司会用maven管项目，用git管代码，用jenkins做部署，用jira管进度，甚至还会用docker和，而在学校里，顶多就用个集成开发环境+Maven吧。从项目部署角度来看，一般公司至少会在一台机器上部署项目，多的话，用集群部署也有可能，而且有可能引入一些分布式组件或spring cloud alibaba微服务组件来应对高并发，但在学校里，一般只讲单机版完成功能吧。甚至当下，能用spring boot（或ssm）框架讲清楚一整套增删改查流程的学校，已经算比较好的吧。从功能复杂的角度来看，学校里会讲从前端到后端再到数据库这整个开发流程，但在实际工作中，在每个流程里，还需要考虑各种异常处理情况，比如参数错误怎么办，数据库连接有问题怎么办。从工作任务角度来看，学校里估计只会要求学生会写代码，在工作中，程序员不仅需要会写代码，更要会做单元测试，做代码质量管理，参与数据库设计，参与项目发布，以及通过看日志解决实际问题。从代码编写方式来看，学校里一般会要求用符合教科书的方式来写代码，比如设计数据表要符合三范式的规范，应当尽量避免重复写代码，重复代码应当写入函数等。但在工作中，一切是要围绕进度和成本，比如某段代码确实应当重构，但临近发布，来不及优化，所以只能用低质量的方式来编写，或者某项目组没有预算找前端开发，所以只能用比较low的方式来设计。从项目部署和维护角度，学校里写代码时，一般会认为数据库是预先装好的，而且数据库等服务器是不会出问题的，所以在校学生一般只会写代码，不大会安装程序和监控系统。但在真实开发中，只会做开发的属于最低级的开发，工资不会高，高级开发乃至架构，少说得会安装组件，或者通过安装组件来监控系统。从分析和排查问题的角度来看，学校里写代码时，如果出了问题，一般只是通过debub来分析问题，但真实项目中，一般是通过看日志来调查和解决问题。从使用的操作系统来看，学校里编程一般仅限于windows，mysql是在windows上安装的，java程序也是在windows系统上跑的，但真实项目里，开发可以是在windows环境，但开发好的成果，以及数据库等组件，一般是部署在linux操作系统上，这就要求程序员掌握操作linux文件以及运行linux程序等技能。从衡量编程的成果方面来看，在学校里，只要能实现相关业务功能即可，但在开发中，更需要确保业务系统在异常情况下也能工作，更进一步，还需要用各种分布式组件实现高并发功能。从编程的目的上来看，在学校里编程的目的是为了考试及格以及能毕业，所以万一有问题，找人通融一下应该也行，但真实项目里，编程的目的是为了挣钱，目的不同，工作方式和程序员所承受的压力就未必相同了。上述差异足以能说明在校编程和真实项目中编程的差异。对于广大即将踏上程序员工作岗位的在校生朋友来说，这样付出的代价可能是第一份工作的工资比较低，而且第一份工作的公司规模比较小。那么该如何尽快适应这种差异呢？1 最好的办法是尽早去实习，去外面公司实习，或者帮一些博导硕导干活。2 早点去看外面公司的招聘要求，以此来规划自己的学习，同时早日去外面面试，通过刚开始的面试试错，去实地感受下这种差异，通过这样的到的感受，一定比听我讲的要体会得深。一般来说，刚毕业的应届生，需要通过3到6个月熟悉角色的转换，并适应上述差异，但如果你是在校阶段就通过早日干真实项目以及面试，就熟悉了这种差异，那么就会比别人领先3到6个月，也就是说，就有可能比别人早3到6个月成功进好公司。但相反，如果在校生朋友踏上社会后，依然抱着在学校里写代码的那套模式，那么估计未必能很好地适应哪怕是最初级的开发工作，这样就别说进一步升级到高级开发和架构了，估计连立足都难。为了让各位在校生更好地了解真实开发中用到的相关技术，本人出了如下这本书。在这本书里，不仅用案例讲述了真实项目中用到的spring boot相关技术，比如，aop，restful，等，还围绕项目中遇到的比较基本的高并发需求，讲述了redis，dubbo，zookeeper，mycat，，nginx等组件的用法。同时，本书还在最后，围绕实际需求，给出了两大实战案例，一个是，一个是用redis做秒杀，不仅能更好地帮大家掌握spring boot项目开发中的实际技能，而且还能作为毕业设计和简历上的项目案例。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],PegasusWang,"刚工作仨月，说说看法。 还是挺幸运的，进去公司就跟着技术老大做项目，学到不少，一开始总是被骂代码写得像面条。1.工具。因为是做和python相关的，主要是在vim里写。其他工具还涉及到了tmux, 版本控制git, hg，运维的docker（一般是配好工具直接ssh登陆进去写），简单的nginx配置等。2.代码。什么时候应该检查参数（合法性、类型、长度等）？多次调用它会有副作用吗？写操作有没有检查权限？什么时候用if ？ 什么时候用？（判空检查：if判断多于50%用if， 如果少于1%就用try/catch避免每次if检查）代码可以复用吗,哪些可以抽出来? 每写完一个函数有单元测试吗？ 测试覆盖了大多数情况吗？不合法输入怎么处理 ?.......3.调试。 调试bug的第一步就是复现，规模越大越难定位。先整体后局部。定位到具体位置了查看变量值检查错误。3.学习。善用google，github，，查询需要的代码直接用，不要重复造轮子（学习除外）。经常查文档，比如实现一个多模式匹配，虽然不是很懂原理，但是需要用到就去查资料，了解算法，然后直接拿来用。4.沟通。和前端讨论接口怎么设计，怎么对接？ 用户反馈怎么处理，哪些需要处理？这个是上一个项目的后端代码，网址是你可以参考下。还有最近练手的项目可以看看我的博客，有最近工作的一些收获和实践"
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],匿名用户,组长：这里有个客户提交的bug，交给你了。我：联系客户，重现bug。email来往数轮，终于重现了。耗时半天。我：打开issue tracking system，填表创建bug，耗时一刻钟。我：开始调试，搭建环境，编译代码，配置参数。各种折腾后，重现了。耗时2小时。我：管理很shit，没有log，没有release pdb，没有dump，瞎子摸象，各种断点，print，在第10层函数fuckme()找到了案发地点，耗时2小时；我：发现fuckme()调用了dumb lib组的DLL。似乎问题出自dumb lib组。我：联系dumb lib组，报告bug。来往email无数轮，终于对方开了bug。我：切换到另一个任务。终于他们组bug fixed，客户已经咆哮n遍。我：改动一行代码，测试，提交。写release report表格，找人review code，找人审核测试结果，找人批准release，耗时1天。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],王健,学习中的编程更像答题，你可以追求最完美的解，追求最炫的技术，追求最好的算法。但工作中的编程更像做生意，你要考虑成本和收益的平衡。
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],匿名用户,对你的项目要“负责任”一个完整长期提供服务的项目，编写代码只是其中一部分，从需求评审，技术评审，开发，测试，后期维护等等。出了问题你就是负责人，学校是一个虚拟空间，好多事情就像过家家，一个学生信息系统，数据表设计不合理，页面丑，甚至挂了，都不会有人把你怎么样。工作不一样，一个小小的失误，一次上线误操作，一个错循环，变量。都能导致真实的钱、用户损失。尤其是大公司，参见新浪微博前段时间事故。还好新浪不涉及订单。都要追溯到相关责任人，出事故的原因，时间要细化到分钟，期间做了什么操作，具体损失多少。流程上，学校跟公司不同，公司之间也很大差异。但学校跟社会不同就是，出了学校，你就是一个独立的为自己所有行为承担后果的人。“荣” “辱” 同担！
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],桃毛爸爸,"在学校的时候我也幻想着自己好像电影里面的黑客那样,噼里啪啦一顿敲,东西就做好了...结果毕业以后,我写代码,大部分时间都在发呆...或者就是看项目文档...或者是在写项目文档..."
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],nkaifang,"有一点感触比较深：在代码中留""为什么这样干""的注释都是天使。剩下的想起来再补。"
在真实工作中的编程是怎么样的，与学校里有什么不同？,['本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。'],itlr,复杂度不同，（通常）学校编程的复杂度就像匀速直线运动或者加速直线运动，背后是有“公式”可套的，这是教学的目的；实际项目的复杂度基本都是变速非直线运动，是最好的解释，无穷无尽的不确定性。关注点不同，（通常）学校编程比较注重解决方案的最优解，会特别强调封闭领域内的算法最优化；实际项目的代码99.9%是业务，接口，架构，错误处理，会特别强调一个实现的性价比，短期是否可发布，长期是否可维护性，除了少数领域，基本不需要特别关注算法；所以学校编程像研究，实际项目是用钢筋水泥建设核电厂，时刻都是成本核算（时间，金钱）。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",条件状语从句,写一个热乎的，刚发生的：写JS，自己手机没电了，拿同事老张的安卓机调试，很简单的获取用户微信昵称，结果死活获取不到，一直显示为null。应该是跨平台问题，因为之前在自己iPhone上是没有bug的，拼命看api文档，但是都没提到这方面。急死我了。———————8.21更新—————————刚刚老张告诉我他的昵称就是null。答主的其他回答：
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",李幼萌,实在忍不住了，第一次答题。       08年的时候，我所在的公司调试三星的一款新的arm9 CPU，型号是S3C2416，是S3C2450的简配版。开发板刚入手的时候还是热乎的，因为三星的这个芯片刚刚出来，国内的代理商一共就几块开发板。各公司评估开发板都是分时使用的，只能预约几天。开发板入手的时候，三星那面连BSP都没有准备好，没有test code，没有u-boot，没有linux-kernel，甚至连Spec都是错误百出。还好我公司虽然小，研发能力在本地区还算不差，没有的东西可以自己移植。       公司急着要出新品，在没有完全验证处理器的情况下，已经layout好了PCB，并且去打样了（当时竞争确实比较激烈，400M主频处理器而且这么低的价格绝对非常有诱惑力，所以公司决定冒这个险了）。在没黑没白的工作两周后，硬件和软件做的都差不多稳定了。这时候经理说，功能上问题不大了，我们来调一调休眠时的功耗吧（我们的产品一直以待机时极低功耗作为产品的卖点之一）。然而这却是噩梦的开始……       公司的指标是待机时休眠电流500uA~800uA（电源电压4V）之间。以前所有的产品都在这个范围之内，三星方面的技术支持也明确表示，他们的解决方案达到这个指标。       在我们调试过程中发现，整个系统休眠时的功耗在1800uA左右，一直降不下来。我们重新核对了所有的IO和外围电路的所有连接，以及IO口的电平配制，都没有问题。这时，我们决定测试每一个单元的功耗，用电流表分别串联进每一个外围电路，每个单元都很正常，就是系统总体偏大1000uA。       我们连flash和ram的待机电流都测过了，仍然正常。好了，通过排除法已经确定了就是CPU的功耗过大。但是在开发板上调试休眠的时候，CPU功耗却是正常的。       我们怀疑是开发板上CPU批号和我们自己拿到的CPU样品的批号之间有区别导致的，因为三星那面也在同步修正CPU的BUG，所以我们“大胆地”把开发板上的CPU用风枪吹下来，换到我们的PCB上，把我们的CPU贴到了开发板上进行交叉验证。结果是开发板仍然功耗正常，我们自己的板子上功耗偏大，还是大了1000uA。       CPU周边的核心电路设计出现了问题！这是我们一致的判断！但是问题出在哪里，我们反复核对开发板的原理图和我们自己板子的原理图，简直就是一模一样！因为整个核心电路这部分就是从开发板上抄过来的，实在没有什么可比对的。我们转而又去怀疑PCB的问题了。       我是做系统移植和软件的，纯电气的问题我就无能为力了。闲着没事，我就反复检查我在linux中对系统休眠的IO引脚配置。然后挂着电流表做反复测试。电流表也对的起我，每次都是那个数。在一次系统待机的时候，我实在忍无可忍，一把抓起了板子。突然之间，电流表的读数飞快下降，降到了300uA！我松开手电流表的读数就又爬回来了。我把我这个惊奇的发现告诉了同事——一个硬件工程师。同事说可能是哪儿摸短路了，让我试试还能不能唤醒系统。我给了一个外部中断，系统神奇的正常唤醒了！        “难道这就是问题？”，我想重现一下。但是再次在待机的时候抓起电路板的时候，读数并没有显著发生变化。“可能是手法不好”，我这么想着，用手在板子上继续抚摸着。果然！当我的手指按到PCB中的某一个位置时，电流又降了下来！反复试了几次，都是这样，就是在我手指按压的这一片，只要是用手指按着，电流就正常！        这回同事开始重视了，打开PCB图，拿着电路图和万用表，查查我摸的到底是那块电路。硬件工程师觉得不可思议，因为我摸的部分并没有连接任何的电路——焊盘是空的。他于是用万用表的表笔去检查是不是PCB制版的问题，测一下这些空焊盘到底哪一个有电压。但是万用表中没有读数，这块都没有电。但是当万用表的表笔落在一处空焊盘的时候，电流表的读数又降下来了！        这可是重大发现，我们对照了一下电路图。这处空焊盘是CPU中USB-Host模块的D+信号。由于我们的产品不需要USB的主机功能，所以这一块儿没有做任何处理。多亏了画原理图和PCB的同事，多留了一手，把USB Host的引脚都在PCB上做了个引出。谁也没想到是这个引脚出现了问题，辛亏这个信号引出来了，要是没有引出来，一辈子也查不出问题。我们给D+信号加了一个下拉电阻后，系统的功耗瞬间正常了。        事后分析，三星自己开发板上有USB-Host的功能，所以USB-Host的外围电路也是完备的，所以功耗不会有问题。但是我们自己的产品上不使用USB-Host功能，没有相关外围电路，所以出了问题。这是因为在CPU休眠的时候，D+信号内部被悬空了！一句话，是三星CPU自己的BUG。我们修改了我们的PCB，增加了一个，同时将问题反馈给了三星。         一个月后，当我们的产品量产时，三星也及时的解决了这个问题。那个下拉电阻也不需要再贴上去了。         最后用手指头找到了CPU的BUG，不知道这算不算是最难调的。         反正这么多年了，这个经历留给我的印象是最深的。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",逢杠必输,评论里信誓旦旦要小护士的兄弟，你真觉得长着一张工程师脸的你能搞定么？ 木有高富帅的命，却得了高富帅的病……洗洗睡吧亲，一个成功的工程师是注孤生的……XXXXXXXXXXXXXXXXXXX 网络硬件相关现象：某医院部署的网络，不定期会有半夜断网或者不稳定情况，但天亮就会恢复，客户投诉抱怨。调试过程：现场查看全部网络硬件正常，查看log发现有一台有反复重启动作，在重启前有高温告警。于是重点关注该机器。该机器放在一个机柜中，机柜在一个小储藏间的角落里，储藏间不大，一边还摆着张破沙发，正好可以坐着用电脑调机器，但是实在查不出什么可疑情况会导致过热，因为投诉等级较高，于是连夜蹲守。第一夜无事。第二夜无事，到半夜，忽然进来个小护士，吓一跳，说，哟怎么有人啊，然后就走了。一夜无事。第三夜无事，到半夜，又来个小护士，探头看一眼走了。一夜无事。第四夜无事。于是告诉院方，发现问题马上打电话，回家。第五夜出事，赶到时已是早上，网络已经正常，查看log发现还是过热告警重启，时间在半夜3点多。联想到前几天的小护士，于是问院方半夜是否有人进入，答一些值夜班的护士会偶尔在里面休息。于是找到进去的小护士，问是否动交换机，答没有，问进去后做了些什么动作，答只是睡觉。再追问，除此之外呢？答：就是那个排风扇太吵，睡觉的时候把电源拔了。她把机柜的冷却排风扇电源拔了！她把机柜的冷却排风扇电源拔了！她把机柜的冷却排风扇电源拔了！她以为就是个通气风扇！居然睡醒走了还知道再插回去 〒_〒你有胆拔插头你倒是别插回去啊…EEEEEEEEEEE分EE割EEEEEEEEEEEEE再说一个吧。研发的一块新电路板，调试正常，往机箱里面装，装上螺丝拧好后不上电了，没有电压，确认是电源短路保护。把板子拆下来，又能用了。装上去，又不能用了。跟白鹿原里在窑洞里穿裤子一样。机箱是金属并且接地的，检查了全部连接，电源肯定木有碰到地，但是用万用表量的明明就是电源地短路，而且就是裸板能用，带机壳就短路，于是怀疑螺丝。螺丝都拧上就短路，都拆下来就正常。然后挨个拧螺丝，定位到某个螺丝。那个螺丝一拧上就短路。但是电路板正面反面都是地，螺丝本来拧上去就是为了接地用的，怎么会把电源短路了呢……这tmd不科学啊。仔细端详该螺丝孔，发现内壁有些黑，凑近闻略有焦味。心里大概有数了，一查pcb图，果然，6层电路板，内层电源层的铺铜几乎直接铺到了螺丝孔，安全距离只留了一点点。其实本来也没什么，螺丝只是固定用的，不会和螺丝孔内侧有什么触碰，好死不死的那块板子那个螺丝孔公差偏大，螺丝拧上去是没有完全对齐的，直接卡到了螺丝孔内壁……使劲一拧，就像刀一样切了进去，碰到了内层电源。所以，所有灾难，都是一连串小概率事件的巧合扎堆，搞科学，也得信命。------------------------------------------------------------------补充备注一下，这都是很多年前的事情了，以现在的技术而言，第一个case即使机柜风扇关几天都不会有问题，芯片的可靠性和工作温度范围已经有很大的改善。第二个case则是安规设计规则的低级错误问题，只要正常按照安规的规范审查，是不会有问题的。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",Alex,2017年1月17更新好像最近这个帖子又被翻出来了，又陆续有一些朋友点赞或者留下评论，谢谢大家！有一些大家共同关心的问题，我在这里做一些统一的回复，谢谢！1. 那哥们后来怎么样了？没怎么样，混的不错。去Intel继续祸害大众了，哈哈2. 同行啊，请问答主目前哪里高就现在混互联网。搞了家小公司。不写BIOS很多很多很多年了3. 300万行代码如何编译成不足8m的rom?这个问题问得很好。首先300万行的规模是整个项目的规模，里面包含有几乎所有硬件的platform code，事实上在每个特定的主板上，是要做一些裁剪的，把一些这个主板没有用到的硬件代码去掉；其次这300万行里面还包含所有的工具代码，makefile，配置文件等等等等，尤其是工具类的代码，除去编译以及连接工具，大概有几十个自行开发的工具要参与构建过程，整个BIOS的构建过程首先就是先构建这些工具，然后再用这些工具去处理配置文件，创建总的，在一步步的逐渐的去创建各个模块的makefile，最后再根据最上一级的模块配置文件来逐步的构建每一个组件。当这些组件都生成了，再根据预先配置好的FLASH的存储结构，按照相关的规范来打包成ROM文件，压缩格式是略微调整过的LZMA，按照FFS规范来进行存储我那个时候（2005年 - 2010年），编译工具用的是VS2003 + MASM；后来听说他们升级到了VS2010，貌似也可以用GCC了，好像也可以用Intel C Compiler2015年8月23更新评论里有几位朋友对于我提到的BIOS有上百万行源代码表示不可能，甚至有一位朋友提到BIOS就是个boot loader，要那么多代码干什么？我想我有必要在这里做一些简单的说明。在说明之前，我首先要申明一下由于我2010年就已经离开BIOS行业了，并且之后的日子我并没有持续的去跟踪最新的技术趋势，所以我对于目前的最新情况并不了解，事实上这个行业的知识刷新速度看起来非常快。所以我这里说的其实还是基于我当年的知识构成。首先，目前的BIOS都是基于UEFI的新一代BIOS。这类系统本身就具备十分强大的功能。完全可以视作一个小型的操作系统，有自己的shell，自己的drivers，自己的app，甚至自己的图形环境。这样的系统的代码量自然不会小。其次是因为x86系统的历史包袱非常非常严重，而bios作为最核心的系统固件承担了太多的历史兼容性的责任。举个例子，就是对于usb键盘的支持，大家可能会简单的认为，支持一个usb键盘那不是太简单的事情么？的确是这样，但是个人电脑有一个非常非常重要的原则就是兼容性。具体到键盘上，如果你现在找一个古董级的PS/2接口的键盘，然后把它接到现代的主板上，假如你的主板已经没有PS/2接口了，那么买一个转换头，然后再接上去你会发现这个古董级的硬件仍然可以使用。是的！对于我们用户而言，这是完全符合逻辑的一件事情。但是对于bios开发者而言，这就是一个很要命的问题了。原因很简单，我们暂时穿越到几十年前，那个年代的电脑主板上都有一个叫做8042的芯片，用来控制诸如键盘这样的外设，那个时代的开发者通过读写60H以及64H端口来访问键盘，然后那个时代的汇编BIOS则提供了INT 9H中断来为应用程序提供键盘服务，在几十年前那个时代，这一切是很美好的。那个时代的操作系统DOS就是这样来访问键盘的。现在让我们回到更加美好的现代，由于历史兼容性原则，所以现在的每一台计算机还必须可以安装DOS，还必须让DOS或者运行在DOS之上的应用程序可以无差别的运行在现代的计算机之上 - 可是，大家是否知道，现代的计算机压根没有8042这块芯片！更要命的是，后来人们发明了一个叫做USB的新玩意儿，基于这个新玩意儿的键盘根本不会接到60/64端口上，而且这个新接口的键盘采用的编码与过去PS/2接口的编码完全不一样！那么如果不做任何处理的情况下，那些过去年代的软件压根不会认识新的键盘，所谓的历史兼容性根本无从谈起！所以我们伟大的bios这个时候就扮演了救世主的角色了，bios会做很多处理，以现在的角度看，现代bios模拟了一个PS/2键盘：现代bios一边读取来自USB键盘的信息，一边将其转换成那些古老软件能够识别的键盘编码，然后再中断系统，写入内部的60/64端口的缓冲区。大家也许会发现，所有的现代bios里会有一个设置项，一般叫做legacy USB Support，默认值就是Enable，打开这个选项你才可以在DOS下使用usb键盘。当然，具体的实现过程异常复杂，涉及x86处理器最神秘的SMM模式，我们就不展开讲了，这已经远远超出本文的初衷。所以一句话，bios的代码非常复杂，还要包含大量的历史兼容性代码，除了我们上面谈及的键盘问题，还包括比如INT 10H的屏幕服务，据说直到Windows 7的安装程序，还有一小部分使用INT 10H来写屏。那么我们的bios就必须包含这些可能有些用户一辈子也用不上的服务。代码量刷刷的就上去了。--------------------------每次想起这个bug，虽然很多很多年了，我仍然满脸都是泪水啊！当年做x86 BIOS，客户是长城电脑。有一回我们的新版本发布给他们后进行系统重启测试，就是安装好操作系统后反复不停的重启机器，看看重启几百上千次后情况如何。原因是客户买了电脑每天用，至少得保障人家用个俩三年没事吧。结果我们的新版本重启到一百多次的时候挂了，现象就是开机黑屏，没有任何输出，就和当年的发作一模一样，经验判断系统压根还没有boot OS就跑飞了，我们自己测试也是这样，而且一旦出现问题就只能重新刷BIOS这个bug非常难调，因为当时我们的版本将近300万行源代码，大概2%的汇编与98%的C，几千个源文件，光是用来参与build过程的工具就有十几个。而且这些工具都是自己写的，构建项目的时候先编译这些工具，再去用这些工具加编译器来生成最后的ROM文件并且更加恼人的是，我们当时没有source level的debug tool，甚至连汇编级别的单步调试工具也没有，压根没法对代码做step into/over，更没法加个断点。。。当时可以用来调试BIOS的工具有两个，一个是Intel自己内部用的ITP，这个是人家公司自己的，一般不给外面人用，当时我们公司与I公司的关系尚处蜜月期，给了我们两个，但是当时被Chipset team霸占着做porting用；另一个工具就是American Arium（这家鸟公司不知道现在还活着不），这个东西说白了就是商品化的ITP，因为目标客户少，所以价格巨贵巨贵！一套系统价格几万美金，而且每一代CPU都要换一个插座上的适配器，这个适配器又是一万美金好像，还不太稳定，用着用着就挂了。。。我们公司当时有俩，但是因为没有买新一代处理器的适配器，于是只能吃灰了于是我们唯一的调试手段就是serial debug，就是系统启动的时候会通过port 80把一些重要信息打出来，然后我们根据这些信息判断执行到哪里了，系统的情况如何。这类似原始的printf打印。如果要看一个变量的值或者验证一下我们的判断，就得重新写代码，在需要的地方加入调试语句，然后花上半个小时rebuild bios，再重新烧录，再上电运行看看打出来的到底是啥。如果有疑问，或者发现这里没有问题，又或者有了新的思路，重复上述过程。记忆中整整一个礼拜，我们都在不停的看debug info，反复烧录bios 哭啊！简直不是人过的日子！最后发现系统可以成功的跑过PEI，到了DXE阶段的某个环节，突然就像心脏骤停一样，跑飞了！去看疑似跑飞的DXE Driver，是个很普通的平台硬件初始化程序，没什么疑点，压根没有头绪。那段时间，几乎每时每刻都在想着这个bug，实在是茶饭不思，根本没心情做任何事！就这样差不多过了俩礼拜，经过了无数次的重启与烧录bios，以及猜测，验证，被否定，再猜测，再验证，再否定。。。。。的过程后，我们终于发现了问题的原因：大家可能还记得电脑主板上有个CMOS，传统上用来存bios设置，但是现代的系统已经逐渐弃用这个东西。我们现在的bios芯片都是可擦写的，也就是用程序可编程。bios大小是8MB，里面会规划好，哪里是code，哪里放设置等等，然后代码里有专门写flash的函数，让大家可以保存一些东西，比如你想用硬盘还是光驱启动等等。同时系统每次启动也都会自己写一点没什么鸟用的信息进来。问题就出在这个写flash的函数上，我们后来发现，这哥们算错了存储区域的地址，导致写很多次后终于越界，误写到了人家代码区，把人家好端端的代码给写的乱七八糟，就如同当年CIH破坏系统的方法一模一样，照这样哪个机器能点亮才怪呢！又因为每次系统写的信息不一样，比如启动时间就不太一样，所以越界需要的次数不是恒定，更加重了我们排错的难度，泪啊！第一次写这么长的回答，还是手机打的，累！
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",KP LIN,"**************************************************************************************2016.8.29 咋最近这么多赞，莫非来了很多考古学家？既然这样，顺便发一个刚刚发生的真实案例，绝对真实，有血有肉！！（Debug 案例2发在原答案下方）================================================================ 原答案：(Debug 案例1)======================================================================    差不多10年前，我们做了一个ARM核的芯片，据说还是国内第一批用ARM7做的，还挺高端，带有很多安全功能，当然安全就意味着难以调试，整个系统全部打散，不能分块。俺负责前端设计，系统，硬件软件驱动等杂七杂八一堆工作。    然后芯片流出来了，封装回来，几天几夜的调试，功能都正常了，那个高兴呀，第一个芯片就成功，奖金有了！    不过做稳定性测试时候有一个问题一直困扰着，这系统总是莫名其妙的有时候启动不起来，概率有个百分之几左右。上电就是不LOAD。而一旦起来之后，就很容易了。    反正功能设计，硬件，驱动都是俺的，那就调呗，软件，硬件，电路，仿真，研究了好几天，抓狂，无解。又整个系统不能分块，我都开始怀疑是不是ARM核的问题。。     又做了一个不断重启的测试系统，不断啪啪响上电断电，针对上电的情况作了统计。得出结论就是，上午不启动的概率高，下午不启动的概率低，晚上不启动的概率高，深夜不启动的概率低。。。。。和饥饿程度快挂钩了。。。      那时候那个抓狂啊，怀疑是什么干扰的，连屏蔽房，隔离电源啥都整出来了。就是没头绪，而公司给客户演示的时间快到了，要是现场挂掉就丢脸了，心里那个急啊。那段时间，每个深夜，公司里就是我座位上啪啪啪的声音------继电器的啪啪声。      接下来一个周日测试，公司空调坏了，汗流浃背，脾气极坏，几乎就要摔板子了。不过发现这天运气非常好，成功概率很高。没头绪，直接抽上烟，看着板子发呆，不知那根神经搭错，直接把烟头对着芯片戳上去！咱第一个亲生芯片！！如果不行了就掐死它！！！结果发现怪了，戳了烟头，启动哗哗的，每次都OK。遂怀疑是或者是温度原因。拿着烙铁烫着它，每次必成。于是送进高低温箱，做温度曲线测试，发现环境温度40度以上，成功概率极高，刚好碰见今天加班没空调，平均温度高，所以表现良好。而启动起来因为系统一发热，所以后面启动就容易了，温度一凉下来表现惨不忍睹，敢情这芯片是非洲来的。      有了方向就好说，先解决DEMO，给领导好看。遂做了一个电热丝发热电路，贴在芯片上，用单稳开关控制，一上电就加热，然后不断自动啪啪啪对芯片重启，一旦芯片重启成功了就断开发热电路和重启电路。进入正常运行情况。系统搭起来一测，效果杠杠的！！！基本都能保证几秒钟内就能启动，公司上下一片赞誉。 于是，领导拿着这套带着电炉丝的系统去做报告，销售拿着这个电炉丝Demo去给客户演示，取得极好成功，老板都在准备后续的销售计划了。俺心里急啊，总不能出货产品也带着电炉丝吧。。。。       静下心好好分析，和温度有关，又是随机故障，应该很可能是哪个地方悬空，存在不定态的问题，外面的电路是不可能了，前端模拟加入随机量也不能重现，那很大可能是后端的人搞的鬼，遂拉来后端人员(暂且称为C公司)，检查扫描链和测试电路，果然发现有一个寄存器没有初始化复位。于是后面的情况就简单了，往扫描链中灌入一串数据，把未知量洗出来。成功！！！       所以我们第一代的产品，主芯片旁有一个奇怪的芯片。据线人报告，有竞争对手和盗版者都认为这是安全反盗版电路，因为拆掉这一块，系统工作就时不时的异常，抓不到规律，可能包含短时间正版验证，长时间正版验证，随机正版验证等高精尖反盗版措施。反正无法破解。。。。俺笑而不语。图样图森破。:)---------------------------------------------------至于说为什么寄存器没有初始化复位没检查出来，我也不知道，这是人家C公司做的后端，他们的软件自己加进去的电路。而据说这C公司虽然牛，但那时候后端服务还是新的，软件也是新的，刚进国内，给我们一个特惠价做白老鼠。。。=====================================================--==(Debug 案例2)======================================================--最近把家里的台式机搬到了客厅，虽然台式机和电视机都很少用了，但本着发挥余热的原则，接了一根线到电视机，于是可以了，用奇艺投放视频到电视机中，一家人一起看，效果杠杠的，俺还可以在边上显示器上一边刷知乎，各得其乐。不过呢，原来用的是天威宽带，看大网站的视频速度还行，因为天威有CDN. 但看不热门的网站，或者720p的节目，就相当的卡顿了。于是说服老婆大人，改为电信光纤，在沙发的地方放光纤猫， 因不好拉网线跨过整个客厅，于是用了一个TPLINK的多频无线路由器，通过5G WIFI连接电脑。这下载速度相当的满意。看视频也是可以选择最高清晰度的。不过呢最近都是下载蓝光大片，不看在线了，原因无他，爽。这两天，LP大人想看一些新片，于是俺用奇艺找到电影，然后打开电视机，拉到电视机中播放。LP大人很满意。 可是蹊跷的事情发生了。无论是什么电影，只要放上去几分钟，马上就卡住，然后就不能放了，网络全断，PING 路由器也出现大量的掉包率。。。。然后再也不行了，浏览器也上不了了，切换其他视频也不行了。 重启电脑偶尔能连上，也是断断续续。 但是平时上网或者在显示器看视频，又是从来不出问题。又有一天，不死心，打开浏览器，开始播放，然后暂停，然后等LP回来了投到电视准备一起看，结果看几分钟后就断网。。。又有一天，LP大人自己找了视频，看了一段，然后暂停，准备一起看，结果投到了电视，过几分钟又断网了。。。不过只用显示器看视频貌似没问题。。。。每次只要LP大人想要看视频就看不成，看着领导败兴的样子，亚历山大。。。于是查硬件，查软件，挪天线位置，切换2.4G, 5G， 似乎都没有反应。查了网络上的信息，据说这个INTEL AC-7260 无线网卡似乎确实有网络兼容性问题，貌似我还真的是MSI主板：这下中彩了，按照网上的信息修改设置也没用！据说最好的方法是换个网卡。于是向LP申请了2万块换一台一体机，未遂。于是作为一个技术宅，摆了一个亮骚的机器，却无法让LP舒服的坐在沙发上看电影，俺多年来修理水龙头遥控器电灯泡积攒的权威性日渐消失。地位一天不如一天。。。今晚不死心，又折腾了好久，重启电脑，路由器，拔掉所有外设。故障照旧。。。现象总结：1.用网线没问题。2.只用电脑上网看视频没问题。3.上网的时候家人看电视没问题。4.把电脑的视频投上电视机，刚开始几分钟没问题，接下来就几乎连不上网了。然后再怎么重启，也很难连上，连上也是断断续续的。（感觉就像家里有个幽灵，一看到我献殷勤，或者看到电视机被电脑占用就耍脾气。。。。莫非是贞子？？）突然，一动，仔细分析了的区别。发现这主要区别应该在于电视机的问题，于是开命令行一直PING路由器，同时切换电视机，发现只要电视机在显示PC内容，必然会断PING，关掉电视或者切换到别的源，就没有问题。看了应该是多屏或者输出的问题，试着修改HDMI分辨率，从720P60 改为1080P60，PING非常流畅！ ！！！俺又可以在家里当大爷啦！！问题分析：，影响到了WIFI信道，加上这个AC7260无线网卡本身设计不良，容易串入干扰。由于HDMI工作频率是根据视频信号码率决定的，通过修改分辨率，改变HDMI工作频率，使干扰谐波信号跳开了2.4G和5G信道。另外通过HDMI传输信号会有一个接口协商初始化过程，只有电视机切换到这个HDMI源，完成初始化，才会在HDMI线上有数据，这点和VGA,YPBPR等模拟信号不同。之前分析问题没有往HDMI方面想，主要是视频播放会有一个缓冲，因此，刚开电视切换到HDMI的时候，一切看起来是正常的(但此时后台网络已断)，过了几分钟缓冲读完了才停顿。因此分析问题时很难和HDMI线联系上。此问题其实做音视频类产品的项目经常遇见，由于HDMI频率高，传输长，因此很多输出源有意加重输出信号，导致EMI干扰严重，又由于很多HDMI线材质低劣，偷工减料，缺少屏蔽措施，因此HDMI接口往往成为电磁干扰的重灾区，也导致大量HDMI接口的兼容性问题(我这个破电视就挑信号源，有些1080P不显示)。因此能用YPBPR模拟线，或者能用DP接口，我都是躲开HDMI的。************************************************************************************************************************************************************************************************************************************************************************"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",熊猫王会飞的,也谈谈自己遇到的一个bug吧，我之前是做电商的，某较大的电商平台，突然有一天，C2C的店主反馈，看到的订单不是自己的，看到后台的商品列表也不是自己的当时在睡午觉，看到这个问题，立马吓醒了，平时5个投诉就是一个故障单，那还都是一点体验上的小问题，这种订单混乱，商品混乱的错误，真是要紧急死了于是，主管，总监都来看这个问题，一群大佬在后面看着，赶紧找最近几天的发布，测试情况，一个个回退，一个个检查，最后都无法解决问题，要知道时间一分一秒过去，半个小时还解决不了就要出大事了后续又有用户来投诉，直接电话联系，远程控制电脑，发现操作起来巨慢，于是顺口问了一下用户的网络是什么网络。结果他说是：“某城宽带”，一瞬间，有点感觉了，继续问其他几个投诉的客户都是“某城宽带”，然后我们打电话到那个宽带的运营商，得到的回复是“年底了，为了省流量，他们做了一部分缓存”他们做了缓存做了缓存缓存存可是为毛TM的动态请求还做缓存啊，修改商品和订单的时候，随机返回成功或者失败 。。。。＝＝＝＝＝＝＝＝＝回答下面的一些质疑＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝1.这个和时间戳也没关，我们都加了token的，他们也忽略了2.你没猜错，他们把POST和GET动态请求也缓存了，就是说你提交了一个POST修改商品的请求，他从环缓存里面随便丢个回复给用户，用户感觉修改成功了，其实请求根本没到我们这边是的，就是这么丧心病狂。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",老狼,"我印象里面最难调试的两个bugs，都和硬件有关，但最终都可以通过BIOS来打补丁。某著名公司还未上市的笔记本出了问题，在-10度的低温下经常莫名其妙死机。我作为BIOS专家，被千山万水召集到它的总部进行联合调试。在前台签署了一堆文档后，两个员工陪同我进入了一个大实验室。一进入实验室，画风突变，本来应该光洁明亮的房间，黑色的幕布从房顶垂下，将房间分割成十数个小间，像在进行敌特工作。在被引入需要工作的小间时，我要被气笑了。只见一根黑色的USB线从另一个小间连出，接在一台笔记本上。我被告知，只能在这台指定的笔记本上工作(我自己的不能用)，目标机因为机密，不能看，更不能碰！都说BIOS调试和看病一样，讲究望闻问切，但这种只在传说中给闺中小姐，悬丝诊脉的情景，却在这个号称高科技公司中演绎地活灵活现。我心中暗自盘算，该公司不是中国公司啊，为什么是个中医粉呢？看我面色不善，他们以为我受到了冒犯，解释道：“no offense, it applies to everyone, include us.”其实我是被该公司著名的保密文化震撼了。后来才知道，在幕布后面，机器上还套个假壳子，他们自己人也看不到真容。闲话休提，开始工作，于是发生了以下有趣的对话：“死机死在哪了？”“死在操作系统里。”“你知道我不能看贵公司的操作系统源码，而我是个搞BIOS的吧！”“操作系统没有变，一定是BIOS出问题了！”好吧，我又要被气笑了。硬件一定变了吧？操作系统能支持新硬件码？为什么总是BIOS背锅？！没办法，调试手段有限，只有硬看了。经过两天两夜的调试，通过重建调用栈，寄存器对比等发现，原因是连接CPU和PCH的DMI总线太长，比Intel推荐的要求长了一点点，相信是主板布线时受到些硬约束，硬件工程师觉得长一点点不碍事。就是这长的一点点，导致在低温下，信号完整性不佳，而出现错误，最终操作系统读取硬盘时报错。解决的办法是BIOS先给DMI降频，继续验证。产品版不得不再做一次FAB，多一次验证。成本增加了，上市也延迟了一点。某次主持开发一款E3主板。进度顺利，接近尾声。产品beta过后要进行压力测试，需要通过5000次soft reset，5000次，5000次Linux关机/启动，5000次Windows关机/启动，5000次UEFI Shell关机/启动。而在这个时候出了问题，在2000次左右关机/启动后，经常死在BIOS的内存初始化阶段，而且只有Windows/Linux会出现，重启和shell都是好的。事关BIOS，我当然责无旁贷，组织了个攻坚团队，包括BIOS、硬件、操作系统、BMC和ME工程师。于是每天开会，每天跟踪进度，联合诊断。事情的难点在于每次关机/启动要3到5分钟，2000次需要3天多的时间。一次改正后，反馈周期太长。我不得不安排了6台机器进行迭代测试，安排不同部分的人分别盯守。初步几天过后，分析下来是BIOS在读取spd信息时出错了。但为什么是关机/启动才出错？为什么开始不出错2000次后才出错？smbus读取代码十分简单，用过了很多代，为什么现在才出错？我仔细检查电路图，发现这代主板硬件工程师为了省事，将的线都连在了一起，让BIOS、ME和BMC都可以访问内存信息，BIOS可以读取spd，ME和BMC可以读取内存温度，多方便！smbus支持多host，硬件工程师这样做，也未尝不可。但ME、BMC和BIOS的祖传代码却缺乏相应支持，于是开会内容变成了各种争吵，事关谁该让一让的问题。最后决定大家都加上退避算法，解决总线冲突问题。由于每次尝试都要等待好几天，加上牵扯方面太多，整个问题解决下来耗时一个多月，终于在产品发布之前，软件解决了问题。为此所有人出去大肆庆贺了一番。这个bug是我职业生涯中耗时最久的bug。欢迎大家关注我的专栏和用微信扫描下方二维码加入微信公众号""UEFIBlog""，在那里有最新的文章。同时欢迎大家给本专栏和公众号投稿！"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",Happy Ennding,"刚看其他人的回答，又想起来一个。现象：很简单，有段时间学校宿舍电信的网络，经常大面积集体掉线，时间不固定，但发现最常掉线的时间是晚上10点多，各种投诉抱怨，问候学校网管家人的。（心塞呀，学校其实真的维护设备的都是我们这帮兼职的学生，那帮老师就管收钱和发钱，工资那么低，累成汪还被骂。。。）调试：白
天去看了下机房设备硬件一切正常，当时以为是认证服务器配置太low，晚上上线人太多就卡死，导致心跳包中断，集体被下线，后来发现发现虽然到5000多
人后会有部分没回应，但是客户端允许部分掉包，人再多也不至于丢包到集体下线，最后查log发现这台机架上的所有交换机到那个时候都会重启一下，于
是重点关注。机房是5号宿舍楼1楼的一间宿舍改造的，加了空调，另外从配电箱里接了不限电的电源（宿舍的电嘛，晚上会断电，还有功率限制），联通电信移动每家一个宿舍做机房，于是我在机房里蹲守。第一晚是周六，一晚无事。第二晚，到10点多一点，咔嚓一下机架上所有交换机的灯一下全灭了，过了几秒后通电，重启。诶，我什么都没做呀，我就在机柜前坐着，也没人碰机柜呀！肿么就断电重启了，然后又看了log，发现其他机柜切换到UPS电源供电了一小段时间，交换机的机柜是没UPS的，明显是断电了，但是我人在机房，没人碰设备呀怀疑是插头接触不良，换了机柜里的排插。（其实想想就不太可能，接触不了还能定时发生？）第三晚还这样，第四夜还这样，诶~神奇了，这是什么超自然现象？难道是进户线有问题了？想起电线是从隔壁联通机房进来的。于是跑联通的机房看看他们到点会有问题没？发现这边也是每到那个点，就自动切换到UPS供电。（联通给交换机也配置UPS了）怀疑是电路有问题，时不时断电。于是，第五晚守在隔壁了。。。一夜无事！！！诶？？！！！这是神马情况？然后就再也没事了，断电情况再也不出现了。。足足好了1个月。直到下个月的运行商派人来例行检查了以下设备后，又出现上述问题了。额，这是神马情况嘛！！我去两个机房看了一下，诶，又好了，电信不掉线了！抓狂了都！！完全是玄学呀这。只要我进过联通的机房一次，电信的掉线问题就能解决。。我居然还有防掉线的功能？最后只好挨个问机房隔壁的几个宿舍有没有发现在那个点机房有没有奇怪的现象。他们有人说感觉会掉线的日子里，机房不是那么吵！！然后在我努力研究调查下，终于知道事情的真相：========真相的分隔线==========机房的供电是这样的，红色的是电线，紫色的是一排插座电线是后改造的从室外的桥架上引入的明线，隔壁是电信的机房，因为进门的墙是承重墙巨厚还有钢筋，布线的时候为了省力，就只从联通这屋进了线，电线到插座高度后，打洞到隔壁。联通机房隔壁宿舍的嫌睡觉时机架散热风扇太吵，就用偷偷用卡把门捅开（那种A级锁，很好撬的），睡前就偷偷把机柜的风扇电源拔了，早上再偷偷插上。。因为机
房有空调，拔了也没导致设备过热。但是。。。插机柜风扇的那个插座是进户第一个插座，就是那个孔的位置，他拔插时插头会带动插座，导致里边没接好的电线在
连接处断开一下。为什么周五周六有时没事，因为他们可能周末集体出去了，晚上不在宿舍没人拔插头！为什么是10点多，因为快睡觉了，才去拔插头。为什么其他时间不定时，因为他们不一定什么时候想起来插回去。为什么我进去一次就没事，因为我出机房后，会用钥匙反锁门，他们捅不开了，而其他人出来不反锁，只是关门，他们能捅开。其实现在回想，最诡异的就是，我第一次蹲在联通机房的那一晚（第五晚）他没来撬门拔插头，不然也不至于追查这么久。又想起来一个：【关于锐捷和交换机的事】学校某一天开始，大量用户正常上网情况下突然掉线，再次拨号时认证停顿在“寻找认证服务器”，之后提示框显示“认证失败”。但是有人发现失败后，“禁用”、“启用”网卡后，多次尝试锐捷拨号能够成功认证，但是在上网几分钟后会再次掉线。锐捷的认证过程就不写了，看这个个问题的估计都大概知道。先考虑，锐捷认证服务器故障，看了下，CPU占用率60%左右波动，内存占用2G左右。（这渣渣服务器啊。。占用这么高也是醉了）ＲＧ－ＳＭＰ正常，加密狗也没问题。看来服务器没事。那估计就是网络环境故障，看了下核心交换机到认证服务器之间的网，物理连接没问题，流量看起来也挺正常。那估计就是核心交换机和用户终端交换机的问题。然后发现，核心交换机到物理选课平台的服务器间最高峰时一秒快3万的封包。。。这肿么可能嘛，结果联系了那边，到服务器上一看，恩，服务器被人拿下了，被放了好几个成人和赌博网站在上边，还发现有挖流量矿的代码，还被拿来D别人，还被放了个SMTP服务器在发垃圾邮件。里边的学生个人信息被下载都不算事了。断开与他们的链接后，CPU负载降低，但是认证还是失败。继续查，发现另一个到行政楼的接口流量也很高，大约每秒1.5W的封包show arp一下查看，发现一堆arp未完成报文，在Incomplete状态在ＩＰ地址无法找到其对应的ＭＡＣ地址时进行转发，占用了交换机内缓存表。于是猜，要么中毒，要么出现环线，然后就查呀查，发现基础交换机上WLAN102、103流量异常，那就继续查呗，最后发现，某逗比做了这么一件事。这个基础交换机是直接给这层供网的，大办公室留两个口，小办公室一个口，他们自己用交换机再分。学校机构调整，部分办公室从新分配了，本来有个大办公室是，两个部门同时用的，他们每个部门自己各占用了一个接口用。后来换给另一个大部门了，他们搬家时，看到有两个接口，于是把这两个同时插到自己的集线器（居然连交换机都不是）上。始作俑者还特肯定的和我说，这样可以加快网速，可以有双倍的带宽。我和他说这样不行，他还不行，非说我不懂电脑了，他是在XX之家看到的，还说之前办公室里就这么接，就没事，网速还快了。（后来发现，他原来办公室其中一个接口，交换机端的插头松了，插了等于没插，网速什么的，只能说是心理作用了）什么时候集线器能当路由器用了。。什么时候，带负载均衡的双WAN口路由器，只卖20块钱了。。想多玩起码你也要设置下吧，直接插有个毛用。。不怕遇到小白用户，就怕遇到半懂不懂还装懂的。。"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",匿名用户,分享刚看到的一则新闻——如果有人在这个端口插上一根网线，在不知情的情况下就会按下复位键，他们甚至没有意识到整个网络已经因此瘫痪。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",路云飞,最难调的是在菊花厂做分布式数据库Taurus，遇到的数据不一致的bug.为什么说难调呢？1.从发现bug 到最终解决耗时一个月，当时项目已经马上要发版本，所以期间每天搞到12点。2.耗人力，累计投入1个专职测试，最高峰时期有一个10人的攻关小组，这很菊花厂:-)，其中一半以上的都是senior developer，一个价值上百万的bug。从技术上来说难度主要体现在1. 系统复杂，涉及到上百万行代码，系统分布式部署2. Bug 难重现，并且没有规律3. 系统代码复杂度较高，涉及数据库事物核心代码。吹水结束，下面是技术干货测数据库一致性的用例一般用转账的例子，例如A给B转10块钱，那就需要把A的账户余额减10，再给B的账户余额+10，然后再判断一下A和B总的账户余额不变。当然你也可以扩展到多个表，但是基本原理类似。我们的测试是用TPCC，所以一致性使用的是TPCC的业务模型，模拟往TPCC的warehouse之间出货，然后查库存是否一致。为了尽量模拟用户的真实使用场景，当然得导入大量的数据，加大并发，中间还会故意模拟各种故障。 所谓的各种故障，说白了也无非是杀进程，下电，模拟磁盘故障，因为Taurus又是一个分布式的数据库，网络故障必不可少，模拟网络抖动，丢包，网络割裂。不过，出现数据不一致的场景反而没那么复杂，就是导入300G基础数据，然后起大量并发在上面跑TPCC测试用例，跑个3，4个小时，一致性检查语句就能发现数据不一致。（想想挺后怕，要是这个bug是由各种故障的注入导致的，定位的工作量估计又要翻倍）最开始接手这个问题的时候，首先当然是看测试测的对不对了，因为之前也乌龙过几次，测试一开始导入的数据就有部分不成功，导致一致性检查一开始就没通过 :(。确认问题后，就开始定位。首先我们想的是找到重现条件，好吧，那就开测吧，搭个环境，导个数据，1天下来也是能够重现一次的。那不一致的日志有没有什么特征呢？插入的数据有上千万条，每次测试出来的不一样的记录，连不一样的表都不重样。那日志里有没有啥异常？日志全开，还好跑几个小时也就几G的日志，大菊花厂的硬件还是舍得花钱的，都是300G内存的机器，mount一块来放日志，grep查出来的warning，error看的眼睛疼。那只能从读写流程来定位了。这里需要首先交代一下Taurus的背景。Taurus是一个基于MySQL改的计算和存储分裂的分布式数据库，计算层支持1写多读，存储层通过raft协议来同步。那写入的流程就涉及到：说了这么多，最想说的其实就是，这个流程中任何一个步骤出差都可能会导致数据不一致，我们的想法是，首先要定位到在上面的整个流程中，是哪一个处理流程出错了。我们的办法是按流程倒着排查。我们根据出错的记录，找到记录所在的page，把都出来的page dump出来，然后和磁盘上的数据做对比。除了page头的数据，其他一样，ok，那可以排除计算节点读到的数据和写入的数据不一致。我们对raft同步的数据做了很多优化，其中之一就是raft同步的数据做了batch，然后我们开发了一个raft日志的解析工具，把raft日志解开，打印成可读的文本方便分析。然后还真通过这个工具发现raft日志里面的redo日志不连续，我们很开心，觉得问题已经定位的差不多了，但是raft那块代码是相当稳定的，因为我们团队在积累了好几年的经验，在cockroach db和etcd社区有5，6个committer，并且，raft出错好歹也会在leader频繁切换，磁盘故障或者网络丢包严重的情况下，测试场景一切都正常，当我们回过头再来看我们的raft日志分析工具，发现对应的分析工具正好有几个我们添加的redo日志类型没有解析到，并且没解析到日志也没报错。。。这个时候，时间已经过去了2周。无奈之下我们只好去北京，找当初写块代码的兄弟一起来攻关。这里顺便吐槽一下菊花厂的开发模式，经常是一群人做了一个原型，然后丢给另一群人做产品，然后可能最后会丢给其它的团队来做维护，同一个项目团队成员流动太大。果然还是亲爹靠谱，直接就说了一个他觉得可能性最大的地方，然后这哥们就回去啃代码去了。。。这里交代一下背景，MySQL本身有一个mvcc机制来实现多版本管理，在我们的实现中计算层的只读节点是按页面来请求数据的，为了满足不同的事务请求请求同一个页面在不同时刻的数据，我们在存储层实现了一个多版本的page管理机制，会根据读page请求的版本号，来返回一个特定版本的page给用户。问题就在“请求特定版本的page”这里，如果计算层请求的page版本是一个老版本的page，那后面的update是会基于这个老版本的page来做修改的，举个例子：比如存储层的page版本是10，上面有2条记录，记录了插入的2条数据，但是计算层读到的是版本为9的page，版本为9的page没有在事务10插入的2条数据，这个时候事务11为page插入另外2条数据，生成的redo刚好就覆盖了事务10增加的那2条数据，这个和innodb的page机制有关，插入数据的时候会从空闲空间那个offset往后写数据。对应到我们的一致性检查就会看到转账的时候，只看到A扣钱，B的余额没有增加。那我们的想法是先通过测试来验证是这个问题。但是重现一次需要半天时间，我们想到的是尽量构建重现的条件：结果20分钟就重现了这个问题，一下子把定位的问题从上百万行代码缩小到我们写的1w行代码。这个时候时间已经过去了3周，后面我们花了1周时间改了2行代码，修复了bug，并通过验证。导致出现bug的原因很简单，计算层在把redo日志提交给存储层做持久化的时候使用了异步和pipeline的方式通讯，在异步处理里面，我们保护redo日志提交的锁释放晚了，导致读线程还是拿老的事务号去读page，从而读到了老的page，从而导致修改的时候基于老的page修改。首先想到的肯定是把重现的用例增加到自动化的测试用例集中，在每次发布代码前都需要校验。增加测试用例，模拟各种极端情况，例如基于jepson模拟各种网络和节点故障。除此之外，我们还在代码中增加了几个检查点，例如在每次替换页面的时候保存页面的来校验读上来的页面是否是写下去的页面。当然这个开关只在内部测试版本中才会打开。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",Tim Chen,以前做windows技术支持，一直调试crash dump。就我个人的体验，有关线程安全的dump是最难调试的，来无影去无踪，看到的就是一坨已经被破坏的现场（dump），然后你需要在大脑中还原案发经过。有一天香港某大公司（名字不透露了）上了一个case，他们自己的一个应用在生产环境中会莫名奇妙地crash。当时我就想：你自己应用crash找我们干什么，肯定是你自己代码问题，而你还不给我看你的代码！所以几个难点：第一，没有客户代码。第二：客户用的系统是NT4！NT4什么概念？就是没有pdb文件的，符号文件只能对应到函数入口，对应不到具体的源代码行号。你只能把整个函数的汇编都读懂才能知道crash的地点是在做什么事。第三：只有dump，不可能设断点调式，因为根本不知道如何重现。反正就这么读了几百上千行的汇编（此处省略两千字），最后定位crash的地点，能看到进到EnterCriticalSection的api之后发现这个CRITICAL_SECTION结构其实已经坏了，然后就挂了。从heap结构可以看出似乎那个heap block已经被用作它用了，所以有可能那个CRITICAL_SECTION已经被delete了。然后看谁管理这个CRITICAL_SECTION的， 发现是msvcrt，还是VC5的。好吧去找代码，还好那个代码是找得到的。然后就把所以处理这个CRITICAL_SECTION的代码全部找出来，把所有代码在不同线程中的不同执行顺序都排列出来，最后发现在某一个特殊的执行次序下会有一个race condition，导致这个CRITICAL_SECTION会被过早delete掉。还好一开始就怀疑是线程安全问题，入手方向没错。好吧，最后居然是vc runtime的bug。当初错怪客户了。调完这个bug的副作用就是之后看到汇编就想吐。看看现在c#的调试那根本不是事。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",王泽,怒答！！答主不如楼上这些硬件大牛，乃软件狗一只，去年做 Android 开发的时候遇到一个极其搞笑的 BUG ，自我感觉有必要说出来让大家开心开心。当时我们在做 Egret Runtime 的第一个版本，可以理解为他就是一个 Android GLSurfaceView 渲染器。当我从开发工程师手中拿到第一个新鲜出炉热乎的开发版的时候，我发现一个现象，就是游戏整个 App 会不时崩溃掉，crash日志大概描述的是 C++ 挂掉了，当时我由于经验不足，还不会根据 C++ 的 dumpstack 去检查是哪个模块的问题。所以我决定先尝试重现一下这个问题。重现步骤：1、把手机放在桌子上，打开 App，观察5分钟，未崩溃2、5分钟的时候接了个电话，接完后 App 崩溃3、意识到可能是 Android 生命周期问题导致的，于是重新打开 App，反复在前台 / 后台切换，未崩溃4、由于长时间弯腰盯着桌子上的手机，有些不舒服，于是把手机拿起来，想舒服的后仰坐在工位上继续重现，然后在把手机拿起来的一瞬间，崩溃。5、吓一跳之后，小心翼翼的重新打开 App，思索自己刚才到底做了什么，同时紧握着手中的手机继续盯着屏幕，观察5分钟，未崩溃6、心情暴躁，把手机扔到桌子上，崩溃7、惊愕......8、重新把手机拿起来，再次扔到桌子上，崩溃9、给开发的同事讲，我重现出了这个BUG，只要用力把手机往桌子上砸一下，就会崩溃10、开发同事匪夷所思的表示没有调用过陀螺仪之类的 API，只是个简单的渲染。11、现场演示狠狠的砸了一下我的手机，崩溃重现12、开发同事狠狠的砸了一下他自己的测试机，未重现，于是拿过来我的手机，进行真机调试（ 每次调试就要砸一下我的手机....请自行脑补我的表情）13、最后发现，原来是当手机被狠狠砸一下的时候，屏幕旋转方向发生了改变，然后触发了 OpenGL 底层渲染的问题没有 Handle 住 ...... 14、用3分钟修复了此问题，然后对着被砸了20多次的手机泪流满面.....
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",邪正人鬼,如果有（内行的）人故意和工程师做对的话，他弄出来的BUG或许会是最难调的BUG……以下全文转载EtherDream的博客的一篇文章（感谢评论区指出原出处，原作者若认为侵权可私信我删除），虽然是以破坏分子的视角来写的，不过各位可以脑补一下维修人员的心情是怎么样的……刚上大学没多久，就遇到件头疼事。富二代们刚来就带着笔记本电脑，这让咱们只能玩手机的屌丝辈们羡慕嫉妒恨。要命的事来了，晚上断电不断网，于是熄灯后笔记本仍然可以玩。不巧的是，我们寝室也有个。常常熄灯后，非得把电池用干净才罢休。边游戏边语音，还放着音乐，备受煎熬。虽经劝说有所好改，但过不了几天又会复原。为了迫切改变这个状况，但又不想和新认识的同学扯，于是决定用技术方案解决。可当时的家当只有一部，没有装备一切都是空谈。唯一可行的，只有偷偷在他电脑里设置个计划任务，晚上自动关机。但那样万一发现了更不好，根本没有技术含量。无奈，只能把目光转移到电脑之外，网络上。如果不能上网，就算电脑能用，也不至于熬夜玩单机游戏吧。既然刚来时他的网线插口就能用，想必我这儿的也有信号。上一届的肯定都开通过，总不至于走了以后还封掉。趁着有天寝室没人，我把那笔记本的网线拖到我这边一试，果然，信号！顿时来了精神，感觉有希望了！也许你会说，总不可能把网线连到诺基亚上，然后用什么恶搞软件吧~ 当然不可能，那时的手机哪有这么先进。事实上，我们不用任何软！件！，甚至可以不用硬！件！ —— 除了一根网线之外。要说如何玩转网线，还能从之前安装机顶盒的那天说起。曾有段时间，很多城市开始流行起数字电视。我们这也不例外，挨家挨户的赠送机顶盒，还免费上门安装。华数电视本来就和网通是一家，数字电视当然就是共享网通的宽带了。由于之前已开通了网通，这次又要给机顶盒连网，我想至少得送个交换机才行吧。然而，安装的师傅一进来，既没掏出交换机、甚至连集线器也没有，反而一剪刀把网线给割了！当时就惊呆了，这究竟是搞哪门子鬼。尽管那时对网络链路协议玩的挺嗨的，但物理层上的却是一窍不通。那师傅不慌不忙的说，网线只要四个就够了，还有些就是备用的。于是从之前的线里，拆了四根给机顶盒。这大出之前所料，居然没用任何设备就把机顶盒接上了！于是，又开始异想天开了。。。这分出来的两股，在交换机来看是不是两个独立用户？如果把他们接在一起，效果和一线插两口相同吗？能一样短路局域网吗？怀着兴奋的心情一测，果然可以！真把整个小区的网络搞挂了！在恢复之后很长段时间里，一直拨不上号。在嗅探器里发现好多邻居们的也在不断的拨号。显然，刚刚那接通两个4股线，把外部的STP包也转发了，导致小区网络被外部隔离了。这一天，改变了之前的看法。原来只需一根网线，就可以来一次VLAN风暴！为什么一根网线插交换机的两个口会产生风暴？因为交换机会把发往广播地址的包，转发到所有接口上。如果有两个接口回路了，一旦出现，就会彼此不断循环发送，耗尽整个设备的带宽。别小看交换机，它天生就是为发包设计的，风暴能把每个接口都占满，打出背板带宽的流量。STP协议就是为了解决这个问题，进行回路检测。尽管了解了这个新技能，但物理层的知识基本派不上用场，也就淡忘了 —— 直到发现寝室座位下有信号的那天。根据回忆，寝室之间还打过局域网游戏，显然这不是独立的网段，于是更加信心满满了！立即找来一根网线，减掉一边的水晶头，刮掉外皮，然后把对应的四股两两粘上。果然，附近的寝室开始传来 —— 不，先是寂静了几秒，接着陆续传来的尖叫声，吼声。“卡了！”，“谁掉了？“，什么情况？”，“靠，断网了~~~”。。。跑出走廊一看，整栋楼都暴动了！原来这寝室楼根本就没划VLAN，所有几百号寝室都是连在一起的！！！这时既兴奋又担心。兴奋的是，以后有了电脑可以抓上千人的流量了。担心的是，现在只想恶搞自己寝室，不想牵扯所有人。不管怎样，行动还是继续。熄灯后本该休息，断了所有的也没什么不好。这时技术上已无大碍，就差实施了。如何从容而又隐蔽的操作呢？为了不暴露没电脑还插着根网线那么荒唐，于是尽量沿着有遮挡的柜子布线，从衣柜后一直拖到床铺。剩下的水平部分就埋在床边的缝隙里，并用席子盖着。整个布局不凑近仔细看，根本发现不了~当晚熄灯后，夜猫子们又开始蠢蠢欲动了，我也迫不及待的开始试验。和其他几个同学一样，假装在玩手机，实际已开始悄悄的接线，颇有地下情报员的感觉。当搭上最后一股时，流畅的游戏声立即出现了卡顿。毕竟整栋楼都在这个LAN里，广播包的数量是相当多的。只听得游戏剩背景音乐，却没有音效了！想着100Mbps的流量从手中捏着的网线穿过，仿佛看见密密麻麻的ARP、NetBIOS广播在黑暗中闪过 —— 还有那少得可怜的、被挤掉的游戏数据包。下午的骚动又一次爆发了。尽管熄灯后少得多，但在夜晚的环境里，显然越发清晰。被断开的大多不甘心，还想继续玩。这一次，不打算这么暴力了，万一触发了回路检测，说不定整楼就被封了。于是，改成搭上几秒，断开。再搭上、断开。。。游戏虽能运行，但不断陷于卡顿之中。没多久，传来一阵阵温馨的关机声，纷纷洗洗睡了。首战告捷！终于睡了个好觉。刚开始的几天里，效果非常理想，大家都乖乖的提前睡觉了。不过没多久他们就发现，网络过会就会恢复的。原因很简单，哥睡着前就把线放开了，于是他们又开始了疯狂。在迷迷糊糊睡梦中，要把网线重新搭上会困难的多。经常把不相干的也缠在了一起，结果就没效果了。于是，需要一次用户体验上的改进。事实上，其中三股线都是事先粘好的，实际就控制一股而已。不如把那三股都提前隐藏起来，只留一股在身旁，这样就不会搭错了。换了根网线重新制作。这次，直接把其中 3 股用胶布粘好，藏在衣柜后面，只留一股拖上来。线路也细了不少。这样，就和电路开关一样了。总共就两根线，搭上或分开就行。即使在睡梦中，也只需动动手指，就能轻松自如的控制整楼的网络了！不过这么简陋的设备，总会有操作失误的时候。在一个周末的半夜，被通宵的吵醒后，狠狠的搭上了网线，然后继续睡。没想到这一次太困，直接沉睡了过去。直到早上10点多，才被敲门声惊醒。原以为是隔壁同学，但敲门不断，打开后发现进来一个背着工具包的大叔。这时，才猛然意识到，搭着的网线忘了断开了！！！整整断了一晚，都查上门来了！这时也来不及收拾了，心想这回终于要露陷了。不过那师傅一眼扫去，发现我们桌子上都是干干净净的，啥也没有。唯独敞着个笔记本，而且还没关机。于是上前拔掉了网线，然后走了。侥幸躲过了这一劫，迫切需要改进了。如果能睡前开启，睡着后自动关闭，那就十分理想了。再也不用睡梦中用意念去断开了。于是打算做一个有弹性的开关，必须按着才会开启，松开就关闭。这样睡着后身体放松就自动断开了。经过一番改进，把开关做得无比隐蔽：把两根线塞到一个袜子里，里面塞了棉布等等有弹性的东西。正常情况线路是分开的，但轻轻往下压就会搭住，放开后又恢复正常。不过袜子捏手里也怪怪的，于是就藏到脚后头。至此，每当夜晚吵闹时，只要脚趾头稍稍踮一下，周围的气氛就立即变得格外安静。到此，总共花了两块钱打造的装备，能让脚趾来控制上千人的网络状态，简直太有成就感了：）没多久，大家似乎发现了规律，只要声音太响网就会卡，但无奈又找不到原因。于是都变得乖乖的安静上网了。（每次回想起就特别搞笑）当然，这装置只投入使用了半年。第二个学期大家都装了电脑，于是一起愉快的通宵上网了。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",SCADAer,歪个楼，说个SCADA工程投产的关键时刻突发的bug，论技术含量，它无疑是最low的，但绝对够刺激。N年前的一天，晚10点，甘肃戈壁滩上的某处工艺站场，现场一片忙碌，根据工艺人员的测算，工艺介质还有半个小时就要进站了，介质进站就表示站场正式投入运行。我和我们部门经理，作为站场核心控制系统——SCADA系统的集成商，2人蹲守在站控室的主控电脑前，做好了72小时保投产的准备。随着时间一点点逼近，控制室的气氛越来越凝重，对讲机里丝丝拉拉的呼叫声、调度电话的铃声，此起彼伏，我和经理也一脸严肃地坐在站控台旁，内心既轻松又紧张，经过一个多月的紧张安装与调试，站控SCADA系统早已准备就位，该忙活的都忙活完了，剩下的就看它的了！10点05分，报警器突然传出沉闷的报警声，三条报警出现在SCADA软件的监控屏幕上，三条报警都指向同一个设备，我快速浏览了一下控制流程图，其它设备一切正常，单只这台设备的状态出现了变化，我的第一反应是，又是哪个傻逼在现场乱动设备了。这套站控SCADA系统是由我亲手组态安装的，每一个信号回路、每一个信号、每一个控制命令，我都亲自测量调试过，我敢保证系统里显示的所有数据，一定是对现场工况的真实反映，所有的数据和操作，一定是准确可靠的。我猜测，这台状态发生扭转的设备，肯定是现场人员手动操作的结果，没有调度令瞎特么动，找骂呢，也不看看现在是什么时候，我还幸灾乐祸呢。10秒钟不到，几千公里之外的控制中心的调度电话就打过来了，什么情况？报告原因？离设备最近的工作人员迅速赶过去，用对讲机汇报了检查结果：设备一切正常，没人动它，现场指示一切正常！现场指示一切正常，我心里咯噔一下，不会吧，设备没问题，那就是SCADA系统有问题呀，数据错误那可是重大失责，极有可能导致生产事故的，这可不是闹着玩的。腾的一下我就站起来了，抓起防爆对讲机就向200米开外的工艺区冲去，我必须亲自确认一遍设备状态，果然，机械指示没问题，电子指示也没问题，各种装置也在原来的位置上，没错，设备没问题，完了完了，回去查系统吧。我以最快速度飞奔回站控室，一头扎进机房，迅速检查了一遍上、下位机的数据，PLC、实时数据库、HMI三者数据一致，数据流正确，系统没问题呀，我在脑子里头快速过了一遍数据流程，究竟是哪个环节出问题了呢？PLC程序中设备的控制逻辑是按模块封装的，要出错早就该出错了，不会拖到现在，即使真出错了，也得是现场几十个同类设备一块出错呀，单是一台设备出问题，肯定不是PLC程序的问题，排除。实时数据库出错的可能性也不大，数据点在数据库中是哈希分布的，不存在逻辑关联，同一设备的所有数据点同时出现错误的概率太小了，我还不至于点背到这个程度，再者说，实时库中的数值与PLC是一致的，说明数据采集程序运转也是正常的，排除。HMI显示的都是实时库发布的数据，我手动修改了几个故障数据点，HMI立马跟着变化，数据发布和显示功能也正常，排除。上位机和下位机都排除了，剩下的就是PLC IO模板及其之后的环节了，先排除IO模板吧，短接测试最简单有效，半分钟之后得出结论，IO模板也没问题，排除。问题肯定出在现场设备与机柜之间的信号回路上，没得跑了。我咽了口唾沫，转身抄起了万用表，在PLC机柜缜密排列、密密匝匝的电缆与信号线中，找到该设备的所有输入回路，逐一量过，果然，信号回路的电流电压与现场设备的状态严重不符，与HMI显示的错误结果一致，问题找到了，电缆传过来的信号乱套了。不会是信号电缆断了吧，这是我脑子里闪过的第一个念头，现场设备与机柜之间的所有线路我都亲手调校过，每一台设备我都开盖测试确保接线规范牢固，单体调试和逻辑联动也是反复做了很多次，这些基本功课我做的一丝不苟，完全可以排除掉接线错误、接线自动脱落等低级错误，出问题的是台进口设备，这类设备之前的表现一直很稳定，信号源出错的可能性貌似不大，现在摆在面前的唯一的可能就是，这条电缆现在断了，或者它曾经断过，后被施工人员只是草草地焊接上了，现在脱焊了。按照施工规范，信号电缆是不允许出现断点的，然而，献礼赶进度，难免出现加班施工、违规操作的情况，哪个土方施工队开着推土机，冷不丁来上一铲子，干断几根电缆的事情也是不可避免的，毕竟从控制室与设备之间有好几百米的距离，中间隔着很多地面施工点。（电信机房的光缆都会被人挖断，更何况繁忙的施工现场敷设的电缆，每次想到献礼我就蛋疼）一种不详的预感向我袭来，要真是焊接的电缆，哪我就太TM倒霉了，电缆敷设和仪表安装的活也是我们公司干的呀，尽管不是我的工作，但他们挖的坑埋的雷，最后都得由我们来拆包填坑，而且还特么是在这种关键的时刻，一万头草泥马从我耳边呼啸而过，我不敢往下细想了，一股凉气从后脊梁一路串到头顶。经理赶过来了，见我正举着万用表，看着机柜发呆，还以为我吓傻了呢，一把抢过万用表就要亲自上阵，他是赶过来保投产的，未参与前期调试，他以为是我的信号回路接线有问题呢，我拦住他，把情况跟他一说，他也傻了，这种狗血的事情，他之前遇到过。经理赶紧把在站控室外待命的仪表安装负责人叫了进来，瞪红了眼，指着电缆问道，老张（化名），这根缆被人弄断过，你们给偷摸焊上了，是不是，你跟我说实话。老张憋红了脸，拍着胸脯保证，这根缆绝对是一条完整的电缆，没出过任何问题，无论我们怎么逼问，老张都一口咬定，电缆绝对没问题。我和经理看老张说的这么决绝，姑且相信了他，这种时候，谅他也不敢死扛。可是电缆没问题，设备也没问题，那会是什么问题呢，我抬头看了一眼时间，10点19。冷静，冷静，我擦了擦鼻子上的冷汗，走到机房的小窗口，漫无目的地扫射了一遍厂区，夜色中，几十台相同型号的设备散布在工艺区的各个角落，深蓝色的电子屏如群兽的眼睛，透着幽兰的光芒，死死地盯着我，那台故障的设备就蹲在巨大厂房的阴影之中，眼睛忽明忽暗地眨巴着，仿佛在嘲笑着试图驯服它的主人。我突然一个机灵，不对劲，亮度不对劲，其它设备电子屏的亮度是固定不变的，很少出现闪烁，只有这台故障设备的电子屏，如般轻微跳动，在夜晚黑色的背景下，越来越刺眼。电压波动，肯定是380伏动力电网的电压波动，导致设备的主电路版出现了故障，我拆过这种设备，它采用的是独立的显示模块，尽管显示模块与IO模块是隔离的，但电子屏都出现了画面抖动，IO模块也不会好到哪里去。我转身正要往控制室跑，这才发现，站场的主要负责人已经把经理给围住了，经理憋红了脸，应对着各种质询与责难，我赶紧上前，把我的发现与想法告诉了他们，他们半信半疑，这种进口设备，项目上用了这么多，从未出现过这种问题，你确定是设备的问题不是你们的问题，信与不信已经不重要了，不试怎么知道，时间不等人，赶紧请示控制中心，要求重启设备，控制中心回复：现场自行决定。还决定个屁呀，我抹头就往厂区跑，把这帮人甩在了身后，开闸，断电，等待10秒，合闸，上电，报警自动恢复，数据显示正常。10点28，故障终于解除了，憋在胸口的一口闷气，终于可以吐出来了。控制工程和软件工程一样，都是系统工程，一环扣一环，一层叠一层，系统越复杂风险越大，系统工程出现的问题，绝大部分都是多米诺骨牌效应造成的，小故障导致大事故。多米诺骨牌的触发和传导过程是外显的，小牌推大牌，傻子都能一眼看出问题的端倪，但系统工程是隐蔽性工程，系统内部的结构不是显现的，问题的发生与传导也是不可见的，当故障发生时，大家看到的是倒下去的最后一张牌，看不见故障的源头，也看不清坍塌的全过程，这也是为什么工程师爱说「不是我的问题」的原因，很多错可能真的不是他们造成的。愚蠢的管理者，会责怪倒下去的最后一张牌，聪明的管理者，认为每一张牌都有作案的嫌疑。当你被怀疑时，能做的就是自证清白，往下深挖，如果你自己的功课一团糟糕，又没本事找出推倒你的上一张牌，那么很不幸，你就成了那口黑锅，only you。很多时候，工程师什么都爱学一点，并不一定是求知欲太强烈，或许他只是想看清楚，站在我身后的，究竟是些什么鬼。----------------------------------------------相关话题：
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",PaintDream,"远远算不上最难，但是很有意思。来自我的知乎专栏文章。背景，我给饥荒游戏写了一个LuaJIT PATCH，替换掉了原有的LUA引擎以解决卡顿的问题。在编写过程中解决了很多BUG，全文很长长长长长长，下面这个是比较有意思的，就节选出来了。完整的部分请点击下面的文章链接。此PATCH源码及下载在GITHUB有：===================================================作者：paintsnow链接：来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。新的版本持续用了很久，新的BUG反馈与很少了，而且基本上都是已经使用了旧的patch或者自己不会按要求改代码导致的。安逸的日子一直持续到有用户开始报告说：陷阱类物品使用鼠标点击后捕捉到的动物消失，并且物品的耐久没有减少。这看起来很难理解，这个bug是如此的精致，精致到不像是脚本引擎更换时引起的bug，反而更像是lua代码本身的bug。若是PATCH引起的bug，为什么游戏中的其他逻辑能精确地运行，唯独陷阱不行呢？这是怎么做到的呢？为此我打开游戏（启用PATCH），建了个新档，用控制台刷出一个捕鸟器和一只海盗鹦鹉。拾取后果然鹦鹉没了，捕鸟器耐久也没掉。那么，问题出在哪里呢？通过仔细比对启用PATCH前后的画面，发现一件怪事：（启用前）（启用后）所以问题应该是出在原本应该是Check的操作变成了Pick up，导致玩家捡起了捕鸟器而不是收获捕到的鸟。但是如果使用空格捡的话，则会正确地执行Check操作。接下来目标就很明确了：这个Pick up是哪里来的？通过检索lua源码中""Pick up""，可以发现在strings.lua中有其定义：再看看哪些地方引用了STRINGS.ACTIONS.PICKUP这个值，并没有找到，再找ACTIONS.PICKUP，发现一处有价值的线索：也就是说，所有操作都是通过构造一个BufferedAction来封装的，从名字上来看既然是Buffered，应该会有一个队列之类的来存储Actions，继续找""BufferedAction""可以发现在scripts/components/playeractionpicker.lua里有些奇怪的东西：仔细看了半天，这里似乎是一个比较关键的地方。所有的BufferedAction在这里通过table.sort按priority排了个序。我猜想游戏逻辑应该是先收集各种可选的操作选项，然后把操作们按优先级排个序，顶端的即为优胜者，将会被选作默认的操作（亲，你直接选个最大值不就得了吗）。因此，要么是排序前的actions有已经有问题了，要么是排序本身出的问题。通过这里我们应该可以缩小检查的范围。为了验证我的想法，在SortSceneActions里写点LOG。看看好不好玩：在排序前后我都把actions数组中的值打印出来，看看这个排序做了什么：（启用PATCH前）（启用PATCH后）注意看图中蓝框的部分，排序后的结果果然变成PICKUP第一了。于是一个直接的想法就是，饥荒作者并不知道table.sort排序是不稳定的，LuaJIT中的快排算法很可能和原版的不一样，在最大元素不唯一的情况下，二者的结果就会有差异！！于是我打开actions.lua，一切都似乎明白了：非常明显，PICKUP和CHECKTRAP的优先级都是2，那么排序就有可能出现PICKUP在CHECKTRAP前面的情况。想要解决也很容易，把CHECKTRAP的优先级调大些（如2.5），就好了。事实证明调整后，bug也确实消失了。然而问题就到这里完结了吗？这个bug的神奇之处在于，并不仅仅如此。在发布了修补办法之后，吧友表示问题解决了，但是还有其他的类似问题，比如船只不能Inspect，MOD人物翼语的莲花台不能右键拾取，烤箱MOD异常等等。确实，这些都是原版饥荒Actions优先级设置导致的，那么有两种可能：1. 作者们修改了排序算法，使之变成稳定的（如冒泡排序），所以在优先级相同的时候，原序列中排前面的排序后也排前面。2. 作者们压根就不知道快排还有不稳定一说，出现结果异常的时候就调调优先级，结果要是符合预期，就不管了。lua5.1.4中快排实现和LuaJIT中不一样导致了这个问题。最初我以为是1的问题，于是手写了个稳定排序，挂入后果然解决了陷阱的问题（即使优先级都是2）。但是其余的bug不能都解决，此路不通。那么如果按2来说，快排实现不一样，那么我换一个lua5.1.4原版的DLL试试呢？于是我把lua51.dll改名成luajit.dll，运行游戏，果然一切正常。看来就是排序算法的问题了。于是我打开lua5.1.4的源码，对比luajit的源码，却发现了神奇的事情：排序算法除了报错部分有点区别以外，竟然是一模一样！！那这个就奇怪了，排序算法也是一样的，为什么结果不一样呢？我漏掉了什么东西吗？再仔细检查这两张图，终于发现了问题所在：（启用PATCH前）（启用PATCH后）之前我一直关注排序后的结果，却没发现排序前的数据顺序也是不一样的（红框所示）。也就是说，问题本身与排序算法没有关系，与错误的priority虽有关系，但不是致命的。致命的是排序前数据的顺序是为何不同的！沿着SortActionList往上找，果然，刚刚就在眼皮底下错过了：不管你信不信，问题就出在这个函数里的for循环上。如果您看过前文的话，就能明白我的意思——for循环的枚举顺序是与string HASH算法有关的！而v:CollectSceneActions是顺序往actions中添加ACTION的，那么，不同的枚举顺序就会导致ACTION在actions里的顺序不一致。而LuaJIT的string HASH算法和原版lua的并不一样，这也是前文联机版RPC出bug的原因。那么，我们把逻辑整理一下，完整的bug触发流程是：事已至此，所有的谜团都已经解开了。回头来看，如果饥荒作者在发现actions排序后顺序奇怪的时候能想到这是排序算法的稳定性，那么就绝不会只调整个别ACTION的priority来解决，而是会重新为所有的ACTION明确不同的priority。如果他们这么做了，整个问题就完全不会出现。而现在，程序能够正确运行完全依赖于特定排序算法对特定数据的排序结果。试想如果有一个mod手工添加了一个ACTION；或者随着版本更新，作者又在targetobject.components里添加了一个默认components，都会导致排序的结果与预期的不一致，而且这种不一致会导致大面积的逻辑错误，极难排除。更麻烦的在于，已经有不少第三方MOD使用了ACTION。如果随便改掉默认ACTION的priority值可能会导致这些MOD出错。因此这个bug就慢慢地变成了feature，且无人敢动。那么怎么解决呢？我没办法，只能把lua5.1.4的string HASH算法复制出来，替换掉luajit的那份实现了。这个同时也解决了之前RPC的问题，不用再修改代码了。我其实不想这么改，因为这样的设计将会面临更高的安全风险。但是没办法，将错就错吧。==================================中间省略一些章节，下面这个话题是这个bug的延续。问题的表现比较相似，但是解决起来更加棘手。==================================当我刚开始制作DST版本的饥荒LuaJIT补丁时，为了保证最大限度的兼容，要求用户在服务器和客户端上都启用补丁。但是实际的情况往往是，很多服务器并不在玩家的控制之中（如一些联机平台提供的服务器），而且大量服务器使用了linux版的饥荒。因此为了扩宽补丁的适用范围，需要对原版饥荒进行兼容，使得服务器不使用LuaJIT补丁时，使用了补丁的客户端也能够正常和服务器通讯。按照之前文章的描述，Lua和LuaJIT不兼容的地方已经被修复了很多，然而在这些修复都完成之后，带有LuaJIT补丁的客户端仍然不能正确和服务器通讯，具体的表现是，非服务器的一方将不能正确通过鼠标拾取物品或者采集资源（键盘可以）、吃食物、调整物品栏物品的顺序、扔下物品、将物品给予他人等。之前我曾经在前文提到过因为对象成员遍历顺序不一致导致RPC code不一致的问题。然而当我再次查看RPC列表时，却发现即使我把string hash的算法改成一样的，LuaJIT和Lua所生成的RPC列表也是有一点点不同的：启用了LuaJIT补丁后的饥荒：  原版饥荒：  全部49个RPC调用中，绝大多数都是匹配的，惟独第1和第48号所对应的服务函数在LuaJIT和Lua中正好对调了一下。是不是就因为这两个函数导致了如前所述的问题呢？答案是否定的，即使我用硬编码把两者的顺序强行指定一下，上面的问题一个也不会少。仔细研究了下出问题的这两个函数恰好是不重要的两个函数，和问题中所提到的那些操作都是没有关系的。难道传递这些操作还需要核对什么隐藏的暗号吗？那么，既然连相同的string hash算法都没有办法得到相同的表，那么很可能有其他地方也用到了类似的ID分配策略。研究了一阵，发现两处问题所在：一个是在scripts\actions.lua中：另一处在scripts\componentactions.luaRPC ID不是唯一的区分不同操作的ID，有些RPC请求中会有部分数据要依赖于刚才这两个表中的动作ID。而经过测试这两个表里面ID乱得是比较严重的——LuaJIT和Lua的遍历结果差得十万八千里。而且从其内容来看，也与有问题的操作相关。看到这里心里差不多就能肯定它就是我们要找的目标了。那么怎么改呢？硬编码这些数据并且在luajit加载对应模块时作替换吗？全局表或许可以，但是local定义的局部表是比较麻烦的。一方面，局部表只作为upvalue被函数引用，从加载后的模块中找到这个表比较困难。另一方面，lua/luajit的parser在加载代码的时候不会把整个文件读进来，而是由On Demand方式的loader进行加载的，这样试图从中截取到local xxxx = {}这样的定义并修改是很难做得比较健壮的。还有一个问题，我们即使能够通过hack的办法让这两个表拥有正确的哈希顺序，也不能根本性地解决这个问题。毕竟其他现有代码也有可能触发这个问题，而随着游戏更新和MOD的加入，也不保证新的代码能绕过这些坑。看来只有从源头上解决这个问题了。那么排除了string hash算法的影响之后，还有哪些因素会影响到遍历表的顺序呢？1. 对hash取的模/掩码由于hash值通常是一个较大的整数，那么往中放的时候需要先对一个数（通常是表大小）取模。Lua和LuaJIT取的模都是2^n，实现完全一样。2. 初始表的哈希部分大小某些情况下初始表LuaJIT要大一些（256），但是改成相同的值并不能解决问题3. 哈希表的冲突解决方案两者采用的方案都是维护一个从尾开始的“空余项指针”，在冲突之后优先从这里分配。所有HASH相同的项都会通过链表串起来。4. 重哈希的策略重哈希都是扩展为原来两倍大小，并且按hash顺序装填原有元素。所不同的是Lua是hash逆序遍历原有元素，而LuaJIT是顺序遍历的。但是把LuaJIT也改成逆序之后，LuaJIT的结果和上次不同了，但是和Lua的结果还是不一样。5. 删除键值的策略出现问题的表是直接用初始化列表构造的，不存在删除的问题。因而也不会是这个原因。6. 用构造时的策略在排除了以上5种可能之后，我终于发现了线索。线索的发现过程非常漫长（花了一天多），也走了很多弯路，为了节约笔墨就不写是怎么发现的了。为了便于说明这种情况，我举个例子，这样的代码：在lua5.1.4下的输出为：而LuaJIT 2.0的输出为：可以看出，除了lua 5.1.4在面对初始化列表构造以外，其余的三个结果都是相同的。这说明lua 5.1.4在面对初始化列表构造时的策略和先构造一张表，再一个个添加项目时的处理是不一样的。而LuaJIT无论是哪种构造，都是先构造一张表，再一个个添加项目的。lua 5.1.4作了什么处理呢？我们来看代码：lparser.c:注意cc.na和cc.nh这两个变量，它分别记录了表在构造过程中数组部分和哈希部分的数量。并在所有数据都读入后才去构造最终的表。也就是说，这个表的构造只经过了一次一步到位的哈希空间的分配。而如果先构造一个表，再一条条加的话，会经历多次重哈希。由于后者重哈希时重插入的顺序与最初的构造顺序不一致（重插入是按当时的哈希值取模后的顺序来排的，和最初的构造顺序不一样），因此最终的哈希表的构造并不相同！0x04 药方与此同时，让我们来看看LuaJIT中的处理是怎么样的：nhash虽然也是记录哈希项的数量的，但是由于t在第一条key-value时就已经被构造出来了，因此这时nhash并不是最终哈希项的数量，这个表在构造过程中将不可避免地面临重哈希。从而产生不同于lua的结果。那么怎么改呢？比较麻烦。由于整个parser是one-pass的，LexState和FuncState是同步向下走的，所以想到推迟表的构造时间并不是那么现实。我起初想把LexState的值缓存出来，在整个表解析完后再构造t（这时已经有正确的nhash了）。然而试了好久都没有成功，原因是中间那个expr调用还可能再遇到一张初始化列表，一些依赖于LexState的值的缓存会失效，从而造成子表的值出错。最后我想到一个简单的办法：表呢，按要求构造，expr_table也按要求执行，但是把所有插入值的操作在低层拦下来，然后统一commit的时候进行重哈希，就不会干扰到LexState，也解决了问题。具体了方案如下：修改table结构(lj_obj.h)：添加了一个用于缓存的结构Cache指针。再写两个函数(lj_tab.c)：配合lj_tab_newkey前加一些语句用于拦截：最后，修改expr_table，使得在解析表时启用我们的缓存：在表构造时调用lj_tab_prepare_cache以启用缓存，在构造结束时使用lj_tab_commit_cache将缓存中的结果刷入表中即可。（不过其实这样的写法有个问题：就是如果异常发生了，分配的内存有可能会释放不掉。标准的做法是使用lua源码里的内存分配函数，分配出可gc的内存块放在lua state上。可惜写代码时太懒了。。）"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",Xiang Liu,答个前段时间刚发生的，不是最难调的bug，但是确实比较虐心。之前用xilinx一块比较高端的开发板验证一个高速信号的功能，发现有一路输出幅度是其他的1/10，感觉很诧异，于是和师弟翻了一天手册文档，难不成这货还有配置幅度的功能。最后无解，用万用表在BGA焊盘和走线上一点一点地量，过了一个小时，发现....（Bug微距图）尼玛一万多的板子 表贴SMA接头漏焊！中间大概有0.5mm的距离，高速信号空间耦合过去10%。于是默默用吹上，一切正常了。这个bug的恐怖之处在于，高速信号可以从断点发射出去，然后让人误以为卧槽这有输出啊，不会想到根本就是个直流的断路，直到你用了万用表。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",李意扬,全国电子设计大赛，比赛做逆变器相关，做出来效率大于100%，找不出原因，评委也找了半天找不出原因。然后就给了一等奖。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",九牛四毛,"9月21日增加说明谢谢各位程序员捧场……我要讲的这个bug一点都不难，可能大家也都遇到过，但是当时卡了我一上午，所以印象极为深刻在这跟大家分享一下--------------------分割线-------------------------我来讲一个吧，也是我亲身经历的在传输数据的时候，需要对字符串a做判断，如果a为空，则不下发配置，非空下发配置在我获取到a之后，我把它打印出来发现是""""嗯，什么都没有，为空，应该不下发，但当我去检查配置的时候，很奇怪的下发了我当然认为是我的判断问题，去检查，发现没问题，判断条件和逻辑都是正确的我觉得应该是字符串类型的问题，我又把所有判断项都转换成了unicode编码，问题仍然存在我又更改了判断条件为a的长度为零，则不下发，问题仍然存在当时我的心情大约是这样的为什么为什么明明a的内容什么都没有，代码却一直认为a非空呢a你为什么如此任性的表现你的存在感呢！我觉得下发的配置在嘲笑我，虽然是一个bug，但是他却表露出一股王霸哥之气我愤怒了，身为测试转研发的我一定要解决这个bug，人定胜天……额，bug我又重新写了一个程序，专门测试这段代码，代码逻辑仍然没问题，但是只要传输数据，他就认为a是非空的我逐行print各种东西，数据全对，问题存在我查了一下字符串那部分的python源代码，代码全对，问题存在我更换别人的机器执行这段代码，全都正常，问题存在……最后胡乱尝试，甚至期盼掌控代码的神明或者代码子能够出现帮我解决这个问题，毕竟这个简单的不能再简单的问题已经卡了我将近4个小时了直到我在一次瞎试的时候print len(a)屏幕结果是：2我才恍然大悟，原来字符串a的内容，就是""""当时我大概是保持这样的动作持续了十分钟吧而且，发生这一切的时候，我才刚刚看了@条件状语从句的回答，还在跟同时调侃哈哈哈怎么会有传输名字为null这种事发生人生真奇妙"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",Pluveto,没想到有一天我也要来回答这个问题！！事情要从半年前说起。在当时发布中，我在提到“邮件配置一直不成功”，是的，当时我开启了防火墙的所有和邮件有关的端口，但就是发不出去邮件，。当时调了好几天，都没有解决。最后，我只好放弃，选择了用别人设置好的虚拟主机。时间到了二零一九年年末。由于有记笔记的好习惯，我很快搭建好了 LAMP 环境。但是却发现，博客的附件无法上传。博客的附件，通过插件，应该被上传到我的腾讯云储存桶。但是试了几次，一直无限转圈圈。等等，现在还在转：自然，应该是哪里出了问题。我想到了看错误信息。打开 Chrome 自带的控制台，果不其然有报错：通过一系列追踪，我定位到了插件源代码 201 行：这里通过 curl 发起了请求。然而遇到错误：第一反应，是 DNS 服务器设置有误。执行 ，可以发现是谷歌的 Public DNS，谷歌基本不可能出错，而且我服务器在魔法触及不到的地方，不存在墙的问题，但是以防万一，我把首选 DNS 改成了 CloudFlare 家的 。然后再次尝试上传：没用。一直无限转圈圈：这就奇怪了。是不是 DNS 没生效呢？我执行：然后再次尝试上传：没用。还是一直无限转圈圈：难道要重启不成？然后再次尝试上传：没用。还是一直无限转圈圈：那么，我直接 ping 会怎样？显然，十分正常，并且说明我的 DNS 服务器运转良好。在 Stackoverflow 某帖子的启发下，我写了一个文件通过浏览器访问其 url，自然，发生了域名解析错误。然后我通过 php 的交互模式执行：这没问题呀。所以奇怪之处就是：在网站脚本中写这些代码，Not Working。但是在 shell 中以交互模式执行，就没毛病。同时，也排除了防火墙的问题。这时候首先想到的就是权限问题。我通过  更改文件权限，无效。我通过  切换到  用户视角，交互模式执行，没毛病。这说明不是用户权限的问题。但是知道和权限有关之后，大概有了 Google 的方向。然而在国内网站搜到的，清一色是关闭防火墙或者关闭 SELINUX 这样的不负责任的操作。一时间解决不了，我向。不过没有人回答。在这个问题下，说是关闭 chroot 解决的。于是我仔细研读了 chroot 的相关资料，得出结论是这个方法对我们 Apache 服务器不适用。同时，关闭 chroot 和关闭 SELinux 一样，都是不负责任的行为，会给服务器带来很大的危险。我一时间真的不知道该怎么办了。一番思索后，我考虑：会不会是 CURL 的问题呢？于是我编写了这个文件：结果，在交互模式执行，返回的是 ip，在浏览器打开，返回的是域名。怎么回事？查询得知：当失败的时候，返回的是不经修改的原域名。这排除了 CURL 的问题。并且更加确定是权限的问题。我把       这些关键词变着花样地搜索，都没有找到满意的答案。不过，倒是有很多人建议这么做：这里是允许 Apache 连接网络。言外之意，SELinux 开启的状态下，默认的设置下，Apache 无法接触到外部网络。我照此执行。然而结果毫无变化。但是考虑到 SELinux 让我吃过那么多苦头，我觉得和 SELinux 关系很大。不情愿地，我尝试性地执行：这里的作用，根据 Manuel，是将 SELinux 设为被动模式。问题消失了。可是，这并不是我想要的答案，这么做和关闭 SELinux 没有区别，都是不负责任的行为。不过，可以肯定，问题必然和 SELinux 有关。我开始大量搜集和 SELinux 有关的资料。其中，比较重要的是“”。我觉得和 httpd 有关的那些 bool 值很可能是罪魁祸首。根据：我试着开启了几个，但是无用。然后我遇到了这篇文章 他提到，安装  可以帮忙排查问题。我 ，没有找到任何线索。从头仔细阅读这篇文章后，我注意到他说：于是，我暂时性地设为被动模式：然后刷新那个测试页面。然后果然找到了问题。不要被这令人作呕的日志吓跑。我们慢慢读。我们可以看到几个关键：我执行 结果：前面还有好几页。其中，最为关键的是：执行结果中好像还是一团乱。容易发现：通过这些文字，我找到了红帽的一个 。顺着读下去可以看到：他的意思是，文件被错误地标记了。我执行：查询 restorecon 的 Manuel：执行：貌似什么也没有发生。不过此时  的话可以发现它的标签变了。怎么样了？来试试吧。最后开启 SElinux 为完全状态：重新访问测试地址重新上传图片成功了(☆-ｖ-)同样解决的还有半年前的那个问题。悬 案 就 此 告 破。：而你永远不知道获得这一最终答案的路途，会是多么的艰辛。做这样的工作，需要极大的耐心，而且，英语还要好（你以为我读长篇英语技术文章不会头大吗::>_<::）。哎，我竟然这么有耐心（崩溃）。我没有疯，我没有！！！！
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",马克,上大学的时候带的拉杆箱自带三位数密码，000到999共1000个数很久没用后有一天想用它的时候发现是锁住的！回忆了一下好像是学期初设的密码。然而怎么也想不起来密码是啥了……没法子反正就1000个密码，一个个试嘛。试之前还去网上搜了怎样靠耳朵听着就能确认试到正确密码了，有一种特工破解密码的豪迈！（I'm 棒的，真是·棒的）000——001——002……101——102——103……801卧槽怎么800多了还没有，硬着头皮继续上……996——997——998——Click！擦成功了！！！然而一共也就1000个密码我试了999次！！WTF！！！回忆当初……原本给箱子设密码，我是拒绝的，然而有天突然被害妄想，必须设一个！设密码要有策略……那么就逆向思维：别人猜密码肯定先猜000 111 666 888 999 123 321这些最简单的，都错的情况下可能就开始从头试密码了，哼哼机智如我肯定让你试也没那么容易试出来，既然破译的人会从000开始试，那我就设置998吧，最大限度延缓你破译密码的时间！！！就这么愉快地决定了。——————————————分割—————————————————————————自己给自己下套，果然套得最准，这个大脑自带bug我看是debug不了了。
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",匿名用户,以前在知乎看过一个答主帮学妹检查代码的故事，bug是学妹写完总是出现随机错误，检查一遍发现有多余字符，但让他重新写一遍就没问题，反复几次如是。每次多余的字符和位置都不一样。抓狂之后答主直接去找学妹要她当着自己面写一遍。发现了问题：学妹键盘放的太低，偶尔弯腰拿水杯什么的时候，胸会压到键盘……-_-||————————————————卧槽怎么随便抖个机灵这么多赞……说段子的你去找原答主说去这又不是我原创的啊确实印象中是在知乎某个地方看到的。————————————经人提醒，应该是根据下面这个段子改的，不是真事儿_(:з」∠)_2016年07月21日01:10:23更新比村老师居然把这个梗画出来了……
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",小黑,我来吐槽一个不是最难但是最可怕的BUG，因为我用科学的方式证明了Ghost的存在几年前吧，一个客户想装一套车辆管理系统，整个实现起来不难，基本上就是RFID读卡继电器控制道闸机抬杆，根据两个地感线圈检测到车辆的压过地感的顺序 做出入判断，最后落杆。安装完成，检测，一切正常，收工！ 然后第三天客户晚上打电话给我了，说系统老是自动抬杆，然后我就过去了，看日志一切正常，坐等BUG重现，一天过去了一切正常。走之前对传达室的人说，再遇到这样的情况，把当时的情况记录下来告诉我。第二天一大早，客户又打电话说还是自动抬杆，我跑过去找当时发现这情况的人，那人告诉我说当时深夜，道闸机抬杆，然后提示有车辆进去，落杆，几分钟后抬杆，提示有车辆出去，落杆。我当时特想不通啊，上位机程序是我一个人写的，抬杆的触发条件就两个啊，一个是读到卡信号，一个是防止砸到车，会检测地感上有没车辆啊。第一反映先把所有车辆上的RFID卡电池拔了，程序应该没问题，因为不是第一个客户了然后等了一天，当然没事，然后第二天电话依旧，既然不是读到卡，那就是地感的问题呗，地感检测器换了，万用表量了下地感线圈，正常，然后客户那边一个领导（就是打电话给我的那人）跑过来和我抽了根烟聊聊，他问我，地感是怎么感应车辆的，其实我也不大清楚，毕竟我不做硬件，但是总不能这样回答客户不知道是吧，好在大方向上知道一点，客户也不懂，于是胡诌大概是这样的，电磁感应你知道不？其实就是地下有个线圈，通电不就不就有磁力了么，你车是铁的，磁场不就改变了么，然后我探测到磁场的改变，就知道有车了啊。当时那大叔脸都青了！我猜到他心里是怎么想的了，那客户的大楼是新建的，以前是公墓，然后我说探测到了磁场的改变！！！还每次都是大半夜的时候！！！而且还提示有什么东西进进出出的，你还看不见！！！嗯你懂的！！！对了你们问我那BUG到底是怎么回事？其实后来发现就是施工不规范，地感线圈外皮破了，然后路面上也没做处理，晚上气温下降，凝霜还是下雾的，反正就是地感线圈短路了电阻改变，然后买来地感检测器不知道是不靠谱还是就是这个原理，反正就是认为上面有车，给我的上位机发信号了，然后程序就开杆子了，两个线圈都这样，啥时候短路完全随机于是有了外出返回判断，到了白天气温上升，干燥了，啥事都没有！！你问我怎么发现的？你以为我会告诉你因为后来下雨了么！！！！ 
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",码塔男,"说一个上星期刚修的bug。根据QA反映，我们组负责的一款游戏中，ipad mini4的用户掏出特定的一把发光武器，让他出现在画面上时，该武器周围会闪烁黑色方块，这个现象的出现还要求打开bloom以及hdr。由于这个方块非常工整，一看就不对应任何mesh，当时第一眼看到也没想出来为什么出现的是一个工整的方形。由于只在开了bloom和hdr的情况下才有，所以一开始我的注意力都在那几个后处理shader上。就这里来来回回看了几次，也在别的机器上试了下，比它性能差的ipad mini2没问题 比它性能好的ios设备也没问题，实在不行只能连真机调试了，这时候我胡乱修改运行时游戏内的一些渲染参数，改到了一个用于做bloom效果的render target的分辨率，当分辨率变高时黑块变小了，这说明这个黑块不是设备相关的一块坏点，而是shader中决定的的大小（虽然是快速的两个方向的模糊，但最后结果的模糊范围还是一个正方形），那么也就是说不一定是bloom相关的pass里的shader有问题，很可能是之前opaque的pass就计算出了坏点！这时候我关点bloom，肉眼看画面，找到了原来黑块所在位置的中间，的确有两三个纯黑色的像素点！好的，问题找到了，就是那个像素点出了问题！但问题来了，其他所有发光武器都没这个问题，只有它有坏点，我第一个想到的就是模型顶点存的内容在插值后的数据出现了异常，于是想去找一下坏点附近的那几个顶点的数据是啥，这时候我再次打开游戏，突然发现坏点的位置变了！那这个信息太关键了，因为这个材质有一个随机常量，用于控制发光闪烁等效果的初相，目的是让不同的发光武器同屏显示时错落有致。那么我就去查看那个常量涉及到之后的表达式即可。看了半天，与其相关的代码没啥问题，唯一有可能的是一行被某个宏定义屏蔽掉的代码，里面有个power函数，如果直接跑会有可能某些像素跑到一个pow(0,0)的计算，也就是说有可能这个宏开启了。那个宏的含义是模型是否有顶点色，于是一查这个模型果然有一个不该有的，且只有alpha通道有非零值。不管怎么说这个pow(0,0)的确是跑到了，那么问题来了，pow(0,0)到底等于几呢？查了一下，未商定：Zero to the power of zeroFrom Wikipedia, the free encyclopediaJump to navigationJump to searchZero to the power of zero, denoted by 0^0，is a mathematical expression with no agreed-upon value. The most common possibilities are 1 or leaving the expression undefined, with justifications existing for each, depending on context. In algebra, , or set theory, the generally agreed upon value is 0^0 = 1, whereas in mathematical analysis, the expression is sometimes left undefined. Computer programs also have differing ways of handling this expression.看来的确是个危险表达式，那么也就是说 ios到底把它当作NaN还是1，要看机器，emmmmm，既然这样，就让美术去掉顶点色并且把power的指数的默认值改为非零试试吧......果然，bug单关闭。"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",无毁的湖光,"笔者最近解决了一个非常曲折的问题，从抓包开始一路排查到不同内核版本间的细微差异，最后才完美解释了所有的现象。在这里将整个过程写成博文记录下来，希望能够对读者有所帮助。(篇幅可能会有点长,耐心看完,绝对物有所值~)先来介绍一下出问题的环境吧，调用拓扑如下图所示: 合作方的多台机器用NAT将多个源ip映射成同一个出口ip 20.1.1.1，而我们内网将多个Nginx映射成同一个目的ip 30.1.1.1。这样，在防火墙和LVS之间，所有的请求始终是通过(20.1.1.1,30.1.1.1)这样一个ip地址对进行访问。 同时还固定了一个参数，那就是目的端口号始终是443。由于对方是采用短连接和Nginx进行交互的，而且采用的协议是HTTP-1.0。所以我们的Nginx在每个请求完成后，会主动关闭连接，从而造成有大量的TIME_WAIT。 值得注意的是，TIME_WAIT取决于Server端和Client端谁先关闭这个Socket。所以Nginx作为Server端先关闭的话，也必然会产生TIME_WAIT。内核参数配置如下所示:其中设置为0。这样，可以有效解决tcp_timestamps和tcp_tw_recycle在NAT情况下导致的连接失败问题。具体见笔者之前的博客:好了，介绍完环境，我们就可以正式描述Bug现场了。表象是合作方的应用出现大量的创建连接异常，而Server端确没有任何关于这些异常的任何异常日志，仿佛就从来没有出现过这些请求一样。出现问题后，笔者翻了下LVS对应的监控曲线，其中有个曲线的变现非常的诡异。如下图所示: 什么情况?看上去像建立不了连接了？但是虽然业务有大量的报错，依旧有很高的访问量,看日志的话，每秒请求应该在550向上!和这个曲线上面每秒只有30个新建连接是矛盾的！观察了几天后。发现，每天都在10点左右开始发生报错，同时在12点左右就慢慢恢复。 感觉就像每天10点在做活动，导致流量超过了系统瓶颈，进而暴露出问题。而11:40之后，流量慢慢下降，系统才慢慢恢复。难道LVS这点量都撑不住?才550TPS啊？就崩溃了？难道就是传说中的网络问题？看了下监控，流量确实增加，不过只占了将近1/8的带宽，离打爆网络还远着呢。不管三七二十一，先抓包吧!在这里笔者给出一个典型的抓包结果:上面抓包结果如下图所示,一开始33735->443这个Socket四次挥手。在将近两分钟后又使用了同一个33735端口和443建立连接，443给33735回了一个莫名其妙的Ack,导致33735发了RST！首先最可疑的是为什么发送了一个莫名其妙的Ack回来?笔者想到,这个Ack是WireShark给我计算出来的。为了我们方便，WireShark会根据Seq=0而调整Ack的值。事实上，真正的Seq是个随机数！有没有可能是WireShark在某些情况下计算错误？ 还是看看最原始的未经过加工的数据吧，于是笔者将wireshark的给取消了。取消后的抓包结果立马就有意思了!调整过后抓包结果如下所示:看表中，四次挥手里面的Seq和Ack对应的值和三次回收中那个错误的ACK完全一致！也就是说，四次回收后，五元组并没有消失，而是在111.5s内还存活着！按照TCPIP状态转移图，只有TIME_WAIT状态才会如此。 我们可以看看Linux关于TIME_WAIT处理的内核源码:上面的代码有两个分支，值得我们注意，一个是TCP_TW_ACK，在这个分支下，返回TIME_WAIT记忆中的ACK和我们的抓包现象一模一样。还有一个TCP_TW_SYN,它表明了在 TIME_WAIT状态下，可以立马重用此五元组，跳过2MSL而达到SYN_RECV状态！ 状态的迁移就在于tcp_timewait_state_process这个函数,我们着重看下想要观察的分支:根据上面源码，PAWS(Protect Againest Wrapped Sequence numbers防止回绕)校验机制如果生效而拒绝此分节的话，LINUX_MIB_PAWSESTABREJECTED这个统计参数会增加，对应于Linux中的命令即是:这么上去后端的Nginx一统计，果然有大量的报错。而且根据笔者的观察，这个统计参数急速增加的时间段就是出问题的时间段，也就是每天早上10:00-12:00左右。每次大概会增加1W多个统计参数。 那么什么时候PAWS会不通过呢，我们直接看下tcp_paws_reject的源码吧:在抓包的过程中，我们明显发现，在四次挥手时候，记录的tsval是2149756058,而下一次syn三次握手的时候是21495149222,反而比之前的小了！所以PAWS校验不过。 那么为什么会这个SYN时间戳比之前挥手的时间戳还小呢?那当然是NAT的锅喽，NAT把多台机器的ip虚拟成同一个ip。但是多台机器的时间戳(也即从启动开始到现在的时间，非墙上时间),如下图所示: 但是还有一个疑问,笔者记得TIME_WAIT也即2MSL在Linux的代码里面是定义为了60s。为何抓包的结果却存活了将近2分钟之久呢？于是笔者开始阅读器关于TIME_WAIT定时器的源码，具体可见笔者的另一篇博客:结论如下 在TIME_WAIT很多的状态下，TIME_WAIT能够存活112.5s，将近两分钟的时间，和我们的抓包结果一致。 当然了，这个计算只是针对Linux 2.6和3.10内核而言，而对红帽维护的3.10.1127内核版本则会有另外的变化，这个变化导致了一个令笔者感到非常奇异的现象，这个在后面会提到。如上面所解释，只有在Server端TIME_WAIT还没有消失时候,重用这个Socket的时候，遇上了反序的时间戳SYN，就会发生这种问题。由于NAT前面的所有机器时间戳都不相同，所以有很大概率会导致时间戳反序！笔者知道，防火墙的端口号选择逻辑是RoundRobin的，也即从2048开始一直增长到65535，再回绕到2048,如下图所示:但我们在线下压测的时候，明显速率远超560tps,那为何确没有这样的问题出现呢。很简单，是因为 TCP_SYN_SUCCESS这个分支，由于我们的压测机没有过NAT，那么时间戳始终保持单IP下的单调递增，即便>560TPS之后，走的也是TCP_SYN_SUCCESS,将TIME_WAIT Socket重用为SYN_RECV,自然不会出现这样的问题，如下图所示:等等,564TPS?这个和LVS陡然下跌的TPS基本相同！难道在端口号复用之后LVS就不会新建连接(其实是LVS中的session表项)？从而导致统计参数并不增加? 于是笔者直接去撸了一下LVS的源码:很明显的，如果当前五元组表项存在，则直接复用表项，而不存在，才创建新的表项，同时conn++。而表项需要在LVS的Fintimeout时间超过后才消失(在笔者的环境里面是120s)。这样，在端口号复用的时候，因为<112.5s，所以LVS会直接复用表项，而统计参数不会有任何变化，从而导致了下面这个曲线。当流量慢慢变小，无法达到重用端口号的条件的时候，曲线又会垂直上升。和笔者的推测一致。也就是说在五元组固定四元的情况下>529tps(63487/120)的时候，在此固定业务下的新建连接数不会增加。而图中仅存的560-529=>21+个连接创建，是由另一个业务的vip引起，在这个vip上，由于量很小，没有。但是LVS统计的是总数量，所以在端口号开始复用之后，始终会有少量的新建连接存在。值得注意的是，端口号复用之后，LVS转发的时候就会直接使用这个映射表项，所以相同的五元组到LVS后会转发给相同的Nginx,而不会进行WRR(Weight Round Robin)负载均衡,表现出了一定的”亲和性”。如下图所示:好了，现在可以下结论了。在ip源和目的地址固定，目的端口号也固定的情况下，五元组的可变量只有ip源端口号了。而源端口号最多是65535个，如果计算保留端口号(0-2048)的话(假设防火墙保留2048个)，那么最多可使用63487个端口。 由于每使用一个端口号，在高负载的情况下，都会产生一个112.5s才消失的TIME_WAIT。那么在63487/112.5也就是564TPS(使用短连接)的情况下，就会复用TIME_WAIT下的Socket。再加上PAWS校验，就会造成大量的连接创建异常！ 这个论断和笔者观察到的应用报错以及LVS监控曲线一致。因为LVS是在529TPS时候开始垂直下降，而端口号复用是在564TPS的时候开始，两者所需TPS非常接近，所以一般LVS出现曲线异常的时候，基本就是开始报错的时候！但是LVS曲线异常只能表明复用表项，并不能表明一定有问题，因为可以通过调节某些内核参数使得在端口号复用的时候不报错！ 在端口号复用情况下，lvs本身的新建连接数无法代表真实TPS。首先，笔者尝试限制Nginx所在Linux中最大TIME_WAIT数量这基于一个很简单的想法，TIME_WAIT状态越少，那么命中TIME_WAIT状态Socket的概率肯定越小。设置了之后，确实报错量确实减少了好多。但由于TPS超越极限之后端口号不停的回绕，导致还是一直在报错，不会有根本性好转。 如果将tcp_tw_max_bucket设置为0，那么按理论上来说不会出问题了。 但是无疑将TCP精心设计的TIME_WAIT这个状态给废弃了，笔者觉得这样做过于冒险，于是没有进行尝试。这个问题本质是由于五元组在限定了4元，只有源端口号可变的情况下，端口号只有 2048-65535可用。那么我们放开源地址的限定，例如将源IP增加到3个，无疑可以将TPS扩大三倍。 同理，将目的地址给扩容，也能达到类似的效果。 但据网工反映，合作方通过他们的防火墙出来之后就只有一个IP,而一个IP在我们的防火墙上并不能映射成多个IP,多以在不变更它们网络设置的情况下无法扩展。而扩容目的地址，也需要对合作方网络设置进行修改。本着不让合作方改动的服务精神，笔者开始尝试其它方案。在一开始笔者没有搞明白LVS那个诡异的曲线的时候，笔者并不知道在端口复用的情况下,LVS会表现出”亲和性”。于是想着，如果扩容Nginx后，根据负载均衡原则，正好落到有这个TIME_WAIT五元组的概率会降低，所以尝试着另扩容了一倍的Nginx。但由于之前所说的LVS在端口号复用下的亲和性，反而加大了TIME_WAIT段！在笔者想明白LVS的”亲和性”之后，对扩容Nginx会导致更多的报错已经有了心理预期，不过被现实啪啪啪打脸!报错量和之前基本一样。更奇怪的是，笔者发现非活跃连接数监控(即非ESTABLISHED)状态，会在端口号复用之后，呈现出一种负载不均衡的现象，如下图所示。 笔者上去新扩容的Nginx看了一下，发现新Nginx只有很少量的由于PAWS引起的报错，增长速率很慢，基本1个小时只有100多。而旧Nginx一个小时就有1W多！ 那么按照这个错误比例分布，就很好理解为什么形成这样的曲线了。因为LVS的亲和性,在端口号复用时刻，落到旧Nginx上会大概率失败，从而在Fintimeout到期后，重新选择一个负载均衡的时候，如果落到新Nginx上，按照统计参数来看基本都会成功，但如果还是落到旧Nginx上则基本还会失败，如此往复。就天然的形成了一个优先选择的过程，从而造成了这个曲线。 当然实际的过程会比这个复杂一点，多一些步骤，但大体是这个思路。 而在端口复用结束后，不管落到哪个Nginx上都会成功，所以负载均衡又会慢慢趋于均衡。新扩容的Nginx表现异常优异，在这个TPS下没有问题，那到底是为什么呢？笔者想了一天都没想明白。睡了一觉之后，对比了两者的内核参数，突然豁然开朗。原来新扩容的Nginx所在的内核版本变了，变成了3.10! 笔者连忙对比起了原来的2.6内核和3.10的内核版本变化，但毫无所得。。。思维有陷入了停滞等等，我们线上的内核版本是3.10.1127,并不是官方的内核，难道代码有所不同？于是笔者立马下载了3.10.1127的源码。这一比对，终于让笔者找到了原因所在，看如下代码！如代码所示，3.10.1127对TIME_WAIT的时间轮处理做了加速，让原来需要额外等待的7.5s收敛为额外等待的1s。经过校正后的时间轮如下所示: 那么TIME_WAIT的存活时间就从112.5s下降到60.5s(计算公式8.5*7+1)。 那么，在这个状态下，我们的端口复用临界TPS就达到了(65535-2048)/60.5=1049tps,由于线上业务量并没有达到这一tps。所以对于新扩容的Nginx，并不会造成TIME_WAIT下的端口复用。所以错误量并没有变多！当然，由于旧Nginx的存在，错误量也没有变少。 但是，由于那个神奇的选择性负载均衡的存在，在端口复用时间越长，每秒钟的报错量会越少！直到LVS的表项全部指到新Nginx集群，就不会再有报错了！当然了，根据上面的计算，在TPS继续上涨到1049后，依旧会产生错误。新版本内核只不过拉高了临界值，所以笔者还是要寻求更加彻底的解决方案。Linux TCP的实现对TIME_WAIT的处理用时间轮在笔者看来并不是什么高明的处理方式。 Linux本身对于Timer的处理本身就提供了这样的方案。放着这样好的方案不用，偏偏去实现一个精度不高还很复杂的时间轮。 所幸在Linux 4.x版本中，摈弃了时间轮，直接使用Linux本身的红黑树方案。感觉自然多了！笔者一开始并不想修改这个参数，因为修改意味着关闭PAWS校验。要是真有个什么之类，就少了一层防御手段。但是事到如今，为了不让合作方修改，只能改这个参数了。不过由于是我们是专线！所以风险可控。运行至今，业务上反馈良好。终于，这个问题终于被解决了！！！！！！ 补充一句,关闭tcp_timestamps只是笔者在种种限制下所做的选择，更好的方案应该是扩充源或者目的地址。对于一些常用的性能问题排查可以看下笔者推荐的这本书:解决这个问题真的是一波三折。在问题解决过程中，从LVS源码看到Linux 2.6内核对TIME_WAIT状态的处理，再到3.10内核和3.10.1127内核之间的细微区别。 为了解释所有的疑点，笔者始终在找寻着各种蛛丝马迹。虽然不追寻这些，问题依旧大概率能够通过各种尝试得到解决。但是，那些奇怪的曲线始终萦绕在笔者心头，让笔者日思夜想。然后，突然灵光乍现，找到线索后顿悟的那种感觉实在是太棒了！这也是笔者解决复杂问题源源不断的动力！欢迎大家关注我公众号<<解Bug之路>>，里面有各种干货，还有大礼包相送哦!"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",blindpirate,"我说几个印象比较深的，都是“花好几天去调试，一行代码解决”的bug。有和疑难杂症做过过斗争的筒子们都知道，解决一个困难bug，90%以上的时间都花在重现上。一旦这个问题能够重现，解决它就只是时间问题了。因此，你在绝大多数的issue tracker上报bug，对方都会要求你提供一个“可以重现问题的最小项目”，叫法有""reproducer"", ""minimum reproducible sample""等。这个问题也不例外。2018年中秋节前夕我们的CI上总是时不时冒出一个莫名其妙的，令人肥肠头疼。我们几个人花了很久都没能找到问题，直到有一天有人意识到这个问题和文件夹路径的长度是相关的——一般而言，你项目里测试能否跑成功和项目的位置是无关的——但是我们的问题只发生在项目文件夹路径是特定长度的时候。有了能够稳定复现的例子，我们很快发现问题并不在我们的项目里，而是在OpenJDK内部——如果放在某个特定长度的文件夹里，OpenJDK会奇怪地抱怨找不到jar包中的类。随后，我们构造了一个重现的例子，给OpenJDK提了一个bug：然后那一年的中秋我闲着无聊，就下载了一份OpenJDK的代码，花了大半天时间debug，发现OpenJDK在读的代码里有一个bug，简单来说，OpenJDK在读取Argument File时，每次读4096字节的数据到缓冲区中，在某种特定情况下，其内部处理转义字符的状态机的某个状态转换会出现问题，这种特定情况是什么呢？答案是，两个连续的转义字符\\被缓冲区分割开，即：也就是说，我们非常不幸，遇到了大概1/4096的概率的问题……找到问题之后，修复其实只用。这应该算是“画一个圈1美元，知道在哪里画圈9999美元”的故事的现实版了。这个问题在JDK12中被修复了，不过因为没有到非LTS版本中，这个问题应该在JDK9/10中仍然存在。另外一个是去年的，有人报告我们的软件（Gradle）（好吧又是Windows），随后更多的报告显示似乎这个问题存在于所有使用了CJK字符集的Windows上。因为我们的团队只有我一个人能看懂CJK字符集，这个任务自然而然落到了我的身上。为了重现这个问题，我不得不去下载安装了一个繁体中文的Windows10，然后花了一点时间debug，发现有人在某次重构时，对jar进行transformation忘了设置UTF-8编码。一般而言这不是一个大问题，因为绝大多数jar包里的文件名都是ASCII的，但是坏就坏在Kotlin embedded compiler的jar包有个叫的鬼东西…… 找到问题之后，修复也是：说到字符集问题，我想起了几个月前的，不算难调，但是挺有意思：我们的软件在土耳其语的环境中会出现奇怪错误，这是因为在土耳其语中，的结果不是，而是 ："
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",蓝牙彪,"不算最难的 ，算一个比较熬人的… 最近产品验收测试阶段，几轮迭代测试都显示部分手机蓝牙都一定概率丢包……但我拿那些手机做了非常多测试 也包括和测试员的一模一样的测试环境，一直没重现。最后阶段 几个人轮番测试这个bug ，除了我大家都测试到过，但只有我有环境抓到关键log………两天两夜终于抓到了这个bug这货怎么出现的呢？ 就是那些个二逼手机 有小概率出现蓝牙发呆一秒左右，什么也不做，但又在超时的允许范围，协议合法………而我们的二逼芯片 居然只有在这个情况下才会出现一包数据呢包头标志位错误。也就是一个手机的小概率随机错误会诱发我们的bug。这不是关键 最最关键的是这个bug至今还躲着我，它已经面对了所有其他人员……另外一个bug 用频谱仪抓晶振辐射 ，我一抓速度叫来了我们的射频工程师  靠 你看 这个辐射怎么变成了对称的双乳峰？不应该是正态的单峰吗？ 我们一起测量了很久……后来 他不小心被电到 说:你这里没接地？怎么感觉有110V左右的交流电？ 尼玛 万用表一量 真是110V ,第一次知道原来有些工程师人体可以做万用表…~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~评论区的 你们够了 欺负我一个弱电的插不上话吗？"
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",唐若,前年暑假，在移动铁通里面打暑假工，帮着忙跟着师傅装宽带，牵牵线啊，设置路由器啊，搞搞维护啊什么的。所以一般客户新装会打电话给师傅，然后使用过程有问题就会打电话给我。新装比较复杂，要调试外面设备信号，要开户，要做数据等等。我懂一点，就搞维护。维护嘛，一般就是三步走嘛，看你路由器几个灯在亮，然后主网线插电脑可不可以拨号上网，看一下错误代码就差不多知道什么问题了嘛。新装其实特别好说话，你去给别人办事嘛，别人好吃好喝的招待你，西瓜冰啊小水果啊什么的。但是维护就不同了，经常是被客户骂的，你们铁通有用没用啊？怎么三番两次出问题啊，不行我就打10086了哈。然后听到这句基本汗就下来了，别别别，你先跟我描述一下怎么没有用，我这边马上给你处理一下。但是呢，可能是因为态度，很多客户就开不了机啊，开机慢啊，一些小网站打不开啊，都会给你打电话，并且威胁你要你解决，否则就投诉你。其实内心是奔溃的，分分钟想骂娘的。当然也不排除有那种说话很客气的大妈，先寒暄一下，然后说情况，然后问我什么时候有空过来处理一下就ok不急的。那么，我们的故事就开始了。一天，师傅自己去装宽带了，我在办公室玩手机，突然显示一个昨天新装宽带的大妈打电话过来，这个大妈属于什么都不懂，就会按一下开机键然后点击桌面上面的某酷视频看广场舞教学。听说我们移动有免费宽带送就打电话要求办理了。我心想，这昨天刚装好的宽带，怎么今天就出问题了？拿起电话，接了。“诶，张大妈，你好。”“哎呀小唐，你好。你们昨天不是来装了宽带嘛，啊？”我当时一听，嚯，没有信号？那可是大问题啊，那是外部机箱里面设备坏掉了？这个一坏连接整个设备的网络都有问题啊，那维护就不是一点点啊，但是等等，张大妈怎么会知道这么专业，就算是师傅去搞维护也要拿工具去测才知道没有信号进来换设备啊。我带着疑惑，我说“张大妈，”张大妈正气凌然的说“”我不死心，接着说，“”我仿佛看到张大妈大手一挥，“”我……………………张大妈看我不说话，问我“小唐，这是没有信号吧。”我说“张大妈…你别开机只开屏幕不开主机…你按一下主机开关按钮…”一会儿，电话里面传来张大妈欢呼雀跃的声音，“来了来了，有信号了。谢谢你哈小唐。”“不用谢…………………………”
你碰到过的最难调试的 Bug 是什么样的？,"['在 Quora 上有一个和 Bug 相关的热门问答帖：《', ""What's the hardest bug you've debugged?"", ' | 你调试过的最难 Bug 是？》我大中国的程序员攻城师们遇到最难调试的bug是什么呢？欢迎吐槽！']",审核(第2次),小的是和另外几千人给一个工业母机做软件的。这个母鸡差不多5亿人民币一台，一般大宗生产需要个百十来台满足产量需求。一台母鸡停产一秒就亏150多人民币。一个软件bug造成一个母鸡停产一天一套上海内环三居室就亏没了。所以我们每写一行代码都是战战兢兢…有天一线客服反馈一个客户怒得拍桌子的问题，一个母鸡精度会突然下降100%，检测精度的传感器报警，导致母鸡停止下蛋。按照故障查处协议，发现重启系统就好了。然后这个情况一周出现一次，不固定。每次出现就损失一台…开发部门紧急安排人手排查。虚拟母鸡模拟，根本不会出现这么极端的问题。各种静态动态分析控制精度的源代码，都没有问题。硬件部门排查相关传感器，也没问题。在内部真实母鸡上还是无法重现。绝望之下还查阅了当地地震纪录…于此同时，派我到客户那儿，在出事母鸡上结合总部大牛远程会诊，仍然没有头绪。一环套一环的程序上，都没问题，每个输出输入，都正常。然后哪天，duang，读出的精度就跳了。（当然物理上没有duang这一声），一周后我灰头土脸回来。算了，最后客服建议客户重新安排维护时间来避免独立重启。赔送了客户付费应用。并说开发部门对这个问题需要从长计议。三个月过去了，某天在食堂偶然听到坐对桌的硬件部门人扯淡他们有个供应商刚汇报了他家寄存器发现了bug，在某一个地址上写不进去，但也不报警啊！听了真是要报警了！然后我们软件这边就电光火石般开窍了…一看出事母鸡果然用的是那个批次的板子…别的母鸡虽然也用那个板子，但不会遇上那个地址…这个倒霉催的母鸡恰巧累计一段时间就会遇上一次…一个数字正常进去出来就给截了一半啊…后来给那个母鸡升级了那个板子的固件就再没问题了…
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],慕尤才,"相信每一个计算机科班出身的同学或许都有这样的经历：在大三的某一天，仿佛打通了全身筋脉一般把三年的所学：“数电里的与非门————汇编语言——C语言——C＋＋语言——Java语言”。所有知识全部串联了起来。所有这些语言的出现都仿佛都有了必然性和追根溯源的历史感。**阅读指引**读懂此文，需要以下基础:1. 至少写过50000行的代码;2. 汇编基础（静态数据段，代码段，堆栈段）。有以下或者类似知识就更好了：1. C语言编译，C++对象模型，MFC反射的实现2. JAVA的解释器运行原理3. 使用过javascript，Python，PHP：感受过代码和类型系统在运行时的自由程度的不同4. **序 —— 一些问题**1. 程序设计语言的目的是什么？2. 为什么大多数语言有控制流？逐行执行+跳转。这与我们的需求差很远（例如一个教务管理系统、一个自动打车APP）3. 为什么类型申明在C语言中要与控制流隔离开来?4. 现在主流语言最基本的元素是？5. 有没有语言它的类型结构，在运行时也可以改变？动态性？什么是动态性？1. 编译后确定了什么信息，之后不再改变；2. 运行时可以改变、添加什么；3. 运行时是否保存着类型信息。程序中的信息分为几类？1. 数据信息a) 编译时Meta-Data元数据（类型框架、空间占用）b) 运行时Meta-Data元数据（继承体系、用于new或者反射）（特别区别编译与运行的Meta-Data的不同。）c) 堆栈段中地址偏移（C++的switch case中不能声明变量、共享内存）d) 静态段中地址2. 指令信息a) 代码段（动态性需要操作系统或者虚拟机支持，例如动态链接库，动态类加载，自生成代码）**语言举例****汇编语言**汇编语言没有动态性吗？没有。首先，寄存器、数据段、堆栈、代码段完全由程序员控制。完完全全是写死了的。然后，根据的规则；取指令，执行，取指令，执行……既然都有数据段了，还要堆栈段来做什么？这不是多余？一开始本没有堆栈，直到60年代出现了module模块化，才有了堆栈。汇编中的模块叫子程序，不过仍旧靠程序员全权控制。堆栈和模块化的优点有？1. 递归2. 功能分离到模块，可复用3. 封装作用域堆栈和模块化的缺点有？1. 时间上：保存现场、还原现场的代价（另，高级语言编译“消除尾递归”节约部分成本）2. 空间上：爆栈的危险**C语言**C语言比起汇编多了什么东西？1. 编译器2. 表达式（相比汇编，可以处理多个操作数了。）3. 函数与模块｛｝（真·模块化，栈操作无需程序员完成）4. 类型（原子类型、结构类型、数组、指针）5. 头文件，库总之，C语言并没有比汇编多了新的特性，它只是把汇编的繁琐操作抽象出来，让编译器完成，减轻程序员负担。编译器的作用是？（减少程序员负担）1. 解析表达式，控制流（汇编中指令只有1-3个操作数，而表达式可以多个操作数）2. 模块和函数的抽象（完成堆栈中保存恢复现场的工作）3. 类型变量的管理（所有变量被替换成直接访问的地址，最快的访问速率）4. 代码优化变量是替换成可以直接访问地址的？a) 编译时的Meta-Data（struct的成员，数组的长度，以便替换到指令流；只在编译器中维护，编译结束后丢弃）b) 计算出每个变量相对于该模块的偏移（一旦算出该偏移地址，将固定在执行码中，无法改变；就是说编译完成后，所有变量的偏移地址都固定下来了。）c) 对变量的存储进行管理（所有的变量/内存地址的布置，都是在编译时确定的；也就是说，可执行码中没有类型信息，只有地址，任何数据都是地址来操作，完全和汇编类似。至于寄存器的安排，那是更下一层的类似缓存策略算法的结果。）编译出来的执行码与汇编的执行码有特征的区别吗？没有。特别是在编译器优化之后。无法通过执行码，区分汇编和C程序。打个比方，一只“程序猫”在黑笼子里，在里面喵喵的叫，无法通过它的叫声来判断它是“汇编猫”还是“C语言猫”。从效率上来讲，C的多余代价在哪里？1. 编译的时间2. 模块的堆栈操作总之，经过优化的C程序执行码与汇编效率几乎相同。因为从理论上来说，C并没有引入运行时的新机制。我理解的C语言只是一种汇编的宏而已。**C++语言**（推荐《深度探索C++对象模型》）C++语言比C语言多了什么？1. 成员函数2. 类型继承体系3. 虚函数、虚继承4. 模板5. 涉及到了多种编程范式（开始更抽象，语言逐渐开始脱离冯氏结构。）其中，面向对象的思想，让程序与现实事物的关系更加紧密。程序设计的负担，也因为OO与设计模式的流行，而变得轻松。编程范式是什么？就是一套指导思想行为准则。（例如，C是过程式，Haskell是函数式，JAVA是面向对象，Python是简单的大杂烩，shell是调用命令的，lua是调用c程序的，PHP是写页面的，ProLog是线性逻辑推理的。再例如，UML是描述规格specification的，XML是存储数据的。再再例如，CSS是描述网页表现的，HTML是描述网页内容的。javascript比较神奇，不敢说。）C++有什么编程范式？1. 过程式（使用STL的类C语言编程）2. ADT式（自定义抽象数据类型，继承；但是不用new，不用virtual；拷贝构造；为了防止资源泄漏，也发明了RAII的方式进行资源的初始化和释放）3. 面向对象式（使用new，使用virtual，需要指针或引用；实现多态。）4. 泛型编程（《Modern C++ Design》各种奇淫技巧，业务层代码比较少遇到）C++编译器是怎样实现的？C++开始有一个叫做cfront的编译器，即把C++语言先翻译成C语言。然后再用C编译器来编译，C的编译器并不知道此段代码是来自C++还是C。C++语言特性分别是怎样实现？简单说。1. 成员变量：和C语言的struct 类似，最后也会被直接替换成地址，便于高效访问。2. 成员函数：使用特殊函数名编码方案，翻译成C函数，并添加this指针作参数。（如___clsA12345func001(...,clsA *this)）3. 类型继承体系：通过C++编译时的Meta-Data来实现。即在编译时，编译器是知道类型信息与继承体系的，但是编译成C语言后就丧失了此类型信息。4. 虚函数、：为了支持多态，这也是“面向对象”最重要的特性，使用了虚函数表和虚基类表。注意，运行时多态是通过运行时查表实现的。稍后详细说。5. 模板：通过代码复制的方式实现。每次编译都需要重新编译，不能编成库文件直接使用。C++编译器的准则与virtual机制？1. 首先，C++的编译准则，希望做到与C一样的效率。希望做到以下：——a) 没有运行时调用间接性。任何数据在运行时都是一个地址直接就访问到。——b) 没有运行时的Meta-Data。无需通过Meta-Data来访问某个复杂的类层次。——c) 所有的数据都希望用C中struct来实现，即在编译时就确定好对象及其成员地址。2. 以上，在过程式范式，与ADT范式中都是成立的。3. 但是，在面向对象范式中，渴望做到：**需要维系着同一个继承体系成员结构的一致性，只有这样，才能保证运行时的多态性。即希望通过同一个入口，访问到父类或者子类的相同数据成员、函数成员，而不在乎具体对象的是父类还是子类。**C++的virtual机制如何实现的？a) 虚函数i. 虚函数，运行时，每个有虚函数的类型（哪怕是子类）都维持着一个，这已经是运行时的Meta-Data，通过查表，即可找到对象自己的虚函数。ii. 例如clone肯定是object.__vptr__Base->#3()，无论具体的对象。b) 多重继承——如何处理后继的base基类？由编译器判断指针类型并加上相应的偏移。c) 虚继承——添加一个虚基类指针，指向共享部分。这样的缺点有两个：1. 虚基类的子类都要背负一个基类指针指向共享部分。如果继承了多个虚基类，还需要多个这样的指针。（Microsoft的解决方法是增加一个虚基类表，类似于虚函数表。）2. 虚继承链条的增加，会导致间接访问的层次增加。例如两个的串联。跨平台的级别有哪些级别？——头文件，库，源代码1. C++确实在源代码的层次是可能跨平台的（例如《POSA2》中加了针对不同平台的各种宏的代码）。2. 也可以通过相同的头文件去访问不同平台的库。3. 但是，不同操作系统中的不同的API大大增加了跨平台的难度。4. 跨平台的责任留给了程序员（充斥着大量宏的C++跨平台代码确实让人头疼。）5. 编译器面对不同的系统也不敢作为，它只是负责编译源代码，链接。如何使用C++才能保证其高效性能？1. 有额外负担的机制：虚函数，虚继承，拷贝构造。2. 用一次虚函数，多了一次指针寻址的效率损失，并且相对于inline内联（另，inline是编译器优化的重头），还损失了保存和恢复现场的效率。3. 用一次虚继承，也多一次指针寻址的效率损失。（另，虚基类没有成员变量没有虚函数的时候会被优化。这也是JAVA可以多重继承接口interface的原因。）4. 不要使用virtual在复杂的多继承，深层次继承中。5. 编译速度会较慢：virtual机制会使编译器处理更多的Meta-Data。**JAVA语言**（推荐《本地Java代码的静态编译和动态编译问题》）JAVA语言比C++语言多了什么？1. 虚拟机a) 跨平台b) 动态编译c) 动态特性2. 没有指针3. 没有类的多继承，有接口的多继承。4. 统一的库从编译来说，JAVA比C++迈出了一大步。它的跨平台特性和运行时的灵活性，为JAVA自己以及未来语言都提供了很多可能性。虚拟机的好处有什么？1. 跨平台：在OS与字节码间隔了一层。实现了程序员无负担的跨平台。2. 动态编译：许多信息不必在编译后确定，为动态特性提供可能，稍后详细说。3. 运行时维护着类型信息，甚至可以加载新的类型。（CORBRA依赖这个实现）JAVA编译执行的过程是怎样的？1. 编译后产生一个基于堆栈的字节码。2. JRE在不同的OS上提供支持。3. 起初的JRE是解释执行的，效率低下。a) 获取待执行的下一个字节码。b) 解码。c) 从操作数堆栈获取所需的操作数。d) 按照 JVM 规范执行操作。e) 将结果写回堆栈。JAVA是如何解决执行效率低下的问题呢？使用JIT（Just-in-time）编译器进行动态编译。JIT（Just-in-time）是怎样运行的呢？如何解决了效率的问题？ 如上图：1. 每次按照一个function来编译。转成中间表示，并优化其效率，再生成可执行码。2. 编译器的编译线程和执行线程是分开的，应用程序不会等待编译的执行。3. 分析框架Profiler会观察程序行为，对频繁执行的function进一步优化。（例如function内部对象维持一个池不必每次生成。）动态编译的优点有什么？可以根据程序的行为，优化其代码1. 例如频繁执行的function——热方法2. 例如arrayCopy方法，如果每次都拷贝大段内存，在指令集中有特别指令可以加速。3. 例如类层次结构，多态的优化。（大多数虚调用都有其固定的一个目标，JIT因此生成的直接调用代码比虚表调用代码的效率会更高。）动态编译的缺点有什么？1. 大量的初始编译会影响程序启动时间。2. 运行时候的编译，行为分析都需要花费时间。3. 运行效率达到稳定需要时间。4. 实时GUI型的程序不能忍受“动态编译”和“GC”带来的延迟。JAVA如何解决实时的需求？使用AOT（Ahead-of-time）编译器：预先编译成为可执行码。AOT（Ahead-of-time）的缺点:对于一些动态特性的支持效率低下1. 反射机制2. 运行时类加载JIT与AOT的对比总体来说，JAVA适合怎样的应用呢？JAVA比较时候需要长期运行的应用，例如Web服务器，Daemon服务。**函数式语言**函数式语言通常有哪些呢？1. 函数式语言a) Lispb) Schemec) Haskell（纯函数式）d) F#？2. 包含了函数式特性的语言a) Pythonb) Javascriptc) JAVAd) C?函数式语言有哪些特性？1. 函数无副作用，只对输入输出有作用2. 高阶函数，lamda演算。(这个像C函数指针，但是它是高阶的，即返回值可能也是函数)3. 没有过程，类似规格说明的语法，更容易理解，自解释。4. 基于list的编程，函数更通用。5. 惰性计算（这个很像“树形DP”）6. 有对应的数学形式化表达，有可能证明其正确性。（最终目标可能是保证程序没有bug。）7. 其模型适合多核或者分布式的计算。a) 不变性（immutable）b) 惰性计算/按需计算（lazy evaluation）c) **最重要的是，由于函数式语言不可在同一数据上做修改，每一次运用一个函数都会在新的位置产生新的数据，这与过程式语言在同一位置对数据做多次操作不同：函数式语言的函数依赖于前一次函数产生的结果数据，过程式语言依赖于数据的位置。这里函数式语言就暗含了计算的依赖顺序，如果没有前后顺序关系，就可以并发。而过程式语言没有指定这个顺序，就需要通过加锁、Actor、Channel等模式来指定这个顺序**总的来说，函数式语言，向着更抽象迈了一大步，更像是数学上的表达，几乎与断绝了关系。函数式语言的劣势？1. 效率不高（因为其抽象，远离了冯诺伊曼体系）2. 平台以及开发环境都比较简单。3. 缺少推广，应用不广泛**逻辑程序设计**ProLog语言，线性逻辑。人工智能语言。没有接触过。**总结**动态性有哪些呢？1. 多态性：运行时根据具体对象来访问属于它的方法。（而不理会指针的类型。）2. 反射：运行时维系着类型结构的Meta-Data。3. 运行时类加载：运行后再次加载新的数据类型和指令流。4. 动态链接：OS根据按需链接库文件。编译语言 和 解释语言 的分界在哪里？语言本身并没有编译类型或者解释类型。（例如：JAVA也可以静态编译后成可执行码。）只有少数运行时特性是依赖于解释型的。（可能需要运行环境的支持。）为什么解释语言都需要虚拟机或者运行环境支持？动态编译，运行时Meta-Data的保存，这些功能对于每个程序都是一致的。所以把它们分离开来，不必每个程序植入这些代码非脚本语言 和 脚本语言，我理解是负责调度其他代码的语言。例如shell脚本（调用命令），lua（调用C）。跨平台分为哪些层次？1. 源码跨平台（C，C++，但是因为系统调用接口不同，程序员负担太大，但是汇编却不是。）2. 执行码跨平台（JAVA，有些语言直接从源码解释执行，例如Javascript，PHP）发展历史（推荐《近看图灵碗 (一. 从苏黎世到巴黎)》）学术上有哪些实验性语言？1. Fortran2. ALGOL583. ALGOL604. Lisp5. smalltalk常用语言过程式：C，ALGOL，Pascal，面向对象式：C++，smalltalk，JAVA，Delphi函数式：Lisp，Scheme，Haskell，逻辑式：Prolog脚本？PHP，Python，Ruby存储描述信息：XML，CSS，HTML**回答问题**程序设计语言的目的是什么？1. 控制数据2. 控制指令流为什么大多数语言有控制流？逐行执行+跳转。这与我们的需求差很远（例如一个教务管理系统。）逐行执行，很大程度是起源于冯诺依曼体系结构。为什么类型申明在C语言中要与控制流隔离开来?因为在编译时，具体的类型信息，要转化成地址偏移，然后替换控制流中的类型变量。现在主流语言最基本的元素是？控制流 与 类型系统。有没有语言它的类型结构，在运行时也可以改变？Javascript只有对象没有类，使用prototype的方式继承，运行时给某个对象添加新的数据成员。没有类型体系。许多后来的语言在运行时都保存着类型信息的，例如Python，JAVA。**综上所述**控制流——指令流类型系统——为了计算出变量地址信息区分运行时的Meta-Data与编译时的Meta-Data"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],Belleve,PHP：没有优点Java：库多，库多，库多Python：语法清楚，语法清楚，语法清楚C：能操纵底层，能细粒度优化性能C++：啥都有，啥都有，啥都有————————————————————————————————————————————汇编：C：Java：C#：PHP：Python：Go：Haskell：Lisp：最后是 C++：（图部分为自制，部分来自网络）
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],董飞,"有个笑话，让程序员打架的一个最有效的方式是去讨论区问大家那种编程语言最好，这就会没完没了的讨论。大致分成C++派，Java派，Python等脚本派。C/C++: 可能很多人入门都是啃着的C程序设计，这种语言很强大，既高性能，又灵活（指针，地址，二维指针，指针数组），名词特别多（多态，重载，重用，范型，模板类，），坑也特别多，容易造成内存泄露，，在大学里面吃了不少苦头，疯狂看各种C++经典，秘籍，后来去了创业公司和百度都是大量使用，里面也很多人玩的炉火纯青，面试时候经常出个写个线程安全的C++，析构能否多态或者什么写个调用顺序，让面试者骚手挠腮，欲罢不能，想想自己也折磨过这些面试者，真是罪过啊。这几年视野广了，不接触C++了，回过头来看还是觉得当年有些走火入魔，没必要自己折磨自己。: 估计是目前用的最广的项目语言，容易上手，概念简单，无数的库，大量的代码。我就不多介绍了，我自己也是大半的项目用Java写的。缺点时配置比较烦，很多什么XML，Config，适合写服务端。：大量应用在大型游戏的脚本语言，主要是高性能，语言规范精简、运行时库小，与C/C++交互方便，我在百度做云计算平台时候也是用它作为嵌入式脚本。：跟Perl, PHP,合成3P语言，都是脚本:) 非常方便实用，初学编程就可以拿它练习，有很多方便的库，比如urlib, 。有句话说：人生苦短 我用Python。做数据分析的有个超好的工具叫，它是结合在线notebook，可以交互式编程，非常爽。据说Python的创始人在Dropbox，当年他简历就一句话，说I wrote Python. 在面试Google时候还被一些人误会，想会python算个啥，但人家是作者。有一本书  用Python作为实践做机器学习，推荐给大家。：Google开源的语言，比C++容易上手，却有相似的性能，很多从Google出来的人喜欢，据说Square, Pinterest就在用。Go语言有哪些好处，谁用谁知道，：各种集大成，面向对象，，面向过程。我目前也在学习，东西实在太多，Coursera上面有Scala作者的一门课， 公司技术部也主推这种语言，这也是为啥我们墙上员工证书中最多就是Scala这门课的。另外著名的Spark，Kafka也是Scala写的，确实在高性能，高并发上面表现不错，又保持了优雅精炼的写法。值得玩味。: 本来这是个前端客户端的动态语言，做一些页面特效，主要特点是天然支持异步，又跨平台，弱类型，比较安全 （有sandbox），有人把它拓展到后台，随着V8，Node.js, Angular出现也显得越来越厉害了。还有一些语言，Ruby，R，Object-C, Swift，Matlab, Perl, SQL, D, Lisp就是偶尔用了，有个。"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],Yeebin Lee,PS：应大家要求重新编辑了！千万别惹程序员下图一张昨天我公司内部被传递的图片。经典的SQL注入式攻击。千万别惹程序员这是一个有技术含量的号牌遮挡。我们先不说其是不是能奏效，不过，这个创意相当的NB啊。当你驾车通过某些路口时，被摄像头捕捉到你的车牌，通过OCR变成文本，然后插入数据库，于是，上图的这个车牌就成了SQL注入。（不要以为车牌的OCR技术还不行，这项目技术已经非常成熟了，无论是国内还是国外）。这张图片就如同“”中说的一样——永远不要相信用户的输入。如果编程语言是一种刀下面这个图是把编程语言看做是一种刀，那么会是什么样的。这个图我个人感觉很有意思。对于这个图，最好不要解释，意会就好。不过，我却有点想不解风情，忍不住想解释一下。详细移步：Java犹如宫泽贤治的《不畏风雨》中出现的、性格木讷的女孩子。从小就由于迟钝和大食量等特征被别人当作笨蛋，从小学入学开始进入田径部、坚持跑步，在中长跑中经常取得好成绩，给人以活泼的印象。是十分努力的女孩子。她的家境并不算好。父亲Sun是有才能的艺术家，但不擅长理财，在她14岁的时候因为苦于借债积劳成疾而去世。她被Oracle叔叔收养，那时还与Google叔叔之间因为对她的扶养权问题而引起争端并闹上法庭。在周围的人都担心，正值青春期时她在这样的处境下会不会一蹶不振的时候，她却处变不惊、继续着每天练习跑步的生活。朴素的、认真的、难说是聪明的她，进入高中后不知是不是稍稍开始对异情在意，被人看到她偷偷地学着别的女孩子的时尚穿着在街上行走。虽然会受到“虽然很努力，也许稍微有点过时”、“那衣服与Java的印象不合”之类的否定评价，但感到“意外地很萌？”的好意的人也很多。喜欢喝咖啡，只喝印度尼西亚产的。其本人曾说过“喜欢咖啡胜过三顿饭”，不禁让人稍稍担心“这样对健康没问题吗？”C++苗条的双腿和协调的五官。被许多人称作“IT界首屈一指的美女”的她，也因为拥有插花、茶道、钢琴和小提琴、柔道、剑道、合气道等等才能而出名。她的粉丝大多很狂热，还存在着“黑暗军团”这样的粉丝俱乐部。黑暗军团的是规模仅次于共济会（Freemason）的巨型团体，一般人无法入会。据说如果能回答出对她非常狂热的问题，就会有察觉到的军团成员来询问“你愿意进入黑暗军团吗？”与她同父异母的姐妹Objective-C一心专注于弹钢琴，她的专注被IT界的天才史蒂夫乔布斯（也被一部分人称为紫色蔷薇）相中，而一跃成为明星，而C++则是由于其美貌和才能被人关注，长年坐稳业界明星的宝座。姐妹二人真可谓是对比鲜明。她根据心情不同频繁地变换发型和服装这一点也很出名。昨天还是和服配黑发，今天却是红发哥特系登场之类的，因为她的变身而使轻度的粉丝惊奇道“啊嘞？今天是C++小姐吗？”的事也常有发生。远离业界时私下经常穿HYSTERIC GLAMOUR的服装。关于她的出身年月日其事务所并不公开。虽然也有出身于1983年一说，本文采用的是在一部分粉丝中流传甚广的1985年10月14日说。其间也流传 有“她自己也许也记不清自己的生日……”这样煞有介事的传言。与其说“C++小姐的话记不清自己的生日也不是什么不可思议的事情”，倒不如看作是她天真烂 漫的性格的表现。Python由Guido父上养大的深闺中的大小姐。她出身于荷兰的阿姆斯特丹，但在小时候就搬到了美国，父亲也在家里使用英语，所以不怎么会说荷兰语。她个性随和。最出名的是她听C++宣布“想出去旅行一趟改变一下形象。200x年回来哦”出门旅行后（结果回来的时候已经2011年了……），放言说“我也稍稍出门旅行一下，公元3000年再回来哦”后出门数年未归。虽然有着这样冒失的行动，但多亏抱着“养成大家都喜爱的孩子”的心愿的Guido父上大人的教育，实际上和她接触后会觉得她非常容易亲近。前些天，她来到作者的朋友的公司打工（她现在似乎在边上大学边打工），被人们评价为“能充分融入工作、八面玲珑、给我们帮了大忙”。她不怎么说多余的话，彬彬有礼的样子，被评价为是在“天真烂漫、自由第一”的人众多的业界中与众不同的存在。据说她擅长的科目是数学，经常看到她轻松地解决各种统计相关的难题。喜欢穿白色的连衣裙或浅粉色的开衫这样清新的服装。实际上她还喜欢爬行动物，据说在家里还有养蛇。粉丝们经常讨论“她会给宠物们起什么样的名字呢？”这样的话题。大多得出的都是“肯定是Monty 吧”这样的结论。会不会飞就不得而知了。（估计指的是英国的六人喜剧团体Monty Python的作品The Flying Circus，译者注）Ruby由松本爸爸养大的日本的女孩子。因为生日在圣诞节，人生最大的烦恼是生日礼物和圣诞节礼物变成一份了。出生地是岛根县松江市，除了旅游和工作以外没有到过其它的县。由于受的教育是自由奔放式的，她性格好动、好奇心旺盛。平时是一个率真的好孩子，但偶尔也会看到她喜欢恶作剧的一面，这让周围的人十分困扰。看到她的身影时经常会想起IT业的“Just For Fun !”这句话。小时候过着一个人在荒山野岭到处跑的生活，10岁的时候与一个叫Rails的女孩成为朋友，生活开始变化。两个人玩耍时停在了演艺事务所门前，谈起 可以两个人结对进行演艺活动。以“Ruby与Rails”的艺名出道、主要从事杂志模特，也有拍过电视广告，所以很多人都听过她们名字。人们想着她在这多愁善感的年龄段体验各种演艺活动、性格多少会产生一些变化吧，但在前些天与她久违的谈话中，却惊讶地发现她仍是与从事演艺活动之前一样行动自由奔放。虽然行为举止多多少少显得更加稳重，其喜欢恶作剧、活泼的本性却和以前一样没有变化。想着已经是高中生了差不多也要开始穿一些成熟一点的服装的她，对于洋装却和小时候一样穿着Mickey Mouse。虽然她个子小又是娃娃脸与这样的衣服很配，不过这样真像一个女高中生吗？她的粉丝也分为想要她一直保持现在的样子，和想要看到她更成熟的样子的两派。PHP以强化Web世界为目的制作出来的女性机器人。竖着的头发是用作天线来随时接收主人的命令的。为了有与人类相近的触感，使用了硅树脂来制作其皮肤。内部是类似于刀片服务器的构造，常常使用多台服务器进行复用。因此体重比人类更重一些。在她最初登场的时候，还能看到她关节可动部分的骨架，行动也很僵硬，与人类的形象差别很大。然而经过了18年间6次的大版本升级之后，其行为和言语已经渐渐变得像人了。最近更是达到了像初音未来这样（比起人类仍然有少许违和感但已经十分自然了）的级别。虽然笨笨的、工作时也磕磕绊绊的，但由于她遵循、服从主人的命令，也有很多人成为她的粉丝。她的粉丝俱乐部官网“PHPer！”无需入会费便可简单入会，是会员数在IT界首屈一指的大团体。对于她持拒绝态度的人也很多，常有“她的行为在生理上有些难以接受”、“如果再聪明点就好了”、“与她稍有过接触但觉得还是与人类差别很大”这样的评论。平常穿从Forever12和志村买来的衣服。想着穿便宜的快速时尚（fast fashion）衣服便可以将省下的钱花在机器开销上。可以说是标准的机器人的效率优先的花钱方式。或许会有她也在意流行、为样子烦恼的那一天吧？C#在著名的微软公司接受精英教育、11岁时便跳级进入大学学习、倍受人们关注的少女。也被称为“IT界的最强幼女”。因为与C++的名字很像，一段时间内盛传“难道是私生子吗？”的流言，实际上两人没有直接的血缘关系。也有报道称两人是远房亲戚，但实际情况如何则不得而知。似乎喜欢成熟的行为、讨厌像小孩子一样玩耍。有生日的时候收到父母送的名为安迪的毛绒玩具时说道“这是啥。没sense。不要”的传闻。然而对于食物的兴趣却仍停留在小孩的阶段，多次目击到她在学校食堂点儿童套餐的样子。不喜欢喝咖啡，就算是甜味的罐装咖啡也会令她皱眉头。虽然偶尔会见到她意外地孩子气的一面，多数情况下见到的还是她说话、待人接物彬彬有礼的样子。是一个既有成熟的一面又有稚气的一面的孩子。由于还在成长期，见到她时常有“又长高了啊”、“有些像大人的样子了”这样的感慨。一直会期待着下见到她时会长成什么样子。常穿秀兰邓波的洋装。据说都是她本人挑选的，与她自己非常相配。她的可爱让人们无论男女都会成为她的粉丝。她的志向是在大学毕业后不仅在养育她生长的微软公司的旗下工作、还要活跃于整个IT界。虽然没有问到更详细的计划，但据说是要做出能让苹果和企鹅等也能和睦相处的东西。到底会做出怎样的东西来呢？JavaScript在争议地区长大的17岁的女孩子。常常面无表情、谈话时总给人以一定的距离感。虽然与Java的名字很像，两个人之间却没有血缘关系。在当时Java这样的名字很流行，所以父母也给她起了类似的名字。她本人似乎对自己的名字并不在意，有时也以“ECMA”的笔名进行活动。偶尔也会被叫“JS”的外号，对此则更不在意，甚至对这种称法公然无视。她的生涯非常不幸。刚一出生祖国便爆发战争。懂事之前便母亲去世、离开了父亲。在大人们任性的争斗中，她学会了将自己藏在壳中、保护自己周围的生存 之术。同年龄的女孩子随着年龄的变化都在挑战各种风格的时候，她却不顾周围的话语、一个人继续闭锁在壳中。当时就是非得这样才能生存的艰难环境。由于有了这样的儿童时期，她的说话、思考、待人接物的方式与其它的孩子都稍显不同。有很多人在与她说话时都会烦恼该怎样说才好。不过，也有人对她持有简单的一根筋的思考方式“容易接触”、“某种程度上来说，很好理解”的印象。现在，她的国家正向努力解决纷争、开拓新的居住土地的方向前进着。大人们虽然仍旧任性地互相斗争，至少在这几年里，已经没有发生像以前那样互相憎恨、互相残杀的战争了。在开始复兴的祖国里，她如今应该能幸福地生活着吧？什么时候才能看到她像同龄的女孩一样欢笑呢？
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],宋仁投,你遇到了一群敌人！你要怎么办呢？问问你的大将吧！C：拿出一根棍子，一个一个把敌人砸死。C++：用机关枪。java：我打电话叫十万个基佬！perl：我会功夫！ruby大喊着拿着武士刀冲上去了。python：用氢弹。lisp：我先把敌人分组一下吧！haskell：我们可以用歼星舰啊！PHP：让我们把敌人老死吧！
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],郭小灿,我的简单理解是：C++ 是为又聪明又努力的人设计的Java 是为不聪明但努力的人设计的Lisp 是为聪明但不努力的人设计的Python 是为像我这样的人设计的。。。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],梨梨喵,"这个问题已经有不少很详细的资料了//============口胡,PHP明明是这个:LispFortranPerl JavaScriptVBScala最后是Python:"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],程序员吴师兄,下面的图对比了最流行的9种编程语言，来帮初学者选择最适合自己的。我是 ，持续分享校招经验、CS学习、面试、算法等内容，在计算机、程序员领域相关的问题下，点击下方链接了解更多。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],leviathan,转一篇包含全系列武器对比的文章——《如果编程语言是种武器》对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己。▲C语言是，很老但可靠▲C++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器▲Perl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它▲Java是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死▲Scala是的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话▲JavaScript是一把宝剑，但没有剑柄▲Go语言是一种自制的“if err != nil”发令枪，每一次发射后，你都必须要检查它是否真的发射了▲Rust语言是一种3D打印出的枪。将来也许真的能派上用场▲是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头▲Python是一种“v2/v3”双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好▲Ruby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫▲PHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎▲Mathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它▲C#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光▲Prolog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子▲Lisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],番茄,PHP、Java、python、C、C++，编程语言都各有什么特点或优点？C、C++属于编译语言，源码先编译成机器语言，然后直接使用编译结果运行，效率高。PHP、python属于解释性语言，不需要编译，使用时由解释器解释执行，效率低。java源码会先编译成字节码，然后JVM解释执行，半编译半解释。由于JVM的优化，执行时不用逐行解释，效率上更偏向编译型语言。不过，随着硬件效率的不断提高，程序员开发效率比程序运行效率要重要得多。C作为通用的基础编程语言，编程开发入门必备，特点在于偏向计算机底层操作，多用于性能要求严格的领域，如驱动，内核。优点：编译效率高，底层开发时相对于汇编而言移植性好，能直接访问物理地址。C++以C为基础发展而来，可认为是C的扩展。相对C增加了类、继承、重载、类模板、C++标准库、模板库等。C面向过程，C++面向对象。优点：继承了C，在保持高效的前提下又有所发展。JAVA的特点在于跨平台，“一次编译、到处执行”。语法上相对于C++，有自己的内存回收机制，不用指针，不用考虑内存分配和回收，程序可靠性高。框架和库都非常多，应用广泛，从桌面应用、web、企业级应用到移动端的Android开发都有使用。容易找工作。优点：简单、面向对象、分布式、解释执行、鲁棒、安全、体系结构中立、可移植、高性能、多线程以及动态性。PHP属于，主要应用于 web端，发展成熟、网络上很多的模板和框架，学习资料也多，快速建站网络开发必备。简单概括为：入门简单，广泛流行，总是被黑。PHP在语法上和C相似，两者相互学习容易。优点：使用变量前无需定义类型简单，跨平台，支持多，框架成熟，拥有众多库函数，可以直接实现Key-Value存储。Python同样简单易学，相对PHP专注web，Python的应用领域更广泛。语言上更简洁，接近自然语言。优点：开发快，功能强大，程序易读。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],薛福星,Java厚重，不易携带，每一样工具都经历了考验，无数人使用，各种场合，各种工作得心应手。Python工具不少，便于携带，但是每项工具都是缩微版本，适合随身应急使用，也适合收藏。但是不适合正经八本的干活。C系语言生产工具的工具。PHP按惯例黑一下。$$$$$$$$$$$
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],eechen,把编程语言类比到王者荣耀里的英雄。Java就是吕布，没钱就没伤害也没坦度，前中期都要发育，先出防装再堆输出装，装备起来了，砍谁都是几刀的事，但前提是附魔，没有附魔还是打不出伤害。Java就这样，你必须按照框架和的条条框框（附魔）来做，否则你就发挥不出Java的作用。Java项目需要投入更多的财力人力（发育），没有好的服务器和足够的开发时长，也发挥不出Java的作用。PHP则是亚瑟，新手英雄，很容易上手。不需要什么操作和装备，开局就能打出不俗的伤害，而且没有蓝条，自带回复。发育起来后，伤害不算高，但也不低，双沉默一套带走脆皮没问题，身板不算肉但也不脆。玩家意识和操作够强的话，打进巅峰赛前十（比如斗鱼）也不是不可能，所以上限也不算低。这也是为什么很多公司起步时选择PHP，开发和运维成本低，见效快，试错成本低。发展起来后，也不是不能用，好比英雄池多了，根据阵容掏一手亚瑟也不是不行。Python是，也算一个新手英雄，机制很全，减速、击飞、护盾、真伤、位移、霸体都有，但大多数机制单独拿出来跟其他英雄对比，都很一般，并不是一个能带飞全场的英雄。C++是韩信，机制全、位移多、伤害高，但身板脆，依赖暴击，容错率低。玩得好，可以带飞全场。C是赵云，比韩信容错率高，操作也更简单，伤害和控制也更稳定。也是一个能带飞的英雄。要练习打野盘活全场，赵云是一个不错的入门选择。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],Miazq,各语言的魔戒之旅。上老图，大概能看个方向。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],九章算法,"如果把编程语言比作国家的话：拥有很多美好的事物，经常炫耀自己，但私底下其实非常保守。乐观，强大，喜欢把麻烦事掩盖起来。时髦，富有，平易近人，有吸引力，但并不是表现最佳的。强势，动态，但无法令人感到激动。强大，严谨，但并不擅长于干实事，逐渐被Java取代。如果把编程语言比作车的话：外形奇特，难以驾驭，但每个人都想驾驭它。驾驶起来很容易，速度不会太快，不容易车毁人亡。可以无照驾驶，适合在路况好、车速<30码的地方行驶。跑得很快，但它可能每50公里就抛锚一次。它除了拥有C赛车的功能，还增加了许多新功能。例如它每250公里只抛锚一次，但是一旦它抛锚，基本上没人能找出是什么地方出了错。--------------------------------以下是几种语言的特点-----------------优点：1. 跨平台，性能优越跟Linux/Unix结合比跟Windows结合性能强45%，并且和很多免费的平台结合非常省钱。2. 语法简单，容易上手PHP有成熟的开发工具，比如NuPHPed，在Linux平台下可以使用Eclipse等等。3. 技术支持性好很多技术工具，比如WebService、Ajax、XML等等，足够应用；还能够使用多种数据抽象层，模板层，方法。4.框架多且成熟比如支持MVC的框架：phpMVC，支持类似的事件驱动的框架：Prado，支持类似Ruby On Rails的快速开发的框架：Cake等等，足够满足你的应用需求。5.面向对象体系，能够适应基本的面向对象要求。适合开发大型项目。6..开源性比如比较知名的开源框架有Zend Framework、CakePHP、CodeIgniter、等，开源论坛有Discuz!、Phpwind等，开源博客 WordPress，开源网店系统如Ecshop、ShopEx等，开源的SNS系统如UCHome、ThinkSNS等。缺点：1.对多线程支持不太好，大多数时候我们只能简单的模拟去实现的。2.语法不太严谨，比如变量不需要定义就可以使用，在c,Java,c++中变量是必须先定义以后才可以使用的。3. PHP的解释运行机制繁琐。优点1.易于学习python虽然是用c语言写的，但是它摈弃了c中非常复杂的指针，简化了python的语法，它使你能够专注于解决问题而不是去搞明白语言本身。2.开源性Python是FLOSS（自由/开放源码软件）之一，Python希望看到一个更加优秀的人创造并经常改进。3.可移植性Python经过改动，已经被移植在许多平台上了。另外，Python解释器把源代码转换成称为字节码的中间形式，然后再把它翻译成计算机使用的机器语言并运行，因而，你只需要把你的拷贝到另外一台计算机上，它就可以工作了，这也使得你的Python程序更加易于移植。4.面向对象面向过程同时支持。5.可扩展性和可嵌入性你可以将Python嵌入到C/C++程序，让你的程序的用户获得""脚本化""的能力。6.标准库以及第三方库资源丰富Python标准库确实很庞大。python有可定义的第三方库可以使用。它可以帮助你处理各种工作，包括正则表达式、文档生成、单元测试、线程、数据库、网页浏览器、CGI、FTP、电子邮件、XML、XML-RPC、HTML、WAV文件、密码系统、GUI（图形用户界面）等等。缺点1.运行速度慢，相比于C++/C运行速度偏慢，不过对于用户而言，机器上运行速度是可以忽略的。2.构架选择太繁杂，没有像C#这样的官方.net构架，也没有像ruby由于历史较短，构架开发的相对集中，所以人人都有不同的方案。优点：1. 跨平台性Java语言中， Java自带的虚拟机很好地实现了跨平台性。 Java虚拟机提供了一个字节码到底层硬件平台及操作系统的屏障，使得Java语言具备跨平台性。2. 面向对象Java是一种面向对象的语言，也继承了面向对象的诸多好处，如代码扩展、代码复用等。3. 安全性运行时Java类需要类加载器载入，并经由字节码校验器校验之后才可以运行。 Java类在网络上使用时，对它的权限进行了设置，保证了被访问用户的安全性。4. 多线程Java除了内置的多线程技术之外，还定义了一些类、方法等来建立和管理用户定义的多线程。5. 简单易用Java源代码的书写不拘泥于特定的环境，可以用记事本、文本编辑器等编辑软件来实现，然后将源文件进行编译，编译通过后可直接运行，通过调试则可得到想要的结果。缺点：运行速度相比于C/C++有些缓慢了，这是机制原因导致的。优点：1. 简洁紧凑、灵活方便C语言一共只有32个关键字,9种控制语句，程序书写自由，主要用小写字母表示。它把高级语言的基本结构和语句与低级语言的实用性结合起来。 C 语言可以象汇编语言一样对位、字节和地址进行操作, 而这三者是计算机最基本的工作单元。2. 运算符丰富C的运算符包含的范围很广泛，共有种34个运算符。C语言把括号、赋值、强制类型转换等都作为运算符处理。从而使C的运算类型极其丰富表达式类型多样化，灵活使用各种运算符可以实现在其它高级语言中难以实现的运算。3. 数据结构丰富C的数据类型有：整型、实型、字符型、数组类型、指针类型、结构体类型、共用体类型等。能用来实现各种复杂的数据类型的运算。并引入了指针概念,使程序效率更高。另外C语言具有强大的图形功能, 支持多种显示器和驱动器。且计算功能、逻辑判断功能强大。4.C是结构式语言结构式语言的显著特点是代码及数据的分隔化,即程序的各个部分除了必要的信息交流外彼此独立。这种结构化方式可使程序层次清晰, 便于使用、维护以及调试。C语言是以函数形式提供给用户的,这些函数可方便的调用,并具有多种循环、条件语句控制程序流向,从而使程序完全结构化。5. C语法限制不太严格、程序设计自由度大一般的高级语言语法检查比较严，能够检查出几乎所有的语法错误。而C语言允许程序编写者有较大的自由度。6. C能直接访问物理地址和操作硬件因此既具有高级语言的功能，又具有低级语言的许多功能，能够象汇编语言一样对位、字节和地址进行操作,而这三者是计算机最基本的工作单元，可以用来写系统软件。7. C语言程序生成代码质量高程序执行效率高一般只比汇编程序生成的目标代码效率低10へ20%。8. C语言适用范围大，可移植性好C语言有一个突出的优点就是适合于多种操作系统, 如DOS、UNIX,也适用于多种机型。另外C语言具有绘图能力强，可移植性，并具备很强的数据处理能力，因此适于编写系统软件，三维，二维图形和动画它是数值计算的高级语言。缺点：运算符和运算优先级过多，不便于记忆，语法定义不严格，编程自由度大，对新手不友好。C++除了兼具了C语言的优势之外，还有一下特点：C++语言的主要特点表现在两个方面，一是尽量兼容C,二是支持面向对象的方法。它操持了C的简洁、高效的接近汇编语言等特点，对C的类型系统进行了改革的扩充，因此C++比C更安全，C++的编译系统能检查出更多的类型错误。另外，由于C语言的广泛使用，因而极大的促进了C++的普及和推广。C++语言最有意义的方面是支持面向对象的特征。虽然与C的兼容使得C++具有双重特点，但他在概念上完全与C不同，更具面向对象的特征。出于保证语言的简洁和运行高效等方面的考虑，C++的很多特性都是以库（如STL）或其他的形式提供的，而没有直接添加到语言本身里。C++引入了面向对象的概念，使得开发人机交互类型的应用程序更为简单、快捷。很多优秀的程序框架包括Boost、Qt、MFC、OWL、wxWidgets、WTL就是使用的C++。！"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],戏梦夏,来个车版的：ref : C:C++C#JAVAPythonPerlLISPHaskellPHPJavascriptMatlabRGo
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],尚学堂,PHP、Java、Python、C、C++这些编程语言，计算机专业的同学基本在大学都学过，而在工作以后基本就偏重1-2门语言，对于Java程序员来说，基本就可以沉溺于Java而无法自拔了，但也偶尔会用PHP写写网站后台；对于学霸级的同学来讲，Python、C、C++有可能会样样精通，因为简单地调用一些库已经无法满足他们的需求，一探究竟才真正的过瘾。其实，各种编程语言没有简单的优缺点，在什么情况下或在哪些方面使用，是由它自身特点决定的。-------------------------前方美图预警---------------------------有人说“PHP是世界上最好的语言”，也有人说“PHP最大的优点就是没有优点”。可以说，她是编程语言中的一股清流，。正因为其，所以对PHP程序员仍然有大量的需求。目前，PHP主流框架依然基于MVC模式，但也在不断地创新，比如Codelgniter框架，性能高、速度快，适用于；Seagull则功能更加强大，代码库的标准化和模块化更高，同时也有较多的文档提供支持。虽然PHP有着清新的外表，但也有着丰富的内心，等待你去探索。说起Java，很多人第一个想到的词就是“”。凡是有Java虚拟机的地方，Java语言都可以大显身手。。在各种编程语言当中，Java是真正见过“大世面”的，所以她也有着世界上最广泛的开发者群体。Java有着easy-going的外表，但当你深入其中时，她会教你如何成为一名真正的“程序猿”。Python给人的印象是“学姐范”十足，她有着，根据开发需要可直接调用。她最初应用于科学计算，任何复杂的数学问题她都能迎刃而解；同时随着AI的兴起，Python也成为了。对于初学者而言，语法简单、功能强大是Python最大的亮点。当你深入其中，图像处理、网络开发等功能也能让你大呼过瘾！如果你同样是学霸，便能轻松和她“配对成功”。作为计算机相关专业的第一门专业课，C语言在实际应用场景中已很难再看到她的容颜。但她却无时无刻不陪伴着我们，Linux就是用C开发的，很多。编程语言的本质是算法，而作为，C将各种算法演绎得淋漓尽致。如果你致力于等领域，这位御姐将会给你战友般的陪伴！C++可以说是C的“姊妹篇”，但和C相比，C++要温婉许多。从功能上看，，。C++开发简洁，运行高效，但因其娇羞的特点，如果没有扎实的C语言功底，你很难读懂她的心思。但她的功能扩展，也使得她一度成为主流的IOS开发语言。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],程墨Morgan,别的我不知道，但是PHP和Python明显优于Java和C++，因为不伤头发！题主还问了C，那就补一下C语言之父——C语言也不错，优点明显。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],momoo,PHP:面向Web服务器编程JAVA:面向各种框架编程PYTHON:面向人类语言编程C/C++:面向内存和数据结构编程附赠几个C#:面向微软产品编程汇编:面向CPU指令编程JavaScript:面向DOM编程
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],人民邮电出版社,：Java是使用程度最为广泛、同时也是目前使用人数最多的编程语言，鉴于龙妈的真命天女身份，同时身边聚集了越来越多的力量，更为重要的一点是，任何人在跟龙妈交手之前，先要了解她的N种头衔——而用Java写的项目，在你了解到核心部分之前，可能先要阅读很长很长的非核心代码……坦格利安龙族风暴降生、不焚者、、安达尔人和先民的女王、草原上的卡丽熙、破镣者、龙之母，龙妈女主光环加身，不光有三条神龙护体，还有大军跟随；当然更重要的，还有好几位智商超群的仰慕者辅佐，就连掐架失手杀爹的小恶魔也投奔龙妈了……1. Java 8实战2. Tomcat架构解析更多：：C语言容易编译，贴近底层，多年占据编程语言排行榜前列，虽然近期份额有一定数量下降……领主泰温虽然已经领便当了，但是他是少数几位对君临整体情况、不同家族的人物背景及未来趋势有深入洞察力的老前辈。、西境守护，兰尼斯特狮族掌门人，詹姆、瑟曦和提利昂之父。手握重权、心思缜密、行事老辣，具有极高的军事和政治才能。被自己嫌弃的侏儒儿子提利昂在父子冲突中失手弄死......如若没有，在权游中，老前辈的筹码很高啊。1. 明解C语言（入门篇，中级篇）2. C语言程序设计：现代方法（第2版）更多：：C++是功能更为强大的C语言，且直接提供面向对象编程和的特性。瑟曦虽然不如老爹泰温那样老谋深算，但是傲娇任性、野心勃勃，处处效仿老爹。泰温之女，君临城鹿族国王之妻，乔弗里、弥塞菈、的母亲，与孪生弟弟詹姆关系亲密，痛恨侏儒弟弟小恶魔。从小被巫魔女预言了一生，比如嫁给国王，母仪天下，三个孩子都会死去……1. C++权威教程（第6版）2. C++与技巧：在人工智能和机器学习领域，Python炙手可热，作为未来之星的囧诺似乎可以与Python一比。临冬城公爵、北境守护、史塔克狼族掌门人的私生子（额，应该说是表面上的私生子，实际身份成迷，广为流传的推测是：龙族疯王长子雷加（龙妈的大哥）与艾德的妹妹绝世美女之子），绰号“雪诺大人”、“临冬城的私生子“、“长城上的私生子”等。同时他也是一个（狼灵），他的冰原狼为白毛红眼的“白灵”。1. Python编程：从入门到实践2. 流畅的Python更多：：借鉴了Java的设计思想，好学，易用，同时兼顾运行效率。小玫瑰聪明机智、处事圆滑，能屈能伸。隶属高庭金玫瑰，师从祖母（老谋深算的奥莲娜·雷德温夫人），年轻貌美，处事圆滑周到。先后嫁给鹿族的（劳勃的弟弟）、乔弗里和托曼（劳勃和色后的两个儿子）。她对权利同样具有勃勃野心，但她的手段比较高明，进入君临不久就受到了城内百姓的爱戴。当观众爱上这个心机貌美的皇后，并期待她跟色后和大麻雀有更多较量时，她就因为色后的一锅端复仇法领便当了……1. C#图解教程(第4版)2. 深入理解C#(第3版)更多：：黑白两道通吃（前后端都能搞定），三观正，洞察世事，偶尔做点小坏事儿，但总体非常受欢迎。泰温次子，因出生时母亲难产死亡，深受父亲厌恶。他喜欢美女、今朝有酒今朝醉，随性洒脱，虽身为侏儒，但智商超群，被迫弑父后投奔龙妈。1. JavaScript DOM编程艺术（第2版）2. JavaScript高级程序设计（第3版）更多：：PHP是最好的语言……三傻是最乖的宝宝……狼族艾德·史塔克的大女儿，先后因为政治联姻和宫斗牺牲品嫁给君临国王“乔大帝”（劳勃死后继位）、小恶魔、小剥皮，又被小指头觊觎。在前几季里是让观众恨铁不成钢的傻白甜（外号三傻为英文谐音，同时表达了中国观众为她智商捉急的情绪）。但是，经历一系列命运的捉弄之后，三傻终于在第6季开始长心了……2. 深入PHP：面向对象、模式与实践(第3版)：出身名门，年轻，潜力无限，兼备特殊技能（并发高性能）……狼族艾德·史塔克次子，理性聪明，因喜攀爬城墙撞见色后和詹姆的关系，被詹姆推下城墙失去双腿。，具备特殊技能，可短时间控制其他动物的意识。临冬城被攻占后，远离权力纷争，带几位随从寻找，对抗异鬼。1. Go语言编程2. Go实战（第2版）：机敏好学，稳扎稳打逐步完善自身。Swift代码少、性能优，二丫话少、行动快。狼族艾德·史塔克次女，从小是个假小子，随身佩戴一枚绣花针型利剑“缝衣针”，性格倔强，出手利落。二丫（艾丽娅谐音，同时是家里的二女儿）亲眼目睹父亲艾德被“乔大帝”处死，之后独身一人流亡在外，复仇的信念支撑她顽强地生长，并习得绝技。1. 从零开始学Swift（第2版）2. Swift编程权威指南（第2版）更多：：SQL是其他关系型数据库的基础，是后台必备技能。而小指头隐藏在幕后，精于计算，事事都跟他有牵扯。君临前御前财政大臣，《权力的游戏》中各种战争的直接和间接引发者，藏于幕后，精于计算，阴险狡诈，纵横捭阖。1. （第4版）2. SQL基础教程（第2版）更多：：OC是一种通用、高级、面向对象的编程语言。詹姆作为名门望族之后，气质出众，但他拥有其他角色不具备的凡人之痛，错爱、忠孝难两全...狮族泰温长子，色后孪生弟弟，痴爱色后。高大英俊美男、武艺超群，表面上冷酷无情，实际是一位具有骑士精神的男士。在断臂之前更英勇无双，断臂之后虽然失去了武力优势，但是开始从多维度思考问题。最让人唏嘘的是，一路走来，我们越来越能体会詹姆是一位悲情的角色。1. Objective-C基础教程（第2版）2. Objective-C高级编程：iOS与OS X多线程和内存管理更多：：Ruby虽然入门难度略高，但是一旦搞定，用Ruby on Rails框架很快就可以搭建一个复杂的网站。梅姨有红宝石，还有巫术和预言能力……梅丽珊卓，光之王拉赫洛的女祭司，据说已经几百岁，但是外表貌美。她的有一条红宝石项链，可以协助施展巫术。她能通过火焰看到未来的部分景象或者暗示（但需要解读，所以有可能出现错误），刚开始为鹿族劳勃国王的另一个弟弟服务（她误认为史坦尼斯是曾经打败异鬼的重生）。1. Ruby基础教程（第4版）2. Ruby on Rails 教程（原书第4版）========点赞、收藏、关注@人民邮电出版社，一键三连，感恩有你~
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],刘鑫,你去用这几门语言各自实现一遍某个同样功能的项目，比如web framwork、template、orm，然后就会有体会了，比别人在这里说要印象深刻。
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],yuhao,不太赞成某些人答案，（没有针对）该这么比喻：php，随身的左轮手枪和生存刀，简单可靠，但功能和性能不够明显，操作易懂难精，但关键时候小武器办大事java，特战队版突击步枪，操作比C#门槛更高，但战力好得多，在哪都能用，威力可观，但只有一个兵一支枪时几乎体现不出价值c#，普通步兵的突击步枪，短期训练即可上阵，水平一般的团队战力同样会一般，但是尖兵用起来也是好东西，同样，只有一个兵一支枪时几乎体现不出价值（但比java价值高点）PYthon，不会，不瞎说，更不道听途说c，一堆武器零件，而且糅合了各个时代的武器零件，直接搬起来砸人威力不敢恭维，但是它构成了很多种武器甚至工具c++，二战步兵炮，火力猛，多用途但是移动不方便，而且不同战况下的打法完全不同，同样一门炮打惯了阵地战的士兵去攻城那射击方式几乎要重新学习了。补充，c++存在的不同战况打法不同的情况java同样存在，不过没c++差异那么大，当然用途也没那么广泛
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],七月在线 七仔,"一篇有趣的来自西班牙的编程笑话。有一位美丽的公主，被关押在一个城堡中最高的塔上，一条凶恶的巨龙看守着她，需要有一位勇士营救她…下面是各种语言如何想办法将公主从巨龙手中营救出来的。(附上图片版)Java– 赶到那里，找到巨龙，开发出一套由多个功能层组成的恶龙歼灭框架，写几篇关于这种框架的文章…但巨龙并没有被消灭掉。.NET– 赶到哪里，看到了 Java 程序员的做法，完全拷贝过来，试图去杀掉巨龙，但巨龙把他吃掉了。C - 赶到那里，对巨龙不屑一顾，举起剑，砍掉巨龙的头，找到公主…把公主晾在一边，去看看有没有最新提交的 linux 内核代码。C++– 先打造出一根针，然后在上面添加各种功能特征，直到最后汇聚成一把复杂的剑，这把剑复杂到只有他能理解其中的功能…杀死龙，但他过桥时遇到了麻烦，因为内存溢出了。COBOL - 赶到那里，看到巨龙，认为自己太老了，杀不死这条巨龙，营救不出公主，于是离开了。Pascal - 他花 10 年时间开发出一套巨龙歼灭系统…当战斗开始时，他发现这套系统只能关住蜥蜴。VB - 使用各种组件开发出一套巨龙毁灭武器，他跳到巨龙的后面，在最关键的时刻，他发现这种武器只能在雨夜里工作…PL/SQL– 分析其它屠龙者的数据，创建出具有多维数据、n向关系的数据表模型、OLAP，花 15 年时间分析这些数据…当结果出来时，公主已经变成了同性恋者。Ruby - 盛大出征，号称自己不管做什么都是最强的，当面对巨龙，他亮出了一张画有他杀死一条瘸腿的巨龙的图片…巨龙懒洋洋的吃掉了他。Smalltalk - 赶到那里，分析巨龙和公主，转身走了，它们是次要问题。shell - 创造一个超级强大的灭龙武器…但当面对龙的时刻，他忘了如何使用它。Assembler - 他认为他的方法是正确的，而且是最高效的…但他把D写成了A，杀死了公主。Fortran - 赶到那里，开发出来一套 4 万 5 千行的解决方案，杀死巨龙，与公主见了面…但公主认为他是懦夫，反而倾心于高富帅的 Java 程序员。FOX PRO - 开发出一套杀龙系统。外表看起来华丽好用，但实际内部到处补丁，所以，当开始运行这套杀龙武器时，他才发现忘了给 DBF 加索引。Lisp：这是一位著名的游侠骑士，在跟很多的屠龙专家交谈后，将他们的技巧模型化，他开发出这套系统，当开始运行系统时，他认识到，他少写了一个括弧。HTML: 用各种著名的杀龙的剑拼装成一个网页，但他忽视了 W3C 标准。在跟龙相遇的时刻，他发现他的代码跟浏览器不兼容，于是他变成了赤手空拳。巨龙把他当成小甜点吃了。Prolog: 他认为需要有一件杀龙的武器。于是在一个有 182014 件武器的目录里搜索。截止到公主死的那一年，他的成就包括：通晓了各种武器的制造方法，从索引A开始：Atomic Bombs, Anti-Air Weapons, Arches, Ammunition, Axes…PHP: 开发出一个 web 网页，当这个运行时，它能通过一个 Apache 服务器从一个 MySQL 武器数据库里检索出武器消灭掉$dragon。然而，他在 DELETE 语句里忘了写 WHERE 语句，于是杀死了公主，巨龙，女侍，女巫，魔法师，和程序员自己。JavaScript: 他创建了脚本网页，当网页运行时，脚本会除掉巨龙，他一加载页面，一些美丽的少女就向他抛来了鲜花，发出来尖叫。不幸的是，他没有认真分析这个类似蜥蜴的怪物——也被称作 Mozilla，他得到的只是让控制台里填满了 error 信息，《Book of Mozilla》记载了他是如何被吞掉的。Basic：他开发出来一种能够杀死的武器，但不论他如何改进，他发现，他都不能杀死一只比卷毛狮子狗大的龙。Matlab: 他写出循环语句能计算出用巨箭射死巨龙的弹道。这个程序运行的完美无瑕疵。现在需要的是人能有这样大的力量按这种精度发射这支巨箭。e：他用傻瓜式框架编出一套外挂和病毒。利用外挂放大了巨龙的弱点，并散播病毒感染了巨龙，但最后毒死了巨龙，公主也毒死了自己。"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],Stephanie Yu,python最适合女生学……因为包多……来，当一枚拥有最多包包的妹纸……
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],天津风,"C++：凌厉刚猛，无坚不摧，弱冠前以之与群雄争锋。
Java：二十五岁前所用，误伤义士不祥，悔恨无已，乃弃之深谷。
Python：，大巧不工。三十岁前恃之横行天下。三十岁之后不滞于物，（转型架构），草木竹石均可为剑。自此精进，渐入无剑胜有剑之境。"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],TomLee,"编程语言五花八门，我就替大家整理一下资料，一个一个来说一说！PHP，一个嵌套的缩写名称，是英文超级文本预处理语言（PHP:Hypertext Preprocessor）的缩写。PHP 是一种 HTML 内嵌式的语言，PHP与微软的ASP颇有几分相似，都是一种在服务器端执行的嵌入HTML文档的脚本语言，语言的风格有类似于C语言，现在被很多的网站编程人员广泛的运用。PHP 独特的语法混合了C、Java、Perl 以及 PHP 自创新的语法。它可以比 CGI 或者 Perl 更快速的执行动态网页。PHP的优点：1、良好的安全性PHP是开源软件，所有PHP的源代码每个人都可以看得到，PHP具有了公认的安全性能。2、跨平台特性PHP几乎支持所有的操作系统平台及数据库系统，并广为流行。3、执行速度快, 效率高PHP是一种强大的CGI脚本语言，语法混合了C、Java、Perl和PHP式的新语法，执行网页速度比CGI、Perl和ASP更快，而且内嵌Zend加速引擎，性能稳定快速，占用系统资源少，代码执行速度快。4、很好的移植性和扩展性强PHP具有很好的开放性和可扩展性，PHP可以运行在任何服务器上（不管是windows还是Linux）属于自由软件，其源代码完全公开，任何程序员为PHP扩展附加功能都非常容易。5、降低网站开发成本PHP不受平台束缚，可以在UNIX、Linux等众多不同的操作系统中架设基于PHP的Web服务器。6.支持面向对象面向对象编程（OOP）是当前的软件开发趋势，PHP对OOP提供了良好的支持。7.功能强大PHP在Web项目开发过程中具有极其强大的功能，而且实现相对简单。8.可选择性PHP可以采用面向过程和面向对象两种开发模式，并向下兼容，开发人员可以从所开发网站的规模和日后维护等多角度考虑，选择所开发网站应采取的模式。9.版本更新速度快与数年才更新一次的ASP相比，PHP的更新速度要快得多，因为PHP几乎每年更新一次。10.模板化实现程序逻辑与用户界面的分离。11.应用范围广目前在互联网有很多网站的开发都是通过PHP语言来完成的。Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java的优点：1.简洁有效Java语言是一种相当简洁的“面向对象”程序设计语言。Java语言省略了C++语言中所有的难以理解、容易混淆的特性，例如头文件、指针、结构、单元、运算符重载、虚拟基础类等。它更加严谨、简洁。Java语言采用了特殊的软件构造方法，可以在很小的机器上独立运行。只要40K就可以容下一个最基本的解释器，即使加上基本标准库和线程支持，也仅需再加上175K就够的。这也是Java语言的一个成功秘诀。2.高可移植性对于一个程序员而言，写出来的程序如果不需修改就能够同时在Windows、MacOS、LINUX等平台上运行，简直就是美梦成真的好事！而Java语言就让这个原本遥不可及的事离我们越来越近。使用Java语言编写的程序，只要做较少的修改，甚至有时根本不需修改就可以在不同平台上运行了，Java绝对是跨平台的一门编程语言。Java语言具备这种高移植性是一种必然，因为它的设计理念就是“一次编写，到处运行”嘛。3.“面向对象”Java语言被喻为比C++还“面向对象”的程序设计语言，不理解“面向对象”的思想就难以很好地运用Java语言。4.解释型Java语言是一种解释型语言。对，没看错，它是一种解释型语言，也就是说，相对于C/C++语言来说，Java语言写出来的程序效率低，执行速度慢。但它正是通过在不同平台上运行Java解释器，对Java代码进行解释，来实现“一次编写，到处运行”的宏伟目标的。为了达到目标，牺牲效率还是值得的，再说，现在的计算机技术日新月异，运算速度也越来越快，用户不会感到太慢的。5.适合分布式计算Java语言具有强大的、易于使用的连网能力，非常适合开发分布式计算的程序。Java应用程序可以象访问本地文件系统那样通过URL访问远程对象。使用Java语言编写Socket通信程序十分简单，使用它比使用任何其它语言都简单。而且它还十分适合于开发公共网关接口（CGI）脚本的开发，另外还可以使用Java小应用程序（Applet）、Java服务器页面（Java Server Page，简称JSP）、Servlet等等手段来构建更丰富的网页。6.拥有较好的性能正如前面说到，由于Java是一种解释型语言，所以它的执行效率相对就会慢一些，但由于Java语言采用了两种手段，使得其性能还是不错的。7.健壮、防患于未然Java语言在伪编译时，做了许多早期潜在问题的检查，并且在运行时来做了许多相应的检查，可以说是最严格的一种“编译器”。它的这种“防患于未然”的手段将许多程序中的错误扼杀在摇蓝之中。8.具有多线程处理能力线程，是一种轻量级进程，是现代程序设计中必不可少的一种特性。多线程处理能力使得程序能够具有更好的交互性、实时性。Java在多线程处理方面性能超群，具有让你惊喜的强大功能，而且在Java语言中进行多线程处理很简单。9.具有较高的安全性由于Java语言在设计时，在安全性方面考虑很仔细，做了许多探究，使得Java语言成为目前最安全的一种程序设计语言。10.是一种动态语言Java是一种动态的语言，这表示在以下两个方面：1） 在Java语言中，可以简单、直观地查询运行时信息；2） 可以将新代码加入到一个正在运行的程序中去。11.中性的对象语言“Java编译器生成的是一种中性的对象文件格式。”也就是说，Java编译器通过伪编译后，将生成一个与任何计算机体系统无关的“中性”的字节码。Java的这种字节码经过了许多精心的设计，使得其能够很好地兼容于当今大多数流行的计算机体系统，可以在任何机器上易于解释，易于动态翻译成为机器代码。Python是一种跨平台的计算机程序设计语言。 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越多被用于独立的、大型项目的开发。Python在设计上坚持了清晰划一的风格，这使得Python成为一门易读、易维护，并且被大量用户所欢迎的、用途广泛的语言。Python 的优点1、语法简单和传统的 C/C++、Java、C# 等语言相比，Python 对代码格式的要求没有那么严格，这种宽松使得用户在编写代码时比较舒服，不用在细枝末节上花费太多精力。Python 是一种代表极简主义的编程语言，阅读一段排版优美的 Python 代码，就像在阅读一个英文段落，非常贴近人类语言，所以人们常说，Python 是一种具有伪代码特质的编程语言。2、Python 是开源的开源，也即开放源代码，意思是所有用户都可以看到源代码。3、Python 是免费的开源并不等于免费，开源软件和免费软件是两个概念，只不过大多数的开源软件也是免费软件；Python 就是这样一种语言，它既开源又免费。4、Python 是高级语言这里所说的高级，是指 Python 封装较深，屏蔽了很多底层细节，比如 Python 会自动管理内存（需要时自动分配，不需要时自动释放）。5、Python 是解释型语言，能跨平台解释型语言一般都是跨平台的（可移植性好），Python 也不例外，我们已经在《编译型语言和解释型语言的区别》中进行了讲解，这里不再赘述。6、Python 是面向对象的编程语言面向对象是现代编程语言一般都具备的特性，否则在开发中大型程序时会捉襟见肘。Python 支持面向对象，但它不强制使用面向对象。Java 是典型的面向对象的编程语言，但是它强制必须以类和对象的形式来组织代码。7、Python 功能强大Python 的模块众多，基本实现了所有的常见的功能，从简单的字符串处理，到复杂的 3D 图形绘制，借助 Python 模块都可以轻松完成。8、Python 可扩展性强Python 的可扩展性体现在它的模块，Python 具有脚本语言中最丰富和强大的类库，这些类库覆盖了文件 I/O、GUI、网络编程、数据库访问、文本操作等绝大部分应用场景。9、Python 丰富的第三库Python社区提供了大量的第三方模块，使用方式与标准库类似。它们的功能覆盖科学计算、Web开发、数据库接口、图形系统多个领域。当初我自己学习Python的时候，安装好软件环境就开始找资料，买书和收集网络资料也是花费了不少时间，有时候还找些没用的，浪费了时间和金钱。有时候又变身下载狂魔，为了下载而下载，这都是不可取的！推荐点击下面的链接，这个问题回答中有我收集最齐全的Python学习资料。从Python入门、进阶、实践到专项学习，有很多Python学习的书籍、视频和教程分享。从入门到不同学习阶段的童鞋，一定可以找到你需要的Python资料，建议收藏！C语言是一门面向过程的、抽象化的通用程序设计语言，广泛应用于底层开发。C语言能以简易的方式编译、处理低级存储器。C语言是仅产生少量的机器语言以及不需要任何运行环境支持便能运行的高效率程序设计语言。尽管C语言提供了许多低级处理的功能，但仍然保持着跨平台的特性，以一个标准规格写出的C语言程序可在包括类似嵌入式处理器以及超级计算机等作业平台的许多计算机平台上进行编译。在编程领域中，C语言的运用非常之多，它兼顾了高级语言和汇编语言的优点，相较于其它编程语言具有较大优势。计算机系统设计以及应用程序编写是C语言应用的两大领域。同时，C语言的普适较强，在许多计算机操作系统中都能够得到适用，且效率显著。简单总结，C语言的优点有三个：1、代码量小2、运行速度快3、功能强大C++是C语言的继承，它既可以进行C语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。C++擅长面向对象程序设计的同时，还可以进行基于过程的程序设计，因而C++就适应的问题规模而论，大小由之。 C++不仅拥有计算机高效运行的实用性特征，同时还致力于提高大规模程序的编程质量与程序设计语言的问题描述能力。C++作为在C语言的基础上开发的一种面向对象编程语言，应用非常广泛。常用于系统开发，引擎开发等应用领域，支持类、封装、继承、多态等特性。C++语言灵活，运算符的数据结构丰富、具有结构化控制语句、程序执行效率高，而且同时具有高级语言与汇编语言的优点。C++语言是对C语言的扩充，从Simula中吸取了类，从ALGOL语言中吸取了运算符的一名多用、引用和在分程序中任何位置均可说明变量，综合了Ada语言的类属和Clu语言的模块特点，形成了抽象类，从Ada Clu和ML等语言吸取了异常处理，从BCPL语言中吸取了用//表示注释C++语言保持了C语言的紧凑灵活、高效以及易于移植性强等优点，它对数据抽象的支持主要在于类概念和机制，对面向对象风范的支持主要通过虚拟机制函数因C++语言既有数据抽象和面向对象能力，运行性能高，加上C语言的普及，而从C语言到C++语言的过渡较为平滑，以及C++语言与C语言的兼容程度可使数量巨大的C语言程序能方便地在C++语言环境中复用，使C++语言在短短几年内能流行。简单总结，C++语言的优点如下 ：1、C++可以潜入任何现代处理器中，几乎所有的操作系统都支持C++,跨平台性非常好。2、C++功能在C的基础上增加面向对象的特点，代码可读性好，运行效率高。3、运行效率高，高效安全。4、语言简洁，编写风格自由。5、大项目上具有优势。 以上编程语言知识，整理自网络，希望可以帮到大家。编程语言这么多，贪多嚼不烂的，要看自己的兴趣爱好、工作场景和发展方向，根据实际情况选择，语言也是相通的，重点研究透一门编程语言，其余的就触类旁通了！"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],编程实战,"武侠小说中，各路侠客绿林好汉都是从基本功开始一招一式学起，掌握了足够多的招式后，加之勤学苦练，量变引起质变，会有一天打开任督二脉顿悟出这些招式背后的哲学逻辑，成为一代宗师。在编程的学习过程中，我们何尝不是从一招一式的函数、语法、特性等学起，掌握了一门编程语言后，再学习另一门语言就会快很多，如同拥有内功后，习得其他武功也会轻松很多。如果编程语言是一门武功绝学，各语言分别是哪门武功绝学呢？汇编语言是计算机提供给用户的最快最有效的语言，也是能够利用计算机的所有硬件特性并能够直接控制硬件的唯一语言。采用它编写的程序具有存储空间占用少、执行速度快的特点，这些是高级语言所无法取代的。通常用在最底层的程序优化，硬件操作或嵌入式编程的场合，已经很少有人直接编写汇编。《天龙八部》中练的就是少林派的独家秘法易筋经。扫地僧除了扫地之外，做的唯一一件事，就是参悟，几十年的修为，练就一门绝世武功，高深莫测，无坚不摧，高效，无招胜有招。C 语言是一门面向过程的计算机编程语言，与 C++、Java 等面向对象编程语言有所不同。C 语言的设计目标是提供一种能以简易的方式编译、处理低级存储器、仅产生少量的机器码以及不需要任何运行环境支持便能运行的编程语言。C 语言主要用途除了实现编程语言底层功能，还应用在实现操作系统，还在通讯领域也有很大的用武之地。虽然相对用来开发应用层面稍微显得笨拙一点，但是在讲究效率的底层发挥空间非常巨大。C 语言高效、灵活、功能丰富、表达力强、作为一门基础的底层语言与九阳神功偏内功是一致的，着重内力，不重招法，里面阐述的其实也主要是“刚柔并济”的道理。一代武当宗师，就是以九阳内功为基础，才创制了武当一脉功夫。所以学好 C 语言，有强大的内功后，再学习其他语言就会相对轻松。C++ 是 C 语言的继承，它既可以进行 C 语言的过程化程序设计，又可以进行以抽象数据类型为特点的基于对象的程序设计，还可以进行以继承和多态为特点的面向对象的程序设计。与 C 语言相比 C++ 增加了以下方面：如果 C 语言是偏内功的九阳神功，那么 C++ 无异于《九阴真经》，两者都是很基础的，并且两者间有近缘，这两门掌握精通之后天下武学皆能容易掌握。。《九阴真经》偏重招式，威力强大、博大精深，包含无数神奇招术(内功、轻功、拳、掌、腿、刀法、剑法、杖法、鞭法、指爪、点穴密技、疗伤法门、、移魂大法等等)，诡秘莫测，义理艰深难学，C++ 同样包含很多内容，还在不停的延申，复杂、强大、百科全书式的语言、在大规模项目面前几乎无其他语言可及。C++ 跟《九阴真经》一样，有很多误区容易陷入，比较突出的问题就是内存泄漏，如果使用不当，很容易落得跟、欧阳锋、梅超风等一样走火入魔。Java 是一门面向对象编程语言，不仅吸收了 C++ 语言的各种优点，还摒弃了 C++ 难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程。Java 具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点。Java 可以编写桌面应用程序、Web 应用程序、分布式系统和嵌入式系统应用程序等。小无相功是金庸武侠小说《天龙八部》中「」的一门内功，威力强大。只要身具此功，再知道其他武功的招式，倚仗其威力无比，可以模仿别人的绝学甚至胜于原版，没有学过此功的人很难分辨。这一特点与 Java 的分布式、解释性、可移植性、多线程、动态执行类似。Java 体系庞大又提供很多网络技术的支持，正如小无相功为根基运行，而jvm体系又如同逍遥派体系。门下弟子众多又出类拔萃，名声显赫，博采众长，独步天下。Python 是一种跨平台的计算机程序设计语言。 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越多被用于独立的、大型项目的开发。可以应用于以下领域：Python 语言的简洁性、易读性与太极入门简单类似，但是要达到一定高度也需要长期锻炼，同样达到的效果也极高，精通后威力也巨大，可以以柔克刚，与太极一样 Python 速度慢。Go（又称Golang）是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。Go 的语法接近 C 语言，但对于变量的声明有所不同。Go 支持垃圾回收功能。与 C++ 相比，Go 并不包括如枚举、异常处理、继承、泛型、断言、虚函数等功能，但增加了 切片(Slice) 型、并发、管道、垃圾回收、接口（Interface）等特性的语言级支持。GO 语言的关键特性主要包括以下几方面：语言容易上手，解决了并发编程和写底层应用开发效率的痛点，有 Google 这个世界一流的技术公司在后面支撑，杀手级应用 Docker 的生态圈在这几年完全爆棚。所以，Go 语言的未来是不可限量的。可能会吞食很多 C、C++、Java 的项目。北冥神功，金庸小说《天龙八部》中「逍遥派」最高武学，练成后，全身每处穴道皆可吸人内力，且兼容天下武功。剧毒不侵。强凶霸道，随手攻击便有莫大威力。真气护体防御大增，受到攻击时反震敌人。速度大增。这些特点与 Go 语言速度极快、性能强、效率高、先进的并发支持模型和丰富的标注库有类似的地方。Objective-C 感觉是 C 语言体系中比较出色的大师兄，然后自立门户，不过还会 C 语言，Objective-C 是一种在C的基础上加入面向对象特性扩充而成的编程语言，可以把 Objective-C 看成是 ANSI 版本 C 语言的一个超集，它支持相同的 C 语言基本语法，同时它还扩展了标准的 ANSI C 语言的语法。独孤九剑在武功体系里比较独特与 object-c 是苹果开发软件的语言类似，与 object-c 类似风清扬的剑法同样潇洒、优雅、进攻大于防守。JavaScript 直译式脚本语言，是一种动态类型、弱类型、基于原型的语言。动态性和跨平台性强。JavaScript的优势：由于 Javascript 的发展非常快，Javascript推出一年半之后，国际标准就问世了。过早的标准化，Javascript 的规格还没来及调整，就固化了。设计缺陷还没有充分暴露就成了标准。例如：吸星大法，出自金庸的武侠小说《笑傲江湖》，是教主任我行修习的武功，任我行仗以威震江湖的绝学。修炼者有、令狐冲，唯一害处是有内力反噬之险。同为吸取别人内力的一流武功。给人的感觉就是北冥神功是正版，化功大法是盗版，吸星大法是删减版。JavaScript 如同吸星大法 用好了神奇，能最简单实现目的，标准有删减的缺陷，用不好控制，还可能反噬。C# 的声音，如同蛤蟆功不受待见一样。是微软公司发布的一种由 C 语言 和 C++ 衍生出来的面向对象的编程语言、在继承 C 语言 和 C++ 强大功能的同时去掉了一些它们的复杂特性（例如没有宏以及不允许多重继承）。C# 综合了 VB 简单的可视化操作和 C++ 的高运行效率，以 .NET 框架类库作为基础，拥有类似 VB 的快速开发能力，完全面向对象和类型安全。由于 C# 是后生，所以其很多语法都是其它语言的改进。从整体看，C# 语法比 java 更优雅。支持事件、委托、属性、Linq等一系列让业务开发更简单的功能。仅能运行在Windows平台)使其渐渐被排斥于主流之外。如今偏居一隅，难以影响中原大势。蛤蟆功，欧阳锋独创，成为南宋时期天下武林五大高手之一，号称西毒。是一门极厉害的功夫。威力足以跟降龙十八掌打成平手，精神出问题的欧阳锋和洪七公一战也能打成平手，两人内力耗尽最终死在华山上，可见蛤蟆功的威力。与蛤蟆功一样，C# 功力深厚，刚出现时风光无限，但在 .net 庞大的类库下也显得有些臃肿,再加上仅能运行在 Windows 平台所以发展相对缓慢，出现了很多看不起 C# 的声音，如同蛤蟆功不受待见一样。PHP 实用性强，跨平台强，效率高，容易部署，完全开源，支持几乎所有的流行的数据库及操作系统。PHP 是在服务器端执行的，独特的语法混合了 C、Java、Perl 以及 PHP 自创的语法。利于学习，使用广泛，专注于 Web 开发，写中小型网站后台的首选。PHP 主流框架依然基于 MVC 模式，但也在不断地创新，比如 Codelgniter 框架，性能高、速度快，适用于共享主机；Seagull 则功能更加强大，代码库的标准化和模块化更高，同时也有较多的文档提供支持。缺点：每当有编程语言之争时，总有人说“ PHP 是世界上最好的语言”，当然，也有很多批评的声音，没有一种语言是被所有人接受，影响 PHP 声誉可能和 PHP 薪资有关，从“ PHP 是世界上最好的语言”这一点来说勉强与被扫地僧称为天下第一的降龙十八掌匹配。如果把编程语言比喻为武功绝学，那么一代大师都是很牛逼的程序员。在武侠小说中，张三丰是位武学奇才，技击之术冠绝天下。如果放到现在来看，张真人的角色很可能是个天才程序员。师从觉远大师，学习了,如果是程序员就是精通 从语言这门偏内功的语言，对以后的发展至关重要。后来又学习了很多其他武功，自创了《太和功》、《九转玄功》、《纯阳功》等内息功法，是一位编程能力很高，创新能力不可小觑的程序员。在武侠小说中，绝顶高手，都不止会一门武功，天下之术，皆为我用，但是绝对有一门武功达到炉火纯青的地步，作为程序员不要想着集成和借鉴别人的东西，自己也需要“练武”。代码的世界，也是江湖。对编程思想理解越透彻，内功便深厚，多掌握一门语言，便是多了一门武艺。C语言图片来源于网络，如有侵权，联系删除。免喷申明:本文纯属娱乐，水平有限，只写了几种语言。"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],嵌入式Linux,"工作中c,c++,java用的比较多c主要是偏向底层 驱动，c++主要做pc客户端开发，java主要做后台开发和移动端开发。我不认为编程语言一定要排名，而是看项目要求，用哪种语言更合适。现在我遇到的嵌入式开发，单片机开发，低功耗智能硬件开发，都是用c，这是经过很多年的锤炼的。编译器和IDE也很多，所以C在这方面可以占有一席之地。像直接操作内存，寄存器，C语言直接嵌入汇编等等，都让C更适合嵌入式底层上工作。C++，因为是多了面向对象，类，封装和继承等特点，用来做客户端开发，逻辑功能特别强的开发，C++也可以直接嵌入C语言，但是我认为C++高于C，因为在使用上和功能上都多很多，更多的是为了方便开发者使用，像游戏开发，后台开发，各种类库，所以android hal大量的使用了C++,他又不直接接触底层硬件，又能向上层做封装接口，这是再好不过了。java的风起，我认为很大程度是因为android的出世，android app是java语言，直接决定了java的重要性，使用的人多了，自然就风靡起来，像linux之父拒绝C++,这也在一定程度上打压了c++。当然那都是过去式了。其他接触比较少的，就不评论了~"
PHP、Java、Python、C、C++ 这几种编程语言都各有什么特点或优点？,[],假装有对象,节选自：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",程序员吴师兄,"作为一名在 GitHub 上收获 60k star 的程序员来说，我觉得有必要认认真真的来回答一下。我的 GitHub ： 很好，对于编程新手而言，如果一开始就知道利用 GitHub 来提高自己的技术水平，如果你想参与某个，你首先要做的是先了解这个项目，最好的方式是先仔细阅读它的 。通过可以了解这个项目动机和背景是什么，是为了优化什么问题还是因为市面上其它的项目太渣渣。然后通过  和  知道项目如何运行起来，方便查看细节。最后就需要查看它的 希望你提交 issue，有的是直接 push，有的是加群一起协作。题主还问到 「核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢」，这一点你不用担心，哪怕你只是修改里面的一个错误单词，一句错误的语法对于整个项目来说也是很有作用的。一个 4 岁小女孩就给 Linux 内核贡献提交。链接：我们看看她修改了什么在里面可以看到就是改了一个 「  」字符而已。没有用过 git 的同学可能看不懂这个修改，即使用过的同学刚开始也觉得一脸懵逼，git 的 diff 修改会在前面显示 - 和 + 符号，这样看就知道了，实际上就增加了一个字符 - 。我们看到，正常情况下「--------」和上面的字符串是对齐的，但是刚好修改的那行是没有对齐的，所以是有问题的，是不严谨的。虽然是一个很小的修改，但是这个修改的意思非常大。1、Linux 内核可以让所有人参与进来。2、Linux 内核非常严谨，只要有错误，任何人都可以修改它。在修改的提交记录里面，是这样写他的侄女发现那个 「  」字母很孤单，用她的话说是不开心，加上「  」后就显得开心了。非常细心的一个举动，这个修改在 riddit 上，很多人在激烈的讨论，有人认为这个修改没有什么作用，不就是一个字符而已，但是很多人对这个小女孩产生钦佩，觉得他是一个非常认真仔细的人。GitHub 成立于 2008 年，截止到 2015 年，GitHub 已经有超过两千八百万注册用户和5700万代码库。对于新手而言，要从这浩瀚的代码库中找到适合自己小项目无异于大海捞针，如果有个类似于 hao123 那样的导航网站就好了！登登登，还真有，一个国人建立的开源项目：在项目中，内容每月 28 号以月刊的形式更新发布，主要是面向编程新手、热爱编程、对感兴趣人群的项目。更新的内容主要包括：各种语言的流行项目、入门级项目、让生活变得更美好的工具、书籍、学习心得笔记、企业级项目等。这些开源项目大多都是非常容易上手、很 Cool，能够让你用很短时间感受到编程的魅力和便捷。从而让大家感受到编程的乐趣，动手开始编程。这些项目都有一些共同的特征，那就是很酷，非常容易上手的项目，编程的魅力和便捷体验起来就是这么简单。对于编程新手而言，不管你是学 Java，还是学 ，哪怕你是编程小白，不懂代码，也总能在里面找到适合你的项目。这个新手项目还不够？那在推荐一个类似但更有趣的开源项目：GitHubDaily。链接：GitHubDaily 每日不定时推送一批 GitHub 上优秀的开源项目给开发者, 帮助开发者们发现当下最火的开源项目, 令开发者们得以掌控技术脉搏, 扩大自己的技术视野, 并从开源项目的学习中获得技术能力的提升。它分门别类的整理了好多有趣的项目，适合新手在零碎时间去阅读学习，了解 GitHub 的生态。以上就是我的回答，希望新手都能通过合理的使用 GitHub 来提高自己的技术水平，如果你觉得这个回答能够解决题主的问题，同时根据知乎的算法机制，会有越来越多的优质答案出现在你的时间线上。最后，如果你是程序员，"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",知乎用户R26s0w,借用作者     的一篇文章来说   原文链接： 什么是 Github ？必须要放这张图了！！！（图片来源）好吧，我相信看到这里你已经晕了，写这些教程的人都是几年以上的程序员呀，他们往往直接就告诉你所有命令的含义或者整个体系。简单来说，Git 是一个管理你的「代码的历史记录」的工具。我不是程序员为什么要学这个啊啊啊！又不要管理代码们！别急，虽然 github 学习门槛高，一会你就知道为什么人人都应该会这个啦！去官网注册一个账号（这个你应该会，恩就不放链接了）然后，下载一个 mac客户端是最方便的啦！（命令行什么的真的是会越来越晕！先别管他们！）我们三个人在不同的城市要远程共同写一本书，要有一个漂亮的笔记本吧？「」就是你的笔记本们。你只需知道 Repository 是个放项目的地方就行。有时候会出现 Repositories，是多个 Repository 的意思。**fork**如果你不想新建一个笔记本，看到小四之前写过一个好到炸裂的文章，想把他的直接全部偷过来，修改修改就成你自己的文章了，这应该怎么办呢？github 还提供了一个很赞的功能叫做 fork ，你只需要点击这个神奇的按钮，就可以把他的「笔记本」变成你自己的啦！任意修改都可以哦~「笔记本」在云端，你要把它摘下来放到自己的电脑上写小说才方便呀，在这里我们叫「clone」是不是很形象？步骤如图：或者是直接去我们的客户端你的笔记本里已经自动有一个文档了，这个时候让我们回到网页版[微笑脸]你只需要在 web 端点开这个README.md可以开始在里面写你的小说了。或者直接点开刚刚 clone 到电脑上的文件夹直接在里面写。ps:需要注意的是，文本支持 markdown 格式，可以先参考这个。在本地写完之后你要上传到云端让我和小四都能看见你写出什么幺蛾子了吧？回到客户端，你发现有变化！！！没错，在你头像旁边给你这次提交内容起一个名字，以后如果再次寻找的时候会很方便。然后点下面的 Commit to master，还有右上角的 Sync 就好啦！夜深人静的时候，我趁着你们都在睡觉把小说的结局偷偷地改成女主死掉了！你醒来觉得我这结局改的也太悲伤了，完全不能接受！结局必须要和之前那样王子公主幸福的生活在一起的 happy ending！问题又来了，怎么退回到我修改结局之前的 happy ending？还是刚刚那个客户端，选择History 然后点击小齿轮，选择潇洒地点 roll back to this commit！你又回到happy ending的状态啦！！小四写了一章华丽无比的番外，你要更新本地的小说和他写的保持一致怎么办？git pull知道这些基本操作入门应该够了，我们来回顾一下！入门初期迅速得到一些正反馈对于学习一门新技能来说实在是太重要了！尤其是编程这么炫酷的事情！所以先不要管什么复杂的 issue 呀 wiki 呀乱七八糟的操作，按照上面的一步一步来，如果遇到什么问题 google 之，一般都会解决的。有一个段子不就是说，当你遇到问题去找最高级的工程师，他们一般都会直接 google 吗？而且自带的帮助手册也是解决问题的好办法，比如你要新建一个 branch=》这种遇到问题先自己尝试解决的小技巧，也是我自从学编程以来最大的收获。回到文章开头，我又不是程序猿不用写代码玩这个干啥？你有没有碰到过团队里几个人共同协作写一个文档的时候？或者说需要反复修改的东西？比如最简单的写论文，用 word 保存一个一个版本 e-mail 给 boss？下次再找上次修改了什么地方简直要死啊有木有！！！就像 github 其中一位创始人[Chris]()也详细描述了[GitHub初创的前因后果]()，他说道：和 33 一起写小说的例子，还记得吧？几个人你一章我一章共同修改一本书，或是几个出版社的编辑对新书进行校对，利用这个神器就可以随时看到哪里出现了问题和更改。如果想自己写书的话  也是不错的选择（又是一个坑。。）想想看，用 git 的分支管理不比拷贝粘贴更方便吗？有个哥们为了激励自己健身把每日计划都放上去了，还可以邀请其他人一起来相互监督！没错，看这个项目！利用众包的形式一起罗列男/女友条件的 list 然后试图自己开发出一个男/女票233333一个有自己域名的独立博客，是不是很帅？！Jekyll 的教程和我自己的博客会稍后放出。。（先给自己挖个坑）较早的、之外，较有气象的可以推荐、教育方面：GitHub上的代码无法造假，也容易通过你关注的项目来了解你的知识面的宽度与深度。现在越来越多知名公司活跃在GitHub，发布开源库并招募各类人才，例如：、、 ...开始有了第三方网站提供基于GitHub的人才招聘服务，例如：甚至专门有一个项目就是自动根据你的 GtiHub 公开项目创建个人简历：做 ppt 不知道到哪里去找高质量美图？最近半年初入设计圈，收集了不少 bookmark 想在年底来一个总结。 于是自己创建了这个Design- Resource List 项目，旨在让更多的设计师找资源变得有章可循。如果你已经不满足于上面的基础知识了，欢迎探索更高级的玩法！（本文转载已经过作者授权）看完这篇内容后，相信以下三件事，也会给你带来帮助：1、点赞，让更多小伙伴能看到这篇内容，你的点赞是我持续创作的动力2、提升自己，CSDN放出了大量免费课送给正在阅读的你，包含Python、Java、人工智能、算法、机器学习等热门领域，只要你想学，这里都有！戳下方链接查看：3、关注【程序员知识圈】，更多面试题、面试技巧等优质内容等你来撩！
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",蓝桥云课,这里推荐下，实验楼的《Git 与 Github 入门实践》课程。本着实用的原则，针对零基础同学，以图文的形式详细介绍了 Git & GitHub 结合使用的基本操作。以下节选部分内容先睹为快！1.首先，打开  注册个人账户并登录。登录后，在个人主页的右上角点击  创建新的仓库：2.打开页面如下图所示，填入相关信息。注意下图紫色框中有两个下拉按钮，左边的用来选择忽略文件，右边的用来选择所属协议，这两项可以不选，后面的课程会讲到。3.点击绿色按钮创建新的仓库，成功后自动跳转到新建仓库的主页面，如下图所示：现在克隆前面我们在 GitHub 上创建的仓库，使用  命令即可，这是标准的克隆仓库命令。1.点击下图绿色按钮，再点击紫色框中的按钮即可复制仓库地址，当然复制上面地址栏中的内容也是一样的。2.到本地：3.进入仓库主目录，如下图所示，仓库主目录中有个  隐藏目录，它里面包含了仓库的全部信息，删掉这个目录，仓库就变成普通的目录了。进入到仓库目录中，命令行前缀发生了一些变化，出现了红色的 master ，它就是当前所在的分支名：4.当我们在 GitHub 上创建一个仓库时，同时生成了仓库的默认主机名 origin，并创建了默认分支 master。GitHub 可以看成是免费的 Git 服务器，在 GitHub 上创建仓库，会自动生成一个仓库地址，主机就是指代这个仓库，主机名就等于这个仓库地址。克隆一个 GitHub 仓库（也叫远程仓库）到本地，本地仓库则会自动关联到这个远程仓库，执行  命令可以查看本地仓库所关联的远程仓库信息：Git 要求对本地仓库关联的每个远程主机都必须指定一个主机名（默认为 origin），用于本地仓库识别自己关联的主机， 命令就用于管理本地仓库所关联的主机，一个本地仓库可以关联任意多个主机（即远程仓库）。5.克隆远程仓库到本地时，还可以使用  选项修改主机名，在地址后面加上一个字段作为本地仓库的主目录名，举例如下：6. 另一个在其它 Git 教程中常见的命令  ，它会把当前所在目录变成一个本地仓库，因为有 GitHub 的存在，这个命令在我们的生产生活中用到的次数应该是零，除非你想费时费力自己搭建服务器。操作截图如下：1.首先，到本地，进入仓库主目录，执行  查看分支信息：2.执行  可以创建新的分支：3.此命令创建新分支后并未切换到新分支，还是在 master 分支上，执行  切换分支， 也是常用命令，先给它设置别名，然后切换分支：4.创建新分支还要手动切换太麻烦，介绍另一个常用的命令  创建分支并切换到新分支：如上图所示的分支信息，前两行是新建的本地分支信息，它们的版本号与主分支 master 一致，这是因为在哪个分支上创建新分支，新分支的提交记录就与哪个分支一致。新建分支并无跟踪任何远程分支，所以没有 master 分支中的中括号和括号内的蓝色远程分支名。5.假设我们要在当前分支 dev1 上开发一个新的功能，需要增加一个文件 new_func1，然后生成一个新的提交：1.执行  即可将本地分支推送到远程仓库的分支中，通常冒号前后的分支名是相同的，如果是相同的，可以省略 ，如果远程分支不存在，会自动创建：2.上图命令可以简写为  。注意哦，这是我们创建 SSH 关联后第一次执行  命令，可以看到传输速度有明显的提高，更重要的是，不再需要重复输入用户名和密码了，另外打印信息的第一行是警告信息，因为是这个分支的第一次推送嘛，下次执行推送就不会再出现了。现在执行  查看一下分支情况：可以看到，远程分支 origin/dev1 的信息已经在本地存在，且与本地同名分支一致。再看下 GitHub 页面的情况：执行这个命令  将本地分支与远程分支关联，或者说使本地分支跟踪远程分支。如果是设置当前所在分支跟踪远程分支，最后一个参数本地分支名可以省略不写：这个命令的  选项是  的缩写。可不可以让本地分支跟踪远程非同名分支呢？可以的，尽管几乎遇不到这种自找麻烦的需求。可不可以撤销本地分支对远程分支的跟踪呢？也是可以的，执行  即可撤销该分支对远程分支的跟踪，同样地，如果撤销当前所在的分支的跟踪，分支名可以省略不写：问题又来了，前面的操作是先将本地分支推送到远程仓库，使远程仓库创建新分支，然后再执行命令使本地分支跟踪远程分支，有没有办法在推送时就自动跟踪远程分支呢？有的，在推送的时候，加个  或其简写  选项即可，现在切换到 dev 分支试一下这个命令：1.首先，删除远程分支，使用  ，如果一次性删除多个，可以这样： 。此命令的原理是将空分支推送到远程分支，结果自然就是远程分支被删除。另一个删除远程分支的命令：。删除远程分支的命令可以在任意本地分支中执行。两个命令分别试一下：2.可以看到本地仓库已经没有远程分支 dev 和 dev1 的分支信息。查看 GitHub 仓库页面：也只剩 master 一个分支。操作成功。感兴趣的同学，可以直接前往《》，直接使用实验楼提供的在线环境动手练习。最后再送上10条给编程新手的 Github 秘籍：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",思否小姐姐,非常给力的 GitHub 从 0 开始系列，对新手友好~内容节选自：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",编程指北,"   虽然我很早就知道 GitHub，但是学会逛 GitHub 的时间特别晚。当时一方面是因为菜，看着这种全是英文的东西难受，不知道该怎么去玩，另一方面是一直在搞 ACM，没有做一些工程类的项目，所以想当然的以为和 GitHub 也没什么关系（当然这种想法是错误的）。  后来自己花了一个星期看完了 Python 的基础知识，就想着找点项目看一看，学一学，练一练，这个时候我才真正的去了解 GitHub，开始了在 GitHub 的瞎逛之旅，在开始之初，随之而来的问题是我不知道哪些项目当时还是新手的我，哪些项目是好项目，哪些项目好玩有价值。  虽然现在我已经在 GitHub 上逛的相当流畅，但我还是想如果有一个东西可以收集这些对新手友好的东西，那么我当时可以少走更多的弯路，节省更多的时间吧。首先，推荐一个开源电子书仓库，收录数百本经典计算机书籍，可以 star 一下，下次找书直接搜：在这，顺便分享一份大学期间自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，去网上挨个找的，最后汇总而成。汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、设计模式、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、、数据库、Redis....等主流的编程学习书籍。：书单：  那么有这么一个东西么？  有的，而且已经做了三年多，这就是，一个分享 GitHub 上有趣，入门级的。    那么有这么一个东西么？  有的，而且已经做了三年多，这就是，一个分享 GitHub 上有趣，入门级的开源项目。    GitHub 网址：  在项目中，内容每月 28 号以月刊的形式更新发布，主要是面向编程新手、热爱编程、对感兴趣人群的项目。更新的内容主要包括：各种语言的流行项目、入门级项目、让生活变得更美好的工具、书籍、学习心得笔记、企业级项目等。    这些项目都有一些共同的特征，那就是很酷，非常容易上手的项目，编程的魅力和便捷体验起来就是这么简单。    再次给出 GitHub 地址:  下面我们就来看看，这个项目具体包括啥，我们以最新的月刊（43 期）为例。       每个类型的项目我们挑一个来看。    ：一个终端复用工具，可极大的提高工作效率。    BenchmarkDotNet：功能强大的用于基准测试 .NET 库。     ：打日志是 C++ 开发中必不可少的一种 debug 方式，dbg-macro 受  中 的 dbg 启发，提供比  和 std::cout 更好的宏函数。主要有如下特点：   #include <vector> #include <dbg.h>  // You can use ""dbg(..)"" in expressions: int factorial(int n) {   if (dbg(n <= 1)) {     return dbg(1);   } else {     return dbg(n * factorial(n - 1));   } }  int main() {   std::string message = ""hello"";   dbg(message);  // [example.cpp:15 (main)] message = ""hello"" (std::string)   const int a = 2;   const int b = dbg(3 * a) + 1;  // [example.cpp:18 (main)] 3 * a = 6 (int)   std::<int> numbers{b, 13, 42};   dbg(numbers);  // [example.cpp:21 (main)] numbers = {7, 13, 42} (size: 3) (std::vector<int>)   dbg(""this line is executed"");  // [example.cpp:23 (main)] this line is executed   factorial(4);   return 0; }     go-admin：基于 Golang 语言的数据可视化与管理平台。特性如下：    eladmin：基于 Spring Boot 2.1.0、 的前后端分离的后台管理系统，支持数据字典与数据权限管理、一键生成前后端代码、前端菜单动态路由等。基于 Spring Boot2.1.0 框架，涉及的技术栈：非关系数据库 redis、接口测试工具 swagger、druid 数据源驱动、邮件依赖（javax.mail）、三方支付和云存储 SDK、页面模板引擎 freemarker。技术栈丰富，初学者可以作为实战项目学习和使用。     ：一个简单易用的 Bar Chart Race（长条图赛跑动画）  组件。示例代码：  import ReactDOM from ''; import BarChart from 'chart-race-react';  ReactDOM.render(<BarChart />, document.getElementById('root'));     TagUI-Python：一个 Python 自动化操作的库。比如：自动打开网页并截图，示例代码：  t.init() t.url('') t.type('q', 'decentralization[enter]') t.snap('page', 'results.png') t.close()    shift：一个 Ruby 语言写的在线 MySQL 数据库迁移工具。     Percent：让 Swift 语言支持百分比类型，消除精度缺失的烦恼。示例代码：  import Percent  10% + 5.5% //=> 15.5% -10% / 2 //=> -5%    cascadia-code：微软开源的一套，有趣的是可以组合字符创建新的字形。组合效果如下：     python_ebook：Python 编程相关的电子书资源集合项目。  book：（英文）《Cosmic Python》讲述如何管理复杂性的 Pythonic 应用程序结构的书籍。    BigData-Notes：大数据入门教程，该教程介绍了大数据常用技术栈的基础和核心知识。内容涵盖：Hadoop、Spark、Storm、HBase、Hive、、Kafka 等。    dimensionality_reduction_alo_codes：该项目使用 Python 实现了 11 种经典的数据抽取（数据降维）算法。同时附有相关资料、展示效果，适用于机器学习初学者和刚刚入坑数据挖掘的小伙伴。     以上，就是今天分享的内容，希望更多的人能够知道 HelloGitHub 这个项目，内容已经在这了，万事俱备，差的就是你学习的驱动力和对作者 Star 的支持了。  ❤️ 看完有所收获？希望爱学习的你不要吝啬三连击哟[点赞 + 收藏 + 评论]"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",九章算法,"即使作为编程新手，刚刚接触GitHub，也建议你从最简单的项目入手，而不是单纯研究大量理论。 这个3000+ starts的优（宅）秀（男）项目：/就非常适合初学者。作为全球最大同性交友平台，这个项目里集结了大量的女装大佬。而且，这应该是 了，就算不会写代码也都可以参加。你可以在这里学习 GitHub 的用法，从克隆项目、创建分支、提交和同步修改，到合并分支请求的整套流程，只需一次即可熟悉 Git/GitHub 的使用。  好了，接下来分享一些正经的。 基于这个项目，你就可以马上开始你的实践了。： 注册一个帐户。 填写仓库的名字和描述。创建好了之后，点击“Branch master”，创建分支——在文本框中输入分支名称和描述，然后点击蓝色部分确认。输入想要提交的代码以及下方的文件名和描述后，点击最下方的Commit new file即可。在github上，提交&保存修改的操作是。每一次的commit都会被记录，可以被其他用户查看。点击铅笔图案即可修改，修改后点击Commit changes即可。点击New pull request，选择你所做的分支，编辑你想修改的内容，经过与原来内容的对比，确认后提交请求。然后@特定的人或者团队，请求他们review，并反馈给你（还可以请求把你的代码加入他们的分支）。点击绿色按钮，将自述编辑合并到Branch master。合并成功后可以删除该分支。点击“gist""然后选择“All gists”，可以查看别人写的代码。蓝色框“commonts”、“stars”，可以评论或跟踪关注别人的代码。点击别人代码右上方的”forks”，然后点击“Embed”，选择Clone，即可克隆保存别人的代码。点击Download，可以下载他人代码到本地。点击“Revisions”即可查看修改历史，以及修改前和修改后的对比。当然，除了这些基础的功能之外， 更是一个强大的宝库，怎么发现宝藏，是有诀窍的。当我们在工作中需要快速掌握和使用新的技术，又没有太多精力从头开始学习，我们就可以在 GitHub 上寻找相应的 Demo，在简单了解原理、稍作尝试之后，引入到项目中。你可以按照，以查找是否有合适的 Demo。有时候，我们需要寻找一个合适的脚手架来帮助我们做出想要的东西，这时候我们可以，直接使用技术栈 + boilerplate 或者 starter 等关键词进行搜索，如 。如果其中找到的组合技术栈不大符合自己的要求，那么再加上相应技术栈的关键字，如  即可。在Github上，有一些前人总结整理好的宝库，比如Awesome-xxx 系列。只要有一定知识广度的领域、语言、框架等，都有自己的 awesome-xxx 系列的项目，如 , awesome-iot, awesome-react 等等。在这样的项目里，都以一定的知识体系整理出来的，从索引和查阅上也相应的更为方便。如果你想学习一些新的东西，进入一个新的领域，那就搜索 awesome xxx 吧。GitHub 上拥有大量的学习资源，从各类文章到各种笔记，还有各式各样的电子书。如：GitHub 上还可以搜索到各种 的英文书籍的翻译，或是各种电子书的 PDF 版。还有一些库，可以提供相应的学习资源，如 free-programming-books-zh_CN，即免费的编程中文书籍索引。与此同时，Github上不乏简单的新手项目，实践练手再好不过：刷题超过3000+的FB大佬令狐老师，在Github仓库里分享了一套自己爆肝整理的算法模板（Java+Python两种模板），新手都可以直接套用！近期还有更新新手编程必刷100题，非常适合入门级，但刷题又没头绪的同学。：一个可视化设计的CMS系统（）。页面布局是可以直接在线设计，页面也是可以在线设计，编辑的，模板是可以直接在线编辑的，样式还可以可视化直接编辑，内容板块可以直接从现有板块中快速添加。是一个非常适合新手跟进的优质项目。：一款基于 Keras/ 的 Python 3 模块，可以用来创建字符级的。：一款基于JAVA企业级平台研发的社交管理系统，依托企业级JAVA的高效、安全、稳定等优势，开创国内JAVA版开源SNS先河。数据库使用MYSQL，全部开放。 最后，祝你寻宝愉快~~免费试听，前、资深面试官令狐冲老师讲授。覆盖90%国内外一线大厂算法面试高频考点，帮助你1个月内搞定算法面试，横扫大厂offer。"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",七月在线 七仔,wangbojing介绍：wangbojing整理了上百份的企业大牛内部pdf和PPT，包括不仅限于等等等等尽在其中把技术大牛作为自己职业生涯规划目标的你一定不能错过！！ 别忘哦！作者：ivmm介绍：学生可以用其特殊身份享受到许多的福利，本项目作者汇总了各类学生身份可以享受到的优惠，包括GIthub学生包、Microsoft imgine学生包、AWS学生包、阿里云校园计划、校园计划、百度云校园计划、购买苹果、微软大疆等产品也可以享受到优惠。作者：soimort介绍：身为一名自媒体运营或者电影、电视剧爱好者，这个项目就是一个神器，它可以帮助你下载并保存喜欢的视频，可以随时浏览的同时避免了广告的打扰。：作者：Jinnrry介绍：以下为作者的自述：项目起因，大约2年前，我大学毕业时，初入社会，完全不知道要到哪里去。于是当时抓取了各个城市的招聘、租房数据，分享了各个城市哪里工作机会多，哪里租房便宜，哪里大企业多...大约半年前，又到毕业季，看见很多人跟我当初一样讨论薪资，租房相关的东西，于是我想起了当时的这个项目，然后翻出当时的项目，改了改，最终开源出来，希望给大家一些参考。抓取了目前抓到了18W+全国各个城市的招聘数据与200W+全国各地的房屋数据。租房和二手房数据，我使用了Colly框架，抓的链接租房和二手房页面。总的来说对于刚毕业的小白这个项目时非常有用的！！！！作者：CyC2018:技术面试必备基础知识、Leetcode题解、后端面试、Java面试、春招、秋招、操作系统、计算机网络、系统设计。本文作者：yzn配图来自GitHub相关项目、相关新闻报道、视频来源见文中、部分图片基于CC0协议，如有争议可联系。
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",吴师兄学算法,"虽然我很早就知道 GitHub，但是学会逛 GitHub 的时间特别晚。当时一方面是因为菜，看着这种全是英文的东西难受，不知道该怎么去玩，另一方面是一直在搞 ACM，没有做一些工程类的项目，所以想当然的以为和 GitHub 也没什么关系（当然这种想法是错误的）。后来自己花了一个星期看完了 Python 的基础知识，就想着找点项目看一看，学一学，练一练，这个时候我才真正的去了解 GitHub，开始了在 GitHub 的瞎逛之旅，在开始之初，随之而来的问题是我不知道哪些项目当时还是新手的我，哪些项目是好项目，哪些项目好玩有价值。虽然现在我已经在 GitHub 上逛的相当流畅，但我还是想如果有一个东西可以收集这些对新手友好的东西，那么我当时可以少走更多的弯路，节省更多的时间吧。那么有这么一个东西么？有的，而且已经做了三年多，这就是，一个分享 GitHub 上有趣，入门级的。GitHub 网址：在项目中，内容每月 28 号以月刊的形式更新发布，主要是面向编程新手、热爱编程、对感兴趣人群的项目。更新的内容主要包括：各种语言的流行项目、入门级项目、让生活变得更美好的工具、书籍、学习心得笔记、企业级项目等。这些项目都有一些共同的特征，那就是很酷，非常容易上手的项目，编程的魅力和便捷体验起来就是这么简单。再次给出 GitHub 地址: 下面我们就来看看，这个项目具体包括啥，我们以最新的月刊（43 期）为例。每个类型的项目我们挑一个来看。：一个终端复用工具，可极大的提高工作效率。BenchmarkDotNet：功能强大的用于基准测试 .NET 库。dbg-macro：打日志是 C++ 开发中必不可少的一种 debug 方式， 受  中 的 dbg 启发，提供比  和 std::cout 更好的宏函数。主要有如下特点：#include <vector> #include <dbg.h>  // You can use ""dbg(..)"" in expressions: int factorial(int n) {   if (dbg(n <= 1)) {     return dbg(1);   } else {     return dbg(n * factorial(n - 1));   } }  int main() {   std::string message = ""hello"";   dbg(message);  // [example.cpp:15 (main)] message = ""hello"" (std::string)   const int a = 2;   const int b = dbg(3 * a) + 1;  // [example.cpp:18 (main)] 3 * a = 6 (int)   std::vector<int> numbers{b, 13, 42};   dbg(numbers);  // [example.cpp:21 (main)] numbers = {7, 13, 42} (size: 3) (std::vector<int>)   dbg(""this line is executed"");  // [example.cpp:23 (main)] this line is executed   factorial(4);   return 0; }go-admin：基于 Golang 语言的数据可视化与管理平台。特性如下：eladmin：基于 Spring Boot 2.1.0、 的前后端分离的后台管理系统，支持数据字典与数据权限管理、一键生成前后端代码、前端菜单动态路由等。基于 Spring Boot2.1.0 框架，涉及的技术栈：非关系数据库 redis、接口测试工具 swagger、 数据源驱动、邮件依赖（javax.mail）、三方支付和云存储 、页面 freemarker。技术栈丰富，初学者可以作为实战项目学习和使用。chart-race-react：一个简单易用的 Bar Chart Race（长条图赛跑动画） React 组件。示例代码：import ReactDOM from ''; import BarChart from 'chart-race-react';  ReactDOM.render(<BarChart />, document.getElementById('root'));TagUI-Python：一个 Python 自动化操作的库。比如：自动打开网页并截图，示例代码：t.init() t.url('') t.type('q', 'decentralization[enter]') t.snap('page', 'results.png') t.close()shift：一个 Ruby 语言写的在线 MySQL 数据库迁移工具。Percent：让 Swift 语言支持百分比类型，消除精度缺失的烦恼。示例代码：import Percent  10% + 5.5% //=> 15.5% -10% / 2 //=> -5%cascadia-code：微软开源的一套，有趣的是可以组合字符创建新的字形。组合效果如下：python_ebook：Python 编程相关的电子书资源集合项目。book：（英文）《Cosmic Python》讲述如何管理复杂性的 Pythonic 应用程序结构的书籍。BigData-Notes：大数据入门教程，该教程介绍了大数据常用技术栈的基础和核心知识。内容涵盖：Hadoop、Spark、Storm、HBase、Hive、、Kafka 等。dimensionality_reduction_alo_codes：该项目使用 Python 实现了 11 种经典的数据抽取（数据降维）算法。同时附有相关资料、展示效果，适用于机器学习初学者和刚刚入坑数据挖掘的小伙伴。以上，就是今天分享的内容，希望更多的人能够知道 HelloGitHub 这个项目，内容已经在这了，万事俱备，差的就是你学习的驱动力和对作者 Star 的支持了。再补充一下计算机的学习资源。所以，如果是在校大学生的话，强烈建议在校期间好好学习计算机基础知识。目前互联网公司技术岗招聘的时候主要考察两方面：1、2、在校招和社招中，这两者的比例会有所调整，大致上可以这么说，校招寻找的是那些基础好的同学，他们具备更强的可塑性，方便培养成为公司的骨干中坚力量，所以关于计算机基础的考察是重点；而社招寻找的是那些能快速干活的同学，他们能尽快的熟悉项目，能给公司带来收益，所以关于专业技能知识的考察是重点。简单来说：校招：社招：可以看出，无论是校招还是社招，计算机基础都是必考的内容，因为对于程序员来说，计算机基础就相当于是内功心法，而专业知识相当于外功，如果内功修炼的不扎实，那么很可能走火入魔，也就是。所以互联网公司在招聘的时候，往往在一轮二轮面试中重点考察计算机基础，比如笔试考察算法、计算机网络，面试问一下操作系统的知识点，如果说计算机基础掌握的不够扎实，那么基本上就一轮游，除非你的简历和专业知识能力十分的出众，让面试官觉得你很优秀，否则后面的面试环节和你无缘，也就拿不到 Offer。并且，计算机基础这个能力是伴随着程序员的整个职业生涯的，它并非像高考时学的化学、物理、地理知识，高考结束后迅速忘掉，在程序员的工作中，计算机基础内容时刻出现。比如设计一个简单的用户接口，需要实现以下的功能：如果让你设计数据库，应该怎么设计信息存储权限？如何你熟练掌握了各种数据结构的特点的话，那自然而然想到使用  来存储权限，相反，如果你计算机基础知识不扎实，可能需要花一周时间却写十几个糟糕的接口。我们把权限划分成最小粒度之后，每一个 bit 都它的含义， 例如我们把权限划分为以下几种：每勾选一个选项，就代表着这个权限被授权，为了保证可扩展性，我们使用一个 uint64 来保存这些 bit ，也就是说，我们一共可以划分 64 种细分权限，然后对这些权限进行组合。例如，第一个 bit 如果设置了，那么就代表可以获取你的昵称、头像、地区、性别等基本用户信息， 第二个 bit 如果设置了，就可以用你的身份发状态。再者很多互联网大厂不喜欢培训出来的程序员，除了因为一些培训出身的程序员喜欢简历造假（一年工作经验伪造成三年工作经验），还有一个重要的原因就是他们的计算机基础几乎为零，只具备简单的  干活的能力，那么一旦业务中出现一些问题，他们很难站在更高的维度去发现问题、思考问题。所以，在大学期间把绝大部分时间花在打好计算机基础上是很明确的一个选择。但计算机基础的的确确比较难学，如何学习呢？初学者可以先通过视频入门，知道你学的那些东西是什么、怎么用，细节和进阶通过书籍、源码、文章、项目去完成，并且第一遍视频快速过完，后面的视频边看边思考，不要抄代码，作业可以隔天再写；同时多去尝试，减少路径依赖，时不时和视频里面的正确方案对着干，看看会发生什么，以及怎么处理。如果是对计算机一无所知或者不确定自己是否能走编程这条道路，那么我推荐你花 10 个小时看看《》，这套课程是 Crash Course 旗下的计算机科学相关的视频，早期发布在 Youtube 上，整个系列课程高达 12 亿的播放量，令人开心的是，你可以在 B 站上免费观看，有汉化！Crash Course 的这套计算机科学视频一共 40 集，基本上每集控制在 10 分钟左右，所以，只要不到 10 小时就可以粗略了解计算机科学这门学科，如果你是一个门外汉，相信我，通过这个短短的 10 个小时足以帮你打开计算机的大门。你可能会不禁疑惑，十几分钟能学到啥？而事实上，Crash Course 的视频信息量很大，每一秒的时间都是精华，视频里面不仅有图像、视频资料、图表等，更有老师面授，老师的语速也是很快的，如果跟不上，建议 0.75 的速度进行观看。如果你是小白，想了解一门学科，不妨通过该系列视频作为切入点；如果你是某学科学生，可以用该视频梳理总结课程的框架结构；如果你想拓宽知识，这个系列视频作为下饭菜也是十分合适的。Crash Course 的 Youtube 官方频道地址如下：B 站频道地址如下：计算机组成原理介绍了计算机的基础知识，包括计算机的各子系统（运算器、存储器、控制器、外部设备和输入输出子系统等）的基本组成原理、设计方法、相互关系以及各子系统互相连接构成整机系统的技术。 《程序是怎样跑起来的》 对于编程来说，兴趣最重要，没兴趣，给你推荐再多的经典书都是白搭，所以学习计算机组成原理最好从这套书入门。然后就是下面这些经典书了。《Computer Organization》  《》 我一直认为读书是世界上性价比最高的成长方式，书很便宜但分量很重，是让我们摆脱平庸走向卓越的方式之一。对于计算机专业的学生而言，读计算机经典书籍不光能让你快速提升知识和能力，更会让你在校招之际如虎添翼。视频则推荐伯克利大学 Brian Harvey 的 SICP 课程，。建议至少学完 SICP 的前三章，并把练习题做完。如果你觉得 SICP 的课程太难，可以选择 How to Design Programs。还有两门课也很经典：Harvard的CS50： MIT的6.001：无论你学习什么编程语言，和都避免不了和操作系统打交道，比如你学习 Java，用到多线程技术，实际上操作系统才是负责管理进程和线程的；比如你学习到内存分配的知识，c++里可以直接分配一段内存，此时实际上是调用操作系统提供的API进行内存分配。如果不懂操作系统，你在未来学习编程语言的高级特效，涉及到线程进程调度，内存分配，或者是学习Linux相关的知识时，都会一头雾水，所以，只有学会了操作系统，那么才能够更好地学习其他语言和技术。基于此，频繁出现在笔试环节。 《现代操作系统》 《操作系统导论》《深入理解计算机系统》 《》 我一直认为读书是世界上性价比最高的成长方式，书很便宜但分量很重，是让我们摆脱平庸走向卓越的方式之一。对于计算机专业的学生而言，读计算机经典书籍不光能让你快速提升知识和能力，更会让你在校招之际如虎添翼。首先正视一个问题：！换言之，需要准备一些基础知识在学习。编译原理的学习和实践通常基于对计算机编译过程、、甚至一定的数学知识有一定积累，这些知识分别分布并应用在了编译原理的不同阶段。没有这些基本知识的积累，很快就会在某个阶段由于功底不够而无法再继续后面的学习。编译原理非常难，而且非常枯燥，需要要很强的功底才可以入门学习，所以，先认认真真的积累上述的一和二在入门学习吧。 《-第二版》 计算机网络的相关知识在工作时使用的频率还是挺多的，毕竟，所谓的CURD工程师总是在处理 API 相关的业务。学习计算机网络，你需要懂得Socket编程，知道TCP/IP网络模型，了解OSI七层网络架构，知道一个数据包是如何层层包装，再层层拆包，从客户端发送到服务端。如果你短时间想学好计网八股文准备面试，那么可以看一下这份资料。  《计算机网络-自顶向下方法》 相信无论是已经毕业的同学还是正在学校学习的同学，都或多或少地被数据结构与算法这门课给折磨过。数据结构与算法这门课开篇就讲了一个非常重要的概念：，对于初学者可能还不能完全地理解这句话，不过对于已经工作两三年的同学相信对这句话是深信不疑的。对于数据结构与算法的学习，我个人认为应该分层三个步骤：1、首先先大致了解什么是算法，可以通过一些科普读物来入门，这个过程我称之为；2、接着可以尝试实现一些比较容易的数据结构和算法，这样可以更加深对数据结构和算法的了解，这个过程我称之为；3、最后去了解数据结构与算法背后的相关数学原理等，这个过程我称之为具体的学习过程可以阅读我之前的一篇收藏破 8w 的回答：入门的同学，我建议你不要过度追求上去就看经典书。不要一来就拿着开始啃，初学就去啃这些书肯定会很费劲。你一旦啃不下来，挫败感就会很强。然后就放弃学算法了。所以，入门的同学，我建议你找一些比较容易看的书来看，比如《大话数据结构》和。不要太在意书写得深浅，重要的是能不能坚持看完。《大话数据结构》 这本书最大的特点是，它把理论讲得很有趣，不枯燥。而且每个数据结构和算法，作者都结合生活中的例子进行了讲解， 能让你有非常直观的感受。虽然这本书有 400 多页，但是花两天时间读完，应该是没问题的。如果你之前完全不懂数据结构和算法，可以先从这本书看起。《算法图解》 跟《大话数据结构》走的是同样的路线，就像这本书副标题写的那样，“像小说一样有趣的算法入门书”，主打“图解”，通俗易懂。它只有不到 200 页，所以内容比较少。作为入门，看看这本书，能让你对数据结构和算法有个大概的认识。当然，这些入门书共同的问题是，缺少细节，不够系统，也不够严谨。所以，如果你想要系统地学数据结构和算法，看这两本书肯定是不够的。通过基本入门算法书的调教，你已经逐渐体会到了算法的魅力，现在正是时候踏入基础系列算法的领域！！！这些书籍需要你费点心思去阅读。很多同学在学习的过程中，看到一篇算法科普文章经常会有这样的想法。哎呀，要是文章的代码是 Java 语言就好了呀。哎呀，要是文章的代码是 Python 语言就好了呀。虽然代码并不会很严重影响阅读，但还是有很多强迫症的同学喜欢看到文章的解释代码是自己擅长的。我这里推荐《数据结构和算法分析》，这本书非常系统、全面、严谨，而且又不是特别难，适合对数据结构和算法有些了解，并且掌握了至少一门编程语言的同学。而且，这个作者也很用心。他用了三种语言，写了三个版本，分别是：《数据结构与算法分析 ：C 语言描述》《数据结构与算法分析：C++ 描述》《数据结构与算法分析：Java 语言描述》。大家都知道，对于程序员来说很大程度上算法就是为了应付面试的。所以，推荐三本有益于面试的书籍，分别是：《》《》。《剑指 offer》这本书的目的非常明确，就是为了面试。这本书几乎包含了所有常见的、经典的面试题。如果能搞懂这本书里的内容，应付一般公司的面试应该不成问题。另外，我每天都在 B 站录制《》，到今天已经坚持了半个月，目的也是为了能够帮助到校招和社招的同学，。相信我，基本上你看一遍就会觉得这道题目没什么难，觉得《剑指 Offer》也就那样，能坚持下去学习。《编程珠玑》这本书的豆瓣评分非常高，有 9 分。这本书最大的特色就是讲了很多针对海量数据的处理技巧。这个可能是其他算法书籍很少涉及的。面试的时候，海量数据处理的问题也是经常会问的，特别是校招面试。不管是开拓眼界，还是应付面试，这本书都很值得一看。《编程之美》这本书有多位作者，其中绝大部分是微软的工程师，所以书的质量很有保证。不过，这里面的算法题目稍微有点难，也不是很系统，这也是我把它归到面试这一部分的原因。如果你有一定基础，也喜欢钻研些算法问题，或者要面试 Google、Facebook 这样的公司，可以拿这本书里的题，先来自测一下。书籍下载地址：（PS：感谢大家耐心的阅读，算法是程序员的重中之重，必须攻克，大厂面试必考，顺便送一份阿里大佬刷Leetcode总结的算法笔记，如果你能吃透，那我相信80%的技术面试都会不在话下： 这本书的目录，非常经典： 这门课由斯坦福大学计算机科学系教授授课，适合至少掌握一种编程语言的编程学习者。斯坦福的课强调理论和概念上的理解。学完这门课后，对你今后面对技术面试时将会非常有利。Daniel M Kane、Pavel Pevzner等五位老师共同授课，这门课程的最大特点是理论和实践的结合，你将学习到解决各种计算问题的算法技巧，并实现大约100个算法编码问题。Kevin Wayne和共同授课，涵盖了有关算法和数据结构的基本信息，重点是Java实现的应用程序和科学性能分析。第一部分包括基本数据结构、排序和搜索算法。第二部分重点讨论了图形和字符串处理算法。算法面试的话可以提前看看这一份刷题笔记：目前网站支持中文，印尼文，日文等多语言版本。目前已经有很多常用的数据结构与算法的可视化，如：常见的数组、链表、队列、、、各种排序等，如下图所示：下面这是一个，建议大家，Mark住别丢了，。1、怎么学好数据结构，看下面这个回答，已经获得了 2、如何系统地学习算法，看下面这个回答，已经获得了3、新手该如何使用 GitHub，看下面这个回答，如果在大学期间就知道使用 GitHub ，那么能力远超同龄人。4、想成为一名优秀的程序员，那么这些程序员平时都喜欢逛的论坛怎么说你也得收藏一些吧。5、无论别人怎么说，我都是坚定不移的选择计算机专业。6、如何系统地学习 C++ ，这个回答能帮你找到路线。7、想要准备 Java 面试，那么这些面试题必须掌握。"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",智晓云,"如果你是一枚Coder，但是你不知道Github，那么我觉的你就不是一个菜鸟级别的Coder，因为你压根不是真正Coder，你只是一个Code搬运工。但是你如果已经在读这篇文章了，我觉的你已经知道Github了。github是一个基于git的代码托管平台，付费用户可以建私人仓库，我们一般的免费用户只能使用公共仓库，也就是代码要公开。Github 由Chris Wanstrath, PJ Hyett 与Tom Preston-Werner三位开发者在2008年4月创办。迄今拥有59名全职员工，主要提供基于git的版本托管服务。目前看来，GitHub这场冒险已经胜出。根据来自维基百科关于GitHub的描述，我们可以形象地看出GitHub的增长速度：今天，GitHub已是：要想使用github第一步当然是注册github账号了， github官网地址：。 之后就可以创建仓库了（免费用户只能建公共仓库），Create a New Repository，填好名称后Create，之后会出现一些仓库的配置信息，这也是一个git的简单教程。首先在本地创建后面的改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在下生成文件夹，进去，打开，复制里面的。回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。为了验证是否成功，在git bash下输入：如果是第一次的会提示是否continue，输入yes就会看到：You've successfully authenticated, but GitHub does not provide  。这就表示已成功连上github。接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。进入要上传的仓库，右键git bash，添加远程地址：后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote ""origin""内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。创建新文件夹，打开，然后执行  以创建新的 git 仓库。执行如下命令以创建一个本地仓库的克隆版本：如果是远端服务器上的仓库，你的命令会是这个样子：你的本地仓库由 git 维护的三棵""树""组成。第一个是你的 ，它持有实际文件；第二个是 ，它像个缓存区域，临时保存你的改动；最后是 ，它指向你最后一次提交的结果。你可以提出更改（把它们添加到暂存区），使用如下命令：这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：现在，你的改动已经提交到了 ，但是还没到你的远端仓库。你的改动现在已经在本地仓库的  中了。执行如下命令以将这些改动提交到远端仓库：可以把  换成你想要推送的任何分支。如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：如此你就能够将你的改动推送到所添加的服务器上去了。分支是用来将特性开发绝缘开来的。在你创建仓库的时候， 是""默认的""分支。在其他分支上进行开发，完成后再将它们合并到主分支上。创建一个叫做""feature_x""的分支，并切换过去：切换回主分支：再把新建的分支删掉：除非你将分支推送到远端仓库，不然该分支就是 ：要更新你的本地仓库至最新改动，执行：以在你的工作目录中  并  远端的改动。要合并其他分支到你的当前分支（例如 master），执行：在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现。 这时候就需要你修改这些文件来手动合并这些。改完之后，你需要执行如下命令以将它们标记为合并成功：在合并改动之前，你可以使用如下命令预览差异：为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做  的标签： 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：内建的图形化 git：彩色的 git 输出：显示历史记录时，每个提交的信息只显示一行：交互式添加文件到暂存区： 以上是简单的github的使用教程，如果有问题，欢迎留言咨询"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",张童,1. Fork一份你想要做贡献的代码，修改后 Pull Request，等待主人审核通过。 2. 用 Github写一个技术博客吧，这个没有什么难的，用git写博客很有 Geek范，不知不觉中，你就能熟练掌握git了。
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",沉默王二,首先呢，非常感谢小伙伴的邀请。另外，下面这条留言确实也激起了我很大的写作兴趣，如下：点赞人数还不少，这说明还真有不少工科生不会用 GitHub，你看大小写都没有区分（手动狗头）。所以我就很想借这个答题的机会，按照我自己的方式给广大的 GitHub 新手科普下，“”插个楼，维基百科是这样定义的：那 Git 又是什么呢？再来看维基百科的定义：简单点说就是，Git 是一个，一个分布式的版本控制系统。它可以在背后默默地帮你管理和跟踪代码的历史版本，就好比一个时光机，让你在代码出错时不至于手足无措，快速回退到之前的历史版本。 想了解更多 Git 方面的知识，可以点击这个链接跳转：很多初学者误认为 Git 就是 GitHub，但其实不是的。GitHub 是一个代码托管网站，只不过背后使用了 Git 作为版本管理工具。主要服务就是将你的项目代码托管到云服务器上，而非本地硬盘上。类似的网站还有  和 （国内版，中文名叫码云）。上面这个答案是创始人之一 Chris Wanstrath 说的，我表示无法反驳。GitHub 会自动帮你记录代码的修改，在必要的时候，能够帮助你快速回退到之前的历史版本。GitHub 是世界顶级开发者的聚集地，在这里你几乎可以找到任何你想要的东西。上面分享有许多优秀、著名的开源项目，在遵守其 License 的前提下，你可以免费使用、下载这些开源项目。这也是 GitHub 最为吸引人的地方。通过下面这个网址可以查看 GitHub 上 TOP 200 的优质开源项目：其中就包含了我前段时间给大家推荐的 ：中文版离线 PDF 下载地址如下所示：关于优质项目的搜索，你可能需要一些技巧：你可能还需要一些方法：GitHub Pages 提供静态网页托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，然后构建并发布网站。配合 Jekyll、Hexo、Hugo、Pelican、Gridea 等第三方静态模板系统可以快速搭建一个漂亮的博客网站。比如说我的个人博客用的就是 Jekyll，访问地址如下：GitHub 有太多太多优质的教程资源，只要你肯去挖掘。下面这个网址列出来的资源都不错。比如说面试和刷题：下面这个网址列举了一些非常不错的书单：你可以将自己的开源项目发布到 GitHub 网站上，项目越受欢迎获得的 Star 越高，说明业界对你的能力越认可。一份优秀的 GitHub 主页，能为自己的简历润色不少。我最喜欢的两个实战项目（推荐过无数次了），来自我的好朋友和 macrozheng。微人事（19.2k star）的地址：电商系统（43.1k star）的地址：当你看到这么多 star 的项目，并且真的是名副其实的好项目，是不是就特别佩服它们的作者，实话实说，我既是他们的朋友也是他们的粉丝。离线版的 PDF 下载地址：说了这么多 GitHub 的好处，还等什么，赶紧去注册一个 GitHub 账号吧！一个 GitHub 账号除了可以作为交友的名片，当然也可以用来登录一些英文的学习网站，比如说 ：当然可以直接在 GitHub 网页上操作，不过，对于新手来说，一个 GitHub 桌面版更方便、更直白、更傻瓜式一些。我现在要写一个《教妹学Java》的专栏，需要一个仓库来存储代码，怎么做呢？打开 GitHub 桌面版，选择「File」→「New Repository」。然后填写仓库名、简介，选择仓库存放的本地路径，就可以点击「Create Repository」 创建新项目了。创建完成后，可以在网页端看到该仓库。（咦，怎么刚创建就有 star 了？）如果你在逛 GitHub 的时候，发现了一些不错的项目，想占为己有，那太方便了，只需要一个  就能搞定。前几天，我发现了一个很有意思的项目：-shitcode，中文译作。不过，代码示例是用 JavaScript 编写的，并且中文翻译得很烂。怎么办呢？fork 它，然后就可以重制成 Java 版，并且按照我的风格进行翻译。GitHub 的一个好处就是，它把项目存放在云端，当你需要的时候，只需要克隆到本地就可以了。打开 GitHub 桌面版，选择「File」→「Clone Repository」。 可以直接克隆你账号下的项目，包括你创建的、fork 的、star 的。也可以通过 URL 的形式进行克隆，这时候，还可以指定进行克隆。建议你在电脑上安装 ，一款颜值非常高的，安装成功后，GitHub 桌面版默认自动使用它来关联项目。打开后，是这样的（见下图），不得不说，颜值真的高。编辑一段文字后保存，可以在 GitHub 桌面版看到发生变化后的文件。填写文件更改后的描述就可以点击「Commit to master」（GitHub 从 10 月份起将 master 更名为 main）按钮提交了。点击「Push origin」 可以同步到 GitHub 云端仓库。如果一不小心提交错了，怎么办呢？点击「History」 面板，找到你要回退的历史版本，右键选择「Revert this Commit」。再次点击「Push origin」就可以了。GitHub 可以多人协作，如果本地想和云端保持同步，可以在 GitHub 桌面版上点击「Fetch origin」如果发现本地和云端有不一样的地方，就可以点击「Pull origin」 从云端拉取了。通过以上这些基本操作，我想你一定会用 GitHub 了。反正入门嘛，先不要去管 issue 啊、pr 啊、wiki 啊，能够迅速地通过实战得到反馈对于学习一门新的技能来说实在是太重要了。只要入了门，有了信心，你会爱上 GitHub 的。如果你不满足于现状，还想更进一步，可以到 GitHub 官方按照课程进行学习。除此之外，我再推荐给你一本不错的入门书籍《》：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",彭宏豪,相信很多人都和我一样，第一次接触GitHub，可能是因为某个大佬将软件安装包放在了GitHub上，我们想从上边下载软件。但单下载还不够，我们还是希望把下载的地址收藏起来，这就要用到GitHub的关注或收藏功能，使用这两个功能之前，需要先注册一个Github账号。Github账号注册分为三步，分别是设置账户、选择订阅和定制体验。设置账户中，设置用户名需要比较慎重，因为如果你以后使用Github来搭建个人博客，用户名也会成为博客地址的一部分。选择订阅这一步，你可以根据自己的需要，选择是否添加订阅，但对于大多数人来说，选择免费账户就可以了。最后一步的定制体验，可能是Github想通过了解你的个人经历，为你推荐合适的项目或内容。如果你不想填写这些信息，可以直接底部的跳过此步骤。Github注册地址：注册完Github账号，第一次接触Github的朋友，可能会囿于网站使用的英文，折腾了半天，都不知道Github该如何使用，于是就把它关掉了。但别急，不妨看看我第一次使用Github后，认为使用Github时，需要了解的5个基本概念。Repository译为仓库，你可以将它理解为文件夹，可以用来存放项目相关的文件。如下图，这里有两个仓库，分别是weblife和ecma6-adventures。点击网页右上角的加号，可以新建或导入仓库。新建仓库时，你需要设置仓库的名称、仓库的可见性，而对仓库的描述则不是必填项。勾选下方的使用README初始化仓库，则会在新建的仓库中生成一个README文件。创建好仓库后，你可以点击Create new file按钮来书写代码，也可以点击README.md右边的编辑按钮，来对仓库的说明文档进行编辑。仓库说明文档README，可以用来说明仓库的用途、代码运行环境等，编辑说明文档需要用到Markdown标记语言。Markdown虽然被称为标记语言，但它不能算是一种编程语言。它可以通过简单的语法标记，使普通文本内容具有一定的格式。由于Markdown的的轻量化、易上手等特点，许多人用它来写博客。对Markdown有兴趣的朋友，可以查看Github给出的Markdown指引：说完仓库相关的内容，我们再来看一下每个Github项目右上角都会有的三个按钮，Watch、Star和Fork。这里的Watch，就可以用来关注你感兴趣的仓库或资源，类似于各种App中的关注功能。点击Watch按钮，里面有4个选项，对应4种不同的通知权限。默认情况下，Watch是处于Not Watching状态的，如果你在Github上看到一个不错的仓库，想长期关注它的动态，那你可以选择切换到第二或第三种状态。打开通知后，当仓库或资源更新后，你可以在账户的个人中心收到通知，如果你绑定了邮箱，那么你也可以通过邮件收到更新提醒。Star直译是星星，但这里理解为点赞或收藏更合适，它可以说是每个Github项目最重要的一个指标，因为Star数值越高，说明这个项目更有价值。Star按钮只有两个状态，第一次点击即成功收藏，这时它会切换到Unstar状态，再次点击则取消收藏。你收藏过的所有Github项目，可以通过账号头像的Your stars菜单进行查看。除了查看自己Star的项目，你还可以查看大佬Star的项目，比如查看老师Star的项目，因为大佬Star的项目，本身就经过了一次筛选，可以更方便地为我们找到优秀的项目。fork，原意是叉子，但在IT领域，它被译为复刻/派生。当你看到一个不错的Github项目，除了可以将它收藏，还可以使用fork，将它拷贝到自己的仓库中。这个功能，是为了方便你在他人分享的源码基础上，进行二次开发，创建不同的软件。当你使用拷贝了他人的项目，你可以在仓库名称下方的小字，看到fork的来源。在每个Github项目下，都会有一个Issue板块，你可以将它看成是一个讨论区或留言区。点击右边绿色的New issue按钮，你可以提交软件漏洞、对项目提出自己的疑问等，而对于项目作者来说，可以通过Issue来收集用户的反馈等。这里仅介绍5个我觉得刚使用Github时，需要了解的基础知识，关于Github的更多帮助，可以查看官方的帮助文。它也有对应的中文版本：以上，希望有帮助。更多精彩内容，欢迎移步我的个人 blog：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",程序员客栈,其实挺不喜欢回答这类问题的，但是大概看了一下前排，上来就罗列了十几个图和步骤，实在觉得手痒痒。那人家都知道拿GitHub做代码库了，为什么还要告诉他到底怎么注册和创建仓库？要是这种问题，直接详情见不就好了！不说自己编程多厉害，但好歹有个7年前端开发经验，我也可以罗列十几个高大上的项目给你，但我明知对你没什么用，我还是希望我的建议和总结能帮到更多的人。首先，不得不实话实说，对新手来说，还是先不要一上来就为GitHub上的项目贡献，这堵南墙撞不好，只会撞碎自己的信心。题主的疑问也代表了大多数新手在使用 GitHub的困境，本来满怀信心的在Github上搜索，结果找到的项目要么太复杂，要么就是死了，到最后一无所获。而我想告诉你一些新手使用GitHub应该知道的事，以及你该怎么做：GitHub上的项目，本身就是为了解决某个特定的问题而存在。当你能碰到它的时候，他就已经是一副安全灵活的模样，背后有着无数代码和复杂的结构做支撑，如果你想要为他贡献一个特性，就意味着你需要去了解它整个是如何运行的，甚至要一些其他人贡献的关键点。如果你只是冒然的看见一个小问题解决，很可能会引出更大的问题。这对初学者来说，光是去了解的部分难度就很大。项目是完整的，但不是完善的，一个项目很可能有成千上万个未处理的pull requests。但这个问题就像家长教育孩子，它虽然是开放式的邀请大家来围观，可家长总不喜欢那些没什么权威的人来指手画脚。所以如果你发现了一个问题，还非常精心的贡献出一个修复方案，很可能被淹没在人潮之中。我并不是说反对新手为项目做贡献，凡事都有第1次，只要你决定要从这个平台开始，那这些这些都是你必须要经历的。这样你才能在一开始就把握住这个项目的生命周期，从想法到设计再到实现，真正的自己去走一遍这个流程，我刚开始就是自己敲了几个小游戏入门的。比起盲目的在别人的代码里迷失，不如在自己的项目里寻求突破，渐渐的你就会发现自己不再只是个新手。那么你该如何创建自己的项目呢？这个问题最好有普遍性，越多人的问题，代表着你的项目越容易成功。它并不需要是一个非常完整的程序，哪怕只是一个简单的小补丁，小游戏，都能让你体验到自己创建项目的乐趣。就像学习编程一样，你也需要花时间去熟悉Git的工作流程第2步：你不仅是在学习编程，你也是在学习如何使用GitHub以及如何为开源项目做共享。诸如创建分支、了解push、pull、 rollback等，具体可以见：创建一个公共存储库，并编写Readme.md文件，它是指描述你的项目内容，项目背景等信息，另外最关键的一点是，你必须要有一份能向人清晰的阐述项目路线的计划，因为没有人关注你。如果你在乎自己的时间和精力，你就该知道你在做什么记住一点，你写项目永远都在未完成的路上。你的项目究竟怎么样？都是用户来评判的可是github有成千上万的项目。所以你需要思考怎么样把自己的项目送到用户眼前，吸引更多的人来为你测评。然后你就会发现自己写的全是Bug，怎么办呢？当然是请其他人和你一起为这个项目贡献代码，一开始，这可能很困难，但是这一步一旦迈过去，你也可以成为一个成熟项目的维护者。那个时候， 你就已经有了相当的经验，不再是被边缘化的新手，那么我完全鼓励你积极大胆的去为别人的项目做贡献。最后，给题主推荐一篇关于自学的文章：以及一个接有偿开发项目的平台——程序员客栈。
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",东来,"下面请出被称之为镇站之宝的GitHub项目，号称百万码农的启蒙师，而且我敢保证，用这个项目学GitHub，你一点都不会痛苦，反而会很爽♂♂♂总所周知，GitHub是程序员分享技术、同性交友、女装的圣地。 毕竟自学编程太苦了，不如~我随便从这个项目中里面给大家截两张图，让你们感受一下女装大佬的威力~  （老板要是发现我上班时间在看这张图片，一定会锤死我，别忘记双击屏幕救救孩子。）言归正传，其实这个项目的本意是帮助不懂编程，非程序员的朋友学习使用GitHub。且并不要求你贡献代码，人人都可以参加。可以从这里学习从克隆项目，创建分支，提交和同步修改，到合并分支请求的整套流程，一次即可熟悉 Git/GitHub 的使用。而且非常的有趣味♂，看着其他人的女装照片，没准不光能学到GitHub的使用，更能找到未来的男朋友♂为此其中一位大佬专门在B站录制了教学视频，来帮助更多的同学学习GitHub的正确使用方式。 别忘记点赞收藏后，去体验一下分布式女装~然后，你会发现GitHub的真面目：鉴于网上目前的教材都太落后，github for windows已经更新了多个版本，好多界面都发生了变化，所以来写这个教程。目的是为了帮助和我一样初学github，但是苦于找不到教程的同学，为了写最详细的教程。配备了大量的图文介绍。该教程是基于（万字长文警告，先点赞收藏再看，以免后续找不到~）由于教程为 3.0.17.0 ，之后github对客户端进行了新版的更新，这里的图为新版与旧版对比。希望可以给大家带来帮助。说到什么事github，我们先看wikipedia的描述“”准备工作都完了，我们开始正式学习。^_^github for windows的界面非常清爽，的确符合geek的性质，个人表示非常喜欢。 我们来建立第一个仓库，点击左上角的，初次建立他会有一圈圈的涟漪，非常漂亮哦。 打开之后有三个选项，，，。  我们分别来介绍一下这三个功能。如果本地有工程，就可以使用Add添加 3、这个功能其实最好理解了，克隆这名字通俗易懂好理解。 如何使用Clone功能呢？  就是将在浏览器上已经创建好的项目导入到本地，换句话说就是下载到本地。4、创建一个代码库， Name填写你的仓库名字。Local path写你将要保存在本地路径。我们主要从这个功能开始github之旅。  我们在这里填写First，来创建第一个我们自己的repoeitory。 我们来找到刚刚创建的代码库在本地的位置。就是刚刚在的地址路径，当然如果你忘了，请右键点击First。选择Open in Explorer。这样我们就可以转到刚刚的路径下。 我们新建一个文本文档。在里面编辑。 如下此时的github就会变成这个样子(Changs)：你会发现此时github会出现刚刚编辑的内容。并且前面会有，那么这个是什么用呢？ 其实这个蓝色标识是提示你会上改变的文本。比如我第一次只想改变 并不想把上传。 这时我们点击一下的前面的。你会发现前面的蓝色标识没有了。 我们填写好和 Summer就是这次改动的总结，我们也可以理解为标题*（必填）（选填）*我们这里只选择第一个修改对象，也就是就行修改。summer我们填写为，Description我们填写为的内容，之后点击。 切换到目录下  我们会发现他改变了。 这次我们把进行添加。在目录下发生了这样的改变。会在目录下形成一天时间线，来指出每一次的修改标题和内容，同时会把修改的内容用标出。 我们打开本地的文本，删除刚刚添加的第一行。此时你就会发现github发生了变化。  此时的标识删除。我们写好Summer和Description并点击Commit to master。 这样我们就删除了第一行。同时在目录下又多了一条时间轴。 这样我们就完成了删除。此时，当我们打开github网页，就会发现此时你的修改的内容并没有出现在这里。这是因为你没有进行同步，仅仅是在本地就行了修改。此时我们仅仅需要点击右上角的此时你就会本地内容已经上传到网页上。 当你的代码库上传后就会发现，原来的以及变为了。  点击同步代码库！我们创建第一个分支取名为点击创建第一个分支我们发现此时的分支已经切换到了我们刚刚创建的分支 。我们来修改分支上的内容。 我们仍旧打开进行编辑。输入以下内容创建的第一个分支。打开github进行，填写和之后我们点击在目录下，我们可以看到会有两条主线，分别是和并且在的分支下又一个蓝色的和一个。表示当前的节点，表示下一次修改时的节点。标示的部分就是当前的分支 点击划线部分就会出现分支的列表 我们点击就会切换到分支。这个操作和同步仓库是一个操作，点击上传或同步分支。首先要把分支切换到你要删除的分支下，如我们要删除，将分支切换到点击右上角齿轮就会出现 点击就会弹出一个对话框，询问删除的内容。第一个是将本地与网页全部删除；第二个仅仅是删除本地。第三个是取消。将一个分支与分支进行合并。 我们首先把分支切换到下，点击进行分支的合并。此时我们查看目录下就会 是一个轻量级的，基于分支的工作流程，支持团队和部署在那里的定期做项目。 在我们的队友添加一个写的权限，这样我们的队友才能很好的修改代码。 我们打开网页上的,点击, 之后我们找到，这里会让我们验证密码，之后就有添加合作者的选项。这样我们就能添加我们的小伙伴了！新的小伙伴有着同样的权限去修改和管理代码。 此时我们就会看到我的小伙伴wevan的github主页上就会出现关于我创建的First的各种通知。 在我们创建一个叫的分支。我们首先把分支切换到新的分支上修改新的版本填写好新的和，提交新的版本并同步。 这样小伙伴登陆到上就看到了就可以清楚的看到一切的修改。这个是整个流程中比较关键的一步，发布。点击客户端或者网页上的发布。 我们这里点击我们填写好必要的说明性文字 点击 他既然让我们到GitHub上看，我们就听他的，点击，进入。 我们发现小伙伴已经在下面留言了！你的小伙伴开始对你的代码讨论，修改，迭代。合并分支我们之前已经说过，这里就不再赘述。基本的一些用法就完成了。看着这个操作一遍基础就差不多了。在上述的几个教程里讲解了一些Github的基础使用，现在开始讲解一些使用技巧。在github页面上是没有搜索的按钮，如何搜索呢。 在网页上按就会出现。  这样我们就能很方便的查找到我们需要的代码了。常常在或者时我们需要对伙伴的代码进行一下评论与说明，光是文字有点很死板，其实github给我有，如何使用呢？其实很简单，只需要就可以 ：这样我们就可以看到emoji表情，当然默认会显示五个常用的，你也可以继续敲下emoji的名字，出现更多（）。 有些在github中的文件我们是不想上传的，我们如何过滤掉它们呢？ 在github中对不想上传的文件点击右键。就会出现下面选项。 忽略这个文件  忽略所有的以.txt结尾的文件 这样就可以过滤掉你不想上传的文件如何高效的搜索一个你想要的库呢？ 我们常常评判一个项目的标准有star数目，fork数目和跟新时间。 通过搜索命令stars:>1000表示star数目大于1000。fork:>1000表示fork数目大于1000。java，html等等综合一下就是，比如你要查找一个stars大于1000的，fork大于200的java代码。stars:>1000 fork:>200 java就是这样。一个项目中，可能使用了多种语言，我们如何一下子就能看到一个项目使用了什么语言？其实很简单，Github已经为我们统计好了。也行你注意过，但是没有发现它有什么用。点击下面的彩条github已经为我们统计好这个项目所有的语言及其比例。完工~ 建议你收藏后按着流程完全尝试一遍哦~"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",No Ego,作为全球最大同性交友网站 gayhub 的资深用户，必须先吹一波，这里人才超多，讲话也很好听，就想混在这里生活这样子，里面有很多很棒的项目。有多棒呢，我拽着一个没用过GitHub 的同学就像他安利，连我11岁的弟弟都没放过，做的游戏？给我传上来！如果有看到这篇回答的乖乖还没开始用github的，请收下我暴躁又粗鲁的爱-github超全新手入门技巧接下来回答一下题主的2个问题第一个问题：点击别人代码右上方的 forks-Embed-Clone，即可克隆保存别人的代码。点击Download还可以下载他人代码到本地。再回答题主下一个问题ok，在这里可以传授给题主一个小技巧。awesome这个单词表示的棒极了一类意思，如果你在Github中搜索awesome + xxxg关键词，你就能搜索这个关键词的资源大全，比方说：awesome pythonawesome goawesome linux你就会发现关于这些东西的学习资料真的是一大堆一大堆的。无论是书籍资源，库资源，还是学习视频、学习笔记，应有尽有。会了这个技能你再也不用到处求学习资源了。比如说如果你还不够了解github如何使用，你可以搜索awesome github还有一些小窍门！比方说当你想采集某个网站的时候，你可以在Github里面搜「网站名称 +Scrapy」，如果搜不到可以搜「网站名称+采集」，还可以搜「网站名称+Python」等等。如果你想做一个仿大众点评的App，那么你在Github上搜「仿大众点评」，你就能快速找到别人做的一个大众点评项目，拿来几乎可以直接用了，想一想这节省了你多少时间？有时候你找不到，可能仅仅是你关键词弄得不对，记得换一换关键词，比如说英文搜索，拼音搜索，大多时候就能搜到了整理不易 需要点赞来鼓励！～
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",任坤,平常主要做R语言项目的开发，在github托管自己的开源项目，做了几个自己的开源小项目，但2年前我也是新手...1. 积极地report issue或者参与讨论，发表经过思考的见解2. 不必过于崇拜所谓「大牛」，都是普通人而已，抱着学习的态度，但也不要迷信权威3. 不一定觉得自己有更好的实现方法或者什么才去贡献代码，发现任何拼错、minor issue也可以帮忙改正然后提交pull request4. GitHub正所谓social coding，有一定基础后可以尝试着建立自己的开源项目，然后慢慢维护，基本可以了解清楚一般的基于git的管理流程5. 在开发过程中，有几个里程碑：第一次有人star你的项目，第一次有人fork你的项目，第一次有人给你的项目提出issue，第一次有人给你send pull request，这些都是很有意思的过程，可以体会到社区的无穷魅力。
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",Wyntau,"1, 每个项目作者一般都会在README文档中有一项 `contribute`,这里面会说明你应该怎样贡献代码或者其它东西. 另外,为一个项目做贡献不一定要直接贡献代码才算,可以检查项目的文档错误,或者在对整个项目有了解的情况下,给项目作者提 `feature request`2, 用github来学习编程,这个我确实还没有发现应该怎么好好利用,我觉得最主要的原因就是这里面所有的代码都是可以直接获取到的,而且带有代码作者的提交记录,如果感兴趣的话,你可以一个commit一个commit的查看作者写成整个项目的过程,这个应该会对初学者有很大的帮助吧,可能会对为什么整个项目是现在这个架构或形式有一定的了解.我用github的时间也不是很长,大约一年. 对github的认识就是, 它就是一个大宝库,想要的任何东西几乎都可以在github上找到.我使用github是从关注一些人开始的.通过这些人的 star fork follow 活动,我就可以知道一些我没有follow过的人,然后我再去看这些我没有看过的人的项目,然后我又发现了一些有趣的项目,我觉得这个作者 对我很有帮助,所以我follow一下,不断的通过这种 follow项目作者的行为,我知道了非常多的人.同时也找到了非常多有意思的项目.每天看这些人的star fork follow活动,你真的可以知道现在的技术趋势是朝向什么方向发展的,或者这一段时间什么项目最火.如果对某个项目有兴趣的话,可以直接clone下来,看一看代码的整体是什么样的,不一定完全看懂,但是看多了,就知道大牛们大体都是怎么写代码的.对自己的好处不言而谕.我使用github和别人协作的机会没有多少,基本都是我自己在用,存放自己的一些项目.再一个作用就是存放自己的配置文件了,到重装系统或者到其它的机器上,直接clone一下,自己的配置就全部回来了.还有一个作用就是托管博客了, github的 jekyll 很好用,也很省心."
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",黑马程序员,"本文千字文，从介绍开始到如何快速在GitHub上写东西，适合小白玩转GitHub。GitHub是一家公司，位于旧金山，由 Chris Wanstrath, PJ Hyett 与 Tom Preston-Werner 三位开发者在2008年4月创办。2008年4月10日，GitHub正式成立，地址：How people build software · GitHub ，主要提供基于git的版本托管服务。一经上线，它的发展速度惊为天人，截止目前，GitHub 已经发展成全球最大的开（同）源（性）社区。GitHub提供基于git版本托管服务，也就是git是GitHub上用来管理项目的一个工具。高级条件组合（精确搜索）GitHub 上拥有大量的学习资源，从各类的文章到笔记，还有各式各样的电子书。如：注册：创建仓库：进入仓库：创建完什么都没有，会提示create一些东西：然后就是安装git工具：安装步骤跳过了哦，大家安装完之后---cmd命令行---win+r回车第二步：将本地仓库和对应起来命令：git remote add origin huguangcheng/git-git remote add 远程仓库名（可以自己定义，默认是origin，初学不要乱改，以免混淆） 远程仓库地址（在这里我填的是我之前建的仓库的地址）远程仓库的地址，我们回到github的官网，到你的仓库里新建的仓库去：把这个地址复制，就是你远程仓库的地址命令回车之后，git就知道你本地这个项目仓库对应的就是github上的那个仓库了第三步：上传项目或者代码到远程仓库上传到服务器需要三步曲：master是github远程仓库分支（master是默认的主干，自己就是一条分支）完整详细内容："
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",牛客,"GitHub 是一个面向开源及项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub。Git是一个开源的，可以有效、高速地处理从很小到非常大的项目。简单来说，Git可以让你快速高效的对版本进行控制（修改）等功能。而GitHub正是使用了这个功能实现了更好的共同完成项目的功能。当你下定决心想要使用GitHub的时候，关于git的知识是一定要理解的。首先需要安装git官网中对于git的安装描述得很清楚，无论你是什么操作系统。官网链接：关于git的知识我们先不进行详细的说明，会在下面回答你的问题的同时将需要用到的进行讲解。最后再详细说git的使用。更多名企笔试真题解析、面试经验交流、招聘信息内推，尽在牛客！求职之前，先上牛客！快快下载拿offer！如何对项目做出贡献。这就是我们经常会听到别人说的PR，当然这个pr不是编辑视频的那个，是Pull 。在每个GitHub的仓库中你都可以看到这一栏。如图PR的具体使用：首先你要找到你想做出贡献的仓库，先把这个仓库fork到自己的GitHub账号中完成之后，在你的仓库中会有一个跟它一摸一样的仓库。如果需要修改的地方比较少，你可以直接在GitHub中对文件进行编辑，但是如果你需要修改的比较多，你可以把仓库先拉取到本地修改完成后再上传到GitHub。拉取到本地：首先你需要将你的电脑和GitHub进行SSH验证。打开刚才安装好的git在命令行内输入--global参数表示你这台机器上所有的Git仓库都会使用这个配置。这个就是告诉git你的信息，简单点说就相当于你的账户名一样。在git中输入 这里面的邮件地址就是你注册github用的邮箱地址 接下来就是按回车，大约按三次回车就可以了。然后找到C:\Users\你的用户名\.ssh\id_的文件，用记事本或者各种打开。把里面的内容复制下来。在github中找到setting->SSH and GPG keys 然后点击New SSH key,把你刚才复制下来的内容粘贴到key里面，title随便写一个就行,填写之后点击Add SSH key就可以了。至此，SSH配置完成。在gitee或coding中进行SSH的配置跟这个也一样ssh配置成功之后，你就可以把仓库拉取到本地了。找到你想存放代码的文件夹，在这下面的git命令行中输入git remote add origin后面的url就是这个你可以用Https的也可以用SSH的，但是SSH会快一点。当你在本地已经将想要修改的修改完成后，在git中输入这个参数就是将你拉取到本地的仓库和远程仓库连接起来，只有第一次提交的时候需要有，以后再提交的时候可以不填这个参数。当你修改完成后，就可以点击自己仓库里面的Pull requests点击New Pull requests，这里他就会直接跳转到原来的仓库并给你显示出你的修改确定你的修改之后，你可以点击Create Pull requests就成功地发出了一次PR的请求，以后你有什么需要继续修改的，直接修改就行了，再PR被merge之前，GitHub都会自动拉取你的修改。PR不等于直接被接受，所以还是要保证自己的代码的正确性，真正有用，开发者才会接受这一次PR。关于你的问题，项目本身已经完整了，核心的一些架构暂时还力不从心。如果你觉得自己的能力还不够对项目产生功能性的贡献，首先你可以选择一个适合自己的仓库进行PR，或者提升自己的能力，然后PR（做出贡献）也不一定是非得要进行代码方面的，你可以对使用文档的部分进行更加详细，人性化的解释，甚至是对某些文档进行 翻译，翻译上的修改，等等都是可以的。Git所实现的高效的版本控制使每个人都可以简单的参与贡献。确实GitHub在编程方面可以教我们很多。但怎么来使用它还是因人而异的。一方面通过GitHub我们可以练习跟其他伙伴共同开发同一个项目的经验。另一方面，我们可以在GitHub上面找到很多是和我们使用或者学习的代码或者项目。因为GitHub是一个，我们可以仔细研究某些大牛的大项目的源码。另一方面，不是非得说高star的项目就适合我们去学习，有可能代码需要的水平比较高我们暂时还看不懂。或者说一个新的优良项目，star数还很少，但是很适合我们去学习，去提PR。关于如何找到适合初学者的项目进行学习这个如果你是想学习git&github的一些操作，我推荐你可以创建两个账号，用来练习git的一些指令，还可以从两个角色来学习pr的很多操作。如果是为了代码的学习，首先你要知道自己想要学的方面，AI？web？C？等等。然后你就可以去搜索类似的项目，其实个人认为关于使用GitHub进行代码的学习，倒不是说GitHub上面的项目里面出一个什么教程让你去学习，而是在你写代码的过程中去学习。所以说合适的项目并不是很重要，主要还是看自己是否愿意去学习。现在这个时代，基本上所有你想学的东西在网上都可以搜到，甚至有的地方还会出专门的一套课程供你免费学习，所以不要怕，跑起来就可以了！如果你想系统的学习Git，这里推荐一下GitHub&Git官方教程，资源字幕由牛客网提供，方便初学GitHub和Git的学习，全是免费的哦）课程介绍：Git是一个分布式的版本控制系统，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取得了很大成功，尤其是在Ruby社区中。目前，包括Rubinius、Merb和Bitcoin在内的很多知名项目都使用了Git。GitHub 使用 Git 作为版本控制系统（version control system）提供在线源码托管的服务。同时是一个有社交功能的。课程链接："
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",码农出击," 新手小白可能会对 GitHub 有以下困惑： 1.GitHub 是个什么网站？ 2.为什么一说学 GitHub，就听到人家说要学 Git？这两个有什么关联吗，是不是一回事？ 3.听说 GitHub 是个，可以在上面与其他人一起切磋技术、完善代码，具体是怎么与别人交流呢？下面，我从这几个方面进行解答。打开 ，首页如下图所示，点击右上角按钮，进入注册页面。使用电子邮件注册，设置好用户名和密码，即可生成账号。完成注册后，点击旁边的按钮登录。 登录进去后，我们见到的页面分成三大版块，如下图所示，从左至右依次为：自己的仓库(Repositories)、关注的人的动态、发现新的热门/有趣仓库。 点击右上角的个人头像，在下拉列表中选择项，到达个人主页。下图所示为我的个人主页。 你如果打开另一个人的主页，看到的界面风格也大致如此。我在图中简要注明了页面中的各项功能，此外：1. 点击账户名下方的按钮，可以修改自己的个人信息，比如这里的一句话简介，公司、地址、联系方式等。而如果是别人的个人主页，这里我们看到的就是（关注）按钮。 2. 粉丝和关注的人数右边有个星星图标，这就是传说中的 Star。我们看技术文章可能常会遇到如“程序员必看！GitHub 上 Star 数过万的项目！”，“该项目在 GitHub 上迅速收获上千 Star 数” 类似的介绍，看来 Star 数是个很重要的标识哦！那么，Star 是什么意思呢？比如，我们觉得一个仓库不错，在右上角点个 Star，就相当于是收藏+点赞了，之后还可以在自己的主页中点击星星图标查看。 3. ""Pinned""区域是自己的个人展示区，在自己的仓库中精选几个放到这里展示，让别人能很快发现你的闪光点。 4. 活跃度表格：上面的绿色格子越多，颜色越深，说明该用户在 GitHub 上提交次数越多，是活跃用户。GitHub 之所以得此名，与一款分布式 Git 是分不开的。通俗地讲，Git 软件记录了你每次修改时的文件状态。更妙的是，如果你改着改着，又觉得以前的版本更好，还可以回溯呢，也就是说，有“后悔药”可吃了！同时， Git 也是一款极佳的协作软件。打个简单的比方，我和小红、小蓝三个人一起修改一篇文章，每个人改的地方可能都不一样，那么合并修改稿就是个头疼的事。或者，我先修改、再给小红修改、最后小蓝修改？这样效率又降低了。怎么办？用 Git，我们三个人可以建立修改分支，同时进行修改工作，最后合并分支。你可能会问，如果你们三个人在同一个地方做了不同的修改，还能合并吗？放心吧，软件考虑了这种“冲突”情况，有相应的解决办法。既然 Git 可以协作，那总要有一个地方让使用的人们存放文件、修改等信息呀，就像控制中心一样，这样，GitHub 应运而生。这里多说一句，Git 的托管中心不是只有 GitHub 哦，GitHub 是方便个人用户、建立的网站。有的企业会自己搭建服务器和云盘构建托管中心，同样也是用 Git 软件进行协作管理。那么，怎么用 Git 软件呢？ （1）先到 下载安装 Git 软件。 （2）安装成功后，选定一个文件夹，在右键菜单中选择，会弹出一个黑色的命令行界面，输入语句，就可以在当前文件夹中运行 Git 命令。这里推荐学习一下，讲解得明白易懂，从中我们可以了解 Git 的各种操作。然后，跟着教程的讲解，自己建个新文件夹动手练练。Git 命令还是挺多的，但是：  上面的示意图来自 Git 官网，说明了 Git 中最重要的操作 ""git add"" 和 ""git commit"" 的工作流程。 Git 软件的核心是保存修改。working directory 是工作区，就是我们的电脑上当前工作的文件夹。staging area 可以理解成暂存区或者中转站，（注意：这里 add 和中间有个空格）提交了修改，放在 staging area 暂存，再通过  确定最终提交版。不要小看这个缓冲的暂存区，它为我们修改时提供了“后悔药”。这个效果就有点类似于我们平时在电脑上删除文件，文件不会直接删除，而是放到回收站中转一下。如果我们过后发现手抖误删了，还可以到回收站里把文件“还原”回去，或者确定都不需要了，就点击“清空回收站”，把这些文件都删除。  在多人协作的情况下，比如前面提到的我和小红、小蓝一起写文章的例子，可能每个人的修改不一致，要保持同步。而我们要从远程仓库获取更新和推送自己的修改，就要用 和 。前面提到的  是确定我自己最终的修改结果， 则是将这一修改结果提交到远程（比如 GitHub上）的 repository（仓库）保存。我始终记得廖雪峰老师教程里提的要点：每天开始工作的第一件事是 ，跟上项目最新的修改进度。结束一天工作、提交修改时，先  再 。 打开一个仓库，我们会看到按钮，点击后，下面出现 HTTPS 地址和 SSH 地址。我们只要复制了这个地址，然后在电脑上右键点击存放文件夹，打开 Git Bash 客户端，输入命令行：，就能下载这个仓库到本地电脑。 需要注意的是，用 HTTPS 地址需要账户验证。使用 SSH 地址只需要第一次时提交 SSH Key 到 GitHub ，后续无需每次验证，很方便，接下来就会介绍如何配置 SSH Key。在 Git Bash 客户端，输入：同样在 Git Bash 客户端，先后输入：和我的账户已经生成了 SSH Key，就有了下面所示的 id_rsa 和 id_rsa.pub 。请注意，id_rsa.pub 是公钥，后面要把这个公钥上传到 GitHub 上验证。id_rsa 是你自己的私钥，要保存好。如果没有 SSH Key，就要输入以下命令行生成：生成后再输入上面的和命令，就可以看到 SSH Key 了。接着在 Git Bash 客户端，输入命令行： 这样会显示公钥文件内容，我们把它复制到剪贴板。登录 GitHub 账户，点击右上角个人头像的下拉菜单，如图所示： 依次点击 Settings > SSH and GPG Keys，在 SSH Keys 页面右上角有个按钮，点击该按钮后，粘贴上刚才复制的公钥内容。里面的 “title”项就是为自己的 SSH Key 命个名，可根据个人喜好随意。在 Git Bash 客户端运行命令： 出现类似下面的提示，表示安装成功：学了这么多基本功，我们终于要练手了，哈哈，先来建一个自己的仓库玩玩吧！如下图所示，点击个人主页的 Repositories 项，再点击右方的按钮，新建一个仓库。 我这里做了一个简单的示范，如下图所示，你可以照着我的模板填，最后点击最下方的按钮，即可创建一个新的仓库。 打开新建的仓库，如下图所示，这个仓库的 Readme 文档的内容就是刚才填入的仓库名和描述说明。 我们点击Code按钮，复制 SSH 地址。假设我们要下载到电脑上的目标文件夹（为了描述方便，这里简称为文件夹 A），那么我们就右键点击文件夹 A ，在右键菜单中选择“Git Bash”，在 Git Bash 客户端输入命令行： 这样，仓库就会下载到文件夹 A 中。下载仓库完成之后，我们会发现文件夹 A 中有了一个新的子文件夹，比如我在前一步骤下载了仓库 testexample2020，此时文件夹 A 中就出现了一个名为""testexample2020""的新文件夹，这就是下载到本地电脑的仓库。我们打开这个新文件夹（""testexample2020""），使用 VSCode 或 Atom 编辑器（编辑器的使用方法可参考我的文章：），在 Readme 文件里增加一行： 。再新建一个 main.py文件，输入一行简单的代码:。修改好了之后，我们右键点击文件夹 testexample2020（注意：此时不是在母文件夹 A 上使用 Git Bash 了），打开Git Bash 客户端，依次输入命令行： 这样修改就推送到了 GitHub 上的仓库中。登录 GitHub 后我们发现，刚才做的改动都同步到了 GitHub 仓库中，如下图中标示： 前面提到过，GitHub 是个开源社区，我们可以参加到开源项目之中，那么，具体是怎么操作呢？举个我自己的例子来说明一下这个过程吧。 我在学习 API 接口时，网上的微博 API 工具包很多是基于 Python2 写的，我在 Github 找到了一个 Python3 的版本 ，如下图所示。我用了一下，觉得很好，看到作者没有写 Readme，我就想添加一个 Readme 说明文档，让别人能更快地了解这个仓库的功能和使用方法。也就是说，我想对这个仓库做一些修改。这种情况下，我就要先 Fork 一下这个仓库到我自己那儿。 Fork 之后，在我的仓库里就出现了一个相同的仓库 sinaweibopy3，如下图所示。不同之处在于，仓库名下方有个备注：""Forked from olwolf/sinaweibopy3""。 接下来，我就对 Fork 的 sinaweibopy3 仓库做修改，添加了一个 Readme 文档。具体方法请参考上一步 “2.我的第一个 GitHub 项目：如何新建上传仓库” 的示例，可以先下载到本地文件夹，修改后再推送到 GitHub。如下图所示，点击 Pull request，在弹出的界面填写一些信息，告诉原仓库的作者你做了什么修改、为什么要修改等，方便作者了解你对仓库的改动，然后提交，Pull request 请求就会发送至原仓库的作者。提交了 Pull request 后，我们就等待一段时间，原仓库的作者会决定是否接受修改。这里，仓库 sinaweibopy3 的原作者 olwolf 合并了我的修改，如图所示，这样原仓库中也增加了 Readme 文件。同时，我也因此成为了仓库贡献者(Contributors)之一。 完成以上学习，我们基本上就入门了，接下来，你可以自己在 GitHub 上探索一下，比如搜索发现一些有趣的项目，关注一些高手大牛，加入到开源项目中，等等。最重要的是，动手练习！一旦上手实践，慢慢熟悉之后，你会发现没有开始想象的那么难，一起加油吧！最后，推荐几个好的学习教程： 1.2.3.。另外，我当初在准备各大公司技术笔试的时候刷了大量的算法题，其中就是参考了，帮我整理了解题思路，归纳了出刷题方法，非常不出错，转给需要的同学：最后给大家介绍一份计算机经典书籍，送大家一份硬核书籍资源：读大学跟工作期间，我买了很多书，大部分是一些技术书籍，也收集了这些书籍的电子版，都在这里，现在免费share给大家，等，希望大家能认真阅读。"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",Luyao Zou,"我看目前排前面的几个回答都是在说大段大段的 git 使用手册。讲道理，这些东西感觉题主自己都能查得到，边学边用就可以了。我这里想说说参与项目本身，怎么做比较有礼貌、有效。我觉得题主可以试试去看一下项目的 issue 页面。我随便找了一个项目的 issue 页面。你可以看到有许多公开的 issue，而且往往会带标签，有的是新增功能，有的是修 bug，有的是补文档。还有 help wanted，如果你正好有解决方案的话，就很棒了。选择 issue 页面里面已经存在的问题下手，就意味着你的贡献大概率不会白费，因为这些都是项目开发者想要去解决的问题或新增的功能。这要比你自己挖空心思去找代码中的 bug 或者提什么天马行空的意见来得有效。如果你对这个项目有自己的新想法，也可以先发 issue 和项目开发者讨论。点进具体的 issue 页面。在开始撸码之前，你可以先和开发者讨论一下你准备怎么做。在大家都觉得你的方案不错的时候，再动手，以免写了很多代码，最后却被拒绝。此外，你也可以看一看 contributing guidelines，看看这个项目的管理者希望其他人用怎样的方式和流程参与项目。说白了，issue 页面，其实就是项目开发的远程会议。干活前，总得先开会，把到底要干什么活、怎么干、怎么验收说清楚了，才开工的呀。然后，你就可以 fork 这个仓库，然后新建一个自己的分支。在自己的分支上完成代码，按照 contributing guidelines 里面的规范，跑一遍测试（如果有的话）。确认都没问题了，先把代码 push 到自己 fork 的仓库里面，然后向项目所有者提交 pull request。在 pull request 里面，可以写清楚你的代码解决的是之前的哪个 issue。 直接用 "" fix/close/solve issue #XXX "" 这样的格式，github 就会自动给你链接到对应的 issue 界面，就很方便大家理解前后背景。一开始如果还没能力修改技术细节，哪怕补充、修改文档，也是不错的哦。我看到 linux 内核的 pull request 里面，就有一个人改了一个打错的字：这位 dolby360 就改了一个字母：就收到了许多鼓励和认可当然，这个 pull request 什么时候会被 Linus 合并，我们并不知道——也许要等很长的时间。但毕竟这是 linux 内核这么重要且唯一的项目呀！你也可以说，我已经为 linux 内核做了一点微小的工作。"
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",慕课网,可以说Github是一位优秀程序员记录成长、学习知识、业内社交不可或缺的平台，关于什么是Github，新手怎样快速入门，直接看这里就行了：下面就来回答题主的两个问题，干货来啦，注意点赞+收藏~码农朋友们都知道，gitHub是一个面向开源及私有软件项目的托管平台，上面托管了众多的优秀的项目，比如linux内核源码、git源码、机器学习框架等等。当然，除了这些顶尖项目外，还有海量的高手开发的优秀项目。所有的这些项目，我们都可以为它贡献代码。那么，要如何为这些项目贡献代码呢？我们下面以实例来讲解。比如说，现在gitHub上有个很牛逼的项目，它的作者是Alvin，项目地址如下：现在小慕看到了这个项目，想要对它进行贡献代码。想要达到这个目的，小慕要完成下图的这些步骤：小慕在找到这个项目之后，点击右上角的「」按钮。稍等片刻后，就会在小慕的账号下克隆了一个一样的项目githubTest，包括文件，提交历史，issues，和其余一些东西。通过之后，Harry的账号下也有了githubTest这个项目，但还不能对它进行编译、修改（其实是可以修改，但是不建议）。这时，可以通过git clone命令，将这个项目clone到自己的电脑里。接下来，小慕就可以大显身手了，可以自由对这个项目进行修改。但是，不建议在master分支直接修改，建议在master分支基础上切出一个dev分支，然后在上自由发挥。修改完之后，再将dev分支merge到master分支。在自己的电脑上修改好代码之后，再使用git push命令将改动同步到自己的gitHub项目仓库里。通过这个操作后，就可以在代码仓库里看到自己的提交了。接下来，就是向原作者Alvin提交你的代码了。首先点击文件列表上的「」。之后，gitHub会自动对源仓库分支及自己仓库分支代码进行比对，看看是否有冲突。如果它显示「」的话，小慕就可以点击下面的「」绿色按钮，进行代码提交。再之后，系统会要求你写一段注释，其实也可不写。但最好写一下，跟作者说明一下你改动了什么，为啥这么改。通过以上6步，原作者Alvin就会收到一个pull request，如下图：然后，Alvin可以点进去，看看小慕具体提交了一些什么修改。如果他觉得这个修改确实够niubility的话，它就可以点击「」，将Harry的提交集成到自己的项目里。至此，功德圆满，小慕顺利完成一次对项目githubTest的代码贡献。但是，这个项目实在太出众了，很多高手看到了并贡献了众多代码。比如现在Alvin自己提交了一个文件：现在原作者项目已经发生了改变，那小慕账号下的githubTest如何与原作者Alvin的项目保持同步呢？小慕需要做以下三步操作：现在代码不同步了，我们要先把Alvin仓库的代码fetch到自己电脑的仓库下。注意，这是在自己电脑上操作，不是在github上操作。git fetch git@github.com:yychuyu/githubTest.git master:latest上面这条命令，git fetch 之后 的那部分，是原作者Alvin项目git地址，通过点击原项目「」按钮可以看到。再之后master:latest这部分，master是原项目分支，latest是自己项目分支。如果latest分支不存在的话，将自动创建。其实也可以将代码fetch到自己的master分支，但也不建议这么做。代码fetch到latest分支之后，再切到master分支，再使用git merge命令将最新代码合并到master分支。现在，小慕电脑上的代码与原项目代码保持同步了。我们再使用git push命令，就可以将最新代码推到Harry账号下githubTest项目里以上的三个步骤具体操作过程如下图示。接下来，小慕就可以在此基础上，继续贡献自己的代码了。相信一般人搜索项目时，都是直接搜索技术栈相关的项目。高级一点的搜索，会根据 最匹配、最多 Star 来进行排序、选择相应的语言、选择仓库或者代码来进行筛选。但是 GitHub 的搜索功能只支持以上这些而已吗 ？No!如果你只会用以上的功能，那你知道的仅仅是 GitHub 搜索的冰山一角！GitHub 的搜索是非常强大的！下面介绍更高级的搜索技巧。搜索 GitHub 时，你可以构建匹配特定数字和单词的查询。查询大于或小于另一个值的值您可以使用 、、 和  搜索大于、大于等于、小于以及小于等于另一个值的值。您还可以使用 范围查询 搜索大于等于或小于等于另一个值的值。您可以使用范围语法  搜索范围内的值，其中第一个数字  是最低值，而第二个是最高值。您可以通过使用 、、、 和 范围查询 搜索早于或晚于另一个日期，或者位于日期范围内的日期。日期格式必须遵循 [ISO8601]标准，即 （年-月-日）。您也可以在日期后添加可选的时间信息 ，以便按小时、分钟和秒进行搜索。 这是 ，随后是 （时-分-秒）和 UTC 偏移 ()。您可以使用  语法排除包含特定字词的结果。  运算符只能用于字符串关键词， 不适用于数字或日期。缩小搜索结果范围的另一种途径是排除特定的子集。 您可以为任何搜索限定符添加  前缀，以排除该限定符匹配的所有结果。如果搜索含有空格的查询，您需要用引号将其括起来。 例如：某些非字母数字符号（例如空格）会从引号内的代码搜索查询中删除，因此结果可能出乎意料。如果搜索查询包含需要用户名的限定符，例如 、 或 ，您可以使用任何 GitHub 用户名指定特定人员，或使用  指定当前用户。 只能与限定符一起使用，而不能用作搜索词，例如 。通过  限定符，您可以将搜索限制为仓库名称、仓库说明、自述文件内容或这些的任意组合。如果省略此限定符，则只搜索仓库名称和说明。要在  拥有的所有仓库中搜索，您可以使用  或  限定符。 限定符使用  查找匹配特定大小（以千字节为单位）的仓库。您可以使用  限定符以及基于仓库拥有的关注者数量过滤仓库。 限定符使用指定仓库应具有的复刻数量。您可以使用  基于仓库具有的  数量搜索仓库你可以基于创建时间或上次更新时间过滤仓库。两者均采用日期作为参数。 日期格式必须遵循 ISO8601 标准，即 （年-月-日）。也可以在日期后添加可选的时间信息 ，以便按小时、分钟和秒进行搜索。 这是 ，随后是 （时-分-秒）和 UTC 偏移 ()。日期支持 。您可以基于其编写采用的主要语言搜索仓库。您可以查找归类为特定  的所有仓库。估计又有很多人不知道 GitHub 上有话题一说的吧。您可以使用  限定符以及 [大于、小于和范围限定符]按应用于仓库的 [主题] 数量搜索仓库。还可以使用  page 或  page 搜索 GitHub 哦。这种搜索方式，估计就更少人知道了吧。 page 提供用于构建搜索查询的可视界面。您可以按各种因素过滤搜索，例如仓库具有的星标数或复刻数。 在填写高级搜索字段时，您的查询将在顶部搜索栏中自动构建。您可以按其搜索仓库。 您必须使用按特定许可或许可系列过滤仓库。您可以基于仓库是公共还是私有来过滤搜索。您可以根据仓库是否为镜像以及托管于其他位置托管来搜索它们。你可以基于仓库是否来搜索仓库。基于具有  或  标签的议题数量搜索您可以使用限定符  和  搜索具有最少数量标签为  或  议题的仓库。以上就是我们在 GitHub 上面精准搜索项目的一些小技巧，希望对你有所帮助！希望老铁们来个三连击，给更多的人看到这篇文章~对了想学Git可以看这免费课程哦~推荐阅读：作者：天明夜尽链接：作者：良许Linux链接：来源：慕课网本文原创发布于慕课网 ，转载请注明出处，谢谢合作
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",程其一,这篇文章你一定要看！当时我就是看的这篇教程学会的，也分享给大家。
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",coder yi,关于如何使用GitHub，自己整理了一个使用教程文章以及相关工具的列表，可以看这里，
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",ApeClass学编程,以下是原回答：看到，对于大部分新手来说，一上来就学如何运用？如何创建分支？啊啊啊，这个真的有点难度，还是一步一步来吧，GitHub 上有海量的优秀供我们学习，我们首先要学会如何这是马上就可以学会的技能。然后再一步步深入。先来说说，在GitHub的界面上的按钮都有什么作用？要如何获取源码？最常见的就是当你遇到朋友扔过来的一个好玩的开源项目链接：比如我上次分享的俄罗斯程序员趣事：打开后的界面是这样的：先来看看这4个区域：当你点击红框里的任何一个文件，都能查看具体的代码、文本等内容。在源码的下面，还会显示一个“”的文件。这是一般会说明项目的功能、如何使用、注意事项、作者自带私货等，帮助大家更方便了解项目。具体操作：绿框②的这个区域，点击右上角的【Code】-【Download ZIP】就可以直接把源码整个打包下载下来。真的太良心了，不像某些xx网站，下载还需要积分。这里的Watch，可以理解为“关注”功能。点击Watch按钮，里面有4个选项，对应4种不同的通知权限。如果你看到感兴趣的项目，可以选择All Activity，表示你以后会关注这个项目的所有动态，以后只要这个项目发生变动，如有人发起了issue等情况，在你的个人通知中心，你会收到通知更新提醒。如果你设置了个人邮箱，那么你的邮箱也可能收到相应的邮件。当你点击Fork，当你看到一些项目存在 bug 或可以继续优化的地方，你想帮助原项目作者去完善项目，或者单纯想在原来项目基础上维护一个属于自己的项目，那么你可以使用Fork。当你完善后就可以尝试发起 pull request 给原项目作者了。另外值得一提的是，似乎有很多人用错了fork。很多人把 fork 当成了收藏一样的功能。其实你完全可以使用 star 收藏你想要的代码。直译是星星，但这里理解为给项目更合适。它是GitHub项目最重要的一个参考指标，收藏过的所有Github项目，可以通过账号头像的Your stars菜单进行查看。了解了基础的页面和如何获取源码后，接下来：给新手分享主要3个途径：这是来自于 GitHub 官方的项目趋势列表，一些 Star 增长比较快的项目会出现在这里。你可以针对不同编程语言进行过滤筛选，找到你感兴趣的优质项目。GitHub上的大神也会时不时关注一些比较优秀的项目，如果你有关注他们，就可以通过 GitHub的动态流了解到一些他们认为不错的开源项目。跟着你感兴趣领域的大佬走，总会学到不少东西的。很多新手可能直接在网站上搜索关键词，但找了半天也找不到自己想要的。格式：in:name _____先按照名称查找（in:name），后面加上项目的名称。格式：in:description _____项目描述里面会有对关键词描述，搜索出来之后你会发现在项目描述里面会加粗，说明已经匹配上了。）格式：in:readme _____格式：stars:>100我们也可以按照上面的项目查找方式，组合星星数据限制范围，查找出大于 500 的星星数的项目，会更精准一些。格式：forks:>500星星和 fork 数的查询方法基本上都是差不多。格式：language:java也可以按照语言去筛选，比如说我们搜索一个 spring boot 他是 Java 语言编写的。格式：user:xxxx格式：size:>=500格式：in:name____ stars:>500去官网注册一个账号，这个你应该会，就不多提了，链接在这：登录后，在个人主页的右上角点击【New repository】创建新的仓库：【】的意思是仓库，你可以理解为它是一个放项目的地方。打开页面如下图所示，填入项目相关介绍信息，在【Add a README file】上面打自动生成一个说明文档。注意图中有两个下拉按钮： 用来选择忽略文件；用来选择所属协议；这两项暂时可以不选，后面会专门讲到。点击绿色按钮创建新的仓库，成功后自动跳转到新建仓库的主页面，如下图所示：这样你的新建的一个项目仓库就成功了~是不是So easy！接下来我们来进阶学习更难也更有用的技能：新人疑问三连！一个一个说吧。GitHub大家都知道，是世界上最大的软件远程仓库，是一个面向开源和私有软件项目的托管平台，使用Git做分布式版本控制。而是实现分布式版本控制的一个工具，简单的来说就是。举一个例子，说明Git的作用。1）你是公司的程序员，你写了一段程序：2）然后你的老板觉得中文的看得舒服，让你改了，于是你改成：3）老板看了以后，又觉得不行，让你留下来加班，把代码改回到上一次的状态。这时候你发现自己改了大半的内容，而且没有留上一次的备份，要哭了，通宵也搞不完了，边加班边骂老板是个**。如果你这个时候使用了Git做版本控制，就不会有这种问题了。每一次你修改代码之后都做用Git一次记录，Git就会记录你每一次改了什么内容。如果老板让你回到某个版本，不论你改了多少内容，改了多少次，Git都能回到当时的版本。比如30个人的团队一起开发某个软件，大家肯定不能互相靠复制粘贴代码来合作开发。我们可以让所有人都把代码上传到服务器，然后大家下载服务器上的代码来修改，修改完了再上传回去，共同开发和更新同步。Git会详细记录每个人什么时候改了什么内容。实现所有人同步，如果遇到了问题，也可以随时某个版本。到下载与你正在使用的操作系统相对应的文件：本文以Windows为例，现在的电脑一般选择64-bit Git for Windows Setup。安装时注意：在Windows Explorer Integration中勾选。其余配置默认即可。安装完成后(可能需要注销或重启)，在任意一个文件夹空白处右键，检查是否有Git Bash Here的选项。使用ssh也有好处，可以每次提交时不用输入账户，密码，方便管理。在你所在的文件夹，鼠标右键“Git Bash Here”打开Git Bash(输入命令)我第一次打开软件后看到这个界面也是一脸懵逼的，但是没关系，用多了就熟悉起来了。输入下列命令并回车：同样的，输入下列命令并回车：输入下列命令并按几次回车生成公钥：这样就生成了，默认在用户目录下，如：C:\User\xxx\.ssh\这个文件夹中。其中的xxx是你的windows用户名。在C:\user\xxx\.ssh\文件夹中找到 这个文件，用(如记事本)打开，复制里面的所有内容。登陆github账号，点击头像旁的小三角展开，依次点击settings -> SSH and GPG keys -> New SSH key，在Title中取一个名字（任意），key中粘贴你刚刚复制的内容。然后点击Add SSH key即可。输入：如果出现以下结果即为成功：首先了解一下，会更有利于你理解这些命令。每个 Git 项目中的文件都会经历几个阶段：跟着步骤来操作一遍，你就能理解了：将我们之前创建的库，如下图，复制其仓库地址：然后在Git Bash中输入命令 ，如下图所示：可以看到，仓库中的源码就成功拷贝到我们本地了。打开这个文件夹，然后在其中放进一个任意名称的文件。（我放进了一个）进入该仓库就会显示(main分支)。这个命令的作用是可以看出来，我们刚刚所创建的新文件hello.py已经出现在文件夹里。然后输入  这个命令之后输入然后 引号内的内容可以随意改动，这个命令的意思是，方便查找。然后在输入命令，。出现类似界面，你就可以欢呼了，代表你成功将本地文件git到GitHub远程仓库了。现在打开你的GitHub网站，找到你创建的库。发现今天的格子已经绿了，说明你已经上传了你刚刚所创建的文件。整理了一下比较常用的Git命令，这些都是使用频率很高额度命令：作用：检查 Git 跟踪哪些文件作用：将文件添加到暂存区作用：从暂存区中删除文件作用：每个提交都应该在-m标志后写好描述，有助于你了解提交了什么内容。作用：提交到远程仓库作用：输出显示你所做的所有提交的日志，提交的人，日期和提交注释作用：还原特定提交，即撤消你为从主分支中删除更改所做的提交。通过运行git log查找提交 ID 。7 个字符的代码是提交 ID。今天先讲到这里，还有很多没讲完的GitHub教程，后面接着给大家分享：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",santikeji,问：新手该如何使用 GitHub？答：作为一个全球最大的平台，GitHub 扮演了程序员的网络家园。GitHub，这个专为 Git 协议而设计的基于代码托管的平台，让个人开发者和开发团队轻松地管理代码、软件版本以及协作。如果你刚刚接触 GitHub 或者还没有了解过该平台，这篇文章将为你介绍 GitHub 的基本概念，以及如何正确地使用它。首先，你需要在 GitHub 官网注册一个账号。点击页面右上角的“Sign up”（注册）按钮，进入注册界面。需要填写用户名、电子邮件和密码，并创建账号。在 GitHub 上，代码托管以仓库为基础进行管理，因此，你需要先创建一个仓库。点击 GitHub 的主页右上角的“+”号，选择“New repository”（新建仓库），并输入你想创建的仓库名称和描述。选择公开或者私有模式，然后点击“Create repository”创建你的仓库。每个 GitHub 仓库中都包含一个默认分支，称为主分支（master）。除了主分支，你还可以创建其他分支。分支是一个版本集合，它包含主分支上的所有代码，以及新增或修改的代码。该分支将随时保持原样，直到你将其合并到主分支或其他分支中。Pull Request 是一个请求，让其他开发者同意或拒绝你的代码或代码更改。你可以在 GitHub 仓库中创建 Pull Request，并且通常需要另一个开发者进行代码审核，之后再进行合并。典型的流程如下：* fork 项目* clone fork 下来的项目（如GitHub Desktop 中克隆仓库）* 新建分支进行开发* 提交代码，向主仓库提交 Pull Request* 代码审核 & 讨论* 合并 Pull RequestGitHub Issue 功能可以让开发者提出问题、请求和缺陷报告。你可以使用 Issue 页面跟踪问题、讨论你正在进行的工作，并获得其他开发者关于问题解决方案的建议。当你在 GitHub 仓库上创建新 Issue 时，需要输入问题的标题和描述，并将其指派给相关的开发者。此时，它将被追踪并通知相应的开发者，直到这个问题得到解决。如果你是一个网站开发者，可以使用 GitHub Pages 将你的站点部署到 GitHub 上。GitHub Pages 是一个托管服务，它可以将你的站点与 GitHub 上的仓库绑定在一起，并实时持续更新你的网站。要使用 GitHub Pages，你需要在你的仓库中新建一个分支，并命名为 gh-pages。然后，将你的网站文件放在这个分支上。你的网站将被自动发布到  的网址上。Markdown 是一种标记语言，它能够使你更轻松地编写文档。GitHub 支持使用Markdown 编写  、Wiki、Issue 等文档。你可以学习 Markdown 以便更好地使用 GitHub 进行开发。由于本文篇幅有限，上述七个 GitHub 使用指南仅能给出概述性的介绍。对于每一个指南，还有更为详细的讨论和说明。现在，你可以开始使用 GitHub 了！它将会是一个提高你软件开发技能的绝佳平台。---------------------------------------本答案来自：
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",HelloGitHub,初次接触GitHub的时候和你有一样的感受，不知道如何为自己感兴趣的项目做贡献，也不知道如何去找到更多适合自己的项目；在找了一些有趣，适合自己的项目后，我在 GitHub 上面创建了，分享 GitHub 上入门、有趣的开源项目，已经推荐了1600多个开源项目，有很多适合入门学习的开源项目，也有很多有意思的开源项目包括 ： 每月28号都会发布月刊，可以关注一下哦附上最新一期月刊：更多入门级、有意思的开源项目可移步  官网探索 
新手该如何使用 GitHub？,"['我是一个编程新手，刚刚接触GitHub，目前仅仅是把它作为自己的代码仓库。但我知道GitHub的魅力在于共同完成项目，但我现在对GitHub有以下几个困惑：', '1.比如我看到一个有趣的项目，那么我该如何为这个项目做贡献呢？我是指，这个项目本身已经完整了，核心的一些架构我暂时是力不从心的，那我还能为这个项目做什么呢？', '2.我看到很多刚学编程的人说用GitHub来学习编程，但我觉得大多数的项目即便你fork下来也是看不懂的吧？那么初学者如何找到适合自己的项目来学习呢？', '谢谢。']",Rocky0429,不多说，就是这个，GitHub 标星 5.6k+ 的神级项目。这是一个残酷的世界，大多数人都是度过平庸的学生时代，碌碌无为的工作时期，但是也存在很多东西可以改变这一切，而 GitHub 恰好就是其中一个，而作者 Phodal Huang 就是其中获利之一。作为一名非计算机的学生，大一的时候注册了 GitHub，然后就放置不管，多年以后，才发现这其实是程序员的社交网站。后来 Phodal 开始了自己的尝试，很长一段时间试过在 GitHub 上连击，也尝试去了解别人事如何用好这个工具。作为非科班的小白，一步步摸索成长期活跃在其中的大佬，作者讲他在 GitHub 上一一分享出来，这就形成了这本漫游指南。我其实也做了一些同样的事。自己是整理了一些，就是为了让大家把更多的时间放在学习上，而不是浪费在找资料上，大家自取。再回到漫游指南上来，本篇指南主要由以下 18 个章节组成：每一个章节下面又有很多分部分，以下是部分章节的截图：这么一个优秀的项目希望大家能好好阅读，争取早日也能在 GitHub 上开心的逛起来呀~虽然我很早就知道 GitHub，但是学会逛 GitHub 的时间特别晚。当时一方面是因为菜，看着这种全是英文的东西难受，不知道该怎么去玩，另一方面是一直在搞 ACM，没有做一些工程类的项目，所以想当然的以为和 GitHub 也没什么关系（当然这种想法是错误的）。后来自己花了一个星期看完了 Python 的基础知识，就想着找点项目看一看，学一学，练一练，这个时候我才真正的去了解 GitHub，开始了在 GitHub 的瞎逛之旅，在开始之初，随之而来的问题是我不知道哪些项目当时还是新手的我，哪些项目是好项目，哪些项目好玩有价值。虽然现在我已经在 GitHub 上逛的相当流畅，但我还是想如果有一个东西可以收集这些对新手友好的东西，那么我当时可以少走更多的弯路，节省更多的时间吧。那么有这么一个东西么？有的，这就是 ，一个分享 GitHub 上有趣，入门级的开源项目。在项目中，内容每月 28 号以月刊的形式更新发布，主要是面向编程新手、热爱编程、对感兴趣人群的项目。更新的内容主要包括：各种语言的流行项目、入门级项目、让生活变得更美好的工具、书籍、学习心得笔记、企业级项目等。这些项目都有一些共同的特征，那就是很酷，非常容易上手的项目，编程的魅力和便捷体验起来就是这么简单。下面我们就来看看，这个项目具体包括啥，我们以最新的月刊（43 期）为例。每个类型的项目我们挑一个来看。：一个终端复用工具，可极大的提高工作效率。BenchmarkDotNet：功能强大的用于基准测试 .NET 库。dbg-macro：打日志是 C++ 开发中必不可少的一种 debug 方式，dbg-macro 受  中 的 dbg 启发，提供比 printf 和 std::cout 更好的宏函数。主要有如下特点：go-admin：基于 Golang 语言的数据可视化与管理平台。特性如下：：基于 Spring Boot 2.1.0、Vue 的前后端分离的后台管理系统，支持数据字典与数据权限管理、一键生成前后端代码、前端菜单动态路由等。基于 Spring Boot2.1.0 框架，涉及的技术栈：非关系数据库 redis、接口测试工具 swagger、druid 数据源驱动、邮件依赖（javax.mail）、三方支付和云存储 SDK、页面 freemarker。技术栈丰富，初学者可以作为实战项目学习和使用。：一个简单易用的 Bar Chart Race（长条图赛跑动画） React 组件。示例代码：TagUI-Python：一个 Python 自动化操作的库。比如：自动打开网页并截图，示例代码：shift：一个 Ruby 语言写的在线 MySQL 数据库迁移工具。Percent：让 Swift 语言支持百分比类型，消除精度缺失的烦恼。示例代码：cascadia-code：微软开源的一套等宽字体，有趣的是可以组合字符创建新的字形。python_ebook：Python 编程相关的电子书资源集合项目。book：（英文）《Cosmic Python》讲述如何管理复杂性的 Pythonic 应用程序结构的书籍。BigData-Notes：大数据入门教程，该教程介绍了大数据常用技术栈的基础和核心知识。内容涵盖：Hadoop、Spark、Storm、HBase、Hive、ZooKeeper、Kafka 等。dimensionality_reduction_alo_codes：该项目使用 Python 实现了 11 种经典的数据抽取（数据降维）算法。同时附有相关资料、展示效果，适用于机器学习初学者和刚刚入坑数据挖掘的小伙伴。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",顾鹏,"做这样一个简单的 app:一个天气应用，干净清爽的界面，天气信息一目了然。它不仅可以精确预测未来 10 天的天气，还可以显示某地的历史天气信息。它具有自定义提醒功能，支持 web 版本， iOS 版， Android 版。为什么想要做这样一个 App ？因为你喜欢旅行，但没找到一个天气 App 可以提供你下个月或者某个特定月份的天气信息；因为你懒你没有每天看天气预报的习惯，你想要在第二天温度达到 30 度以上或者温差有 +/-7 度的时候，获得温馨提示；因为你要成为一个  ，你必须不断训练每个  的能力。你决定用 MySql 来存储用户数据，用  存储历史天气数据。你用 Redis 作为  ，缓存一些最常请求的天气数据。你用 Python 写后台，功能简单，后台不复杂，用户注册登录，抓取返回某城市的天气数据，某地的历史天气数据，很快便搞定。后台开发并测试好了，接下来是 Web 前端。你十分清楚一个好的 UI 设计对一个 App 的重要性，你也明白 UI 的设计不只是为了美观，更重要的是提高信息的可读性和程序的可用性。幸好你平日的积累这次派上用场了。你把之前保存下来的上百个优秀的UI设计作品拿来研究，你从书架上拿出Norman 的那本经典 - The Design of Everyday Things 重新细读。最终你用白纸黑笔敲定了第一个版本的 UI，简洁直观，没有任何多余的设计，所有元素的排列间距 大小颜色都恰到好处。你相信即使天气不好，但用户只要使用这个 App 都会有着愉悦的心情。那么开始写前端吧。啊，别急，都忘了还有  和 Logo ，可是不会 PS ，不会 AI ，不会  怎么办呢，学吧。你平日喜欢结交不同领域的朋友，正好几周前在一个活动上你认识一位朋友做设计的。她花一个下午的时间教你基本的 Sketch 的使用，并对你的 UI 设计给出了一些意见。你请她吃了顿晚饭表示感谢，然后立即回家根据她的一些建议重新调整了 UI ，这次你在 PS 里把 UI 画了出来， 和 Logo 也顺道一起做了。接下来的一周，你学习 HTML，CSS，以及 Javascript，并漂亮地把前端搞定。在朋友圈发了个状态，找人帮你做 Beta 测试。他们都首先问你是什么 App，一开始你简单回答一个天气的 App。但你发现，这不能提起他们的兴趣。你觉得你需要用语言，用故事包装一下。不光是作为别人「是什么 App」提问的回答，也是成为  道路上的一个重要技能。你去看了所有你喜欢的产品的主页，从他们的文案上获得一些灵感启发；你读了经典的  ，发现好的文案，好的设计，其实和好的代码很相似，都是重在交流，如何让他人毫不费劲地明白你要表达的内容。你的故事要吸引人，你的产品介绍要在1分钟内解释清楚，并确保你的父母可以毫无压力听明白。一切就绪，产品上线了。反响不错，用户持续增加。很多用户希望有移动版本，于是你立即投入到iOS 版本的开发上。你花一周不到时间学习了基本的语法和工具使用便投入到 App 的开发中。你知道 Learn by Doing 是最好也是最快的。由于之前学习了设计的基础，UI ，Icons 很快搞定，不久 iOS 版本便发布了。iOS 的发布带来了更多的用户增长，后台服务器的压力颇大，你知道是时候优化后台了。你在  上多开了 2 台服务器，并写了一个  来自动化部署过程。你改用 uWSGi 协议，用  作为 Application Server。你使用  来做并发，负载均衡 ...............用户持续增长，每天你都会收到十几二十封用户的邮件。你很感激这些愿意花时间给你写邮件的用户，你相信他们是你最重要的用户，是潜在的付费用户。如果你把他们像上帝一样对待，他们同样也会把你看作是上帝。所以除了睡觉时间的发来的邮件，每一封邮件，你都会在2小时内给予回复。果然这样的付出是收获巨大的，他们不仅惊讶且非常感谢你的快速回复，他们会在app store里给你★★★★★的评价，他们在社交网站上分享你的app，他们甚至会主动提出捐款给你。你从快速的用户增长中嗅到了商机，你开始思考如何赚钱。广告你是坚决不能允许的，你认为再精确的广告也会影响用户体验。你设计了 2 个不同的付费方案，你打算用 A/B 测试看哪个方案更好。你分别给 200 个用户发去邀请尝试付费的邮件，邮件内容你精心打磨过，并在最后写上：CEO & Founder. 通过分析 2 种方案的用户行为，你决定将使用第一种方案。接下来，你相信差不多是时候成立个公司了。为了省时间，你花 2000 块钱找了个园区挂靠并帮你注册公司。公司的名字让你头疼了很久，你不想只是简单的用这个 App 的名字作为公司名字，你知道公司将来还会做出其他优秀的产品。你希望这个名字简单易记，同时其含义也是你公司文化的象征。公司注册下来了，但银行那边得自己跑。你联系了一些媒体编辑，邀请他们来试用你的产品；你重新设计了产品主页，并开始写产品的 Blog ；你在各大社交网络都给 App 注册了账号，即做社区客服也为宣传... 这些事大大压缩你写代码的时间。以往你都是以代码量作为衡量自己当天工作效率的指标，所以这些天你总感觉没做啥工作。这样的发展早已超过你的预期，这个 App 从一个 Side Project 几乎变成了你生活的全部。你跟你女朋友半个月才出去约会一次，她抱怨不断；你1个月没跟朋友出去玩耍喝酒了；你 2 个月都没锻炼过身体... 你意识到, YOU CAN NOT DO THIS ALONE，你需要帮手，你需要找人一起把这个做下去。但你不是要成为 Full Stack Engineer 么？你现在是了么？设计，后台开发，前端开发，移动开发，运营维护，PS，文案... 好像都会了，这算 Full Stack Engineer 了么？不，这只是踏上成为 Full Stack Engineer 的第一步。你知道目前只是每个 stack 都懂一点，离 或者 expert 还差得远，而要每个 stack 都做到极致，需要大量的时间和精力。精力有限，产品开发紧迫，力不从心啊，这条道路也太孤独，因为你不需要与任何人进行协作。难道要把一些stack的任务交给别人做么？这样算是放弃成为 Full Stack Engineer 么？不！这不是。什么是 Engineer？最终他的职位也许不再是 Engineer ，他不再设计 UI ，不再写代码 ... 他的工作不再是 design and building an app or product，因为他有更大更重要的任务要做 - design and building a team or a company which builds great products. 而这时，社会给了他们另一个称呼 - 创业者。尽管众人已忘记他们 Engineer 的身份，但在他们骨子里，内心深处，自己始终都是一个 Engineer 。当他们需要从头再来时，他们毫不犹豫从设计开发产品做起。，Ferdinand Porsche，Henry Ford，Jack Dorsey，，Elon Musk ... 细数那些改变了或正改变世界的创业者，他们大多数是 Engineer 背景，热衷于设计创造。以上，为我认可的 Full Stack Engineer ---Peng"
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",Cat Chen,既然原文是说，Facebook 工程师说 Facebook 只招 full stack engineer，那我就来说说 Facebook engineer 都是怎样的人啦。我觉得任何一方面的具体经验都不重要，重要的是思维方式和学习能力。首先说思维方式，那就是不为自己设限，不会想着自己是前端工程师，所以后端的东西我就一点也不碰。Facebook 的工程师，级别越高就需要保持越大的影响力。如何创造更大的影响力，就是寻找当前杠杆效应最明显的问题来解决。有些问题你解决了的话，投入进去的时间每小时能换回来一千美元；有些问题你解决了的话，投入进去的时间每小时能换回来一百万美元。然而哪些问题更值得解决，这是动态的，往往还存在衰减效应。如果现在性能瓶颈在后端，你做了一个季度两个季度优化后，瓶颈就已经不在后端了，你再优化下去就会越来越明显。等瓶颈变成前端了，你是不是就说因为你不懂，所以不愿意碰？那就相当于寄望于公司有个前端很懂性能优化的人来解决，但如果公司没有这样的人那就没有人来解决了。Facebook 的众多海报当中，有一张写的是「任何一个 Facebook 的问题，都不是别人的问题」。有问题，你就需要去评估是否值得解决。如果值得解决，你就应该着手去解决，而不是假设公司内会有另外一个人比你更合适解决这个问题。这时候很可能你就需要去做你从来没有做过的事情，需要学习你原本可能完全不懂的技术。如果你是个专门做数学模型的博士，加入 Facebook 原本是打算做搜索结果优化的，结果发现这不是最急需解决的问题，JavaScript 性能才是最需要解决的问题，你怎么办？如果你以为 Facebook 需要的是你做数学模型的经验，那你就错了。Facebook 需要的是你完成博士学位的学习能力。你从来没做过 JavaScript 并且觉得 JavaScript 很恶心？正确的做法是立即在网上买几本 JavaScript 入门的书连夜看完，然后着手分析性能瓶颈并且解决。在你完成手动优化后，你还可以思考一下能否把这做成自动化，例如说在代码提交时分析 JavaScript 并且指出可能成为性能瓶颈的地方，又或者说从用户浏览器那里收集性能数据扔到 Hive 然后再从中分析产生瓶颈的特征。这些都可能涉及到一些你没有做过也没有学过的东西，但问题摆在那里你就需要去解决，而无论这要求你去钻研什么。这就是我所说的学习能力。这是高级工程师和初级工程师的主要差距。尽管在高级到初级这一维度上，美国工程师和中国工程师是有重叠的，但美国的教育体系和行业传统使得美国应届生比一般中国工程师更偏向于高级那一端。美国学生的优势在于，他们的教育体系让他们习惯面对开放性问题。一家公司万千问题当中，此时此刻哪一个最值得解决？这不是中国工程师擅长的问题，因为实在是太开放了。中国教育让人擅长在给定条件下解决问题，太开放反而不知道从何入手。此外因为绝大多数文献都是英文的，所以要钻研什么对于能读懂英文的人来说都可以非常成体系的学习，这对于很多拒绝阅读英文的中国工程师来说很不利。拒绝阅读英文意味着永远只能接受别人的二手资料，对于很多概念的理解只能停留在技师的层面，而无法上升到工程师或者科学家的层面。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",尤雨溪,现有的答案已经说明了，以一个正常人的精力和学习速度来说，想在 full stack 的每一个层面都达到顶级的精通显然是很困难的事情。但是做不到这一点就算不上 full stack developer (FSD) 了吗？其实我希望大家留意题主引用的那段英文的最后一句：对所有的软件技术抱有一种真挚的兴趣）。我觉得对于 FSD ，尤其是对于想成为 FSD 的人来说，这个才是最重要的事情。即使都是 FSD，每一个人各自的技能加点也肯定会不一样，有人在前端更擅长一些，有人在服务器层面更有经验... 但其实没有什么硬性的门槛，需要的是解决的能力和意愿。你要做到的就是不固步自封在一个领域。遇到问题，就去研究，不因为问题不在你的 comfort zone 就放弃或者推给别人。即使一开始的解决方案很笨拙也无所谓， 比如说我要做一个网站，我有一些东西没碰过，但我有足够的兴趣和动力去搞个八九不离十。（这里自学能力很重要，有好的 mentor 也会帮助很大）当你经历过一次这个过程以后，你就会有信心去弄明白更复杂的东西，在之前的基础上进一步去消化、改进、学更多的东西。另外，我个人觉得这个过程应该是由实际问题驱动的，而不是漫无目的看到什么东西流行了或者觉得很NB就去学。 的答案里提到绝大部分的网站都活不到或者永远也达不到10k用户在线的水平，那种情况下去看 high scalability 的东西有什么意义？学的东西用来解决或是改进实际遇到的问题，这样你的整个知识体系覆盖面和侧重点会比较合理。打个比方就是你的技能点有限，所以加点方案得有一个主题，到处乱点的话就废了。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",phodal,一年之后，终于可以真正的给这个问题一个答案。现有的高票的答案没有涉及到怎么成为全栈工程师。你将会看到：献上我写的电子书《》
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",匿名用户,"2018update:创业失败，不过朋友的项目和我自己想做的事情，都需要一些开发者。那么各取所需，我建立个小组大家一起学，你想接现实项目可以在里面练手。详情看这里Update：我又合伙创业了。招php基础的开发者，入门基础到中级的都收，有意私信。坐标上海，汽车后市场的现代化连锁化互联网化改造。如果你目前写的少基础还比较差，只要逻辑思维清晰，好学，问题不大，我会带你的。另外说一下，开发者的概念。我们要的是开发者而不是程序员，我从入行2000年到转管理岗07年，之间的工作一直是开发者，尤其朗讯，我们根本不管你会什么语言，我们默认你会所有的语言。就像我曾经接手一个perl的数据转换脚本的工作，迁移爱立信设备的用户数据到我们服务器上。就一周时间，我在班车上边啃骆驼书上班了边写，后面我就开始喜欢上写了。我一直觉得，代码专家负责纯语言的底层事情，手术刀是用来做业务逻辑的，语言根本不是问题。Update：这个回答竟然收到的赞同比我其他所有回答都高，看来我还是转型灌技术鸡汤好了。补充下，首先我觉得好的开发者，即使不是全栈，也要融会贯通多种技术。我从来不认为一个只专精一种技术的人有可能成为好的开发者，即使是 C，即使是汇编。（当然其实反过来看，那些大神们哪个不会搞点其他的？比如几个做服务器端开发的大神居然不懂服务器管理？）然后从广度和深度的组合看，我认为好的开发者大概有两种类型：1. 手术刀2. 代码专家。（来自《》）手术刀是业务驱动的，最需要全栈的人；他们的核心价值在于：懂业务，技术全面，都能拿的起来，而且能选择最合适的技术。代码专家是技术驱动的，即使不够也可以用，但是技能树点的越多当然有好处。而我提的创业逼出来的全栈，是因为，对于创业团队而言，手术刀更加重要，代码专家要依靠各种开源组织的贡献，或者临时聘请。还有几位讲，创业的最大需求技能是整合资源的能力，找合适的人做事的能力。这个我认同，我只是说我自己，我承认我没能力忽悠一堆技术大牛策划大牛和我一起没工资的创业。我也忽悠不到前期种子投资的钱。所以我说的，是说对于我，种子期，天使期，最重要的都是我自己作为手术刀，而不是资源整合者。------------------------------------------不是为了工作本身，是为了方便实现自己的梦。作为一个标准的全栈工程师来答下，全栈工程师不是培养出来的，是逼出来的~不是公司逼的，是自己逼自己逼出来的~因为我要创业，我经济压力又大没法辞职，我没法忽悠其他人一起免费干活......而且作为一个写了13年程序的老程序员（貌似知乎上比我老的程序不会很多了。。。。），本来工作语言就已经用过 Delphi, C++，Java，Perl，PHP，Lua，ObjectiveC，NodeJS，Tcl。这些都是工作中用的，尤其是创业那些年，遇到什么问题，我就要自己去探路，探出路来需要招聘对应的人再招聘～结果顺便把各种语言都学了一圈～之前创业三年，一开始就我一个技术，所以运维几十台Linux 服务器我也顺便管了（我之前工作平时就工作在 Solaris 下面，差距不大），我老婆是前端工程师，所以 HTML，CSS，JS 我也一起学了。所以多学一些语言对我来说真的不是件事情......做过几年游戏制作人（做制作人我也同时每天 写代码....），策划，UI 都还有心得。而且我这十三年怎么过的呢？别人朝九晚五，我每天工作到半夜2点，周末也很少休息。谁能做到这样努力的工作（不是为了“资本家”，而是为了自己为自己工作），并且不是一直专注于一个岗位，我相信都能成为全栈工程师。回到起点，全栈工程师不是为了工作本身，是为了方便实现自己的梦。没错，如一些答主所说，你各方面都半吊子，我承认。我之前有一段工作是写 C++和 Lua。Lua 部分还好，C++要遍历个 std::map 我到现在记不住，每次现搜索。作为一个 C++程序员我不够好，只能算是入门，或者说我一直是重视实现功能而非钻技术细节的人。我不关心技术上多牛，我关心功能的实现。但我的价值根本不在于是一个 C++程序员，而是我可以从前端到后端到运维提供一揽子方案，视野广阔，任何点都可以选择最合适的技术，比如说最终选择 Lua 实现逻辑。如果是创业，我可以自己一个人完成这个纯应用层面难度的开发的全部工作（当然，我的意思不是我一个人全做掉）。如果不是创业，我的价值可能也就是个2w 多工资的架构师或者技术经理，这个价格远远对不起我这13年的付出。一个真正的全栈工程师，目标只有一个：创业。"
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",auxten,高中的时候喜欢踢球，班上有一个特别厉害的前锋，用我们对手的话就是：“挡也挡不住，跑也跑不过，绊都绊不倒”。嗯，我认为的一个“全栈工程师”，不是仅仅能从汇编写到JavaScript，从PHP写到Objective-C。更是从代码到PhotoShop，从产品设计到地推样样行，样样懂。从小了说，给他安排个你自己都没想太明白的任务，他给你一个惊喜。从大了说，就是既能当CTO，又能当COO，没有各种CXO，自己也能当CEO。==============分割线==============说一个我一个朋友的故事吧，我是在大三认识他的。当时我是学校论坛的系统管理员，正在招人接替我毕业后在学校的工作。招了好久没有入得了我法眼的，这时我师傅说找到一个不错的。说实话，第一次见面我对他没啥好印象，因为这货抽烟，完全不像是一个搞技术的。后来一起通宵修理服务器，研究技术，慢慢发现这货是个挺有意思的人。以后的日子里我带着他一起写Python，写C，写JS。。。我发现他就是那种能不断给我惊喜的工程师。。。我们工作室的传统是，每年暑假大家都在学校做，当时我找了个去IBM实习的机会，想让他替我留校。最后一聊，这货没空，暑假要骑自行车去西藏。。。我才发现他还是个文艺青年（当时还不是那么贬义）后来，他到了大三，去的支付宝实习，做运维开发。再后来跟我一样去了百度，不到三年时间，就升到了T6。。。有一天无意发现这货豆瓣竟然有上万的粉丝，一问才知道，有一天他闲得无聊，写了篇骂豆瓣的产品的帖子，由于字字鞭辟入里，连豆瓣的产品同学都直呼骂得好（抖m的既视感），不断邀请他来豆瓣做产品，直到他亮出T6的身份，对方才作罢。此人还对人文历史政治总有很多见解。每每觉得无聊，第一个想到拉他出来吃吃饭，每次都有新收获。几个月前，他跟我说他前几天被一伙人拉着去融资了，那伙人是想搞云存储的，发现他对分布式存储很有研究，就生生拉上他去壮大阵容。。。我就问，他们怎么知道你对这个有研究呢？这货拿起手中的加冰可乐，33.3°仰望天花板：“因为MooseFS有部分代码是我写的”。后来才知道，这货已经是百度分布式存储&缓存Topic的负责人了。。。。就在我为他要在技术的道路上超越我而惶惶不可终日的时候，有一天，他问我有没有兴趣回成都。。。原来，这段时间他拉着几个学弟搞了个无节操（约XX）的叫“谁有空”的APP（啧啧，这名字。。），拿了几百万的融资，开始出任CEO，走向人生巅峰了。。。他也教会我一件事，遇到比自己厉害的学弟，不要嫉妒，不要尝试去压制，因为“有些鸟注定是不会被关在笼子里的，它们的每一片羽毛都闪耀着自由的光辉”。可能有一天你就要去他公司打工呢。所以，过了这么久，我最喜欢的一个身份还是曾经这个的“师傅”。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",九章算法,全栈工程师是当今最著名和需求量最大的 IT 职位之一，很多IT 企业正在寻找全栈开发人才。但随着 IT 行业复杂性和动态性的增加，成为全栈开发人员比以往任何时候都更加困难。国内外也有很流行的在线课程，比如： ， ， ， ，等等。全栈工程师可以在应用程序的后端和前端等应用程序开发过程中的任何一个环节工作。应用程序的后端包含逻辑处理、用户身份验证、数据库交互、服务器配置等。应用程序的前端是用户能看到和与之交互的部分。如果你想成为一名全栈工程师，你不必精通每一个细节。但是，在开发应用程序时，全栈工程师能够同时处理前端和后端，几乎对所有的技术细节都有涉猎。基础知识，就是可以写一些基本的样式，并能对页面的元素进行操作。举例来说，就是我们用Spring和JSP写了一个博客，然后我们可以用jQuery来对页面进行一些简单的操作，并可以调用一些API。因此，我们需要基本的HTML / CSS知识，以及JavaScript的开发经验。同时，我们还需要对DOM有一些基础的了解，才能做一些基本的操作，如修改颜色等等。在这种情况下，最简单的方案就是使用jQuery这样的工具。当然，如果可以自己操作DOM是再好不过的了。前端进阶技能，就需要我们对页面进行更复杂的操作。所以，基本上以下这些技能都是需要掌握的：成为一名全栈工程师，一般来讲仅仅掌握一种语言是根本不够的，可以再选择一门语言学习。当学习构建 Web 应用程序时，在某些时候你可能想要在某个地方存储数据，以便以后再访问它。所以你应该很好地掌握与 数据库 和 存储 有关的以下主题HTTP 是互联网上的无状态应用协议——它允许客户端与服务器进行通信的方式（例如，您的 JavaScript 代码可以通过 HTTP 发起一个 AJAX 请求 ，来获取服务器上运行某些后端代码的结果）。你应该掌握的内容如下： 当你掌握了 HTML / CSS ，JavaScript ，后端编程 ，数据库 和 HTTP / REST之后，那么接下来就是棘手部分了。这时，如果你想创建一个有点复杂的 Web 应用程序，你需要知道如何构建代码，如何分离文件，在哪里存储您的大型媒体文件，如何在数据库中组织数据，在哪里执行某些计算任务（客户端 vs 服务器端）等等。下面这些内容，可以帮助你了解如何高效地构建Web应用程序：最重要的是，你应该尝试和其他开发人员合作，看看 GitHub 上热门的项目代码库，并从高级开发人员那里学到尽可能多的东西。 Git 是一个  ，允许开发团队中的开发人员跟踪代码库的所有更改。 Git 很重要，这能帮助你正确获取最新代码，更新代码，修复，并修改别人的代码，等等。 虽然很多前端工程师、全栈工程师都觉得算法对他们来说无关紧要，但是作为一个合格的开发者，还是应该掌握基本的算法与数据结构，毕竟这才是编程的基石。学习掌握基础的算法知识，同时可以在 刷题配合巩固。总之，根据，熟练的掌握全部方向的知识内容，每天都花时间来钻研也得花10年左右的时间。所以，全栈工程师决不是一夜练成的，你需要打好技术基础，强化核心技能，并持续学习才能应对更多的挑战。已经在准备面试了，但短时间内无法增加项目经验？项目缺少团队协作？九章算法《》，专为转专业小白、零开发基础的同学准备。不仅有FLAG工程师亲自带你做项目，更能帮你搞定全栈开发 entry-level 的所有面试问题。九章算法，硅谷一线工程师在线直播授课，已经帮助30000+人成功拿到心仪offer。更多课程信息请访问：
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",阿里云云栖号,"     看到已经有很多小伙伴分享了成为全栈工程师的答案，小编特在此贡献一篇全栈架构师的内容，以供大伙扩展： 看一下，简单地，，而。，例如LNMP，Linux＋Nginx＋Mysql＋PHP。。全栈（full stack developer）好像起源于facebook中对工程师的一种称谓，。全栈的出现大概有4个方面：。尤其的小型创业团队，战力的有限会导致全栈的产生。和习武一样，我想试图探讨一下全栈的套路，。郭大侠需要降龙十八掌，令狐冲以无招胜有招也需要。我觉得全栈的技术栈可以主要分为3个切面：。下面逐一简要阐述：。具体可看《老曹眼中的开发学习环境》，不在赘述。。可以使用Trello或worktile之类的工具做协同，以Jinkens等工具支持CI或者CD，了解Scrum中什么是backlog，什么是UserStory，如何控制sprint。同时，。再进一步，就是了，可以参考《DevOps 全栈必备双刃剑》从下向上看一下 全栈的所需技能，第一个就是，可参考《老曹眼中的Linux基础》。数据是系统的核心，必须要了解，只有NoSQL至少要关注redis和mongodb，更多可以可参考《NoSQL与大数据》。，至少要了解，DNS，TCP/IP，HTTP，以及网络类型对网络编程的影响，会上只有简单举例，以后择机仔细探讨一下。，简直是浩如烟海，基本上，可以从四个层面掌握有关安全的基础知识。至于架构方法，现在最热的莫过于微服务架构了。可以从这四个方面专研相关的技术。，关于混合云的解释可参考老曹的旧文《理解一下混合云》。 就计算环境而言，涵盖了Hadoop的生态圈，如果只有一个必备技能，老曹觉得就应该是Spark了，可以参考《架构大数据应用》旧文。 正像PingCAP CTO 黄东旭所说的，“talk is cheap， show me the tests."" 对于 JVM 调优，给朋友做个广告，中生代技术群中的 江南白衣 （公众号：春天的旁边）有一篇干货文章，特别向大家推荐。 ，具体可以参考《老曹眼中的缓存技术》。，具体可参考《老曹眼中的负载均衡》。。啰哩啰嗦，只是想探讨一下全栈的套路，也许这本身就是一个伪命题。技术在过去的几十年里进步很快，也将在未来的几十年里发展得更快。今天技术的门槛下降得越来越快，原本需要一个团队做出来的Web应用，现在只需要一两个人就可以了。同时，由于公司组织结构的变迁，也决定了赋予每个人的职责将会越来越多。尽管我们看到工厂化生产带来的优势，但是我们也看到了精益思想带来的变革。正是这种变革让越来越多的专家走向全栈，让组织内部有更好的交流。你还将看到专家和全栈的两种不同的学习模式，以及全栈工程师的未来。从开始的CGI到MVC模式，再到前后端分离的架构模式，都在不断地降低技术的门槛。而这些门槛的降低，已经足以让一两个人来完成大部分的工作了。二十年前的网站以静态的形式出现，这样的网站并不需要太多的人去维护、管理。接着，人们发明了CGI(通用网关接口，英语：Common Gateway Interface)来实现动态的网站。下图是一个早期网站的架构图：　　当时这种网站的URL类似于： (PS：这个链接是为了讲解而存在的，并没有真实存在。)用户访问上面的网页的时候就会访问，cgi-bin的路径下对应的getblog脚本。你可以用Shell返回这个网页：123 #!/bin/sh  echo Content-type: text/plain   echo hello,world  Blabla，各种代码混乱地夹杂在一起。不得不说一句：这样的代码在2012年，我也看了有一些。简单地来说，这个时代的代码结构就是这样的：　　这简直就是一场恶梦。不过，在今天好似那些PHP新手也是这样写代码的。好了，这时候我们就可以讨论讨论MVC模式了。我有理由相信Martin Fowler的《》在当时一定非常受欢迎。代码从上面的耦合状态变成了：　　相似大家也已经对这样的架构很熟悉了，我们就不多解释了。如果你还不是非常了解的话，可以看看这本书后面的部分。在今天看来，我们可以看到如下图所示的架构：　　后台在不知不觉中已经被服务化了，即只提供API接口和服务。前端在这时已经尽量地和APP端在结合，使得他们可以保持一致。软件开发在过去的几十年里都是大公司的专利，小公司根本没有足够的能力去做这样的事。在计算机发明后的几十年里，开发软件是大公司才能做得起的。一般的非技术公司无法定制自己的软件系统，只能去购买现有的软件。而随着技术成本的下降，到了今天一般的小公司也可以雇佣一两个人来做同样的事。这样的演进过程还真是有意思：　　在这其中的每一个过程实质上都是为了解决沟通的问题。从瀑布到敏捷是为了解决组织内沟通的问题，从敏捷到精益不仅仅优化了组织内的沟通问题，还强化了与外部的关系。换句话说，精益结合了一部分的互联网思维。在最开始的时候，我们预先设计好我们的功能，然后编码，在适当的时候发布我们的软件：　　然而这种开发方式很难应对市场的变化——当我们花费了几年的时间开发出了一个软件，而这个软件是几年前人们才需要的。同时，由于软件开发本身的复杂度的限制，复制的系统在后期需要大量的系统集成工作。这样的集成工作可能要花费上大量的时间——几星期、几个月。　　当人们意识到这个问题的时候，开始改进工作流程。出现了敏捷软件开发，这可以解释为什么产品经理会经常改需求。如果一个功能本身是没必要出现的话，那么为什么要花功夫去开发。但是如果一个功能在设计的初期就没有好好设计，那么改需求也是必然的。现有的互联网公司的工作流程和敏捷软件开发在很多部分上是相似的，都有迭代、分析等等的过程：　　但是据我的所知：国内的多数互联网公司是不写测试的、没有Code Review等等。当然，这也不是一篇关于如何实践敏捷的文章。敏捷与在很大的区别就是：沟通问题。传统的软件开发在调研完毕后就是分析、开发等等。而则会强调这个过程中的沟通问题：　　在整个过程中都不断地强调沟通问题，然而这时还存在一个问题：组织结构本身的问题。这样的组织结构，如下图所示：　　如果市场部门/产品经理没有与研发团队坐一起来分析问题，那么问题就多了。当一个需求在实现的过程中遇到问题，到底是哪个部门的问题？同样的如果我们的研发部门是这样子的结构：　　那么在研发、上线的过程中仍然会遇到各种的沟通问题。现在，让我们回过头来看看大公司的专家与小公司的全栈。如果你经常看一些关于全栈和专家的技术文章的时候，你就会发现不同的人在强调不同的方向。大公司的文章喜欢强调成为某个领域的专家，小公司喜欢小而美的团队——全栈工程师。如我们所见的：大公司和小公司都在解决不同类型的问题。大公司要解决性能问题，小公司都活下去需要依赖于近乎全能的人。并且，大公司和小公司都在加班。如果从这种意义上来说，我们可以发现其实大公司是在剥削劳动力。我们所见到的那些关于技术人员应该成为专家的文章，多数是已经成为某个技术领域里的专家写的文章。并且我们可以发现很有意思的一点是：他们都是管理者。管理者出于招聘的动机，因此更需要细分领域的专家来帮助他们解决问题。相似的，我们所看到的那些关于成为全栈工程师的文章，多数是初创公司的CTO写的。而这些初创公司的CTO也多数是全栈工程师，他们需要招聘全栈工程师来帮助他们解决问题。而不知你是否也注意到一点：专家们也在强调“一专多长”。因为单纯依靠于一个领域的技术而存在的专家已经很少了，技术专家们不得不依据于公司的需求去开拓不同的领域。毕竟“公司是指全部资本由股东出资构成，以营利为目的而依法设立的一种企业组织形式；”，管理人们假设技术本身是相通的，既然你在技术领域里有相当高的长板，那么进入一个新的技术也不是一件难的事。作为一个技术人员，我们是这个领域中的某个子领域专家。而作为这样一个专家，我们要扩展向另外一个领域的学习也不是一件很难的事。借鉴于我们先前的学习经验，我们可以很快的掌握这个新子域的知识。如我们所见，我们可以很快地补齐图中的短板：　　在近来的探索中发现有一点非常有意思：如果依赖于20/80法则的话，那么成为专家和全栈的学习时间是相当的。在最开始的时候，我们要在我们的全栈工程和专家都在某个技术领域达到80分的水平。那么专家，还需要80%的时间去深入这个技术领域。而全栈工程师，则可以依赖于这80%的时候去开拓四个新的领域：　　尽管理论上是如此，但是专家存在跨领域的学习障碍——套用现有模式。而全栈也存在学习障碍——如何成为专家，但是懂得如何学习新的领域。有意思的是——成为专家还是成为全栈，取决于人的天性，这也是两种不同的性格决定的。成为管理者还是技术人员看上去就像一种简单的划分，而在技术人员里成为专家还是全栈就是另外一种划分。这取决于人们对于一个问题的思考方式：这件事情是借由外部来解决，还是由内部解决。下面这张图刚好可以表达我的想法：　　而这种思维依据于不同的事情可能会发生一些差异，但是总体上来说是相似的。当遇到一个需要创轮子的问题时，我们就会看到两种不同的方式。对于全栈工程师来说，他们喜欢依赖于外部的思维，用于产生颠覆式思维。如Angular.js这样的框架便是例子，前端结合后端开发语言Java的思维而产生。而专家则依赖于内部的条件，创造出不一样的适应式创新。如之前流行的Backbone框架，适应当时的情况而产生。全栈工程师本身不应该仅仅局限于前端和后台的开发，而可以尝试去开拓更广泛的领域——因为全栈本身是依赖于工程师本身的学习能力，正是这种优秀的学习能力可以让他们可以接触更广泛的知识。如果你也尝试过面试过，你会怎么去面试他们呢？把你知道的所有的不同领域的问题都拿出来问一遍。是的，这就是那些招聘全栈工程师的公司会问你的问题。人们以为全栈工程师什么都会，这是一个明显的误区——然而要改变这个误区很难。最后，导致的结果是大家觉得全栈工程师的水平也就那样。换句来说，人们根本不知道什么是全栈工程师。在平时的工作里，你的队伍都知道你在不同领域有丰富的知识。而在那些不了解你的人的印象里，就是猜测你什么都会。因此，这就会变成一个骂名，也是一个在目前看来很难改变的问题。在这方面只能尽可能地去了解一些通用的问题，并不能去了解所有的问题。在一次被面试全栈工程师的过程中，有一个面试官准备了几个不同语言（Javascript、Java、Python、Ruby)的问题来问我，我只想说Ciao——意大利语：你好！除了这个问题——人们不了解什么是全栈工程师。还有一个问题，就是刚才我们说的成为专家的老大难问题。让我毫不犹豫地选择当全栈工程师有两个原因：当我第一次看到全栈工程师这个名字的时候，我发现我已然是一个全栈工程师。因为我的学习路线比较独特：中小学：编程语言 -> 高中：操作系统、内核、游戏编程 -> 大学： 硬件、Web开发 -> 工作：后端 + 前端而在当时我对SEO非常感兴趣，我发现这分析和Marketing似乎做得还可以。然后便往Growth Hacking发展了：而这就是全栈学习带来的优势，学过的东西多，学习能力就变强。学习能力往上提的同时，你就更容易进入一个新的领域。近日，移动开发精英俱乐部围绕「如何成为一个全栈的工程师？」进行了讨论，主持人是优才学院的创始人伍星老师，让我们一起看看大神们的精彩言论吧！（本文系国内 ITOM 管理领军企业  工程师整理）：全栈，最早来自于 Facebook 的「我们只招全栈工程师」，从表面看是指技术栈，是完成一套产品所面要的全部技术和技能。谷歌在它的书中也提出，它们只招创意型人才，其实这是一致的、相通的！：全栈，在我看来是一种态度，无路遇到何种问题都能积极的去解决。全栈，也不是说会什么，而是因为有好奇心与驱动力，所以什么都想搞明白，学习起来自然能快速上手。：全栈，也可以说「我是一块砖，哪儿需要我，我就往哪儿填。」代表着快速学习的能力和超强的适应能力。：全栈，在一定程度上能更好的做出架构，减少维护成本。：我支持思想和知识层面的「全栈」，而非刻意技能上的全栈。：其实，能从前端写到后端的人不少，但是能专职来做吗？这么说吧，很多公司的后端都能写前端，但可不敢让他们写产品级别的代码。如果后端人才如果能去了解前端的知识点，合理去进行整合互补，这样是我们所鼓励的。：全栈围绕产品服务，重点是考虑问题的角度、广度。个人理解也可以看成责任感的一种体现，前端、后端都可以也不代表全栈。只不过是围绕着问题的解决方案，其根本还是本着对一件事情负责的态度，展开全方面的跟踪。：从谷歌对创意型人才的描述可以看出，这更多体现在能够主动地承担工作和解决问题。比如谷歌讲过一个例子，Adwords 是几个非相关工程师主动解决了小问题带来大收益的。Facebook 的人才培养一开始是不分工的，「新兵营」之后才分工，并且轮岗很多，这中间暗含了：学习能力要相当强，我想学什么，都能学什么，需要我做什么，都能胜任。所以我们对全栈提出如下见解。首先要技术全面，作为全栈工程师，其技术当然要比较全面。从前端到后端、从运维到优化、从 PC 到移动都难不倒。 但又有自己比较精通的一方面。也就是说，作为全栈工程师既要有「专深」，同样也要有「广博」，这样才能在解决问题时不受局限，才能融会贯通。第二就是思维和心态。全栈工程师以积极主动的姿态来面对和解决工作中的问题。以全局的观点来看待自己所从事的项目， 而不只是自己负责的一小部分。以做成产品、做成一件事的观点来看待整个开发流程，而不仅仅是技术实现。 因为只能这样的心态和观点，他才会积极主动地去学习其他技术，用其他技术解决问题第三是上升能力，全栈工程师并不意味着全能，什么都会。但是全栈工程师有良好的基础技能。 这个技能，既包括计算机科学的基础，也包括英语基础，有了这个基础， 加上积极的态度，开放的心胸，就能快速地学习所需要的技术，比如像 Swift 语言，那都不是事儿。 并应用在所需要的开发工作中。第四就是职业价值，像 Facebook 说，他们只喜欢全栈工程师，创业公司也会说，我们需要全栈工程师。无论是在大公司，还是创业公司， 全栈工程师都将成为抢手人才！那是因为，全栈工程师不但技能全面，而且心态积极，学习能力强！：所以全栈不是一种技能，而是一种能力。学习能力，开放心态是优先的！：其实后面有段时间觉得全栈需要一方面熟悉自己本身专业的领域，另一方面需要关注另一段的技术，这样在需要另一端技术，或是沟通时都能有帮助：对感兴趣的东西不要当成「工作」来做，其实兴趣才是最大的动力。我觉得全栈应该是由「兴趣」驱动的。：即使是领域专家，他对别的也会有了解和研究的。优秀的技术人员，对所有的技术应该有一种天然的好奇心和折腾劲：我前端和后端都经历过，其实，在前期人员不全的情况下，结合业务并外出调研梳理了产品线框图、PRD、流程图，到制定了设计规范，到协调资源，然后制定研发周期，最后到输出...... 曾一度以为这就是全栈，但是后来思考，这些只不过是本着对事情负责的态度，才驱动做了很多研发之外的事。就算一个人的技术全栈精通也要服务于根本产品。：项目进度和管理，比全栈本身要难。因为技术还是死的，人是活的，而且多种多样的。就像业务架构师，本身曾经技术应该不错，即使学新技术，应该也是有特殊长处和见解的，不过不学不写罢了。这种人是标准的技术 leader ，技术能力并不一定是以某特定语言的写码能力而界定。一般而言，全栈工程师在产品和沟通这块都有优势，由于技术全面，他能和各方沟通的比较愉快 。甚至和产品经理也沟通好。我也算是一个全栈，此前和各个产品经理沟通都很愉快。因为他不理解的地方，我会和他讲清楚，分析清楚，为什么这个不能做，为什么那样做不好，那样做更好，有理有据，其实，产品经理也是讲道理的，不像我们在网络上经常「吐槽」的那样。如果再加上本身的技术声望和良好沟通的方式，程序员和产品经理相处其实会很和谐的。：我的理解是，不仅自己领域的精通，然后其他部分也应该快速学习。在我看来，如果想成为全栈的话，还得靠上项目了。在普通公司的话，一般每个人只关注自己的领域，对跨领域的项目一般不会碰，可以自己利用业余时间来写，比如原本做APP的，有空可以写一下后端的东西，其实开始那一步比较困难。：全栈不只是技术，还需要心态、责任等方方面面。：我觉得 facebook 要求全栈，并不是希望程序员技术全面但不精通。而是至少有一个领域精通，而且可以快速研究另外一个领域的技术点。：能成为全栈，意味着技术能达到一定高度，而高度，肯定是以长处见知的。我个人更倾向于认为，一专多能。：成为全栈的话，还得靠上项目了。。。在普通公司的话，一般每个人只关注自己的领域，对跨领域的项目一般不会碰，自己私下来写，比如原本做 APP 的，自己私下写后端的东西，其实开始那一步比较困难。：关键是责任感的转变，由「被动」到「主动」，才能实现自我超越。：我个人看法，不是先有了「我要成为全栈」的目标，而是对技术的好奇和追求，以及积极应对当前业务发展的不断挑战，最终才能锻炼出了全栈。：我觉得，最好的方法就是项目驱动；从另一方面也说明，说为全栈，在一定程度上，也是被逼出来的。：我比较赞成项目驱动型。比如 APP 端的，例如做个类似于云笔记的软件，那么后端数据该怎么保存，接口该怎么定，该用哪种语言来实现后端，在分析你想要的目标的时候就能找到该用哪种技术该学哪种技术。比如后端用 PhP 写，这时候就会推动自己去学 PHP，比如自己是做安卓，那么语言衔接上，有可能选择 JAVA 做后端，这时候就学 J2EE 的东西，围绕这个需求来实现，然后学数据库......其实说到底还是得有」目标项目」来进行推动。：后端概念太泛了，不同业务需求和规模需要的技术支撑完全不同。：比如做高并发，可以 NodeJs 、 Golang 、 Erlang ，或者干脆用 Java、PHP 等等。其实做项目的第一步，后端写出业务服务接口，在业务量上来之后考虑比如性能优化，比如负载均衡，或者再比如后端架构分层等等。：其实，接入也有很多要做的，一般要和终端一起做，路由、负载、流量控制、安全、监控、旁路、优化 TCP 协议栈、内核参数再到硬件的支持等等。做业务，比如网关、鉴权、微服务框架、服务治理、缓存、消息中间件；存储，单机房如何保证数据不丢，多机房是单向同步，双向同步，出了异常怎么通过日志恢复，数据的检查，静态检查点的选择。怎么做分片，怎么扩容不影响原来的分片？：所以说到底还是得有这个项目需求，围绕着需求来分析需要的技术，然后再研究技术了。感觉纯按照兴趣来学新的技术，作为对这一个技术有个优缺点简要了解，在需要的时候能快速学习。我个人还是觉得，想成为一个「全栈」，就找一个想法并实现它。：比如，你觉得 NBA 好看，想要做一个 APP 能提醒比赛，那么每天下班后，没事写几个小时代码，三个月后，你就会发现做成了。：我觉得做个「入门型」的全栈比较容易，真正能做到都有一定深入的了解很难，融会贯通更难。：先自学基础入门，进阶的话，可以随公司项目，初期不能直接参与，但是我们可以主动思考技术方案，然后参照其他同事最后落地的方案，对比总结。能力慢慢提升，真正上手的机会总会有的！：最重要就是，Just Do It ！：不过大公司相对有一个好处，就是能遇到「牛人」的概率也比较高，所以开发过程中，某一个部分遇到瓶颈的时候想要找人讨论或者请教，找他们也是比较好找的。：高人点拨，确实重要，但是建立在你入门的基础上。：很多时候，我们不能做最想做的事情，而且要停下来推动一下，阻碍我们继续前行的事情。但是，有些坑，有些历练是必须的，别人说一万遍，我们还是得自己历练。而且很多技术选型，都是在真正落地之后，才暴露出问题。：采坑是必然的！运气好的话，采坑的代价低，运气不好的话，采坑代价可能毁掉整个项目。不过有些坑，有可能是在技术选型的时候就会暗含的，这个时候确实不好找。：我们业务在往图数据迁移的时候也踩了很多坑，因为我们是社交软件，所以很多需求是基于用户关系的，比如喜欢、不喜欢、好友等等。。。最开始觉得  挺方便的，导入数据的时候发现，免费版就是个坑爹的玩具。。。收费版貌似5千刀一个月还说多少，巨贵。。。：创业有这个好处就是人少，一个人当多个人用，这个时候就有很多机会去摸新的东西，不过缺点就是没人带，自己摸石头采坑。。。：不过对于我来说收益大于采坑风险。。。所以还是得围绕这个需求，一圈一圈的挖掘更好的解决方式，这个是一种学习的过程。尤其是在风险可控范围内，绝对鼓励大家尝试新的东西。到最后你的选择很多时候依赖你团队的水平，怎么把这些人水平带起来，你这些才能做细最好的成长就是在业务中成长：架构也是活的，需要不断生长，不断修改。不过，前期埋的坑也只有后期加班吞了，没有一劳永逸的架构！：我觉得重要的还是分享，别人帮你填了坑，你也可以帮别人填坑。而媒介就是博客，大家可以互帮互助。：说到写博客，我觉得可以把思维给规范化，把想法记录下来的同时还能注意到以前没注意到得细节，绝对是学习新姿势最必要的补充。：曾经，我就主动地提出来帮公司承担一些的运维方面的事情。然后就自己学习，请教，后来很自然地就成为全栈了。当然，全栈并不意味着上班学别的，我们上班时间把公司的事情做好，这才是成为全栈的前提。：还有一点，就是我们在写代码的过程中，要考虑怎么优化，怎么写得更快更好，而不是像「搬砖」似的，简单的重复。「搬砖」工作很快就会被淘汰掉，积累核心竞争力才是发展的根本 。：比如做APP，在写从服务端拉取数据的时候，就可以考虑一下他们为什么要提供这样的数据结构？这样的接口如何进行实现的？有这些疑问的时候，就会促进自己去看看去了解一下相关的知识，这样才能不断通向全栈之路。当然，完成是一码事儿，完成好是另一码事儿。全栈的意义不是全都泛泛地去做，而是在做深自己的领域同时，也能借鉴其他的技术，至少在团队开发时候沟通成本会减少很多。：其实，产品并不会关心你代码怎么写，关键自己要写出让自己觉得满意的、高质量的代码。：全站人才可以站在更高的视角，提供「一揽子」的解决方案，避免踩深坑！：热衷于技术，成全栈是早晚的事儿，技术全面某方面又比较深入，自然能解决别人解决不了的问题，能做别人做不了的事情，团队中的影响力，行业中的影响力，也自然就有了，形成正向循环，还是挺不错的！：就像罗辑思维跨年公开课说的那样，核心竞争力，就是你的不可替代性。我们不能单纯地说「全栈」好，很多初学者会被误导，是因为他们不了解什么是全栈，怎么才能成为全栈。就像武功也有练「走火入魔」的。其实，加入一个快速成长的团队创业。是成为全栈的最快捷途径。这个团队，也可能是大公司内部创业团队。也可能是大家都把工作当作创业的团队。而没有好奇心，没有折腾劲，没有学习能力，没有开放心态，是不可能成为全栈的！ （本文是优才学院创始人伍星对全栈的理解，发布后2014年4月份，到现在也没有改变，欢迎大家阅读。）"
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",李楠,Full Stack Developer 在国内不被接受的一个主要原因是公司缺乏稳定的 T 线（技术职位晋升路线）。太多有才华的人写了几年代码最后都去做了管理。而今天的网络相关技术，聪明又能持续学习的人，在三年之内可以在一个领域做到很高的水准。我以为你成为 Full Stack Developer  是很自然的选择，而且可以跟随最顶尖的技术。这种人并不罕见，我认识的人中   就是个例子。相信 Full Stack Developer 的核心并非否定团队和协作，而是更多的体现在架构设计，和 TroubleShooting 方面。随着今天的分层越来越清晰，平台和语言越来越有特点，更加全面的技术人员可以根据不同的语言搭建整个架构。数据一致性要求高？那么使用事务管理久经考验的 Spring？还要考虑 scale ？那么放在 Oracle 里面做还是放在 Application Server 的 Transaction 管理里面做？简单请求的高并发？那么 Node.js 也许不错。 Web App 快速原型，那么 Rails 也许不错。邮件模板和自动发送？ PHP 有现成的东西为什么不用？前端数据和交互复杂？ 为什么不试试 emberjs （ PS ：选前端框架对于架构人员来说简直像女人逛银座一样令人兴奋。甚至有人用几乎所有的框架写了同样的 Web App 来供他们试用： ）？想绕过苹果的 App Store 的审查机制频繁发布？可以考虑在 iOS Apps 里面嵌入 HTML5 。Full Stack Developer 在快速原型上也很有优势，因为省去了大量的管理和沟通成本。而且，这并非就意味着一定在代码质量或者测试上有缩水。 MVC 前后都可以用。一个写过 test_helper.rb 的人做前端，一定会搜索 javascript TTD 。同样，用过 javascipt lint 的人一定可以找到 stylecheck 。语言和平台会变化，聪明的方法和工具都是共通的。懂得基本的字体知识和排版审美难道和 CSS 不是天生一对？TroubleShooting 方面 Full Stack Developer 同样优势巨大。服务器压力太大未必需要通过后端解决，优化个 SQL 写个 Hint 是选择，而拿一部分数据和运算到前端也许是更加合理和低成本的选择。一个系统运行多年，最后遗留的问题很可能需要对业务和技术都有深入理解的人才能解决。从以上内容可以看出， Full Stack Developer 并非杂而全 - Facebook 也不会雇庸手。他要求的是一种更加全面的深入。 一方面，他是技术人员不断学习的结果。另一方面，他也是对自己事业的一种责任：技术人员的价值不是指派做了一半的 issue 给队友，而是更快更好的。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",马宏菩,：这篇答案写在问题添加了“补充说明”说明之前，对于“Full Stack Developer”的定义是我根据自己的理解来写的，现在看来我（以及另外一些朋友）的理解和补充说明里引用的那一段是的。所以这个答案与题目描述并不相符，仅供参考，请大家注意。简单来说我以下所说的 FSD 可能更像是“全才大牛”，对任何一个领域的了解了该领域的专业人士的平均程度，更像是 Engineer × N ；而补充说明以及 庄生 （抱歉由于重名太多不知道该at哪一个）、 等朋友所说的 FSD 则是各领域都有一定的了解（但不必达到该领域的专业人士的水平），足够独立完成一个项目的各个方面，强调了解新领域的勇气和能力（前提自然是有充分的兴趣）。对于后一种 FSD ，我是十分赞同将其作为一个目标而奋斗的，理由和方法其他几位也说了很多的（我很赞同独自完成一个项目，途中了解些感兴趣/有用到的、但之前不了解的新领域，永远保持一颗好奇心，真的受益匪浅）。而对于前一种 FSD （也是我下面即将讲到的），先声明我绝对不是也不想“装逼”，做以下几点说明：====================窃以为 full stack 不是那么简单的事情。当然，不同的地方可能有不同的标准，且听我慢慢道来。既然大家都在以 Web 为例，那我也说 Web 好了。不过事实上 full stack 也有可能是其他方面的。租个 VPS ，从装系统配环境开始，然后拿个 PHP Python Ruby Nodejs 什么的写个后端（少不了用一些框架吧， 后端框架多如牛毛，不说 PHP ， Python 用个 django 、 Ruby 弄个 rails ，都挺方便吧），再给它撸个好看的页面（表现层多半也会用个  之类的，如果设计能力强一点的话就用一些更轻便的 helper frame 然后主要自己手写；逻辑控制层高端一点弄个 backbone 甚至 angular 之类搞个重 AJAX 、带前端模板及路由的新潮 HTML5 应用）。弄好以后上线，性能出问题了，看看日志 Google 一番调调参数，甚至多买一两台 VPS 来弄个负载均衡什么的。再要不，我们换成实体机，然后顺便玩玩网络和虚拟化什么的？这样算不算 full stack 呢？也许在一些小公司（不过现在很多互联网创业公司水平都很高，所以也不能完全看大小）可以算是了。但在真正高水平的公司，以上的任何一点都达不到相应领域“工程师”的标准。装个系统调调参数甚至弄个简单的负载均衡就叫运维了？你确定这不是网管？从几台机器到成百上千台机器是有一个量变到质变的（虽然经过这个质变以后，对于运维工程师来说两者就差别不大了），更别说弄个机房，搞个异地数据中心什么的。不说CCNP，CCNA总该有吧？再者，如果不说这么大（这么大了可能就涉及到“架构师”了），往小一点说，也有很多可深挖的：性能调优只是根据网上的文章随便调调参数？我见过不少牛逼的 Web 运维都读过 Apache 和 nginx 甚至部分 kernel 代码。没有自动化的监控程序和运维工具难道得死死守在机器前一遍遍地敲命令？合格的运维不但熟练使用已有的工具，还会根据需要自己写脚本、工具，因为现实情况太复杂通用工具不一定适合。很多公司里，运维还要兼顾安全问题，那么又是一个大坑。备份、冗余、风控个个门道都很深。再说后端。会用  或者 RoR 写点东西很厉害？这些本来都是 RAD 框架，就是拿来快速开发、快速上手的，降低了门槛。但不同的程序员编程功底和代码质量还是会对最终成果造成很大影响。滥用 ORM 导致性能低下的例子我就不多说了。明明用了这样的框架还能写出带有 SQL 注入的程序也不少见，有的甚至还存在逻辑安全漏洞，至于什么加盐、防 CSRF 、 XSS 、 replay attack 、 session fix 、应用层 DoS 等等，多少人都是只听说过名字知道个大概然后用一个“厉害”的框架就以为一劳永逸？不知道原理也没看过框架代码，不知道框架到底是怎么实现的、是否有一定局限……再说软件工程方面。写几个测试数据就叫单元测试了？提前写测试数据再开发就成 TDD 了？三天两头重构就叫敏捷了？ QA 、版本控制、协作、文档，都不是那么简单的事吧。然后说前端。 HTML CSS 本来就是以方便表示内容和布局样式而开发的，只是“会写”应该不算什么难事吧？何况还有各种布局、排版库。 JS 灵活得很，有一点 C 语法基础的人学起来也很快，感谢 jQuery ，就算是不知道什么是、不知道 JS 原型继承等等的三脚猫功夫也能实现大多数需求了。那么这样就是前端工程师？真是这样的话为何前几天知乎还有人问好的前端工程师为什么这么难找？能写出在所有浏览器表现一致并且方便维护的样式需要不少经验积累和勤奋实践，对浏览器渲染原理的了解也不可少。这还只是第一步，加上 JS 这玩意儿以后复杂度其实陡然上升了。在一个真正的大项目里，要保证各个组件正常运行不是一件容易的事， JS 本来就缺乏一些“软件工程”特性，导致大型代码组织不便，糟糕的 JS 程序很容易就污染了命名空间、搞错了作用域、漏掉了异常、弄错了类型、在异步和回调之中迷失……一不小心，就搞挂了页面，调起来还麻烦（就算现在有了 Chrome ）。这还没算上性能、兼容性、安全等等问题呢。这也是为什么前端工具/技术特别多的原因之一。好的前端工程师不但紧跟技术前沿，还乐于知道这些牛逼的技术都是怎么实现的，然后灵活运用。可能有人会说人的精力有限， full stack 有了广度自然要牺牲一下深度。那么我想说，再怎么牺牲深度，如果各领域都像上文举的反例那样，那肯定是不够的。那样可能只算是一个爱折腾的 geek 而不是工程师。我一个大二学生就能很好地完成开头提到的情景，并且还可以再深一点（比方网络方面有个差不多CCNA的水平和一些经验， PHP 自认为还是比较扎实的= =，对于安全、性能优化、分布式等方面也有一些了解……），但我也只觉得自己大多数时候还只是“折腾”而已，还有太多不足和有待提高之处。事实上，上述任何一个领域中的真正的工程师都肯定能凭借自己的学习能力和极客精神轻松地在业余时间完成开头所说的那个例子：看看 github 上那些有趣的个人开源项目和搭建起来的 demo 吧，大部分作者的本职应该都只是前端、后端或其他等等的其中之一。更不用说还有很多工程师的博客也是自己写（我是指写一个博客系统）、自己搭的。 一定是很难的。其实我自己作为一个互联网领域的学徒，也面临着这样的困惑：我发现自己什么都会一点、什么都不算精（按照某些标准大概已经算是一个“full stack”了吧）。到底以后应该怎样呢？是朝真正的 full stack 努力还是好好专精一个？看了不少招聘要求，现在就算是创业小团队也很少会直接招 full stack 的，所以觉得大概是先做好一个性价比高一些？不知道题主为何想要成为一个 full stack 呢，是因为已经是某一领域的工程师想要做做其他方面么（这个也会影响到“怎样成为”这个问题）？不好意思，似乎跑题了。到最后自己还反倒提了个问。只是希望抛砖引玉，更踏实的回答多一些，不要太浮躁，把全栈说得太过轻易。手机打字，如有差错还望指出，谢谢。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",小冋王鹏,突然就想起这个表格了[CN]Programmer%20competency%20matrix.htm如果说要想全部达到level3，没有三四十年怕是不行吧，到时候还会有新的知识，永远达不到的。所谓的全栈都是资本家们根据他们的业务自我衡量的，骚年们还是从基础好好打起吧。基础好，学习就快，所谓阳光下没有新鲜事嘛，学计算机你懂得的。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",董飞,从全栈工程师到全栈员工，软件吞噬世界的步伐又进了一步。以下是 Chris Messina的在我离开 Google快两年之后，我开始意识到职业环境正在发生的变化。传统的管理纪律正在渐渐瓦解。要想在上成功，需要的技能比以往更加多样而难以定义。如今，要想在职场上有所成就，你必须成为一个真正的博学者，成为一名全能全栈员工。就像“（full-stack engineer）”和“全栈创业（full-stack startup）”一样，全栈员工（full-stack employee）拥有超强的综合技能，有着无法估量的价值。他们可以在快速演进、变革的技术浪潮中如鱼得水。他们可以在事实稀缺、观点横飞的过剩信息中凭直觉做决定。全栈员工能够熟练运用设计语言，明白使用卡通字体无异于犯罪行为，轻车熟路地嘲弄Keynote、Sketch抑或是Skitch。他们清楚用户界面（UI）和用户体验（UX）的区别。他们可以和人讨论工程问题，能搞清楚算法、编程，也能理解前端的等级和后端的等级根本不是一回事。虽然他们可能并不亲自编程，但他们知道GitHub、StackOverflow都是做什么的。如果必要，他们会暴力破解一段“复制粘贴”的脚本，在CSV文件中进行基础分析。他们是最新锐的社交应用的用户，深谙自我推广 之道。他们既可以在听众面前循循善诱地耐心讲故事，也可以在看了3分钟视频后就能指出：亮明要点的时间不能长于一段Instagram、Vine短视频。注意力就是这个时代的硬通货。全栈员工对新的想法、最棒的实现路径、提升生产力和与愉悦度的事情有着“贪得无厌”的胃口。他们对世界及其运转规则充满好奇心，想知道如何留下自己的印记。正是这一点使他们与过去时代的人们区分开来。开始一份工作时，全栈员工不会戴上“眼罩”埋头苦干，而是始终与行业的发展保持同步，因为他们清楚：变革往往出现在边缘地带，不能只盯着脚下的一亩三分地。有了24小时在线的移动设备，工作和非工作之间的界限正在模糊，既然工作正在变得碎片化，全栈员工要清楚地意识到自己的生活方式也要随之变化，比如使用整体式单色衣柜、功能明确的厨具。成为全栈员工意味着要在两极之间来回切换。他们既要适应单兵作战，自给自足（比如自己安排时间，使用自己的设备工作），也要能和团队高效协作。过去，在大型团队中，往往需要有一名 IT经理来决定使用何种技术。如今，随着人们越来越多地使用个人设备工作，员工需要自己来搞定跨设备、跨平台沟通等问题。就拿企业协作工具来说。Slack可以整合所有东西，而微软却只对自己平台上的工具开放特权。如果你不能接入其他人的 API，你已经落后于时代了。全栈员工也是如此——他们至少应该熟知所有最新的应用，这样才不会落伍出局。全栈员工必须要在自己的领域有深刻的洞见，同时也要机动地应对优先事项的转换，胜任不同的安排。组织的扁平化已经不是新现象，变革的动力可能来自顶层，也可能来自底层，有时候需要个体来决定事情的优先级。（FSE，Field Service Engineer）应该遍布组织内部，却又不能分布的过于稀疏。即使不用监控每一位员工，他们也应该知道每一个人在做什么，保证他们在不熟悉的事情上不会手足无措。要成为一名全栈员工不是一件容易的事，回报却也很丰厚。首先，他们可以更自由地按照自己的方式、在自己喜欢的地方（Teleport等服务可以帮助他们找到价廉的工作地点）、喜欢的时间工作。他们可以使用最新的工具，自给自足，自我管理。由于他们的工作涉及多领域、多学科之间的协作，会带来更宽广的视野，更丰富多彩的经历。在组织内部，他们的影响力也会不断上升，对组织的成败也将担负起更大的责任，团队的成功与否更加休戚相关。对于企业和管理者来说，在人力市场上争夺全栈员工意味着很多准备工作。首先，你们做好准备来吸引、留住这些人才了吗？其次，你们团队的工作风格是否明确，你们对远程办公的支持如何？再次，你们允许的工作时间，支持员工自主安排工作计划吗？最后，你们会给他们留出健身、养生、陪伴家人的时间吗？Google虽然充分考虑到了员工的健康、精神需求，但反过来也要求员工高度负责。 Google的员工可以以任何方式在任何时间、任何地点工作，只要能最大程度发挥创造力。但它同时希望员工能够随时参加一场临时安排的快速议事会。你的团队准备好了吗？如果你还没有尝试过，不妨一试，来感受下”全栈员工“的工作环境是什么样子的。不同背景的人们在一个公共空间内彼此协作。他们一直在线，通过Slack等协作对话平台交流。大多数全员协作空间都是临时搭建，多种实体、虚拟的工具混合使用（白板、投影仪、会议室、视频会议设备等）。对于职员和管理者来说，最需要培养的是”同理心“——员工和管理者都要对彼此有一种“同情的理解”，在彼此沟通、协作、要求时能够提出具体的需求。因为未来的工作需要高度的灵活性和自主性，但这并不意味着每个人给自己下达工作命令、工作指标。管理者的角色依然是必要的。说未来的职场将由全栈员工引领，无疑有些夸张，但这是一个显而易见的趋势。毫无疑问，工作的定义正在发生变化，员工的最大价值是应对不确定性，能够从海量的信息中提炼出有效的战略、战术。而且，在工作机器人大规模“入侵”之前，我们只有10年的时间。他们正在取代体育新闻、驾驶、快递等重复性工作，人们要重新思考适合自己的角色。感知和综合的能力将是第一位的，而语言、辨析力和同感力在进行复杂、敏感的任务是都是必备技能。全栈员工将帮助我们向未来过渡，将成为新的混合经济中的关键角色。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",baoz,看起来够fullstack了吧？很不幸告诉你，如果是这样，那么就会毁掉fullstack这个词。做过强电逆变器，虽然控制电机可以跑起来，但是仅仅停留在跑起来，可以控制速度而已。但是波形还能烂一点不？尼玛电机噪音那个大，主流的逆变器论文看过木有？甚至我怀疑微积分都没学好。做过机器学习，其实说白了，机器学习导论那本书你看完都可以做了，各种贝叶斯聚类分类决策树，高端点的LDA；但是这个仅仅是入门好不，底层的数学原理你足够了解了？能推导公式不？。让你做一个数字识别可以做出来，让你做一个来识别指纹呢？人脸识别呢？别告诉我说有库。其它的等等很多都类似，别被fullstack这个词毁掉了你的一辈子，。------------------------------------------------------------------------------------回到问题：如何称为一个fullstack工程师我觉得不要怕dirty job就可以了，一个不熟悉的领域，去找一两本导论级别的书，建立一个基本的知识框架，然后就可以开始干活了；当然，你别指望做的多好；但是绝对不会差到哪里去，知识基本都是相通的；甚至是可以相互借鉴的。当然，如果就拿起某门语言大概看一下语法就开始干活的，我觉得这个不能算。基本每个都会写简单的html & css & js吧？-------------------------------------------------------------------------------------关于发展问题：和我一起毕业进入同一个公司（后面跳槽了）的同事，基本都是做深度路线的，很多都混的比我好（大公司核心部门核心岗位，或者在各大公司跳来跳去的）；无论是搞ACM的，还是在某个领域有足够强的积累。他们去面试基本都可以秒杀国内主流互联网公司；但是我呢？做深度不够，做广度他们不需要，而且各大公司都会考虑成熟的技术，所以给的offer相对就没那么有吸引力了（当然，毕业后就没找过工作了，具体也不知道，哈哈）。相反创业公司如果要找合作伙伴，都需要建立一定的信任关系，有些不了解的，让你去你都不敢去；如果是熟悉的团队，那么你只能期待公司发展顺利早点上市，哈哈。自己创业？目前不考虑，这个是一个团队的事情，哪怕两三个人，不是你一个人可以解决的。就算你在fullstack，你也不可能兼顾到所有的事情。-----------------------------------------------------------------------------------------------关于优势考虑问题会全面很多，可以做系统级别的事情，不容易陷入拿着锤子满世界都是钉子的境界。还有，中小创业公司很喜欢这种人。-------------------------------------------------------------------------------------------------对自身发张的考虑1) 知识结构体系化，更扎实一些。2) 技术在某个方向做深。3) 切入某个应用领域，多了解领域知识，解决领域问题。4) 千万别沦落为民科！！！！----------------- 2018.2.8再次更新-----------------------随着管理团队的规模变大，事情变多，对事情有了更多的认识走技术专家路线，是一个很不错的选择，稳扎稳打，各方面压力也不大，一些热门的岗位，会随着需求而身价快速提升但是，如果一个各方面综合能力都很不错的，甚至对业务有不错的理解，那么会有更大的空间，包括管理团队；甚至，这些人就是为了当CEO/CTO准备的。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",albert corleone,受苏格拉底大神的启迪，我也来谈谈全栈。禅师：成为全栈工程师，这个问题等于如何成为全才，有可能吗码农：有可能，不过可能性比较低，因为达芬奇这类人毕竟是百年一遇的奇才。不过，因为我热爱这个行业，也有一定天赋，所以只做好软件全栈的话我想还是可能的禅师：你玩过三国志这个游戏吗码农：我还开发过禅师：你喜欢什么样的武将，诸葛亮怎么样？码农：不错，虽然他武力只有20，不过智力有100，不过游戏出战不是单打独斗，我可以给他搭配武力100，智力20的吕布，在战场上所向披靡禅师：对于一个武力65，智力65的武将，你怎么处理码农：砍头或让他下野，浪费军粮和黄金禅师：但是他很全面啊，两项能力综合130分，比诸葛亮和吕布的综合分还要高码农：话虽如此但他还是太平庸，无法独挡一面禅师：赵云怎么样码农：这是我最喜欢的武将之一，武力97，智力80，还有一个姜维也是，武力91，智力91，这是我心中全才的标准禅师：首先，请把一个能力发展到90，如果你还有余力把另一个能力发展到90，再称呼自己全栈吧，否则你只是一个全面发展又全面平庸的废材。码农：我明白了，我想facebook和google标榜的全栈，也肯定不是一个c++，java，ios，php，blabla都只会编写hello world的全栈。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",何静,"借宝地说句话。    我前几天对标李笑笑6W的“”，说了我自己认为的“全栈”，然后，很多小伙伴私信我，让我惊讶的是——他们问的不是“你为什么要这样分类”，而是：“我懂XXX，你认为我可以拿多少钱？”于是，就有了这套“打分标准”———（也算我侧面回答了本楼的这个问题吧）满分是100分。原型：（5分）                     axure，visio，，Pop ，必选一得5分。如你所见，这些更是产品经理的必懂的工具，从程序员哥哥做到全栈哥哥，居然不懂，对不起天地啊。app：（10分）安卓，iOS，webapp(react，vue，)，react native。说明：app都不会，微信平台不会，小程序不会，算什么全栈？懂app开发加5分，懂webapp加5分。页面：（5分）html5，css，，jquery 都懂加5分，懂大部分加3分。（不负责解释什么是懂）说明：这个是基本功。脚本语言：（5分）python，，ruby，php。说明：作为全栈工程师，居然不会2种以上的脚本语言，python必须会的吧，产品经理都会，2种以上加5分，1种加3分，函数语言：（5分）haskell，Scala。                    说明：以后是函数语言的天下，现在主流语言都插入函数语言功能，不会以后会被淘汰。1样加5分。编译语言：（10分）java，c，c++，c#，go 。说明：java和c++必须会，c#现在也是跨平台，go不是差不多吗？3种以上加10分，2种加5分，1种加3分。api 设计工具：（5分）RESTful api，swagger。说明：api的设计，工具，现在非常重要，很多互联网公司就是以api为核心，会设计合格的api加3分，会自动文档和使用工具加5分。框架：（10）nodejs，（springmvc）,django，rail，thinkphp， .NET。说明：spring在java领域最近有一统天下的趋势，现在懂语言不懂框架，没生产力，只要懂2种以上的框架才会相互借鉴，spring从rail和django获取了不少经验。2种以上框架和微服务加10分，懂2种加7分，一种加5分。sql：（5）mysql，oracle，sql server 必选一，懂得sql索引优化加分，分布配置加分。说明：sql都不懂，算什么工程师？no sql，（5）redis，mongodb, memcached。说明：没有redis,,如何开发高并发程序？无消息队列无法处理异步系统。懂3种才能加5分，2种加3分，1种？额，加1分。RPC和分布式架构（10）thrift，web service，pb，gRPC 加分项，dubbo,zookeeper 分布式架构，微服务。说明：必须要会或grpc，这样才有利用各个语言的优势，进行大团队协助。还必须懂分布式架构，这样才能把rpc整合起来，懂rpc加5分，懂分布式架构加5分。服务器配置（5）nginx,tomcat,jetty,apache,openresty,varnish，必须2个才能加5分。说明：nginx和基本都是标配了，懂2种以上加5分，其他加2分。开发流程和源码管理，可持续集成，容器（5）svn，git，Jenkins，docker，jira，diffy。说明：如果你不懂开发流程，持续发布，自动测试，你没办法建立10人以上的团队和快速迭代，懂整个流程的加5分，懂可持续集成和源码的加3分，只懂源码控制的加2分。大数据（10）Hadoop，spark，，hive，Elasticsearch。说明：大数据现在不仅仅是分析，现在略微大点系统都依赖于大数据。（懂3种以上加10分，懂2种加5分，懂1种加3分）第三方工具（5）要知道阿里云，，cdn,聚合api，pingxx，友盟，face++,等各种sdk（做过）说明:第三方工具至少要懂3个以上才能加5分。打分说明：60分以上勉强算全栈入门，70分算合格，80以上算资深，90以上你是大牛。收入标准：60分工资20-30 ，70分工资30-50， 80分以上收入50-100，90以上看你脾气。（单位不扯，自己心里清楚，我也不想被喷）最后再分享一下我们团队目前采用技术栈，喜欢的欢迎勾搭：react，安卓，iOSrestfulapi swaggerspringboot javathrift c++，pythonmysql，mongodb，redisdocker，dockethadoop，essearch"
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",Tiger,我理解的全栈工程师：我的团队在找 全栈工程师，可以参考下：
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",IT吐槽君,"先来歪楼为什么要成为所谓full stack engineer? 这个full stack engineer 的概念要理解清楚，我个人认为不是说要成为一个全能工程师。先讲个自己的故事，我是从90年代初就开始做技术的，那时候没有互联网、没有开放代码、没有各种平台，资料都是去书店去买，一本书里面真正有用的就10来页，当时写了本《未公开的dos中断》，当时奉为天人，后来知道是翻译的。做应用要懂dos，要懂各种bios的中断，要会用汇编，要会用c，要会做网线，要会装服务器（那时还是netware的天下），还要会手动查查病毒，读懂分区表，要自己写sql和sqlform去实现用户应用需求，甚至在DOS里面自己做字符的界面管理和鼠标控制，还要用汇编写中断去控制调制解调器和打印机，因为用户不愿意多买服务器（当时服务器好贵）写个简单的tcp/ip的堆栈....这个够full stack吧，当时觉得自己真的属于上知天文下知地理，但是时至今日，这些本事有什么用呢？我觉得基本没用了，而且随着经历的丰富，反而觉得过去自己浑身的本事都是雕虫小技，不懂的东西好多好多，真正有用的是留下来对项目的经验和架构的体会。IT行业发展到现在，和社会发展一样，进入了社会分工明确的时代。每个方向深入下去都是大的不得了的东西：1 你说你懂操作系统，能给linux提补丁吗？2 你说你会运维，sed,awk,sar,snmp这些东西你都是活字典吗？3 你说你会数据库，一条复杂sql能不看explain就能知道怎么运行的吗？看了explain能知道数据库的索引问题在哪里吗？知道怎么改吗？4 你说你会网络，看过tcp/ip源码吗？知道wifi里wep,wpa aes的区别吗？知道前兆线和百兆线物理上的区别嘛？5 你说你会web编程，看过http的rfc吗？看过webkit代码嘛？6 你说你会大数据分析，概率论的几十种分布都懂嘛？每种分布适合那种情况知道吗？或然率公式会推导吗？7 你说你会C/C++，你知道不同编译选项出来的优化代码的顺序吗？。。。。。真正要懂一个技术，不是仅仅看几本书写几段例程就行的，都得实际干几个能上线的项目才能知道这个技术的坑在哪里，适合什么，不适合什么，出了问题大概怎么回事。这件事从人的精力上来看我个人觉得是不可能的，而且做到了也没什么意义，最多就成为一把瑞士军刀：什么都能对付两下，真干专业的活那样都不好使。这对一个技术人员真的不是什么好事，因为工程师是要实际动手干活的。我建议工程师的可以成为临栈工程师而不是一个，所谓临栈就是对于自己专项工作相邻的一些技术要有一定的了解，类似母语之外的外语。比如做后台的工程师，对数据库要有点了解，或者对tcp/ip有点了解。做前台的工程师，对http要有点了解，对图形学、色彩学有点了解。这样有助于在工作中和团队中的伙伴更好的交流，实在不行时候也能对付两下子救救急，或者证明不靠谱的伙伴做的确实猪头。但是，记住了，这不是你的饭碗，除非你打定主意改行。当然，你要是想做那种光说不做的工程师、顾问呀什么的，那是另外一回事了。瑞士军刀也是有市场的。歪楼结束，回到问题。如何成为全栈工程师，我觉得是机遇，就和民国初期出了一堆学贯中西的人一样，不是他们多牛，而是时代造就：小时候读私塾，国学童子功没问题。长大取消科举，留洋好找工作，不到20岁就去留洋，回来以后一看，我靠，学贯中西呀。如果你每3年换一个方向，每个方向都扎的很深去做实际项目，还要复习过去的知识并跟上发展，你就可以成为一个full stack工程师。祝你成功！"
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",易哥,看到，揣测全栈工程师是怎样的。当然，很多思路也都是对的。我就不采用意淫大法了，介绍下如何成为全栈工程师。并且介绍和要。开始了，小板凳搬好。本回答一共分为下面几个部分：人没在美国，也没坐飞机。作品会涉及到页面，如果有人说（尤其是我的页面设计部分，因为是真丑），请抒发出来！！！当做对我勇气的鼓励，谢谢。我是从前端入手开始编程的。不，确切说是页面设计。是的，我最开始接触互联网开发的身份是：页面设计师。就是设计和绘制网页。那时，我大一。一天，我有了一个想法：做一个校车查询系统。那时候，我们学校六七个小区包围了省会。做实验、或者进城等，校车成了最好的途径。然而，学校网站提供的校车是个表是一个表格……巨难使用！你想想，当你太阳底下背着书包，用Nokia 6300的小屏幕（10年，有个Nokia 6300就不错了）一边心疼流量（10元10M？贵的很）进入学校网站，曲曲折折找到那个表格，多麻烦！于是，我要做一个校车查询应用。设计出来下面的图：然后，会PS只是第一步。前端开发我也会，三下五除二写出了前端页面。完美。但是还有一个问题，应用场景！用户在查询校车时，往往是在路上。10年左右，流量那么贵，让大家访问这么漂亮（额，漂亮么？十年前的审美真是奇怪呢！）的界面浪费流量，而且那时的手机一般屏幕小，使用起来不方便。所以，我用WAP协议（上古协议？）写了一个手机版的。每次查询不到5k，四舍五入就是不需要流量。对了，后来我不做页面了，也不做前端了。因为我觉着我审美太差，不合适。而且审美这东西又很难通过努力弥补。所以，。光写了前端没有用啊，得有后端支持啊！不要怕，PHP是世界上最好的语言，世界上所有的网站都运行在Apache上。其他网站就不配叫网站！PHP大法好，学起来。于是后端就有了啊。然后我就把它挂到了学校网站的服务器上（我是网站技术部门的成员），然后发了个QQ空间装逼。然后，就被疯狂转发。历史最高访问几千独立访客每天。对的，我在里面加了CNZZ的访问统计代码。那几天，我那个激动啊！！！所以，到这里，至少前后端通了。但是！万一用户5K都不想用呢？或者，网络不好呢？再说了，校车信息表一般是一个学期更新一次，直接下载下来，用户一直用多好啊。于是，搞个客户端。不会没关系，学啊。Android，搞起啊。于是有了：它的优点是：当然，那些自动判断逻辑都很弱智的，没什么AI算法。好，这个时候告一段落，我们总结下。其实，从前端到后端到客户端，我就在做一件事情：校车查询。就这一个最简单的事情，一直做。除了说到的这些，还有数据库、应用部署、访问统计、应用发布等等。只要盯着一件事情从头到尾做下来，都会涉及到。所以，如果要想成为全栈工程师，你可以选择一个有意义的事情，一直做。有以下几个好处：好了，接下来进入新的阶段。本来那个阶段应该是：IOS客户端。可是，我穷，没有iPhone和Mac。而且，我保研了，要去其他学校做毕设。于是，我开始搞……算法……算法很好玩。不过我可能没那么适合，至少和我们实验室的刘博相比。之人博闻强识，有过目不忘之术。听闻一次，便可记生人之星座爱好家乡诸类。而又善推理，常执一笔于白板急速推演，或矩阵或方程，每当吾辈称赞，则摇手羞涩曰“嗨，这有什么难的。”更甚之，其外语极佳，桌角常堆一尺论文，皆为所阅。常见其手执一笔，畅然读阅，其速若母语。吾每羡之，皆叹不能及。然后，我后来就去某度实习了。在凤巢，就是广告算法的比较核心的部门，做广告推荐算法。所以，算法，我也算是略知一二。至少基本的机器学习算法，都能推导。不过那时候，就特别好奇隔壁组是怎么把我们组给出的算法给工程化的（这里是伏笔！）。然后总感觉自己是个螺丝钉。最后，还是选择离开了某度。其实在搞算法时，就经常接触Linux脚本。因为系统的数据量极大，使用Java或者Python的效率太低，所以很多的前期处理会使用Shell进行。所以，还算了解。然后，工作初期还真就做了底层的偏运维的部分工作。当然不是运维，是应用工程化发布部署等工作（接伏笔）。在这里，我还真就清楚地知道了算法结果是怎么工程化的。而且，其实最近我还真在给AI项目做工程化方案。看，解答了当年的疑惑。期间各种Shell\lua\PowerShell……都搞了一些。比较底层了。做到这，大家可以看到，我做了很多算法的工作，又做了工程化的工作。相当于，最软的和最硬的都做了。一般人说的全栈，可能都触及不到这些，或者触及的比较少。然后其实我还做了一些其他可由可无的工作。一般不涉及这些工作也算是全栈工程师。所以，我属于超全栈的。例如，我做过强电的继电器。还考取了。做过弱电的电路设计。下图是我做的一个收集空间中射频能量并供给传感器采集信息并通过Zigbee向外发送的电路板。当然，程序也是自己写的。应该够硬了吧。不过这是题外话，做全栈工程师应该不需要搞这些。现在是软件架构师。设计软件架构，外Java开发。我始终坚持一个原则：虽然会页面，但是对组里页面小伙伴指手画脚。虽然会前端，但是对组里前端小伙伴指手画脚。虽然会后端，但是对组里后端小伙伴指手画脚。以上很重要。上一张同事的杯子。，而不是让你一个人做完所有。也没有一个人能做完所有。所以，杯子上说的很对。另外，虽然全栈很好！但是，要在！否则！这一点也很重要。好多年前公司组织全栈工程师培训，我还负责过前端培训。但是逐渐就不怎么做前端了。我现在就是专注架构和后端，负责架构设计，协调开发。偶尔也自己做做，都是后端。让我一个人做一个网站出来也行，可我的前端真的已经很菜了啊……还有，我们组每个人都很牛，也都很全栈！，希望大家有心理准备。永远记住！我，健身7年了，从未间断。身体素质分在97到100之间，在公交车上常被认为是健身教练（主要因为胸大）。身体年龄比我实际年龄小好多。最后，感谢。也可以我，我会偶尔分享和方面的知识。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",我未成妖,折腾之魂永不停息的人，最后就容易变成 full stack.另外，在学校里写东西，找人巨难，这造就了一批 full stack 小伙伴. 有一次搞一个 html5 的比赛，到后来快要deadline时，前端明显要搞不完了，作为一个野生前端，怒刷了一天 js 后开始填坑.有时候因为找不着人，还可以临时变身美攻（当然你也可以叫设计湿），然后客串一下 ios 客户端开发，设计个数据库…… 最后小伙伴们所有东西都搞完，你再从头到尾把他们搞的东西擦一遍屁股，然后需要宣传/比赛的话，海报/视频/演讲/slides/文档都是你的事，最后就成了 full stack 了.你看，full stack 都是苦逼的人（你看这还只是学校里的 full stack，要是工作上成了 full stack 那就不定啥样了）. 想想好像没必要匿…，就不匿了吧.
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",随便起个名,"首先，如果您是，没有任何其他目的的情况下，我相信高赞的这两句话道出了无数全栈攻城狮的心声！虽然这个回答并没有告诉大家该如何成为一名全栈开发攻城狮，有些跑题，但我还是喝下了这碗鸡汤[狗头]。我会在这篇回答中讲述一下我是如何成为一名以及我的技术选型。首先介绍一下我自己，我本科毕业于澳洲某高校的人工智能专业(Artificial Intelligence & Robotics)。在我读大学之前，我对编程是一窍不通，更不用提什么前端后端了。我第一次接触软件开发是在我大一那年，老师要我们做一个机械臂在限定区域内的运动轨迹优化算法，当时我苦思冥想了一周，都没有什么头绪。结果第二周的时候，有个同学把自己的博客地址挂了出来，并且告诉大家说，他已经把可视化界面做出来了，同学们只需要填写固定的参数，就可以测试自己的算法能否成功运行了！当时全专业60号人全炸了！他的这个举动并不算是学术违规，而是实打实的降低了这个作业90%的难度因为这项作业占了平时成绩的30%，总成绩的15%！相当于你直接白的了15分！后来，大佬四年满绩点，拿了MIT的全奖直博。虽然现在看来，只是简单的HTML+CSS甚至连框架都没用，简陋无比。但对于当时的我来说，简直如同晴天霹雳，震慑心扉，仿佛一道光照亮了我前进的道路！每个人在求学时期，都会或多或少的有过想要创业的想法，软件基本上已经是创业者的基本工具。大佬的这一壮举，让我坚定了信念，学习了全栈开发。感谢  （框架的作者）@Guido van Rossu（Python之父）等等...感谢大佬们为开源事业做出的贡献以及养活了无数开发者！当然啦，大佬怼人的频率不高哈，一直都在解答Vue相关的问题，毕竟首先你要明确一个问题，你究竟是想成为一名架构师？还是一个打算创业的个人开发者？下面是我总结的大型网站的开发架构，对初学者友好，不至于使您日后的员工觉得老板开发水平不行，也不至于你的网站在突然应对百万级的并发时突然挂了[狗头]，话说您都百万级了，还聘不起几个程序员了？有了以上技能基本上就可以部署一个合格的网站了，我做全栈开发用到的工具是这样的:一开始，我只用Pycharm, 当时第一个项目是Django前后端不分离的技术博客前端就到Boostrap+Jquery. 后来，我学习了Vue，用了VScode作为前端开发工具，免费，插件多之后，我前端改用了WebStorm. 毕竟是付费软件，确实比VScode好用一点，尤其是当你熟悉了JB家的快捷键，VSCode毕竟只是一个编辑器。最后，我在Pycharm把前端需要的插件都安装好，只用Pycharm做Vue+Django. 还有一个原因就是为了节约成本。。。。既然Pycharm能用，我又何必多花一份钱呢？方便接口调试，在这里我推荐APIPost，国人开发，免费使用，支持一键生成API文档还有Mock.js功能（虽然Mock对全栈来说没一点用…）前期用的是NaviCat, 最后只用了Pycharm商业版。这个就无所谓了 我不会和你聊什么并发量和访问量等等之类的数据。我就以大白话告诉你，如果你的用户数量超过1W了，那么恭喜你，你走到了第二个台阶，在这个时候，如果你没有资本的青睐，你的收入是完全不能支持你聘请一个3年经验的软件开发工程师的，这个时候，你就面临两个选择，不管不顾还是网站优化。如果你想要学习优化的话，可以了解一下下面几点。目前能想到的就是这些，4000个字足足码了一上午，希望大家能对大家有所帮助。如果你也是一名独立全栈开发者的话，有问题欢迎来私信我，我一般知无不言。希望大家能点点赞，点点关注！蟹蟹：）"
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",庄生,"名词定义：首先，反对  以及其他类似的泼冷水答案，对于互联网公司来说，一个项目刚开始的时候叫几个FSD就可以非常快地写个poc甚至直接发布，流量上去以后再考虑安全或性能隐患，慢慢交予领域专家在后期调整优化。考虑到大部分项目的生命周期和用户数量，上面这句话的后半部分根本不会发生。引用一句话：the bigger problem isn’t scaling, it’s getting to the point where you have to scale。不知道马同学所谓的公司都有哪些，可能都是外包公司吧。因为对于互联网公司来说，他提到的问题基本都属于premature optimisation。比如：以现在的硬件条件稍微高配一点的VPS跑一个在线人数10K的网站+DB问题也不大。国内有多少网站在线人数超过10K了？对于大部分的网站要CCNP/CCNA干嘛？重写了一遍以后每个request平均能省下多少ms? 你的用户在乎这点时间吗？值得那么多重写和测试的￥￥么？ 现在确实native sql确实又开始火了，但本质原因还是方便，根本不是性能问题。还有很多，不一一反驳了。下面回到楼主的问题，我认为成为FSD的想法非常好。因为成为FSD意味着具备了单人创业的能力。而且随着框架越来越强，互联网创业团队(包括intraprenuer)越来越小，FSD的前景其实远远超过领域专家。（这句话是个人观点，5年以后再回来看）那么如何成为FSD呢？很简单也很难："
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",慕课网,俗话说流氓不可怕，就怕流氓有文化！所以要在江湖混，多种技能傍身已经是必不可少的了。其实IT行业也是一样，具备多种技能的全栈工程师现在是越来越受到行业青睐了，那么什么样的人算是全栈工程师呢？全栈工程师大家普遍给出的定义是“”。可能大家在听了上述的定义很多人就更加懵圈了，到底什么才是全栈工程师啊？其实全栈工程师通俗的解释就好比你上学时候的老师，如果有一个老师既能教你数学，还能教你物理生物，同时他还能教你英语语文，这样的老师就是一个全能的老师，在it行业这样的人才就叫做全栈工程师。？其实不是的，全栈工程师也是分初中高等级以及不同类型的。可能很多人觉得已经是全栈了不应该是统一类型吗，怎么还会分不同类型呢，这里小慕就不得不说一点自己对全栈工程师的一个广义理解了。在大多数人眼里会了前端到后端的技术，能够一个人做完一个项目或者产品这就是全栈工程师，这样说虽然没错，但是其实全栈工程师还可以分为以下几种类型：这类工程师就是上述所说的从前端技术到后端技术都会，能够独立完成产品的人。这类工程师除开上述所说的前后端技术以外还需要具备一定的产品知识技能，是一群能够很好的从产品的角度出发，利用技术实现并完善产品的人。这类工程师不仅仅能够利用技术研发产品，还能站在用户、站在市场的角度去运营产品。这类型的全栈工程师多数出现在一些初创型的小公司里面，由于商业环境的影响，他们不得不从优先从产品运营的角度出发去规划设计产品，研发出市场所需要的产品。这类工程师他们往往还有一个新的名字叫做CTO或者CEO，而这个层面的全栈工程师他们能力核心偏重往往已经不是技术本身了，而是考虑如何利用技术服务于产品，从而创造出更多的商业价值。随着软件行业的诞生，在过去几十年里软件技术发展迅速，在未来也势必以更快的速度进行更新迭代，但伴随着发展，各种技术的门槛也变得越来越低，原本需要很多人才能完成的项目现在往往只需要简单的几个人就能够完成了。——随着科学技术的不断发展以及我国全民创业浪潮的兴起，市面上涌现了非常多优秀的产品以及Idea。所有人都在争取快速的推出自己的产品以便率先抢占市场、赢得商机。在过去的几年里，小慕经常听到这样一种说法，一个创业公司的普遍寿命只有3年，为什么这么说呢？因为如果一个项目3年还没有取得一个不错的成绩，在激烈的市场竞争中分得一块属于自己的蛋糕，那么这个项目基本已经宣告失败了。正因为有了如此激烈竞争的市场环境，每一个公司都希望能够利用最小的资源成本，更快的推出自己的产品，所以很多的中小型创业公司非常看重技术人员的综合能力，希望能通过尽可能少的技术人员完成多端技术产品的实现，这也推动了行业内全栈工程师的发展。——正如上述提到的全栈工程师是伴随着行业发展和技术发展而产生的一种具备多种技能的技术人才，那么全栈工程师相对于企业有哪一些优势呢？全栈工程师目前受到国内专家和全栈两种知识学习模型的影响（专家学习模型指的是认为技术应该一直深入学习研究的一种学模式，全栈学习模型指的是认为技术应该以全面掌握多种技术的一种学习模式），专家学派的人认为全栈是一种伪需求，但是更多的人还是坚定的向着全栈的道路发展。根据中国软件行业公布，就前端方向目前全栈开发人员已经超过50%，而伴随着技术的发展，越来越多的人在学习更加全面的技术，以解决工作过程中遇到的各种需要多端协助的复杂问题，从而降低沟通成本，增加工作效率。同时小慕搜索了各大招聘网站在全国全栈工程师的招聘数量，发现各招聘网站均存在数千家企业在进行全栈工程师的招聘工作。另一方面根据中国软件行业白皮书指出，目前我国日均全栈工程师的缺口数量仍然高达5000以上。首先如果你想成为一名全栈工程师，你得先成为一名技术工程师，不懂技术的全栈小慕觉得那不叫全栈。其次你得有一个合理的全栈方向定位及学习计划。 根据上述小慕所介绍的全栈工程师的不同分类来确定自己的全栈学习方向，同时考虑如下几个点：只有从自己擅长的领域出发效率才是最高的，如果一开始就进入一个陌生的领域难免会遇到更多的问题。这里不论你是否具备一定的编程基础，从简单的编程语言出发一定是没有错的，都说万事开头难，我们将开头的难度尽可能的降低，一方面能够提高我们的学习成果，另一方面能够增强我们的学习信心，而不至于步入XX编程语言从入门到放弃系列。就我个人一开始学习的是后端技术而现在更多的是偏前端工作的经历来讲，这一点小慕觉得是非常重要的。为什么这样说呢？因为每个人的性格和爱好都是不同的，那么对于编程也是一样的，每一种编程语言和其应用场景都有自己的特点，比如后端偏重的是业务处理逻辑以及着重编码本身，其并不像前端开发有一种所见即所得的既视感，后端往往要写一大堆的代码才能看到最后的结果（单独编写单元测试情况除外，就算是编写单元测试也需要写不少额外代码才能看到结果），所以如果你更喜欢可视化的一些东西，可能以前端方向为主对于你来说更好。对于全栈学习计划由于方向不同，达到目的的方式方法有很多，但是小慕希望大家可以注意一点：先确定全栈方向，后进行综合了解，其次进行逐一精通，最后完成整个方向体系上的知识全面覆盖。之所以小慕给出这样的建议原因有以下几点：最后小慕结合自己作为一名全栈工程师在中小型创业公司的经历简单的说一下自己的观点吧~最后的最后，小慕希望所有的全栈工程师都能以无招胜有招，以胜有栈。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",Keegan小钢,我曾写过文章聊全栈的的问题，以下内容也全是来自这篇文章：我主要将从三方面来聊聊全栈的问题：对全栈的定义，据我所了解的，最早来源于Facebook的工程师Calos Bueno在2010年底时写的一篇文章：。作者认为全栈是一个通才，能够自己创建不平凡的应用程序。他也指出，没人能够熟悉所有方方面面，但作为一个全栈，能够看清每个栈的上下之间是如何运作的。他还提出视觉化一个系统的方案：One way to visualize a system is how its data is shaped and how it flows.百度百科收录的定义则是：掌握多种技能，并能利用多种技能独立完成产品的人。收录的原文其实是这篇：。本质上来说，和Calos Bueno的观点大同小异。另外，也有越来越多人认为，全栈工程师 = 前端开发 + 后端开发。对全栈工程师，每个人都有不一样的定义，不一样的衡量标准。要求高的，认为全栈=全能，需求分析、产品设计、UI设计、移动开发、前端开发、后端开发、运维等，全部都熟悉。要求低的，认为只要既懂前端开发也会后端开发即可，比如，熟悉H5前端开发和Node.js后端开发，就可以称得上全栈工程师了。在我看来，其实都没有错，工程师也有分初级、高级、资深、专家，全栈工程师也一样有等级划分。那么，我们就从分级的角度来聊聊什么是全栈。但我不想从传统的初级、高级、资深、专家的角度来划分，我想从另一个更高的视角来划分全栈工程师。在得到专栏《硅谷来信》的第054封信中，将工程师划分为五级，如下：从本质上来说，不同层级的工程师需要有能力独立解决不同高度的问题。第五级只要有能力独立解决技术任务即可，第四级则需要解决团队问题，第三级需要解决产品问题，第二级需要解决行业问题，第一级则是最高级的产业问题了。需要注意的是，有能力独立解决问题，不代表就不需要和别人协作。全栈工程师属于工程师的子集，同样的，也适用这个五层级别的划分。那么，对于第五级的全栈工程师来说，就是有能力独立解决跨栈的技术问题。第四级的全栈工程师，需要具备管理和领导能力，应该是一个。第三级则还需要掌握产品设计能力，有能力做出成功的产品。但这个产品会比以往复杂得多，如果不具备全栈技能，那就很难形成全局性思维，更难以做出成功的产品。再往上还要深入了解行业和产业痛点，需要更高远的前瞻性能力。如果这样划分的话，那能够独立完成产品的全栈工程师应该属于第三级和第四级之间，而只懂前端开发 + 后端开发的全栈工程师还不一定能达到第五级，因为懂了前端开发和后端开发并不意味着就有能力独立解决问题。我面试过几个既懂前端开发，也懂点后端开发的程序猿，但每个端其实都还达不到我要求的及格线，更谈不上有能力独立解决工作中的跨栈问题。在我看来，一个合格的全栈工程师应该具备硬技能和软技能。硬技能主要就是熟练掌握工作领域中的各种技术栈了，比如做移动应用的，那可能就要熟悉Android/iOS开发、Java开发、数据库、运维等。更重要其实是软技能，我觉得至少应该具备有以下能力：发展全栈，不管是对公司还是个人，都大有益处。对公司的益处，就举个栗子吧。假如在App端有时候会出现调用接口超时的问题。在没有全栈工程师的团队里，一般的处理流程就是：Android或iOS开发人员在App端检查确定不是前端的问题后，就把锅丢给API网关，API网关开发人员检查日志后发现有部分服务的查询接口没能在超时时间内返回数据，各服务开发人员和前端、网关联调后发现是数据库查询结果慢，就将锅甩给了DBA，DBA经过一番排查之后发现数据库存在很多慢查询，最终定位到是因为很多SQL查询语句没有加索引。等这个问题解决，可能半天就过去了。而为了解决这个问题，至少投入了前端开发、API网关开发、后端服务开发、DBA等四个角色的人力。至少四个人加起来那就是两人日的成本，期间还有不少沟通成本。这不是个杜撰的栗子，而是在我们团队中真实发生过的事情。那么，如果有全栈工程师的话呢，一个人从前端到网关、服务接口端、数据库，一路自己调试跟踪数据，估计一个小时左右就能定位到问题，这就非常高效地解决了问题，也极大地减低了沟通成本。当然，最重要的还是对个人的发展如何。毕竟，公司并没有要求你一定要成为全栈，而你也不会是为了公司的利益而努力成为全栈，除非这家公司是你自己开的。而我觉得，个人发展全栈，最重要的就是为了应对未来，主要有以下几方面：要发展全栈，就需要全面发展硬技能和软技能，硬技能相对比较容易掌握，但最重要的还是软技能，这是全栈的根基，当然，软技能就不是那么容易提高的了。需要发展哪些硬技能要看从事的行业和技术方向而定，做移动应用和做VR/AR/MR应用所需掌握的技能栈是不同的，做人工智能、区块链应用又是另一套技能栈。就以目前做企业级应用的主流技术为例，主要会有以下技术栈：一个合格的全栈工程师并不需要掌握以上所有技术栈，但在工作中遇到问题时，如果卡在了某个你还不懂的技术栈，那你应该能快速学会该技术栈中能解决问题的那部分知识，然后解决问题。如果想发展成全栈架构师，那还需要掌握架构方面的技能，包括前端架构、API设计、负载均衡、微服务架构、分布式事务、服务器集群设计、容灾设计等等。优秀的架构师还需要深入理解业务，应该也是个业务专家。然后，如何发展软技能呢？就如我上面说的，软技能主要包括： 、 、 、 、 。这些软技能都需要通过长时间的实践积累才能掌握，以下我只提供一些实践方法的指引。要提高解决问题的能力，首先要懂得如何分析问题。分析问题要尽量保持开拓性思维，多角度、多方面地思考可能导致的原因。多思考，多分析，而不是直接就开干，才能不断提高你的思维能力。如果该问题不是急着马上就要解决的，可以尽量将所有想到的可能原因全部列出来，通过长时间的这种刻意练习，你会慢慢变成分析问题的高手，同时，你的思维能力会得到质的提升，经常能看到别人看不到的地方。然后，对推测得出的原因，一定要进行检查验证。有些人，一旦遇到问题，总是武断地下结论，认为是某某地方导致的，而不是先进行检查验证，这是一种错误的解决问题的思维方式。就算有90%的可能的确是某某地方导致的，也要先进行验证之后才下结论。之前，我带领的团队里就有这种固话思维习惯的人，出现了某个BUG，他立马就下结论说一定是因为XXX导致的，我也知道，可能是XXX导致的几率挺高，但我还是让他先检查验证一下再作结论，结果检查完发现是另外的原因导致的，啪啪啪，直接打脸。还有，更重要的一点就是，要去解决当前值得解决的问题。注意两个词：、 。有些问题，可能也是值得解决的，但是否需要当前就去解决呢？比如说，项目初期阶段，需要解决高性能问题吗？刘润在《》提到一个20小时快速学习的方法，怎么做？另外，古典在《超级个体》也提到了一些学习管理的东西，包括：功利学习法、找到知识源头、学习金字塔。还有一本书叫《关键20小时，快速学会任何技能！》，书中提到快速学习也是分为四步：学习方法很多，但我觉得最有效的还是 。我目前在团队中也正在采用此方法帮助团队成员提升自己的能力。良好的沟通主要分为两方面：一是理解对方的想法，二是让对方理解我的想法。任何一方理解出现偏差，都是无效沟通。首先，你要先理解对方的想法，这是有效沟通的第一步。当然，这里面的学问也很大。有时候，对方表达出来的只是表面的需求，而不是真正的需求，这时候，你要懂得如何去挖掘出他的真实需求。一般情况下，多问几个为什么就能挖掘出来。另外，多站在对方的立场看问题。其次，要让对方理解我的想法，这就需要你能清晰明确地表达出你自己的想法了。当然，前提是你自己脑子里已经有了清晰的逻辑。另外，作为技术人员，最容易犯的错误就是：与不懂技术的人员沟通时，依然使用技术语言。比如，你和不懂技术的产品经理谈UML、谈架构细节，这都不是合适的沟通方式。沟通时，一定要使用对方能听得懂的语言或其他方式。硬技能一般是比较难迁移的，软技能则容易迁移。所以，应该多发展自己的软技能。就算是硬技能，其底层大多也是软技能的东西，比如，Android和iOS开发属于硬技能，但底层的、架构模式、编程思想等则属于软技能，是可以迁移到后端开发的。所以，学习一门技术，除了要知其然，还要知其所以然，了解一门技术背后为什么这么设计，这才能将硬技能转化为软技能。不过，有一点需要注意，技能迁移不等同于把所有东西都从旧领域照搬到新领域，因为两个不同领域肯定存在一些差异性，在旧领域适用的东西，在新领域不一定也适用，甚至有可能适得其反。比如说，很多大公司的高管出来创业的人，会将他们在大公司的管理经验迁移过来，对创业公司进行同样的管理，但最终很多都失败了。这样的故事相信你也听到过不少了。所以，进行技能迁移时，也要清楚不同领域的差异性在哪里，要懂得判断哪些可以迁移过来，哪些不能直接迁移。全局思维能力是最难提高的，需要不断扩展自己的技能栈，要不断扩大自己的视野，要站在更高的视角看问题。我自己在这方面的培养主要就是多学习和思考如何才能做出优秀的产品。这就涉及到需求分析、产品设计、UI设计、技术实现等，每一部分都会影响产品的质量。因此，我每做一个产品，虽然主要还是负责技术部分，但都会习惯站在更广更高的视野去看待整个产品，也会经常性地给产品经理、UI设计师提建议。最后，做一个总结回顾。本文主要围绕三个问题简单聊了聊我对全栈的一些观点：最后，可以关注我的专栏：
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",萝魏紫,前几天我司另外一个架构师问我友商翻一倍价钱找我去为什么不去。我想了想，的确，这个问题似乎很愚蠢，翻一倍价钱哎，好几十万人民币了。不过我司对我有两个巨大的吸引力，除了工作时间地点比较人性化以外，就是我司的开发团队，实在太烂。待在一个开发团队极其烂的公司里面，加上之前服务于一个相似的公司，你能接触到无穷无尽的垃圾，无论是垃圾代码，还是垃圾设计，还是垃圾配置，解决这些垃圾，是我的兴趣爱好。我不喜欢按部就班的大公司，设计一套系统，跑起来，结束。我更喜欢面对无尽的火海，作为救火队员很有成就感，每解决一个LEVEL0 的issue，能带来很多的成就感。所以虽然一直挂着架构师的名头，其实一直在做首席工程师的事情，这个full stack developer或者说更高一级，full stack engineer，乃至于到更上面的leading engineer，我可以告诉你的和别人不同。每一步，都是我自己走过的，而不是听别人说的。首先我是计算机科班出身。虽然非科班也能出牛人，但是这些牛人必然在突破界限的时候，需要回去学习理论知识，可能不需要考试，但是理论知识代表了你的天花板。大学4年认真的学习，尤其是专业课的认真学习，带给你的是足够的积淀，这能让你很容易从繁复的技术当中跳出来，理解各种技术的真正结构，从而快速学会这种技术。当然，如果你现在已经错失了这个学习的过程，或者你根本不是科班出身，也不必要立即放下一切去学书本，记得边应用边回炉就好了。既然提问说的是how，那么路径很重要。成为一个full的过程当中，应该用一个词汇来表达：一专多能也就是说，你要先熟悉一套内容。比如我们JAVA，最简单的一套可以商用的是什么？JSP+Spring全家桶+关系型数据库。这是骨架。在这个背后，还带有JVM调优，容器配置，发布管理等一系列相关内容。这是最低配置，这全套你会了，那么恭喜你，你可以称为初级全栈。这一套，如果在工作当中，锻炼，根据我实际的个人精力，一般在3到5年左右。有了两个底子，即科班打下的理论知识，和一个初级的实战经验，接下去，基本上大块的技术，能以3到5个月为一个周期快速掌握。比如你清晰地知道数据库设计原理，也有mysql的实际经验。那么和oracle的差别，在语法上面大约只需要两周就可以掌握，更多的其实在于oracle特有的配置，你熟悉oracle的RAC，你就能很容易理解MSSQL server集群的不同点。这都是相通的。你掌握了jsp这种服务端渲染的技术以及用于解决jsp全页刷新issue的ajax，就很容易能迁移到那些客户端渲染的技术体系上。你了解了tomcat和jboss的容器技术，那么weblogic也好，docker也好，也好，乃至于后面的云虚拟，云serverless都是相通的。在这个层次以后，你基本上就已经是一个中大型开发团队的主力救火队员了，或者是一个创业型公司的技术一把手，这个时候，你将会遇到各种各样实际的问题，这些问题已经不像是上面所说的那些存在理论解的问题了。这些问题，都是只有经验解的问题，比如我曾经遇到过JDK1.4.2在某些极端情况下编译出来的字节码签名不对。又比如我也处理过突然海量数据注入数据库导致的索引fragmentation突变导致数据库变慢。又比如数据库连接池在某些情况下储存了坏连接，需要加上验证。又比如两段不垃圾的代码碰到一起变成垃圾代码耗尽eden资源。林林总总，都是需要你接触足够多的内容，才会学成的。再之后，你只需要关注自己的发量就可以了。
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",朱逸之,"极强的学习能力 + 良好的学习态度我觉得fullstack是穷人的专利, 跟""吃苦耐劳""这个词如出一辙,唉..."
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",xu eking,FACE BOOK把PHP转换为C++代码，CPU和内存的效率大大提高了。我们不防从结果倒推一下原因：如果他的程序员只是PHP的大神，而对C++一窍不通，那么节省50%CPU请求是不可能实现的。所以我得出的结论是：。淘宝从oracle转向mysql，Google抛弃C语言采用Go语言，Groupon美国站点从Rails迁移到了Node.js，阿里巴巴逐步完成了“去IOE（IBM小型机+Oracle数据库+ EMC2存储）”运动架构逐步转向了“MySQL+PC Server”，Twitter将其一些后端服务从Ruby on Rails迁移到了JVM上，京东商场后台抛弃.NET使用Java重写，PayPal使用Node.js重写其支付系统 ，Facebook iOS客户端使用HTML5重写后又换回原生应用……每次栈的迁移都有背后的原因，新时代的如果不能很快的切换过去，那无疑会给团队的转移增加阻力，这也就是为什么FB只招Full Stack Developer的原因-----FB也不知道下一次人迁移到哪个技术栈。FSD并不是要求会开发、会设计、会3D、会策划……而是要找出特定领域内，哪种技术栈更适合，并且要快速具备完整转移的能力。微信成功了，又开发了网页版；网页版完成了，又要开发桌面版。如果微信的架构师说我只会开发手机APP，那么难道要临阵换帅？
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",Rocko,应该来点具体的东西啊，上图，Github地址 
怎样成为全栈工程师（Full Stack Developer）？,"['成为全栈工程师一般的学习路径是怎样的?', '补充一下Full Stack Developer的定义和标准：', 'What is a Full Stack developer?', '，这样大家讨论怎样成为Full Stack Developer时不会偏的太远。', 'Is it reasonable to expect mere morals to have mastery over every facet of the development stack? Probably not, but Facebook can ask for it. I was told at OSCON by a Facebook employee that they only hire ‘Full Stack’ developers.  Well, what does that mean? To me, ', 'a Full Stack Developer is someone with familiarity in each layer, if not mastery in many and a genuine interest in all software technology...']",abei,我觉得所谓“”是自我设限，是格局小的表现。应该把这个概念升格为“全栈人”。这是一种什么样的人呢？他们自己思考产品方案，自己设计交互，自己开发(管他什么前端后端左端右端呢，全包！)，自己给自己提bug，自己运维上线，自己运营找市场，自己做客服听客户骂。总之就是脱离了低级趣味的、全能的人。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",B大调,唯一的出路就是把身体锻炼好，业余时间都花在健身上，只要你有一个健康的身体和健康的生活观，这个世界就饿不死人。其余的只需要顺其自然即可。当你躺在病床上，你向往的可不是什么程序员，什么总监，一个月多少万，你只要觉得自己能够活蹦乱跳的走在大街上晒晒太阳就心满意足了。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",硅谷IT胖子,"非常支持有个高赞回答：99%的职业，年龄增大后都没前途。没前途是绝大多数普通人的宿命，有前途的人也用不着等到老。我有一年短租过一个生物博士后家的房子，跟他们生活过几个月。生物薄厚40多岁，娃还小才6岁，生活很节省，节省到了极致。在排EB2绿卡。你说他40多岁了，一年也就几万、要养一家三口，是不是真实的生活？你说他会不会来知乎问“生物薄厚（海外俗称“千老”）年龄增大了出路是什么？”人学生物的就智商低？就比码工该死？就活该穷着？不也努力活着？工地上的力工、搬砖的，年龄大了出路是什么？混黑社会的，年龄大了出路是什么？码工不过是一种智力型罢了。本质上，绝大多数中产其实跟赤贫阶级都差不多，就是手一停，人就要挨饿。如果心态是把程序员当成世界上最好的职业，我觉得大可不必。其实太多职业比程序员好，只不过程序员适合普通人、穷人、“门槛低”而已；如果心态是怕老了老无所依、失业，不敢做程序员这行，那我劝你跟玩冷冻电镜去，不到老就没出路了，的确不用担心“年龄增大后”；换句话说，要是当了程序员还老无出路，那么干别的您大概率也是老了出问题；生活，本来就是很不容易的。人无远虑必有近忧，我的另外一种取反解法就是：现在过得不错，就开始担心远处的生活了。盛世总会衰败，大宴豪奢之后，往往飞鸟各投林，没事儿读读《红楼梦》，有些现实人总得接受。其实大可不必。先悲观到极点休克治疗下：你要是活不到“年龄增大”那一天呢？不就白担心了？有人说我抬杠，不见得吧？万一写程序累死了呢？万一碰上各种事故了呢？万一生病了呢？其次是，程序员年轻时好歹比其他的搬砖职业稍微多积累一点钱，多买几套房子出租，多存点钱在401K，分散投资，抗风险能力还是稍微比其他行业强一点；不要羡慕医生（注：美国），学医也很苦对吧，再说一个身份问题你怎么解决？我见过40多岁还在考的而且是另一半支持的身份，我自问没这种毅力和勇气；不要羡慕学法律的律师，这语言能力咱也没有对吧，要是当移民律师填个表一年赚几万，还不如当码工去；不要羡慕学商科金融的，能出头的都是人精，就是来做码工也是一等一的，更何况好多都名校出身的。我个人觉得，能当manager的，能创业的，终究还是偏少数。大部分码工，结局都是庸庸碌碌，但真正被逼得跳楼的、穷死的，其实也没几个。从好公司跳到烂公司，再从烂公司跳当contractor，总能有口饭吃。再实在不行了，给人当小工、打下手，去大华超市收银，端盘子，开货车，都是劳动，人能做，咱也能做对吧？更别说有的答案提到了：当老师，教编程，其实是有很多很多出路的。脑子没问题，双手又在，还能饿死活人？社会变化太快了，没人能预测。90年代下岗的时候很多人都接受不了：说好的养一辈子呢？最后这些人也得自己扛对吧。2008年我还听说“越老越吃香”，结果10年后DBA工作岗位大量缩水。会计能干到老吧？也未必，说不定就被软件取代了，还不如码工呢。报社稳定吧？结果现在谁看报纸和刊物？你说那些人要不要改行？变化才是主流，一成不变才是罕见。其实不是抬杠，我只是想说，很多很多的职业，其实都是相当不稳定的：跟经济形势、跟技术、跟资金、跟规定，都是高度相关的。不稳定有两种：看不到的不稳定，和能预料到的不稳定。很多人不慌，是因为根本看不到危机。我想，这个社会确定是往信息化方向走了。那些叫嚷“AI注定会自己写程序淘汰所有码工”的人我认为大概率是外行和新闻记者。信息化下，你说什么专业最接近、最不容易失业、最容易跟上潮流？当然是所有跟编程、数据相关的专业。其实最应该慌的，是售货员、工厂的重复劳动者、麦当劳翻肉饼的、前台等，这些工作早晚或多或少地被机器取代。关键在于心态：你把码工当成神圣的职业，自然受不了这种老了后的落差；你把码工当成修下水道的、抡大锤的，自然会觉得出路多了去了。我这几天也累得不行。现在这公司其实挺累，学东西不怕干活也不怕，主要是心也蛮累的。而且这公司是出了名的喜欢年轻人，我跟20多岁的一比，也的确是有时候略感力不从心。扪心自问，我自己也没有办法，我找不到更好的活计去做，好歹公司还管三餐不是？有时候也感觉累得不行，也很沮丧，但是睡一觉起来又精神百倍了。人生就是这样吧，总有你担心的，也总有解决不了的问题。就算你富有四海，也惧怕死亡，也惧怕失去。说到底，这题目跟程序员一毛钱关系都没有，“年龄增大”是永恒的没出路。我知道，程序员年龄大了怕累。所以我主张的是拒绝996，年轻时别拼太狠，为了仨瓜俩枣玩命996，和上了年纪怕没出路被淘汰的，大概率也是同一拨人对吧。当然，人华为人可能不这么想，人30岁就财务自由了，这也算公平；但你没拿多少钱还使劲拼命的，还在知乎号称自己最优秀可以弯道超车的，就是该认真思考一下了。只不过，人不要乱立flag，觉得年龄大了一定怎样怎样，35岁以上一定不会有技术成长了，30岁以上改行一定晚了，40岁一定刷不动题了。我技术进步最快的几年，反而是在30岁以后。技术成长这些并不是看年龄，而是更多地看机遇和运气，有时候也有个积累的过程。其实码工的出路，还是决定于社会的走向，这没人知道。风口上猪都能飞，关键是风来不来对吧。我个人的计划：自己再好好干几年，技术水平再上个台阶，然后找个著名养老公司一蹲，或是一个二线养老公司休息几年，到快40了再考虑是出来蹦跶还是换个地方蹦跶还是老老实实窝着。我心态很好的：当程序员，好歹让我过去的7、8年里一直过着好日子，而且还是我最年轻的时候，我已经很感激了；我要是当博士后，以我的脾气，还不得活活穷死、气死。人，要知足对吧？能选不太差的，也就可以了。===Update 1 Thanksgiving, Nov. 22nd 2018 ===为什么感恩节还能更新，笨，我在机场等飞机呢。昨天忙了一整天，临睡觉时写的，困得不行有点乱，前言不搭后语，谢大家赞，难道我没写清楚你们居然读明白了？懂行的都知道我为什么忙了一整天，也知道周一发生了什么，我们这还在收拾残局呢。简单来说，周一有一个人在火药桶旁边抽了颗放松烟……从我个人的角度写写30多岁码工的感受：的确是受年龄压力开始增大了。比如二十多岁的小年轻，可能什么都懂，对组里的东西很熟悉。有时候我也怀疑自己是不是智商不够，是不是自学能力太差，是不是基础不行，别人是不是都玩命加班，你知道30多岁的人那种危机感。后来其实想一下就明白：小年轻之所以懂，是因为入组早，当年亲手搭建过那些东西，当然熟了，我自己搭建的东西也是熟得不行啊。跟智商、能力都关系不大，反而是机遇、运气占大头。所以年龄这东西，不是线性的，没必要看太重。周瑜15岁当了东吴的水军都督，20多岁就当CEO、名满天下了，某胖年少，也是80后二十几岁就是世界第三陆军强国的霸王了，敢于对阵罗马帝国了。跟这些人比，我们某乎的是不是都该排队跳楼去？压力一直是有的，只不过看你在不在乎。我有个朋友说得好，大概意思是：压力伤不伤身，在于你怎样认为：你认为压力伤身，它就伤身；你不在乎，可能就不伤身。所以，我琢磨着人活着还是得跟自己比。总跟别人比，总看别人年少有为自己一把年纪还在吭哧吭哧地写代码，当然很痛苦。但我自己就安慰自己：人都名校出身的，还有不少，我特么一个改行的烂校毕业生，混迹多年才能跟人站同一个位置，也算很正常了。为什么我们这个时代的人容易感受到压力、对比和焦虑？作为80后，我觉得我们的时代其实很特殊：从小到大，目睹了奇迹的诞生，跟着奇迹成长，所以我们潜意识里，是认为奇迹是正常的。我在90年代的小时候，的确能感受到几乎每年都会有大量新东西出现，很容易让人误解这种上升应该是永远持续的。这种烙印影响很多人一生。不光物质上，身边谁谁80后创业身价百亿了，谁谁发财了谁谁暴富了，再加上媒体炒作推波助澜，让每个不成功的人都在担忧自己、担忧未来。其实，换个角度想，想想后的日本普通民众，失落20年，不也是正常过日子么？我在中西部住的时候，能感受到那种静止之美：地广人稀，慢慢吞吞，芝加哥房价10年不涨，难道就不是正常的生活了么？一定要拼命工作、一定要房价飙升、一定要每几年就工资翻倍，才是过高的要求了吧？所以我是觉得，作为普通人，其实能做到几个小目标就算不容易了；甚至我觉得，我们普通人对社会的最大贡献就是不给别人添麻烦。有时候焦虑了，看看自己的小目标就好。有人私信问我现在改行CS晚不晚。我觉得这不决定于我说，我说的都是XX，而决定于：第一，你有没有其他更好的路，如果没有，就是告诉你CS会波折、衰落，你也得学对吧？第二，在于你的追求、能力和目标，是找个舒服地方混日子，还是打拼。CS这产业已经极为庞大，瞎子摸象原理，100个人基本上有100种说法了，里面还夹着很多人云亦云，完全不知道自己说的是什么的。"
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",并非如此,出路很简单，来德国吧，，我在德国也干过三家公司了，曾经去过一个部门， 平均年龄45岁， 60岁以上的老大爷有好几位， 他们的技术水平相当一般， 不是什么大牛， 生活也十分惬意， 看到他们， 我有一种当年我妈在国企的感觉， 当然其实不仅仅使他们，其实我也差不多是半退休心态。我已经好几年没有加过班，在德国一般公司采用时间账户管理方式，也就是如果你每周40小时的工作时间，那么你如果干多了， 就叫加班，但是德国企业一般不愿意付加班费，所以多数希望那你能换休， 也就是说如果你因为项目忙， 每周工作50小时， 一个月以后， 你多出了40个小时，你就可以休息一整个星期，而且在德国， 什么时候休息都是你自己说了算，领导很少有不批准的时候，一年两三次超过一周的度假 是很平常的， 即便如此，每年还有很多员工连基本工作时间都干不完， 还欠公司一些时间，到了年底就要假装加班，在公司磨洋工。 我说的可是程序员，国内认为拼命的职位，在这里你的感觉会完全不同，尤其是进入德国的一些百年老店， 要不很多人都说德国有很多著名的养老公司。。在德国收入差距非常小， 当然是和国内相比， ， 除非你个人有重大贡献， 而且德国很少有快速成长的互联网公司，所以这里的人都看重基本工资， 对股票期权不感兴趣，和美国完全不同。我记得我刚毕业在德国工作时， 因为项目没有按时完成， 头都打算和客户谈延期了，我半夜加班到第二天临晨， 勉强将任务完成， 第二天一早，同事和头都惊为天人， 立刻要求我回家睡觉，休息，还问我需不需要同事开车送我回家，等我再次来公司的时候，领导单独约见我，我以为要表扬我呢， 原来是给我普法，。  同时建议我了解一些德国的企业文化， 什么狼性文化， 在这里是不存在的。在德国休病假是天经地义的事情， 基本上40岁往上的员工，一年修上十几二十天病假很常见，在德国大企业，谁没几个三天打鱼两天筛网的病号同事呀。 你们不要认为德国人懒散， 德国可是欧洲经济火车头，如果你去法国，西班牙，意大利看看他们吃午饭要花多久，就知道为什么德国的经济是最好的。没想到这帖子居然很受欢迎， 因此收到很多私信， 询问关于如何来德工作的问题， 由于数量较多，我就不一一回应， 在这里统一回答一下。首先告诉大家一个好消息， 。  其次我个人在德国已经十几年了， 所以如何来德的信息早已过时， 现在是信息爆炸时代，想找如何来德的攻略，应该很容易，我相信我们码农们就算代码写得一般般，至少上网收集信息的能力应该超过普通网民吧。我个人认识一些直接从国内过来的同胞， ， 德国对IT业开绿等也有好多年了， 不过德国对国内的吸引力一直不大， 估计是德语和待遇一般惹的祸。， 尤其是大城市，在德国人口20万以上就算大城市， 而且德国正在国际化， 英语基本上已经变成我们公司的第一工作语言，只会英语的同事越来越多，不过目前还是以老印为主。至于我是那家公司的看我资料就能知道。看，如果你真的想来， 其实一点也不难， 不过我要提醒各位， 我们在德华人讨论最多的，最感兴趣的话题恰恰是回国工作和， 德国正应了一句俗话， 。 好了我要去带娃了:)_____________________________________________________________________________________又收到很多私信， 
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",朝阳区吃瓜群众,每隔一段时间总会冒出这种问题，怒答之！我今年33岁，创业失败，然后网站上投简历，按网上的说法，我这种即将35岁的人是会被歧视的，那为嘛阿里没歧视我，京东没歧视我，美团没歧视我，货车帮没歧视我，没歧视我，够用云没歧视我，中国电信研发中心没歧视我，更不用说其他一些规模相对小的公司了，都给了面试机会，而且收到了不少的offer，最终决定加入某知名电商平台。如果我的经历没有说服力，可以去看看，也可以去网上看下阿里前端专家，这两位大佬不都是中年以后才去了现在的公司，而且也都40了吧，不也干得热火朝天的。这种问题类似于网上有一篇流传度很广的文章，大意是说如果一个30多岁的职场人，找工作时还靠简历，而不是靠内推或猎头，只能说明你的职场很失败。我现在可以很大声的说，这纯属是放狗屁，我严重怀疑写这篇文章的人不怀好意，有可能是猎头散播的，好让大家都去找他们！关于大龄程序员的年龄问题，。试着问自己下列问题：如果到了30多岁，知识和经验没有系统化，代码重构和架构不会，不能让写出的程序更优雅、性能更好，不知道各种框架的适用场景和优缺点、不知道一些解决方案背后的原理，技术水平也跟工作二三年的人水平差不多，请问你是老板，你会不会要自己这样的员工？不要把年龄做为停止学习的借口，年纪大了，家庭琐事多了，学习时间的确少了，但是也不可能完全没有学习时间。新事物是基于现有问题产生的解决方案，比如你是前端工程师，以前你项目迭代到一定规模，你会为不能实现组件化标签调用而困扰、会被数据与DOM的关系所烦恼，会被嵌套的搞疯，所以有了react，有了，有了webpack，你会觉得这些技术的出现简直是水道渠成，学会了react，再学vue，可以举一反三，这些技术只需要你投入几十个小时来学习，就可以上手并在工作中带给你巨大的便利，你还要找借口，除了懒、不思进取外，我实在不知道说什么。至于发展路线，不想做技术了，如果具备转岗的一些潜力和能力，都会给转岗机会，当然薪资会降，因为你在新岗位上的经验不像你在老岗位上那么丰富，凭什么按老岗位的工资水平来付你新岗位的薪酬？下面是传统软件公司的发展通道：互联网公司的技术人员，到了一定级别后会有对应的管理级别，干个几年后会开始培养你的管理能力，让你往管理方面转。如果不想做管理，就往更高的技术层级冲，表达能力好的，可以做新人导师。    如果我是楼主，我会选择去阿里，眼界和获得的人脉不一样，在阿里P6一抓一大把，但是出来外面的公司还是很抢手的，只是薪水开不了阿里那么高而己。不管是不是大厂出来的，除了上面提到的发展通道，还可以干这些职业：     就算上面的干不了，不还可以去开滴滴，开便利店，做销售吗？哪会饿死？内心所担心的是怕去干其它工作，工资没程序这么高，或不体面罢了。只要愿意降低期往，降低消费水平，哪有活不下去的理由呢？      什么年龄大了，身体吃不消，得转行。请问现在除了公务员和国企可以混日子，哪还有轻松稳定的事？律师轻松吗？外科医生轻松吗？企业老板轻松吗？阿里CEO轻松吗？谁不是一把年纪了还顶着巨大的工作压力在前进？不管哪个行业的从业人员，如果不按时吃饭，天天吃外卖、吃洋快餐，懒得起来走动，懒得花半个小时去运动健身，身体哪会好？年龄大不是问题，就怕年纪大一点，生活习惯还差，以年纪大为借口混日子就是大问题了。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",慢慢走,这篇帖子我已经反复看了三遍，我才决定花点时间来写个人看法了。今年我28了，工作六年，刚好思考人生的时候看到了这个问题，本来我这个年纪也许不该来回答（程序员年龄增大后的职业出路是什么）这种需要一定职场经历后的问题，在真正大龄码农面前我还只是菜鸟一个，不论是技术或者年龄亦或者阅历。但是近期公司的裁员让我一下子回到现实，虽然找工作目前还挺简单，工资任然还在上涨，但如果以后公司裁员到我或者直接整个公司挂掉了呢？难道三十多岁的时候还需要跟毕业生一样拿着简历到处投？甚至最后投无可投，想想就觉得无奈。于是我也在网上到处找类似码农年纪大了怎么办的、出路是什么类似问题。看到了这个回复，看到了前辈们给予的答案，无外乎/keep passion/keep working hard，看完后的我突然思维觉得陷入了死循环，因为我大概率觉得我年纪大了真的做不到这三个keep。和知乎大佬们不一样，我是家庭贫穷、中专毕业、还在超市打过工，21岁决定搞网站开发的码畜，所以一直以来我就是最底层的人员。年轻时无数次的逃课泡网吧，终于在生活所迫的时候决定用电脑赚点生活费，不然我就要饿死了。结果程序员这个工作一干就是六年，期间真是什么类型开发都搞过，因为我就是抱着能混口饭吃，不需要花家里钱的心态去做码农的，所以完全没有职业规划技术积累，属于喜欢什么就做什么，六年期间做过网页、桌面、游戏、直播等，语言和工具换了一堆（js/c++/c#/python&&wpf/unity/ue4/eclipse/ios），每次都是熬过了一个艰难的学习期，之后就是写代码换酒钱。写过的网站没人浏览，做过的软件用户量一台最简配的云服务器都能负债，做过的手游月流有一千万，但是一分钱也没分到，做的直播软件就没几个人用，更加没有分红什么的。熬了六年年薪勉强最高也就20w，这点和知乎大佬们差了不知道多远。因为原生家庭穷苦，所以我除了必须品之外，基本省吃俭用（当然和几个交心朋友聚会AA还是需要的），身上搜干刮净在老家买了套小房子（全款），本来前两年我以为自己已经走上了正常人的人生轨道，不必像年幼一样穷苦生活了，未来会变得十分美好，但是大环境的原因导致我被动“跳槽”。因为买房手上已经身无分文，同时常年的加班让我身心疲惫，加上失业让我雪上加霜，我突然觉得人生好多事情十分不确定、自己预期的未来也变得扑朔迷离起来。所以这段空窗期我就来网上看大龄码农的人生轨迹，希望得到一些参考，很失望，查了一周的网页，看了无数的回复，得到的结果无外乎总结起来：three keep，而且都是很多一帆风顺的码农总结出来的。基本上他们的人生的道路一帆风顺，碰到的职场危机也有家人和朋友的支持，同时也有无数种退路，而且还能凭借自身从小到大对知识的积累和坚韧的毅力渡过难关，甚至能达到更高峰。但是还有我这种情况的一小众码农，我们学历低微、我们技术积累浅薄、我们年纪也会增大、我们身体更是一天比一天差，最重要我们是最看不到希望的一群码农，真正到了34岁那个年纪，我们肯定是第一批被淘汰的人。到今天为止思考了两周，同时也失眠了两周，我给自己做了最坏的心理预期和未来打算，就是沉默着工作，节省着生活，能存一点是一点，距离34岁还有7年，同时尽可能避免高强度工作，因为身体垮塌的话，我才真是陷入了深渊，基本死路一条。可能有人问我老婆孩子怎么办，我只能说我这种真是生而为人我很抱歉了，如果我有老婆孩子，那注定跟着我受苦受累。最后总结一下：34岁以后，如果我没有被淘汰，同时中国劳动环境整体质量提高，我还能有一份稳定的工作的话，我就从新考虑带有正能量的人生规划，同时走上正常人的人生轨道，希望家庭辛福美满。34岁以后，如果我被淘汰了，那我也认命了，回老家过着基本生活，在网上找些或者独立开发，亦或者写写小说（因为我初三那会就写过小说，苦于那个年代没有渠道无法发表），甚至可以出去弹弹琴吹吹笛子卖唱（小学时候学校学过，学校组织的不收钱，真是年幼时的奇遇啊）。总之就是干一些自己喜爱的事情，和日本那些“低欲望隐族”一样，维持基本生活，做自己爱做的事情，了此残生。这里将我自身情况和未来打算写出来，就是给大家一个最低的未来生活预期标准，因为我觉得基本上没有人会混的比我更差了，而我的情况则能看得到34岁后混的最惨的码农是什么样子。4月7日晚10点，我现在每天坚持背英语单词在，因为看到一句话说迷茫焦虑的时候就学习，每天早晚背单词，其他时间写代码糊口，希望今年能背五千左右单词。4月26日午13时，我看了下面很多评论还有给我的私信，这里集中回答两个问题：1.我是怎么入行的？好些回复都在问我怎么中专入行，还有很多私信问我的。我只能说我已经被逼到绝路了，我09、10、11这三年在外面打工，食品厂超市搬货等，太累了受不了了就歇一段时间换个工作。后面实在扛不住这种生活了，住乱七八糟的大通铺，每天起早贪黑还睡不好，人瘦到110斤，我长期体重一般是130-140之间，裸身高173，干了两年后有次体检发现裸身高只有171，不知道是不是因为长期搬货上架子压矮了。因为实在是看不到希望，12年开年我辞了工作和几个认识的朋友到人才市场准备找个销售干干的，瞎逛的时候看到了有个公司摊位招聘ios开发，入职发全套mac那种（后面才知道是达内培训），当时只是感觉那两个招聘官坐在mac前面聊天实在太惬意，我感觉这种才叫工作。当然那天我都不敢上去问，因为实在太相形见绌了，下午回去后我和朋友去网吧，我朋友还在想找销售的事情，我则是在网上查关于程序开发的东西，看到的都是培训班，而且少则1万2多则2w多的学费我根本拿不出来，我就百度查了怎么自学程序开发，百度上很多都是说的网页开发桌面开发，估计也是因为那个年代就这两种开发比较大众化，我就买了flash js html css winform程序设计相关的书，在宿舍天天早上七点起床看啊写搞到晚上十二点，后面觉得html css js比较能快速成型web页面（主要也是我那个笔记本配置太低，也就搞搞页面制作比较流畅，做其他都卡得很）。后面花了一个月专门学这个，还做了个十几个本地页面，加了几个flash动画，做的还算是比较炫，然后准备出去找工作。那时候找工作不像现在这样把简历更新下往猎聘、前程、boss、拉勾上一放就等电话。我都是跟以前跑厂跑超市跑搬货一样去人才市场一个个公告板记了几家做web的公司，然后一家一家带着笔记本上门问。第四天就找到了一家网络公司，试用期工资1200还没我在超市干着高，一进去公司老板让我做一个甲方公司展示的web网站，我就顶着上去干了，这一做就做到通过了试用期。这家公司就是一家纯粹的外包公司，几乎任何外包只有有钱就来者不拒，在公司一年里，我做过web、winform、三维仿真等，我还有两个同事做的东西又是其他的领域，总之杂得很。老板也是个实在人，接包做事发工资不拖拉，我不会的给我时间学，我工资低做的也是那种简单的小外包（甚至有一周还做了一个大学生的毕业设计）。从这家公司走的时候我工资也3000了，因为实在是想找一家正规的it公司（或者说当时我觉得自己翅膀硬了，而且在这家外包公司基本上9 10 6，周天看外包那边催不催，催就来加班，也是太累），之后跳槽到一家游戏公司工资就7000了，也算是正式开启了自己的码农生涯。2.很多建议我找个国企事业编考个公务员什么的，我觉得对于我来说很不现实，我未来最多也就是在职业生涯结束前在不同的小公司跳来跳去而已。现在我集中精力学习英语，争取未来几年阅读口语能达到正常交流的程度。至于不停的钻研技术，我暂时放弃了，诚如其他几个回答，我审视了自身，我就不是那种极端热爱编程的人，我只是一个生活所迫的人走上了这条道路而已。而国内环境就是一个内卷的蛊钟，码农成为技术专家这类人又是一个极小的比例问题，所以我现在内心也接受了未来大概率被淘汰的命运（技术达不到大牛程度，加班也扛不住年轻人），现在只想通过英语提升一下差异化优势，如果以后有国际化协作趋势呢？可能英语比较好相反有了一点优势，这是我一个英语不错的老开发同事给我的意见。 
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",大龄程序员,32岁就嫌自己老了，题主你让我这种40还在编程的老家伙情何以堪……题主和我有相似经历，数年前拿过腾讯T3-2的offer，互娱，没去。现在自己创业，拼搏在第一线，工资不多，但干的挺开心的。这辈子能做自己喜欢的事本身就已经很成功了。我要编到看不清屏幕的那天。……
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",温酒,要是有出路，轮子哥用得着去美国？当然了，我不是说完全没出路，但是你要明白，中国内卷的程度。有多少企业，愿意花大钱养Donald Knuth？有多少企业，愿意花大钱养Peter Norvig？有多少企业，愿意花大钱养Guido van Rossum？是，他们是一把年纪了还在写代码。是，他们的老板是愿意花大钱养他们。然而你是他们吗？不是。你的老板是他们的老板吗？不是。你的企业所在的环境和他们一样吗？不一样。大多数平凡的，普通的，容纳量惊人的普通企业里，老板要什么？要大牛吗？不要的，他们要的是快速出货，然后比竞争对手早一步抢占市场。这是内卷社会的规律性，你们讲来讲去迷信国外企业和国内几个少数企业关键位置的大佬，自己骗自己很开心吗？最后我跟你们分享一下一个情景，在国企做甲方，然后开招标会，来了个乙方的售前。两人相逢一笑。“你好，我以前是写代码的。”“你好你好，我以前也是写代码的。”然后送你一句话：
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",沈世钧,"人过了35，且不是说社会上赤裸裸的年龄歧视，就拿当前中国的劳动氛围来说，动辄就是996的工作强度，就算这些公司能够给你offer，以35岁之后每况愈下的身体状况，有几个人能吃得消，只怕是有命挣钱无命消受。而那些以为混到管理层就安全了的想法，也真够naive的了：底下的兄弟都996了，你好意思让兄弟们在前面拼命，你一个人回家老婆孩子热炕头？你要敢这么干，只怕老板不让你分分钟滚蛋，底下兄弟的吐沫星子也早把你淹死了！所以说“中年危机”的局怎么破？从个人来说很难，因为这本质上是一个社会问题。我们所能做的就是等待，等待在或远或近的将来社会劳动环境会变得更健康，更遵守法制；等待将来整个社会都消灭了恶性加班，消灭了非法解雇，消灭了年龄歧视，消灭了…。只有到了那一天才是“中年危机”真正破局之时。尽管我相信社会的未来一定是美好的，“中年危机”一定有破局的一天，但活在当下，我们依然可以做一些事情，来最大限度的降低危机对我们的冲击：1.35岁之前尽量进入一个温和的公司，避免盲目的跳槽。正如我前面所说的，35岁之后身体机能急剧下降，高强度的工作（例如996）对健康的伤害是巨大的。在这种强度的工作压力下，即使公司不裁你，大概率的自己也得离开。因此，未雨绸缪，35岁之前就要可以考虑跳槽到那些工作环境健康的企业，例如外企，国企，事业单位等。而且要尽早，不要说过了35岁再行动，毕竟所有的企业都不是慈善家，都要盈利，自然都钟爱年轻人。过了30岁，就要收敛下性格，不要一言不和就跳槽。我们都知道人年老了要靠养老金生活，其实年轻的时候，工龄也是一个巨大的财富。如果你能在一个公司服务10年，即使公司有一天要裁你，按照劳动法n+1的赔偿标准，在北京就会有40万左右的的赔偿，这笔钱足够一个家庭3年的口粮了，3年的时间也能够让一个中年男人重整旗鼓再出发了。职场上我见过不少35+的暴躁男一言不合就跳槽的，但大部分的境况越跳越不如前：新公司、新人、新环境，动辄6个月的试用期，于是每日战战兢兢，日夜加班，可谓疲惫不堪。甚至你一个中年油腻男，连中午吃饭年轻人都不愿意带你。在老公司，也许有小人伤害你，算计你。但谁能保证新公司就没有小人算计你呢？毕竟有人的地方就有江湖！2.转行我在这里说的转行，并不是说今天你是一个做软件开发的，明天跑去开出租车，而是指在当前的垂直行业内，转换一个方向，这样既能发挥多年累积的行业优势，又能平滑的过渡到新职业，一个可以想到的例子就是""软件开发转it讲师""。目前社会上大有人人转码农的势头，看看遍地开花的it培训机构就知道当前的培训市场有多火，it培训师的需求自然也就水涨船高。而且和软件开发不一样，软件开发基本上好的就业岗位都在一线城市，但it培训机构即使在二三线城市也有很多，所以说对很多年轻时在大城市奋斗，被高房价和户口所逼，中年想退守家乡的人来说，it讲师也不失为一个理想的选择。和软件开发更青睐年轻人不一样，it培训机构更青睐那些有名企背景，有丰富一线开发经验的资深软件工程师，道理很明显：换做你要参加it培训，你希望教你的是一个毛头小伙？还是一个沉稳的中年男子？道理不言而喻嘛！再看看各个培训机构的宣传栏，都是把那些有名企背景，有丰富一线开发经验的讲师放在最显眼的位置。所以说，从职业生涯可持续性来说，it讲师的职业线要远长于软件开发。3.主动降低生活的期望。“中年危机”是个病，但病因是什么？你问问那些挣扎在社会底层的人（例如建筑工人，售货员，保安），问问他们有没有中年危机，估计人都会笑你矫情，生活对他们从来就没有轻松过。说的不好听点，所谓的“中年危机”都是小布尔乔亚们臆想出来的。年轻的时候仗着身体好，加上被各种消费主义洗脑，出卖青春，挣些血汗钱，住着在大城市按揭的小房子，飘飘间恍然觉得自己已经实现了阶级跨越，成为了所谓的中产阶级。其实这一切都是自己的幻觉罢了。如果你明白了这一点，就知道你原来怎么活，现在依然可以那么活。原来你给孩子报辅导班，现在失业了，上不起辅导班了，那就不上了呗，或者自己辅导（反正有的是时间），谁也没说只有上辅导班的孩子才会出息（教育要是这么简单那就太好了）。父母病了，原来吃的是进口药，现在吃不起了，那就吃基本医保药就好了。看看你的周围，也没见隔壁的有钱人就比咱普通老百姓健康多少，快乐多少。所以说，在这世界上，如果解决了基本衣食住行，再往上的喜怒哀乐真的不是和钱成绝对线性关系，更多在于你对待生活的态度！4.和生命和解。其实那些遭遇“中年危机”的人，从另一个角度看你可以感到骄傲，毕竟只有曾经拥有过，才有所谓的失去，才有所谓的危机。从未得到，何谈失去？“中年危机”为什么在it业特别能成为一个话题，而很少听传统行业嚷嚷所谓的“中年危机”，因为传统行业的很多人从走上社会的那天起，危机（）就扑面而来。从毕业到中年都挣着卑微的薪水，生活从来就没有给过其希望，如果一定要说危机，那么这一生都是在危机中度过。"
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",dreamwinds,程序员老了是不是程序员还是看你喜不喜欢这个工作了。本人女，有娃，30+，外企写Python脚本。加班少，家庭工作兼顾;同事关系和谐，没有那么多办公室撕X;每天上班很开心，在家还要讨好婆婆，在公司谁都不用讨好。目前最大的心愿就是等我儿子认识英文字母了教他debug--------------------------------------两个月时间，第一篇知乎回答竟然到500了，好激动啊！跟同学聊了让我儿子入门编程的想法后竟然得到了她们的认同，大概码农的朋友圈里都是一群热爱工作的人， (๑^o^๑) 
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",SDX,大部分答案扯蛋，就没几个40+的我45+ 马工。做过三个行业化工计算机    一路来做过Unix，古董的Scounix， Solaris，AIX   数据库 Informix Sybase Oracle   BI 8种以上BI   语言除了 C & Java 基本都涉及到金融 （金融部）40+跳槽去甲方做回计算机我把话给你们说透，好多事物，如果了解负面因素，就明白了。扯淡，人家提的终身学习，例如医生，人家也要学习新知识，新业务，但是人家的学习曲线有那么陡嘛，你听说过做外科的，过几年就得学习骨科的新知识嘛。拿数据库来说，Mysql还好，Hadoop完全是新东西了。除非你非常热爱，我每五年更新一次技能，非常痛苦。例如我去年学前端，直接一口气从基础html学到，VUE。我就问一句，就我这水平，我学的新技能能给我现在的工资吗2. 转管理转管理，扯蛋，管理干什么的，想清楚再来，管理完全可以和技术没有半点关系。好多技术上去的，管理做的一塌糊涂。很多人搞不清管理做什么。我就举个例子，例如我在业务的时候，业务说每天需要输入市场汇率，希望自动化。如果有傻叉说可以啊，自动化很容易，哪，我给你们讲讲，其背景市场利率是由group treasury控制，但其使用是市场关闭利率，也就是下午4点利率，我们Finance要的是FTP利率，也就是早上11点开市利率，同时中国地区使用另外一套利率，还有11点利率是Bloomberg提供，Bloomberg也是算出来的，另外有些业务要用到Sibor利率，最后幺蛾子出来了，澳洲货币要单独算。决策哪，是通过银行ALCO委员会确认，然后才是自动化，才是修改下游的FTP计算策略管理干什么的，就是把这件定价策略涉及到整个银行，直接影响部门有4个，还要汇报给CFO，最后才涉及到IT的事情搞定。我就呵呵，我是个那个协调负责人，外面就是所谓的产品经理，血都吐光了，技术在里面的优先级真的太低。所以我在金融部的时候，IT和我关系很好，因为我每次告诉他们背景，他们听了，哦，再也不抗议了，回去做了，每一个决策都是漫长的过程，无数的讨论，无数部门利益受到影响，IT最下游了。所以有个IT说可以做啊，不难。我们通常都不理它，内心给他一个标签，这人水平太低。所以你们碰到业务需求时，要按几个步骤来然后提一个解决方案，IT做不了的，乖乖的写出来，不要说一句可以，可以个啊3. 转业务，稍微可行，只能去甲方乙方学业务，那个傻叉，我骂死他，我金融部呆了五年，前前后后面对200+女人，对于业务的感觉就是你欠缺的太多，你懂的只是皮毛，回去那个业务专业证书再来但是这条路确实适合岁数大的，没混上去的IT最后我的意见1. 提高软技能，口头表达，沟通，就是情商2. 提前学习管理知识，尽量走管理3. 90%做不了管理，那么就要精通，非常精通，必须是十年内不会更新的只有java c 必须精通，大牛级怎么验证，那个1t文件排序，自己写出来其他全栈，白痴提法，会用就行，java 开发去学mysql那是傻，想不明白说明你分析能力不够没事多看看前沿信息，尽量让自己的认知高大些.举个例子，假如我司要用，那么我司发展蓝图是什么，现有流程怎么优化，怎么提高团队效率，对我司业务有何帮助如果没帮助，用新技术就是傻。有的公司为什么用go，那就是明白人35+后尽量不要跳槽，提高自己的情商后，要学会分析领导如果发财了，去烧柱香，感谢老天保佑，别以为是你牛逼，你去了锤子试试财富自由你是阿里巴巴的oracle dba，你吹吹财富自由，二流角色了别学某些答复里的牛人，什么你没财富自由是你不行，你和20岁竞争是你不行我前司cfo特喜欢和我们讲故事，第一个故事是谁动了我的奶酪第二个故事是怎么当cfo第三个故事是work life balance妈的吓死我了，逃了。对了，我工作多年，很多人说我不错，我前老板认为我蠢货，你知道老板怎看蠢货嘛我是确实人知道自己的不足，就我这低级水平，在国外吊打同级别印度人，懂的人就知道了其他懒得多说了，多提高情商吧，像我进新公司，第一件事情是搞excel培训公司hr直接拍我的肩膀，你会得到回报的，嗯，不满一年全额奖金
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",天涯老此翁,比如刚入行的时候，觉得技术是根本，一技傍身抵过家有万金；做技术三五年之后，担心自己以后精力不济，所以向技术管理发展；做了一些时间的管理(CTO)之后，担心职业天花板，所以选择创业； 就算是创业之后，也会担心公司破产(高风险)，所以也做些顾问咨询工作，和很多朋友广结善缘，将来也是一条出路吧。然而，生活毕竟是一场马拉松，没有到退休那天谁不也不知道自己的职业道路到底会发展成什么样。事到如今，我对未来也还是有不可预知的危机感。至于，以我现在的阅历来看1：继续做技术是可行的(国内情况可能有点不同)，相当一部分可以继续做下去。          纯技术是技术，架构和产品也是技术。2：做技术管理只是一部分人可做的。管理牵扯的东西多点儿，沟通技巧很重要。3：做技术咨询，特别是行业上的技术咨询。4：创业是可行的(如果法律方便能有突破就更好了)。当然不鼓励，毕竟高风险，少数人可以试试      如今这个世界上，IT创业既不需要成千上百的人力资源、也不需要动辄千百万的厂房设备投资，基本上属于投资成本低、但是想象空间巨大的一个行业。=======================朴素的分割线=================我是2003年开始写程序的，如今已经入行15年了。今年我37岁，算是老程序员了。我做了5年左右的技术，这5年时间大部分都是技术，少数时间带项目。后来又做了5年左右行业应用，这5年其实有60%的时间还是做技术，剩下的时间分析需求、见客户，带项目（最后拿了PMP）。最近5年做技术管理和创业。其实也还是有30%左右的时间做技术。自己公司的开发一个人全包(也算是了)。 这么多年下来的积累，无论是技术细节、框架、行业应用等，都有一些感悟。见过了很多系统、开发语言、框架，见过了很多行业弊病，了解很多开发陷阱和误区，也认识了很多行业人士和朋友。自己的公司呢，刚做完融资，前景似乎可观，将来把自己的几个徒弟挖过来做技术管理和开发，应该我也可以轻松一些。现在业余时间给两家公司做技术顾问，带带后生们。也在一个研究中心做顾问，里面的IT开发人员基本上都是我一手带起来的。做技术、做分析、做管理、做顾问，过去的经验似乎现在体现出了很多价值，也不用太拼时间了。传说中的精力不济可以用经验和眼界来弥补；传说中的秃顶啥的都不存在，现在毛发旺盛，一月一剪都觉得不够；交公粮的时候也还没有力不从心之感；家庭生活更多了，也有时间发展自己的爱好了；各种尝试以后，就算不尽如人意起码也少了很多抱怨和遗憾。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",Milo Yip,昨天41，到了  母校做技术分享。从深圳到广州两个小时，在车上写了点代码，不是什么大架构啊等东西，只是改进了定点数程序库中的 exp(x) ，改用 range reduction 和 minimax 多项式近似。到会场就完成了。嗯，精确度不错，性能提升了几倍。借 WiFi，git push。噢，活动要开始了。讲了一小时，和同学们交流了半小时。问讲座中技术内容的不多，更多是问怎样来实习啊，实习会做什么啊，还有问版号有什么影响啊～我就做技术的，国家政策真的不懂啊。我们都继续来大搞招聘，不用担心吧。回想一下，这两年对我来说，工作上是有一些改变的。从解决项目问题，到现在涉及了更多前沿探索，团队规模也有成长。人长大了，还是可以把一些经验、知识分享给小伙伴们。有时候需要为项目起一个头，决定目标和研发方向。但无论年龄多大，需要学习的东西还是有很多，在专业道路上还是要继续尝试做技术创新。程序员在职业发展中加入管理职务，考虑的事情会变多，除了团队，要考虑部门、事业群、职业通道，公司以至公司以外。也要做不少招聘、培训等事情，要令更多人一起成长并合作完成大工程。年龄增大并不一定身体越差。我这两年身体越来越好呢，还鼓励同事们一起去做运动。管理上也要尽量令大家能有正常的作息规律。今年去了以色列游学，才知道很多以色列人是不退休的。如果我有一天退休，估计也只是从一种工作模式换成另一种。今年吃到小伙伴们亲手做的蛋糕，很惊喜啊，感谢！
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",燕小麦,说实话吧，没出路。不是程序员没出路，是年纪大了99.9999%的人都没出路。年富力强的时候没出头，指望年纪大了突然暴富，这完全不符合自然规律吧。总不能因为你做了程序员就想逆天吧。非说奥巴马、特朗普年纪大了才当上总统，可是，我觉得人家就算不当总统，在其他位置上也是跟总统平级的地位。举个简单的例子马云爸爸现在的地位肯定能跟省长比（不太了解政治，仅举例，勿撕）很多人把自己晚年过的不好、35岁后被辞退归咎为程序员这个职业，弱弱的问一句，当初选了其他职业就不会有中年危机了？说句不好听的，很可能就自己那点实力，做其他行业还不如程序员呢，有几个程序员敢说自己绝对没有搭乘互联网这波红利拿到这个薪资。谁敢说自己就是比生化环材这些从业人员能力强？（其实我不认识生化环材的人，就是知乎上老是黑他们我就举个例子，勿撕）很多人把行业红利，真当自己能力强，反正我脸小。前几天滴滴顺风车、自如甲醛这些事闹的沸沸扬扬，其实，中间还有很多其他事故，但关注度几乎不及这些互联网公司的十分之一。（这里不讨论生命价值与数量的关系这一哲学命题，勿撕）所以，我每次看到这些“30岁程序员出路是什么？35岁程序员被裁员怎么看？…”我就很烦。感觉就你们矫情。三十出头在哪个行业都算是正当年吧，如果感觉自己年纪大了做不了程序员了，美团送几天外卖了解一下？顺丰送几天快递了解一下？实在还觉得劲不够大，自如搬几天家了解一下？我认识的差不多都是30出头，硕士毕业也就工作了两三年，博士毕业也就刚开始工作，你这吵着要退休。你说怎么办？我说好好继续专研技术，你说我年纪大了，比不过年轻人。我说你去其他行业比如生化环材，你说他们更是累的跟狗一样，吃的比鸡还少。（没有对鸡狗不敬，勿撕）我说跟其他行业从业人员一样，年轻时辛苦点赚钱攒钱，年纪大了就省着点花年轻时的积蓄，你又说不行，我p6了还要p7、p8。我说年纪大了那去看大门吧轻松，你说拉不下面子，养不活家人。…世界上每一条路都有人在走，可都不是你的出路。为啥，主要是哪条路你都不想走，你只想直接躺着就暴富。讲真，这梦我也每天都做！ps：答案就是写给懂的人看的，不懂的我也不想解释。取关、拉黑悉听尊便，但千万别找我撕。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",Gavin,说说我的看法。一，信息化建设一旦开始，就没有倒退的可能。而且规模会越来越大。二，编程是一件需要技术积累的工作，也就是说非常需要经验。编程涉及的不仅仅是写程序，还有对系统的了解，对工具的熟悉，需要熟悉工作方法，总之经验很重要。三，由于许多大型项目的存在，所以技术不会迭代太快，就算技术发展变化了，也是迭代的一种，不可能凭空出现一种和以前完全不同的技术同时立刻流行起来，除非发掘了外星科技。综上所述，一个老程序员完全能够凭借其知识和经验，平平安安的干到死。所以身体健康最重要，多运动，多锻炼。肥胖才是程序员最大的敌人。所以出路就是继续做程序员。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",我不是毛毛,举个例子。我领导45岁左右，技术大牛，全栈的那种。平时和他讨论问题时，他既能够地讨论各种技术架构，业务逻辑，也能够low-level地讨论技术细节。我经常跟不上他的思维，脑子转得很快。他的事迹很多，比如，他可以在比特币刚出来的时候在部门聚餐的饭桌上侃侃而谈区块链技术，也可以在工作之余带他儿子一起淘宝买硬件散件diy一个潜艇放到湖里去。除去工作，他的业余爱好是研究摄影镜头。最近看他朋友圈分享了一个他自己制作的什么镜头转接头，据说是他逆向了一个私有协议才能转接，全球首例，嘚瑟了很久，就像二十岁出头的小年轻。我一直就以他为目标，幻想着自己大龄了也像他这样的状态，一直玩技术。我相信题主的周围也会有类似的这样的“大龄人”。-------------------------------------------以上是原答案。可能有人会觉得我这位领导本身智商和技术就是百里挑一，以他为例没啥意义。他的智商确实比我们普通人高一点，但是更重要的是他爱玩技术，有了这样的兴趣，再加上几十年的沉淀，才有如今的站在行业金字塔靠上层的位置。虽然行业人才总是正态分布的，只有少数人能到顶尖，但是技术阶层是流动的。我这个回答只是给出了一条我能看到的路，指向着技术阶层上层的流动方向，以兴趣为主导。如果只是把写程序当作是一份养家糊口工作，那在技术阶层的流动中，也许很难比得过其他更热爱的人。“程序员老了该怎么办？”我觉得并没有一个答案，可以使得所有程序员看了就解决这个问题了。其实大家所在的各自公司肯定也有我回答的这种“答案”，只是大多数人只想仰望着他们，同时抱怨着“坑少萝卜多”。技术岗的阶层流动相对管理岗的阶层流动真的单纯很多，并没有多少值得抱怨的。-------------------------------------------最后一次更新此答案，补充几句：1. 职业兴趣是可以培养的。2. 拥有职业兴趣的，永远都是少数人。1说的是可行性，2说的是现实，并不矛盾。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",视界云,都说女演员吃的是青春饭，实际上人家纵使老了还可以演妈妈、奶奶这类的戏码，而在互联网圈，尤其是对于广大大龄的程序员们，吃的才是青春饭，而且大龄已经被定格在35岁，这个在很多公司的技术人员招聘中也作了明确规定。这种文化来源于财富急剧积累、压力和责任也随之而来的互联网巨头们，彼此之间不敢懈怠、你追我赶、狼性文化，工作效率高低且不议，至少在工作时长的上不能输，大公司推广开来的加班文化，小公司本身就处于弱势地位，哪敢放松自己。如此一来，便造就了所谓的996、9116，985已然成了奢侈品。而加班对于大龄的程序员们，且不说身体吃不吃不得消、陪家人、照顾父母、孩子、家庭琐事也让他们很难像刚毕业的年轻人一样有足够的精力全身心的投入在工作中，而这也是很多互联网公司尤其关注的层面。当然这个不说普世原则，只是放在一般的场景下去讨论。人的精力毕竟是有限的，当你要把注意力放在家庭上，则意味着你将很难全身心关注工作。再者，随着年龄的增长，好奇心和学习能力其实本身就是一个逐渐递减的过程，年轻时候接触和学习新知识、技能和观念的能力更强。对于技术尤其如此，新的技术时刻在发生，一单与这个时代脱轨了、语言落后了，则也将意味着很难继续适应和满足当下工作要求。在自然界旧事物会逐渐被新事物取代，用一种美好的说法叫做“进化”。在互联网程序员身上同样如此，企业希望引进新鲜的血液为公司带来新的文化、知识、技能，保证自身的市场竞争力，而一个坑一个萝卜，则必将意味着老将终究是要逐渐淡出、退居幕后。这个主要包括两类产品岗位和管理岗位，相对应的职能便是项目经理和产品经理。这个在互联网圈其实也是很主流和顺理成章的操作，毕竟很多公司的负责人本身就是程序员出身，脸书CEO扎克伯格、小米雷军、腾讯马化腾、360以及无数产品经理的偶像微信之父。当然转岗需要做的准备工作还是需要付出一些代价的，比如项目管理需要学习管理相关的知识、产品经理需要补充和学习相关的产品工具和技能。此外，这个转岗还包括彻底离开技术体系转成职能岗位，比如销售类岗位，毕竟技术人员出身的销售相比较普通销售而言更懂得和了解自身产品的特性。刚才的转成自身公司的销售，那个内部叫做转岗，但是如果是外部环境而言，应该是归于脱坑或者说跳出来更为合适。跳出来可以干的事情很多，比如口才不错的、技术还行的可以选择成为培训师或者咨询师，为技术小白授课、解答职场疑惑、为企业提供决策的建议；或者文笔不错的技术人员可以成为自身的自媒体；年轻人时候的创业梦没有圆的，在积累了一定人脉、资源的时候这时候也可以重新去做梦，创业也是很多大龄技术人员选择走的一条路。这方面既包括继续做程序员，也包括纵向提升自己的技能，成为技术大拿。从普通的研发工作转为深层次的研发，当然这其中对技术的深度和能力便提出了更高的要求，这条路显然是难度极高的，但同时也注定了越老越值钱！其实不论哪种选择，等到35被大龄青年了再决定其实也太过被动，无论是程序员还是互联网圈的其他工作，都需要在保证身体健康为前提的情况下，不断的提升自身的核心竞争力，守住那颗好奇心，不断的学习提升自己。在条件许可的情况下， 有时候主动选择跳离当下的舒适区，也许未尝不是件好事！
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",谷溪,今年 30 了，也开始考虑年龄问题了。不过虽然 30 岁，但我实际作为程序员、以编程为业，也只是最近两年的事情（关于我的编程职业经历，在这个回答里写的比较详细：）。因此对编程这个职业的理解，可能还不如一些 90 后小朋友深，写的不对的地方贻笑大方，请见谅了。注：以下叙述，不局限于程序员，实际上包含所有职业。中国的程序员在市场中的地位，不客气的说，随便翻开《》里描写产业工人的段落，把这些一百年前的论断放到程序员身上，都言之凿凿：「的确，今天由于有了新的动力和完善的机器，棉纺织场的一个工人往往可以完成早先 100 甚至 250-350 个工人的工作。在一切生产部门中都有类似的结果，因为外部自然力日益被用来加入〔Ｘ〕人类劳动。如果说为了满足一定量的物质需要必须耗费的时间和人力比现在比过去减少了一半，那末，与此同时，在不损害物质福利的情况下，给精神创造和精神享受提供的余暇也就增加一臂。但是，在我们甚至从老克伦纳士自己领域中夺得的虏获物的分配方面，仍然取决于像掷骰子那样盲目的、不公正的偶然性。法国人有计算过，在目前生产状况下，每个有劳动能力的人平均每日劳动五小时，就足以满足社会的一切物质利益......尽管因机器改进而节省了时间，工厂中奴隶劳动的时间对多数居民说来却有增无已。」「工人生产的财富越多，他的产品力量和数量越大，他就越贫穷。工人创造的产品越多，他就变成廉价的商品。物的世界的增值同人的世界的贬值成正比．劳动不仅生产商品，它还生产作为商品的劳动自身和工人，而且是按它一般生产商品的比例生产的。」「因此，工人在这两方面成为自己的对象的奴隶：首先，他得到劳动的对象，也就是得到工作：其此，他得到生存资料。因而，他首先是作为工人，其次作为肉体的主体，才能够生存。这种奴隶状态的顶点就是：他只有作为工人才能维持作为肉体的主体的生存，并且只有作为肉体的主体才能是工人。」以上，并不是呼吁大家都去读马克思，我也无意挑起关于马克思的政治经济学的争论（也希望大家尊重题主和读者们，不要做跑题辩论），只是希望各位静下心来想一想，我们和百多年前的纺织工人的区别，到底是什么？伴随一个产业工人或程序员的老去，不可避免的是工作时长与强度的降低、工资的刚性提升（正常来说只能升不能降）、对家庭福利需求的增高（例如需要公司为家人购买保险）等等。而普通工人（程序员）的工作效率增长速度一旦无法达到其福利需求的增长速度，在公司里即成为累赘。换句话说，辞退你、换新人，对公司有很大好处，而这对资方来说是一个巨大的诱惑。多亏劳动法和近二十年来的互联网产业红利，程序员的处境已经远远优于当年的工人，不用时刻担心被辞退，但是当到达了一定年龄后，大多数程序员的个人价值已到峰值，收入封顶，但生活压力却越来越重。这是「年龄-收入」的悲剧冲突核心，也是大量程序员夙夜忧叹的唯一原因。而这种悲剧，集中式的出现在中国，其直接表现就是程序员的薪酬过低（例如在美国，普通工程师拿个十几万刀的 package 并不算天方夜谭，这种问题也就并不严重。）。所以程序员老了怎么办？唯一靠谱的解答，就是脱离自己的产业工人身份，直面残酷的市场食物链，尽一切可能向上爬，脱离这个「产业工人诅咒」。那么程序员以上的食物链有哪些？最直接的就是技术管理层、公司中高层，再次是资本方，最后是权力方。故而其方法也分外直接：要么争做管理层并获取股份、股权激励等非劳动收入，要么以资本进行投资、让别人为你打工，要么当个省委副书记、起码乡镇干部之类（这一条过于奇幻，当做笑话吧）。但凡符合上述逻辑的职业规划，都是靠谱的，区别仅在于风险大小。至于计算机领域的、乃至其他各行各业的技术专家，这是一类我非常崇敬和羡慕的人群，他们往往已经获得了超额收益，故而不在我上述论证范围内。我所说的一切，仅仅针对你我这样的普通职员。所以，程序员们，不要为自己掌握先进的知识而沾沾自喜，这个世界并不属于知识劳动者，所有利润最终将归属资本和权力…………和猫。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",tang,我42，目前还是在编程一线。感觉还能干好多年吧。对于编程，我感觉已经差不多到了那种手中无剑，心中有剑的地步。那些年轻人构造一些东西的时候总是考虑太多因素，我感觉用最简单明了的就好了。讲究的是一剑封喉，考虑那么多干什么。这就是经验。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",匿名用户,我27岁，也在思考这个问题。就是要一直往上升，不能停下来，举个例子，你一直停留在P7升不上去，这时一个比你年轻10岁的人也升到了P7，既然你们职位一样，说明能力一样，而你，又老，拿钱又多（每年有固定涨薪幅度），等裁员的时候，不裁你裁谁。所以真的要拼，要向上爬，爬不上去的时候，就要想想出路。比如，年轻时候有投资意识，年老时注意防范风险；比如，多接触业务而不仅仅局限于技术；比如，提高自己软实力，政治觉悟，表达能力；比如，提高自己在业界影响力；比如，多接触社会，现实点，以赚钱立业为己任。最关键的一点，要有忧患意识。不要以为程序员拿钱多，就可以做一辈子的铁饭碗。大家可以想想，不管是工程师还是经理CTO，不过就是工人包工头，从改革开放以来，有哪一行的工人一直吃香？随着生产力的提高，工人就是会不断被淘汰，哪怕当初待遇再高。这个世界，只有搞金融的，做生意的，玩政治的，永远不会被淘汰（除了自己作死）。所以请各位记得要留一条除技术以外安身立命的后路。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",慕课网,"在国内，很多人说程序员是吃青春饭的，一开始说过了30岁就得转行，后来又有人35岁是一道坎……看起来好像程序员真的和风尘女子一样，注定有朝一日会年老色衰不再受人青睐。所有的道路都通向天堂 只是要度过路上的痛苦时光 那一天我正走在路上 两边的荒草，比人还高 　　——，《月全食》真的程序员，敢于直面惨淡的人生和淋漓的鲜血，一定能够在荒草满布的岁月荒原里踏出一条自己的路来。其实别人说的话，听一听就算了，决定还得自己来做。面对别人的怀疑、否定、讥讽，我们只需要坚定地前行，做给他看。行动是最好的证明，多坚持一秒，未来就会不同。现在就实打实的来看看程序员的价值之路在何方。相当大一部分的程序员都在做应用层面的开发，所做的软件用来解决特定场景的问题，给用户的工作和生活带来方便。开发一个应用，经常会用到高级语言和框架，比如 C# 和 .NET ，比如 C++ 和 Qt ，比如 J2EE ，比如 Ruby on Rails ，比如 Python 和 Django ，比如 Java 和 Android ，比如 Objective-C 和 Cocoa Touch ，比如 JavaScript, PHP……太多了，数不胜数。应用层面的开发技术，很多人觉得门槛低，小年轻和富有经验的老资格差别不大，后浪会把前浪拍死在沙滩上，所以当新一茬韭菜长成时，老一茬就得玩完了。其实不是的，即便从纯技术的角度来讲，你对一个语言和框架的理解与把握程度，也会严重的影响开发效率和产品质量。什么样的人会被轻易替代？不求甚解，似懂非懂，干了多少年还看不透所用技术的本质，遇到问题仍然懵懂不解茫然无措，这样的程序员，注定很快被一大波正在赶来的小鲜肉挤下工作岗位。假如你对一门语言的各种特性都体察入微了悟于心，假如你对一个框架的机理和各种应用场景都有独特的理解和丰富的实践经验，那你几乎是不可替代的，你已经成了这个语言和框架方面的专家，价值不可估量。你的一句话就可能为一个项目节省几个月的时间，别人一筹莫展的问题到了你这里分分钟就搞定。所以，不要理会“能 Run 就行”、“完成任务就可以了”、“用不到学那么深干什么”之类的话，在你用完一项技术解决了一个实际问题满足了某个需求之后，继续钻进去吧，多学一点，深入一点，日积月累，你必然会与众不同。上班时没时间，那就下班了继续投入。记住，你的学习和研究都是为了自己，不是为了老板，不是为了项目，你唯一的产品就是你自己，而这个产品值得一辈子打磨。有一些技术，门槛是相对较高的，比如汇编语言，比如操作系统内核，比如驱动……正因为门槛高，回报也高。比如你熟悉 Windows 内核或 Android 内核，能够熟练撰写各种驱动，那找个月薪五六十K的工作不成问题，百八十K都不在话下。惟其稀缺，所以保值。大部分程序员其实不懂算法，都是用框架里的模块拼积木。如果你妙悟算法真谛，那你就超越了90%的程序员了，你的重要性和价值将不可估量。比如你精通图像处理算法，比如你精通视频编解码算法，比如你精通搜索推荐相关的算法，比如你在模式识别领域有建树……试看谁能挡得住你前进的脚步！在一个行业内持续积累，对业务的理解到位，积累深厚，你的价值是巨大的。不信你去浏览招聘网站上的岗位需求，99%都要求相关行业背景。所以，选择一个靠谱的、前景好的行业非常重要，只要这个行业能够不断发展、前进，你的积累就是有价值的，你自己就是不断增值的。特定领域的业务有一定门槛，比如金融，比如电力，比如电商，比如彩票，比如考古，比如医疗……在这些行业里，你是个业务门儿清的程序员，即便技术不是特别优秀，那也是价值无限的。究竟什么是产品意识呢？我认为产品意识一般包含商业意识、用户意识、创新意识和团队意识。 　　——《》 互联网时代，产品为王。有产品意识，懂产品思维的程序员，是最受欢迎的人群，也是最能做出好产品的程序员。商业意识通俗地讲，就是要思考这个产品能不能卖出去，好不好卖。这个一定是要有的，程序员虽然很少直接接触市场，但是一个产品成功与否，多数时候就是看市场表现，如果你能关注市场，从市场的角度来看待技术实现，接纳“技术为市场服务”的理念，那你更容易把产品做好。用户意识是最容易理解的，它是说我们要从用户的角度来思考这个产品该如何设计，因为产品好不好用最终由用户说了算。如果你在实现产品时也能站在用户的角度来思考，斤斤计较一个功能是否符合应用场景、是否与用户的行为特点吻合、是否贴合用户的使用习惯，那恭喜你，你超越了90%的程序员——大部分程序员是按产品经理和UI设计师的要求来实现产品。创新是人类发展的源泉，是社会进步的动力，同样也是产品的核心竞争力。但这里所说的创新不一定是那种颠覆性的创新，也许是把众多不被重视的细节做到更好，也许只是把另外一种理念引入到这个产品中去，也许是像海底捞的员工一样给用户不一样的感受，这些都是创新。创新意识是产品经理必须有的，否则，他永远不会有进步，产品永远也做不好。创新意识也是优秀的程序员必须要有的，否则他就不能把一个产品实现得很好，不能把产品的核心竞争力演绎到极致。当下已不再是孤胆英雄单兵作战的年代，我们要想做好一个产品，多数时候都需要一个团队。团队意识是必不可少的，你是和一帮程序员在一起，你还和产品经理、UI设计师、业务分析师、项目经理等等在一起，如果你能融入团队，并且能影响、促进其他人为共同的目标做出有效的努力，那么，！说了这么多，究竟你适合在哪个方向下功夫，还需要你自己来做决断。你可能一看便知自己适合做什么，那无需赘言。也可能你有些茫然，不要担心，我们都还有大把的时间，你可以去试着去做，发现不合适了换个方向再来，直到踏上适合你的路。作者：链接：来源：慕课网 "
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",pansz,只要你不将自己限制在高薪互联网企业，那么其实出路多的是。要知道程序员也分三六九等的。互联网行业尤其是互联网大厂，确实是工资高一些，性质类似的比如游戏行业也是。工资高，就意味着年轻人都往这个行业涌入。年轻人都往这个行业涌入，就意味着年龄大了更容易淘汰。但是，的程序员，工资并不高啊，也并没有很多人往里边挤啊，也同样，年龄大了并不容易淘汰啊。题主你要认清楚一个事实：一个公司能够不断淘汰中年人，必须是因为他对年轻的新人有很大的吸引力，也就是说能够给年轻人开出有竞争力的待遇。反之，如果不能给年轻人开出有竞争力的待遇，则这样的公司就得留得住有经验的老员工。如果你不执着于必须要拿P7的待遇，那么出路遍地都是。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",匿名用户,"说说二线城市程序员的规划吧。今年 27 岁，普通本科毕业，实际从业经验 2 年。正式工作之前自学了大半年，就算是从事 IT 三年吧。打算明年在职创业。在职创业什么意思呢？就是照常工作，业余时间写项目做产品，然后去推广去卖。这个后面会详细介绍。先说说答主的经历，你就明白了为什么要走这条路。这条路并不适合所有人，仅为相似经历相似梦想的人提供一个不知是否会成功的参考。大学毕业一年之前我从没想过会做技术，对自己的定位一直是创业者。大学期间也一直以这样的身份要求自己。虽然学的是网络工程专业，但心思并没有在技术上。正式开学第一天就找了个兼职，有个学长做了外卖送餐业务，跟学校食堂的窗口合作，送外卖到宿舍。我去当送餐员。干了一个月就成为了学长器重的""主管""。干了几个月，觉得自己能做的更好，就另立门户自己也做了家相同的外卖团队。再然后大一下学期创建了个民间社团，没在学校注册那种，带着一群大一孩子一起做项目。再后来业务越做越多，主要做的是给学生介绍兼职和教育培训招生。相当长一段时间内，学校学生的兼职 80% 都是我们团队介绍的。大四跟两个同学合伙开公司，主营教育培训和劳务派遣。后来因为合伙人之间矛盾激化离开了，但现在这个公司还在运营。。不知道做的怎么样了，也没问过。回顾整个大学生涯，在学校还是小有名气的，也过得很充实。毕业后去了某知名外卖平台做市场，因为业绩突出三个月就被提拔为大区经理。在职期间团队业绩均在华北地区名列前茅，还得过公司内部全国性的奖。干了快一年的时候，即将被提拔为城市经理前夕，选择了离职。因为以当时的情形推算，已经看到了天花板，看不到多么明媚的未来，厌倦了没有技术含量的重复性工作，厌倦了把精力花在人情世故上。对自己也重新做了评估，创业这条大方向不变，但换种方式，以技术为基础创业。大学四年加大公司的一年创业、市场经历，使我深刻意识到没有核心竞争力的创业太艰难。有些大学生所谓的创业就是开店卖东西，这些事情不上大学也能做，为什么不做些更有技术含量的？这四五年的带团队、做市场，让我具备了常人没有的市场和管理经验，以及敏锐的商业嗅觉。再把技术补齐，创业成功的机率岂不是更大？所以毅然决然的辞职在家自学编程。本来想报个班的，无奈没钱，只能在某宝15块钱买了套零基础就业班视频看。自学的过程很艰辛，尤其是辞职在家没有收入来源，面临的各方面压力比较大。还好最终坚持下来了，这期间换了城市，结了婚。在这里再次感谢在我转行期间媳妇的无私支持！16年底找到了第一份开发工作，到现在刚好两年。目前是公司移动端负责人。我也纠结过技术深度和广度如何取舍的问题，最后选择了先提升广度，因为创业要什么都会。我是安卓起家，也做过 ReactNative，Vue，小程序的项目，移动端和前端做项目没啥问题了，前段时间又学了 SpringBoot，SpringCloud微服务，Redis，Nginx，Docker 等后端的知识，最近几个月在写自己的项目，前后端都是一个人做。本来想做完上线运营的，但赚钱希望渺茫，遂打算写完开源出去。等做完这个项目，前后端就打通了，能独立写完整项目了，然后正式开始做产品。产品思路盈利模式大致想清楚了，虽然不知道能不能成功，但即使不成功又能失去什么呢？没什么可失去的，无非是少点玩的时间，技术也提升了，去推广时人脉也积累了，无论成不成功都有收获，都不亏。当然创业前期不能辞职，起码得有个稳定的收入来源。业务越来越多，收入也越来越多的时候可以考虑全职创业。这样一步步来，风险最低。嗯，这就是我应对 30 岁危机的方案。前路漫漫，路远马遥。不知道哪条路才是正确的，哪条路才是通往 ""成功"" 的大道。但若心怀目标，坚定信念，清楚自己在干什么，大方向不变的前提下不断地尝试，总会试出适合自己的那条坦途…"
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",匿名用户,真受不了这种问题。有人举Knuth等大牛老年程序员的例子，下面就一群人说，这些人这么牛，都是外国人，跟我有什么关系，你站着说话不腰疼。对呀，人家就是牛，你就是普通，世界又不是围着你转的，这个残酷的世界，就是只有各行各业非常优秀的人，才能过一个越活越精彩的人生，其他人就是只能凑合着过。你这样的技术一般般其他技能一般般的中国程序员老了，如果没有富豪亲戚留一堆遗产，那只能被淘汰惨兮兮，越混越烂，房贷高了搞不好要跳楼。就是这样，这就是事实了。答案已经是如此确定了，非要开100个问题问，给鸡汤你们不满意，给事实也不满意还要继续开题。可是问了也就是这样啊，还能怎么办呀？你们到底想要什么样的答案？？你老了就是会很惨，就是会被淘汰。就是会很惨，就是会被淘汰。就是会很惨，就是会被淘汰。说三遍。你说我不想惨，我不想被淘汰。好啊，这不是有现成的例子吗，无论是Knuth还是马云还是乔布斯，成功人士的传记都在，你去学习一个呗。然后你说，这都是成功人士，一个行业只有1%，我一个普通人，你跟我说这些没用的。行啊，问题谁保证99%的人会拥有幸福快乐的人生了？99%的人在这个残酷的世界里就是注定活得很悲惨。你该庆幸这不是古代，搁古代，99%的人活不到老就死了。你说不，隔壁谁谁谁考了公务员，现在舒服着呢每天吃香喝辣不失业。行啊，那你考去啊，公务员考试规定你不能考了？然后你又叽歪起来了，那公务员也不见得好啊，我还认识谁谁谁，每天加班十几小时一个月拿三千……那你说你怎么办吧，什么都不想做，既不愿意承担风险，也不愿意精益求精，指望着天上掉金山，你一伸手金子往你碗里掉。那就继续做梦呗。这种事情都想不清楚，你们指望知乎上的陌生人能给你什么答案？能怎么安慰你？没有勇气面对事实，那活该你一辈子普通被淘汰，不淘汰你淘汰谁？
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",Kent Zhang,"我也是大龄农了，我也写写吧。	起点低，毕业在一线城市做桌面软件（暴露年龄了），然后就是Web,一直跟着MS平台走过来，没错，就是一路都是做企业软件。这几年因为项目关系，技术上慢慢转向Java了。	期间回老家创业一年，把几年的 积蓄败光之后，也不想再到一线跟小年轻人挤地铁了，就在家附件一家制造业公司安顿下来，做ERP优化。其中遇到不少贵人，教会我很多软技能，不再是原来那个只会骗用户，怼测试的年轻小猿了。在这公司期间领导也给过不少机会，有机会带领过一个几人的小团队，算是当了一回基层小管里吧，但可能性格还是机会原因，还是觉得自己掌握一点硬技术才算是硬通货，毕竟管理没当上什么总监级的，跟普通码农没多大差别呀，裁员大潮来了，一样跟着一线技术码农收拾包袱走人。	在这个公司后面两三年负责生产相关系统的项目，过程中学到了不少排产方面的知识，还有机会接触到APS（Advanced Palnning and Scheduling, ）相关的概念和技术。当然，都只是皮毛，但这也算是一个比较少人去花心研究领域呀，觉得这方面可以深入花时间研究一下。在那里碰碰跌跌做了5年，可工资没多少长进呀，年纪不小，上有老下有小，中间还有银行老相好。不久有猎头推荐我另外一家类似的企业，做类似的工作，距离也不远，工资增长还算可观，就去了，也就是现在的公司。	有时候人的成长确实要看平台和运气呀。因为在原来公司做过生产方面的项目，在新公司也顺理成章地负责生产计划方面的系统了。毕竟这个公司对于一个技术人来讲，其平台更大，有更多的机会。很快公司也要上APS了，我也因为以往的一点点APS经验（毕竟所在的办公室，其它人真弄不清楚APS为何物，相对来说我还是有那么一丁点优势的。），也就参与进去APS项目。更牛的是在这里不像大多数企业一样，见到APS是一个难啃的骨头，就花钱挡灾，直接外购APS产品。而是计划自己开发，包括整个引擎都打算自己开发。APS中最难最麻烦的规划引擎方面，我们作业普通企业，是没能力自行设计开发的，里面涉及一些到目前为止都还算是前沿的运筹学相关优化算法，不是我们软件人能弄得出来。最后我们在高手的指点下，引入了一个开源规划引擎 - Optaplanner。经过一段时间研究，我基本上掌握这项目技术的方方面面应用了，用它来做APS项目的排程引擎，技术上没啥问题，更多的是要解决业务上的问题。	经过项目的洗礼（应该说是折磨），我觉得我将来不可能一直跟着所谓的各类框架走下去，毕竟IT这类东西，真的很难积累，更新太快，你才说学会人家就开退衰退了，你才把它灵活应用于自己的项目，那些所谓的大牛人已经在群里狂吹另外的新技术，原来被他们捧到天上有地下无的技术，又被他们骂得一无是处，人人都跟着去学新东西了，我们原来的投入又白费。老实说点题外话，对于我们做企业应用的IT人来说，我们还真对这种每天嘴里只用这些所谓的新技术跑火车的所谓大牛、架构师感到恶心，很可能他们连一行代码都没有试过，只会从理论上写几个所谓的选型方案，然后下面的小码农们就做得半点，方案成功了就是他们牛，失败了就是小码农位道行不够，get不到这些大神们的精髓。如果我也学着这类人混（事实上我也没这个嘴上火车的本事），感觉是不可能有啥可以积累的。相当着你拿着小年轻人几倍的工资，和比年轻人低得多的思维活跃度，去跟他们拼，那不科学呀。	于是我觉得应该在APS的排产引擎方面做更深入的钻研，毕竟这个东西涉及运筹学上的很多算法和相关技术，通过巩固理论和项目实践，其积累效率会比普通什么流行的前端框架，什么最好的消息分发框架更好。起码运筹学在优化这方面还是算是前沿课题，软件上面很多技术还是要跟着运筹学的发展才能有更好的进展。自己的项目实践经验在这方面会有更好的积累了发展空间。也算是找到自己的主攻方向吧。	至于以后的职业出路，目前所在的公司虽然也受到贸易战影响，而且还不小；但目前看来好像还没到没饭吃的地步，暂时还是能沉下心来作更深一层的研究。另外就是看能否做些积累，包括技术、市场动向和信息的积累。如果哪天真的被HR约谈了，也可以尝试一下卖点APS的建模经验来挣口饭吃，不至少让家里的老小忍饥挨饿吧。"
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",张云龙,1. 最好不要“接近P7水平”，建议落实一下，在大厂历练过可以知道“好是什么好”，将来带团队会有帮助2. 深刻理解自己的技术在服务于怎样一群用户，经营着怎样一门生意，利润从哪里来，做这种生意需要具备什么样的条件，行业现状如何，行业终局是什么3. 主动抑制焦虑，30出头正是好年纪，可冲可稳，想清楚了就好，风淡云轻一些。4. 外部没有太多值得借鉴的经验，环境变化非常快，很多所谓的过来人总结，其实都是不可复制的扯淡。个人目标可以大概定一下，具体的路还是要自己走。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",gashero,找个小公司当高管，但无论如何回不去大公司了。哪怕是自己创业，做个自己公司的高管。人年纪比较小的时候，入职各类大公司还好。面试官至少还会考虑一下成长潜力之类的。但年纪大了就不会有人在乎你的成长潜力了，但却总是能挑出毛病来。大量的普通人就不多说了，即便是、唐骏、李开复，无不如此。小公司里，自己有足够的决策权，做好做坏自己担着。混得差一点无非是收入比较惨。混的好一点，也许公司可以被收购提前套现。趁着三十多岁多锻炼一下管理技能，但技术能力也不能放松，时刻紧跟技术前沿。我见了太多太多的人，三十多岁做了管理就开始瞎胡搞，技术早早扔了，团队里无论是内部培训还是项目管理都是一团糟。于是各家公司之间被驱赶着来回跳槽，或者干脆把公司玩死拉倒。
程序员年龄增大后的职业出路是什么？,"['程序员老了怎么办，可有出路？', '本人今年32，在某机票公司架构优化组任职，水平接近阿里P7', '（3年前拿到过阿里P6的offer，因为不是核心部门，没有去）。', '比较喜欢搞技术，项目管理经验较少，带过几个应届生。', '在北京呆了8年，准备以后去武汉定居。', '因为年龄大了，体力越来越差，开始担心以后得出路。', '各位帮忙看看，以后该怎么办，年纪大了，是不是没有公司愿意收留了？']",自由飞,【已搬家】我馋老码农都馋得流口水了！可惜没有钱，要不然我组建一支“老码农”团队，专门在上解决用户提出来的那些疑难杂症。其实老码农的价值，行内人士都知道，码农码农，写代码的农民，农民伯伯种地要不要经验的？一个人刚开始写代码，和他已经写了一年半载，再以后写了十年的代码，他对代码的理解绝对是不一样的。“程序员35岁以后怎么办”这个问题，至少一半是伪命题，35岁以后该咋办就咋办，谁特么规定程序员35岁以后就退休或者失业的？！另一半吧，有些程序员确实是35岁以后就失业不好找工作。但问题是，哪个年龄的程序员可以保证他不失业？哪个年龄程序员敢保证他就好找工作？刚毕业被“2年工作经验”卡死的时候忘了？干了两年想跳槽升职的时候被“2年以上团队管理经验”卡着的时候忘了？想换个更有挑战的职位时被“具有大数据大流量性能优化工作经验”卡着的时候忘了……人要往上爬，一定是不容易的。35岁以后的程序员不好找工作，一定是因为在这个时候的要求高了，要钱多活少光鲜体面。被公司裁掉，本质上就是因为公司觉得你工资拿高了，要是你拿着和小年轻一样的工资，你看公司裁不裁你？怕是留都留不住！要是35岁以后的程序呀真的过得凄惨，找不到工作，我做梦都笑醒了，我得捡多大的漏啊！管饭就给我干活，我特么房子都卖了，有多少我养多少！！！不可能的……+++++++++++++++最后很煞风景的加个推广，两个QQ群：
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",算法一只狗,上有个特别的项目，主要是教授你如何写出一个”让人窒息“的代码。这样在别人接手你的项目代码时，可以充分恶心一下他。 这个项目截止到目前为止，已经有2.5K的星星数。看来很多人都在努力学习，如何写出令人狗血不止的亮眼代码了。 该项目一共提供了19个准则，项目地址如下，读者们可以根据自己的实际情况看看自己是否有中招了。| 如果我们在编写代码的时候输入的东西越少，那么就有越多的时间去思考代码逻辑等问题。其中Good表示写出了好代码。Good  Bad  变量和函数命名时进行混搭，把多种命名法混合在一起，显示自己的学识渊博。Good  Bad  没人看你的注释，为什么要多此一举呢？Good  Bad  更多时候，评论应该包含一些“为什么”，而不是一些“是什么”。如果“什么”在代码中不清楚，那么代码可能太混乱了。如果的一定要写注释，尽量使用母语作为注释，比如可以使用阿拉伯语，法语等作为注释Good  Bad   混合多种不同的格式，比如可以使用多个双引号，打乱读者的阅读逻辑Good   Bad   代码有多长写多长，这样能够充分说明你写代码的时候“文思泉涌”Good   Bad   不需要让别人发现代码的错误，只要没有错误，就没有bug。Good   Bad   使用全局变量，让你的代码更加适应全球化Good   Bad   多创建几个变量，以防万一你会使用到它，这样的代码才叫做未雨绸缪Good   Bad   如果对自己的代码有信心，就不需要去检查变量的类型，这充分说明了你的胸有成竹。Good   Bad   多构造不需要执行的函数，者能充分说明你有多个plan b。Good   Bad   多嵌套条件语句，写起来就很顺手Good   Bad   避免缩进，因为它们会使复杂的代码在编辑器中占用更多的空间。这样代码会变得不简洁Good   Bad   频繁更新依赖项，为什么坚持使用过去的版本，让我们使用最先进的库版本。Good  Bad   代码写得越长，说明你的逻辑思维能力也越厉害。所以不要把程序逻辑分成可读的部分。测试你的代码是很愚蠢的动作，说明你对自己的代码没有信心编写您想要的代码，风格不一定要统一，特别是在一个团队中有多个开发人员的情况下。这是“自由”的味道。不需要readme文档，只需要看代码内容就知道功能了。这样会使得项目更加简洁。不需要的代码，肯定是需要删除的，不然会占空间一夜之间收到这么多赞，受宠若惊。另外我自己开了公众号，更多的精彩内容，可以关注我的公众号：
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",Bookle,必须献出我前段时间写的verilog代码了编译器，他真的，我哭死，明明是我写的bug，她却反过来给我道歉。看来bug多不是我的问题，是编译器不够智慧。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",大狗,中文有一个生僻字写做「丨」，你看它像不像英文的”|”?我曾经在代码中拿它作为字符串分隔符，印度小哥调我的程序调了半个下午，整到怀疑人生/笑哭「咦？把分隔符传进函数怎么返回的还是整个字符串呢？（揉眼睛）难道这是数字1？（改代码）返回的还是整个字符串？（揉眼睛）难道是英文小写l？（改代码）啊！怎么还是返回整个字符串？（揉眼睛）难道是大写I？（改代码）不可能啊！怎么返回的还是整个字符串啊？（陷入了深深的思考和对自己作为一个程序开发者职业生涯深深的怀疑）」
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",阅读修身,当年我写用C语言抄下第一个课本上的hello world代码时候，加上括号一共五行，能够报出来十几个bug。我感觉这是程序对我的第一次劝退。我一直没懂得它的良苦用心。入行十年，方知，写代码就是一条不归路。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",蜡笔小新很高兴,reddit上有个话题，累了就去看看别人写的代码，学习一下 
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",洛天崖,不知道这回答有多长，点进去就死机了。。发点自己写的吧。。 提取码:5578
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",Jackpop,这是一段又”烂“又搞笑的代码....一道C++有关循环的练习题，需要输出下面这个图案：然而，代码是这样实现的：
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",破音特委屈,来看看吧～ 这种代码就是一坨屎，没人想动它。别问这是在干啥，问就是，做SEO！！！二更是希望大家引以为戒，不要写出这种超过5个if/elseif的代码，评论区也有朋友提到了一个概念叫“”，这是一种很常见的用来优化if/else结构的方法，用上面的代码给大家举个例子：原代码改写成表驱动法这样做的好处，可能在上面的例子中并不明显，但不难发现，这个map数组可以很方方便地替换成“数据库读写”、“文件读写”、“内存缓存读写”，而不用把这么大段的数据代码和其他代码混在一起。当你知道了“表驱动法”的概念，我相信下一次你遇到相同的开发需求时，绝对不会写出第一张截图中那种“应付工作”的代码，这就是，也是广大程序员都要经历的过程，软件工程中还有很多教科书上不会写的技巧。20年前，《》横空出世，Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides四位大佬把他们在面向对象编程的实践中，常见的23种软件设计模式总结并发表，对面向对象编程的发展产生了深远的影响。因为原书的学术性质比较浓厚，实际的阅读体验是比较枯燥的，后来我购买了另一本关于设计模式的入门书，《》，这也是一本我很多次推荐的书，封面是这样的：Head First系列相信大家都不陌生，真的算是编程入门系列丛书的天花板了，设计模式作为独立于编程语言的存在，需要有一些构架经验配合阅读才能有所感悟，比如设计模式中的“命令模式”，常被用在各种框架的CLI功能里。如果你了解过“命令模式”，那在你看到使用这种模式的代码时，会很容易上手进行扩展、改造。今年这本书更了第二版，借用豆瓣网友的评论说：不甘心做一个CURD程序员不妨读一读。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",冰封366,判断一个数是否为偶数。容易出bug，但是似乎也好修。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",PPFIRE,一开始不知道json是什么然后从json字符串里硬解析出数据
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",人类摸鱼精华,新入职同事的代码，写入数据库一直报主键重复，我帮忙定位，直接震惊我一百年，代码的精华提炼如下。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",叮咚,"include ""d:\xxxxxxxxxxx.h""并不是一个菜鸟写的"
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",MichaelFlea,某顶级游戏工作室出品的顶级fps的ui代码
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",Felina,"分享几个今天刚看到的代码片段，原文见回答后面的参考链接，作者Roedy Green分门别类地总结了各类写出烂代码的技巧，我找几个最乐的来讲下。编写无法维护代码的另一大秘诀就是伪装的艺术，即隐藏它或者让它看起来像其他东西。很多招式有赖于这样一个事实：编译器比肉眼或文本编辑器更有分辨能力。下面是一些伪装的最佳招式。下面包括了一些被注释掉的代码，但是一眼看去却像是正常代码。正确阅读方式如下：如果不是用绿色标出来，你能注意到这三行代码被注释掉了么？对于下面的定义可以把 ""xy_z"" 打散到两行里：这样全局搜索 xy_z 的操作在这个文件里就一无所获了。 对于 C 预处理器来说，第一行最后的 ""\"" 表示继续拼接下一行的内容。为了阻挠任何雇佣外部维护承包商的倾向，可以在代码中散布针对其他同行软件公司的攻击和抹黑，特别是可能接替你工作的其中任何一家。例如：当你需要一个字符常量的时候，可以用多种不同格式： ' ', 32, 0x20, 040。在C或Java里10和010是不同的数（0开头的表示16进制），你也可以充分利用这个特性。某些公司有严格的规定，不允许使用数字标识符，你必须使用预先命名的常量。要挫败这种规定背后的意图太容易了。比如，一位聪明的 C++ 程序员是这么写的：把某些系统同步原语安插到一些用不着它们的地方。本人曾经在一段不可能会有第二个线程的代码中看到一个临界区（critical section）代码。本人当时就质问写这段代码的程序员，他居然理直气壮地说这么写是为了表明这段代码是很”关键“（也是critical）的！如果你的系统包含了一套 NT 设备驱动，就让应用程序负责给驱动分配 I/O 缓冲区，然后在任何交易过程中对内存中的驱动加锁，并在交易完成后释放或解锁。这样一旦应用非正常终止，I/O缓存又没有被解锁，NT服务器就会当机。但是在客户现场不太可能会有人知道怎么弄好设备驱动，所以他们就没有选择（只能请你去免费旅游了）。下面是一位大师编写的真实例子。让我们来瞻仰一下他在这样短短几行 C 函数里展示的高超技巧。——Roedy Green《unmaintainable code》"
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",羊羊羊,我自己写的代码获取唯一字符串: Data()Data和Date长得太像了导致。。。前同事写的代码选择性别时间: sexTime我一开始看的时候甚至觉得没什么问题
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",威寧瑤海,
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",金鱼马,逆向某个程序，发现一大坨经过混淆过的代码尤其是手动去平坦化的时候……给张图自己体会
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",EricSun,以前随手写的那些O(n^6)的======现写一个呗。。。猴子参考自猴子排序新建一个，每个像素随机填入黑或白，然后读二维码，如果读不出或与拟生成二维码的字符串不同则重复
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",知乎用户WGpgmS,当然是顶级OS的顶级代码啦！
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",白云龙,三年前的自己写的代码，因为没考虑用第二次，所以完全没有注释的那种。烂就算了，还不能骂娘。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",小狗,大二跟同学组队程序设计比赛。一道题挺难，大家轮流上阵。到我了：…
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",木头秋千,我写的下一行代码
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",程序员志军,Instagram 从python2迁移到python3后，本以为升级后性能会得到提升，但测试后发现并没有变化他们最终定位到这样一行代码：在python2中str(字符串)和unicode是两种不同的类型，'True'表示二进制字符串， 而u'True'表示unicode字符串。而在 Python 3 中，'True'是一个unicode字符串，而要表示一个二进制字符串则需要在前面加个b，改成 b'True' 
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",小原原,车牌号识别程序，安徽的简称“皖”识别成了“”，逻辑不应该是在有限的集合里进行匹配的吗？cao
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",慕课网,人间真实：最烂代码排行榜大量的独特算法携带着个性的变量命名。复杂的项目结构夹杂着畸形的文件路径。缩进的大小无常孕育着注释的如也空空。格式的混乱无章包含着语句的从不换行。磅礴的代码森林延伸着无数条羊肠小道。编译的意外通过惊爆出黄色的感叹多条读完此榜，希望不要影响到大家伙的代码观！……从今天起，我的代码信条：1、没有最烂，只有更烂！2、只要能跑起来的代码，就是好代码！第十名：巧妙避开起名的烦恼第九名：拼音、英文混血函数名第八名：我就不信对不齐第七名：这是一段只能活三年的代码！第六名：if很容易成为烂代码的重灾区第五名：没有拼音八级是看不懂的第四名：神奇的组合方式第三名：重要的事情要做100次！第二名：想象化功能第一名：牛逼人本文首次发布于慕课网 ，转载请注明出处，谢谢合作作者：张培跃链接：
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",维生素P,git记录，2014年。项目，c#，老代码。针对每一种交易类型的有枚举，C# 标记枚举，在业务逻辑中使用位运算切换不同枚举。switch case 结构，里面有千行的 case。每个case里面，有若干if elsegit log 看一下，这个屎山是最开始只有十几个case的，然后大家开始往后加新的枚举case，复制若干代码，增加逻辑。很多 case 魔幻的是他们的逻辑部分相似但不完全相同，大概是60-80%，比如说case A 的逻辑是 abcde，case B 是 bce ，case C 是 acd，case D 是 debc，诸如此类。于是就一直往下堆叠，变成了千行的东西。最关键的是，没有单元测试，而且由于是交易数据的关系，回归测试也不好做，涉及的场景特别多，测试负担很重。要命了。后来重构了，不是代码重构，而是用SpringBoot重新写整个项目。新架构这里拿责任链模式穿起来，舒服多了。资历尚浅，刚干两年，这就是目前看到过最烂的了。烂代码还是少看点，多看点好代码，多看点开源的好项目，才能提高审美和编码品味。看好了，再模仿模仿，这就舒服多了。
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",Black,自己以前写的代码
你见过最烂代码是什么?,"['问题来源：', '你见过最烂代码是什么?']",蔡灿烂,"public static DateTime getTomorrowDate(){     Thread.Sleep(24*60*60*1000);return DateTime.Now;}高端大气上档次的定义了一个常量public static final int ONE = 1public static final int TWO = 2#define CONST_NUMBER_ZERO (0)#define CONST_NUMBER_ONE (1)#define CONST_NUMBER_TWO (2)#define CONST_NUMBER_THREE (3)#define CONST_NUMBER_FOUR (4)#define CONST_NUMBER_FIVE (5)#define CONST_NUMBER_SIX (6)#define CONST_NUMBER_SEVEN (7)#define CONST_NUMBER_EIGHT (8)#define CONST_NUMBER_NINE (9)#define CONST_NUMBER_TEN (10)震惊中外的int main(int c, char **v){while (--c > 1 && !fork());  sleep(c = atoi(v[c]));  printf(""%d\n"", c);  wait(0);return 0;}不懂C的看Python 版import threadingimport timedef sort_num(num):    time.sleep(num)return numlist_num = [6, 3, 7, 1, 2, 4]results = []for i in list_num:    t = threading.Thread(target=sort_num, args=(i,))    t.start()    results.append(t)老师说起变量名要用多个单词拼在一起有次code review，看到有个同事把一个变量命名为dayAfterYesterday，觉得莫名的喜感，就在下面批注了“哈哈哈。。。”过了一会看到这个同事又提交了一次git这次把这个变量改成了dayBeforeTomorrow，当时就笑喷了！SELECT * FROM student_info WHERE point > 60原来红色的英文是Hongpublic enum ColorType{Green, // 绿色Hong, // 红色}写第一个程序，包名叫java，然后各种报错……本世纪最强函数没有之一真的可以完美破封（不信你试试）#define private publictry-catch的妙用try{//这段代码是有错的，可这家伙不debug}catch(Exception e){//正常功能放在这，要报错才可以执行}终于知道了当年用的随机数为什么一直是4int getRandomNumber(){  return 4;}AI核心代码，估值一个亿while True:    print(input("""").replace(""吗"","""").replace(""？"",""！""))这可能是我这辈子见过最骚的if-elseboolean isTheRightNum(int num){    boolean result = false;if(num == 10){        result = true;    }else{        result = false;    }return result;}"
