问题名,问题内容,回答1,回答2,回答3,回答4,回答5,回答6,回答7,回答8,回答9,回答10,回答11,回答12,回答13,回答14,回答15,回答16,回答17,回答18,回答19,回答20
如何评价最近CSDN的行为？,,,,,,,,,,,,,,,,,,,,,
为什么有人可以在屎一样混乱的几千行代码里加功能？不重构能驾驭屎山吗？,,驾驭屎山的唯一方法，不是重构，而是为什么有人可以在屎山里加功能？很简单：把屎山扒拉开，每块闻一闻，找出和你要改的功能对应的那坨屎，把这坨屎套个塑料袋（封装），你就可以假装塑料袋里不是屎，是巧克力。然后，在旁边拉一泡新的屎，等它风干成型（测试通过）就可以收工了。当然，怎样优雅地在一座屎山里闪转腾挪，做到“百屎丛中过，片屎不沾身”，还是需要很多经验和技巧的。不过说白了，就算失误了摔个嘴啃屎，臭也只臭你程序员一个，老板还觉得你很狼性，客户还觉得真香。很多愣头青觉得自己是天才，可以把屎山重构了。他们中的大部分人引发了屎崩，永远埋在了几千米高的屎山之下。极少数人在泥屎流的洗礼中活了下来，浴屎重生。他们真的做到了，他们真的重构了整座屎山！当一个系统复杂度增加的时候，它的熵也会增加，这是宇宙规律。而某些有洁癖的码农，他们非要强行降低这个复杂系统的熵——不是做不到，但需要巨大的能量，也就是成本。你想让谁来付这个成本？老板还是客户？屎山不是一天拉成的。每一代屎山的建设者，都是非常聪明的人。他们非常清楚继续堆高屎山，未来将产生的代价。他们理性中立客观地评估了推翻屎山重建的成本，然后做出了一个充满智慧的决定：这个决定对于每一个人都是最优解，因为每一个人只需要对他当下的目标负责。每一次“继续拉屎”的决定都是正确的，不这样做才令人匪夷所思。如果重构屎山，客户很生气，因为交付时间更长了，还会冒出许多以前没有的bug。老板很生气，因为成本大增，而客户毫无多付钱的意思。就连重构屎山的人自己也很生气：天天钻在屎山里996，搞得浑身屎味，工资却一分钱没涨。尿海不择细流，故能成其大；屎山不拒细壤，方能就其高。屎山就这样一天天长大，终于令最后接手的码农感叹：高山仰止，无论你使用何种语言，师从什么流派，哪怕23种设计模式样样精通，最终还是会踏上前往屎山的道路。因为，条条大路通屎山。就连微软、谷歌、Oracle这样的大公司，他们的产品也都是屎山。Oracle每改一个功能，全公司的服务器需要全速测试几个月。chromium浏览器的源码有十几个G，虽然是开源的，但没有人敢在如此险峻的屎峰上提交自己微不足道的屎坷垃，高处不胜寒。至于微软，呵呵……从win8到win11，10年了，控制面板还是有两种口味：一种是古早味的，一种是苹果味的。office从2016到2021，5年了，不拿放大镜都看不出有什么区别。这段话可能会让你误以为，微软、谷歌都是垃圾。但实际上，他们是地球上最强的软件公司。世界上最高的屎山，都是最聪明的屁股拉出来的。换了一般的程序员，屎山还没垒出一个小屎包，就屎崩了，就这点水平还天天嚷嚷着要重构屎山。所有代码的最终归宿都是坟墓，而绝大多数代码早已死无葬身之地。屎山是不可能重构的，这辈子都不可能重构的。打败屎山的唯一方法，唯有另起炉灶，建一座新的屎山。这就是为什么在巨头们巍峨连绵的屎山脚下，总能有新的小屎包崛起。当然，对于血气方刚的少年，我知道，你很可能觉得我在扯淡，屎山有什么好怕的，重构就是了。明知山有屎，偏向屎山行。来，壮士，干了这碗屎，我绝不会拦着你。我只会献上一本秘籍，祝你早日成功：作为一名有理想的程序猿，我也在努力建造自己的屎山。我想做一个能直接翻译英文pdf的工具，不是链接如下，感兴趣的同学可以试试。目前只有PC版，APP的坑一直没填：Rust语言代言人 。他翻译的pdf是这样的：说实话，得到这样的评价实在出乎我的意料，因为我还从没试过翻译编程领域的文章，初看貌似效果还行。不过，我在受宠若惊的同时，也暗暗感到惭愧。因为只有我自己知道，屎山里还有多少坑没填……不说了，我要进屎山填坑了……评论区有人说反对我当年退出文坛，其实我进入文坛也没多久……如果你喜欢我这种用脱口秀style把道理讲通透的风格，可以尝尝我今年出版的两本科普书。这两本书都入选了2021年度CCF“科普阅读推荐图书”榜单。CCF是什么，对于程序员就不需要介绍了吧……一本既不吹捧科学家的伟大、也不纠结历史细节、只想让你无废话看懂量子、还吭哧吭哧手绘100多张彩色漫画实验图解的硬核科普：一本不屑于教Python和调参、只想和你探讨人类命运和智能本质的AI科普：还有不赚钱、只求交个朋友的套装：,2022年6月2日补一句：你完全说反了。———这个是因为你工作时间比较短…你工作久了跳槽多了就会发现，大多数公司你都是半路进来，大多数项目你进来的时候这系统已经“稳定”运行好几年了，大公司甚至都10多年了。你认为是屎山，当时第一波编写者看看这代码也会觉得是屎山。不，每一个接收的人都会觉得是屎山，然后他用尽全力继续拉屎。在长时间多人数得接力赛之后，这个代码早就不是这个代码了。每一次换新人，一看这代码都忍不住重构一波，但因为时间不够，总有一些代码没用重构，敢动得只有非核心代码，所以，在kpi的压力下，不得不妥协。这样来最保险得做法：自己新写的代码使用新的架构（自己熟悉的），旧的代码不变，需要用老的代码那就桥接过来。每一个人都这么想，然后新的需求又桥接到已经桥接的代码..然后桥接到桥接的桥接的桥接的代码上..所以这个项目中有了大量的桥接代码。所以修改核心代码的难度：不是每次核心代码相加而是：第一次核心代码+每一次代码桥接的阶乘…所以到你头上了，你最好的办法就是继续桥接。明明直接调用functionA就好了的 需要调用一个functionM 间接调用e，间接调用d，间接调用c ….然后才是A..我只能再加一个function H。一个1w行的大方法就是对我最大的仁慈。。。当然还有一个问题每一波人的编程能力或者编程思想不一样。———————-举一个例子比如最开始的作者喜欢kiss原则，代码非常舒服，性能也很好，小而美。第二代喜欢设计模式，，代理模式，工厂方法，责任链..23种设计模式，牛逼牛逼  代码虽然复杂了，但是拓展性非常好，堪比教科书式的案例，前一人虽然性能好，容易懂但是拓展性很差。老子精心设计得代码，可保证10年轻松拓展。第三代不怎么熟悉设计模式，这代码看的他云里雾里，他说：。这什么垃圾代码，一个简单的查询跳了7-8层？一个对象继承了2-3个父级？老子重构， 这写的啥啊，为啥我改了就不行了，改回去就好了，那这样吧，我来还有这块，引用得是jar，都不知道源码在哪..我这个字段加不进去..妈的..还有这个方法是私有的..好了，我用反射来调用..这场景没有5年8年经验还解决不了..多少人都搞不定，被他顺利的高效的完成了任务，领导非常高兴给他发了三个月年终奖。。。第四代 这代码好复杂啊.还有各种切面我终于搞清楚了..。可是明明着bean10个属性，怎最后输出了15个属性？而我的业务需要这几个突然出现得属性..这样好了，我隔离这个代码，使用一个函数屏蔽。所有都和这个函数打交道。除了老代码之外，其他代码舒服了，可是老业务却都还在跑第五代 这代码怎么会这么奇怪？…….第n代 这屎山，老子要重构..卧槽，本人不才，去知乎问下：注意，每一代都是绞尽脑汁，发挥他们得聪明才智解决问题才导致这样的。如果大家痘傻逼一点，老老实实按照老版本逻辑写，或者一不做二不休，彻底重构底，这问题还会存在？质量时间成本不可能三角下，老板可不会允许。所以别怪前任，他们尽力了，其他大多数都尽力了。——————————————————大哥，摆脱，说这么多没卵用啊，我现在急着干活呢？我tm怕撑不过试用期呀。来了来了别慌。对于你我来说，想要玩起来这坨屎需要做这些事情，因为通常这样的项目配置项，中间件依靠很多很杂。大概率会有大量无用配置文件，以及废代码，引入了并没使用的框架，以及莫名其妙的报错，比代码还长的警告..顺利启动这个项目是最重要的事情。2搞清楚如何在ide中，比如idea中打开这项目假如这个项目可以在测试环境，生产环境启动，恭喜你..，但是这不代表你就可以开始干活了。你需要在ide中成功编译..成功run，成功debug..入参-入口-》业务-〉数据》出参比如某web页面上有一个按钮：放款你要做的事情是在放款得时候追加一点业务，比如说黑名单检测。首先找到控制器，如果找不到，打开浏览器控制台，network，看url然后双shift在idea中搜索这个url后面的内容大概率你能找到控制器（ssh项目）如果找不到，比如是gwt，或者其他玩意，那就全文搜索，或者找代码中的配置文件。这样你找到了入口从入口出发 你可以看到宛如瀑布般的川流不息的函数调用..甚至一句注释都没那你统一简化为：数据库操作，非数据库操作两大类数据库操作就可以知道有哪些表。有了表，这样就好多了，就可以分析业务了比如有贷款表，贷款详情表，放款表，利率表，等上十个表。这样再分类成两类，贷款业务强依靠表，弱依靠表。强依靠只记录贷款本身数据，弱依赖⌚️指通知，历史记录等表。在这些表里面找入参和出参数。顺着字段找代码。如果能够从如参找到出参，差不多了。如果不能全部找到，先只找几个。到这个时候你应该可以一两句话概述主要内容了。4搞清楚数据库中表的关系当然大概率啥文档都没..或者文档太久没更新了..因此需要有点想象力..毕竟不是写的博士毕业论文，还是可以猜出来4-6分。5复习下你的业务需求，你需要增加啥入参，增加啥出参，这些参数再哪些表？算法先别管。然后结合搜索代码..到这儿业务自我的差不多了。6学习那些非数据库操作。比如发短信通知，调用接口，写队列，调用非存储中间件代码。到这一步差不多了，然后试图加一个入参和出参。串起来这些代码，表，接口，中间件。如果能完成，差不多了，如果不能，寻找熟悉得人，演示给他看，让他指导，如果他不愿意（大概率不愿意）那就让他在他的电脑上debug讲解一下流程。当然这些都完成不了，也没关系，最重要得是跟你领导同步你的计划-执行-结果，然后求助他，他大概率解决不了会给你一个人帮你，这样可以吧锅甩给他（别太直接，别欺人太甚就行）如果领导说没人，让你自己看。那你为自己争取了更多时间了。记得主动汇报，不要等到deadline再说你不行..不然这deadline真的就是deadline了..未完待续…看的爽麻烦来个三连呗，谢谢。最好说一下，还想继续看我装逼or想学习如何装逼推荐看这几个,别说几千行了，几千万行劳资都可以维护过一个神奇的软件叫3ds Max，总代码量大概八千万行，其中据统计活代码三千万行（就是用户经常能使用到的代码）不过具体到工作经常需要接触到的模块，也就几百万行的样子，有些很成熟的部分，比如图像读写之类的，基本上不用管它然后整体大规模的重构基本不太可能，主要不是做不到，是因为没这个动力，搞的再牛逼也不一定能给公司带来更多的收入，而且我觉得没人有这个魄力和实力下决策也是个很关键的因素其实各种小规模的重构也一直在做，不过吃力不讨好，如果不产出产品价值，用户也会觉得你没做啥，但是事实上你让这个软件的可维护性可能延长了五年不重构能不能驾驭，当然临时驾驭一下是可以的，比如离发布时间比较近了，需要快速解决问题，我就一般会开启黑客模式，我就一个办法，先把关键路径（业务工作流）反复调试，调试到对这个路径上面的局部逻辑非常熟悉，然后开始不过大部分时候还是建议能重构就重构一下的，而且要持续重构，保持这软件的可维护性，不然自己以后回到同样的逻辑再来一次也会很痛苦，我为人人，人人为我嘛。当时团队是使用相互审核代码（peer review）的制度，反正太恶心的代码别人也不想维护，所以基本上review这关也过不了。不得不表扬下3ds Max的插件式开放架构，虽然灵活性无敌，但是因为最初的逻辑和结构设计还是非常清晰的，所以后续可以一直扩展，有些时候通过插件接口把复杂性隔离开了，有些模块可以独立分析，或者基于接口分析改动的影响范围。3ds Max虽然代码量大还能维护这么多年的另一个重要原因是有一套非常成熟的测试机制，包括了自动化的分布式回归测试平台和非常有经验的艺术家测试，这套测试系统和数据也是有专门的团队在维护的。离开了这些的保障，软件工程师也不敢随便改代码，毕竟全球那么大用户量呢（doggy）PS：跑一趟CICD + 分布式回归需要一个小时左右，切分支干别的事不是不可以，但是太麻烦，劳资一般喝咖啡去了^o^后来，有些合作方谈到某个项目，我说你们为什么不这样这样做？他们说因为我们的系统太复杂了，我们的代码量blah blah，结果我一看代码，就这？？？,"      见过一个写了一万多行的代码，就为了调用一个接口发送短信，把这个接口真正的功能独立出来，发现只有10行是封装参数，调用短信接口。      而其他9990行代码在干嘛？各种if  else的判断，外加各种调用其他接口查询获取参数，其中有查询redis，取计数，查webservice、db等等，还有和别的公司系统的对接，最终一堆业务柔和在一起，形成了这一万行代码。    咋一看，这方法名,sendSms，见名知意，走进去，我去，我XXXX，谁他丫XXXX，骂完以后还得继续。   看完这些代码后，我理清了先辈们的逻辑，终于可以加个if  else搞定这个任务了。   至于说重构，给钱了么？给时间了么？   排给你任务的人说，不就是判断一下业务场景，然后发送一下短信么，之前别人做的时候就一天，你怎么还需要一个星期左右？   你怎么说，“哦，代码复杂度高，不重构的话后面越来越复杂，系统会崩的。”  需求会听么？架构师会听么？其他员工加班时会抱怨：“都怪那个XXXX，没事提什么代码重构，要不是他，我现在都回家了”   有一种东西叫做工作，还有一种东西叫兴趣。  作为兴趣，去重构吧，但作为工作，效率是第一。",分情况，大部分时候如果你完全不明白这个代码是怎么回事，那可能是因为你的水平和经验及不上最初设计这套东西的人，许多在他看来非常浅显易懂的设计理由是你完全没有想过的，还有一些奇怪的地方可能是遇到了问题但没能完全解决掉的如果你的水平显著高于之前的设计者，你应该能从代码里很清晰地明白他到底为什么做了这样的设计，并且同时明白这种设计远非最优选择，犯的错误主要有哪几点，并且自己尝试添加或者修复的功能为什么会直接和这个设计冲突；甚至最初的设计思想是什么、途中开发时变成了什么样、后期维护时又变成了什么样，中间哪一段是明显为了应付出现的问题随手糊上去的，哪一段是后来的维护者不理解最初设计做出的错误变更等等。这种时候才是一个适合真正重构的时机，你可以将当前代码的设计和更优的设计之间做一个折衷，在尽量保留现有成果的情况下，提供一个渐进式过渡到新设计的方案，然后逐步逐步替换掉实现错误的代码，并且有针对性地补充测试。注意，完全不修改、继续沿用现在的设计也是一种折衷的方式，这完全取决于你对未来这段代码发展方向的预期。另外，这种理解不代表逐字逐句理解每一行，只要在整体上明白思路、有分隔影响范围的手段、然后在需要改动的局部进行细致分析即可。,听哥一句话，碰到代码屎山，不要尝试重构，如果屎山摇摇欲坠，你赶紧拉上一坨，糊上去就是。哥当年也是激情洋溢，打算把屎山换成,推荐下这本《Working Effectively with Legacy Code》，非常实用。大意是先定义什么是遗留代码：没有介绍很多技巧，印象比较深刻的是怎样小切面地把新的非遗留代码功能加进去，也就是说，我的新代码首先是有测试的所以它不是遗留代码，我可以给它抽个类或者函数啥的把它放一块，然后在老代码里加一点点代码给它调一行，这行调用代码需要简单到不需要覆盖测试你也知道这行不会有错。此外根据「没有覆盖测试的代码就是遗留代码」的定义，每多覆盖一些测试，遗留代码也就少一点... 以及重构前先覆盖测试等等。重构不下去了这本书也有给你心理建设...（试试知乎的带货功能...）,因为加功能和重构完全是不一样的。我记得有另外一个问题是问：为什么有人说只要代码能运行就不要去碰它。这恰恰就是说的这种情况。屎山本身内部在维持一个微妙的平衡，很多地方都是正好只有这一个点是OK的，你稍微改一下就稀里哗啦如同多米诺骨牌一样的结果。但是这很多时候并不妨碍你加东西。你只需要注意不要去改变原来的结构就是了。这就好像操作系统在执行屎山的时候，也能并行执行其它任务一样。对于屎山，你需要做的就是尽量将你新加的加在外部，而不是内部。举个例子，微软的office很多后面加的功能，其实都是类似于执行VBA，也就是用脚本模仿用户手动操作，而不是直接改内部逻辑。所以很多操作很慢。但是能用，这就OK了。同样的功能在google docs里面，很可能就会轻量很多，虽然那是用网页+脚本语言写的。爱立信有位工程师，搞了一套所谓面向方面的编程（AOP），就是改编译器，在每个函数的入口和出口自动插入钩子（跳转点）。这样加功能的时候，就不必动原本的结构，只是hook出去跑新的代码，然后再hook回来。颇有杀毒软件是如何监视其它软件运行的味道。杀毒软件都不需要改你的程序，就可以改变你的程序的很多行为。但是重构。。。那就完全不是这么一回子事情了。大部分时候是，牵一发动全身，稀里哗啦碎了一地，然后决定另起炉灶。但是已有的生意不能停，新的生意也要做，所以最后就变成半新半旧：一座新的屎山产生了。,这个问题我有资格回答，入职微信的第一年的工作可以认为就是在做重构，重构的目标是一个游戏引擎的整个渲染系统。这个很重要，虽然是技术团队，但一个系统原先跑的好好的，重构总要有充分的收益理由，只是所谓“为了未来的可维护性”这一点完全不足以支撑这么大规模的重构。我们最后推进重构的理由有以下几个：有了充分而正当的理由，重构才能被允许加入KPI，而这只是第一步。对于一个已经被使用的大型项目，并不能说我们要重构了，就放下一切全力搞，搞完了再上线，重构本身需要遵守一些原则：在这个过程中，我们做了：整个重构过程包括我在内，纯Runtime大概耗费了20多个高级开发的人月。如果加上工具端的适配、以及业务方的升级和测试方的配合，感觉没100个高级开发的人月打不住。所以，你可以看到在一个比较大型的项目作出重构的决策和代价是多么的昂贵了。要说服老板接受这么高昂的代价，必须要有充足的理由，同时你自身还要面对接下来各种糟心的勇气。如果不是真的必要，这时间拿去早点下班好好生活不香吗，本来国内互联网大部分的项目也活不了多久。,有些屎山是为了政治的需要，刻意为之，有时候过于干净的抽象不一定是好事。懂的都懂。几千行的屎也能叫屎山？有些历史悠久的公司，一个子系统就有数百万行代码。举个现实的例子，我们部门维护的一个平台，在全球的同类业务中属于碾压同行的存在，但它也是公司众多屎山中的一座高峰。可以说遍地都是雷，某些核心代码支撑着数百种业务流，改核心代码的难度堪比外科手术。一个五人规模的精锐团队平均每个月只能产出一千行左右的有效代码，大多数时间，大家都是在进行各种烧脑的分析、测试和扯皮。最后找到精准的位置，挪动一坨屎或者再拉一坨新的。接下来就是跑这种屎山如果不是亲自在里面走一圈，一般人很难想象为什么代码产出会这么低。为什么不去重构？对于这种承载着巨大业务的屎山，重构系统需要的资金数以十亿计，单位是美元。此外，还需要上百号人干上两三年时间，而最好的结果也只是再创造一座小一点的屎山而已。复杂度不可消灭，它永远都会在那里，只是从一个状态转移到另一个状态罢了。巨型屎山是一个标杆，能够衡量出程序员的价值。只有优秀的程序员才能驾驭得了这种屎山，普通的CRUD boy连打杂的活都不一定做得好（关于这一点，我们曾经在外包团队身上验证过）。其实我们都应该感谢这种巨型屎山，是它保住了我们的饭碗，让我们有上升通道，让高级技术岗有存在的价值，让企业不得不开出优渥的薪资来留住人才。巨型屎山是不可能重构的，这辈子也不可能重构，他的最终归宿只能是被推倒重建。巨型屎山的问题在于，经过很多年的维护、很多人的工作，已经没有人能够讲清楚它承载了哪些东西。但如果你还想挑战一下小屎包，还是有一套方法的。至关重要的一点，和屎山搏斗一定要有足够的耐心和细心，每行代码都有它存在的意义，你需要弄清楚这些藏在背后的业务逻辑是什么。如果不能把业务逻辑和细节弄清楚，建议不要随便动手，很容易山崩。你需要先站在更高的层面，去理解这个屎包承载了哪些业务，有哪些业务分支，有哪些细节，然后建议你画个图梳理一下。到了代码层面，你可以结合业务细节来读代码，本地跟踪调试深入理解每个过程。同时可以看注释、看文档或者去问写这些代码的人。只有它是一个稳定运行于线上的系统，总有办法弄清楚的。等你把这些都弄清楚，再去改代码就会下笔如有神。最后，建议对自己的颈椎好一点。,一看就知道没做过大项目，做过大项目就不会有这个问题了。1、有些项目跑了很多年了，语法，思维，习惯都跟现在的主流不一样，随着时间的推移，功能与代码的修修补补，难看是必然的。2、维护的人换了好几批，就好像一句口信经过口口相传最后意思全变了一样，一个项目N个人接手，每个人的水平、习惯、理念都不一样，写出来的东西混乱也就不奇怪。3、有一句老梗叫优化是万恶之源，而什么叫重构？重写一遍代码来实现原来的功能，也就是重构在短时间内是不会有任何收益的，反而会因为重构导致功能缺失或者引发新的BUG，说白了重构只会徒增成本，增加风险，肯定会有人说，我重构是为了更好的性能，更好的扩展性和可维护性，但是实际情况是大多数的软件项目不是技术驱动的，而是业务驱动的，重构在技术上有好处，但是在业务上是没啥好处的，我第一家公司就重构过一版系统，然后推销给客户，客户问重构之后有什么好处？性能客户不在乎，新功能老版本也可以改，重构版本除了增加风险，对于客户来说没啥吸引力，那谁给你的重构版本来买单？4、部分代码可以重构，整个项目建议重做，在现有的项目上重构问题是很大的，直接重做是最直接的，当然这要看高层的想法。软件是有生命周期的，到点了就该让它死，而不是从头到尾的换血续命。重构应该只针对那些频繁改动的关键组件，一些老旧、不明所以、边缘业务代码就放那安安静静的躺着吧。5、对于打工仔来说，主动重构没有任何好处，什么叫主动重构，你嫌弃老代码恶心，就跟领导说我要重构，领导说好，做好的了不涨工资，做差了扣你钱，你不服，问为什么？老板问重构能增加公司收益吗？能减少人力成本吗？能减少服务器开销吗？这些你都不一定能打包票，而重构肯定会影响原来系统的稳定性，徒增人力投入，万一出点严重的BUG还直接影响公司收益，你说老板是给你发奖金还是扣你钱？6、这一句血的教训：,让你去接根线，你还把下面这摊全理了啊！你非得驾驭它干嘛犯不着啊亲！,一个非常有意思的事情，每个人都说自己写的代码结构清晰可扩展性好，每个人都说别人的代码是屎山。客观原因有很多。比如重构这种事在业务上讲基本是没有收益的，你说我花一周的时间重构这几千行代码，功能和以前一模一样，性能也没提升，仅仅是好读了一点，除非没业务做了大家都闲的蛋疼，一般的领导都不会批这种事的。至于几万行代码级别的重构，那更是吃力不讨好，没收益不说，通常还会导致一定时间内功能缺失质量下降。除非拿来作为职级晋升答辩的材料，否则除了一心追求技术的人，谁会有动力搞这个？代码重构的工作量不是线性增长的。几千行级别的代码重构，一周就能搞定。几万行级别的重构基本要两三个人搞半年。更大级别的重构，整个团队十几号人押上去搞个一两年还未必能搞成。因为有能力驾驭二十万行代码的人才是非常稀少的，你的团队里未必有。一般的毕业生能驾驭几百行代码这个级别就算不错的了。毕业两三年达到能驾驭几千行代码的程度算进步快的。在往上到驾驭几万行这个级别，没点技术追求是做不到的。做不到，又工作在大型项目上，那除了在既有框架下修修补补生产垃圾代码外还能做什么呢。大部分人，不过是挣钱吃饭而已，技术追求是什么，能帮我挣更多钱吗？答案是，不能。至少，非常的曲折和间接。大佬分很多种，有 PPT 大佬，有业务领域大佬，有技术攻关大佬。这些领域的大佬和代码质量都没直接关联，有关联的是基础编程领域的大佬，能从宏观架构到代码实现细节包括性能、扩展性等等全方位无死角搞定的那种。可惜的是，这种大佬太少了，远比 PPT 等类型的大佬少的多。所以为什么大部分团队日复一日的在屎山上工作而不考虑重构，除了个别客观的原因，更根本的原因是技术能力不够，办不到。待续。。。,"不少人应该知道Excel 的1900年是被算作闰年，也就是2月多了一天。这是因为给在Excel之前的Lotus写代码的程序猿是个弟弟，为了简化算法就把1900年算作闰年，反正当时功能有限，不影响使用。这也是很多程序猿刚开始建一座山的想法，上面那个勇健（精力旺盛的老头）催的这么紧，我先搞个能用的，有问题以后再改嘛。但是在修正这个Bug之前，有已经有很多重要的文件用上了这坨屎。这些普通人的文件里面的公式肯定是写死hard code进去的，这坨屎要是变了点味道他们还真活不下去了。然后程序猿就开始纠结要不要重新洗一下这坨屎，但是在考虑要加什么调料重新料理这坨屎的时候，更多的人更多的文件用上了这坨屎。好吧我处理不了了，掩饰一下bug，把代码丢给下一任吧？下一任接手一看？什么鬼为什么要我给前任渣男养孩子？你看我长得像接盘侠嘛？掩饰一下bug，把代码传给下下一任吧。越拖延，沉没成本越大，很快这个成本就大到你要是敢动这坨屎FBI就要寄刀片给你了，因为他们的人的Excel也是用这坨屎写机密文件，要是日期改了，记载外星人带肯尼迪去登月这件事的Excel就要炸，克林顿实习生地道的施工方就要不到钱。第6任接盘侠终于肯修这个Bug了，怎么办呢，核心代码上帝都改不了，那我们只能附加上一堆更烂的屎把这个漏洞糊一糊，至于新的屎在未来会造成什么问题？未来？未来关我什么事那是下一个程序猿要头疼的问题，你现在连加班费都不付，整天在涨薪和工资上扯皮，你会付我未来的薪水嘛？古人云不斩来使，说的就是上面的人你不要斩给自己报告坏消息的自己的使者啊，每次有问题都是砍了提出问题的人，除了刚毕业的，谁敢提说哎我们有个很麻烦的Bug，麻烦老板你推了晚上瞒着嫂子去足疗店和重构？对我看得懂前面的人写的屎，甚至他用“1”， “2”，“3” 来定义性别，收入，住址 这几个变量我都知道，就算我能重构这个代码，但是我怎么重构用这个代码的其他衍生代码和文件？它们的衍生产品怎么办？这就是一个深度无穷的粪坑啊你多下去洗几次就不想下去了。非要改我宁愿直接重写。每天早上按一个跑键，然后美滋滋的等程序跑领工资不香么？非要和自己过不去慢慢的修以前人留下的代码？别忘了你的代码可能修一个数就能修的bug, 你可能要把在他们的代码里面玩上几小时的“有的人可是连循环都不用一切都是Hard code啊，而且还是没有排整齐的就算你用代码排列洗了一下很多时候还必须一个一个词修改。甚至还有喜欢在词后面加空格来重命名变量，比如说“pen”, “pen ”, “pen  ”, 我在这没有加双引号有谁能看得出区别？第三个词可是有2个空格的，但是显示出来只有一个，你注意到了吗？为了掩盖这些弟弟的无能向上面的人交代，我们还特意发明了一个专业用词，胆子大点的还能作为KPI，Backwards Compatibility回溯兼容性。简单来说就是说：我们保证了产品新版本能让旧版本也能运行。翻译：",你你有那个精力和能力么？一些真的大型项目第一代程序员可能都已经死了，对应的 domain knowledge 都需要,屎山不到万不得已，千万别去重构，否则真的会爆炸的！一家公司的某个业务，但凡稳定点发展个几年，基本都是屎山般的存在，如果没有特殊事件或者领导的绝对授权，贸然重构屎山是会出人命的。为什么大家能在屎山加几千行代码完成老板的要求？很简单扒开屎山，加上你要的功能，勉强测试通过，打包在一起假装这坨屎变成了巧克力，然后提测风干，成型发布。IT行业大家都懂，老板催活跟催命似的，你要胆子大敢铲屎山，屎山就敢炸你一脸，到时候直接无限delay搞不好就卷铺盖走人了。2010年加入创业时期的360，担任高级工程师，负责一个远控软件，同时要跟操作系统底层打交道。入职后才发现在Leader的神操作下，部门的代码耦合成了一个大泥球，一个主类就有几万行，主类里的一个函数就有几千行。。那个Leader最常说的就是：能跑起来不要想着去改，跑起来就行！后来因为副总裁要求一个大功能，这哥们直接卡壳了，他带着我们几个小弟想改改上线，发现怎么都改不出来，，硬是delay了1个月都做不出来。副总裁直接怒了，快速给他转岗到其他部门，让我先暂代技术经理职位，同时开始招聘。。。面对前任Leader留下来的数十万行耦合严重的代码和框架一瞬间，又回到了大三的那种疯狂状态，每天极限Coding，我们将代码组件化、模块化，实现了一边飞奔一边换轮子。就带了两个实习生，花了3个月搞定了这一堆恐怖的代码。那段时间为了更好的重构代码，我还看了很多计算机经典书籍，包括《重构》、《顺便送大家一份非常宝贵的计算机经典书籍资料，我把工作中用的经典电子书库（包含代码重构、数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这段时间，我的架构思维开始突飞猛进，我们在每一次的重构之前，都会先画出业务时序图、类结构图、工程关系图，然后按图索骥，每每在实现的那一刻，不由得惊叹：程序世界，太奇妙了。所以你看看，带着代码能跑就不要动的观点，真的会害死人的，程序员有的时候就得直面大泥球，不断重构，不光锻炼能力还能保证后续需求的迭代。,作为一个还在写代码，40多岁的cto，今天正好被下属的要求搞的很郁闷。试着回答这个问题。第一，推翻一座屎山，构建出来的可能只是一个大炕，连山都不是。第二，哪怕构建出来一座大厦，过上几个月，99%又变成屎山。软件工程，项目管理，远比单纯的技术人员想的复杂。但是我认为我们依然应该鼓励重构，这样我们才能获得进步。第三，90%喊着要重构的人，嘴上喊的是重构，实际是重写。重写远比重构简单。因为重写并不需要像屎山一样经历严峻的质量验证，所有新产生的bug变得理所当然。那什么是重构呢？能把上万行的功能模块，以每天一个版本的频率提交。而且每次提交都不影响现有软件运行。通过几十次的提交后，整个代码变得整洁了，可读性变强了，这是重构。如果觉得无法做到。那就先从小的，能在几个小时内，一天内完成的重构做起，同时好好去读稳定运行的线上代码，从来都是改出来的而不是设计出来的。,当你开始吐槽历史代码已经像屎一样时，潜台词必然是没有时间重构的。不然你就会说「看，我修了一个干净整洁的厕所。以后你们随便拉」。所以其他所有建立在从你开始提升代码质量的建议，你都要谨慎评估。毕竟 DDL 不会因为你看了哪本书而改变。：P你要做的就是 COW 大法，让屎山裂变。然后以较小的风险修改其中一个。并且对于屎山增倍的事实做到放下心里负担（不然你以为那么大的屎山怎么来的？你前面的大佬改过的屎山是大了还是小了？）这就是在理性的职场中，导致屎山不断裂变的那双看不见的手。屎山随着业务当量的增长，总有一天会突破临界点的。这时候其他的人推荐的书就可以在复盘时用上了。环境上叫先污染后治理。屎山治理的领域就叫延迟擦腚。不过现实一般是干掉一个过深的子屎山，让整个屎山稍微平衡一下。或者拆分下，成为屎山森林。在互联网行业称为微服务化。经过长期的磨练，你终于成长为一个可以轻松拉屎山代码而无负担的人，我们一般称为「菊次郎」；你的团队直接用屎山来锻炼新人，我们称作「菊里扶人」；你的团队一边造屎山一边卖力赚钱，这种精神称为「菊与$」；你们的架构也优化做到了屎山容忍，我们一般称为「菊次郎的春天」。,真正的工程，就是要雇佣有这样能力的人来替雇主解决问题。我们不需要有能力重构代码写得好看的人。,我个人感觉，只是感觉哈，大部分程序员不会改代码，尤其是改别人的代码，或者改自己两周前写的但自己完全不记得自己写过的代码。因为他们根本就没学过、也没有练习过改代码这项技能。他们能写代码，但是不会改。有多不会改呢？我见过一个程序员，他改一个变量名，都不会。他怕会影响其他代码，但他并不知道如何判定是否真的会影响其他代码。明明看到一个局部变量命名有拼写错误，都不敢去改。我见过一段 if else 在多位程序员的迭代下，变成一百多行的又臭又长的裹脚布，他们都只会加代码，从来不改代码，因为改了别人的代码，就意味着自己变成了这段代码的最后更新者，有 bug 就会找到自己。如果是改自己的代码，就会觉得几天前写的代码现在改是不是就浪费了几天工时，还是不改吧。他们都没有错。他们也不敢抽离函数，永远都是在文件末尾加代码，觉得这样就能确保之前的代码不会产生 bug，殊不知，随着需求的变化，没 bug 的代码也有可能产生 bug。他们信奉『开放扩展封闭修改』原则，代码一经发布，就永不再改。他们认为『懦夫才写单元测试』，只要代码通过编译器的检查，就是没有 bug。测试走联调，一个接口调两天是常有的事。我改变不了他们，我只能远离他们，去找敢于改代码、善于写测试、不怕担责任的程序员为伍。因为我怕跟他们在一起久了，我也变成不会改代码的程序员。还好，我现在已经非常善于改代码。看过我直播的同学应该都看得出来。我始终觉得，如果你已经知道代码的问题在哪了，那么现在就应该改掉，否则你就永远都不会去改它。
程序员很闷骚么？,今天上课讲唤醒理论，老师随口举了一个例子，程序员都蛮闷骚，然后全班大笑。。。没有别的意思啊（其实我个人认为这是个褒义词呢Q-Q）咳咳，根据唤醒理论，当人们进入感觉剥夺状态，或者进入相当单调的情景时，他们会变得烦躁和渴望刺激。事实也是这个样子的么？程序员的生活真的很单调么？于是。。。。,跟大家讲个故事吧。老张是我的室友，他喜欢上了一个姑娘。1老张是什么样的人呢？这么说吧，很久之前微博上流传着一份程序猿的特征大全，老张符合上面的每一条。我搬到这个两居室一周之后才跟他打过一次招呼，当时他穿着道袍一样的巨大睡衣、嘴里叼着把上已经泛黑的牙刷、双脚穿着颜色不同的棉拖，迷茫地看着我，含糊不清地说：诶？你谁啊？搞明白我是他的新室友之后，他有点不好意思，双手在睡衣上蹭了蹭，然后跟我握手。我这有好几T的片儿，感兴趣的话可以来拷。他走进自己屋里，突然又探出头来很认真地跟我说。经历过这么别致的初识，我对他产生了极大的兴趣。说来也巧，我最近在做一个心理学的课题，想着能对自己写作有些帮助。他就变成了我第一个研究对象。别看我平时吊儿郎当，其实我心里明镜儿似的。比较相熟了之后，老张在屋里挥舞着双手这么跟我解释，身后是他贴的 Dota2 、海贼王和我平时不讲究，是根本没必要讲究啊。我整天西装笔挺、人模狗样的，给他妈谁看啊？不就是给女屌丝观赏吗？我就搞不明白那些姑娘整天花枝招展是干嘛，自己花这么多钱这么多时间收拾，好看都给陌生人看去了，算什么？做公益吗？你说同事怎么看我？他们更无所谓。你去我们大厦，就看穿衣打扮就知道哪个是我们公司的，哪个是其他公司的。我们同事都很随性，活得明白，不爱慕虚荣。你看那些媒体公司、金融公司的，一个个脸上抹半尺厚的粉，笑都不敢笑，一笑全得抖下来。多累。你看网上都说程序猿傻，不会哄女人开心。其实哪是傻，是懒得跟你聊。说三句话才明白半句，还得用十句话给你解释，这种女人哄她干嘛？为了骗她上床？我有右手啊，轻重缓急我自己拿捏不好吗？浪费那么多时间精力骗个女人上床，都是精虫上脑的原始人干的事儿。文明人才不会被鸡巴牵着走呢。你们这些文化人整天想的是风花雪月，我对这些不感兴趣。你说整天跟女朋友老婆宝贝地叫着、银行卡信用卡刷着，图个啥？不就是晚上来一发吗。电话里甜言蜜语的，挂了电话一口一个臭婆娘；微信上发个笑脸过去，其实眉头早就皱成花卷儿了。有意思吗？...我认真把这些话记录下来，心想老张要是开微博，应该能成个段子手。2有天在客厅里，跟老张谈到恋爱和婚姻。我无所谓。想要孩子了，就找个想法一样的姑娘，也不用什么海誓山盟、什么对酒当歌，直奔主题，结婚生子，凡事都特坦率、特不费劲、特环保。你看过《老张正说得口沫横飞，门铃响了。他皱起眉头来：我今儿没订外卖啊。我说估计是同学来找我借书，把门开了，果然是安瑜。她是系里的学妹，正在报社实习，最近的采访需要跟我借几本心理学的书做参考。安瑜走进门来，我说你就站这等下，我去拿书。从屋里出来时，看到满头油发身穿道袍的老张坐在凳子上，漫不经心地左手抠脚趾、右手啃黄瓜，旁边站着有些局促不安的安瑜，披着耀眼的白色大衣。当然耀眼可能是因为跟老张形象的强烈对比。两个人这时正好对视一眼，互相尴尬地笑了笑，我忍不住掏出手机，抓拍了这张荒诞写实图。送走安瑜，老张正好吃完黄瓜，边往睡衣上蹭手，边问我：这姑娘挺不错，细皮嫩肉的。我嘿嘿一笑：老张你不是说过自己的荷尔蒙从来是在掌控之中吗？老张鼻子哼一下，说：我也没说别的啊。只不过我要是未来找个姑娘过日子，也不可能没有底限。她这正好及格了。我心说你就犟吧，跟他说：这个妹子还偏偏就是你说的喜欢风花雪月、对酒当歌的文青。你就别想了。老张站起来甩甩手，边往厨房走边说：女人就是麻烦。我再去拿根黄瓜。对了，你刚才偷拍照片我可看见了。给我传一份。3之后的几天，老张开始时不时旁敲侧击安瑜的事情。本以为他是三分钟热度，没想到连续打听了一个月。从她最近采访了谁、跟我借了什么书，到她上个男朋友是什么样的、平时有什么兴趣爱好，通通问了个遍。每次我不耐烦地奚落他：你的荷尔蒙都侧漏好长时间了，赶快找时间擦一擦行不行。老张每次都能宠辱不惊地狡辩：允许你研究我，不允许我研究别人啊？我就是最近加班少，无聊了对文艺女青年特别感兴趣而已，什么荷尔蒙，我十八岁那年就戒了。有天我终于忍不住说：我介绍安瑜和你认识吧。我跑腿算是跑够了，以后您老亲自去研究行不？老张装出一副特别勉强的样子，缓缓点了点头。我从微信上介绍老张和安瑜认识，俩人就聊了起来。没过几天，我看见老张开始剪胡子、洗头发、穿衬衣和皮鞋，去跟安瑜见面。整理打扮一番后，我第一次觉得老张还是挺帅气的，实话说配得上安瑜。我把这个想法告诉老张，老张得意地笑了笑：所以告诉过你了，我以前是不想讲究，但不是没有讲究的本钱。对于跟安瑜的关系，老张也逐渐开始松口：原本只是感兴趣，这是实话。现在呢，觉得她也不是那种太虚伪、太无聊的人，我们共同话题挺多，相处得不累。交个靠谱的朋友也不错。你别用那种眼神看我，我又不是为了跟她打炮才去找她玩的。最后这点我倒是相信。老张这么多年都没跟雌性打过交道了，平时说话都带着浓浓的匪气，真想要跟安瑜打上炮那也不容易。4某天晚上跟老张吃烧烤喝啤酒，都有点上头。我的课题遇到瓶颈，一个特别靠谱的访谈对象聊到一半突然闭门不见；老张的项目也不太顺利，工程进度缓慢，副总天天发火，总监一个月换了三次。喝到凌晨一点，我俩都困意渐去、话多起来。我问老张以前有没有过女朋友。老张把半根烤茄子塞进嘴里，含糊不清地说：当然有过啊。那年，我十八，她也十八。她喜欢我，我喜欢她。我们是郎情妾意，花前月下。我哈哈大笑：让你讲故事，你念打油诗干嘛。老张突然叹了口气，细想好像是我认识他之后第一次见他叹气，我便正襟危坐，以表庄重。他把手里的串都放下，举起大杯的扎啤喝个精光。喝完之后，停了半晌，他开始讲他的故事：我初中的时候还是个不良少年，三天两头出去打架，然后跟狐朋狗友在学校甬道上跟女生吹口哨、溜到厕所去抽烟，平均三天得见一次教导主任。说起来那时候还不傻，知道家长老师都在意成绩，所以每次考试都认真复习，考得不差，他们也都拿我没办法。有一回突发奇想跟几个哥们打赌，想比赛追女生，我们写了七八个我们这届觉得难追的女生，汆成纸团抓阄，抓到哪个追哪个，谁没追上或者追上得最晚，请大家抽一个月的烟。我抽着的女生是我们班第一，平时老实巴交的，不爱说话，也不招人喜欢，我没当回事，觉得这种女生好追得很。没想到我那几个哥们一个一个都很快拿下了，偏偏我这个全班第一无动于衷。这可让我恼火了，我那个钻牛角尖的好胜心就上头了。我也不管什么打赌什么请抽烟了，也不怎么跟他们出去吹口哨打群架了，我就一心一意想各种办法追她。细节我就不说了，你要让我记我也记不清了。结果从初二追到初三，追到全校师生都知道我们这点事儿了，这姑娘还是一直不温不火、不卑不亢地保持姿态，把我那个气啊。初三毕业那个暑假，我们到龙泉寺去玩，我就跟这个菩萨那个菩萨的一一发誓，说不追上她我就不姓张。说实话这时候我也不知道是不是真喜欢上她了，但是对她好、同时接受她冷冰冰的回馈，都已经成了我生活的一部分了。高中我跟她一个学校，还是维持着这种奇特的关系。但她对我是好了一些，时常也跟我问好、送我点吃的啊用的啊。你说人吧都贱，她一对我好我这感动得啊，晚上都睡不好觉。有时候她也跟我出去玩，但是照样不爱说话、不露声色。还有几次手都牵上了。但到高中毕业她都从来不承认是我女朋友。大学就没能跟她在一块了。结果她第一个学期就跟自己学院的学长好上了。你可能觉得在这件事儿上我特别傻，花了好几年时间就耗在明知道不靠谱的事情上。其实我当时也明白啊，但每次我下定决心要放弃、要忘了她，第二天她又都会或多或少给我“还有希望哟，再加把劲说不定就接受你了”这样的信号。卧槽我毫无抵抗之力啊，又是一次轮回。大三的时候她跟我坦白了，她确实对我有好感，但好感没有到能成男女朋友那样的程度。可是中学的时候有人照顾、有人关心又是很珍贵、很难得的，所以她自己掌握好分寸，既让我鞍前马后地讨好她，又不让我追上她。她太聪明了，知道追上以后我也许就不会对她那么好了，还可能因为交往影响学习，她一直懂得怎么把自己收益最大化。这段故事让我后来的感情经历都特别不顺利。我在大学的几次恋爱，有的其实都算不上恋爱，全都是在不信任、不坦诚的氛围中度过的。我不敢对别人太好，还时时提防着别人对我好的目的性。所以我自己就找借口啊、找理由啊。我不愿意伤害谁，谁也别来伤害我。...我默默听他说完，不知道该说什么，只好把两杯酒都满上，碰杯喝酒。他突然哈哈大笑：卧槽我说的你真信了啊？我愣了：我了个大去，是你编的？他狡黠一笑，再不说话，装成醉样，懒洋洋地看着天空发呆。5后来几天，老张心情好了很多，不知道是因为倾诉了真的经历精神舒畅了，还是因为编造了假的故事骗住了我。每次我逼问他真相，他都说，A secret makes a man man.他跟安瑜的关系好像也进展不慢。虽然两个人从来不跟任何人提到对方，但看他们朋友圈，一目了然。老张发咖啡厅大胸的服务员妹子，安瑜就会发同一个咖啡厅里有趣的摆饰；老张发五道口堵车，安瑜就会发要等的人真慢还没到；老张发以往只有程序跑通的时候才会露出笑容的老张，现在时不时会对着手机屏幕傻乐，有点毛骨悚然。原来在屋里放的又吵又闹的摇滚和说唱，不知哪天也都变成了情歌大全。有天看到他出门，头发虽然还是油得很，但好像整齐了不少，称赞他两句，没想到惹他大怒：卧槽我这是发蜡，油你个头！现在老张也不说那些程序猿理论了，跟个刚初恋的花季少男一样，百米外就能闻到他身上浓浓的荷尔蒙味道。我以前的观点确实有失偏颇，我也不是圣人，也有想法不全面的地方嘛。老张继续张牙舞爪地强词夺理，手里还是半截黄瓜。有的姑娘吧，确实太笨，整天就知道甜言蜜语的，没劲。但是呢，你看安瑜就不一样啊。她聪明，我刚说半句她就懂我的意思了，沟通不费劲。而且她有理想有抱负啊，不是满脑子想着找个富二代土财主、或者找个大帅哥小暖男，然后就相夫教子、安度晚年的那种姑娘。很多方面我们都很契合，什么都坦白说、明着说，从来不端着、不装腔作势。那，你们坦白的结果呢？没确立关系？我忍不住问。老张很不屑地哼了一声，好像嘲笑我的肤浅，说：当两个人足够坦白了，这些名义上的东西就都不重要了。既然互有好感，那就继续交往着，干嘛非得被名义这种东西给束缚。他把剩下一小段黄瓜都塞进嘴里，得意地嚼起来，一副事情尽在我掌控之中的样子。6老张一直对跟安瑜的发展很有信心，所以当他告诉我两个人已经和平结束之后我还是有些恍惚。老张显得不是很有精神，又开始穿不同颜色的棉拖，坐在客厅里懒洋洋地说：这事儿也说不上遗憾，就是情到了，就做情人，情淡了，就做朋友。其实也挺好，最近我们项目进度得往前赶，正好省出不少时间来。不管是做什么，你他妈老是想着能找到各种逻辑通顺的解释，就算不合理。感情的事儿是能商量出来的吗？什么情到了情淡了，感情不就是先交往才产生的吗？我突然很不爽，用恨铁不成钢的语气跟他吼。老张看我一眼，居然没有反驳，站起来去厨房洗了根黄瓜，回到客厅跟我说：对于一个程序猿来说，一半时间要用在写代码的，另一半时间要用在解 BUG 上。当你想达成一件事情，你会发现做好的准备总是有太多疏漏，你要把问题都找出来，都一一解决，最后程序才能跑通，事儿才能做成。这就是像我这样程序猿的思维。这种思维下，会觉得要想跟一个女生在一起，只要发现出所有的 BUG，一一解决了，就能把程序跑通。所以你看很多上 PUA 课程的都是程序猿。如果要几年前的我，要想跟安瑜在一起，肯定是死命地去追，想尽办法把中间的障碍扫清、问题解决。可是后来我明白了，有些程序是永远跑不通的。它即使没有 BUG，照样运行不起来，因为这些代码跟你不兼容。我不是没有试过跟安瑜培养感情、不是没有试过用各种办法让她对我有好感，但这没有意义。我们能不能在一起，不管是互相坦白想法、还是各自隐藏内心，其实很快就能感觉出来的。她看你的眼神、她的细微表情、她说话的语气，我是知道她有多喜欢我的。这次跟她一起相处的这段时间，就是我浏览她的代码的时间。我仔细阅读了每条代码和它们的注释，最后发现，她在我这里是跑不通的。听完他说的话，虽然知道还是强词夺理的解释，但我也生不起气来，只好骂他：你们这些傻逼程序猿，满脑子就知道代码。说人话行不？7老张对自己的公司特别不满，决定去上海发展。互联网行业的跳槽向来是风驰电掣的，他上午告诉我他的决定，晚上就要离开。小酌了几杯酒，我帮他收拾行李。把事先买好的一大袋黄瓜给他塞到包里，嘱咐他路上别饿着。他哼哼两声，骂着说：卧槽让你给整得跟农民工进城似的。我突然想到一件事，问他说：有件事我一直想问，其实无关紧要，但是我特别好奇。他猜出不是好事儿，一口回绝：坚决不答。我没理会他的回绝，还是问出口：你跟安瑜到底打过炮没有？他理都不理我，拿着行李匆匆出门，消失在楼道里。我无奈地笑笑，回头看到他房间里的海报，不知什么时候旁边多贴了一张照片，是那天我抓拍的他和安瑜。这时手机响了，我看到是他回的微信：喜欢一个姑娘分两种。有的姑娘，你看到她，就想跟她打炮；有的姑娘，你看到她，就只想给她写诗。我抬头看到我抓拍的照片里，邋遢随意的老张，对着安瑜微笑，还真有点像个诗人。,@刘飞  答了道题，叫 “程序猿很闷骚么？”呵呵，他竟然把我跟他的故事写成了小说，然后拿到你们七千多个赞！！！！！！！！！！！！！！！！！！我第一次成了别人的小说素材！！！！！！！！！让我来撕开真相吧。其实，老张并不叫老张，但你们也看到了，“安瑜也不叫安瑜，爸妈没给我那么文艺的名字，我只好自我拯救，起了个江湖艺名叫曲臭臭。事情是这样的——单身太久了，一朋友说，“给你介绍个对象吧，算你半个老乡，靠谱。”没想到还有人惦记着我的终身大事，我很感动，手抖在微信上发了好几行流口水的表情。“但他是个程序猿。”朋友说。“……滚。”我还没到饥不择食找程序猿的程度吧。刚准备扔手机关灯睡觉，朋友发了他三张照片。阅毕，我决定见他一面。<<<因为他颜值太高，是程序猿里的战斗猿？想多了。第一张，他在毕业晚会上说相声。一席儒雅长衫下，露出了阿迪王运动鞋。第二张，格子衫，黑框眼镜，大平头，眯着色狼眼，站在公司 logo 下，面色苍白。第三张，一张大饼脸占满镜头的 98%，五官像被人搓麻将那样蹂躏了一圈。——但我擅长脑补。我发现这是一只潜力猿，如果能被拾掇一下，还是很像样的。虽谈不成恋人，至少做个朋友，拉他一把，帮他提升一点审美情趣，早日体验人生真正的幸福快乐。嗷嗷待哺的程序猿千千万，我不能普度众生，但能救一个是一个。我开始了十九年人生里的第一次相亲。<<<约在聊下来，我发现他没我想象中的那么“程序猿”。他以前在锤子工作，我刚好前几天采访一朋友，得知老罗不少八卦。于是两人相谈甚欢。他在某美甲 O2O 创业，我刚好在做 O2O 的稿子，一起感叹这大好的创业时代。于是两人又相谈甚欢。他在我的家乡念大学，提到一家撸串的好去处，那里刚好也有我不少青春回忆。于是两人又又相谈甚欢。他说相声的视频很好笑，他拍的照片很有水准，他的黑色风衣还蛮有型，发蜡的薄荷香很好闻，右手还戴着一枚骚气的尾戒。（当然，看了他文章我才知道，出门之前他左手抠脚，右手啃黄瓜，完事双手往衣服上蹭。）人的魅力之处，就在于撕下刻板标签后的两重对比。作为一枚程序猿，竟然文艺得如此嚣张。吃完饭，我站在薄荷味的风里，看着淞沪路上随列车一闪而过的灯光，酝酿出一个恰到好处的微笑，对他说，“今天跟你吃饭好开心。”话说到这份上，他牵我一下手表示一下总是可以的吧，结果——他说，“那我再给你讲个笑话，让你更开心。”“……好。”“是这样的。我不做程序猿很久了，之前还在锤子做产品经理。其实那不是真正的经理，但是在银行办信用卡的时候，因为有“经理”这两个字，额度又给长了好多。哈哈哈哈哈哈哈哈哈哈哈哈……”……好，笑，吗？<<<第二天早上，他给我发了个 “Hi”。到晚上，微信聊到一千多条时，他问，“今天要见面吗？”我说“好”。奇迹是在不知不觉中发生的。我们竟然连续见面了十几天。我是那么喜新厌旧追求新鲜感的人，十多天竟对他没有一丝厌倦。朗朗晴天突遇洪水，就索性做一回猛兽。<<<那时已经期末，我被线性代数搞得焦头烂额。每天晚上，我在学校等他从静安寺打车过来，然后他骑我的女士自行车载着我，去大学路的猫空学线代。他说自己宝刀未老，欢迎求助。我性子倔，皱着眉头翻书，咬着笔杆不肯请教他。他坐在我对面，把双肩包里的 iPhone、iPad 和 MacBook 都摆在桌子上码放整齐，默默掏出一本纸质书来看。（……）时间静静过去，线代书越翻越薄，他在我心里留下的脚印越来越多。我不是观音，更不是佛。说是要渡化程序猿，却被他拉进了同一条阴沟，浑身泥巴越滚越多。——他说要教我用 Markdown 写文章，得意地告诉我，“一定把你培养成最会写代码的作家”。虽然不知道作家会写代码有什么用，但后来我的世界里，的确充满了 “#” 这个奇怪的符号。我想换个电脑，他眼睛放光，用生命跟我推销 MacBook Air，说“这是全世界最适合你们文字工作者的电脑”。我点点头说，“那记得帮我装个 Windows 系统。”他浑身颤抖如丧考妣。后来，我成了 OS X 系统的死粉。总之后来我数钱包里有几个钢镚的时候总是从 0 开始数。跟别人见面握手要握三次。<<<在我拿着线代书准备出门跟他见面第十七次的时候，我室友抱怨说，“你最近恋爱谈得太凶了吧，晚上都不见你人。”“什么？我没谈恋爱啊！”我下意识反驳。“这还不是谈恋爱？那你天天晚上是出去坐台吗？”室友说。我被一语惊醒。这些天，每天上百条微信，晚上见面几个小时。我跟这枚程序猿，到底在做什么呢？<<<每晚坐在自行车后座上，我大声哼歌，双腿乱晃，觉得身披万丈霞光。但手始终在尴尬地僵持着，不曾挽过他的腰。他每晚送我到公寓门口，然后掏出手机滴车回静安寺。等车的时间，我们沉默，闲聊，四目相对，隔一江春水。直到我目送他上车，挥手再见。我在等。坐在自行车上等他说“你可以抱住我”而不是“你又胖了”，说冷时等他来牵我的手而不是“我要送你一副我的同款手套”，夜晚分别时等他给我一个拥抱而不是总结发言“你今天线代学得真好”。可是，等一个闷骚程序猿的告白，比掰直一个 Gay 还要难吧。但是，我真的喜欢他吗？我不知道。难道我只想做个玩家，在他这里打通关而已？我也不知道。<<<喜欢一个人，看他一眼，就能在脑海中和他过完一生。我也想过，如果跟他在一起，未来会是什么样子。至少很快乐。他用老张的口气说，“很多方面我们都很契合，什么都坦白说、明着说，从来不端着、不装腔作势。”我好久没有遇到像他这么默契的伙伴了。他懂我的文章，懂我藏着的那点操蛋的理想，懂我在世俗世界埋下的一毫米奢望。说白了，他是枚闷骚而有情怀的程序猿。如果遇上的是五年后的他，我一定会彻底爱上他。但现在，顺其自然吧。<<<而顺其自然的结果是，我越来越忙。考试，采访，写书，时间越来越少。他在微信上写给我的段子，我只能隔半天回一下“哈哈哈哈哈”，他问什么时候能再见面，我只能草草发个微笑的表情。就这么淡了。直到那天，我考完线代，昏昏沉沉从考场出来，看到他用锤子便签发给我的几千字留言。文笔好美，美得让我忘记了言语中的悲伤和无奈，只想一读再读。像他在那篇《程序猿老张》里写，“这次跟她一起相处的这段时间，就是我浏览她的代码的时间。我仔细阅读了每条代码和它们的注释，最后发现，她在我这里是跑不通的。”最后他告诉我，只能离开。——这枚程序猿啊，他什么都没说，却悄然在心中走过千山万壑。他不动声色地浏览代码，阅读注释，不动声色地交集百感，最后，只丢给我一个答案。<<<“我们还是朋友，对吧？”我小心翼翼地问他。“当然。”他说，“但再也做不成亲密的朋友了。”“那，如果我线代挂了，你还愿意教我吗？”“当然。”聊天记录就定格在这里。直到成绩出来，我线代真的挂了。补考前一个晚上，把搞不懂的题目啪啪啪用微信传他。半小时后，他传来一堆图给我。行列式、各种乱七八糟的符号用绘图软件画得一丝不苟。“我用一晚上重新把同济教材看了一遍，不时涌出一种“卧槽我到底在干什么”的想法，但毕竟答应你了，就要做到。”他说。“那，等我考过了，请你吃饭？”我有点感动，更有点想念他。“我回北京了。”……他悄然离开了我的五角场，回到他的宇宙中心五道口，摇身一变，成了知乎上“对生活讲究，原则上只加姑娘”的准大 V。<<<我们好像没谈过恋爱，但他在我心里，撒下了最美的一场雪。但遗憾的是，他并没有给我写过诗。依然谢谢你，老张。哦不，刘飞。,本人不是程序员直接上我前几天在ACM-ICPC诸如这种↑我是先拿到这个名单（笑抽）以后再看到的各个参赛队员 基本都是云淡风轻 放荡不羁 若有所思 还有一部分目光呆滞…总之就是无法将他们和这些队伍名字联系在一起 这些人就应该算是国家未来的程序员预备队伍了吧～还有 你们能想象我们学校计算机系头发已经花白的老教授在颁奖的时候说：“获奖的队伍是：今天萌萌哒 感觉自己吃了药队 红鲤鱼与第一次看到这么多理工科男生 (๑ᵒ̴̶̷͈᷄ᗨᵒ̴̶̷͈᷅)  真是涨姿势啊！！到底匿不匿 好怕被人打 算了还是不匿了吧…,"没错我是来炫耀男神（之一）的。生活单调？嗯……他确实基本不用任何SNS类的东西导致和大家联系都不多，因为他没时间用。不过这家伙为了找时间看书曾经用过达·芬奇睡眠法。（后来似乎因为导致内分泌失调所以放弃了，所以建议大家不要轻易尝试=,.=）有一次他敲我Q，说和我聊天是他两个星期以来第一次和别人交流。因为各种忙所以曾有半年没有剪过头发的记录。（“后来学会了自己理发，妈妈再也不用担心我因为酷似通缉犯而被警察叔叔抓去讯问啦~(*￣▽￣)y ” ←话说这是发生在男神身上的真事儿=,.=）不过他平时一有空就会在家里鼓捣各种东西：比如他初中的时候就自己编了个计算器。后来还考虑过造小型炸弹（只是考虑而已……嗯）。还组装过耳机。好像还有密码锁之类的……这只是冰山一角，他造过的其他东西还有很多，其中还有说出来肯定会被查shui表的囧，还有一堆我不知道的……觉得现有的播放器不好用就自己编了个，用来听古典乐，音质完爆其他播放器。特别喜欢猫咪，对流浪猫特别好，估计他要有时间的话会养一屋子吧…………至于闷骚什么的嘛……所以我觉得吧……环境什么的并不是生活状态的决定性因素啦。虽然这大概是个特例吧_(:з」∠)_最后，我爱技术宅！( •̀∀•́ )y-------------------------2014年3月24日更新造福妹子们的小分割线^_^)----------------------------因为时间太久远没有找到原来的曲单，对不起TAT……于是我就跑去问他最近在听的能平静下来的音乐，他给了我两张专辑。另，一边听一遍讲的其中一首似乎是------------------------2015年6月23日想起来更一更----------------------男神现在有一美丽文静的女朋友，不出意外的话应该会在不知道久不久的将来顺利完婚~希望他们幸福=w=【当然如果婚礼在国外的话，份子钱就没法到位了啊ww",在回答这个问题之前，很想问一嘴，我们程序员吃你家大米了？吃你家大米了？吃你家大米了？天天被调侃。大家不都是社会主义好青年么，看我们程序员好欺负撒？什么事咱都不能以偏概全是吧，闷骚的程序员的确有，但是闷骚的设计师也有啊，闷骚的会计也有啊，闷骚的文案也有对吧。闷骚是一种性格，和职业无关。不过，身边不少程序员的闷骚事迹还真是挺逗乐的，整理一二，权当博大家一笑了。↖(▔▽▔)↗补充提问里提到的“程序员A，80后，工作期间大概连续五六年没谈过对象，后来终于认识了一位喜欢的妹子，聊的很欢乐，打算让对方做他女朋友，鼓足勇气在微信上跟对方表白，妹子虽然也对他有好感，但是感觉在微信上确定关系非常不正式，于是主动约这位程序员小哥出去，结果见面后这位小哥怂的啥都不敢说，设想的n种表白方式都没用上，最终还是妹子先开的口。A说了，他喜欢被动，啧啧。程序员B，花了好几天给心仪的妹子挑了一款礼物——一个钱包，说妹子快过生日了，打算送她做生日礼物，结果半年后再聊起这个话题，这钱包还没送出手，B说了，没找到合适的时机。那过生日的时候呢？生日人家跟闺蜜过了，没约出来；那其他时候呢？其他时候没有送礼物的理由……程序员C，办公室“老司机”，是真的闷骚——表面“闷”，实则“骚”，平日里讲话不多，低调码代码。业余时间接了一个交友网站的维护工作，结果呢？通过“职务”之便，换了好几任女朋友，我们认识的那一位，都是上上任了。真的是闷骚的表面下有颗狂热的内心啊。以上情形纯属事实，下面再来八一个亲眼所见的，如有雷同，可能是巧合。发文之前，我们已经象征性的征得了小赵的同意，并以“为公司发展做贡献”为由，对他进行了采访。故事的名字是：程序员小赵因闷骚而“一厢情愿”的恋爱故事。小赵的“失恋”让大家没想到，因为，据他说，在这段感情的“正常运行”期间，自己已经考虑到孩子大学要报考的专业。大家都知道他已经熟读了10几本恋爱及婚姻心法，所以相信他说得是实话。公司里的同事，见证了小赵和妹子的初识，妹子代同事前来办点事，误打误撞地进了我们的办公间。当时我们刚完成一个项目，小赵一改电脑面前目光呆滞的神态，正端着一杯普洱眉飞色舞的科普普洱的鉴定方法。妹子从小赵身后的门走入，清清爽爽的声音“请问xx是在这里办公吗？”击中了侃侃而谈的小赵骚动的内心，一个猛然地转身出卖了他慌乱的心情，小半杯普洱不偏不倚地击中了妹子的白色外套。道歉期间，小赵发现妹子不仅声音好听，还漂亮、温柔、善解人意，正是他喜欢的类型，于是小赵假借“外套洗不干净就给赔新的”为由，死皮赖脸的跟人家要了电话号码，妹子走后，小赵脸上挂着喜中五百万的表情，哼着小曲儿的扎进自己的工位，对坐在自己身边的同事说：“哥们儿的春天要来了！”小赵真的进入了恋爱的角色。加了妹子微信，时不时关怀一下对方的工作生活；尽可能地推掉下班后所有活动，加班也是能溜就溜，为的是能和妹子约个饭；妹子前一秒发状态说自己饿了，他下一秒就在外卖给妹子点了个单；听说妹子会拉小提琴，午休的时候还能隐约听到他耳机里的小提琴声。生活中，小赵一改“简约随意”的风格，脱掉那件从大学就一直陪伴他的shi黄色外套，换上沉稳内敛的黑、灰、白；脚上不再是那双泛黄的运动鞋，偶尔也穿穿皮鞋擦擦鞋油；头发再也不是刚炸完碉堡的样子，每天都整理的清清爽爽，还别说，经过这么一番捯饬，小赵俨然成了“别人家的程序员”。同事调侃：小赵，没想到一杯普洱泼出个女朋友，你该买两斤普洱孝敬一下月老。小赵并不说什么，略带笑意，一口接一口地抿着普洱。同事眼中的小赵，最大的爱好就是挑战各种“姿势”的bug，别人放假游山玩水，他放假在电脑面前一坐就是三天；做的项目该简单的简单，该炫技的炫技；曾经身无分文挑战西藏穷旅，回来的时候像个非洲难民；一通电话能将同事离家出走的儿子“骂”回家；能将公司组织的滑雪旅游剪辑成《闪灵》。所以大家觉得如此有阅历、有情怀同时又有恋爱婚姻大法加身的小赵，应该很快便能够跟妹子牵手成功了吧。过了没多久，也就两周后，小赵又换上了他那件征战沙场多年的shi黄色外套，整个人也安静下来，不再讲如何惩治熊孩子，不再安利好看的电影，要么眉头紧锁坐在电脑前敲代码，要么若有所思抿着普洱。小赵闷了，办公室的气氛也沉下来。难道小赵和妹子已经结束了？按理说小赵的骨子里流淌着骚气的血液，对妹子又这么上心，怎么会以失败收场？好奇的我们认为他需要找出这场恋爱中的bug，于是小赵聊起这场恋爱行为，合着都是内心戏——微信上的嘘寒问暖，一般以妹子礼貌的答谢而告终；因为弄脏衣服的事，小赵执意要请妹子吃个饭赔礼道歉，结果约饭只约出过这一次；给妹子叫外卖，小赵觉得对方应该可以想到是他，所以只字未提，幻想着妹子感动的表情，但事实是妹子不知道外卖是谁送的，所以都没敢吃；最重要的一个问题在于，小赵从来都没有对妹子表达过爱慕之词，他觉得对方完全可以聪明到猜出他的内心世界……同事问：那么，“分手”是怎么回事？小赵答：她发了朋友圈。她和她男朋友。从妹子的角度来说，就是有人不小心弄脏了她的衣服，为了表达歉意，请她吃了顿饭，就酱。写到这，又瞅了一眼这个问题，“程序员很闷骚么？”嗯，有的程序员，的确是很闷骚的。,刚毕业那两年，有一天晚上，发现一个自己偷偷喜欢的女孩上了QQ，（真的只是偷偷喜欢，基本没有说过话）鼓起勇气和她寒暄了几句，然后友好的互道晚安。第二天晚上，发现她又上线了，激动呀，想找她聊天，但又不知道说什么可以显得自然轻松，于是去改自己的QQ签名，“等你”，“想聊天吗”，“等你和我打招呼”，“waiting”，“waiting for”，“waiting for you”，三个小时过去了，那个女孩还在线，我一直都没敢和她说话，只是在这边没完没了的改签名，心里思绪万千，突然觉得“我在搞什么东西”，于是把签名改成“觉得自己莫名其妙”，然后去睡觉了。,发小在网络公司实习，办公室里一窝程序猿，就她一枚妹子。刚才她发来信息吐槽说，今天邻座小哥换了个,谢邀！任何行业都有人活得很单调，任何行业也都有人活得很丰富多彩。与是否程序员无关。看了  的炫耀答案，补充一点：有时候人们觉得另一些人生活单调、闷骚，只是因为跟他们不活在一个世界里。当我们仰望星空，一颗星星不过是一个只因为我们不了解那个世界，在我们看来，那只是一个,，我觉得应该多说一点才好。闷骚，应该是指表面蛋定，但在某一特定场合或环境中会有出人意料的表现，亮瞎各位的眼。首先作为一个程序员，蛋定是必须的，就算入行的时候没有，久了以后自然就有了。我认为有两点很重要的原因：所以，一个合格的程序员必需是蛋定的，也必定是蛋定。当然，蛋定不代表不会有兴奋，惊讶，伤心，悲愤等等情感，只是因为提前在脑海里预演过了，所以不会有很明显的情绪表现出来。其次作为一个程序员，不说技能点全满吧，但总是不断地或被动或主动的学习新的技能。主要有以下几种get新技能的方式：程序员的闷是职业特点，因为他们在编码的时候，不能被外界干扰，当他文思泉涌的时候，就会完全沉浸在代码的世界里面，不再理会周围的世界。而程序员的骚仅仅是厚积薄发而已。有人问我：你整天顶着这些代码，不枯燥吗?我脱口而出：你看到的只是一屏代码，而我看到的却是一个世界！,不请自来，先自爆身份本人出身信息工程系，历任前台美工，用户体验设计，产品逻辑设计，产品设计，产品包工头，所以我身边——都！是！程！序！员！（有的时候也这么称呼自己）多说几个故事圈内公认的最像程序员的程序员。到了什么程度呢？大二那年，我还是一个吭哧吭哧的美工。小m正在吭哧吭哧的积累代码。有一天这货突然兴致勃勃的卷着一张逻辑图给我，说要写一个程序送给他正在追的一个女生做生日礼物，求我帮忙做用户界面。那是一个pc端的个人管理应用，功能包括定时开关机，任务提醒，记账，桌面管理等等等等。我看过之后非常兴奋，连夜画了一个自认为浪漫无比的主题。然后这件事就如大家所预料的那样没有了然后。问题是，当时我们所有知道这件事的人都觉得这件事非常的酷，而且现在有一部分人仍然这样认为。后来，我终于开始质疑小m的情商，于是有了整个大学阶段最经典的一个赌局。我和大B（这货的故事后面会提到）赌他和小m谁能先找到女朋友，我赌的是相对奔放的大B，而大B却赌小m（注意，没人关心我能不能找到女朋友）。最终我还是输了这一局。赌局设下不到一个学期，小m已经开始赫然跟班内一个学霸级的女生出入成双（了半个月）。大势已去之后，我、小m、大B单独聊过这个事，小m的解释是当时他和那女生都对一项技术比较感兴趣，而小m又是班级里这方面最强的，所以就会经常在一起讨论。半个月后，问题解决了。同为程序员，我们当然知道对程序员来说，半个月成双入对最多可能取得什么进展，于是纷纷八卦他们这半个月内有没有实质性进展（比如搭一下肩膀）。小m对此讳莫如深。只是说，总会尝试些其他的。再后来，小m的本科生活似乎没什么变化，不停刷代码升级，和所有人一样钟情冷笑话、数码产品，游戏和，咳咳，片儿。他读研究生的那几年没怎么见过面。但是从社交账号上的动态来看，小m开始广泛涉猎文艺类书籍。有一天他突然在qq上问我——说实话，你觉得我这个人怎么样？我如实回答。他又哀叹。山东这边的妹子个子太高了，我最近报了个健身房，准备健身。忘了说了，小m江西人，在山东读的研究生。再后来，小m到了企鹅厂工作，我们可以经常见面了。身材几乎没变，还是孑然一身。阅读的涉猎面变得更广，笑话更冷，热爱加班，关心政治。在我们眼里，这个人非常有趣！大B是圈里公认的最闷骚的一个，而且我坚信即这跟他是个程序员无关。当时那个赌局我之所以押注在他身上是因为，这个人是我认识的程序员里最文艺的一个，绍兴人，自带闰土的文风。经常在个人主页里指点江山，回复者女生颇多。然而，这货硬是将初恋保留到了研究生。研究生毕业后，大B自称写代码写出了阴影，毅然放弃了开发的路径，转去做了策划，但还是摆脱不了程序员的身份。前不久跟大B公婆俩吃饭。聊到大B本科时候的绯闻。当时传说大B喜欢上隔壁班一个长相温婉（说计算机系没有长相温婉的女生的滚出去！）的女生。没想到这事竟然是真的。然而，程序员的用词堪比作家之精准。我们全程只说喜欢，都没用到过追这样的字眼。当着媳妇的面，大B供述如下：只是当时一起上课，看起来，这个女孩和其他人不太一样，多了一分好奇，却总也没机会深入了解。后来忙起来了，这事就过去了。大B的媳妇是难得一见的贤妻良母，目前大B在广州做游戏策划，告别了一线开发，收入不太乐观。大B媳妇毫无怨言，两个人合租一个城中村的套件。生活简单却充满方向。说到底，大B媳妇看中的是希望。在大B身上能清晰的看得出聪明，上进，有责任心，乐观这些性格。都说这是做程序员留下的底子好。一日计算机，终生程序员，小毛如是说。每次大B被人说闷骚的时候必拿X爷来挡枪。说来此两人甚像，仅有的一点区别，大B缺了X爷的一点性情，X爷少了点大B的文艺。以前在知乎上看到有人解释性情——性情就是一个巨牛有上天屠龙，在地打虎的绝技，却偏不把这当回事，就会给这个美好的世界卖萌，敢对着石头说我爱你。当时读完第一个想到的就是X爷。大四那年，系里盛传X爷暗恋隔壁班一女生（注意我的用词），最终毕业酒会上，X爷借着酒劲拨通了那个电话。说明来意之后， 畅谈革命友谊，然后送去了美好的祝福。X爷研一那会儿，大B已经有了家室。我去X爷寝室溜达，正看见X爷对着电脑发愣。被我叫回神来就拉着我问：大飞，你帮我分析分析这个女生咋想的，然后点开了XX佳缘的网站。。。说实话，我也单身那么久了，这网站一次都没去过。去年X爷开始找工作，来深圳找了一圈被召去北京去了号称是国内的脸书的那家网站。临走前，一班兄弟送行兼挽留。X爷毫不动摇，承诺会定期回来看我们。送走了X爷，我们自己分析，其实骚爷的选择是对的。老P和小m、大B、X爷不是一伙的。是个半路出家的程序员。所以身上总有些不属于程序员的特质。比如老P相对注重打扮，长得高高瘦瘦，热爱运动。老P是我小学同学，过年的时候一起回家，在高铁上聊起他在微信上认识一个南京的女孩，前不久已经来深圳玩了一趟了差点把我眼珠子惊掉了。按我的逻辑，网恋这种事绝对不是程序员能干得出来的，虽然我也没有可靠的证据。回家的路上，高铁里信号时断时续，老P还是坚持着全程跟他的女友聊着qq。看得出来那女孩很黏他。大概是我单身的太久了，这种情况下，总是想不出来应该聊啥。偏偏老P还不给我看，一个扯淡就把我打发了。一个人百无聊赖想起来身边有个同事跟我抱怨过女友太黏人，每天聊微信耽误他打游戏。其实这样的事，据我所知在程序员身上很少发生。又过了一会儿，信号彻底断了。老P翻出电脑，跟我聊技术，随手建了个文本框敲了几下丢到浏览器里指给我看——你看我写了个框，好看吧？说了这么多，那程序员到底闷骚么？其实只是他们不太愿意像其他人那样与世界沟通。有句话说做技术的做到最后拼的都是情怀。每个坚持下来的程序员其实靠的都是成就感。创造和毁灭一个东西得巨大成就感。因此我们通常比其他行业的人更热爱自己的事业更热爱自己的产品。这也就很正常的赋予了程序员专注、坚韧、谨慎、有责任心的性格。但是他们也温柔，也善良，也爱这个世界。很可能是用充满逻辑的一种方式。这种方式有一个更为大家所熟知的名字——闷骚。你看，我定义了自己的情怀，好看吧？,怎么又来这种问题，程序员是喜欢自黑，但其他行业的人也来这么黑就变了味。“我母校超烂的，好多硬件多少年了也不更新”“对，你母校确实很烂”,是的。我是程序员，我闷骚。我是女的，明骚人家会说放荡。,  我认为：  题目：我眼中的程序员  背景：我的哥哥是一只  小时候哥哥见我对学习还有点儿兴趣，就跟我说，要多出去浪…嗯，是多出去走走，看看更广大的世界嘛～于是发生了以下事情。   NO.1初中时，我第一次践行哥哥说要出去浪浪的…走走的言论。  去哥哥所在的大学找他玩，然后见到了他的女盆友，发现他女朋友跟他一年前左右给家里人看的照片不是同一个了。我就深深的觉得大学果然是一片美丽的土地，连哥哥这一般的很的水平都有不一样的生活了呢。 小结：一个长相一般的男生，无身高、家境等优势，计算机系（好像是这个系名）竟然在大学期间有两个以上女盆友（我当年知道的就两个）！你觉得他闷骚！？！？  NO.2依稀记得，那年我在念高中，哥哥在读研。  他在重庆，他女盆友（不知道还是不是我见过那个，哈哈～(¬_¬)）在长沙。突然有一天，哥哥从长沙回来了！然后，我就知道哥哥不知道什么时候跑到长沙陪女盆友一个礼拜，然后在身上貌似就两千块左右的情况下，给女盆友买了个一千左右的包！瞬间我被惊吓到了！哥哥竟然带包千里赴长沙会女票！我们家的穷逼孩子竟然如此奢侈？！当然，哥哥并没有装富二代，他的朋友同学也知道他的家境一般。所以，他就是为博女票一笑，要浪漫并且大出血！  小结：这么奔放，哪里闷骚？  NO.3艺考时，以看重大为名，我溜到重庆去了。  又依稀记得，哥哥领我胡吃海喝之后的一个晚上，跟我聊起了泡妞一事。当时内心小激动啊～哥哥要交我人生必备技能呢～^_−☆（虽然，我不明白为何妹妹会觉得那个是必备技能…）  哥哥说：“追女孩，其实就是耍无赖！”  我：“噢～～哈！?(･_･;?不对啊”  哥哥：“不对什么，你看，哪个能追到妹子的不是耍无赖？妹子冷淡，依旧P话多；妹子出远门，千里追着走；妹子不舒服，温暖使劲儿砸。”  我：“那人家有些人追妹子，很多年的，真爱啊～”  哥哥：“那叫持续耍无赖！”  小结：跟自己年未满十八的妹妹说这些，闷骚吗？不闷骚。  NO.4又又依稀记得，我刚上大学。  在大一的某个晚上，哥哥电话打来说：“大学不要着急谈恋爱，大一先看看，熟悉熟悉环境。大二呢，就有空了可以好好谈个。大学呢谈个恋爱还是可以的，不过，不谈也很好不着急。不要跟太远的同学谈，谈远了家里人担心。”  我：“放心吧…我们学校男生质量不好，才不要谈恋爱！”  哥哥：“哦～那你们班没同学追你？”  我：“不知道唉…就是一个男生要我做他媳妇儿，河北的。好奇怪～又不熟！”  哥哥：“那种你忽略就好了，同学可能说错话了。平时要注意安全，对新同学要懂礼貌啊～”  我：“放心，我一直都很懂礼貌的，又不是小孩子了。”  小结：不结了。………………………………………………抓机能源不足……………………………………………………………  NO.5渐渐的……我大二了。哥哥知道了，经检验合格后，学校可以辅修双学位。  于是乎~哥哥问我：“学校双学位有想学的么？”  我：“有！想学生科，回去种树~”  哥哥：“那就去学啊~喜欢就好好学，不过学双学位很忙的。学校有人追你么？”  我：“有，一个学长，一个学弟。”  哥哥：“修双学位很忙的，不能好好的陪男朋友，谈恋爱时间不足。还不如把时间放在考证啊~辅修学位上面，男盆友的话，以后等你大三了哥哥给你看看我们研一的学弟。”  我：“恩！好的。”  正所谓，人是会长大的。然后我长成了一只大三单身狗！今年过年回家哥哥领了嫂嫂回来，然后问我谈恋爱了没有。我内心是不想回答的，因为明明是你跟我说不要谈恋爱，把你自己的妹妹坑成了大三单身狗，你竟然还好意思问我有木有拍拖！！！！！生生坑成了大三老阿姨啊~。学弟都觉得我是“刀山”啊！要求死高啊！一定很难追啊~居然大三都没有男盆友。~~~~(>_<)~~~~   但是，我是一个淡定的人。于是我冷静回答：“没有。我是会谈恋爱的人么？”  然后，那只程序猴子用起了老战术，：“恩，没关系你还小，等工作了，哥哥给你相看下同事。大学谈恋爱不小心就谈到外省的，不好。”  哈哈~你当我还会被坑么？才不会！我已经成长了好不好~进化了！据说在大四以前跟室友来一场轰轰烈烈的恋爱会很有纪念意义呢~嘿嘿嘿………………  大结：看~这么会坑妹妹，会泡妞的程序猴子，怎么可能是闷骚？简直就是 明 ！骚！ 好！ 不！ 好！————————————————————————————————————————————————————————以上是不正经篇————————————————————————————有心情再来添加正经篇——————————————————————————————,程序员闷骚怎么了！就喜欢闷骚怎么了！网上聊的好High 现实中脸红害羞不敢说话 多可爱！,程序员都很内秀，只是有时候要长时间面对电脑，显得不爱讲话。他们一般都有自己很深层次的爱好，他们是博学的。因为爱在网上看段子，所以，随便丢来一句话，就会让你笑得肚子疼。因为精神的高度专注，有时候给人一种反应慢半拍的感觉，那只是他们对你不在意，不感兴趣的表现。人都是有惯性的，程序员都喜欢坐着，因为他们习惯了这个姿势。但是，他们的思想是奔跑的。有时候还像风筝飞来飞去。你根本抓不住。每一个程序员都像一个冰山，你以为他很渺小，但你不知道他藏起来多少优点。当你遇到一个程序员请善待他，挖掘他，你会发现他像一个万花筒一点都不会闷。程序员，微笑，萌萌哒~,你没发现闷骚的都在看而不答吗。,闷骚还是看个人本身性格吧，感觉还是有很多活跃的，另外，不要以为程序员都很靠谱，劈腿的还是一大把一大把的,实力反对这个回答，我们公司程序员可不是这样，程序员吃你家大米啦，还说程序员闷骚！！老王跟老张都是2个资深程序员，一个是Java高级信息系统项目管理师，一个是14年行业经验前IBM工程师。老王说自己唯一开心的时候就是编代码的时候，就算天天加班心里也是一百个乐意五一放假的时候因为被媳妇拒绝带回家，干脆就在家写代码，最后写了一个程序员老黄历出来还可以在线测凶吉，写代码起手式必备。不仅每次写代码之前算一次，晚上加班回家前也会算一卦往往算出来的结果与实际都不太符合，代码写好了回家也会挨媳妇骂骂他只有代码没有媳妇，回家这么晚袜子总是她来洗心疼媳妇，老王就在淘宝买了个护手霜选了半天选了个最近流行的“马油”，结果到手之后才知道是去脚气霜为了不浪费，老王天天在办公室抹，还美曰其名熏蚊子老王不是第一次给媳妇挖坑了，拍了张媳妇大饼脸的照片给公司所有人一一传看媳妇晚上恰巧来送饭，看着周围同事忍俊不禁的样子才知道老王干了这样的好事不过老王媳妇也习惯了，老王总给她挖坑跳老王公司那群运营部的小妹子对老王和媳妇的故事简直数如家珍，都能娓娓道来老王媳妇就是担心老王见父母的事情，父母总不同意老王，怪老王只是个程序员老王也总催媳妇赶紧出阁，总能正儿八经的继续坑不是？为了见媳妇父母，老王大清早就起床去购买礼品选来选去就选了个VR眼镜，想着这样丈母娘跟老丈人以后跟媳妇视频能看的更清楚老王媳妇看见了笑中带泪，心里却铁定了非这个人不嫁老王不知道媳妇的心情，给媳妇擦泪还说这有什么好感动的，我一早就知道自己是个好男人其实老王真是个好男人，追媳妇的时候天天车停在公司楼下在车里一边敲代码完成工作一边张望着媳妇出现没有只要出现就立马收起笔记本，装做认真思考的样子，不知道从哪看到的女人最喜欢认真的男人老王第一次给媳妇送礼物的时候，买了6双鞋子，长靴、短靴、凉鞋、高跟、雪地靴就连拖鞋都没忘了买想着媳妇一年四季都穿着他买的鞋，哪还有男人敢继续追她其实老王可疼媳妇了，每天加班是为了赶紧买房把媳妇娶回家给媳妇买很多裙子是怕媳妇在闺蜜面前少了对比的资本老张是个严谨的人，非常看重数据的重要性多年的工作经验，老张依然不会一点办公室政治笑呵笑呵的跟下属开玩笑，从来没有一点老板的架子漫威英雄如数家珍，听说运营部的小v要去追妇联首映，老张还千叮万嘱不要剧透，千万不要剧透边说边继续开始敲代码，割舍了最爱的电影只因为答应了周六要陪着女儿去看老张有天早会迟到了，自己道歉说因为早上教女儿做题没做出来老张对女儿的疼爱不言而喻，通常媳妇打电话催他加班早点回家没用，只有女儿一声嗲嗲的“爸爸”才让老张匆匆忙忙收捡电脑昨天，谢耳朵大婚，老张表现的比当事人还要兴奋还拿着一张谢耳朵诅咒的表情包在公司群里面发我是小v最爱写文章的运营部大妹子,泻药。已经被楼上一堆秀恩爱的闪瞎了氪金狗眼。为何我的手中突然出现了火把和汽油桶。让我来讲述一下我对某产品男A君的产品试用测评。--------------------------------------------------------一、产品介绍第一次和产品男A君接触是在豆瓣勾搭上的。那个时候他刚从北京奔袭到上海跟着七八个小伙伴创业，每天夜晚对着日本籍大姐姐们唏嘘短叹人生苦短寂寞难耐，就上了豆瓣恋爱组蒸女友，还在帖子里放了类似于监狱资料档案式的照片，还觉着自己特别英俊潇洒。对，聊了几次，交换了微信，给了照片互相觉得对方还可以，就果断地约饭了。二、拆包体验一开始约喝下午茶。我定的逼格贼高的餐厅，定的时间，付了预订款，而且准时到了。不幸的是，预定的淘宝卖家坑了我。当时我的内心被暴漫脸踩出了一片泥泞。但是没关系，身为坚挺地见识过技术产品UI群雄4B大场面的高贵冷艳城墙脸少女，我还是果断地先入座。结果半小时之后，A君终于姗姗来迟。【跟妹子约居然敢迟到，扣分扣分】果然是不上相，果然还是圆寸。我内心对自己淡淡说道。没错，A君长得比照片上要好看一点儿，戴着一副黑框眼镜，穿着大衣，收拾得居然还挺小资。不过老娘早就料到了，公司几乎所有产品IT都这副鸟样儿，【既然这样，为何婚后看上去还会更歪瓜裂枣呢？这得问他们太太。】A君非常抱歉自己迟到的行为，并说明了理由。【然而这并没有什么卵用，迟到是既成事实，借口分分钟可以想出一堆。】之后开始面试一般的自我介绍过程= =凸不过没关系，小生一直都是炒气氛小能手，于是试图把话题从僵硬的职业介绍切换到兴趣爱好交流上。结果说到旅游。A君眼睛开始放光了：“我的足迹南到厦门，东到朝鲜，你若有时间可以看一下我的朝鲜游记，还被列为了blabla网站的精品游记...”滔滔不绝。至此，小生不由得长吁一口气~【虽然此时心中在吐槽还没老娘一半的里程呢…】为了显示我是一个既有逼格又接地气的好女孩，我们决定晚餐去吃火~锅~~~~~之后就是我油腻的脸衬着他满是雾气的眼镜。由于初见实在是有点失败，因此吃完海底捞小生就挥一挥衣袖决定回家碎觉。睡前瞄了一眼手机，看到无微信提示，就把此次见面抛诸了脑后。三、第一次实际测评若干个月后【没错你没眼瘸】，我居、然、收、到、了、他、的、微、信。起因是他未成年之前暗恋了很久的青梅竹马小学女同学要结婚了，邀请他参加婚礼。他若独身前往倍感凄凉。重点是：包吃住。要求是：请务必打扮得光彩照人、艳压群芳。当时，我丝毫不知道这货又滚回了帝都。还天真地以为是都从我大魔都出发呢。出于信息不对称和人道主义精神，小生毅然决然地决定援助当然其实真正让我决定如此跋涉的原因是：老娘一个月没出门溜达两圈，又闲得慌了。因为此事的牵绊我们又重新联系上啦~为了不穿帮，在穿着上、言行举止上等一系列细枝末节上呈现出友达以上恋爱未满阶段的感受（这种诡异的要求是他提出来的），我们对了很久的口供。期间对他的认知就如同安装了安卓系统的三观一样又重新刷新了一遍。哦~原来这个产品是个段子手，是靠搞笑来抚平改需求码农的悲愤的。哦~原来收拾完是这样的~还蛮帅的~哦~真看不出来，居然还是“学霸”。由于小生一直秉持着”看上他就强奸他，反正不犯强奸罪“这样毫无节操可言的行事准则的，于是到烟台的时候小生就果断地推到了他。体验感是：之后就陆陆续续保持了一段时间的联系。四、第二次测评后来趁着端午驾校师傅还没对我下练车圣旨的时候，我去了趟北京，旅游。联系了A君来接待我。不得不说，唯一不绅士的一点是：居然在接触这位理工男的时候，我发现了几个真相：1、逼格高都是装出来哈哈哈哈哈哈，见我的时候的小资行头是他为数几套不多能见人的冬装。平时就洗的发白的T恤，运动鞋，牛仔裤。衣橱里果然还是格子衬衫和条纹衬衫的天下。2、误交损友对人生是多么具有破坏性的事情：A君把他身边朋友几乎所有大大小小挫事儿都跟我吐槽一遍。挫事儿传千里~3、即使是一只单身业内行家狗，回家面见江东父老尤其是参加小时候暗恋对象的婚礼的时候还是会使劲找个好看的姑娘打肿脸充胖子。4、总的来说，闷骚和温柔并济吧-------------------------------------------然而以上一切都并没有什么卵用。深爱就是把最好的青春留给你，然后我独自向前。他心中既有了能为之写诗的姑娘，那我也只有收拾行囊继续我走遍世界的旅途。他爱的是,HHHHHHHHHHHHHHHHH今天我我是专门找这个问题来回答的，在我们学校动漫社里面一个后辈群名称后缀是一串十六进制Unicode码，一开始我并没有在意，直到今天在学习python的时候忽然想到了他名字后面那一串，然后我鬼使神差的把他名字后面那串复制了下来丢到了然后得到了这么一串被我打了马赛克的是我们社团一妹子的名字学习真是能给人带来快乐的事情啊然后我当机立断，马上改了我的群名字被我打码的依然是社团里那个妹子的名字233333333333所以说，你说程序员闷骚么？当然闷骚啦！
有哪些算法惊艳到了你？,,,,,,,,,,,,,,,,,,,,,
雷军写代码水平如何？,在网上看到这份雷军20年前写的汇编代码：,1988年，雷军在武汉大学就读大一期间编写的Pascal程序，在他大二时就被编进了新生教材。1989年，大二下学期的时候，雷军写了一个RI（RAMinit，清内存的小工具），持续十多年都有人在用。后来雷军把这款工具软件完全免费，并且开放了源代码，也算国内最早一批开源的免费软件。同年，雷军和1990年，雷军和1990年前后，雷军花大概两周时间破译了当时流行的中文字处理软件WPS1.0，又在原来的基础上做了一些增强和完善，不久之后，由他解密的WPS版本成了国内最流行的WPS版本。1992年初雷军进入金山软件的珠海研发部实习，7月正式加入金山软件，8月15日，由雷军牵头的金山北京开发部成立，主要负责1993年5月，雷军参与研发的金山Ⅵ型汉卡，及WPS-NT，广泛应用于行业，极大地提高了办公效率和工作质量，市场占有率高达90％以上。1993-1995年，雷军参与金山“盘古计划”（WPS Office前身），负责双诚电子表（对标excel）开发。1995年，雷军利用休假时间（大概2-3个月）全部重写了BITLOK 3.0（改版前有约3万行代码），在原有经验的基础上，使用了一些突破的技术，彻底解决了过去用户提出的各种问题。1995-1997年，雷军带领团队完成WPS97开发，这款软件最终完成了3万套正版销售。1997年后，雷军开始更全面地转型到企业管理领域。1998年，28岁的雷军出任金山总经理。当时雷军白天当总经理，晚上还继续写程序，提高技术水平。紧接着就发生了那个，“金山新同事将雷军电脑格式化”的事故，雷军不得不将所有精力放在管理上。2000年，雷军编写的《2002年，在雷军的领导下，100多位工程师历时3年，舍弃了积累十余年的程序架构，将500多万行代码全部推倒重写，为了降低用户学习成本尊重用户使用习惯做出了一款与微软完全兼容的产品,老金山人都知道雷总当年是写代码出身为了金山发展不得已去做总经理金山那代老人都不愿意去当领导管事只想写代码结果雷总上任安排新助理说把我电脑清理下（擦干净的意思）那小哥耿直的把雷总前半生的心血给格式化了然后......然后雷总只能挥泪安安心心去做总经理了至于他的代码水平他自己也说了,刚发现被WPS官方翻牌子了，莫大的荣幸。不送我个会员嘛（狗头）这个我看好像没什么人提过。1990年时，雷军第一次知道了WPS，发现WPS作为文字处理软件非常惊艳，想自己弄一套。但当时WPS和汉卡配套搭售，一套要2000多块。这可是90年代的2000块。按照雷军的说法，在80年代刚刚改革开放的时候有一个说法叫「万元户」，可能现在白万富翁都没这样的感觉。虽然90年代万元户没有那么稀奇，但4000块依旧是一大笔钱。顺带纠正一个特别广的谣传，就是有种说法「雷军毕业时候已经赚了一百万」，这是完全谣传，雷军自己说法是毕业时候存款是4000块，这里面包括各种稿费、奖学金、创业收入，只是说开玩笑说自己4000元差不多该有现在半个百万富翁的感觉了，不是真的赚了100万。话说回来。当时雷军虽然奖学金很多，已经不用家里人付学费了，但2000元实在是一个天文数字。所以他就把WPS破解了，还移植到了普通电脑上。雷军自己的说法是这样的：「这可不是一件容易的事，我几乎有2周就没怎么睡觉才完成了WPS的解密。而使用过程中，我又在原来的基础上做了一些增强和完善，不少朋友都觉得很好用。后来我解密的版本在当时成了国内最流行的WPS版本。」求伯君后来自己也说市面上有三个破解版本，雷军的这个是最好的。其他故事还有很多，比如雷军大学时候合伙创业的三色公司曾经山寨金山汉卡卖钱，结果被大公司套娃山寨卖到低价挤出市场。这里还有个有意思的事情，就是最后三色公司破产了，雷军毕了业去了北京一个航天研究所工作，但业余时间还是喜欢在中关村逛。90年代的中关村里依然有很多80年代时的著名程序员在活动，比如还有后来创办连邦软件公司的所以雷军周一到周五早上工作，晚上回家开发软件经常一干就到凌晨，周末再去中关村。这是雷军感觉最孤独的时候，没有一个真正互相理解、有共鸣的人。求伯君足足劝了雷军一整天。根据两人回忆求伯君还请雷军吃了一顿很好很贵的烤鸭。虽然求伯君是几乎所有程序员的崇拜对象，雷军也不例外。但雷军考虑再三没有立刻答应。求伯君也没有勉强，让雷军再考虑一下，说第二天中午再来找他。第二次见面时候，求伯君谈起自己一个人写WPS的经历，曾一年半时间内生了3次肝炎，每次都要住院一两个月。但病痛其实不是求伯君最大的痛苦，真正痛苦的是代码上没人交流「碰到问题没人可以商量，资料完全要靠自己查。喜悦也没人懂，没人可以分享」，雷军对这种感觉很有共鸣。雷军终于还是被就此雷军在金山一干就是16年。期间在求伯君的强烈建议下转管理岗，期间还有那个有名的被同事（不过其实格式化了的代码大部分都有备份，只是有半个月工作量没了，但后来因此一放就放下了。）28岁雷军任金山副总裁。多说一些求伯君和雷军两个人的“金山情”和WPS情怀，这是我觉得非常具有堂吉诃德般「明知不可为而为之」的故事。WPS其实一直是金山最烧钱的项目。其他的无论是《金山打字通》《金山词霸》包括金山游戏《剑侠情缘》等等的赚来的钱都用来往WPS里面投，WPS活像个碎钞机。从商业角度来看，坚守WPS简直是百害无一利的选择，放弃它的话金山的日子肯定会舒服很多。尤其《但求伯君和雷军选择了坚持，无论变更多少方式，金山始终都坚持把WPS做了下去更新迭代，没有放弃办公室文字处理软件。“民族软件”的名头听起来很伟大，但对金山来说情怀和现实的碰撞真的是很煎熬的。雷军后来回忆，今天这个员工走了，明天那个人萌生去意，看着金山墙上的口号“让我们的软件运行在每一台电脑上”的口号心里百感交集。这是金山的梦想，但为了这个梦想金山放弃了太多了。期间金山一度遇到过现金流受阻，发不出工资要关门的绝境。最后是求伯君把自己的房子给卖了给员工发了工资。所以金山为了坚守WPS走了一条最艰难的路，也错过了很多机会，几次上市尝试都比较坎坷。这也是雷军后来退休三年中反思，得出“顺势而为”结论的重要契机。可以说小米代表了雷军“顺势而为”的思想，那金山就是他“逆流而上”的见证。2007年金山终于成功上市后，雷军没有喜悦。他曾经梦想要战胜微软，结果用雷军的话来说“一个照面就被对方干翻了”。现实一次次挫折，最后凭借敌后游击战做出了一系列其他软件维持生计，最后因为游戏收入弯道超车才完成上市。雷军只是感觉如释重负，终于对金山有了一个交代。即便是上市当天，雷军也对镜头说“我的心情其实很平静”。上市以后雷军就想要离开金山，好好休息一下。求伯君的说法是，本心是真的不想雷军走。但是自己也是看着雷军16年来几乎每天都十多个小时拼下来，多年下来明显人瘦了，衣服号码都小了，袖口小了一两号，求伯君也真的不忍心拒绝雷军的辞职。求伯君最后答应了，雷军正式辞去了金山总裁兼CEO的职位。此后雷军专心天使投资，办了顺为投资，开始跟创业者打成一片。几年后觉得有机会，开始到处拉拢微软谷歌的牛人，着手创办小米。但2010年后的金山严重下滑，在雷军刚成立小米的时候，求伯君走投无路只能给离开了三年的雷军发了短信“如果你不回来，金山可能不行了。”雷军也知道求伯君不到万不得已是绝对不会这么说话，他回去和求伯君和当时雷军已经成立了但雷军自己说，“金山”两个字对他意义过于重大，自己也曾经为这两个字付出很多，即便离开金山后，只要听到别人说起“金山”依旧会心潮澎湃。最后雷军第二次答应了求伯君加入金山的邀请。在其他小米创始人们的支持下，雷军2011年正式重返金山。由此开始开始金山、小米、顺位三家企业来回跑。对金山，雷军制定了「全力转型移动端互联网」的战略。现在这个战略被证明了是非常成功的，金山WPS重新扭亏为盈。2019年，金山办公WPS上市，雷军公开信中写道：“31 年前，求伯君在深圳一间酒店闭关几个月写出第一版 WPS 时，就注定了金山的英雄梦想。31 年来，金山一直肩扛民族软件大旗，即便是在最艰难的时刻，也从未放弃。”媒体也评价道，“因为WPS，让全世界了解到在中国还有一家软件公司能和微软抗衡。”,雷军当年可是其实很多IT名人现在看起来好像只负责管理，不懂技术，其实他们中的不少人也是程序高手，除了雷军之外，还有他的老对头所以说，不要以为他们只是通过管人管事而出名，他们自己本身也是实力超强的技术高手，才能看准技术的潮流呀。,这段用x86汇编写成的代码（以上是代码片段）用于清除内存驻留程序，类似内存加速工具，雷军教科书般规范地注明了代码用意、时间、作者……还细腻地用符号组成了分隔符让代码更加在B站2020年6月份的一个访谈直播活动中，雷总也在给后辈的寄语中不断强调。优秀的系统往往有优秀的结构设计，层次清晰，职责单一，模块化，方便拓展和复用。功能的添加往往只是在现有的框架中添加少量代码。而且Bob大叔在《代码整洁之道》中给了我们一些行之有效的规则，涵盖从命名到重构的多个方面，只要遵循这些规则，就能编写出干净的、让人舒服的代码。详见回答——更多内容——希望有一天，大家的代码都能“像诗一样优雅”！========赠人玫瑰，手留余香，不要忘记点赞、收藏、关注 一键三连，感恩有你~,说实话我觉得应该不行。（狗头）雷军lc有刷够1000道吗？雷军知道jdk14的新特性是什么吗？雷军知道雷军用过ssm框架，redis， 如果你的Serializable类包含一个不可序列化的成员，会发生什么？你是如何解决的？我猜雷军过不了一面 面试评价：候选人技术栈陈旧，年纪太大。,雷军学长在当年的学习条件下汇编满分我们院今年挂了四分之一而且是在卷面34分以上就全部给60的情况下这特么都真事儿,结论：秒杀目前80%的程序问题不大。看过雷军写的RAMinit代码，一个清理内存的小工具。代码是用汇编写的，从代码质量来看，理由如下：函数的名称非常好的表示了函数的作用，虽然我的汇编语言很多指令不记得了。但是可以从这个函数名称知道下面的这个函数是用来判断是否是DOS系统的。即使是一个完成简单的功能的程序，程序也被分成了多个函数，并且每个函数都非常的短小，利于代码的修改。对于代码中使用的常量，大部分在文件的开头进行了定义。如果是函数内部使用的常量，也进行了说明。Color (White in Red)就是对于47h的解释。,我记得好像是13年的时候？阿黎整了个小米网的讨论会。大意是各部门把过去一年里，自己觉得做的好的、和做的烂的，摆出来。例如设计，梁师傅就整了个两个图，一好一坏对比批判一番。到代码那块，我记得好像是海洲来讲。坏的就是整个小米网，因为他觉得小米网的代码他还是不满意，还是要一边开车一边修车。好的，就是雷老大的一段代码，说是二十年前的。那段代码就那么直接投影到大屏幕上，程序员弟兄们沉默一会，然后纷纷点头。发言，大意是：我不指望你们有这水平，但你们得朝这个方向努力啊！事后我问一位程序员老铁：你们是拍马屁还是真服？我只会Hello world，看不懂。这位后来也做了某上市公司CTO的未来大佬对我这个文科生不屑一顾：我没法和你解释。总之，雷老大写得很简练、很清晰、很干脆，这就是牛逼，而且是高层次的牛逼。所以我觉得，应该是真牛逼。,我自学了一些c，看过雷军编写的教材武汉大学计算机专业两年毕业，编程满分，直接编写计算机教程。大学没毕业直接编写程序卖给别的公司赚钱进入金山凭技术做到金山总裁。别的不敢说，他绝对是计算机领域大哥级人物，打爆百分之九十九绝对不是夸张的数字。我国计算机从业者及相关，最少也有几十万人吧？百分之一也有几千人了凭雷军的实力，进不了前几千?,雷军22年前写的汇编代码，大家看看牛不牛：电脑和编程是雷军人生中最大的兴趣，关于电脑和编程，雷军是这么说的：雷军的技术为什么这么牛逼？他在一次采访中说过一段话：我尤其喜欢阅读计算机经典书籍，那是一种如饥似渴的感觉！另外我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，是伴随我从学生一路成长为腾讯高级开发工程师，360技术经理、360技术总监、中小公司CTO的打包全套，非常宝贵！点击下方链接直达获取：雷军20年前写过一篇文章：《我会当一辈子程序员》。看完你会知道，编程在雷军的眼里是什么样子。关于雷军的代码水平，他自己也说过：,"求伯君、雷军、张小龙应该算是中国第一代程序员里面的顶尖高手， 雷军大一时写的代码后来被老师编入教材，作为样例代码被后面的学弟学妹学习参考，仅仅用了两年时间，雷军就完成了大学四年的课程，提前毕业。1990年初，雷军在一个朋友那里用了一次雷军当了一回不光彩的""黑客”。他把WPS解密了，并移植到普通电脑上直接使用。雷军把解密的WPS版本做成了国内最流行的WPS版本。因为这个渊源，雷军后来认识了WPS的开发者求伯君。进入金山软件之后，雷军成了求伯君最得力的助手，并且最终接班求伯君。雷军对于自己写的代码非常的重视和珍稀，即使他做了管理岗位之后，依然有机会就写写代码。雷军还在网上发表了一篇文章，如下在2018年，金山软件创立30周年纪念日活动上，雷军回忆了这段经历：当我28岁时候在金山白天当总经理，晚上当程序员，当时就想这样能干好两份工作，但发生了意外的事情，有个同事把我的电脑不小心给格式化了，连备份硬盘都格式化了，从此断了我的后路，从而走上了当CEO的“不归路”。他十年间写下的代码就此毁于一旦，心碎之余决定不再写代码，雷军至此解开心结，放下了立志一生编程的想法，全心做好公司的管理。从此江湖上少了一个伟大的程序员，多了一个Are you ok 的网红！！！",雷军20年前曾经写过一篇作文：《我会当一辈子程序员》。看完你会知道，编程在热爱它的人眼里是什么样子。电脑是雷军人生中的最爱，电脑的世界对于雷军而言实在太美妙。雷军觉得，电脑的世界没有人那么复杂。只要你程序写得好，就可以和电脑处好关系，也可以指挥电脑，做一些你想做的事情。雷军认为，电脑的世界很大，程序员都是活在自己的王国里。在这里，程序员可以主宰一切。正是因为热爱，所以雷军一干就是10年。对于雷军来说，虽然现在他更加专注在产品开发以及管理方面，但是曾经他对心爱的代码视为珍宝。之前来了一位技术支持人员，而这位技术人员进公司的第一份工作，就是帮雷军整理他的硬盘。 一位理解错误，原本只要覆盖式的安装系统就可以的事情，这位程序员却把雷军的硬盘格式化了。这些代码是雷军多年来积累下来，而且也是他的最爱，就这样成为 炮灰，相信雷军非常难过。雷军认为，编程的工作同石匠的工作相类似，即是技术活，也是体力活，而编写优秀的软件，算是一件比较难得事。编程是一门技术活，因此才有可能大规模的进行，进而才会有软件工程。此外，因为编程是一种艺术，因此有很多好的产品。以上内容来源于网络如有侵权联系小编,上大学时写的代码能入教材，九十年代写的程序能卖百万。,前段时间不是有一个事情特别火，某游戏的代码写得如x山一般，加载速度相当慢，一查才发现就是这座x山导致的，但谁也不想改也不敢改，最后还是有网上的一位匿名兄弟帮助修复了这个问题并放出开源代码供给其他玩家。而雷军早期写得一些程序就已经注意到了代码的工整性和可修改性，真的是非常了不起、有前瞻性的行为，同时也说明这个人考虑事情很周全，不图一时之快，而是从真正做好这件事情的角度出发。而且雷军自己不也说过吗？“我的代码写得像诗一样优美”,        雷军的优秀是毋庸置疑的，在武汉大学，他两年学完计算机系四年的课程，大二就完成了毕业设计，汇编语言更是武大三十年以来仅有两个满分之一，大三就开始写加密软件、杀毒软件、财务软件、CAD软件等。至于老雷的代码水平，大家看看吧，反正我这个菜鸡是编不出来啊，大兄弟你们怎么样;,,,,
如果让无所不能的神来写代码，是否能写出没有bug的软件？,软件有那么多bug的原因是不是程序员水平低？如果换一个智商无限高的神来写会怎么样,不能，你永远无法知道你的用户会怎么用你的产品，他们测试流传着一个广为人知的段子：一个测试工程师走进一家酒吧，要了一杯啤酒一个测试工程师走进一家酒吧，要了一杯咖啡一个测试工程师走进一家酒吧，要了0.7杯啤酒一个测试工程师走进一家酒吧，要了-1杯啤酒一个测试工程师走进一家酒吧，要了2^32杯啤酒一个测试工程师走进一家酒吧，要了一杯洗脚水一个测试工程师走进一家酒吧，要了一杯蜥蜴一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@一个测试工程师走进一家酒吧，什么也没要一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿一个测试工程师走进一一个测试工程师走进一家酒吧，要了一杯烫烫烫的一个测试工程师走进一家酒吧，要了NaN杯Null1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶1T测试工程师把酒吧拆了一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱一万个测试工程师在酒吧门外呼啸而过一个测试工程师走进一家酒吧，要了一杯啤酒';DROP TABLE 酒吧测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了,"研发工程师慢慢走到屏幕前，把鼠标移动到编译按钮上。他只能先在本地运行代码，以防线上服务被未知的Bug弄伤。接着，三位工程师也都开始运行代码了。“看上去太脆弱了，真怕把它碰坏了。”QA小声说。“找不到一点儿Bug，”实习生惊奇地说，“这代码“能强到什么程度呢？”研发问。为了解答这个问题，QA从文件夹中翻出了一个“当前压测QPS是多少？”研发问。“峰值的一百倍。”QA指指显示器一角的一个数字，同时把压测流量调到一千倍。压测后的服务依然没有任何error。“你这东西坏了吧？”实习生说。QA把压测流量注入到自己的测试机上，其他三人凑过来一起看着显示屏，只见压力被放大一千倍的测试机，肉眼看上去很正常，但异常监控曲线如同乱石滩一样粗糙。QA又把压测流量重新打在本地服务上，监控上再次出现了空白的异常打点，与压力没有放大的时候无异。“把倍数再调大十倍。”研发说。这超出了单机发压的能力，QA进行了一连串的操作，把发压机由单机模式切换到集群发压模式，现在放大倍数是一万倍。放大后的异常监控仍是一片空白。而人类技术所能编写的最完美的代码，压力只放大上千倍后其问题就暴露无遗，正像格利弗眼中的巨人美女的脸。“调到十万倍。”实习生说。他们看到的仍是毫无异常。“一百万倍。”毫无异常。“一千万倍！”在这个放大倍数下，已经可以看到，但屏幕上显示的仍是毫无异常，看不到一点儿Bug的迹象，其服务可用性与没有被压测的服务毫无区别。“再把倍数调大些！”QA摇摇头，这已经是发压集群所能达到的极值了。……“真有没有Bug的代码？”QA惊叹道。“有，”研发说，“Hello World就没有Bug。”“但这东西的代码量是正常的！”研发离开到工位上寻找着什么，回来时手里拿着一只猴子，可能是有人在做故障注入时丢下的，其他人来不及制止，他已用力把猴子甩到了电脑上！他只看到一个""WARN""，这日志是出现在控制台上的，由于是本地环境，其他三人看不到。研发接着将鼠标移动到日志打印的代码行打断点，QA立刻用调试模式debug那一行。一千万的压力倍数下，仍是没有任何error日志。研发颓然地把猴子扔掉，不再看代码，低头深思起来，三位工程师的目光，还有知乎上数百万工程师的目光，都集中到他身上。“只能猜了。”研发抬头说，“这项目的代码逻辑，像说明书一样清晰，同时能够自解释，知道这种代码有多难写吗？不用编译器，用记事本就可以看懂。”“这就是它毫无Bug的原因！”QA说，她和另外两位工程师都明白研发的话意味着什么：在普通的业务代码中，代码的历史包袱是很多的，把祖传代码优化掉，不比让程序员写注释容易多少。“怎么才能做到这一点？”“只有一个：产品经理不改需求。”透过屏幕的反射可以看到，研发的额头上已满是冷汗。“这……不是等于业务不迭代了吗！”“业务确实不迭代了……”研发发出一阵冷笑，听起来有种令人胆寒的凄厉，三位工程师也同样知道这冷笑的含义：那就代表程序员也要失业了。“那……我们该怎么办？”实习生脱口问道。“谁知道？也许它只是一个故事，但带给我们的是另外一个信息……”研发说，同时把目光从代码上移开。这句话带来一阵死寂，就在现场的另外三名工程师和知乎上的百万人咀嚼其含义时，研发突然说：“快点赞。”这三个字是低声说出的，但紧接着，他扬起双手，声嘶力竭地大喊：“程序员们，",bug是个主观概念，没有客观衡量标准，客户觉得它是bug它就是bug，即便在需求文档上没有明文说出来。所以不可能做到没有bug。但是万能的神或许能够催眠客户让客户认为这个程序就是没bug，这样的话自然就写出没有bug的程序了。,bug有很多种，全知全能不会出错的神只能防止硬性bug的出现，但很多bug并不是简单的错误，而是反映了程序不够 “聪明”。第一类神没办法解决的bug是设计缺陷。这是业务逻辑上的漏洞，比如老师的课选满了，你想让老师加名额，结果教务处让你找老师，老师让你找教务处。这种bug不是程序员nb能解决的，需要改需求。第二类是对悖论问题的处理方式。两面镜子对着放，左边的镜子反射了右边的镜子里左边的镜子反射的右边的镜子里左边的镜子反射的右边的.........又或者是一个只说真话的人说：“我说的这句话是谎话”。显然这种问题是不可解的，但计算机该如何处理呢？是触发报错，还是什么都不做，还是只处理一次，还是设置固定的递归深度，还是直接向屏幕打印一句颇有哲理的话，比如 “如果有人能理解世界，那么这个人一定是无法理解的。”直接报错是对的吗？程序接受了无法处理的输入，那就应该报告异常。可报错本身会对系统的执行流程进行破坏，错误应该以什么方式被报出来，程序应该终止还是继续执行，哪些模块要回档，回档到什么程度，都是问题。比如支付宝交易，如果你支付的时候断网了，那应该等下次连上网的时候自动完成支付，还是立刻把这次交易作废呢？如果自动完成支付，应该直接谎称交易成功，然后在后台偷偷把事给办了，来获得丝滑的用户体验，还是应当提示用户，添加到挂起列表呢？当然，为了确保安全性，程序会直接告诉你网络中断，交易失败，但如果神把安全性提升了一大截，那是不是这个新特性就能被允许了呢？因此，对于很多答案不明确的问题，不同的时期，不同的人，有着不同的偏好，程序聪明与否，非常主观。对于镜子反射的问题，目前的游戏大都是计算一次，即为，左边的镜子反射了右边的镜子，却看不到右边的镜子里反射的东西。但如果是非实时渲染，通常会计算若干次反射，有一定数量上限。现实中，光碰到镜子，会被吸收一部分能量，在两个镜子间来回反射直到能量全部被吸收或被反射到两个镜子以外的地方。计算次数多了，玩家会说有bug，看见镜子就卡。计算次数少了，玩家也会说有bug，镜子里不反射镜子，不真实。第三类是对于规则以外的输入的处理如果在一个计算器里输入汉字“一加一”，程序应不应该正常运行呢？如果汉子可以，那其他国文字，甚至外星文，应不应该被支持呢？游戏里有一个商人，可以接受物物交换，让你用装了消音器的手枪换任务道具。那装了消音器，又装了瞄准镜的手枪可以不可以？瞄准镜要不要在交易后返还？弹夹装满，弹夹打空，弹夹半满，沒裝弹夹，哪种可以交换？狙击枪比手枪值钱，给他狙击枪可不可以？长得像手枪的冲锋枪行不行？背包满了，先给他一个手枪，待会补一个消音器行不行？新手枪，用过了的手枪，卡壳了但还没修好的手枪，损坏了的手枪，哪些能被接受？显然，只有全新的，型号一致，装且仅装了消音器，上满子弹的手枪才是标准输入，但如果游戏这么死板，会被玩家喷。甚至你还要特意为了做任务而跑一趟商店，买一把根本不需要的手枪，而不能直接从背包里掏出一个给他。但如果兼容性太强，只要拿一个价值比消音手枪高的物品就能交换，那游戏的流程可能会被破坏，比如原本这是一个射击训练任务，给你一把无限子弹的枪打靶，打完靶回收，结果你直接用别的东西代替了。或者是游戏有意引导玩家做一些事，但玩家直接用策划想不到的方式给过了。这种“聪明”，没起到好作用，反而成为了新的bug。无敌的代码之神，也没法做到尽善尽美，永远有一些人们不喜欢的特性被标记为bug。或者用户本身对程序的认知有误，用户以为这个按钮是xxx，没想到却xxx。（这也不是代码的锅，是设计问题，引导不到位）简而言之，没bug，不可能的。,不知道写圣经的上帝算不算无所不能的神。但圣经的水平嘛……最蹩脚的码农看不见警告，而上帝连错误都看不见。转自： ,转知友 有太多的证据说明我们这个世界是虚拟的。1. 为什么宏观上丰富多彩，但是微观的基本粒子却都是一模一样的？这正和图片丰富多彩，但是像素是一模一样的一回事2. 为什么光速有上限？因为机器的运行速度有限3. 为什么会有普朗克常量？因为机器的数据精度有限4. 为什么微观粒子都是5. 为什么有6. 为什么量子计算机运行速度那么快，一瞬间可以尝试所有可能？因为这个本质上是调用了宿主机的接口7. 为什么会有量子纠缠？这实际上是引用同一个对象的两个指针8. 为什么会有补充：这一点非常类似于程序中的延迟初始化为了避免无限止实例化所有微观对象，顾在程序运行时只保留一个状态分布函数，等观测的时候，也就是在使用组件或对象时，进行初始化，new一个新对象出来，同时也确定了该对象的状态。9. 为什么时间有开端？系统有启动时间嘛10. 为什么宗教人士，程序员都很难找女友？系统对这些探索系统奥秘的不稳定份子都很不友好啊如果说什么语言最接近系统使用的语言？我觉得是c++，不然bug不应这么多。总结：建议提问者多看看日报，或许很多脑洞问题会提前被这些精彩的回答所解决最后，不多说了，地球online的服务器快没钱了，我得去帮忙续个费(逃,智商无限高的神会立刻指出甲方需求里的逻辑矛盾和不完备然后因为羞辱客户被开除，而无所不能的神会消灭所有甲方，天下无bug,按照神就是程序员的设定，人+社会就是代码。结论就是充满了bug，但是不用慌，因为整体采用的是进化算法。Bug实在太多了也没事，大堆大堆删代码，重来就好了。就当是一场梦，醒来还是很感动。,这就是中了“计算机软件行业就是写代码”的毒。软件工程别说这几年的急速发展，就算是能看一眼三十年前的《一个软件，能够商用或者广泛使用的软件，无论是单机软件，还是B/S系统，都会面临非代码bug，也就是各种各样的非软件逻辑defect。软件本身功能错误，无论是你用一个MS word，还是一个淘宝，这都可以通过极端人力，在这里预设为神来解决，但是软件是没有可能独自生存的。MS word还要跑在操作系统上，淘宝还要跑在浏览器里，这些容器带来的bug，是软件本身不可能完全解决的。再往上想一层，为什么我们开始的时候提出这些全部是非代码部分会出现的bug，更不用说，软件写完了以后，还要部署，分发，分发渠道会不会有问题？商用的服务器设置会不会有问题？单机软件会不会和其他软件起冲突？截图软件shareX的热键就会和这个神既然无所不能了，与其写代码，还不如直接改了用户的,。哥德尔不完备原理已经清楚的告诉我们：如果你对这些术语不熟，那可以直观但不确切的理解下：一阶谓词就是“存在XX、所有XX、如果XX则XX”，初等数论就是加减乘除自然数。任何软件只要包含这些功能，那么一定有IF判断既没法返回真也没法返回假，那只能死机了，这不就是BUG吗？当然，我这里是假设开发任何可能的软件都不出BUG。你都把神请过来了，要求高一点也可以理解嘛！“说人话！！！“，可能有不少观众会打心眼里怒吼。好吧，那么现在进行——实例问答！有请——神谕机：叮叮口当！这么好康的东西，一定能横扫所有BUG吧！好吧，请听题：神谕机：&%！%¥！%如果你不意思不是开发任何可能的软件都不出BUG，而仅仅是针对某一不太变态的软件，那用不着神出手，我们已经有形式化分析手段从理论上就能确保软件的可靠性。说白了，只要钱到位，都不是问题。,"没有bug的软件，是还没开始写的那个。但凡写出来了，就肯定有bug。虽然软件都是程序员写的，但bug不都是程序员的锅，水平再高的程序员也有bug。换句话说，如果没bug，那还有什么维护什么事儿，有新需求什么事儿。我记得Software Quality Assurance的老师说，你们千万千万别怕新需求，new requirements are where the money is. 说得好呀，按照神的设定，这个世界就是神的代码，including everything，都是他的creation，这其中，人是他最满意的。可是再满意，也出现了蛇，让没有软件是完美的，因为为了与时俱进，咱就得让软件跟上各种更新。用户的需求是不确定的，也是不断调整的，他们的期望也在变化。所以，有变化，就有可能产生bug。Zero bug development is a myth that should be dispensed with. In order to stay relevant, you need to keep things fresh. Twitter, Facebook, Gmail, Dropbox, and other companies constantly improve their software, as we can see in the What’s new section of app store listings. They make improvements to meet end users’ evolving expectations along with changing web and mobile technology. ","这个问题有意思，更有意思的是炸出一堆被甲方虐了千百遍，自尊心受到极大打击的程序猿。抛开可以扯皮的，和需求相关的“Bug”不谈，我认为没有bug的软件理论上存在。如果只讨论bug的一个子集：比如美国国防部于1983年提出了一个“可信计算机系统安全评价准则”TCSEC（Trusted Computer System Evaluation Criteria），分为七个等级，D,C1,C2,B1,B2,B3,A1:商用化的操作系统包括Windows NT内核的系统，大多只能通过C2等级认证。最高的A级认证，要求软件使用形式化方法是基于数学的方法，简单来说，要用资料显示，采用形式化方法开发的软件有：阿丽亚娜火箭的任务调度模型，我国的玉兔号月球车控制系统等。所以为什么商用软件没听说过用形式化方法开发？显然成本很高，而且只能开高度耦合的程序。但如果是神来做这件事的话，——————再来写点维护程序员自尊心的话—————软件开发本身就是挑战人类智力极限的事情。如果随机把一个CPU执行的实时机器码dump出来，估计没人看得懂计算机正在处理什么。所以有段子说：计算机就像女人，你永远不知道她心里在想什么。80年代IBM曾投入5000人年来开发OS/360系统，花了数亿美元，仍然延迟交付。，幽灵漏洞，心脏出血……这两年爆出的各种大厂的史诗级bug还少嘛？！所以我觉得广大程序员们不用羞于承认自己写不出无bug的软件，本来就只有神能做到。",,这个问题我觉得要这样来看，首先要搞清楚这个所谓的bug是由谁来定义。大部分情况下，这是由需求文档来定义的，这种情况下判断是否是bug比较客观，只要需求文档break down的足够细，那么神能写出没有bug的软件的可能性就足够大。另外一种情况，是否是bug，要根据用户的需求来决定，这个判断是否是bug就比较主观难以把控了。当然，如果是神的话，他(她?它？搞不清楚)完全可以大吼一声改变你的心智: 这不是个Bug，这是个Feature！！！首先，我们看第一种情况，需求文档说要实现1+1=2的功能。但是因为神要写出的没有bug的代码，这一句需求文档就要进一步进行细化。大家看到没有，只要你有时间将需求文档做足够的细化，神是绝对可以写出对需求文档来说没有bug的软件的。如果加多一条，只要不跳出当前科技水平和人类认知的物理规律之外的，那别说神了，我们人也完全能写出对需求文档没有bug的软件。只是说如果你要像《三体》中质子在汪淼眼睑中显示结果，我们还没有到这个科技水平而已。既然神和人都能写出对于需求文档没有bug的代码，那么第二种情况，对于用户没有bug的代码呢？如果要实现这种情况的无bug化，万能的上帝只能做一个事情，先制造出一个人，然后以这个人作为蓝本作深度复制，注意是深度复制而不是浅度拷贝(大家都是写代码的，你应该知道我在说什么)，这时还要控制时间和空间，让这些人在同一个时间同一个空间，同样的视力，体力，角度，反正所有东西都要相同的情况下做同样的操作，然后获得正确的结果。那么这个时候上帝就可以捋着胡须说，好，看来我这个1+1是没有bug的！以上只要条件差一点你都没有办法做到面向所有用户无bug化：第二种情况下，我们没有办法控制时空，且对人类克隆是犯法的（^_^），也没有办法控制所有人的所有身体和各方面的条件，所以没有办法做到面向用户无bug化。但是第一种情况下，我们作为做产品和写代码的，还是要尽量做到需求文档的细化，然后尽量的做到面向需求文档无bug化，这是我们基本的职业操守。另外，现在都追求,谢邀，没有bug的代码是可以实现的，不过并不取决于谁写，而是取决于系统的复杂度。这里我们要先解释一下有很多，例如：而如果我们的系统复杂度是“Hello world”难度级别的，那么除去硬件问题，不用无所不能的神，我也可以（手动狗头）。但如果我们设计的是一个极其复杂的系统，那就很难保证无所不能的神能够写出没有bug的软件了。这是因为就好比上帝设计人类之时，并没有想到人类会发明出酒并大量饮酒，而酒喝多了会让人断片儿，即会造成生理功能不正常甚至数据丢失，这在某重意义上就是出现了一个bug。也就是说无所不能的上帝创造出的系统（人类）也是有bug的。在题主之所以会认为的无所不能的神能够写出趋近于完美的软件，不过是认为无所不能的神能够拥有比人脑更加而人类虽然难以无限增加自身的信息存储和运算能力，但其实20世纪探索深度学习在本世纪代取得的辉煌成就也都与此相关，如今深度学习的成功已经用于在照片中识别物体或分类、自动驾驶汽车、游戏、自动机器翻译、图像字幕生成、文本生成、化学结构的毒性检测、预测蛋白质的3D结构形状等。在此，人邮君推荐三本书，《动手学深度学习》是一本关于体验的书。书中不仅阐述深度学习的全书内容分为3个部分：第一部分《深度学习》被誉为“AI圣经”，其作者是全球知名的三位人工智能专家：生成对抗网络的发明者——Ian Goodfellow、2018年全书内容包括3个部分：第1部分介绍《Python深度学习》由书中包含30多个代码示例，步骤讲解详细透彻，立足于人工智能的可达性和大众化，读者无须具备机器学习相关背景知识即可展开阅读。在学习完本书后，相信你将具备搭建自己的深度学习环境、建立图像识别模型、生成图像和文字等能力。========赠人玫瑰，手留余香~不要忘记点赞、收藏、关注 ,"不用神，上python的大当也缘于此，我改了下它的pdb，不停在热态循环写，直接提示contex，几乎不用动脑子记什么东西，简单死了，一遍写好后也肯定没什么常规bug。感觉这东西太方便了，结果写了一堆脚本，那知便宜没好货，当最终发现python根本干不了真正的活时，删都不容易删。最不容易出bug的我用下来觉得是guile的scheme，那个括号一开始觉得别扭死，可后来觉得精妙无比，一个括号就是独立的一段，拷贝删除都方便无比，具然有傻子做了工具硬要把括号改成缩进。写完后一层括号后，我只要在当前层敲个 <s-k>把它发送给右窗的repl，可以一层层单独调，明面上的bug基本不会有，真试用发现有时，它可以整体-拉出每行的执行日志，可以不用进入热态调试，这时我才发现原来热态调还不是效率最高的，不用进热态但能看到热态的全部运行效率才真TM高，python也能这么干，但python给不出变量和参数运行时的值，而且方法一大速度不可接受的（因为它的catch不是在源码层是在脚本层实现的，guile是在虚拟机上做的）。所以你写软件有bug，归根及底还是因为你水平有限导致工具有限而已。当你能写编译器时，你写常规软件会有逻辑错误，框架失败，但不会有太多bug。象c程序员一般bug根本无感，但内存问题个个惊恐不已，没工具你就是神探也没用，我也见这个东西头皮发麻。但如果你能吃透其实我认为libgc也能做这个工作，比如它有个用sigsegv信号截停调试的，可以去除掉libgc的自动回收机制，但所有内存依旧调用gc来分配，并增加一个在 debug 模式下对所有分配的变量内存进行越界监控的功能，一旦越界就给出信号或调gdb来attach，因该更简单的。我觉得我把这个实现出来倒不是很费劲，正好最近又积累了不少内存错误（平时我自用的软件只要能混下去我一般都不查）。所以现在社区的那些所谓大牛说起来忙，开发这个开发那个的，不知道忙些什么东西，没见做什么有意义和价值的东西。linus也就知道吹牛，也不把他的秘密武器公布出来让大家都用用。有高倍的瞄准镜，从没开过抢的也能轻松一抢爆头的。世人急功近利，视底层为浪费时间，其实底层才能控制一切。-------------追更下，我猜torvals的开发环境会怎样-----------------他写代码一次好，没bug，我想完全可能，也必须可能。他所谓精简版的emacs因该编辑、编译、调试源码层三合一的，每次写时，先打个 ctr-b 在当前行设断点，将程序载入gdb，然后编辑，编辑中查询接口直接接入gdb，所以方法签名、全局/局部变量提示什么的全不用tags方式查，gdb直接导进complete热区（这很重要，在定义新方法、全局新变量时，可迅速查清space内有无重名和新名称要怎么样命名合适），引用的所有方法全可通过gdb定位源码，直接jump看源码，实在老了，有的记不清了，方法名上 info 一下，他们写底层，方法定义说明全进info库的。（下属开发递交上来的代码，在gdb中先自动过一遍，设个查看粒度和过滤器，将所有主要方法的调用拓扑及运行值trace出来，生成个tree看看结构有没有问题，没有就通过，如果看到有内存泄露的问题，正好装B教训他们几句，反正内存泄露类较难调的错误在他的gdb运行过程一般都能找出并传给quickfix窗口。别人？我干吗要给你们装老大，自已去编。）然后写完一行或几行，打个enter存盘，不用再打F5了自动后台进行编译，这个过程很快几乎没有停顿和感觉，如果有错，quickfix弹窗，在编辑窗与quickfix之间轮换几次改好。改好再enter存盘一下，自动编译通过，然后gdb将编译好的内容自动重载并运行到新写作点，然后继续。在这一步一步的步步为营中，绝大部分contex上的引用错误，类型错误有gdb的现场值守，全部因能校验出。敲了一天代码后，看下表，该吃饭了，他现在基本不写kernel了，如果写的是git，那正好用写的新的功能 git 下试两下，有问题？ gdb attach后，recreate下现场trace下，看看怎么回事，也分分钟搞定。再有问题，那是这同样也能解释他为什么讲""当然，广义的逻辑需求类bug不在讨论范围的，那也是",这个问题很有趣，但是也有一个陷阱。里面潜藏的一个逻辑是：无所不能的神来写代码，但是软件是给人用的，bug也是人提的。我们应该假设有一个无所不能的社会。里面有无所不能的码农神，还有无所不能的测试神。码农神的设定是：他能写出无懈可击的代码，因为他无所不能。测试神的设定是：他能从任何软件里找出bug，因为他无所不能。最强的矛和最强的盾到底谁最厉害？最强的码神和最强的测神到底谁最厉害？无所不能本身限制了无所不能。原来无所不能TMD本身就是个循环逻辑错误。因此本问题提的就有bug。打回重提。,以下是我的思考。软件中大多数Bug的产生和程序员水平并没有直接的关系。有人的地方就有Bug。这是人类的弱点。你的大脑总有不在线的时候，你的逻辑并不能一直保持严谨。与智商高低亦无关。所以，换成无所不能的神来写代码，效果也不一定好。既然无所不能了，那肯定能写出Bug，是不是这个逻辑？你需要的是一个永远正确的神。其实现在人类也发明了很多技术手段来对抗这种先天的弱点。比如静态分析。比如写C/Cpp代码的程序员，会经常写出一些内存不安全的Bug。即便高手也难以避免这类问题。这是因为C/Cpp把底层控制力完全交给了人类，靠人类的逻辑思维来保证安全性。但人类是脆弱的，包括逻辑思维能力。所以C/Cpp会依赖编译器提供的，以及外部第三方的静态分析工具来避免人类脆弱的逻辑思维而产生的坑。现在，Rust的出现，则又更进一步。在语言层面利用静态分析来解决特定的内存安全问题。配合严格且智能的编译器来保证开发者在底层资源控制方面不会出错。语言级别，意味着开发者写下的每一行代码，都是严谨的。相当于把C/Cpp完全依靠人类逻辑思维的状况，剥离了出来，让开发者对底层资源控制的同时，由编译器来辅助开发者保证逻辑的严谨和正确性。Rust让开发者的思维可以更接近于神，在控制底层资源的时候不容易犯错。这是Rust比C/Cpp更优秀的本质原因。我并不是在吹Rust，上面只是我的一些思考。人类的思维本身就是脆弱的，包括我上面的思考。希望各位看官能来指出我思考的缺陷，而不是来喷我黑我。以上。,还需要一个无所不能的神来当产品经理。如果需求提错了，代码再怎么正确也满是bug。,无所不能的神写的软件给谁用？软件是给能力不足的人类用的，借助计算机的运算和存储能力。所以，神要给谁写软件？既然他们都无所不能了，人类有什么需求，直接满足就完事了，神们内部有什么需求吗？不可能啊，大家都是无所不能的了，能有什么需求要借助软件来实施？问题不成立，没有答案。
大学计算机系最努力的同学都是如何学习的？,看看大神们是如何努力的,我来给年轻人讲讲我当年上海交大的情况和我儿子多伦多大学的情况  我是1984年入从二年级开始，周末已经慢慢开始有休闲时间了，唯一娱乐是打扑克牌。当然周末只是周日，周六是weekday，和平时一样上课。weekday和一年级差别不大。三年级开始轻松一些，因为专业课相对容易，经常熄灯前一个多小时就回宿舍了，打扑克一小时。四年级打牌时间更长，经常上两个小时的自习，作业做完就回寝室打牌了。四年级毕业设计时就是天堂了，白天机房，天天晚上都是打牌。我三年级开始谈恋爱了，一般周日都去女朋友的学校当时叫总的来说，四年大学还是打好了扎实的基础，为将来的工作做了很好的准备。我们班很多同学还是很有成就的。成绩第一的研究生时是最轻松的，我们系共17人，一半是交大的，一半是外校进来的，我们系和电子系、自控系住在研一楼九层楼上，宿舍不熄灯了，两个人或者三个人一个寝室，没有多少作业，有努力的同学和导师做做课题，大部分的同学经常打扑克牌、下军旗二年级时，无锡电子研究所的三个工程师找到我，我们一起开发了国内最早的动态心电监护系统，替代进口，找了香港人投资，我们技术入股，成立了深圳金冕电子仪器有限公司。我们也坐上了风口。很多很多的故事，到1998年，我退休至今。我的导师特别好，我毕业设计很简单，因为我没有时间，深圳、上海两边跑。学校计算机不够用，我给几个四年级的同学机时，他们帮我编程，算是完成了毕业设计。下面我介绍我儿子在多伦多大学计算机系的情况。先说他本科是多伦多大学工程科学系，是多大最牛的系，没有之一。他自己计算，每周有5个小时的自由时间，除了学习睡觉吃饭。买21个玻璃饭盒，每周日做一次饭，分成21份，每天吃三个，微波炉加热，没有时间在酒店点菜吃（高中四年午餐都是酒店点菜吃）。三年如一日。四年级和女朋友住一起，有所变化。上课永远坐第一排，努力回答问题，让老师记住他，暑假前才能写信跟老师申请科研工作。硕士研究生和博士进了计算机系。到现在博士3年级了，总共在多大7年了，没有休息过周末和寒暑假，每天每天工作和学习，我佩服的五体投地。唯一陪女朋友旅游一次是今年暑假。女朋友也读博士。他今年5月到12月在一家公司实习，是世界前7大动漫游戏公司，他经常一次动用二十台计算机运算，大学里没有这个条件。今年9月，他正式告诉我，他决定每周休息一天。他的努力有回报，已经在计算机图像领域最权威的看到这个题目，做为老一代计算机系学生，一时兴起，第一次发言，不当处，多包涵！2024，10，19我是刚刚实名制登记，甚至没有评论过别人的贴子，第一次发帖，完全没有想到这么多人看，非常感谢大家更没有想到评论中最多的问题是问我退休后的生活，  巧合的是其中一个还是我的大学老师的中学同学，所以有长辈问，我必须说一说。其实我31岁又三个月退休后，很多同学朋友也一直问我这个问题。我是一个好奇心很强的人。我一直以为人在宇宙中太渺小，甚至银河系都是亿万星系中的一个而已。世界很大，我又好奇心重，想了解世界是我退休生活的主基调。我第一个家肯定是深圳。后来上海第一套房是古北新区一期，金色房产证，外汇买，涉外的，所以很多国外频道，我们家电视永远只看一个频道，discovery美国国家地理杂志。我最想了解的是全世界的人是怎么生活的，我对风景不太感兴趣。所以，看书、看纪录片，看新闻，经常各地去见朋友聊天。也旅游，今年6月份和太太一起西班牙三周多，7月在南部非洲，总共50天。我退休后第一次旅游是1998年和太太去新疆哈纳斯湖。乌鲁木齐租了一辆我经常一个人住在丽江、凤凰、芙蓉镇这种古城，一住就是两个月。酒吧里和天南海北的人聊天，也认识很多朋友，听很多有趣的故事。当然我家保姆是最不喜欢我这一点，经常会有各色人等到我家吃住，增加她的工作量。当然现在情况变化很大。第一次去丽江，1999年，总共不到10家酒吧，酒吧老板、游客很多都是艺术家，很有趣，见过几次就是朋友了，喝酒互相买单，白天组团一起租车。后来慢慢变，商业化越来越浓，游客也都急匆匆的，不像原来都是慢生活2012年来加拿大，一方面是因为两个孩子读书，移民可以省很多学费。更重要的是，体验新环境，看洋人是怎么生活的。所以我和邻居们处的很好，犹太人法国人伊朗人，经常一起吃饭聊天。我刚才说今年夏天出去旅游，开始时忘了交代孩子草坪割草，结果隔壁的犹太律师，77岁了，看到我家草坪草太高了，自己跑来给我割草出国后也解惑了一些以前的一些疑问。比如，过去看美国电影，经常看到偷车的，不用钥匙 直接开门，拉出几根线，几个多年英语忘光了，来加拿大前几年上课学英语，加拿大政府免费对新移民开的。老师都很好，讲很多风土人情，加拿大的知识。我学以致用，一个人去印度住了三个月。到了一个城市，拼命和当地人搭讪，如果有缘交一个朋友，就住半个月，看看他的生活；不成功就换下一个城市。最好的体验是在恒河边圣城瓦伦纳西，交了两个朋友，住了二十天。我选的酒店离一个露天火葬场只有80米远，24小时不会停歇地烧，我每天都会站在那里看好久，和家属聊天。思索人生的最好地方。无论贫贱，烧的结果一样，只是用不同档次的木材好奇是我的一个性格。懒也是我的另一个特点。所以我说我非常佩服我儿子，他极其勤奋。我喜欢打扑克，线上线下都打。我至今最要好的朋友，都是中学田径队和篮球队的同学，平时一起上课一起训练一起比赛，寒暑假在一起打扑克，大学时也是这样，放假大家都回老家，假期一半时间打扑克。我太太也是扑克迷来加拿大，入乡随俗，运动时间更多了，每周至少5天，一般自己四天排球，一天陪太太网球 。我的一个大学班主任告诉我，30岁之前了解自己，人生成功了一半。我非常同意，扬长避短才能成功。但是不容易，大部分人高估自己，无视自己的缺点。如果能掌握了这条，管理也是易如反掌，安排工作发挥员工的长处，避其短板。社交也是如此，我在儿子高中时训练他，尽短的时间，发现对方的优点，巧妙的表达出来；或者找出对方擅长的领域提问题，增加好感还增长知识，沟通的技巧是少说多问。另外我岳父汤任基对我的早早退休影响很大。他是流体物理学家，三钱之一一口气想到哪说到哪，比较散。总的来说，过自己适合的生活。像评论区有朋友说的，儿子大学毕业就工作了，全家一起经常旅游，没有那么累，过的舒服。我完全赞成！2024，11，21评论区有朋友问勤奋努力的习惯是如何养成的？我来讲一下我儿子习惯的养成，希望对大家有帮助。我完全是用的目标导向。我是煤矿子弟，所以我初中毕业的时候，三分之二的同学就到工厂去工作了，三分之一的同学读高中。后来到九十年代大量的国企倒闭，我一半的同学就失业了，生活非常困顿，有的在传达室看大门，有的做保安。我从小就刻意的带儿子到他们家里去，回家以后就告诉他，如果学习成绩不好，将来的生活就是这样的。我高中是上的省重点中学，大部分同学都读了大学，我会带他到在老家工作的同学的家里去看，告诉他如果读了大学情况就会改善成这样。带他到上海同学的家里去，然后告诉他如果读了最好的大学，就可以生活在喜欢的任何一个城市，过非常好的生活。当然，如果碰到乞丐的话也会告诉他，如果完全不上学的话也是可以生活的，就可以当乞丐。当然，这个工作不是一次两次是要反复多次进到他的血液里。所以等到他上小学的时候，他就已经有这个想法要进最好的小学。当时上海最好的小学是世界外国语小学，他上海科技幼儿园的老师告诉我们至少要认识3000个汉字才能考进去，最好还要学点英语。正常每年8000个学生报名考录取160个，四个班，每个班38个人是考进去的，每个班学号的39 、40是要走大领导的关系，特批进去的。他有了发自内心的这个想法，我先是花了10天时间教会了他汉语拼音，然后给他买了我们家的第一台手提电脑，东芝电脑，买了一套学认汉字的游戏软件叫《娃娃丫丫》买了全套的英文原版的《米老鼠和唐老鸭》。我们保姆的工作就是每天早上起床，只要他玩玩具，就一边给他电视上放《米老鼠和唐老鸭》。其他不玩玩具的时间就是陪他玩《娃娃丫丫》。当然我们夫妻都不陪，因为反复让他知道，学习是他自己的工作。三个月后他成功了他所在的上海科技幼儿园只考进去了两个，我儿子的学号在班里是32号，也就是说他在班里入学考试成绩是第32名。有了这次成功的经验，他就知道了，只要努力什么都能做到，他有了信心。刚进高中的时候，他为了进网球校队，他每天早上起床两个小时，下午放学三个小时在我们小区里免费的网球场认识打得最好的人一起打，后来成功地进了校队。大学的时候暑假他都是一边搞科研，一边拼命地练滑板。现在他的长版 long board dancing是美国和加拿大的冠军，没有对手，只要他参加的比赛都是第一名，今年的世界锦标赛进入前八名。他一个人三年举办了三届加拿大全国比赛，现在是北美地区最有影响力的比赛之一下面这个是他主办的第三届加拿大比赛，有十个赞助商。,就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，网易等多个大厂offer。看到这里是不是应该算比较努力了？我知道我其实算不上计算机系最厉害，最努力的同学，但是当我毕业后看到这个知乎上的这个问题，脑海中回想到当年那么努力的自己，心里是真的如翻江倒海，五味杂陈。一个从十线小城市出来，没有优渥的家境，没有过人的天赋，没有从小就受到精心的培养，良好的教育的普通人，，大学计算机系的同学努力一些的，要么只专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer。像老学长这样两方面都有一些经历的，应该是比较少的人。同时一路走来，我也踩过不少坑，走过不少弯路。既然问题是如何学习的，那么我也作为一个过来人，给计算机专业学弟学妹们写一写计算机专业学习的一些经验。我会从校内学习，尤其到校招各个技术岗位的求职学习都抽空写一写，无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。很多同学发私信给猪学长求一些计算机学习的首先相比于其他大部分专业，我真的觉得计算机计算机是真的可以通过努力改变命运的专业。其他大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，然后再参加一些专业相关的项目比赛，或者本科能有一些科研论文，就足够代表这你在学校内很优秀了，毕业无论找工作求职还是继续升学深造都足够了。但是计算机专业真的特别不一样。计算机专业技术岗位的求职几乎跟校内的成绩没有什么太大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用。产生上述现象的原因，就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了。甚至计算机专业还会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。我甚至见过一个985大学，计算机科班，专业里排名前几名的女生，面试连一个最基础的但另一方面，我还见过有的同学，大学几乎不上课，挂科无数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。于此同时浙江省有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力改变命运的专业。金融行业一直流传着一句非常有名的话:如果你是金融专业，普通本科的同学，那么毕业很难进入头部金融名企去工作，而只能是去卖保险推理财。但是计算机专业这些年来双非本科进大厂的故事每年都在上演，只要你肯努力，一定会得到回报。我的大一在其他同学还在游戏中疯狂战斗的时候，我做了到了大学的时候几乎每个人都会迷茫，我也是一样的。我的开头有写到我在大学里非常非常的努力，做了很多很多的事情。我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种各样眼花缭乱的社团，并不知道在大学里该做什么。这时候我选择走出寝室，去多结识学院里很多优秀的学长学姐们。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，当什么部长团长，而是都把时间投入到非常重要的事情上。但是，当你真的找到他们向他们请教问题的时候，他们都非常的友好热情而且热心，告诉你很多大学里关键的事情。我在大一上学期的时候就认识了我们学院当时大三拿到国家奖学金的优秀学长，并向他请教很多经验。很早就知道了也正是因为我在大一就知道了很多信息，所以我才能早早的准备，因为知道自己不是天才，就只能比别人更早的行动！我看了这个问题下面的很多回答，都推荐了很多各种各样的巨厚无比的计算机类书籍或者非常高深的项目。但是我觉得对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。如果你能在大一就多刷一些题目，打下坚实的编程基础，绝对可以让你在大二大三在各种别赛中崭露头角，最后大学里各种评奖评优奖学金都不是梦。：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去外企工作，你会发现外企非常注重对求职者算法与数据结构基础，编程能力的考察。国内互联网早些年可能不会要求职者面试时编写程序，现在几乎各大公司面试都会模仿外企的模式，考察求职者的编程能力。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作不一定影响很大，但是你的编程功底是否扎实直接影响了你以后的工作效率。如果你没有通过编程题目的考察，几乎很难通过心仪公司的面试。自己虽然不是ACM选手，但是也同样深知打好扎实的算法数据结构基础的重要性，在大一早早的就开始刷题。让我之后在大学中的各种程序设计类比赛，保研复试机考，大厂求职面试都受益匪浅。说完了重要性，那么该如何做呢？学长之前在工作闲暇之余随手回答过一个关于编程的问题，没想到帮助了很多的同学，收获了800多个赞同，这里我就不重复写了，如何做可以看一下这个：我们大学中大二的课程是非常非常满的，因为自己大一就定下了要拿国家奖学金的目标，所以在专业课程方面丝毫不肯松懈，不仅不能轻易翘课，就连平时作业都需要尽可能的都高质量的完成。与此同时我还给自己计划安排了大量的校内项目，国内比赛要参加。我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。一个是手机振动放在枕边:一个是金属闹钟放到床下桌子上：这样每天就能05:20被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎大二的无数个日子每天都是在这样的晨曦中开始。因为自己要参加很多的计算机类比赛，大学中的比赛主要就分为程序设计类比赛与软件设计类比赛大类。自己在大一打下一定的算法基础之后，大二又阅读了很多算法相关的书籍:比如非常经典的还有蓝书，有一段时间我对图论相关算法特别痴迷，觉得紫书里面题目还太少了，就买了蓝书去专攻图论相关算法题目。另一方面也是为了后面要参加的算法比赛做准备。蓝书里面有大量的不同算法专题的ACM经典例题与讲解！巫神的挑战程序设计竞赛，这本书也是非常棒的！里面分为不同章节，由浅入深的介绍各种算法。最关键的是，里面给出的很多算法模板都非常非常的经典。是一本不错的算法比赛学习书籍。其实此刻在写这些的时候，回想当年的自己也是觉得走了不少弯路。当年因为我本科学校是垃圾弱校，学院根本没有ACM队伍，其实上面这些书籍的内容有些偏深了，比较适合ACM选手。但是作为普通的计算机专业学生，我当初花了好多精力练习的很多偏深，偏难，偏怪的题目其实后面也不太常用到了。还不如多刷刷然后还有剑指offer上面这些书籍有需要的，这里先分享给同学们：我是在大三时候才知道剑指offer这本书的，其实上面的那些ACM级别的算法书我都阅读过之后，在这期间，我一直活跃在各个oj平台上，然后积极参加各种算法比赛。我贴我一直比较喜欢，一个冷门一点的oj:哈哈当年的账号都已经找不到了。同时因为项目比赛我不太喜欢依靠别人，抱别人的大腿，所以一般我都是自己一个人是队伍中的主力。大二那一年我涉猎了非常多的不同方向的软件开发技术，几乎比赛需要什么，我就立刻学什么，然后就开始上手开发。搞过玩儿过Android ，为我当时还在上小学的小弟开发了一个数学算数训练小游戏的App。同样不仅参加了一个小比赛，而且同时还作为了java课程的期末大作业。我记得当年好像是用安卓写了一个小的游戏机app，里面有别踩白块，上面这些书籍与项目如今都免费分享给同学们：然后同时写过web，搭过电商网站......这其中有的是自己对技术感兴趣，有的是项目比赛需要。回忆起来最有趣的事情，是我曾经还花了一个通宵的时间写了一个哈哈哈，但是我当时一晚上写游戏脚本赚500块钱的事情还是在学院里传了很久。因为自己要参加的比赛，项目太多，有时候当比赛与期末考试周赶到一起的时候，简直就是如噩梦一般的存在。单片机期末，通宵到天亮。还记得当初大家都觉得单片机好难好难，我好像是全班为数不多把功能都实现的。我只记得我大二那一年课真的是巨多巨多，然后真的是好忙好忙。但是努力的付出终究是有结果的！！！当大二下学期结束，大二一年的成绩几乎满绩点4.0，同时辛苦很多时间参加的非常多的比赛都有了收获。然后终于等来了我们那年的国家奖学金的评选。按照当年我们学院的规定，学院每年有四个国家奖学金名额，大三学生分配三个名额。只分配给大二学生一个名额。我当时怀着忐忑的心情像辅导员提交了申请表，因为当时并不知道系里其他同学的实力情况如何，自己能否当选。当评选结果公布，我在公示栏上看到了自己名字的那一刻，我感觉一切的付出都有了结果。还清楚的记得当时每个公示的时候，我的个人信息是跟三名大三的当选的学长学姐并列在展览栏里，我大二的履历栏里的经历就和他们大三时候一样多。当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。虽然我们学校非常差，保研名额不是很多，但是只要自己大三正常上课，自己不作死，几乎保研是十拿九稳的事情了。因为自己真的大一大二太辛苦了，同时也实现了拿到国家奖学金的这个目标。自己原计划在大三可以休息一下。但是学长得知的一个消息，彻底改变了我的整个大学轨迹。因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。然后我就详细跟这个学长请教了好久好久，那个学长人非常非常好，耐心的跟我说了好多他的经验以及准备过程。那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招，才发现校招技术岗所考察的东西跟学校里学的东西几乎完全不一样。自己虽然是学校里“成绩优异”的好学生，但是竟然与企业里要求相差甚远。同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。我时隔好久再次又在大三走进了考研自习室......跟着所有大四考研的学长学姐一起，他们准备考研复试，我开备战大厂的实习。我在大三上学期花了看了首先最开始的时候，我先通过校招面试题了解到，原来想要面试一个大厂技术工作岗位，原来需要在一个方向上深入的精通，而不是像自己之前那样瞎搞，所有方向都会一点儿，并不深。我就开始锁定的方向上大量的，先结合面经，然后深入的看很多很多的书。因为计算机相关书籍实在是太贵了，就一本一本的去网上寻找电子版的。你们可以看到我的截图里，每个书籍前面都标明了页数，这些都是我自己认认真真阅读过的书籍，并不是像其他人随便搜集到的资源。然后项目方面，我花了好几百块钱在某宝上买了很多的优质的项目课程：上面这些书籍与项目如今都免费分享给同学们：然后这块真的是采坑太多了！！！网上好多的卖项目资源的都是骗子，买到手里之后发现项目都是非常差的那种，技术也非常落后。这块真的是踩了好多的坑，浪费了不少的钱。最后终于找到了一些跟自己方向一致，比较优质的项目。上面的每一个我几乎都是先点进去大致了解，然后最后挑选出最好的几个项目自己深入去学习，同时在电脑上配置相关环境跟着实操，以此来充实自己的简历。然后开始准备在网上投递简历，寻找实习。原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。在之前我那个时候，好多公司的日常实习还都没有远程面试，都要求必须去现场面试。因为联系我的很多公司都不在一个城市，我只能选择面试机会最多的城市跑过去面试。最后在大三上学期结束的那个寒假，其他同学都回家过年的时候，我放弃了回家，自己一个人跑去了北京面试。原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！那时候我刚刚大三上学期......当人生中第一个offer进入我的邮箱的时候，我真的不知道我的人生从此被彻底改变......别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 但是如果你能看到了这里，透过我的大学经历你会发现，不仅仅只能低头的努力，越早的掌握信息，越早的找到努力的方向，是远比努力更重要的事情。同时你也会发现我的大学里也走了不少的弯路，我是少数既花时间在国奖保研上，又拼命找工作求职的。在计算机专业这是两种截然不同的维度。，那么你就应该像我大一大二时候，早早的掌握保研，考研，留学相关的信息。像我大一大二那样努力的搞好成绩，然后了解清楚学院内评奖评优的各种规章制度，制定好计划，去实施！，那么计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需要早早的关注求职，校招，面经，岗位等相关信息。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到在我后来的读研以及毕业后工作的期间，无数的学弟学妹们都来问我许多非常经典的问题:我在多家国内头部互联网技术面试官就是会认真的去考察候选者的真正实力。我知道有很多有的在ACM赛场上挥洒汗水艰苦努力，有的甚至早早的就在大二从学校溜出来去大厂实习的。而还有的同学身在，都已经毕业了，待在家里的时候才开始到处投简历。无论你现在处在任何阶段，如果你能看到老学长的这篇回答，同时还真觉得有收获，放下手中的手机，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。最后留下一句我一直特别喜欢，一直用来鞭策自己的一句话，送给大家:....我吐了....就先写到这里吧.....手好酸.....到这里后面老学长的经历还有很多很多，......之后有时间再更啦。上文中提及到的所有如果同学们还有其他什么问题，欢迎在评论区给我留言呀，不忙的时候我都会回复的。然后所有对字节跳动实习，或者求职感兴趣的同学，想找学长内部推荐的，也都统统都可以联系猪学长，记得点一个关注呦 然后对很多同学提的问题我更新一个问答环节！！！在这里我对几个高频的问题统一给学弟学妹们回答一下:看了我这篇回答，很多同学心里应该特别清楚了啊。学校名称，在整张简历上只占4个字！！！！！你能实力绝对跟4个字没关系！！！举一个最简单的例子，如果一个同学是985学校的毕业的，简历上除了985学校几个字，其他空空如也，面试问的问题都不会，实习经历也没有，算法题也写不出来，你觉得他能进大厂吗?如果你是双非的，你能做到这个是我太太太太想回答的问题了，我身边两个部门里工作多年的很多同学从一开始就想当然错了，认为我想要当程序员，我大学专业必须得是计算机，然后大三就开始夸考计算机，然后考研疯狂内卷！！！你可以问问身边计算机科班的同学，几乎所有人校招求职几乎都是靠自己自己学，学校会上一些计算机相关课程，但是那些真的无关紧要啊。同时，真的互联网校园招聘是真的不看应试者的学历专业，因为很多面试官自己本身都不是计算机专业的！！！我之前在网易工作的时候，我亲眼看到我们老大给一个历史专业的同学面试机会，去面试他。我一开始很惊讶，然后我老大说现在其他行业都不景气，同学都是想靠自己努力找到好工作，而且他简历也非常的优秀，不会因为他是历史专业就不给面试机会。现在每次看到这个问题我都只能说非常的惋惜，我前面说的求职不看学历专业真的只限制在互联网校园招聘中。如果同学你已经毕业了，那么你就失去了应届生的身份了。你只能走互联网社会招聘。互联网社会招聘技术岗位非常看重你上一份的工作经验的，如果你上一份的工作经验不是技术岗位，对于部门来说你几乎都不如校招生，所以是很难通过大厂的社会招聘的。至于其他中小型互联网公司能否接受转行的，这个我就不太了解了。,谢邀，没见过贵系/大佬入学的时候还只会python语言，军训的时候就开始看紫书和一本信奥的教材。等我们军训完，大佬已经开始活跃在我们学校的oj论坛上问各种学长学姐问题。我们平时的作息时间是，早上没课就睡到下午，下午没课就睡到晚上。大佬的作息是，有没有课都是十一点睡觉（打cf时除外），八点起床，四年雷打不动。开学两个月有个ACM队新生赛，大佬当时貌似是排第六还是第七，前面都是OI爷。 然后，大佬就开始了疯狂的训练，我印象比较深的就是他每周除了会打leetcode周赛，到了大二，大佬逐渐在acm崭露头角。听说他一般负责写图论，到了大三，大佬就开始收割了。他大三上区预赛拿了一块金牌，建模国赛拿了二等奖，大创也评了省优秀项目然后发了一篇SCI，我记得那个时候看他个人主页的博客有两百篇左右，虽然近百分之七十是题解，但是我看他公开课的大佬大三寒假就去了百度做实习生，大三下的下半学期去了字节做日常实习生，暑假忘了具体去哪了，好像是在字节继续实习，好像是去了大佬最后去了一所美国top10读博了，我们毕业聚餐调侃大佬一个人学了我们四个人该学的东西。当打下这段文字的时候，我又开始怀念那段岁月，怀念大佬在屏幕前纯粹又热诚的身影，怀念他的,在高中，我完全没有想过自己会学计算机，成为程序员。我在大一之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。大一开学，第一门编程语言就是学的 C 语言，怎么说呢，老师讲的，书上写的我都能看懂，但是让我写一个大的程序，我就摸不到头脑。不知从何下手，学了半学期，也只能写写课后习题，算算大一上考完 C 语言后，我便在心里默默念想，这辈子再也不写 C 了，但没想到的是，后来这成了我最爱的一门语言。混到什么程度呢，王者荣耀打了几千场，线代考试前一晚才在 转变大概从大一下开始吧，那时候好几个室友都拿到了奖学金，于是，我自己也开始慢慢反思，觉得这样下去，大学可能就废了。默默的把王者荣耀卸载（当然，后面又下回来了，反反复复十几次。。。）大一下，开始学习此外，还学了一门当时我看来非常牛逼的语言：Java。为啥说我当时觉得它牛逼呢？因为刚经历过 C 语言的摧残，发现 Java有丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用，简直是新大陆。所以我学得很认真，还记得当时看过自己也用 Java 写了不少好玩的东西，比如这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师，Java 也算是帮我解锁了对于编程的兴趣。在学 Java 的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了“精通” Java，我在知乎搜索各种书单，先后看了《Java核心技术卷》《Java并发编程》好几本书，自觉 Java 基础还算可以，不过现在已经快两年没写了，成功转入C++阵营。而且我有个习惯，就是每天早上基本都是六七点起床，八点多对我已经算赖床了，所以和我室友显得有点“格格不入”。早上起太早的话，他们还在睡觉，我在寝室写代码的话，难免会发出各种声音吵到他们，尽管我做什么都是蹑手蹑脚，生怕发出椅子摩地，或者碰撞的声音，这让我也觉得不太方便。所以，后面没有课的早上我一般都去图书馆五楼自习室了，在那看书，看书觉得烦了，就写会代码或者刷刷知乎，看看博客。这是被我长期占领的一个位置，因为书太多，不方便每次都背来背去的，所以就找了个考研自习室。就这样从秋天，到了冬天，桌子上多了围巾手套，还有 那时候，每天上午的盼头的就是早点到中午，我就可以去吃饭，然后去学校散步了，我经常把中午饭菜拍下来，感觉蛮有意思的哈哈哈：一般我都是赶在中午下课高峰之前去吃完，然后去学校绿荫道散步大二时，在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到里面的汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C 语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。后来在知乎大佬的指引下，为了看懂这本书，去看了重学了 C 语言（主要是指针和内存），由于已经学了汇编，指针对我再也不是问题了，同时看完了《C和指针》、《：书单：大二那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，明明 16 年大一时客户端安卓开发还挺火的，到了 17 年各种机器学习、神经网络就席卷而来。不能不感叹，IT 行业日新月异呀，不学习就可能被淘汰。当然了，我也不例外的加入了，先后看了些很多学弟学妹在问怎么咨询、提问，最近我开放了我的编程学习圈子，欢迎加入，不管是计算机转专业，还是大二面临分流、大三找实习、校招、写简历、Offer 选择等都可以直接问。加入星球后，还可以找跟着做了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理，再加上自己数学也学得不太好，这让我学得很没底气。于是机器学习之路也止于大二。大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后自己又跑去学 Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、知乎回答、抢课脚本，玩了一段时间也没太大兴趣了。时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索「操作系统怎么学」，不得不说知乎上各位前辈大佬的回答对我的指引作用极其的大。顺着一堆回答，我发现原来还能跟着别人写一个 于是我买了一本我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入 C 语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。这本八百多页的书，我花了两个月时间啃了五百多页，一下课就跑去图书馆，在我的虚拟机中跑 当时我真的对这个入迷了，为了写 还很奇葩的把我 QQ 签名改成了 jmp 0x7c00(PS: 这句汇编就是跳转到 0x7c00 地址，BIOS 开始引导操作系统于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书（也非常推荐大家尽早去刷一下牛客网，上面很多大三、研二的正在找工作的学长学姐们分享的帖子，早点接触这种就业的氛围，自己也会更加有动力去学习，也知道学习的方向，另外上面可以针对校招刷算法题、刷SQL等等，还挺方便的，现在很庆幸自己在大二的时候就在刷这个网站：于是在大三左右开始了非常标准的 Linux C/C++学习之路：前前后后看了顺便还看了点 Muduo 源码，自己模仿着基于 Epoll 写一个 （PS：知乎上有朋友问我是如何看完这么多书的，其实在之前的文章中就写了，看书我会有选择的挑章节看，不会从头看到尾的，而且大三开始课就少了，我基本就在刷这些书，其实时间还蛮多的？毕竟我也没参加什么社团、学生会之类，也没女朋友。。。那时候会每天记录看书的进度，感觉特别有劲：书看得越多，其实你越能找到自己的方向，大三上我就给自己学习定位：深入C++语言（多线程）+ 存储（学习 Redis、leveldb）+ 网络编程（学习基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注学习 C10K、C100K 这样的后台服务器开发高性能、高并发的解决方法。当然了，还有些到现在还没开始，比如 leveldb 的源码、6.824 的 lab，可能是变懒了......也可能是学习变得不那么纯碎面向技术了，变成面向工作、面向赚钱了哈哈哈。值得一提的是，大三上我们学院有门 System Programing 的课，教材就是使用的 印象最深的便是做 bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是熬夜连着把这几个 phase 过掉的，当然头发也没少掉。当时还在再到后来，我拿到了微信实习 offer，然后顺利转正。在我大三下拿到实习 offer 后，开始做一些国外计算机课程 lab，一方面有钱赚，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些 lab 有些很有意思，对提高基础和编程能力很有帮助。在这里列举一些我做过的觉得有意思的 lab（之前有篇文章写过）：这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 就是版本管理系统，类似 这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多，但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种网络拓扑，可以调节网络 丢包率 Loss chance。当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：这是带去图书馆自习室的书（常占位置）这是毕业整理的书：买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。当然了，我还有自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：最后真心想说一句，滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”。逐渐构建起属于自己的计算机知识体系，然后选择一个专业方向不断专研。 在这顺便推荐一个 大家觉得不错的话，记得帮我 ,上篇为什么这节标题是屠龙术，因为我认为读这些书能让你了解计算机科学的本质，掌握屠龙之技。没看错，就是汇编语言。为什么是汇编语言，因为我认为现在大家对这门古老的语言都不重视。这本书很多人应该都知道，是经典书。能让你对整个计算机硬件和软件体系有所了解，建议计算机从业者收藏，反复阅读，常读常新。这本书是我大三上操作系统这门课时看的书，当时上课用的教材不是这本，是我在图书馆看到的。当时看后觉得讲的比较详细，就自己买了本当作教材使用了。这本书是我大二上学期上计算机网络这门课时买的。同样学校教材也不是这本书，是自己在图书馆查资料时发现的。这是大二下学期我们上离散数学课的教材，主要讲计算机中的数学知识。这是大一下学期上数据结构课时我搭配的一本书。同样上课教材不是这本，是我在图书馆发现的。这是大三下学期学数据库课时我搭配的一本书，同样不是上课教材，是在图书馆发现的。这本书是我们大一上C++课程时的教材，发的教材其实是英文版的，这里我给大家介绍中文版。这本书是我研究生时看到的课外书，也推荐给大家。介绍完可以屠龙的书，再来讲讲自己读过的一些比较好的书。这些书可以提高你的专业技能，让你的职业道路走的更扎实，更长远，所以我称为乘龙术。C语言之父写的，入门经典书籍，建议大家作为C语言入门的第一本书。可以作为C语言工具书，也可以作为入门。深入了解指针，看完以后对指针不再害怕。看完后可以避免C语言开发的一些坑。这是我在大二学C#时候看的一本书，里面的代码我全部在电脑上手打了一遍。如果想对Windows系统有更深的了解可以看看这本书，我当时在图书馆看到了这本书，讲的也挺不错。Linux入门书籍。我记得在大一下学期，有段时间自己痴迷安装各种版本的Linux系统，到最后虚拟机上把当时各种Linux发行版都装全了。这本书我没有看完，但里面的讲的算法都很不错，想对算法有提高的同学这本书一定要看看。这两本书是在上Java课时看的，同样不是我们教材，在图书馆发现的。讲Java并发库的一本书，这本书强烈推荐。自己看这本书的时间很晚，是研究生找工作时候看的。同样是讲Java并发编程的。Java并发编程实战相对来说全是干货，看起来可能比较晦涩。这本书可能看起来更通熟易懂些，但是没有JavaAndroid开发入门书籍。因为我当时学Android时候这本书还没有，所以自己不是通过这本书入门的。这本书强烈推荐。是从Android初级向中高级进阶的必看书籍，里面讲的知识点都很好。重要的是Android面试会问到很多这本书里面的知识点，找Android开发必看。从源码分析Android系统的书。自己找工作时候反复看了很多遍，面试时候也问到了一些知识点，找Android开发的也可以看看。从Android向后台转型过程中看的一本书。比较全面的介绍了Java Web知识，可以当作入门辅助书籍。学习Spring时候看的书，主要介绍了官方文档的知识。讲的很全面，准确度也高。Spring MVC入门书籍，可以快速上手Spring MVC。学Java Web离不开Maven，这本是Maven入门书籍，讲的很全面。找工作时看的书，主要讲网站从小到大发展过程中技术架构的演进。看完以后你就知道为什么一个淘宝首页会有那么多程序员维护了，也能让你有理有据回怼对产品提出的“给我做一个淘宝，美团”的需求。主要介绍大型网站建设过程中使用到的一些技术，可以作为技术参考书。从中间件角度介绍大型网站的建设。大二上设计模式课时看的书。当时的教材晦涩枯燥，在图书馆闲逛时看到了这本书。这本书以讲故事的形式逐一介绍了23种设计模式，生动形象。还有代码示例，可以变学边实践，是入门设计模式的一本好书。大四时候看的书，可以学习书里提到的编码技巧。大四时候看的书，同样可以提高自己的专业素质，构建专业的编码风格。大一时候看的一本小说。讲了一个程序员大学、工作、创业、以及爱情故事经历的励志书籍。我在手机上看完的，看的时候热血澎湃，让我在大一就对程序员这个职业有了一个初步的认识。这本书大家应该都听过，是我在大四时候看的。当时实体书比较贵，图书馆也没这本书，我在网上下载了电子版，花了两天时间趴在电脑上看完的。可以学习一下乔布斯创新和执着的精神，苹果有如今的成就不是偶然的，与乔布斯的做事风格有直接的关系。研究生时从图书馆借的一本书。是一本互联网发展的历史书，看完可以对互联网的历史有一定的了解。硅谷教父写的书。我在研一时候看到的书，可以一定程度提高程序员的情商，财商。这小节的标题是,,,,,,,,,,,,,,,
如何用我奶奶也能听懂的话来讲什么是 debug？,,你奶奶蒸的馒头又大又软，你蒸出来的又小又硬，咬一口还粘牙。（你试了几次都是这样，（拿着你奶奶给的配方看了几遍也没看出来什么问题。（于是你把你妈喊了过来，让她看看原因。你妈也是蒸馒头的老手了，瞅了一眼案板上堆完面团的痕迹（你一拍脑袋，是这样的！于是你又试了一遍，揉完面后放了十五分钟再上锅。（你给你奶打电话，她说蒸馒头重要的就是和面、发面、揉面、醒面、出锅这几步，你每到关键的步骤都给我打视频，我来看看（你开始重新和面，你奶在视频里看着。（一直到上锅你奶都没有发现问题，她也纳闷了，她就住隔壁单元，于是一溜烟跑到你家，说：我来操作。（馒头上汽后蒸了十六七分钟，你奶把火一关。这时你急着要开盖子看有没有蒸好，手刚伸过去就被你奶打了一下：要焖个五六分钟再开盖，你现在一开盖馒头不都缩了？（你恍然大悟：原来如此，后面就交给我吧！（果然，这次的馒头蒸得又大又软。你想了想你妈和你奶教你的，记在了配方边上，以后就不会再犯同样的错误了。（,不是，很多答主都忽视了一个问题，我奶奶  就不能是还有，你怎么敢假定题主奶奶性别？他奶奶就不能是,早上，奶奶在狗子胸前的篮子里放了一点钱，让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到一半迷路了。于是带着狗子重走一遍路。。解决路由问题。。第二天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到早点摊。发现油条买光了。。于是奶奶加了一个错误处理。在狗子胸前的篮子里放了一张纸条。写上如果没有油条，就买大饼。。第三天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到早点摊。发现钱不够了。。于是奶奶加了一个错误处理。在狗子胸前的篮子里加了一个检查条件。检查钱数。。第四天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到早点摊。发现油条涨价了。。于是奶奶增加了金额分配空间。在狗子胸前的篮子里加了钱。。第五天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，买到油条啦。。。。调试结束。。。,这个主要得看令祖母高寿几何，一生所治之学分属何业。如果老人虽年逾古稀，但1973年之前就由自动控制或无线电等专业毕业后被分配去了备注：,翻出祖传大米缸，用祖传米碗舀出一碗长了虫的大米，恭恭敬敬端给奶奶，说：“奶奶，今天下午我做饭，你帮我debug一下”,“奶奶，为啥您当时找我爷爷不找门口村长家儿子。”“村长家儿子丑”“对喽，这就是debug”“奶奶，为啥我二婶不招人待见？”“她抠门”“对喽，这也是debug”“奶奶，今天的包子没昨天的好吃为啥？”“没放鸡精”“对喽，这还是debug”,奶奶们不关心那么detail的事情，你就说是“大城市，好工作，工资高，有前途”，就完事了。“呵呵，我的大孙子真有本事！”,去田坎坎拔草秧秧。注音：kei tián kàn kaner fá cào yāng yanger含义：去田地里拔杂草。注：假定你奶奶是四川人。,问ai就行了gpt3.5：gpt4.0：,大家不要看不起这位奶奶！小心到时候回旋镖扎到自己身上！万一这位奶奶Github就算以上达不到，万一题主奶奶是一位AFOer/AFACMer呢？那不是班门弄斧吗,贪官就是bug，debug就是把他们揪出来开除党籍该坐牢坐牢该枪毙枪毙。,您孙子写文章给电脑看，不知道哪个句子写错了，电脑看不懂罢工了。得把几本书厚的文章重新找过来一句句查——对，错一个标点符号也不行，这周不回来吃饭了。,那你得先把你奶奶的简历和Github主页贴一下看看情况，不然我们怎么知道怎么说她听不听得懂,奶奶你看，这米生了米虫，就要想办法把米虫搞出来。我这玩意儿也是，搞不好就有些小毛病，我们也叫它虫，要把它找出来。,奶奶哪管听不听得懂debug啊奶奶只是想多看你、多听你说两句话罢了,打毛线漏针了，要补上。也不是不能穿，但是有时候会漏风，也容易扯烂。所以就拿来对着太阳看哪里透光明显，仔细看那里的针脚，找到漏的地方，但不能拆线，把毛线穿进去合拢。这件织物就是被缔补过了。,bug就是虫子，电脑里也有虫子，所以电脑会工作不正常。debug就是把虫子都捏出来，电脑就可以正常工作了。,程序员的比喻就像老太太的裹脚布——又臭又长，还讲不明白debug就是“挑毛病”，工作没干好，找找原因，解决一下，这就叫debug直说很难吗？？？？？？苦程序员已久当年学java，问学长，什么叫父类子类，学长：父类就是我有一条内裤，你是子类，你就也有一条内裤，你有一双袜子，但我没有一双袜子，懂了吗我：懂了（内心：懂个p）回去翻书课本：子类会继承父类的全部特性（记不清了），同时可以拥有自己的其他特性，这些特性父类并不会拥有。我是学数学的，计算机比不了你们，但是我知道“特例不代表全部”，你们有举例子的精力，直接给一个全集的定义多好，然后再举例子才有用啊,在她包饺子的时候，赶跑来捣乱的曾孙子。,自行车补胎，先要找到哪里漏气，弄盆水，把轮胎充上气放水里，漏气的地方在水里会冒气泡， 然后在这个位置贴一片补丁，这个过程就是debug。
编程新手如何提高编程能力？,本人国内某重点大学渣渣专业大一在读，专业对编程要求较高。大一刚学编程（C/C++），感觉有点吃力，求指点。我们平时练习都是做的OJ(老师负责选一些题让我们做，也可以自己随便刷），一些题还好，可是有些题难度感觉很大，有时好不容易有了思路，转化成代码都要老半天，别人一个小时就搞定的事情，我可能要花三四个小时，而且我本人比较粗心，经常被一些小错误坑了很久。最后就算千辛万苦地做出来，感觉也不值得，毕竟时间消耗太大。还有些题一些思路也没有，但是其他人（也是新手）就能搞定，基本就是别人过10道我过7道的水平。这个时候就会发现智商上的差距真的无法弥补。所有这一切，都让我对自己的前途产生了怀疑，这样下去，我可能只是一个中等水平的苦逼程序员，无法进入顶尖行列。我知道会有人叫我说要努力，可是怎么做？刷题？想看个答案都找不到？问人？哪有那么多人闲着没事干，而且解答正确，使你能够理解？做产品实操？写个两百多行的代码就已经快乱得不行了，不行。看书？终究只是纸上谈兵，没有实际操作的感觉。求救各位大神指点迷津，看看本人是否要转专业？（补充说明，其实我对IT还是比较有兴趣的，特别是人工智能和图形学（游戏开发），也有过很多好的app点子但苦于能力低无法实现。数学自我感觉良好，主要是初高中搞过点数学竞赛，成绩也还可以，所以基础算是比较扎实，但是不想去数学系。）话说回来，我没什么理想和目标，可能还在寻找中吧。总之，请各位提出点建议，关于大学的任何方面都行，学习、生活、理想、交际（谈情说爱的就算了），指点迷津，先谢谢各位了。,"学习编程, 既要考虑诗和远方, 也要考虑眼前的苟且。每年像你这样的学生不计其数，大一刚进校，一门C语言，学校发一本垃圾C语言教材，按时上课，老师在那里念念PPT，讲讲浮点型变量，有的学生学的一头雾水，开始怀疑自己，准备转专业，放弃计算机，有的学生学懂了，写程序一直报错，开始怀疑自己，有的学生觉得教材写得不好，去书店转了一圈，买了三四本C语言的书，但最后厚厚的灰尘盖在了书上，再也没翻过。这三种学生，如果继续这样，最后都要凉凉。马克思教给我们要具体问题具体分析，那我今天就来分析一下，计算机专业的学生，到底应该怎么学计算机，才能效果最好，进步最快。如果你要学习物理，我推荐你顺着物理的发展史学习，先学习牛顿经典物理，再学习热力学，电磁学这些不那么经典的，再学习相对论，量子力学这种彻底推翻经典物理的，再学习但是学习计算机，真的适合这样吗？先学习电路，你要是这么学，必然爆炸。计算机的学习最好应该是这个顶，顶到什么程度？有人说，C语言就是高级语言了，从C语言开始学就好了。但是如果让我教计算机，我第一节课教学生们的，绝对不是C语言，而是教大家如何使用我还要告诉大家如何使用如果可以，我还会教同学们如何科学上网，让英文编程环境成为习惯，让遇到问题google，而不是百度成为习惯，让大家在第一节课上完，就能进入这个世界编程大社区，哪怕什么都不懂，你也能保证所在的社区，就是世界程序员的大家庭当你进入Github，看着各种有趣的项目的时候，相信我，你的视野就会在此为起点，快速打开，不断增长，进入一个良性循环。而当刚上大一的学生第一次进入有人会这样说我：“Github还用教？刚才你说的那些学生，如果能被C语言的困难打倒，那他也不适合做程序员，转行正好。”像这种话，我想说，在很多时候，佛和魔仅在一念之间，你在最开始的时候点到了，给了他引导，他以后可能会马上进入一个正反馈状态，如果你没点到，马上可能就负反馈了。我一直觉得国内的计算机专业的学生很可怜。当当Google搜索可以精准定位你的问题的时候，学生们还在为百度搜索出来乱七八糟的搜索结果无可奈何。你用百度，用中文搜索，你连但是你可以去问问，做一个调查，有多少大一结束的学生，没上过你再统计一下有多少比例的大一结束的学生没用过google，并且对其用不了的原因不太清楚？有人说，刚开始直接学了python这种很简单的高级语言，以后遇到C肯定被吓跑了。事实恰恰相反，在你了解到python的性能问题时，你才会了解python是在你在编程语言中涉及到了“当你发现某个算法，人家的实现比你快很多的时候，你会自然地去思考，为什么我的程序运行这么慢，然后发现对方用的数据结构与你不同，甚至用了一些算法，比如有了需求和疑问，再去学，这样一个过程，是学习的金钥匙。你指望学生自己打开视野，但是那些自己打不开，需要你帮忙开下门的呢？在你的视野被打开之后，我还希望你懂这些：比如你学C语言，与其去做那些OJ题，不如在github上找个C语言项目，然后阅读，理解，修改，模仿。个人认为在知识爆炸的年代，两不要：（真实情况：经典教材都能下载到免费pdf，语言，框架，文档往往已经写的很好，而且最新，github上有无数优质开源学习资源）三个要：我曾听过一种论调，说程序员不会用命令行也没关系。我想说的是，第一，这个世界没有那么美好，什么都要给你做一个图形界面，第二，对于命令复杂，命令多的工具，就算做出来图形界面，往往比命令行更难用，而且命令行可以用命令行脚本进行批文件自动化执行。两个原则：我希望所有程序员明白一个事实是，”我会什么”这句话，其实是最没用，最虚飘飘的东西，你说你会java，python，c，但是你要说，XX著名项目作者，那你就牛了，我也不需要让你证明什么了。大概随便说了点，还有很多内容可以补充，先就这样了，谢谢大家。",其实很多人学编程都会遇到困难，我觉得其中一个根本原因是他们没搞明白学编程到底是学什么。编程不是一种知识，而是一门手艺。我们从小到大的学习都是学习知识，流程一般是课前看书预习，上课听讲，下课做作业，然后复习考试。但是学手艺可不是这么学的。我们先拿游泳举例，游泳不是知识，而是技能，也可以算门手艺吧。需要预习吗？需要上课听讲吗？不需要，因为两岁小孩都能学会游泳，他们连话都不太会说呢，怎么可能听课预习呢。游泳是通过在水里的练习，教练手把手地传授动作，一点一点提高熟练度学会的。我们再来看看弹琴，学钢琴一定要有钢琴，音乐基础知识也是老师在练琴间隙传授的，并且一定会结合练习，另外练琴时间是很重要的，必须保证一定的练习量，有些理想远大的琴童练琴时间可以用惨无人道丧心病狂来形容。千万别把编程看作知识，计算机科学是知识，但是编程是手艺。既然是手艺就要用学手艺的思路去学习。以动手练习为主，看书学习为辅，甚至极端点，初学的时候除了看必要的文档都可以不看书，等有了一定编程基础后再去看书，看完书立刻动手编程去验证书上的理论知识。练习一定要循序渐进，把手艺分解成几个简单的动作，反复练习直到熟练，然后再把基本动作组合起来练习直到熟练。拿C语言举例，比如从认真写好一个Hello world开始，然后去熟悉 if  for while 等基本关键字，然后熟悉字符串操作，内存操作，练习查找 排序 找个师傅，手艺的一大特点就是自学是很慢的，而且容易走弯路，而有人手把手教要快得多，手艺有很多细节，实际操作经验，需要去体会感受的东西，这些细节书上基本不会有。坚持做大量的练习，以代码行数为例，每年50000行左右是比较一般的练习量，有毅力的话可以挑战10万行。（有人说代码行数不代表什么，行数多不见得程序就对，写得好的程序代码很少blablabla，滚，去跟朗朗说去，告诉他其实不用练那么长时间琴。）回忆下自己当年是怎么学会骑自行车，学会游泳，学会打篮球的，按照那个思路去学编程，而不是用你学大学课程的思路去学编程。记住，编程是手艺，不是知识。＝＝＝＝＝＝最后再强调下，对编程能力本质最好的比喻就是弹琴。但是有了编程能力还不能算优秀的程序员，优秀的程序员是作曲家，他们不仅能想出优美的旋律，并且能弹奏出来，就像优秀的程序员不仅能想出优美的算法架构，而且能把它变成可执行代码。你很难想像作曲的人不会任何乐器。很多人的问题是想当作曲家却不肯下功夫去练琴。打个预防针，估计有人会举出反例说我就知道某某某作曲家不会乐器（其实真的有）。我要说的是，等你成了公认的著名作曲家之后再说自己不会乐器，那你牛逼。在成名之前就这么说那是煞笔。,当你提出这个问题的时候，总有人会告诉你，你应该学习这个，学习那个，亦或者是刷题根本没用，你应该去做项目，亦或者你看这个视频没什么卵用，你应该自己去实现一遍，亦或者是你应该使用xxx框架，xxx语言，做一个xxx系统，这样你才能学到很多。我想说这个问题可以做如下分解，编程但是很不幸，你的生活中不会有这样的老师傅，你-----补充-----有人问在哪里看答案，这里给大家提供一个看答案的网站，是我觉得比较高质量的答案：-----3月21日补充-----看了评论里有人说，说说另一个问题,其实这是新手程序员的普遍问题，如果你中招，我只想说很正常。除了其他帖子里强调的技能锻炼，其实另一个大问题是编程能力测评。虽然大学也会诉诸考试，也有厂商的认证考试，但这些测试方法都只能解决评价知识水平的问题，没有办法评价真实的技能水平。交规背的再熟也不能开车上路，怎么帮不具备能力的新手，真正获得编程能力，迈进软件开发的大门？老美一直在寻找一个可量化的科学方法，直到都知道熟能生巧，技能是练出来的，但具体练什么，怎么练呢？CMU教授也给出了办法。他们做了一个供学习者练习的虚拟机镜像，可以免费从网站下载：最后，不知道卡耐基梅隆大学的，捎带科普一下：他们是美国计算机四大名校之一（其他三个是麻省、斯坦福、,哇，已经有25个答案了，估计我的不太会被看到。。就针对题主的疑惑说说自己的感想吧~以数字罗列的是我的观点~-----最近我也在刷，刷 Peoject Euler（）。第129题我已经想很久了，一点也没头绪。有时候灵机一动，哗啦哗啦写了3，4个小时，最后发现还是错的，就很懊恼。一方面是觉得自己笨，另一方面是因为我在心中给自己树立了一个假想敌：可能这感觉在遇到挫败的时候会十分强烈。但我要说：（1）（2）-----我有个英国的讲师，是个Java大神。但是！在Project Euler 的第139题那边，我光是讲一元二次方程的求解公式就给他讲了1个小时（本人英语也是相当捉鸡）。最后我做的比他快。如果他也这么想，他一定崩溃了：对此我想说的是：你怎么知道别人是“新手”呢？说不定人家只是“扮猪吃老虎”（形容看起来很蠢但十分牛逼）呢？退一步讲，人的经历千差万别，说不定人家以前就做过这个问题呢？再退一步讲，人家说不定刚好灵光一现呢？再再退一步，（3）（4）（-----我现在还是中下等苦逼程序员，但我不怀疑我自己，因为：（5）（6）-----确实好像大家似乎都不太愿意“浪费时间”，而没有答案更是一件令人悲伤的事情，那么你需要：（7）（8）-----不知道这里要怎么吐槽了。。请大家配吐槽语。。预留空间：（⑨）-----（10）-----我的建议是：（11）（12）最后的最后，如果因为我这个让你坚持下去修成正果了，请一定要记得我哟~祝好！啊嘞嘞，快下班了！走咯~ 报告组织我又成功安利了一些小朋友进入了程序员大军！谢谢大家！~别忘了那个吐槽语~,去每天花两小时写代码，去研读各种去写技术博客，去蹭技术讲座、会议、公开课程。去逛Github，去StackOverflow上提问，去论坛上找技术大佬聊天去参加去尝试自己写一个个人网站，或者开发一个游戏APP。......只要你愿意提高代码能力，有无数种方法能帮到你，但你需要让你的意愿充斥整个身体，并相信能做好。俗话讲，不积跬步无以至千里，新手想要成为高手，疯狂的练习是第一步。编程应该是最能体验prctice make perfect的技能之一，在前期积累的阶段，往往要大量的去刷题、比赛、模仿，才能显得游刃有余。资深码农就像是老师傅，哪个不是键盘敲到发白。可能练习不一定会让你完美，但大量的练习会让你产生人的大脑可以分为反射、思考、记忆三个功能，大脑可以通过大量的反复练习让思考演变成习惯，最后跳过思考只需要反射的指令操控就能完成，从而达到“生巧”的效果。当然作为程序员，练习不是一味的重复，或者去完全复刻别人的代码，每一次练习都应该增加难度，有突破自己认知的成长。这样经过反复的输入、评估、输出、纠正，你会有惊人的变化。记得工作第二年我和组里同事一起参加某个交通数据科学比赛，根据历史数据预测未来车流数据。为了找到好的算法模型，我高强度地开始使用google，翻遍了kaggle、前前后后代码写了有上万行（包括数据探索、新老方案），比赛后发现自己在编程和算法上比以前通透了不少，也知道哪里有宝藏，哪里有大神。这是我编程能力第一次开始突飞猛进，发现编程真的是一门熟能生巧的手艺，不管是比赛、项目、习题，哪怕是抄代码（初学），都会让你快速进步。但真正想要成为大佬，还得要勤于思考，不然久而久之会变成没有灵魂的代码机器。以学习Python为例，有很多网站可以提供练习精进的资源。Github是全球最大的代码托管网站，也是Python资源最多的网站。各种Python相关的教程、开源项目、技术书籍、数据资源层出不穷，比如说大名鼎鼎的还有诸如awe-some python、Python-100-Days、ML-For-Beg你用Python关键词搜索，会出来300多万的相关仓库，足够你花一辈子去学习。牛客网是国内很火的免费刷题网站，上面拥有众多关于Python的面试真题，也有适合小白初学的训练题。Python练习题不仅包括语法，还有数据分析、机器学习、爬虫、可视化等你可以在牛客网上的编程环境里写代码，无需自己安装Python软件，非常方便，可以试试看。Kaggle是世界上最大的数据科学比赛网站和社区，里面有成千山万个比赛项目，涉及数据分析、机器学习、深度学习、kaggle还有各种各样的免费数据集、模型、教程文档，提供给数据科学爱好者使用。,除了看经典书和看优秀的源码之外最重要的一点是刻意练习。刻意练习包括两个层面，从「写不出来」到「写的出来」，从「写的出来」到「写的很好」。从「写不出来」到「写的出来」的练习过程大家都知道并愿意实践，而从「写的出来」到「写的很好」这个过程往往被大家忽略。比如写完了一个类，会不会回过头仔细考虑这个类设计是否合理，接口设计的是否清晰好用；写完了一个函数，会不会考虑这个函数是否单一职责，是否与函数名语义匹配；写完了一段循环代码，会不会想想有没有更简练和清晰的写法。这个过程可能比前一个过程更耗时更费精力，如果回过头仔细考虑的时候没有发现可以改进的地方，那么可以从优秀的源码中学习。当经过长时间的刻意练习之后能够写出清晰易读的代码，编程能力自然有很大的提高。,如果你看到这个回答，恭喜你！不论是初入编程领域的小白，还是已经在工作几年的老手，下面的内容都将对你有很大的帮助。这个回答我会试着给你带来一个更加不一样的编程能力提高实战指南。如果你觉得这个回答对你有用的话，也不要白嫖好吧！点个赞就是对我最大的鼓励。欢迎转发让更多人看到这个回答，一起变强！先来说一下自己的情况！我从小学就开始接触电脑，不过到了大学之后才接触编程，整个大一都很迷茫，编程很少，也不知道如何提高自己的编程能力。大二的时候，自己加入了学校的一个技术组织，自此之后，便真正开启了自己疯狂的大学自学编程之路。自学编程路上，Github 绝对对我帮助最大。 我在大二就开始接触 Github 了，当时就觉得上面有太多不错的学习资源了。到了大三下学期，自己就想着说要不也尝试着做一下开源呗！然后，我就从比较好入手的 Java 学习和好的！下面我们就开始正文！想要自己编程变得更强的小伙伴记得多记笔记。学习编程前至少要有一个稍微适合一点的电脑吧！关于电脑选择，我觉得不要纠结是买 Mac 还是 Windows。作为一个使用了 Windows 开发 4 年，Mac 开发一年的人客观地说，两者对于编程效率的影响没有你想的那么大。特别是在你初学编程的阶段，是完全没太大区别的。Mac 的性价比更低，一台合格的 Mac 开发本 1 万 2 起步。虽然它确实好一些，但是选择电脑的时候还是要根据自己实际经济情况来决定。另外，一定不要选择内存低于 8g 的电脑，有条件的话最好能 16g。很多人可能会觉得说，我们学习编程，首先是要找一门编程语言好好开始学，比如我在上大学的时候最开始接触的是 C 语言。我觉得非也！就我自己作为一个从大学自学编程一路一路踩坑的过来人来说，初次之外，你还要搞明白一般情况下，但凡是初学编程的同学，往往都需要课后进行持续学习的。一是因为你可能刚学编程，老师教的东西你听不明白。二是因为程序员这个行业本身就需要不断学习。三是因为大学里面教的东西往往和社会实际需要脱节，只有自学才可以让你技术和社会不脱节。推荐几个我常用的学习编程的网站：上面有很多名校的课程和上面有很多比较适合入门的免费课程。另外，如果你需要实战项目视频资源的话，也可以在慕课网找到（慕课网打钱！！！）。是的，你没看错！看 B 站也能学习！B 站上面有很多优秀的学习资源以及优秀的 UP 主比如 Guide 哥。国内的公司慢慢开始向国外的面试形式靠拢，在你初学编程的阶段，也可以经常去上面找一些简单难度的算法题来做。主打付费学习的一个付费学习社区（极客时间私聊我打钱哈！）。不过课程的质量大部分都挺高的，我自己也看了里面很多的课程，并且很多课程都是 Java 领域大佬级别的人物讲的。了解了国内外有哪些比较好的技术社区之后，你才有机会认识到更多更优秀的程序员，看到更多对你有帮助的东西。而不是说，整个人的思想都局限在学校。这点是很重要很重要的! 比较好的技术社区的话有：知道了要使用 Google 搜索之后，你学习编程的和解决的问题可以提升一个档次。如果你实在是无法越过那道墙的话，可以试试必应搜索。你或许也发现了。很多成绩特别特别优异的同学，他们的编程能力其实并不好。在大学的时候，那些编程能力最强的往往是那些成绩比较一般的。我觉得主要是一个思维的转变问题。很多人学习编程的时候，总是想着我要把这个 API 记下来，把这个库的用法记下来。这样学习，导致的结果只有一个那就是你会很难受！因为，这些根本不是要死记硬背的东西啊！真还当这是上课考试啊！拿我自己来说：我平时也会写 Python，基本就是自己看着官方文档或者一些书籍的教的语法跟着写。如果哪个地方不会了，我就去查一下。大部分最新的资料/技术都是国外那边的，基本上大部分都是英文的。据说 90% 以上的程序员都不习惯直接看英文文档，都会选择看别人的翻译/总结或者书籍。但是，书籍或者别人的翻译/总结都会比较慢，而且难免会有个人主观因素影响翻译效果。这个时候很多人就会说了我的英语不好啊！完全看不懂英文文档。别担心！虽然要多看优秀的代码，但是也不要被 “拿 Java 来说，不知道阅读什么源码的话，可以先从 JDK 的几个常用集合看起。另外，我比较推荐看 Dubbo 的，因为感觉会稍微相对容易一点，模块划分清晰，注释也比较详细。搞清楚了 RPC 的基本的原理，知道如何自己实现一个 RPC 框架之后，看起来就没那么吃力了。另外，随便一个框架的源码都 10w+行了，都看一遍是不可能的。要挑选比较重要的地方看，就比如看 Spring 源码的话你一定要看 IoC 和 AOP，要知道一个 Spring Bean 是如何一步一步被创建出来的。你要看 Spring Boot 源码的话就要知道 Spring Boot 的启动机制是啥，Spring Boot 是如何实现自动配置的。看书相比于零散的看一些文章学习更加系统。当然，网上也有很多比较系统的学习资源，比如你要学习 Java 的话，可以看我开源的 初学编程第一步就是选择一门适合自己的编程语言入门。选择的时候，无非是要从下面几点考虑：下面这份数据来自 再来看一下 再来看一下编程语言的平均薪资水平和使用年限。这份数据来自于 编程语言只是工具。我们的确需要有一门比较擅长的编程语言，但是，不是任何时候，我们做任何东西都要使用这一门编程语言来做。比如 Java 适合网站开发而 Python 更适合做数据分析。我见过很多人学习编程一年多了，自己敲的代码可能还不到 1000 行。然后， 你让他做用自己学的编程知识做个什么东西，他就蒙了。就比如你学习 Java 后台开发的时候，能不能通过自己学过的知识独立做个网站呢？再比如你搞懂了某个框架原理之后，能不能模仿着去写一个简单的呢? 就比如我之前搞懂了 RPC 的原理之后，就自己动手写了 就比如技术选型的时候，相同的功能可能有不同的解决方案，你是人云亦云地不顾项目实际需要去选择，还是自己经过详细的对比呢？想当然肯定是根据自己项目的实际需要，然后经过各种对比之后选择！不要沉迷框架，多花点时间去修炼内功——底层技术。很多人觉得在学校里面学的数据结构和算法、如果你暂时觉得这些东西没有用，很可能是现在学习某门技术只是浮于表面。举个例子:如果你要看懂框架或者某个类库的源码，那数据结构是必须要搞懂的吧！如果你要培养和提高自己解决问题的能力，那算法肯定是必须吧!拿 Java 举例子，有哪些比较底层的技术呢？分享和输出的方式有很多种，给大家推荐几种最常见，同时也是我最常用的学习方式。可以养成写博客输出的习惯。我在之前有写过一篇文章来说为什么要写博客:简单来说，主要有下面    几点原因:这个时候，你肯定就纠结了： 作为一个从大二开始就坚持写博客，期间折腾了无数次个人网站的我来说: 这个时候，你肯定又要纠结了：Emm...这部分要格外好好看，适当记笔记哈，小伙伴们！给大家推荐几个最好也是最常见的搭建博客网站的方法，想要免费高速个人博客网站的小伙伴们不要错过。Hexo易非必须中一般Vuepress易非必须易友好Docsify易非必须易不友好Wordpress中必须易友好Halo中必须易一般 关于如何使用 Docsify 搭建一个自己的博客网站，我还写过一篇文章手把手教你搭建：有了自己的网站后，你可以将自己的文章整理成一个系列，然后部署在自己的网站上，自己想看的时候就可以随时查阅。你也可以将文章同步到其他博客平台来扩大自己的影响力。我整理 7 个常见的技术平台供大家参考：一般公司都会有内部的技术讲座以及博客平台。你可以在公司或者项目组内部组织技术讲座，这样不仅可以增加自己的存在感，还能提高自己的表达能力。你也可以在公司内部的博客平台分享自己写的博客，这样你写的东西就能被更多人看到了！你可以在 Github 分享很多东西，你的学习笔记、自己做的实战项目、自己造的轮子......（资源类的不太推荐，太容易侵权）。虽然，现在 Github 被很多人单纯玩成了引流工具。但是，整体来说 Github 整体技术环境和氛围还是很不错的！另外，最好的话是要给项目弄一个英文版本，项目代码中的注释最好也要是英文的。毕竟是开源，最好是能准守开源精神使用世界通用语言（这一点我自己也没做好，反思！）。我站在自己的这些年自学的角度，掏心窝子地说了很多话。看了这我的回答之后，哪怕你只学会了要使用 Google 搜索我都觉得开心，也希望这篇文章能够影响到更多人。另外，文中讲了很多编程领域不可争的事实或者说正确姿势比如：不要以学生时代应试考试的方式学习编程、多实践、2020-07-15 1:36,【绝大多数人努力程度之低，根本到不了拼天赋的程度。】现在IT界的大佬里，马化腾公认天赋不高。在深大读计算机时，小马不显山露水，他不是编程最强的也不是成绩最好的，但完全不妨碍其后来的发展。同时，小马本身也是一名合格的程序员，据说写了第一版的OICQ Dialog。后来小马总结自己编程的学习方法，是用抄代码来打基础，我觉得他的方法对题主也是适用的。不知道怎么学？觉得自己天赋低？想做APP?那就用笨办法，看点基础的知识语法入门，然后上网搜一下别人做的相关例子，或者教学视频什么的都可以，有源码简单点的。看别人是怎么实现的，把别人的实现过程自己在电脑上实现一遍。调通OK了，改一下其中的某个模块实现一些新的功能，就这样一步一步的往前走。多写代码多积累，有一定的基础了再回去看书，和别人交流，参与到一些学校组织或者社会上的开源非谈到天赋，在我读书时，学校很多编程大牛都是没日没夜在实验室干活，在各种科研创业团队里做事。隔壁宿舍的大神基友每天晚上11点从实验室回来，睡前的爱好是看Android源码，题主扪心自问，你真的尽力了吗？如果没有尽力谈天赋又有什么意义？从题主的问题描述里我感觉题主的意志还是太薄弱了点，校园里比起社会已经舒服很多了。对于程序员来说，编程是基础，是敲门砖但不是全部，如果你想往更高的层面发展，学习能力、努力程度、情商缺一不可。建议题主先把心态摆正，静下心来，参考我和 老师等人的方法，再努力一段时间试试。附上一个小马问题的链接，当年他也是很拼的：,每天看课本记忆语法，殊不知编程实际上是一种技能，我大学四年做的练习、项目、外包加起来，累计写了10w+行代码。写什么？可以是OJ上的题，也可以是课后的编程练习题，总之先把代码量堆上去！最近很多新关注的小伙伴，私信问我，说大学很迷茫，不知道该学什么。在这里统一回复下。既然是学习CS，那么在这里，我粗浅的把计算机编程领域的知识分为三个部分：基础知识是指不管从事任何方向的软件工程师都应该掌握的，比如数据结构、算法、操作系统。特定领域知识就是你从事某个细分方向时需要掌握的知识，比如做游戏引擎的需要掌握图形学；做前端的需要掌握浏览器渲染原理、前端三大件；算法工程师需要更多的数学知识。毕竟计算机各种门类挺多的，需要选个细分方向专研下去，什么都学只会什么都不精（大佬除外啦。上面那么划分可能有同学还比较疑惑，再细一点，我认为需要重点掌握学习的就是 ：计算机专业的核心课几乎都是围绕着构建上诉这些能力来的，比如：还有高数、线性代数、离散数学、网络原理、网页设计、多媒体技术、汇编语言、面向对象的设计语言、Java 编程、ASP、SQL等总的来说是另外，对于还在大一、大二的很多学弟学妹们来说，可能觉得刚学会一点编程语言，什么都做不了，更不知道和实际工作的差距在哪。那么最好的方式就是先按部就班的把学校安排的基础课程学好，再在课外自己多练习编程，了解一些业界的技术、框架。把时间充分利用好。我在大一之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。大一开学，第一门编程语言就是学的 C 语言，怎么说呢，老师讲的，书上写的我都能看懂，但是让我写一个大的程序，我就摸不到头脑。不知从何下手，学了半学期，也只能写写课后习题，算算大一上考完 C 语言后，我便在心里默默念想，这辈子再也不写 C 了，但没想到的是，后来这成了我最爱的一门语言。混到什么程度呢，王者荣耀打了几千场，线代考试前一晚才在 mooc 上刷完所有章节，因为平时上课我基本都没听的，这也是我最后悔的事情。转变大概从大一下开始吧，那时候好几个室友都拿到了奖学金，于是，我自己也开始慢慢反思，觉得这样下去，大学可能就废了。默默的把王者荣耀卸载（当然，后面又下回来了，反反复复十几次。。。）大一下，开始学习数据结构与算法、数字逻辑这些计算机核心课了。此外，还学了一门当时我看来非常牛逼的语言：Java。为啥说我当时觉得它牛逼呢？因为刚经历过 C 语言的摧残，发现 Java有丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用，简直是新大陆。所以我学得很认真，还记得当时看过自己也用 Java 写了不少好玩的东西，比如这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师，Java 也算是帮我解锁了对于编程的兴趣。在学 Java 的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了“精通” Java，我在知乎搜索各种书单，先后看了《Java核心技术卷》《Java并发编程》好几本书，自觉 Java 基础还算可以，不过现在已经快两年没写了，成功转入C++阵营。而且我有个习惯，就是每天早上基本都是六七点起床，八点多对我已经算赖床了，所以和我室友显得有点“格格不入”。早上起太早的话，他们还在睡觉，我在寝室写代码的话，难免会发出各种声音吵到他们，尽管我做什么都是蹑手蹑脚，生怕发出椅子摩地，或者碰撞的声音，这让我也觉得不太方便。所以，后面没有课的早上我一般都去图书馆五楼自习室了，在那看书，看书觉得烦了，就写会代码或者刷刷知乎，看看博客。这是被我长期占领的一个位置，因为书太多，不方便每次都背来背去的，所以就找了个考研自习室。就这样从秋天，到了冬天，桌子上多了围巾手套，还有 C++ primer（误，我从大二才开始学C++的）那时候，每天上午的盼头的就是早点到中午，我就可以去吃饭，然后去学校散步了，我经常把中午饭菜拍下来，感觉蛮有意思的哈哈哈：一般我都是赶在中午下课高峰之前去吃完，然后去学校绿荫道散步大二时，在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到里面的汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C 语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。后来在知乎大佬的指引下，为了看懂这本书，去看了重学了 C 语言（主要是指针和内存），由于已经学了汇编，指针对我再也不是问题了，同时看完了《C和指针》、《大二那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，明明 16 年大一时客户端安卓开发还挺火的，到了 17 年各种机器学习、神经网络就席卷而来。不能不感叹，IT 行业日新月异呀，不学习就可能被淘汰。当然了，我也不例外的加入了，先后看了些跟着做了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理，再加上自己数学也学得不太好，这让我学得很没底气。于是机器学习之路也止于大二。大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后自己又跑去学 Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、知乎回答、抢课脚本，玩了一段时间也没太大兴趣了。时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索「操作系统怎么学」，不得不说知乎上各位前辈大佬的回答对我的指引作用极其的大。顺着一堆回答，我发现原来还能跟着别人写一个 mini OS，这对我吸引力太大了。于是我买了一本《我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入 C 语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。这本八百多页的书，我花了两个月时间啃了五百多页，一下课就跑去图书馆，在我的虚拟机中跑 qemu，那时候就沉浸在类似下图这种界面：当时我真的对这个入迷了，为了写 mini os我还去看了 Linux0.11 的部分代码，看了哈工大李治军老师的 OS 公开课，原因就是哈工大 OS 实验课是用的 Linux 0.11 来魔改。还很奇葩的把我 QQ 签名改成了 jmp 0x7c00(PS: 这句汇编就是跳转到 0x7c00 地址，BIOS 开始引导操作系统于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书（于是在大三左右开始了非常标准的 Linux C/C++学习之路：前前后后看了《顺便还看了点 Muduo 源码，自己模仿着基于 Epoll 写一个 Reactor模型的 Web 静态服务器，跟着知乎 Milo 大佬写 Json 库，总之，这段时期是写了一些小”轮子“的。（PS：知乎上有朋友问我是如何看完这么多书的，其实在之前的文章中就写了，看书我会有选择的挑章节看，不会从头看到尾的，而且大三开始课就少了，我基本就在刷这些书，其实时间还蛮多的？毕竟我也没参加什么社团、学生会之类，也没女朋友。。。那时候会每天记录看书的进度，感觉特别有劲：书看得越多，其实你越能找到自己的方向，大三上我就给自己学习定位：深入C++语言（多线程）+ 存储（学习 Redis、leveldb）+ 基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注学习 C10K、C100K 这样的后台服务器开发高性能、高并发的解决方法。当然了，还有些到现在还没开始，比如 也可能是学习变得不那么纯碎面向技术了，变成面向工作、面向赚钱了哈哈哈。值得一提的是，大三上我们学院有门 System Programing 的课，教材就是使用的 CSAPP，因此我之前大二草草看完的书，得以再次翻开，这一次我把附带的是个实验也挨着挨着做了，收获良多，有位运算各种奇技淫巧，有 Bomb lab 刺激的打怪通关、也知道了buffer overflow attack.... 还有实现基本的内存管理等等。印象最深的便是做 bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是熬夜连着把这几个 phase 过掉的，当然头发也没少掉。当时还在简书写了个万字长文记录： 再到后来，我拿到了微信实习 offer，然后顺利转正。在我大三下拿到实习 offer 后，开始做一些国外计算机课程 lab，一方面有钱赚，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些 lab 有些很有意思，对提高基础和编程能力很有帮助。在这里列举一些我做过的觉得有意思的 lab（之前有篇文章写过）：这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 VFS（虚拟文件系统） 机制挂载到 Linux 内核中，然后就可以用系统调用 open、read、write 这些来在你的文件系统上进行读写。VFS 是Linux一个机制，它规定了 IO 接口，然后你去实现这些接口，你就可以挂载在上面。通过这个东西我深入的学习和了解了文件系统，报酬也是非常值的。就是版本管理系统，类似 SVN 和 GIT的，但是相对 GIT 做了很多简化，核心的就是创建分支、分支合并、回滚、commit 这些，通过这个我又去详细了解了 GIT 的实现原理，并且自己写了一个简单版本的 GIT，受益匪浅，也赚到了几千大洋。这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多，但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：这是带去图书馆自习室的书（常占位置）这是毕业整理的书：买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。最后真心想说一句，滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”。逐渐构建起属于自己的计算机知识体系，然后选择一个专业方向不断专研。,"请原谅我使用英语作答，因为我的中文没有比英文来的打字更快。以下我将分享一些我对国外的线上学习coding的网站的整理，如果觉得是良好的咨询请关注我吧，谢谢。 - SF, Chicago, NY SFCoder Camps- SF Bay Area, Houston, Seattle, DChe Starter League -  - ChicagoStarter School -  - Chicago  - NY - Austin, San Francisco - Albuquerque (without quitting your job) - Chicago - San AntonioSoftware Craftsmanship Guild - Akron, OH:  - AustinPARSEC Group -  <  [Web Dev+Ruby on Rails] < [Web Dev, Ruby, Python, iOS tracks]  <theFirehoseProject> Web Dev & Ruby on Rails <Tealeaf Academy [Web Dev+Ruby on Rails]P.S.以上这些都是学习coding的，如果想了解一些关于英语的线上学习网站的话，也可以到我的网站观看我给其他用户的留言，谢谢，麻烦请你关注我吧。",虽然我不是重点大学的，只是渣渣学校毕业出来的，但是我还是想分享一下观点。首先要多加练习——这一步并非是指有意图的练习，而只是普通的练习。这是我用了两年不到的电脑的以及GitHub上的提交——都是练习为主，天天练习。然后就是： Tasking与学习能力作者：phodal链接：来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。能做到你想做的: Tasking与学习能力虽然这看上去是一件很难的事，但是也不是一件很难的事。这也不依赖于你是否对某一个技术栈的理解，这只实际上只是学习能力的一种体现。在扯这些废话之前，先让我们来看看我们是如何实现一个功能、应用的。这也是在Growth里提到的Tasking：以本文的写作为例，细分上面的过程就是：而如果将其划分到一个编程任务，那么也是一样的：所以，实际上这并不是考验你技术能力的点，而是考验你如何划分任务和学习能力的点。在我不断地实现一个个系统的时候，最后我才意识到了这一点——学习能力和Tasking才是最重要的。换句话说，你现在学会什么并不重要，重要的是你以后有没有学习的能力。有了一直想着过安逸的生活，所以就会安乐的死去。不过反正人生在世，自己开心就行，不要管别人怎么说。随后，我发现大部分我想到的都可以实现。那么问题来了：这实际上就是：用更好的方法来实现功能。,大学毕业，在一线互联网公司代码也写了五六年了，给几点建议：那些早上6点起来在那背代码的，放心，最后还是不会写代码。一门语言写几万行的代码量，就上手了。有空多逛逛github：码农每天都要跟bug打交道，学习如何调试，代码出问题就知道怎么找bug了解决 bug 的社区：几乎所有的编程新手都会犯的一个错误就是，把所有的代码逻辑都写完了，再开始跑。相信我，这样写代码会让你调bug到怀疑人生。正确的姿势是，写一点编译一下执行一下。平常把有用的代码、遇到过的问题等记在最后，真的很庆幸当初大学选了计算机专业。刚开始学也很痛苦，现在已经是真爱。,说点没用的：   轮子哥的堆时间论 深以为是。窃以为，编程就是织毛衣，再精美的织品，分析到最后终逃不过一个唯手熟尔。至于用什么方式达到手熟……楼上诸位已经说得很多了只是希望楼主认准一个方法后，能够坚持下去。毕竟，我们的,"目前赞同最多的两个答案很有道理,但不适合题主的状况.不知道诸位答题前有没有读题主的描述,题主作为""国内某重点大学渣渣专业大一在读"",属于刚入门,的过程.题主欠缺的不只是理论,方法,还有编程熟练度.题主的问题是能够救题主的,不是捷径,而是(基础)代码量.你能看到的大牛,除了少数天才外,大多数还是一行行代码积累起来的.题主说:""一些题还好，可是有些题难度感觉很大，有时好不容易有了思路，转化成代码都要老半天，别人一个小时就搞定的事情，我可能要花三四个小时，而且我本人比较粗心，经常被一些小错误坑了很久。""但是题主指出:""最后就算千辛万苦地做出来，感觉也不值得，毕竟时间消耗太大""其实作为一个过来人,回头想想,刚开始编程的我也是这个样子(请参考所以给楼主的建议是如下几点:1.坚持,学好基础,2.积累代码量,3.忍耐(甘于平淡枯燥的学习).",数据结构和算法本身就是比较难的，转化成代码还需要你对语法比较熟悉，初学者多花些时间是正常的。另外我们周围经常会有比我聪明的人，要调整好心态，至少在编程这件事情上我觉得还是勤能补拙的。把自己编程过程中遇到的所有坑都记下来，每隔一段看一次，积累多了就能避免越来越多的坑，你对这门语言也就越来越熟悉了。如果真喜欢，那就坚持下去，编程是一个熟能生巧的过程。我周围好多同事专科学校毕业的，技术都很牛，也没见他们智力超乎常人，但他们都很努力，很热爱自己的工作。编程这件事上，英雄不问出处。本人鹅厂码农一枚。,,,,
突然意识自己曾经引以为豪的编程其实是一种工具，这是一种悲哀吗？,,大学的时候，常常看央视的天天饮食，看完再吃食堂的饭，都觉得更香了。工作了，在国外，想自己做饭，又想起天天饮食，在线看太慢，就自己写了个下载软件，下载了做饭前看看。后来还给小孩下过动画片，给我妈下过养生保健。后来炒股，不知道那些指标策略有没有用，写个软件，把自己想的，书上写的，大师们吹的策略都实现出来，在真实的历史数据上跑，没一个赚钱的，遂退出股市，这么多年，省了不少心力。后来有了孩子，老婆嫌空调夜里温控不好，孩子容易受凉。我用用虾米听歌，想找点没听过的歌，但各个歌单总是有大量重复的歌，听一会才能发觉，筛歌效率巨低，就写个脚本，自动筛除歌单中听过的歌，找歌的效率立马提高，个人乐库从几百首到两千首，我还给网站首页上加个筛歌的按钮，好像官方为我定制得功能一样。没多久，虾米就倒了。后来思考人生的意义，干什么这一天才没白过，才睡的安稳，才不空虚。经过认真的琢磨，我觉得意义是在学习，生活，工作，健康等八个维度上的价值，把有价值的事列出来，赋上意义值，安排到每天的生活中，就不用愁今天干什么了。然后就写个app，起个名字叫“有意义”，放在app store里。迄今我用了五六年，导出来的excel文件，只有十兆大小，却包含了这几年每一天里我身边的事。这几年胃不舒服，吃药也是这次有用，下次照疼。让我心烦，决定要解决这问题。说是胃病要养，但我也不想吃的太无趣。就写一个app，列出伤胃和养胃的东西，记录下自己日常饮食和胃部症状，建立一个数据模型，画出图来，预测每日的胃痛风险，今天风险高，就老老实实的吃，风险低，就可以吃的潇洒点，刺激点。不但胃好多了，还发现自己的一个特点，越吃越馋。从读书到工作，我们在实现父母的期望，社会的安排，老板的想法。有哪一次，我们是在真正的实现自己的想法呢。一件事，我想做，我去做，我做出来，对于普通人来说，有几次这样的机会呢？编程是实现想法的工具！当你会编程，不用求助于人，你就可以单枪匹马的实现自己的想法。可以验证想法，进化想法，也可以敝帚自珍的欣赏自己的想法。这个过程，是极具娱乐性的。这是编程的魅力，也是创造的快感。有几个人想下载央视的视频？我想。有几个人想要重写空调的温控？我想。有几个人想要计算人生的意义？我想。有几个人想要预测今天会不会胃不舒服？我想。 无论需求多小众，我想，我就可以做出来，这大概就是工程师的超能力吧。,我发现有些同志总是在下面说什么“我们都是工具人”“编程不是工具是什么”，我觉得你们的思路错了。我没有和其他答主一样，强调“编程就是一种工具”这个概念。因为我试图站在提问者的角度去看这个问题，尝试理解大家或多或少都存在的一些困惑。你们总是在强调“自嗨”“鸡汤”，仿佛自己已经站在了理性的鄙视链最顶端，殊不知没有人是绝对理性的，你们也不例外。理性的思维并不比感性的思维要高级，我们灵魂的画像上也绝不应该只存在某一种色彩。以下是原回答恭喜你，意识到了编程和程序员的本质。说过一句话，可能不太适合回答这个问题，但我觉得还是有必要写在这里：或许你发现酷酷的python作为工具，大部分时候做的都是一些excel表操作，微信好友数据分析，爬网页，或许你发现成就了许多大神的各种或许你发现刚开始学习C#时带给你很多成就感的winform，或许你发现，曾经在一块单片机上点亮一堆LED灯泡时的成就感，在嵌入式开发者眼里啥都不算。引以为豪的永远不是，也永远不应该是什么编程，什么语言，更不是什么开源。各位应该引以为豪的永远是，在处理各种各样繁杂的业务之后，在解决各种各样复杂难以解决的问题后，在日复一日的生活带来的摧残下，,一句话给我整懵三次：编程究竟哪里高人一等了；工具究竟哪里低人一等了；上述一大串跟悲哀究竟能扯上什么关系？,·深受我国某些思想毒害罢了。『工具』是很高贵的，是人类存世的意义之一，也是人类最伟大的发明和贡献。现在的话术里面，『工具』反而成了个夜壶，不上台面的解决问题的消耗品定位。这是社会经济文化风向变化所导致的。为什么？因为社会性质慢慢变了。大家越来越发现，工具不值钱，或者说再值钱也比不过背后的资本。资本可以啥都不会，只有钱，甚至不懂经营也可以找到『经营工具人』，不懂技术找『技术工具人』，至于别的更没技术含量的那简直满大街都是工具人。为什么会这样呢？很简单，拥有资本的人，在社会框架里面占了过大的优势。一个很简单的例子，老板开公司，工人的劳动剩余价值100，公司总收入200，老板分走了100，打工人拿到100 。老板没出力就获得了100的剩余价值。很多给老板『洗地』的人总会这样告诉你，老板承担了『风险』，工人不管货能不能卖出去，他的工钱是死拿的，绝不会亏。亏钱都是老板在背。这些纯属扯淡。就不提老板卷钱跑路亏欠工资那种了。就正常的老板，你以为是200块钱回来，打工人和老板都拿100，老板不劳动担风险赚了100块钱。实际上是老板作为投资人，话语权被社会框架极度放大，他把你打工价值100直接压到20，不干拉倒。20这个数字怎么来的？不是他编的，而是社会成本决定的。简单来说就是一个人不用住桥洞，不用挨饿，所必须的最低成本。20年前刚上社会的打工人，一个月拿1000，10年前拿2000，今年拿3000，但是跟物价比较，永远都是刚够你租一间单人房，每天吃最便宜的盖饭，坐最低价的公交车，年底剩不下来什么玩意。这个就是社会最底层劳动力的最低成本。那么你想想，几十年科技进步，生产力发展，为什么这些『基本单位』打工人，相对价值成本还一直是那么多呢？发展带来的红利呢？进步呢？为啥没发展到刚毕业的年轻人干一年能买半套房呢？投资的永远不会给你打工人应得的那点价值，因为他给你，就意味着社会进步生产力进步带来的资本红利也分给你，你出一样的劳动，却能获得和资本一样的增值。这是做梦。能听懂吗？不用考虑细节，你就宏观看看就会知道：如果打工人能获得增值的好处，那么打工人和顶级资本家之间的贫富应该是按照不变的比例前进的。打工人月薪1000，马云1000万；月薪2000，马云2000万……这么下去贫富差距一直是成比例的，怎么可能拉大呢？所谓的贫富差距变大，一定是你1000元，马云1000万，你2000元，马云一个亿，你3000元，马云100个亿……资本家有了资本，就有了压价的能力；打工人的工作量不能存储，只能按天按次花费大量时间慢慢释放，一天不干就亏一天，所以毫无溢价能力。你今天不干活，白亏一天，而资本放着不动是不会亏的。两者讲价，哪个会先受不了？所以资本家（这个群体、这个阶级），可以用压价的手法把工具人控制在一系列标准内：干一年能攒下来一点钱；干十年可以攒几个平方，干30年外加贷款可以攒下一套房……打工人也就成了『工具』，因为『工具』是不参与分红的。只考虑它的损耗而已。既然是『工具』那还用给你什么好脸色吗？都是螺丝钉而已。实际上的工具是什么？它应该是人类最高目标之一。人类的科技、文化等发展，也不过是在不断完善一些『工具』而已。别说科研生产里面工具多重要了，就算是文化领域，能开发某个具体技巧『器用』的，那也不是一般的大师。比如从这个角度来看，当不上资本家的，也就只能向内索取意义，以改进工具为人生一大目标了。这个世界就是这个样子：在我们眼中的『大师』比如希区柯克？他有几个亿？·,之前跟导师讨论一个项目，基于之前发现的某种材料的一种牛逼的性能，我们打算把材料做出来试验一下。由于可选的成分太多，用传统的,嗨，发现了事情的真相，你却不愿意接受？你想想当年咱们为啥想要有计算机来着？不就是为了把人从复杂的计算中解脱出来么？computer的目的就是方便人们computing呀！昨天还和小伙伴聊天呢。关于我每天搬的砖。大部人写的东西，其实就是工具类呀。尤其是我们他们并不需要关心你底层到底是用的什么引擎工作的，经过了哪些步骤。只不过，作为写infra的你，就需要把你的螺丝钉拧好了，有哪些实现方式，需要考虑哪些因素，有哪些现成的工具可以复用？然后你处理好这些之后，就把你这一阶段的API定义并实现好。你工作就完成了，你这一环也就okay了。然后你就可以写下一组API了。你完成了工作有钱拿，离开产品和服务的技术，再nb又如何呢？其实有螺丝钉可以拧，还能养活自己，挺好的。,"最近几年我也一直在寻找人生的意义：当我们不再被基本的物质生活所困扰的时候，人活着到底是为了什么，可能这个问题一直没有答案，谈谈自己的想法。小的时候，我也崇拜过Linus, 后来更喜欢Xavier Leory因为感觉后者更全面一点。再后来因为工作的原因，近距离接触过，发现这种人生并不是我想要的人生，他们只是在一个很小的圈子里面是神一样的存在。后来自己经营一个程序语言的社区，经常被一些人气的半夜睡不着。午夜梦回，经常问自己为甚么要为一个不相干的人发脾气，他可能是一个你一辈子永远也见不到的人，甚至说完全不同的语言，生活在不同的半球。","大概1994年时候，那年，我16岁。电脑，当时还很神秘。平常人家，难睹其芳颜。我从没见过电脑，普通麻瓜一名。有一天，发现我哥整天在看一本书，他说，这本书讲的就是电脑。你只要看懂了，就掌握了电脑。我十分好奇，一看书名《BASIC程序设计》。我问我哥：显然，我哥给不了我答案。我只好自己去看这本书。第一章，讲了一种奇怪的计数方式，将一个数字不断除以2，记录余数和结果，最后变成一个1101001。。。样式的数，好奇怪，它是什么？它似乎是进入魔法世界的钥匙。书上把它叫二进制。我看了两周，我还是搞不懂啥是二进制？为什么要二进制？电脑，和二进制有什么关系？为什么学会了二进制，才能学这个神秘的B-A-S-I-C？我放弃了，16岁的时候，那个时候的世界，存在太多末知，有太多东西可以吸引我，当一名普通麻瓜也不错。1995年，我们开电脑课了。终于，要在老师的带领下，进入IT世界。一上来，老师就带我们背内功心法口诀，据说很厉害。口诀是：他强由他强，清风拂山岗；他横由他横，明月照大江 …………。哦，不好意思，看武侠太多，串词了。真正的电脑口诀是：王旁青头兼五一、土士二干十寸雨、……。对，它是“五笔字型”。我现在就在用它，来写这篇文章。学了五笔字型，我们终于上机了，我也终于摸着了电脑。我们排着队进入微机室，每个人都要穿鞋套。为什么要穿，不知道。如果有人可以不穿，那绝对是权威的存在。有一个高年级的同学，就可以不穿鞋套进入，这在我们同学心目中，简直就是“剑履上殿,入朝不趋,当然，除了五笔字型，我们还学了一个东西，启动的时候屏幕上用字符显示一个大大的：dBASE。create table\list\append……。期末考试，我们就考这些命令。1996年，刚过18岁，我毕业了。职高生吗，就是18岁毕业。我学的是会计，我应聘到当地一家做财务软件的公司。终于可以每天摸到电脑。我的职务是培训讲师，主要讲授公司财务软件的使用方式，还有电脑的基础知识，五笔字型什么的。我的讲师也生涯由此开始。1996年，我也接触到了另一个东西：C语言。我是看其实也就是只学会了条件、分枝、循环、变量、数组什么的。内存、指针还似懂非懂。以境界而论，这个时候最多就是炼气初级，入门级的程序员。我对底层十分感兴趣，到书店买了几乎每一本讲计算机的书，《电脑报》上的小技巧，更是看了一遍又一遍。1997年初，还尝试向《电脑报》投稿，我用C语言写了个DOS下隐藏文件的程序，我总结成一篇文章，寄给了《电脑报》。但最终没没有回复。不过，这不会影响我研究技术的热情。我还记得，有一天晚上，我在研究DOS的内存驻留技术，这是一种古老的在单进程系统中，模拟多进程的方式。在一遍又一遍的失败后，终于在午夜时分，成功了。我让一个程序驻留在高位内存中，它运行后，并没有结束，而是一直运行。每隔1秒，它让PC机的喇叭“B”的响一声。同时，还不影响你运行其他命令和程序。二十多年后，似乎还能感受到当时的兴奋。那种快乐，足以抵消领到好人卡时候的惆怅。是的，这一年我领到了人生中第一张好人卡。起因是，我帮一个朋友补习课程，她们学校在讲：BASIC，她听不懂。当然了，一上来先讲一个星期除以2记录余数……，谁听了都没兴趣，不懂很正常。我说：包在我身上。她说：可你不会BASIC。我说：放心，几天之内，我就可以学会。然后，我用了两天时间吧。翻看完了那本《BASIC语言设计》。学习一门语言，so easy。其实，学了多少种编程语言、某个编程语言的掌握程度，都是浮沙之上的高楼。还有一层在语言之下的东西，但我当年当然没有悟到。很长时间，我都以为，编程语言，就是全部。后面的故事，有我亲授，那有挂科的道理。她成功通过了BASIC的考试，然后就给了我一张好人卡。我还花了几个月，研究《8086汇编语言程序设计》。书中的东西，我一开始全不懂，每一个字都认得，但组合在一起，我就傻逼了。看示例程序，mov来，mov去，功能就完成了。mov相当于赋值，为什么赋个值，功能就实现了？后来有一天，我坐在一棵树下，发誓搞不懂绝不起身。终于有一天，豁然开郎，我顿悟了，大地震动，雷声阵阵，霞光普照，香气四溢。。。当然以上都是我在扯蛋。我的确把《8086汇编语言程序设计》看了好几遍，还抄，抄了有半本的时候，真的突然就明白了。内存，是程序的舞台。mov修改内存中的值，就是修改各种状态，……。就好像，有一块内存，对应显卡，只要将这块内存中某个字节改为1、0，就显示出一个白点、黑点（像素）。键盘，也对应一块内存，向这块内存写入一个值，就好像敲击了某个键。所以，我看别人的程序，都是mov来mov去的，功能就实现了。读、写不同内存区的值，就能完成某些操作。这是我第一次顿悟。1999年，21岁。顿悟之后已经有几年。越来越失去方向。DOS，那个文本的时代，过去了。我引以为傲的内存驻留，等等，这些高深的DOS技术，都过去了。多少年后，只剩下我曾经使用的网名：文本时代，还记录着，它曾来过这个世界。这一年，有个重要的事情，我又领了一张“好人卡”。“你是一个好人”，这是人生中第二张好人卡了。我给自己起了个新的网名：VAGE。把A和E两个元音颠倒一下，就是一个单词。我是想提醒给我发好人卡的女孩子们（对，要加们，是复数），颠倒一下，有时能更清楚的理解这个世界。百无聊赖时，我翻了翻已经买了好久的书，《Windows95程序设计》。好像也没什么。后来又看了比如，你新建一个p1.c文件，打开，马上就有下面几行：这就算是框架的雏形了。通过《MFC程序设计》，还理解了一点，函数指针的应用。把数据、函数指针，放入一个struct中，就好像c++的Class一样。……此后又过数年，（这些年，）我一直在老家省会做外包，也就是临时工了。使用五花八门的语言，满足客户开发五花八门的需求。其实就是打怪升级。我的技能点也不断增加，C/C++、Java/JSP/J2EE、HTML、网页三剑客、……，我们的项目部接到需求，客户想培训两天Auto CAD。已经是资深讲师的我，责无旁贷啊。于是，我的技能点，就又增加了一项。但我越来越迷茫了。开始进入IT世界，已有五、六载时间，我学了好多东西，我是骨干，我几乎无所不会，但是，这些真的就是“电脑”吗？我又好像回到了1994年，初遇B-A-S-I-C的时刻。一种迷茫的无力感，时刻裹挟着我。只觉得空有一身力气，却看不到，要干什么。以上，就是我当年参悟到“引以为豪的编程，期实只是一种工具”是的心情。本来以为不会有人看，只写了一部分。没想到，还是有人爱看的，我后面尽快写完。还有一个视频：对职业生涯迷茫的同学，也可以参考下",除了,这种悲哀感的本质，其实就是马克思在《1，工人同自己的劳动产品相异化。2，工人同自己的劳动相异化。3，人同自己的类本质相异化。马克思认为人区别于动物的最大特点，就是人本质上就需要“工作”，既“创造性地改造环境”。马克思所说的工作，其实就是后来“这也是马克思的牛逼之处，理论精髓之一——人的本质就是需要工作、热爱工作的，工作是人之所以为“人”的重要组成部分。但是资本主义世界的雇佣关系，将工作这个部分严重扭曲了，以至于将“工作”与“人性”剥离开来。在资本主义世界中，无论是宏观角度还是微观角度，工作都与人性割裂开来，甚至让“工作”与“人性”变成了对立的存在。所以人们普遍认为，下班才是人生的开始。所以人们才需要丰富的夜生活，才需要各种宣泄和放纵。而这，也助长了消费主义。但是消费带来的快乐，终究只是隔靴搔痒，甚至是饮鸩止渴。消费并不能真正填补人性被剥离的空虚。特别是，被剥离的部分（工作，或者说是自我实现）还是人性最重要、最核心、最高级的那一部分……这种人性被剥离的悲哀就正是你体会到的悲哀你引以为豪的时候，是你以自我实现（工作）角度去看待编程，这是人性最高级的展现，当然值得自豪。而你悲哀的，是发现编程如此高级的东西，它并不属于你……不仅编程的成果不属于你，编程的动机也不属于你，编程过程附带的精神回报也不属于你，甚至你的自我实现（工作）需求也不属于你了……编程沦落为一种生产商品的工具，甚至其本身也是一种商品。你的自我实现，变成了一种交换生存资料的手段。放到这个过程相当于把最高级的需求（自我实现），直接压低到最低级的生理需求（交换生存资料）层次！甚至，资本主义倾向于让你只能交换到“刚好能活着”的生存资料，多余的价值都会被剥削！甚至的甚至，再观察一下其他那些层次的需求，呵，这些东西在职场中都是要一一被打破的东西（职场pua请大伙卷起来！）。资本就是要把你压到只能获得生理需求的水平！这实在是太tm悲哀了啊！所以马克思也是深感悲哀，才搞出了共产主义。而共产主义最本质、最核心的创新，就是要把资本主义剥离出来的人性还给人类，把工作和人性相统一，把每一个人都变成完整的人。两百年前的哲学家，就已经从现象看到本质，抽离出一套理论体系，做出了一堆神准的推演和预言，定位了核心问题，并想出了一套解决方案。牛逼不～附一段关于马克思四个异化的论述：1、工人同自己的劳动产品相异化。马克思认为，在资本主义社会中，存在着这样一个基本事实，即工人生产的财富越多，他就越穷。工人创造的商品越多，他自身就变为越廉价的商品。“物的世界的增值同人的世界的贬值成正比。”这跟人的本质要求是大相径庭的。“劳动所生产的对象，即劳动产品，作为一种异己的存在物，作为不依赖于生产者的力量，同劳动相对立”。所以，马克思得出结论：“工人对自己的劳动的产品的关系就是对一个异己的对象的关系”。这种异化关系决定了工人同自己的劳动过程之间的关系也必然是异化的。工人在自己的劳动中无法肯定自己的生存意义，相反，只能否定自己。在劳动中，工人不能自由地发挥自己的体力和智慧，只能使自己的肉体和精神遭受摧残。防纱的工人一年到头只能围着机器打转，与机器人没有差别，煤矿工人在矿井下工作，连安全都没有保证。在马克思看来，真正的劳动应当是一种自由自愿的活动，这是人成其为人的一个基本条件，每一个劳动者都应该能够体会到生命的价值和意义。可在资本主义社会中，这样的劳动是不存在的。工人为了生活，没有选择的资格，工人的意愿，在资本主义制度下显得微不足道。而且这种异化的本质还是工人同劳动产品之间的异化的根源。劳动产品的异化是物的异化，劳动活动的异化是劳动者的自我异化。物的异化是劳动者自我异化的总结而已。在马克思看来，人的本质就是要劳动，要自由自觉的劳动。不允许人进行自由自觉的劳动，是违反人的类本质的。而在资本主义社会中，这种情况恰恰就发生了。自然界给人提供劳动加工的对象和人类生活资料，使人的肉体能生存。但是“工人越是通过自己的劳动占有外部世界、感性世界，他就越是在两个方面失去生活资料。”马克思认为，当一个人分别同自己的劳动产品、劳动活动和类本质处于异化、对立状态的时候，这些东西必然属于另外一个“他人”。即就工人而言，这个“他人”就是有产阶级、资本家阶级。正是这部分人以及作为其政治依托的私有制才导致了工人与自己的上述三个规定处于异化状态。也就是说，私有制度下的所有人都跟真正的“人”相异化，其本源就是私有制度。所以私有制度必须被批判和推翻。在《手稿》中，马克思经常在同一意义上使用异化和外化两个概念。在此，马克思区分了对象化和异化。劳动对象化，劳动者在劳动过程中把劳动凝结于劳动对象中，产品包含了劳动者的劳动和生命。那么劳动产品本来应该属于劳动者。然而，马克思看到事实并非如此，实然与应然之间存在巨大鸿沟。劳动对象化不一定导致劳动异化，但在资本主义私有制的条件下，劳动产品异于工人而存在，不属于工人。不是工人支配劳动产品，而是劳动产品支配工人，这就是,没啥可悲哀的，这世界绝大部分东西都是工具。作家引以为豪的纸笔键盘，是工具。书法家引以为豪的笔墨纸砚播音员引以为豪的铿锵有力的嗓音，是工具。工人引以为豪的操作手艺，是工具。到最后，你会发现之所有还有人愿意给你工资，也是因为你自己就是工具（人）。真的，没啥可悲哀的，工具的作用就是适得其所，不要为工具而悲哀，要悲哀就悲哀自己，想象是不是自己作为工具（人）只是付出却没有获得对应回报，如果是，那才是应该悲哀的。,前两天我在对女朋友说：“感觉现在没有多少时间学技术，技术都没有进步多少，大多都是不断熟悉业务”女朋友：“傻瓜，技术不是最重要的，技术如果不能带来商业价值，那就没人维护，做技术的人，千万不要抱着我恍然大悟，放下手上的 paxos made simple 去睡觉了。。。----后记----技术说到底还是为了提高生产效率，为了解决业务的问题而产生的，没有了业务，技术就没有了存在的前提，没了业务，搞技术的也只能失业。。很多人可能说那些造轮子，搞底层技术的人就不容易失业，实际上他们不容易失业真的是因为技术吗？部分是，但我觉得更多的是因为他们技术更加通用，比如云、分布式存储、操作系统等，不管哪个上层业务都能用到，这才是搞底层技术更加长青的原因。就算你是搞底层的，大多数都是可替代的搬砖。。。当然，不排除一部分真正的技术大牛有着无可替代的作用，但是这样的人毕竟是少数。 附,收藏了多年的文章，分享出来。许多年前，中国社会有一句流传甚广，但是错误深重的话：学好数理化，走遍天下都不怕。这句话没有流行十年，就被另外一句话取代了：造原子弹的，不如卖茶叶蛋的。对比前后两句话，前者的谬误就变得非常明显---技术男对生活有一种天真的看法，认为存在以下不言自明的真理：我只要专心搞好技术就可以了，其它的东西自然都会有的。没有那么自然的事，如果沃兹尼亚克没有遇见乔布斯，他现在还是一个电脑工程师，不可能连续两次前后亏损接近3000万美金，举办音乐节。也不会全世界飞来飞去，作为传奇人物被大众所认知。在这种误解之下，还有一种更为深刻的心理偏差：我不喜欢和人打交道，所以做技术工作最适合我。于是，就出现了那个著名的观察结果---当一个人如此倚重技术的时候，很自然地会把技术的地位提升到前所未有的高度。我不否认职业荣誉感的可贵，不过这里需要强调一个基本常识：这个世界的本质是人和人关系的总和，驱动这个世界运转的力量是利益和利益的分配。技术在这个世界里，过去、现在、将来都是配角。在技术男看来，乔布斯所做的事情“不实在”。这当然不实在，世界上有许多事情都不实在，比如说爱上一个人，或者被一个人爱上，这件事情并不是拿出技术等级证书和银行收入证明就能够完成的。因为它需要走出去参加聚会，需要一对一聊天，需要烛光晚餐和电影，需要做一堆没有逻辑也不能预期结果的事情。如果要一万人，十万人，一百万人，一亿人爱上你的产品，可能需要更多“不实在”的事情。因为程序和技能不能直接变成产品，产品也不会自动跑到用户家里，钱就会自动划到公司账户上。它需要不实在的产品设计，不实在的市场推广，不实在的商务谈判，需要一堆人拍胸脯、吹牛皮、说服另一堆人相信。技术在这个复杂的故事里，只是一个环节而已。如果一个人的手里只有一把改锥，那么，无论他在这个世界上遇见了任何东西，他都会第一时间想用改锥来两下子。这种行为有一道护身符，叫做：技术中立。在技术中立之下，似乎一切都理所当然。因为缺电，因为航运能力不足，所以纯技术手段的解决方案是修建大坝。至于因此造成的地震、生物灭绝、历史古迹消亡，那是无关紧要的小细节。因为技术需要，所以用克隆技术直接克隆人类，因此产生的伦理学、道德困境就不算是个问题。五十岁的儿子面对母亲的三岁克隆体，真的不会带来任何困扰么？从自己的克隆体身上取下心脏，进行自我移植真的不算是谋杀么？从技术中立的角度看，制造出一颗足以毁灭地球十次的炸弹，它的意义何在呢？专注技术这个概念，在一定程度上变成了封闭。只有技术世界里的事情才构成值得思考的对象，除此而外的一切事情都不值得学习和思考。许多技术男对于人文知识的认知几近于零，在网上成为狂热的“工业党”，原因就在于此。除了技术中立之外，价值观一塌糊涂，甚至以此为荣，认为自己超越了善恶的两端，达到了某种超然的境界。在他们看来，这张列表我可以继续开列下去，不过我觉得写到这里已经足够了。每次看到技术男在这个世界上撞得头破血流的新闻，我在同情和惋惜之余不免去想一件事情：如果技术男是洁白无辜的羔羊，在无法捕杀所有饿狼的情况下，还有什么办法能够帮助到这些羔羊？这篇文章就是我的答案，我认为羔羊应该长出犄角，能够高速奔跑，能够在群体中获取力量和保护。为了做到这一点，技术男也应该反思一下自己的想法，反思一下自己对世界和人类的认知。技术只是羊圈的栅栏，它不应该成为某种自我设限的牢狱，也不应该成为狭隘心态和狭窄视野的温床。在这都市每生活一天，都意味着要面对同事、上级、保姆、快递员、律师、中介、招待、保洁、门房、司机、导购、邻居、亲人、朋友，都要面对合同、邮件、文件、新闻、计划、财报、统计、日程表、商业策划案，它们都不是技术所能解决的人和事，也不是专注于技术就能自动消失的问题。而所有这一切，仅仅靠技术是远远不够的。单凭一把改锥，撬不开全世界的锁。,没事儿，悲哀的还在后头。等你意识到引以为豪的自己也是个一个工具的时候，你就麻了。,我从报这个专业的时候起，就已经知道这一点了。那年我去看望三爷爷，聊到选专业的问题，他说 “计算机只是工具，不能只学这个”，然后我告诉他说，我要学的是怎么创造工具，而不仅仅是使用它，于是三爷爷点点头。所以哪里存在什么 “突然意识到” 呢，是一开始就知道呀！如果这个问题想问的是，工具究竟有多大价值，那么我想说，经济基础决定了上层建筑，科技水平决定了经济基础，而每一次科技革命都是由工具的变革引发的，从钻木取火，到石器时代，到青铜器，铁器，火器，到蒸汽机，内燃机，到电力，计算机，互联网，人工智能，哪一步不是用一种工具定义了一个时代？如果这个问题想问的是，人在社会上的地位，那么我想说，不仅程序员是工具人，每个人都需要在社会上找到自己的位置，成为别人的工具，而另一方面每个人又都并非是无可取代的，时代的洪流滚滚，不会因为少了谁就停止向前。 强如奥运冠军，你也可以硬说人家只是给资本家拍广告的带货工具，富如王健林，你也可以硬说他只是执政者的缴税工具，智如诺奖得主，你也可以硬说他们只是扩展人类知识边界的科研工具。 所以 “不想当工具” 这种想法究竟是哪儿来的，难不成你想要统治世界不成？如果这个问题想问的是，社会资源的分配机制，那么我想说，这可能是问题，但绝不是程序员最应该关心的问题，在这个问题上，程序员暂时只能算既得利益者，不信你去看看别的行业？,编程是一种工具吗？我更愿意称之为一门手艺。所有能用来讨生活的技能，都可以称之为手艺，而程序员本身就是手艺人。和其他可以用来讨生活的手艺一样，没有什么可悲哀的。大到千古传唱的唐诗宋词，小到随处可见的街头巷尾，作诗填词是一门手艺，摆摊吆喝也是一门手艺。不同的是，有人借此流芳百世，有人淹没于滚滚红尘，有人靠此名利双收，有人用此生活无忧。伟人曾经说过，枪杆子里出政权，而枪杆子本身，也是一种工具，但正是因为这种工具，才有了今天的蒸蒸日上！所以，悲哀是悲哀者的悲哀，热爱是热爱者的热爱！无它，唯人而已！,不悲哀，先说问题本质编程对于普通人而言，就是一个技术，所有的技术都是工具公司企业也是工具，其目的是最大化股东利益，通俗点说，就是帮股东老板赚钱的工具所以在企业公司里的员工，无一例外，都是工具人程序员，工人，会计，前台，甚至包括职业经理人，都是为股东赚钱的工具人，明白了吗？为什么我不觉得悲哀呢，因为打从一开始，我就没有打算为了技术而技术技术是工具才符合我的初心，我学编程，是为了实现我想要实现的软件而不是为了那些简陋的英语单词和符号的拼凑能从简陋的英语单词和符号中看出美感来的人，我不知道它是怎么想的也就是我从学编程的那一天起，就不是为了编程而编程，而是带着某个目的去编程就我想要实现一个软件，我该如何用手中的技术，也就是编程去实现它怀揣着这个目的之后，因为目的明确，所以我学得很快，很多细节可以直接跳过不看了，用的时候再说，但是很多人因为没搞懂这个目的，所以经常在细节上绕来绕去，其实一点意义都没有就跟还有像但是我不一样，因为我知道这些东西是工具，所以细节可以不用太过于在乎，你知道这是做什么用的，就行了，细节用的时候，其实辅助编程工具会提示你，你都不需要去记，所以我学起来就特别快这也是在国外读书时候的秘诀，就是一大本书，你别把每个字都看过去，你应该速读，看每一段的第一句话，看懂，看不懂才看该段下一句，如果还看不懂，再看下一句……但是如果你看懂了，这一段就不看了，看下一段，其实出国时候的外语阅读训练，就是做这种训练，考过托福雅思gre的应该很清楚我在说什么，其实技术也是一样的，你知道这个工具是做什么用的，然后大概怎么用，行了其他的细节，在你干活时候，工具会帮你，比如java的ide，自动提示是非常常用的功能，如果ide还帮忙不了，那就Google咯，做到这两步，其实编程就轻而易举了然后我就赶紧用手中的工具去实现我想要实现的软件去了，然后进一步创业去了，谁神经病一天到晚对着技术在那边啃细节，那是书呆子就跟我们读书时候，我们经常可以遇到一些同学，这些同学不是说他不努力，他很努力，但是成绩就是上不去，为什么？他只是无脑的背诵记忆而已，都没有总结规律，这个规律在语文中就是中心思想，数学中就是各种公式定理，英语中就是语法规则，化学中就是方程式，但是几乎所有学科，都在帮你总结规律，你要做的就是找到这个规律，然后加以训练，熟练掌握规律之后，去考场上答题所以死记硬背的话，遇到同样的题型，改一点细节，他就不会了，那这样做成绩能好么？再努力也没用啊技术也是如此，你需要做的，就是找到工具使用的规律，然后剩下的，交给工具去完成,很长时间里我都很喜欢写程序，编程是自我认知的一部分，直到现在也是这样，只是不再那么强烈而已。我也有过题主这样的感受，这其实是某种轻度 existential crisis，也就是找不到存在的意义——当自我认知的一部分失去了重要性，当然会觉得失落。不知道题主之前把编程当作什么，技艺？特长？信仰？生活态度？遁世奇术？总之想必是放在某种超越工具的地位，而这并没有什么问题，对其他人来说处于这个地位的可能是琴棋书画，烹饪滑雪，翻修摩托，或者开挖掘机。我们会以超过平均值的热爱来对待某项活动，有些人可能会一辈子都保持着这样的热爱，他们无疑是幸运的。但忽然有一天你下头了，你开始像缺乏催产素和多巴胺的晚期情侣一样对你与热爱之间的关系产生怀疑。这也没什么问题，甚至应该祝贺你，因为与其说这是一种悲哀，不如说这是一种成长。每一次 existential crisis 都让人成长。那些以往被热爱支配的脑细胞空闲下来，甚至有点闲的发慌的时候，很适合思考人生的意义。如果你觉得编程只是工具，本质上与螺丝刀或者微积分无异，那你可以找找别的什么来成为你的下一个热爱，比如琴棋书画，烹饪滑雪，翻修摩托，或者开挖掘机。世界上好玩的事情很多，编程只是其中一个，每一次下头都是下一次上头的开始，上头过的东西越多，你的自我认知就越稳固，由于一个单点而失去自我认同的风险就越低。为什么很多人喜欢用「不做X的Y不是好Z」这种胡话做签名？因为它看起来显得这个人自我认知很多样性。不管你觉得编程是什么，客观上作为一种人类活动的编程其实并没有改变，所有的意义都是被赋予的，你说它是工具也好，是人类命运终极答案也好，它都不会有什么反应。也许有一天你又会觉得编程开始上头了，那你完全可以再把它供起来，社会不会因此给你一点点道德压力，甚至会有人为你觉得开心，比如我。,孱弱的知识分子们就不要在小布尔乔亚聚集地知乎做小布尔乔亚式的无病呻吟然后勾引一批小布尔乔亚式的回答了，不如来点联动一下,你以为的编程是这样的，在电脑前慷慨激扬，指点江山。实际上，大多程序员是这样的。也有客户不改需求后的欣喜若狂。认识到了编程是工具这一点应该感到庆幸。那些科研人员，不会以熟悉编程为自豪。编程只是他们实现算法的工具。其核心是科研能力，而不是所谓的编程技巧。有了编程工具，我们能让计算机为我们做很多事情。因此，我们追求的不应该只是编程这个工具。而应该是我们可以用这个工具做点什么事，解决什么问题。将编程这个工具与自己的专长、爱好结合起来，一定能发挥意想不到的作用。比如，平常工作忙咋整？写个代码花式陪女友。再比如，实现数据可视化。如果你喜欢三国，可以分析三国人物出场次数，形成词云。扩展阅读，怎样自学Python：
我编程写代码被我妈一直说成玩电脑打游戏，我该咋办？,,因为你没有买书。若你编程时电脑边上摆一本近千页的，密密麻麻有中有英的编程书。又若你时而敲键拍得噼噼啪啪，时而捧书念得呢呢喃喃，时而起身暴走来回踱步动若脱兔，时而托腮发呆陷入沉思静如处子……我写了30年的代码了，也经常在家里写，老母从40多看到70多，也就说我从10多岁的后来我父母有了自己的一台台式机。我在上面写了一个程序，在母亲节那天会于桌面展现一朵盛开的玫瑰 ，（几次我立于阳台，眺望远方，嘴上叨着烟。老人家怀疑我情绪不佳，还会过来搭一句：又在编译啦？因为这本书，我干脆做了个网站 ,我妈出去的时候我在玩，我妈回来的时候我在玩。我妈出去的时候我在学习，我妈回来的时候我在玩。我妈出去的时候我在玩，我妈回来的时候我在学习。我妈出去的时候我在学习，回来的时候我在学习。上面是个老段子了。你父母在意的不是事实，而是他们的认知。既然你写代码被说成玩电脑，那你以前肯定也有类似上面说的情况。归根结底，你父母不相信你，他们不觉得你是懂道理的孩子。对于这种情况你需要讲道理吗？不，你需要闭嘴。跟讲事实的人讲事实，跟自以为是的人说对对对。只要他们不会物理层面上阻拦你，那你就没有改正他们认知的必要。记住这句话。它可以为你减少无数毫无意义的争论。以上。其他同类答案原创段子关于“大部分人不需要真实”苏联，阿不，火星段子本题同款老段子每天一个发财小技巧（雾）,老爹告诉我们用魔法才能打败魔法所以在家人群里推送如下文章小伙月入过万，只因每天坚持做这事别再说这样学习是浪费时间了，看看大师是如何说的掌握了这种小技巧，和子女之间融洽相处21世纪大变革，游戏编程或将成为最热门职业,你误会了你妈，以及绝大多数长辈，领导的意思了。我妈原来也经常说我要努力跟她同学的孩子学习，我就很纳闷，她同学的孩子有在贷款公司拿着我三分之一工资成天打骚扰电话，有0.8的绩点要被大学劝退，到处找医生给他开抑郁症证明休学的。有的在二流公司当一个外包团队的员工。还有做传销，劝了我三个月做他的代理的。我也不知道我妈让我学啥。我常常想，为什么我妈连电视剧里面的奸臣的水平都学不到，你看人家严阁老至少知道说话对事不对人。后来我才发现，其实对于大多数人来说，在一个没有领导监督的环境下，他是不愿意说那种对事不对人的话的。换一句话说，无论我妈，领导，长辈，对我干啥事不满，其实他们很可能不是对我做这件事不满，而是对我不满。情绪大于事实。女朋友嫌你长的丑，你请来造型师，女朋友都会说你不会打扮。领导觉得你技术不行，你写个gayhub上几百星的工程，他都会因为你if判断后面直接跟动作而不是打个回车再跟动作喷你一顿。你妈烦你，你就是在家里看书看到双眼充血昏天黑地，你妈都会找到什么死读书，不懂人情世故，不会帮家里做点事之类的理由嫌弃你。所以不要纠结咋办，两耳一塞，情绪屏蔽。反正开学后就见不到了。,背景：某小厂游戏服务器开发，老婆山东人，结婚时去她家。早就有了解过她们家那边亲戚对IT不太了解，特别还是给游戏服务器敲代码的。一听就很不务正业很没面子。所以一直在想她们亲戚要是问起来我是干什么的应该怎么说。突然想起我们公司租用的云服务器是华为云。不如用魔法打败魔法？对！我是华为的电脑工程师！,这么说吧，是不是写代码一眼就看出来了。,我大学社团的同学还是计算机专业，家长不给买电脑的，说买电脑就是玩一用电脑就毁了，一辈子就废了，然后他大二编程考试要用，他们c++那些考试都是上机考试，(这哥们大一在纸上写了一年代码，学校向学生公开的机房都是那种古老的winxp2003，卡的一批，能不能开机都是问题，打字都能死机，更别说练习代码了)问家长要钱买，说他在学c#是计算机语言需要搞，他家长不给，说c++既然是一门语言就应该和学英语一样，买个单词书，语法书，作文书，背就行，要电脑没有用的，电脑只能打游戏，学不了语言，学语言只能好记性不如烂笔头什么的多抄写几遍就会了，笑死了，最后这哥们自己攒生活费加食堂打工一万多多买了个我感觉他父母确实有问题，他说他家长大一开学前甚至打算让他带诺基亚去学校，说手机就是毒品 大学生一瓶手机前途就毁了。就是那种不能上网只能打电话游戏只能贪吃蛇计算机不让用电脑，为什么要选计算机呢，他还说这专业是他爸给他挑的，服了,我在学java：玩我在学c玩我在学linux玩我在学神经网络玩我在学算法玩我在学网络编程玩我在搭一个网站嗯。我刚搭完一个网站嗯我加点班把这个交付了能拿一笔钱好的，不打扰了总结，他们眼里：有可见产出=正经事，无产出=玩。意识以物质为转移。方法：1，薅点东西做你的产出2，吹b画饼3，摆烂,想到了那个看心电图被病人投诉上班炒股的医生。我觉得你们可以交流一下心得体会。,我奶奶不识字，但是只要她发现我在长时间的看满屏字符她就会劝我：“休息一会吧，学习也要劳逸结合。”但我要是一直在操作小人蹦来蹦去，她就会变成：“休息会吧，一直玩游戏对眼睛不好。”,嗨，别提了。在相当大的比例内，老一代人，尤其是欠发达地区的老一代们，对计算机的理解几乎等同于游戏机。他们的逻辑是：电脑＝游戏机＝洪水猛兽至于计算机技术，数理化那么难都能学会，计算机能有什么难的？用到了再说。所以，一般而言解释是没什么用的……因为思维定式已经形成了。你说你在编程？他们不信；你说你在学习？他们更不信；你说你在打游戏？他们估计马上就信了……前几天我还遇到了一个语音输入写论文的神人，当然写的是结课小论文。为啥？我问他为啥，他说因为从小家里不让碰电脑，打字数度慢……按他的速度，一次作业要写特别久，所以才用语音输入法……噗……我问他学业水平测试怎么过得，他说当时练了好久，然后家里就不让碰电脑了……家长们可能自己也不知道……现代社会“打游戏”也是必备技能……,你这算啥，我去给经济学研究生上课，被我妈一直说成去学校上学…,我妈一直无法理解为什么我还没把自己饿死，在她看来只要我离开她的视野范围，一定是打游戏去了。,害呀，你别说写代码了。我今年大四毕业，不正赶上这疫情吗，从去年12月一直到6月都在家，论文都只能在家写。重点来了，只要我打开word写论文，我妈就开始喊，XXX你早上八点就起来玩电脑，一玩玩到半夜十点多，有没有你这样整天浑浑噩噩的？我给她解释这是毕业论文，她就会两眼一瞪：别欺负我没见识，人家写论文都是用笔写，后来整的没办法，只能每天把笔记本充满电，节电模式什么都打开，亮度调最低，连手机热点，到楼下公园里的亭子里写。中午回去一趟，充满电了下午继续。只能这样。整个毕业论文就是在这种情况下完成的。导师还嫌弃这不好那不好，我都羞于启齿这论文是在什么情况下完成的，我真的努力了，我真的尽力了......,感谢评论区各位的关心和建议，吐槽父母的回答我写了好几篇，但是这篇获得这么大的关注我也的确没想到。我现在真的过得很好，我已经6年不怎么搭理我父母了，我在北京，他们在俄罗斯对面，相隔2000公里，联系方式一律断绝。我留了我爸的微信，以防有突发事件（不过已经发生完了，去年我爷爷过世了）。我也尽可能把他们的影响降到最低，我任何一个亲戚来找我，我都会提前说：不要和我说我父母的事儿。不过失策的一点是，我是在工作一段时间之后才和他们决裂的，所以他们知道我公司的地址，所以在前年的某一天，我妈出现在了我公司楼下蹲我……让我心态不好了很久。这些事儿大多数发生在我中小学时期，那会儿父母即强权，稍不对劲就是打骂，小时候打，大一点骂，经济独立了道德绑架，如评论所说，完全的寄人篱下。反抗？当然有过，直接和他们讲理、离家出走之类的，都做过。讲理讲不过我，那就是高八度的吼叫，离家出走，总也得回去，然后又是更大的风暴，我对我爸的恐惧早已形成了思维惯性。唯一一次还算和平的离家出走，还是我中考的时候，躲到了某个亲戚家，中考过后没发生什么事情。做flash动画，是小学的时候参加网页制作大赛，我们队flash动画部分是我来负责。原回答里面的事情则是我初中的时候要给班主任做一个动画，作为一个活动的背景。我用电脑用得多，有玩游戏的时候（当年玩传奇私服、红警2、魔兽争霸、毕竟，我爸自己在电脑上，基本上只是玩那几个自带游戏，以及聊天。我妈比较离谱，当年很喜欢用QQ加一些不知道是哪的人视频聊天，哥哥妹妹叫得很亲，咱也不知道算不算精神出轨。我父母对我的不信任还有一例，我高中毕业的时候请我朋友帮忙拉了个配置单，给我家里配了一台新的机箱，花了2100，送回家去，在我大学某一次寒假回家的时候，在一个人不少的饭桌上，他们就疯狂想要证明我被人坑了，什么谁谁谁的朋友1700就能弄一台配置比那个好的电脑。我随口问了两句，电脑配置在他们眼里大概就只有内存的容量和硬盘的容量，其他的一概不管，然后我就被按头说是被坑了。核心原因我想的也很清楚，评论区有一位朋友说的也很清楚，就是这些东西他们真的不懂，但是他们还想要掌控我，还想要显得自己讲理，那自然就要想方设法证明我是错的。所以我也不明白为什么有人觉得我可以跟他们解释。回答这个问题的初衷也不是卖惨，虽然现在也变成了卖惨，单纯是我对父母控制这一话题有很严重的我一路走到现在，要感谢的人很多，比如坚定支持我高中去省城的两位表姐，我的几位老师，和一些无限包容我的朋友、同事们。我性格里曾经有很重的我爸妈的影子：极强的控制欲，极低的安全感，死要面子，不敢承认自己错了之类的，给我身边人造成了很大的困扰，而当我意识到这点的时候，我是极度恐惧的，到现在我也担心，一旦我进入了亲密关系，或者为人父母，这种本性会暴露出来，由我再去害其他人。毕竟，多年媳妇熬成婆。我也不知道我是否摆脱了那些，但这确实也成了我一辈子的事儿。至于受害者有罪论的几位朋友，我不知道该羡慕你们的清澈，还是羡慕你们生活比较幸福，但是我性格里面非常讨厌被误解，我记恨我爸的最大原因之一就是他几次严重的冤枉。觉得我通篇都是编的的朋友们，你们爱怎么觉得就怎么觉得吧，我也不明白我编这个是为了啥。我在家做flash动画，我爸觉得我碰电脑就是玩游戏，所以就在我后面背后灵看着我。我调了大概半个多小时，调出来了大概几秒钟的动画，我爸就跑我后面，让我播放，我一放，我爸直接暴怒：你折腾这么长时间就折腾出来这点儿？还说你不是玩游戏呢？还有，还是我在家做ppt，顺便听了个歌，打开了音乐播放器，我爸进门的瞬间看到了我的音乐播放器，然后说我在网上聊天。还有，我爸妈喜欢乱点电脑上的东西，导致电脑经常中毒，动不动桌面上就多出来点儿东西，然后他们就会说是我在家乱装游戏，实则我几个月已经没碰家里电脑了。还有，我更新系统，导致右下角出现了一个五角星（实际上是激活问题），我爸相信了网上的阴谋论，觉得电脑上出现了那个五角星，就是被美国监控了，随时可以偷你资料关你电脑。还有，我爸不知道信了谁的邪，说我在网上看视频，会损伤光驱。还有，我找工作准备面试（以及准备接电话）的时候，在家刷还有很多很多……最终就是，我一个一本学计算机的，现任程序员，曾经也在电脑店搞过维修的人，家里电脑坏了，甭管我多长时间没碰，那都是我玩游戏弄坏的。然后他们去找一个八竿子打不着的人来修……这么多评论了来回复一下：首先，这些都是多年以前的故事了，绝大多数是小学初中的事儿，最多到我上大学期间（Window未激活右下角出蓝色五角星都多少年前的事儿了）。我早就和我原生家庭决裂了，关于电脑能搞出来这么多事儿，其他方面的更加离谱的事情也不是没有，比如觉得我喝了一杯我都没见过的酸奶就打了我一下午，事后还觉得自己有理。还有，我小的时候让我每天晚上洗全家的袜子，有天我没洗我爸的，也被打了。以及我在学校和同学玩的时候坐在了地上，就罚我在家蹲了两三天，什么也不干，就蹲着。有关上一本这个事情，我可以补充一下，我人生道路上如果听了我爸半点，可能都完全不一样了。比如我选择去省城上高中，我爸疯狂阻止我（最后因为我免学费也就没拧过我，我们学校虽然是个民办吧，但肯定比县里强的。我们县的状元分是比我低的，报志愿还估低了20多分，估分报志愿又是多少年前的事儿了）；我大学泡实验室打比赛，不冲着什么保研考研使劲儿，也被我家里人槽了多少次了，觉得我毕业就完蛋，然而我找工作那年是最后一年窗口期，之后一年比一年难，晚个两三年我都不能找到现在的岗位。某些说我自身性格有问题的朋友，我承认我自身是有性格缺陷的，但是我的性格缺陷也来自于原生家庭，包括我现在也觉得我某些毛病来自于我爸的影子，也让我很恐惧。有关家庭地位，我从小到大挨打无数，我爸妈也特别喜欢PUA我，我爸80%的时间是以审问、说教的口吻和我讲话，20%的时间是把我当宠物玩儿，在我彻底崩溃之前，是根本没有反抗意识的，崩溃之后自然就决裂了。另外，个人比较反对身边统计学，不是没见过就是假的，父母的确是存在多样性的。论网友的阅读理解能力是多么强。以及我现在做flash怎么了？我只是想要借助它完成一个效果，刚好flash能实现，而且我认为比ppt的表现力强一些，那我用一下有啥问题？难不成就为了一个ppt上的效果，我需要两三天内学习一个新的东西并且完成一个效果？我之前在公司的发布会上发布一个产品，就用了flash做了点儿效果，嵌到ppt里面做了下表现，怎么了？原来知乎现在写一个答案的要求已经这么高了,没什么办法，之前小住在亲戚家，当时正好刚入门编程在学c＃，刚入门热情很大，每天都窝在电脑面前钻研。然而我忽略了一个事，这也是我后来才推测出来的，亲戚家有一台被雪藏的电脑，有一个贪玩的男人。懂我意思吧？这导致我一开始就被偏见了，那个男人每次过来，就看我有没有打游戏，没有就无趣的走开。亲戚每次看到我都是坐在电脑面前敲敲敲，又看不懂我屏幕上写的啥，只看见一个一个窗口弹来弹去。一口咬定我在玩，我当时没在意，玩味的说了句，确实在玩，玩的蛮开心的，以后我还可以边玩边赚钱。之后我就凉透了。我妈哭着和我说啊，你别玩电脑了，这十里八乡的全都说你是个fw，天天就知道打电脑，以后还要玩游戏赚钱，都传到我耳朵里了！我直接？？？。有些人的嘴远比你想的要尖酸刻薄且多舌。我也不好生气，跑去和亲戚解释，然后结果是，他先说，你学习，你学习天天笑声那么大，鬼信啊？我当时就傻了，学习为什么不能是快乐的事情？我解释一番以后，亲戚依然不接受，说，我孙子啊，天天一大堆作业在写，书都叠的那么高。我说我也这么过来的，考上大学了不一样嘛。再说了，我拿出我的c＃从入门到精通，我也要看书啊，但是实践代码就是要电脑嘛。这东西写纸上又看不出效果。结果呢？结果他又拿读大学读幼教专业的孙女说事，孙女都不用电脑，你天天用？我说我就是计算机专业嘛，我也没办法的。他眼看说不过我，好，直接一句反正你接触电脑我就是看不爽，你就是有玩游戏，游戏就是恶魔，你就是人品不行。泥人也有三分土气，我当时就火气上来了，好，我就是人品不行，我不仅要玩游戏，我的目标还是做游戏，我以后就是你口中的恶魔的创作人！后来？后来就是我妈道歉，我憋屈的标准结局。人情世故，对我这个标准直男来说还是太难了。有的时候这就是一种固执的偏见。现在回想起来，只觉得当时的情况根本无法破解，我的退让只换来他人的误解，一度解释全变成了,你这才哪到哪啊，我小时候写珠算作业，我姥姥看到了立即把算盘没收，找我妈告状说我边写作业边玩。我妈向她解释半天，她才相信小孩也可以学会“高深”的我姥姥是旧社会长大的，不太识字，在她的固有印象里，算盘是村里最有文化的人才会用的玩意。其实我妈那一代人也在学校里学过珠算，但是我姥姥当时忙于农活，连孩子的早饭都来不及做，根本顾不上我妈的学业。,"如果您的母亲对电脑的认知程度已经低到把写代码都认为是打游戏的程度。但是你却没有办法把您的母亲""忽悠瘸了""。我很有理由相信，您应该用无数个理由忽悠您母亲，让她以为您用电脑在学习，其实是在打游戏。导致您母亲根本不相信您的说法。您现在需要做的，就是去接个私活，赚个千八，然后给您母亲。这样您母亲就会认为您用电脑打游戏还在游戏里骗钱了",咱俩的情况恰恰相反。我坐在电脑前打游戏，我妈却说我编程太刻苦了，该玩会游戏休息一会。我非常生气，这游戏就是我做的，我正在测试bug，怎么说我是在放松和娱乐呢？  这是对我极大的误解。所以说，想消除误解，就先做个游戏出来。当初打游戏被抓分了两个阶段：  1 最初的时候，确实就在玩三国游戏，各种裂土封侯，走马圈地。好几次被抓个正着，网线被拔，室内放了一个摄像头对着电脑屏幕。基本上赤果果的玩，肯定是行不通了。于是我就在思考，如何既能够玩游戏，又能够学习。 先用时间来换空间了，最终是要玩自己喜欢玩的游戏，可是毕竟如何能玩会游戏，也总比一直玩不到喜欢的游戏好呀。 于是，上知乎问了一下，结果得到的回答就是，可以找一个带有源代码的游戏。那么编程语言那么多，有源码比较好学的，就两种语言，一个是python，一个是c。c则有很多商业化的游戏开源代码，python则更多是小品集的游戏，这些游戏简短，但如麻雀一样五脏俱全，非常适合边学习编程，同时又可以给父母信心让其能够觉得你通过学习是可以做出来的，你才可以放心让你去学。  2 于是，我就想到，如果我用，python的数据抓取，分析和可视化为借口，先仿造游戏做一个全国工作岗位数据图，就可以明目张胆地玩了，毕竟都是用的地图嘛。然后边玩，还边抄写数据和心得，掌握玩法。等万事俱备，就用python做游戏。 于是，我就找了一款c版本的《仙剑奇侠传》的源码sdlpal，这个游戏在当年火遍大江南北。下载后，直接就运行可以玩了。最开始的几天，我沉迷游戏之中，没有办法向父母汇报进展，只能拖借口说刚开始不太熟悉，正在熟悉环境。总这样下去是不行的。于是，又来知乎提问，得到了答复是，最好找一个python教程，针对那种0基础的，最好是图示化比例很大的那种教程，这样跟父母讲起来的时候。也方便让他们看懂。于是，看了几款知乎比较知名的几大python平台，有的是主打acm世界冠军的可能，有的是刷题的，最后在几个python大v回答里，看到一个叫夜曲编程的平台，说是有20多天的免费教程，是图形+app交互的方式，于是我在夜曲编程里回复了“免费教程”，果然收到了教程，我一直担心学不会，于是，就快速地点下去，怕浪费时间，结果，不是图形就是选择题，一节课下来居然没有任何阻拦。 拿着手机看着知识点，然后通过选择合适的代码组件就把知识点抓取，然后记录到了卡片里面，再通过思维导图替代书本的目录，用于关联记忆。 这下真的好，一边手机看教程，一边用电脑用python来练习学到的知识点，同时再把自己学到的知识点，插入到游戏之中。 伴随着，学习进度的推进，和在游戏中的步步深入，已经略有小成了。同时也把课程里学到的内容，通过用游戏里面的素材，使用python知识点复刻出来。毕竟图形转图形很是方便下一步已经在设想一个，能够自动识别脚步声和开门声，同时把游戏测试画面切换到编程模式的软件。,直接打游戏
