问题名,问题内容,回答1,回答2,回答3,回答4,回答5,回答6,回答7,回答8,回答9,回答10,回答11,回答12,回答13,回答14,回答15,回答16,回答17,回答18,回答19,回答20
为什么现在国内各大高校仍选用谭浩强的《C 程序设计》为教材？,既然这本书已经如此过时并且错误非常多，而大学教授们应该肯定写过很多代码，知道此书弊端。并且国内并不是没有更好的 C 语言书籍。,"  IT界有个万人皆知的行业准则：不要重复造轮子。  它的意思是，你可以自己造的玩，但是如果人家已经有足够好的轮子，你就不要试图，甚至是通过各种手段，试图去取代这个轮子的地位。  同理，如果某个学科已经有足够好的教材，您没那水平编出更好的教材，就乖乖地用人家的教材就好了，这样既节省资源，同时也能保证中国学生看到的教材内的思想和国外学生是同步的。  中国大学有个毛病，就是什么东西也想搞个自己的出来。  就比如线性代数教材，如此重要的学科，用脚趾头也能想见，优秀的国外教材已经遍地走了，但是各个大学仍然要请自己学校的某几个水平堪忧，语言表达能力菜得扣脚的老师来编写一个教材，最后命其名曰“精品教材”，而这些垃圾教材坑害的是一批一批的优秀学生，当然如果能被一直坑下去的，自主学习能力也是有点问题...   可是世界上大多数学生就是这样，他们会乖乖地去上课，听老师念PPT，然后认真看学校推荐用的课本，然后当这些垃圾教材搞得他们一头雾水的时候，他们会用“这门课难”来安慰自己，最后学的不明不白，草草了事。  我刚来  而且可以想象，编这本教材的老师们从中肯定可以得到补贴，能不能得到版税不清楚，但是补贴是肯定有的，而且同时这本教材的编写也能成为所谓的资金申请的理由，“为中国科学技术大学量身定制的教材”这句话多么好听啊，可事实上呢？  由于答主英文水平过关，当时直接去图书馆借了一本英文的线性代数教材，面向数学专业的，从第一页开始看下去，便已停不下来，连住一看就是二三十页，看完感觉畅酣淋漓，舒畅至极，从那以后，线性代数课我再也没去过，除了最后的考试我出席了。  那次期末题不简单，我考了95分。  线性代数资源推荐，详情参见本人文章：  我自己知道，我并不聪明，若是我不看那本英文教材，我恐怕能考70分不错了。  这就是事实，还有很多例子，比如贵校  《大学物理》与《  附费恩曼讲义的链接：   纸质教材？？买教材？？学校让你买教材？？没有学生买教材，那这些教材不就无法带来收入了？教材是用来教育的？No No No, 教材是用来挣钱的，相信我。  马克思主义原理你们都上过吧？这个教材是不是必须买？它为什么不做成pdf版，在网上开源呢？每年这本教材能卖一千万册吧？没这些钱谁来养那些教材编写委员会呢？    音乐学习的最好方法不是看书，而是看视频，因为视频是声音和图像的结合体，比如我现在讲  详情参见本人文章：  这个世界上不存在真正无法理解的知识，只存在不会表达的糟糕教学者，大家都是人，为什么你能懂的东西我就懂不了呢？就算我笨一些，能在你脑子里运行的东西也能在我的脑子里运行，只不过可能速度慢一些。  教材的目的是什么？教材的目的是让学生尽可能地不依靠任何外界帮助，仅仅依靠你的教材就能学会你想表达的知识。  可以说，我国在此方面做的奇差无比。  国内这些教材其实牵动了很多人的利益，比如学校的利益，编写者的利益等等，中国的大学可能觉得教材都用西方的，是文化不强盛的表现，总想自己搞一个，这正是不自信的表现。  你要是能编出比国外优秀教材更优秀的，那完全可以啊！  问题是你能吗？  当然还有一点就是，国内的教材更新速度捉急，很多新东西早就出来了，教材上还写着那些旧东西，考试还是按照这个教材考...  我一直觉得中国学生整体上是比较聪明的，如果我们能像美国学生那样直接接触到整个世界的优质教学信息，那我们的未来不敢想象。  不过一个学生如果自己不会去寻求改变，看的破教材还不知道换更好的，上不了Google还不舍得花钱买  国外的大部分经典教材，我是说经典教材哦，不是所有！！经典教材是国外教材的一个很小的子集！ 差不多都有免费的pdf版本，直接下载就好，这对于那些没有机会接受高等教育，又买不起好教材的人是很友好的，而且不仅如此，教材配套的习题集，答案等往往也可以直接下载，反观国内的教材，一方面习题没答案，然后老师告诉你们习题最怕有答案，但与此同时老师也没有能力建立起一个足够高效的机制能马上让学生知道他们的结果是否正确，就相当于，不能给你肉吃，还要叫你多吃素，吃肉会长胖。    在页面的左边，可以直接这样寻找自己想要的内容，发挥了电子图书的优势，节省了搜索目录的时间。  在归并算法的讲解中，可以直接点击Merge.java跳转至实现该  这就是我为什么不喜欢看纸质书，因为太麻烦了...翻来翻去的，真的累。  这本书有一个标准库，有绘图，排序等等，你可以直接在左下方搜索标准库里的某个  测试用例，作业，PPT等等，都直接点击就好。  我试问国内的哪个计算机教材这样做了？你恐怕是下载个pdf版都得在什么微盘，百度云，或是百度文库里面下载吧？  来，你告诉我，  哦。  我觉得国内教材编写者最大的问题就是：动机不纯。  对于音乐行业来讲，如果教材编的太好，学生就不想找老师了...那这些音乐水平高不成低不就的人，饭碗谁给保证呢？  这个逻辑其实挺简单的，就是：你说想要看懂这个教材必须找个好老师给你讲，那你这个所谓的好老师为啥不把他讲的写成教材呢？这样大家不是就都看懂了？哪来那么多麻烦事？  事实上一个人编写的教材应该是比这个讲课要更好懂的，因为一个人写出来的东西往往是经过了细致思考的结果，而凭空就说的东西往往会出问题，那如果一个人教材写的奇烂无比，他的课我也建议你别去了，误人子弟。  所以啊，现在掌握大学权力的人，都是高考刚恢复不就参加高考的那批人，他们眼中的世界和我们年轻人眼中的不太一样，再过二十年，等我们成为了掌权者，也许这一切会变好。  学校怎么做是学校的事，你怎么做，还是看你自己。  谢谢。  看了大家的回复和评论，我挺开心的，这个答案火也是意料之中，但是能获得这么多人的认同，我深表荣幸，有人说英语差看不了英文教材的，我想说，英语的学习其实是自然而然地事情，不要在学中做，而要在用中学，忘掉中文，去完全投入英文的环境中，很快你就会适应这一切。事实上，如果你说你英文教材有些单词不认识，那我想反问你，难道这个东西翻译成中文你就一定认识了？比如线性代数的秩（Rank），你不知道秩是什么意思对吧？但你反而大概知道Rank的意思。  还有人说，我们不能这样直接用别人的，要做出自己的，这个想法其实要真往大了说，我觉得挺肤浅的，别人造个加速器，我们要造个更大的，别人造个桥，我们也要造个更长的，快歇歇吧，干好自己的本职工作就很好了。  世界上只有两种东西有真正的价值，一种是创世人所未见，一种是对已见之事的推进与优化，做一个比现有的还烂的东西，本身是没价值的，只能当作练习使用，这句话的逻辑已经很明晰了，再反驳我是不会回复的。  不要过分相信教材的权威性，也不要把老师和教授当神看，大家都是普通人，老师让你做的，也许并不是你想要的，我们生在互联网时代，已经给了我们擦亮眼睛，检验真理的能力了，我们也没必要迷信任何权威。  这世界上谎言很多，要把眼睛擦亮，做个明白人。  第二次修改答案，给大家看看如何击退杠精：  用一种调侃的语气顺着杠精说，他们就噎着说不出话了~  杠精快来~我不怕~",这个答案请勿转载。我打个比方，大家看完我讲的之后（哪怕看似与计算机无关）、估计就能想明白怎回事了。国内的音乐理论逻辑体系基本上就是在「可能也有其它的音乐理论教材，但基本上都围绕这一套展开。特别是斯波索宾，从苏联体系而来。知乎有很多对这些教材的短版的讨论，我就不赘述了。我本科是在加拿大读的（Digital Audio Arts 专业，学位是 Bachelor of Music），现已毕业了。在本科阶段，拯救了我调性和声理论学习的，是岛冈让的《総合和声：実技・分析・原理》。（完全模组化设计，自学者可以自己安排学习节奏、且书中的三大部分彼此互补。）我惊讶於世间居然有对自学者如此友好的音乐理论教材，忽然想起我首次出国之前看李重光乐理半天看不懂的样子，似乎明白了些什么。之后一段时间内，我在知乎推荐岛冈让的《総合和声：実技・分析・原理》这套教材，也有想著有朝一日等自己日语精进到一定地步了、就考虑翻译这本教材。但我现在多了几份恐惧。我在回答某些乐理问题时，很多人说我自造术语、甚至有人专门以此攻击我。我专门买来岛冈让的教材当中的术语逻辑体系，与国内现行这套苏修型音乐理论术语逻辑体系，有明显差异。我忽然意识到：国内这些对自学者不友好的教材所以能被推荐为圭臬，也是和某一群人的利益有关：国内这么多音乐老师（无论是院校老师、还是面向大学外招各种年龄段的钢琴学生的老师），当中肯定是有一定比例的人受益于下面这个现状：「国内能买到的中文教材，大多都需要老师点拨讲解、才能让你看懂。」我也有好几次见到与斯波索宾的和声教材有关的评论说「必须得找个好老师给你讲」。万一有人要是将岛冈让这本书（或者同种类型的优秀教材）翻译成中文引入国内，岂不是要砸了那群人的饭碗？毕竟，优秀的音乐教育资源，在中国，非常希缺。剩下的那群人，要用最少的成本保住自己的饭碗，最直接的方式，就是在这个圈子里面搞封闭。（看看 Arnold Schoenberg 的「Harmonielehre」的英文翻译，再看看简体中文译本，对比下后者少了什么，你必会有所发现。至少，我不认为「用目标语言写个 summary」就可以叫翻译了。）在中国，从来不缺业馀钢琴10级的人，但他们当中能够对乐曲的（包括曲式与和声在内的）而且他们往往也是师出那些和他们一样的前辈之手：只知道怎么演奏好一个乐器，但对音乐的赏识能力仍旧是个问题。这些人当中，有些人可能热爱音乐，有些可能只是方便给他父母脸上贴几年的金。这些都是产业。破坏行业的事情，这业内会有谁乐意去做呢？会有谁乐见于这种事情成事呢？回到正题，大家能想明白为什么很多大学教编程必须 Visual Studio 6 和 C 语言了吧？（C 语言不是所有专攻方向都需要的；VS6 包括 VB6 和 VC++6。）哪怕咱们大陆的资讯电子类专业出身的人们自学能力再高强，也很难改变这群大学教师「决定教什么」。P.S.: 对于谭本人这本书怎样，请不要与我探讨。我只负责对那些三缺帐号们（专门新注册来的水军）批次封锁、清空其评论。可能你觉得容易学，但没准是你老师点拨得好、或者你之前的学习经历帮到你了。P.P.S.: 一线我这答案讨论的问题并不会影响到你们。你们能进一线因为你们有全国最强的师资资源、使得你们自然不会去关心二三线# EOF,之前的回答过于草率，周末有空会改一下如果换教材，怕是一并要换一批老师。我校某老师讲c语言，公开表示main的返回值应该是void，int是某些环境的特殊写法。然后上机的环境是devc，全体编译报错，课件上的代码都运行不起来，公开打脸。,谭老师虽然问题多多，但还不至于太匪夷所思。给你们分享一下我985 IT强校的重点我都画出来了，随便一个抛出来都是能稳拿不过实事求是，这本书总体没啥问题甚至比较优秀，上面那一段大概是某些不可抗力的体现，魔幻但真实。,原来我读大学的时候就是学1. 改变要靠自己，等别人去改变是不靠谱的事情，哪怕改变难度很大；2. 一本书籍可以养活一批人。教材、教案早已了然于胸，熟悉的内容滚瓜烂熟张口就来，哪里需要改变了？改变了还要我花时间去备课，去熟悉适应新内容，而且我自己也不一定学得会啊？那怎么去忽悠别人呢？,大学里面有一群基础教研人员，有很多是早期留校的本科生。他们没有任何上进心，以985高校教师为荣（当然也没本事混副教授），抱着一套ppt混了20年。可能这些人连指针都不懂，然而，他们属于历史遗留问题，不解决也很捉急的。,不可否认《C程序设计》这本书放在今天来看的确烂，比如这种低级语法错误（第四版）：*29个字符居然只给出了28个。 * 07页-程序4，ture 和 flase 各亮相一次。* “后辍”。 * rintf。以及以下这种错误结论：* “凡是二元运算符都可以与赋值符组合成复合赋值符”。。 * “先定义，后使用”。 * “C的实数常量都是双精度型”，接着在后面提到“添加f来强制指定类型”。并且《的确，很多学子被这本书弄得看见C语言就瑟瑟发抖，失去了学编程的快感。学习 C语言推荐两本书：《谭老的书真的一般，但是，但是回复区一堆攻击谭老的是什么鬼，，，，谭老堪称中国第一代计算机先驱，他那本《C语言是1972年问世的，彼时谭浩强已经38岁了，1989年C语言完成第一次标准化，谭浩强这个时候已经55岁了，1991年，谭老在57岁高龄写出《C程序设计》，彼时还真不算太落后。1999年，C99标准才出来，这时候2000年之后，经典的C语言书籍层出不穷，甚至可以用百花齐放百家争鸣来形容了，老谭的书的确已经毫无竞争力了。但谭老并没有什么过错，这本书放在90年代，绝对是指路明灯般的存在，也是当年的计算机经典书籍，但时过境迁，计算机科学在发展、C语言也在高速发展，就好比一个过时的古董，自然没有任何实用价值。是那些偷懒的大学、那些偷懒的大学教授，不假思索的继续沿用一个上世纪90年代的教材，全然不顾计算机行业的飞速发展和经典计算机书籍的层出不穷，抱残守缺、因循守旧、冥顽不灵、顽固不化！是这些人坑了无数学生，让很多人看见C语言就瑟瑟发抖，甚至直接劝退了无数计算机学子。可能这100多万在诸位眼中算不得什么，在企业家动辄过亿的捐献中，更是少得可怜。可试问大家一句，我们何尝捐过几万，哪怕几千？有些人，他已经奉献了他的一生，却还要承担骂名，可悲可叹！顺便送大家一份硬核计算机资源，都是国外经典书籍为主！我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，,看了某些高校教师的回答。真心感觉以后有孩子千万不要在国内学这种垃圾教材 遇到垃圾老师 上垃圾课。18-22岁这段青春很宝贵，把人生浪费在垃圾教材上太可惜。相比CMU UIUC MIT的本科计算机课程，国内的真心垃圾,"和大部分读者的观点不同，我倒没有感觉谭浩强这本《C程序设计》有多糟糕。当然，我下面要说的，是解释为何近年来大家对国内教材质量的声讨越发强烈的原因。我是08年在中南大学读的本科，专业当时是电子信息工程。我高中时期和大部分人一样，是没有接触过任何编程语言的。也没有受过任何系统化的计算机基础知识教育。在本科入学时对计算机一无所知（除了打游戏。。。）而我第一次接触程序设计这门课是在大一。大一那会儿还很认真，读什么书都会想着“刨根问底”。这点很重要，因为程序设计这门课的思维和高中时期接触的数学物理的“观察者思维”不同，它是彻头彻尾的“设计师思维”。前者要求你在一组给定的规则下推算一个系统的运动结果；而后者要求你在给定的前提条件和结果（需求）下设计系统。可以说，思维差异导致我学校程序设计这门课非常吃力。再加上当时中南大学自己也出了一本《C程序设计》的教材，而且强制要求所有人必须购买（学费内包含）。然而那本书。。。我们的程序设计课程老师说，就是一坨屎。他第一堂课就告诉我们：“如果你还想学这门语言，别用咋们学校的书，去读谭浩强的那本”。。于是我在老师的推荐下去买了这本谭浩强的C程序设计。先说明一个区分点。现在很多的学生一如大学就能带计算机进入宿舍，甚至可能在高中时就已经接触过程序设计的相关知识。但是我读本科的时候是2008年。中国社会以2008年为分界点，可以认为2008年之前是相对保守的，而之后逐渐加大了开放。所谓保守在哪呢？举个例子，我直到大学之前都没有上过网。因为当时，全国范围内对网络游戏和网瘾的管控没有完全消失。甚至我们到了中南大学后，学校有明确要求禁止学生大一大二带电脑进宿舍。当然也有人带的，当时很多人不带是因为那时候学生的经济水平并不高，大部分人的消费观念是电脑是高端消费品，不值得购买。因此在大学本科，在没有计算机的大一，我们怎么学习编程？你们肯定想象不到，当时我们一群喜欢写程序的小伙伴都是直接去大学的图书馆计算机室学习编程的。。。而且那个计算机室还TM不能存盘，这意味着所有的编程必须当场完成。如果无法完成呢？那么只能在去自习室的时候在草稿上面写代码！当时我们学校图书馆的计算机用的就是VC++6，到大三我自己实习攒钱买了第一台电脑的时候，也是装的这个VC，哦，那会儿还是2010年初，VS应该是和C#一块在之后逐渐被推广的。所以早期程序设计的学习环境和今天极为不同。因此你也不要奇怪为何那么多老前辈用的是vim, emacs一类的看起来有点反人类（其实你懂了命令操作后，比VC方便多了）。这也是为何稍微大一点的程序员用VS比较少，因为他们不存在VS这个作为过渡的IDE来训练自己的开放过程。说完编程学习的社会环境之后，我们再来说这本书。？首先，绝对可以肯定的是，我们那届学程序设计，并亲手写出过数据库系统和网络服务--客户端数据包传输程序作业的学生一定知道，它的书里面到处都是BUG。但是我们并没有因此产生反感。一个很重要的原因是，（1）在书本上，我们只了解算法的基本原理或者程序运行的内在机制；（2）去计算机上实现程序，观察程序的“实际”运作机制以及算法的“真正”实现换句话说，而且，由于谭浩强的书很多地方都写得非常模糊。例如解释内存和地址关系的地方，数值编码以及指针部分，虽然看上去有联系，但是却缺乏系统化的阐述。所以作为学习者，当时我们学习这种模糊的系统原理时都会直接去计算机上实践。例如直接打印一段内存地址下各个字节（char）的十六进制码，然后手算它和实际存储整数浮点数的关系。此外，内存地址的分配是由高到低还是由低到高，也可以通过打印数组，变量的字节信息来观察。换句话说，我们当时学习这本书的方式又和现在有点区别。为了弄清楚实际原理，我们其实把整个计算机程序的运作机制当作一个系统来研究了。因此当我们实践完成后，谭的这本书上，哪里有错误，哪里没有，哪些原理说的不准确，哪些有错误，就完全了解了。到了这里，我们才是真正把那本书看完。，诸如：数组变量能不能当作指针变量赋值（不能），这种东西都是经过实际在编译器上验证的，虽然它的书也没说清楚这两种类型的区别。但是反过来，也正是因为它的这些缺陷，和当时编程环境的糟糕，才迫使我们通过大量实践了解了这些问题的根本原理，自己探索到了问题的答案。这又和只通过书本了解的知识有着天壤之别。此外，关于谭的main函数返回类型是void。这一点也很有误导，但是为何当时我们没有抱怨呢？因为我们很自然接受了这点。。。直到后来大三学习《实际上，void main和int main之所以推荐后者，是因为它是一种良好的编程规范，它保证了某个调用你编写程序的外部程序可以获取你程序的内部状态值。而通过这种方法，我们也可以设计不同的程序返回值来告诉外部程序内部错误的类型。（就好像玩游戏一开始就告诉你秘籍，你可能就失去了探索它的乐趣了——）最后，来评价一下谭浩强的这本书吧。这本书首先，可以肯定的是，一定有巨大的缺陷。放在今天看来，完全是糟粕。其缺陷，其它回答已经说的很清楚了，不仅仅编程规范太复古，而且很多代码和原理讲的都不对。不过我在这要解释的是这么一个问题：为何如今的程序语言学习者会看不起谭的书，而过去的人却容易把它奉为“经典”。这就要了解现在的人学习编程的方式和我们的区别了。但是我也要大家警惕这种过于简单的实践学习原则。因为它太过直接，以至于让一个学习者容易缺乏问题和兴趣去学习某些东西，以至于他们虽然写了很多书本上的代码和习题，但是未必真的了解计算机的原理（例如大端法和小端法我们那时候的人在学习完C语言的时候就通过实践了解到了，然而大部分现在的学生还要去系统学习《深入理解计算机程序》这本书）那么我说了这么长一段解释，又是十多年前人的学习方法和今天大部分学习方法的比较，这种比较的意义是什么呢？其实在于提示各位：。随着08年之后大陆开放程度大幅度增加，国外引进的书籍和教材呈现大幅度增加的趋势。有了更好的选择，客户自然抛弃了谭的书；此外，随着系统上IDE环境的越发进步，谭的书极其学习模式不再适应于更加高效率，能够培养更多码农的新时代。故而退出了它的舞台。但是我们应该正视这本书本身的存在。而且也应该意识到一个危险的现代情绪：当然也有人反驳，都8102年了，这么多年了，中国的教材为何不进行改革，向国外学习？这种反驳虽然有道理，但是忽略了另一个环境要素：那就是这种大学出版的书籍往往销量不受影响，完全可以通过让学生入学时强制购买的形式来回本。而且对谭浩强他老人家来说，都赚了几百本书的钱了，人家也没啥动力去更新。反过来，这种机制恰恰是因为老一辈学者依然占据高校教育顶层机构，而新人无法进入高层对其进行改革的无奈。所以我也习惯了大学老师在第一节课说的那样：学校的指定教材你们别看，就去网上买这本XXX写的就好了，我们以它为模板。很多时候，所以总体来说，我认为谭的书已经不再适合这个时代，但是归根到底，它也不像大部分说的是一坨狗屎，毕竟相对于同期的所有其它国内编程教材来说，其质量已经算是十分不错的了。我们批判某种东西的时候，必须结合它的具体的历史背景和那个时代的具体学习方式来看待它。客观来讲，谭的书算不上是那么的不堪，它只是不再适合这个时代的读者了。------------------------------- 2018/11/11 ---------------------------更新一下：我注意到一些回答提及了其它方面的因素，在这里给各位列出来作为参考：（1）学习。（2）某些大学老师提及他们自己其实很清楚C和C++的现代编程方法，然而问题是我在本科时读过很多书，有一个很基本的经验，那就是一旦一本书的厚度超过250--300页的时候，学习者就很难记忆之前的内容了。在学习一本书的过程中，学习者其实是有一个记忆曲线，这就和各位背GRE是一个德行（只要隔了一段时间不去重复背前几个List你很快就会遗忘之前的内容）。对于编程这种强调连贯性的学习来说，一个初学者一上来如果接触的就是C 这其实就是为何对于入门某个领域的学习者，最佳的选择反而是某些国内教材。、有的人说K&R的书也适合入门。这是扯淡。K&R的书适合的是那些有一定编程语言基础的人但需要进一步强化去学习的人，它很强调语法和原理的部分，但是对于完全没接触过程序设计的初学者，这些人是根本无法理解什么叫做内存地址或者指针这种抽象的概念，他们看这种书和看天数没什么区别，基本上就是“词我都认识，就是不懂它在说什么”。为何我能有所体会？因为我当初学习C语言的时候，一开始就在图书馆借到了K&R教材，当时的感觉是完全不能理解这本书里面提及的“专业词汇”概念。即使那本书给出我一些解释，我依然很难去理解它们的“实际功效”。相反，在接触了谭浩强的书之后，我才通过一点点实践的方式开始去理解内存地址，指针，程序指令这些概念的实际意义，最后回到K&R的教材，才有了一种它是“神作”的感觉。注意，我还想补充一些其它看法。某位高票说现在国内教材都是垃圾，很会误导学习者。我认为这言过其实了。大学教育早已经不是中学时期那种填鸭教育，也没有所谓的强迫你不能学习其它教材的说法。任何一个有上进心的学习者都会主动寻找专业领域的教材和材料来强化自身的基础知识。而对于那些没什么上进心的人，他们不管看什么书，都不会有所成就。另外还有人提到，不学K&R的教材就会“输在起跑线”，那么我就是一个输在起跑线上的程序员，可是我每年面试和招入的应届毕业生有很多起跑线都比我高，可他们大部分都缺乏企业级项目的开放经验，而且因为在ACM上刷题过多，导致进来之后老喜欢写过度复杂的程序，且没有良好的变量命名习惯。我倒是觉得学习本身就是个漫长的过程，而且依赖于你自身见解的不断提升，你要是觉得输在起跑线就完蛋了，这种人也不可能指望他们的起跑线向前推了几百米就能够坚持跑到终点的。对于有志向学习的人来说，书籍，只要不是太烂到无法理解，都可以用来入门。此外，某个用户还批判谭老爷子出书是学术腐败，我觉得这种言论最好不要有。谭浩强的书相比于国内其他学者的书已经很良心了，批判他是学术腐败，除了博取舆论眼球，制造仇恨舆论外没有任何帮助。有的人学的不好，就怪书太烂，体现的不过是他们自身在学习上的怠惰和无能罢了。",作为一个三流985的学生表示深受其害，我们专业课的教材有很多是学校自己出版的，编写者是谁？没错就是你旁边的老师，编的好么，客观来说有些还不错，有些简直是垃圾中的战斗机，只是从别的教材中复制粘贴，排版混乱，错误连篇，坚涩难懂。经常有学霸拿着从图书馆借的书，告诉我xx版比某些shit要好多了。于是我看了下，嗯我们的教材是shit。那问题来了，为啥要坚持用这些垃圾祸害学生呢？首先，教材卖给我们是95折，亲，九五折，自己到图书馆领哟，良心价呢。专业课书经常一本三四十，打印店复印一本也就十来块的事，什么？你说我不尊重版权？你让那些被抄的经典版课本编者哭晕在厕所。而且编书，对于大学老师评职称等各种先进评优都是有好处的。而且考试内容都在教科书上，不买你学的多好都有可能挂，因为他考的可能是冷门知识点。不过在被坑了几次之后大家都学聪明了，都在买二手的，或者复印版。学校也发现这书卖不动，于是就出现每班必须买多少本，这种强买强卖不符合市场规律的事。还有的奇葩老师有着，你不买我的书就是和我过不去，你和我过不去，我让你考试过不去。花钱消灾吧，么么哒。,很久以前，我也不明白为什么那么多人喷主要有三种观点：但是你只要看看下面的内容，就知道谭浩强这个人该不该骂。我们谷歌下谭浩强的资料：看下谭浩强创造的世界记录：可以发现，谭在政治圈和教育圈都有一定地位，特别是教育圈子头衔太多，而且级别很高的样子。谭主编的书籍达到 130 + 250 = 380 本为科技著作世界记录外加两个出版发行量的世界记录。我想象中的这个人，不是一个多么厉害的伟人。我看完这些资料以后，觉得恐怖，觉得可悲。多么腐败的教育圈在给他造势，私吞了多少手下人的成果，才帮他达成了这些“成就”啊？这就是中国科学家不受重视的原因啊，因为只有谭这样的专家教授才能拿到比明星多的钱，至于手段嘛？呵呵。—— 大家的评论都在骂那个拿毛选做对比的人，感觉完全歪楼了。,40多个答案中有几个是一线高校教师？我来回答吧。很简单，为什么要换教材？有利于我的职称，还有有利于我的升迁，或者课时费高点？别以为就你们知道什么K&R、现代方法、c reference manual这些书，很多老师也知道，也看过，那他们为什么不作为教材？因为除了很少数还有理想的年轻教师，真的是没这个动力。我用谭的教材，课件什么的都是现成的，连教案都可以用前辈们写好的，我干嘛还要自己再费事搞新的？评职称的时候没人会因为你用了什么世界级的先进教材给你多加一分！而且你们说的什么现代方法那本书，的确不错，一本书快100块钱，对不起，不能作为教材统一征订，教务处直接就给你否了。那本经典的K&R，讲真，其实并不适合初学者。何况很多时候，其实根本就没按照书上的讲。我只是告诉大家现实情况，想借机搞个批判什么的请绕道。,题目描述中有这么一句话大错特错。大多数教授的项目，代码都是由手下的研究生写的，他们自己才不写代码呢。有些人都很多年不写代码了，还能站在讲台上把几十年前他们学的东西讲给学生听。这在基础学科领域没问题，数学物理定律至少在几十年之间是没有很大变化的，但是计算机技术日新月异，几十年前的东西早就过时了。,我的c++老师写个hello world不知道cout在std里，我告诉他，你该加namespace，他说了句啊？然后继续装他的逼，就是不加namespace，给换成了c的,这本书是有一些问题，但是并不影响非计算机专业的入门学习，相反地对于入门这本书还是有一些优点的，从书本的总体结构与内容的安排来说，谭浩强写书的时候还是用心思考了的，并且给出了他的认知水平下的优秀方案。不过现实情况是很多人水平高一点之后，察觉到了里面的一些小问题，然后满世界大吹大擂，给旁人一种我很牛逼的错觉，无形中夸大了这本书的缺点，搞得好像用这本书学编程就很致命一样。正在吃饭 吃完饭好好讲一讲这本书的优点。－－－－－－－－－分割线，以下补充答案－－－－－－－－－－－－－－－－－－－要评价这本书，首先要知道这本书的目的，它在前言中讲得很明白，就是给非计算机专业的人写的教材。非计算机专业的编程课，几乎也只有两门课，一门计算机基础知识，再加一本编程语言了课程了（大部分就是这本C语言编程了）。就这两门课，没别的了。编程语言一般只讲一个学期。在这个条件的基础上，我觉得这本书最大的优点在于：1.不厚，三百多页，但是C语言的基础知识都讲到了，一个学期能够讲完。谭浩强是懂教学的。《2. 在教材中第二章中就很明白地讲了算法与数据结构的重要性，指明了算法是程序的灵魂。在《数组》一章中的示例中讲了排序算法，在《结构与共用体》一章中讲述了链表的原理与实现。对于许多大学四年只学一门编程课的人来说，起码没在这个大方向上让你产生什么误解。数组、链表的简单数据结构，一些简单的查找与排序算法，对于一般的工科专业来说够用了，至于更重要的数值方法，有另外的一门课《计算方法》。学好了这些对于工科专业的许多人来说够用了。反而一些别的纯粹的C语言的教材在这个上面并没有着重强调。当然，对于计算机专业的人来说，他们开了算法与数据结构的课程，编程语言的书只讲编程语言不是什么大问题。3.附录很有用，对于一般的非计算机专业的日常编制来说，当手册用很合适。谭浩强是知道你们学生是个什么水平的，也懂学生需要什么的。缺点当然有：1.语法标准落伍了。2.代码中有一些错误，还有一些不规范的、不严谨的，不过他当时用的Turbo C编译器，可能在那上面能够编译通过。还有一些是印刷错误。不过这并不是严重的问题，错误的地方，自己编译下，根据报错信息什么的在网上一搜就明白了，或者问问老师就知道了。另外一些低级错误确实很致命。3.没有强调正确的编码风格，没有强调注释的重要性。不过有些东西，谭其实也讲到了，比如在他的前言中就讲了：”在谭的书的基础上，改进他的缺点，保留他的优点，会有更好的适用于非计算机专业的编程教材的。批评不是不可以，要批到点子上，也要承认别的人优点，批评之余也要提一些更好的解决方案吧。可是在谭浩强之外，还有人写一本适合中文的非计算机专业的教材么？我孤陋寡闻，没见过。这不是,"这些老师都是没有开过软件公司的人. 所以, 不知道社会上需要什么样的软件. 需要什么样的编程人才. ------为了维护教学的连续性, 减少每年大量写讲义, 于是就沿用过去的传统, 直到腐朽. ------我1987年学习程序, 1990年看的谭老师的<C程序设计>, 同年看的书还有到1997年上大学, 才注意到, <C程序设计>实际是参考1977年前后国外教材编写的, 而这个时候, 学C不如学C++, 学C++,还要学Linux C或者Visual C++马上问世. Windows98系统已经发布预览 版.. 可是, 这本20年的老教材, 还在让学生们背 C++ -- 运算符优先级. 而不知道光C的编译器有几百种, 各种编译器对语法的细微差别是不同的. ---- 现在的C语言程序设计, 文件保存不讲Utf-8编码问题, 流不讲视频流, 加密不讲MD5和RSA, 模板类, Lamda表达式, 都不仔细讲, 这个难度, 好比18世纪的数学... 与时俱进, PYPL上这个月Python登顶, 可是国内大一的编程有多少开了Python的课程? 所以, 题主的问题没有为什么, 只是教育与产业脱节. 反正有学费赚, 反正毕业给你一个学历, 所以, 教什么呢? -- 教最容易教的. ",浙江省二级试卷上出过只有TC才能编译运行的奇葩代码，问你输出结果是什么，只有谭氏C能解释。,"这个问题很简单，因为很多人学C语言并不是为了把程序写得很好，对于没有多高追求的人，学到这么多，能应付期末考试和并没有卵用的所谓2级就够了。还有一个问题，就是编译器配置问题，我学C也是从谭浩强开始的，学完了当然觉得这里面坑太多，但说实话，后面我在学校学C++用的教材，还不如当然后来开始用高版本VS，就觉得这是什么玩意儿，好多有用的都没说，然后开始查MSDN。之后出于对C++11的喜爱，VS支持C++11太慢，开始转向gcc，开始就会code:blocks，后来开始会配MinGW，但是各种库依赖太难受，然后发现MSYS2这个神器，就这样。那么对于一个用MSYS2+GCC，文本编译器用Sublime Text，写Makefile组织工程的人来说，那谭浩强真就是一坨屎，我当初走了多少冤枉路啊！这还只是对坚持Windows平台的人而言的，至于转向Linux,Unix的就另说了。但请记住，不是所有人都要达到你这个程度的，对于大多数人而言，谭浩强的程度就够了！当然这话对只对我这种非计算机专业的人而言，对于计算机专业的人我还是希望能早点换个现代一点的教材。当然谭浩强的某些问题，比如指针和数组关系有点胡这种问题，你也要考虑某些考试本身就比较胡吗，他就要考这种写了会被人骂死的代码，你书上不讲不是照样被骂？这不能怪作者。",说说自己的个人情况我08年就读于陕西某211院校软件专业，当时我们学校C语言课用的是开始时大家还老老实实地根据裘老的书学习。约摸记得裘老的书不像很多语法教材每章介绍几个语法点，而是会连带介绍他如何解决一些问题，颇具难度。我记得当学习到第三还是第四章的时候，很多同学崩溃了。那章应该是讲函数和递归的，一般的教材（我后来看到的）基本上在讲递归的时候会很简单的用一个斐波拉契的实现作为递归函数的说明。但是裘老的书用了于是就看到当时好多同学弃坑（包括我）去选择了老实说老谭的书确实存在各种各样的问题。书中用的编译器很老旧（好像还是TC很低的版本？），代码风格一塌糊涂（拧得像麻花），更别提中间存在了很多的谬误。但是他有着适合国情的一面。喷他的人（包括我）大多都是日后学会了写代码，反过来再去批评他的书。但是不可否认，在我们都还什么都不会，什么都不懂的时候，《题外话，从业之后回翻了当年放弃的裘老的书，颇感裘老功底的深厚。书中提到的很多编程思想，编程模型，代码风格，解决问题的方式确实是在以往工作中实践过、帮助自己提升效率的好东西。深感可惜，如果学校当时把这本书当做是语法学成后的拔高教材，而不是基础课本，也许效果会好很多。,        代码写的越久，看很多代码类的东西就就越随缘，比如看书这个，尤其是技术类学习类的书籍，你看的下去，觉得适合自己，我觉得就相当不错了，毕竟最大的问题不是书上有没有一些边边角角的错误，而这书你看多久能不打瞌睡。所以正确的阅读方式是，你先找本书看，不喜欢，换一本就是了，学习本身就是一个拿时间换知识的买卖，买卖不合适，换家做就是了，明码标价童叟无欺，买卖不成仁义在，只要你肯去做，总有一款适合你。   科普和科学是两回事，平滑的学习曲线，应该是通俗易懂的科普进门，然后再用严谨的方式去证明科学，而一个好的科普，丝毫不比严谨的科学容易，现在根据前人的教材你再做一遍严谨的推导很多时候并不是什么困难的事，但如果你完全吃透了一个知识点，并且对它有了自己的理解用大多数人能够接受的方式将它科普出来，或者理论指导实践直接将它落地变为产品变为生产力 那我觉得是相当了不起的，这个知识点你是学到家了的，比只会抄严谨结论扯着大旗告诉别人这里那里不行，这个描述不太对，茴字不应该这么写的高到不知道哪里去了。     又不是搞数学证明搞推导造火箭，搞的那么严肃做什么。
室友想抄我的代码，给还是不给?,一门编程课临近截止，但几个大实验舍友全都没有写，打算照搬我的，但是这次作业老师提前说了会进行代码查重，舍友虽然承诺说会修改，但估计顶多改几个变量名，万一真的查风险还是很大的。而且我的代码也是花了大量时间问同学问学长才写的差不多的，他们直接这样照搬我的成果最后再依靠突击考出比我高的分我内心有点不平衡但我们几个平常关系很好，直接不给势必会影响关系，所以我是该给还是不给呢？大家能给我一点意见吗？,给，但是换一种方式，别微信传，也别U盘。Github上创建一个超过10 Star，你就把代码Push上去，然后让他Fork。超过100 Star，都不用他修改变量名，服务到家，你帮他改。然后用他的Github账号Pull Request。这个Repository留着，以后学弟学妹们都用的到。平时Private，有人找你要代码，就把他加为Collaborator。这就是Github允许私有仓库人数无限制的福利。记得找工作期间Make Public。不是开玩笑，如果我是大学老师，我就要求学生这样交代码作业。这是程序员的必备技能。我会给每一个班创建一个Organization，他们交作业我都知道，代码有问题就发Issue。全专业的学生互相Follow，谁的代码写得好，大家就Star。下次上课，我可以打开Github，讲评一下比较好的代码，也可以让同学们互相学习和评价别人的代码。大一新生入学，先学习Github的基本用法，然后一项练习就是Star学长们的Repository，为他们找工作贡献一份自己的力量，这个优良传统一届一届传承下去...软件程序的一个根本特征就是可复制性，这是其他行业没有的特质。开放源代码也是目前软件产业发展的一个主要驱动力。应该让即将从事这个行业的新人们更早更深刻的认识到软件可复制可分享的本质特点。关于如何最方便的浏览演示的是浏览LInux一个C程序代码。只需要把,当然可以给，但是建议你在代码里做点手脚。最初级的方法是在代码头部加入版权声明的注释，像下面这样子（以 C++ 程序为例）。但这种方法只能针对看都不看，直接原封不动地复制粘贴交作业的室友。对于那种稍微警觉一点的，会复查这样的话，室友即使复查你的代码，肯定也看不懂那串数字是什么意思（这都看懂了那还会找你抄代码吗！），越是看不懂的就越不敢乱改，等把作业交上去以后，老师一运行，自然知晓真相。但是这样还不保险，万一室友运行了一遍程序，发现了你隐藏在代码里的版权信息怎么办？没关系，我们可以用条件如此，就既不丢人情，也不怕被卷入抄袭风波了。更新：补充 cout 和 endl 前漏写的 std ,现有回答的答案都服务太不到位了。岂止是要给啊，还要为了不让老师看出来，给改好了再给。想当年我上大学的时候，老师留的作业，我也是啃了好久才啃出来。然后，顺理成章地，同学们就来索要了。我说好，为了不让老师看出来，我给你个变种的版本。（你那水平，给你去改我都不放心。这句话没说出来。）于是，一个作业我写了4份，每份的算法都有些差异。每次我都有新的收获和进步。（那年头，我们一个寝室8个人。）等我把4份写完了给他们，我再取其精华，充实一下自己的作业，我还是那个最好的。要不是那样，我怎么能理解内存分配、怎么能掌握调试的精髓？所以，要给。如果有精力还要多给几份，多改改。这是不可多得的练习重构代码的机会。一个附带的效果，就是我虽然人单力薄，但是在寝室里从此说一不二。谁敢忤逆，我就一句话：你还想不想毕业了？至于他们今后的死活，能不能找到工作……那我就管不了那么多了，我跟他们还没那么深的交情。,伤害室友感情级别，由低到高：1、给他抄。2、给他抄，但附加合理的收费。3、不给抄，但提供帮助/思路4、礼貌且果断的拒绝，明确表示我不愿意让别人抄作业，关系再好也不行。（让他知道这是你的原则，不是因为你不把他当兄弟）5、犹豫且模棱两可的拒绝。6、用拙劣的借口拒绝。7、拒绝并附带嘲讽（划水挂科活该，您配吗？）你室友想抄你，他自己也会觉得理亏，你不给他抄不太会影响友情。（如果实在来不及了，你们关系又不错，可以适当帮一把）大家都知道xx班有个笑里藏刀的小人，表面装好人，背后害自己兄弟。做这种事，老师不但不会夸你机智，还会瞧不起你。我们班就有一个偷偷举报污蔑同学被抓包的，老师同学都不正眼看她，可想而知一切奖项好事都没她的份了。,我不光给 我还传到校园网上。。。我毕业十年了。。。学校里还流传着我的代码 恶心着一代又一代的老师。。。话说。。当年的代码写的真是烂啊。。。,当年学期末邻近，室友看我写完了，拿走我代码，在上面包了个特别简单的UI，可以选择源文件，然后把编译结果输出在UI里的那种，然后也打包上传交差。隔壁有个哥们从室友那里拿走了代码(他俩关系比较好，所以没直接找我拿)，扔掉了UI，做了个简单的jsp网页，可以上传源码，然后调用核心代码编译，返回编译结果，美其名曰在线编译。结果你猜怎么着？？我60分，室友80分，隔壁那货95分。所以你看，懂得包装和忽悠是多么重要！！现在我一线搬砖，室友小头目，隔壁那哥们早已不从事技术工作，部门经理，专职忽悠。古人云“三岁看到老”，性格决定命运，你所关心的抄不抄，给不给抄之类的都是细枝末节，对以后发展大方向没啥影响的。PS，我当时对这种做法很不屑，但是后来回头看，这神特么“在线编译“，不就是后来大火的“云服务”思想的萌芽么？当时可是2006年，别说在线办公，互联网几乎各种空白，连新浪微博都没影呢。,你放到github上，贴上一个gpl协议，告诉舍友地址。你维护的,想起叔当助教那会儿，班上有对儿小情侣，如胶似漆，在我office hour的时候，他俩也不问问题，就在我眼前腻着。叔心如止水，叔小妹子写的代码就每次都给那个小伙子抄，一模一样的。我也不好意思直接说他俩，叔说他俩自己也心虚啊，毕竟叔年轻时候也。。。。于是就天天暗示他俩代码要自己写才好，学到的东西才是自己的。还苦口婆心跟他们说如果我看到代码雷同，两边都给低分。无果。于是就每次多给给小伙子1～5分，如果小妹子98分，就给小伙子99分，如果小妹子70分，就给小伙子72分这个样子。真爱啊，那小妹子竟然足足忍了一个月才终于受不了了，责令以后作业都小伙子自己写，然后她抄！（本故事纯属虚构，如有雷同实属巧合，千万别对号入座。你俩最后要是成了也得谢谢叔，要是没成也不能全怪叔当年评分搞鬼对不对？）,我从大一就定下了一个规矩，我永远不会帮你写代码，但我会无条件的指导你思路，让你自己能写出来时间长了，他们也就都只问我思路了关系好的关系不好的知道我这么严肃也就不想抄了更新分界线我的回答的核心就是“要自己学会，自己懂”以下是一个栗子我努力往好的方向带别人难道不好么？,原回答：给啊，为什么不给，不光给，我还会手动帮他们改好，他只需要把名字签上就ok了！服务就是这么到位，您只需要支付500元就ok了，超值！什么，您没钱？吃我一记素质五连！事实上，作为一个在大学代码写的还行的小哥哥。这种事情是免不的。没人跟你借代码那只能说明你水平不行了，因为大学会写代码的真没几个。其实我大学的时候有一个同班女生，为人豪爽，跟我兴趣相投，遂结为异性父女。。。。扯远了，就是关系很铁那种，她不会写代码，而我为人懒散不喜欢文案报告之类的东西，我们一拍即合，我承包了她大学本科所有的代码工作，而她帮我搞定了大学本科所有的报告类工作。而且。。。有一门课叫其实现在回想起来，我亏了吗？没有，我觉得血赚好吗！！她亏了吗，她也血赚好吗！没我给她写代码，就她那水平她要毕业得秃了！其实吧，我的真实做法是，舍友跟我要代码，我会给，老师查重，我会提醒说你改改，也不会太上心，我这样是因为我不想出国也不要保研所以对分数很佛系，能毕业就行。评论里也有人会说什么对舍友负责之类的，给别人抄作业是害了他之类的说法。对不起我不同意这个说法，大家都是成年人，我不需要对他负责。只要他不让我蒙受损失，他需要帮忙，对我来说也是举手之劳，我乐意效劳。就这么简单，他要抄我就给他抄，他有问题问我我就给他解答，他考一百我考60那是他的本事，我不吃亏的。总有人会觉得教会徒弟饿死师傅，可我从来跟他们都不是竞争关系，他们只是我的舍友朋友好哥们，我才不会说为了他们好而不给他们这种屁话了。试问我如果这样做了他们会感激我吗？完全不会！他们会觉得我是个自私自利的小人罢了。为人处事的原则是人人为我我为人人，而不是好为人师教人做人。或许将来有一天，我有求于他，他会念我当年一码之恩，给我方便，而不是对我说：对不起，我不能帮你，我这是为你好。。。。。学校的感情是最纯真的。勾心斗角的，何必呢。你们要的表情包,想起了大学的时候，一个C语言大作业，我写了90%吧。另外一个室友不会码代码，做了一些杂乱的工作(当时还没学数据库，所以自己用我们小组分了一个女同学，从头到尾没做事的那种。其实这没什么，有的人做事，有的人不做事，挺正常的。但是最后要交排名的时候，另一个大概做了5%任务的兄弟，居然提议女士优先，让女生排第一个。我当时就不乐意了，凭什么我得这么“绅士”，而你们下课就去LOL没想过作业的事？然后他可能觉得我不好说话，又提议让女生第二。我还是看不过去，你排第三，自己让出排名我没意见，但是凭什么让做事第二多的兄弟让位，慷他人之慨？我室友大大咧咧的北方人，很少计较得失，虽然成绩不行吧，但至少做作业的时候态度是端正的。真就欺负老实人呗？我觉得你的困境和我室友一样的，当你室友(我故事中提出女士优先的那个男生)先向你提出这个要求的时候，他就已经在借你们间的情分慷你之慨了。但这事有意思的是，如果你不同意，反而最后是你落个口实，说你不够意思(正如我室友不答应可能就被说有失风度，毕竟码农专业妹子那么稀缺)。借作业的事屡见不鲜，我的建议是，如果对方确实做不了(我室友第一次考试写出过case1-case99这种代码，草稿纸都不够用，笑)，而且成绩差可能挂科，那看看情分能帮就帮；对方是混混日子，亦或是家里有矿不在乎这些成绩，那必然自己要为一些行为负责。别说什么怕挂科，怕影响排名，都尼玛扯淡。不帮他，让他涨一次记性，是为他好。而真正需要考虑排名的学霸，是不会出现找你借专业核心课作业抄的情况的。就酱！,来，试试这个 ：这个东西大家应该都知道怎么用吧如果你们是手写实验报告代码的话 嘿嘿嘿混淆前（你的代码）：混淆后（你舍友的代码）：专治复制粘贴程序猴fkskkdmmrmdhdjkdk,前面可以直接跳过，直接从最后三大段看起！你们老师做的什么事儿啊。。。凭什么不能抄代码？代码界宣传了那么多年的开源开源开源，都喂了狗了吗？以前微软吵吵着要干死开源的，现在不也成了GitHub的大股东了吗？还带着头的搞开源。。。你同学要问你抄代码，你让他们抄（其实说让他们抄不太合适，应该说让他们参考。。。），首先这肯定不是你的错，因为本着开源的精神，你的做法是值得赞扬的！你同学自己不做作业，被查重查出来了，倒霉也是他自己的事儿，因为这本质上是一个作业，评分标准确实是老师说了算。。。但是，保险起见，我给你出个招儿吧，绝对不会有问题。去类似GitHub这种开源网站开个账号，把你的代码传上去，然后挂个GPL3或者MIT什么的license，然后让你同学随便抄好了，查到你头上，就把网站扔给你老师看。如果这都找你麻烦，那就是你老师的问题了。有同学问，but！抄代码和抄作业还是有很大区别的！如果按照我上面说的做，那么你就会有三个优势1. 你是被抄，不是抄别人的！你把自己的代码发在github不违反校规吧？(那些把“作业禁止上传到github”写进校规的大学就别往下读了，老师考试前明确表示禁止把作业上传到github的也别往下读了。。。)2. 别人抄你github的代码，那肯定是别人的错呀……和你没关系！退一万步说，请拿出证据证明是你主动给别人抄的！这种确凿的证据，除非抄你代码的同学想坑你提前给你录音，否则根本不存在！既然拿不出证据证明我是主动给别人抄的，别人抄我的github我又没办法控制的……就奇了怪了，明明我是被抄袭的对象，为什么惩罚我？3. 不要问我为什么要发github，发github好处太多了，我必须要快点发，早发就可以宣誓主权这点道理不知道吗？有的同学问，这我完全不同意哦！这种事情不能一概而论的，至少代码不行，因为个人写的代码其实是一种知识产权，并不是普通的考试答案。我自己本人就很喜欢在GitHub上公开自己的代码，不管是考试的还是paper所属的，从来没听说过有学术诚信问题。谁抄袭了，出了问题自己担着，我肯定是免责的。核心问题还是在于，你要证明我是故意给别人抄袭。如果是公开自己的作业和笔试考试答案，那肯定逃不了干系的。但是在GitHub上公开代码恰恰不能算做是故意给别人抄袭。因为这和申请专利一样，申请某些专利意味着你要公开你的设计的，这不是给别人抄袭，而是告诉别人，这是我的，不准抄！GitHub是要挂license的，一个道理，告诉别人，这是我的知识产权，你们不可以偷，license确保我可以分享的权利，你们抄了做什么用处和我无关，但是出了问题我是不管的，包括挂科！所以GitHub的license是一份具有法律效力的免责申明！既然免责，为什么要惩罚我？法盲吗？另外我要提醒大家！在GitHub上发代码，都会挂一些GPL3、MIT什么的协议，我推荐GPL3，这也是我一直用的，为什么？因为想抄GPL3要满足四个条件其中第二点和第三点就是我的免责理由！因为第二点和第三点其实是在说，如果你想抄我的代码完成作业或者考试，就请自觉去找老师自首。。。要么就别抄！任何人想要抄你GitHub上的代码，为了完成第二点和第三点，他就有义务自己向老师报告说，“我抄了某某某的代码，哪里哪里哪里是我自己改动的”，所以说，说你违背学业诚信是不正确的。如果你的同学在你的GitHub上搬走了你的代码，并且他想作业或者考试作弊，必然不会做到第二点和第三点，你的同学不单单是作弊，而且是违反了GPL，所以你也是受害者，更不应该受到惩罚。注意到这背后微妙的逻辑了吗？你在GitHub上公开了代码，挂了license，这些license是要求抄你的人必须自觉的把你的源代码附上，并告知全世界，他是抄你的，所以你也是在帮着老师奋斗在反对考试作弊的第一线知道吗？So，你把代码发GitHub的行为，意味着你做到了诚信，你也要求借鉴你代码的人也必须诚信！简直不能太正义了。。。然后谈谈你的同学，想抄你的代码，既不想让老师知道，又不想违反GPL，那只能学你的思路自己从头写呗。。。还有知友问，这没有道德问题，放心。。。为这种事情较真的老师不单单是法盲，其实连是非都有点分不清的。。。应该去参加一些pedagogical的课好好进修一下。。。我自己本人也是老师，我不反对学生在GitHub上放代码，相反，我还鼓励！通过这样做，我很容易搞清楚，这代码到底是谁写的。我只想知道真相（谁抄谁的），并不以惩罚学生为乐。。。但是，谁考试抄袭别人，我就挂谁，就这么简单粗暴。。。其实应该鼓励学生们把代码放在GitHub上公开，比偷偷摸摸的好不知道多少倍，一方面是教会学生如何保护自己的知识产权，另一方面，对老师的查重也带来了极大便利（我挺腹黑的）。所以从老师的立场来说，这到底是为了什么？是为了杜绝作弊呢？还是为了享受惩罚学生的乐趣？如果是为了杜绝作弊，真的应该鼓励GitHub，让一切真相（代码谁写的）都大白于天下，查重也变得很简单。。。开源的目的也是这个，让一切放在阳光下，想抄？抄吧，公开的抄比偷偷摸摸的抄更容易监控，你抄了别人的代码，被我发现了，这科挂掉你可别怨我。。。至于把代码发GitHub的那位同学，谢谢你的合作，不然我还真搞不清谁抄谁呢。。。不要问我，我明显本意是在反作弊，你们要看成是鼓励作弊我也没办法……上传github并使用license，本质上就是在保护自己的代码。特别是GPL的第二点和第三点，这就是让抄袭的人自己去自首的意思不是吗？另外我不支持和老师对杠的做法，只是指出这样做是正确的。至于有些老师会因此给你零分，只能自求多福，人无完人，老师也一样……（有些老师就是不明白GPL的第二点和第三点就是让抄袭的人自己去自首的意思，也不明白鼓励大家使用github其实是对反作弊有利，既然你都上课教人写代码了，自己开个github账号和学生互加好友就那么难吗？还可以长点粉丝啥的。。。一切都很公开透明，查重也变得很容易。。。）有知友提出这样的观点我觉得说有道理，这是非常现实的考量，但从另一个角度可以看出悲观情绪。老师都不愿意被学生们当“傻瓜”，可是很遗憾，大多数老师都被学生当成了很容易就是非不分的“傻瓜”不是吗？我发现很多人都没有仔细阅读这个答案就已经开喷了……我不支持跟老师对杠！我不支持跟老师对杠！我不支持跟老师对杠！重要的事情说三遍……吃不准，你可以课上问老师啊～问个老师成本有那么高吗？另外，我开了两个专栏，发了一些干货满满的技术型文章，关注度居然没有这个答案高……个人感觉挺讽刺的……我发现很多人就是看不懂我到底在写什么。。。我这里总结一下我到底是在说什么。我的建议适合这样的你你的情况符合以上三点，并且做到以下两点：那么，上传github挂GPL是最安全最正确的做法！为什么？你的同学面临以下两个选择两者必居其一！如果违反GPL抄袭，那是明显违反你的主观意愿的！说白了，挂GPL就是给人参考但委婉的不让别人抄！PS、还有人说我一开始就嚷嚷着要抄要抄的。。。喂喂？开门见山也可以是假山好吗？请读下去。。。关于学生作业的版权归属问题，因为这和雇佣关系有巨大区别，所以学生的代码的版权不应该属于学校，除非例外情况。其实在stackoverflow上早有这样的讨论，请阅读第一高赞回答的第一句就足够说明问题了：所以沟通很重要。我知道有些学校会事先让你签合同的，真的动笔签哦！。。。这种就别想了。但是这样恰恰说明，默认版权是你的，不然干嘛脱裤子放屁呢？另外有些学校会控告你misconduct，因为你发布的作业让低年级学生作弊。。。这种情况并不是每个学校都普遍存在的。这些学校会控告，究其根本原因，他们不但允许而且支持老师们可以重复利用课件特别是试题和考题，哪怕换个老师也用一样的。。。我表示理解！但是我们这儿是不行的，课件可以重复，但是考试绝对不可以重复，因为想想就知道，你以为GitHub是唯一的渠道嘛？私底下就不能问啊？所以我们大学是不允许老师考题重复的！但。。。我只想说，事先沟通很重要！既然版权默认是你的，你有选择GPL的自由。大家要讲道理嘛。。。我还要声明一下，我也没有鼓励大家去和学校怼。。。但是有一点是肯定的（也没什么好藏着掖着的），大多数学校的学生都是弱势群体（北欧大学除外），也就是说，被不公正对待且放弃了上诉权。。。而看多了这些的人觉得这世界就应该这样，所以跑过来笑我naive。。。实际上，绝大多数事情，你是可以做到有理有利有节的，并且在动干戈之前就可以化玉帛的（事先沟通好，事后就不用互怼了不是吗？而缺乏沟通到最后搞不定的，纯属一手好牌自己打坏了。。。）。最后，我想留一个问题给大家思考，习题和考试让学生写代码，特别是take home这种，意义到底在哪里？可以互相参考吗？我们是真的想把平时不好好学习的学生们拍死在考试的路上吗？还是希望他们每一个人都能最终能学到东西并写出自己的代码呢？教育的目的究竟是什么？教育的目的是育人，不是毁人。。。这就是我所说的政治正确，然鹅还是有人嗤之以鼻！我相信，答案一定是，可以互相帮助互相参考，毕竟老师都让你带回家做了，可以谷歌可以百度不是吗？看谁不是看呢？但是请write your own code from scratch!所以我个人倾向于鼓励学生互相帮助，因为GitHub可以挂GPL这种优秀license，所以非常适合让学生互相之间公开代码互相借鉴，并保护自己的代码，但是必须要严惩抄袭的学生！另外，作为一个多年写代码的人，我可以告诉大家，不论你是菜鸟还是代码高手，当你写代码没思路的时候，最好的办法就是去读别人的代码并从中借鉴。。。只要你还在写代码，你一定会一直不停的阅读别人的代码。。。开源的出现不是没有原因的。再这么添加下去，文章要越来越长了。。。我个人不喜欢修改已经写过的东西（除非是错别字这种），会造成上下文缺失。希望这是最后一次添加。。。,最简单的办法，就是掩盖你已经写好代码的事实，反过头去问他要代码。这样一来，他一定不会再跟你要代码了。在最终要交作业的时候，佯装熬个夜啥的，最后一刻提交。既保护了你的代码，也不至于伤害室友关系，某种程度上还能树立你牛人形象，毕竟我在大学期间就特别羡慕那些熬一夜就能解决任何问题的人。这样做唯一的不好，就是有一点虚伪，对朋友不诚实。但是我要告诉你，当你今后步入社会之后，会经常遇到类似的问题，我把这类情况总结为：“能帮，不想帮，不帮伤感情，帮了我吃亏”。朋友借钱，你明明有钱又不想借，怎么办？同事让你加班帮他干点活，你明明会干，但是就是不想干，怎么办？亲戚想借你车，你正好不用但是就是不想借，怎么办？这种情况通常面对的都是非常要好的亲朋好友，你绝对不想因为一件小事而弄得不愉快或者从此心存芥蒂，但是你又不想当包子让自己吃亏。那么怎样才能在不伤害感情甚至不明确说出拒绝的情况下，处理这种情况呢？很简单，朋友买房跟你借钱，你可以说：“老婆想换辆好车，正想找你借点钱呢，看来咱俩手头都紧啊”同事让你帮他干活，你可以说：“正想找你帮我弄个xxx呢，看来你现在真忙”亲戚想借车，你可以说：“我也正想借辆车呢，我的车不跑了”然后，你的困扰就解决了。当然，诚实永远是优秀的品质，只有面对无理的要求时，适当的不诚实，可以让大家不至于那么难堪。,给。大学有次，室友抄我代码，把我写在注释上的名字也抄上去了。结果我们连带挂了。后来我创业，室友从上海赶到北京帮我做了3个月。我觉得人生就应该这样。有借有还，算那么清楚就没朋友了。大五又如何，大六又如何？,身为一个大学前有点基础的留学生，我大一给几个有些困难的朋友轮流写过作业。我们有的课程甚至可以复制代码，网上的别人的都可以，但要写明出自哪里。我喜欢编程，多写点也无所谓。他们不想学就不学，多点时间做自己想做的事。我也不在乎别人成绩超过我啥的，听起来可能有点虚伪，我甚至不在乎学历一类的，毕竟走出学校去工作去科研，还要看真本事。人都有自己想干的和不想干的事，想做什么做什么，想给就给，不想给就不给。说到copy代码，最近看到个笑话挺有意思，大家笑一笑就好thx~,曾经我把我的最后他们成绩90+，80+，我却只有74分………………,回答有讲自己经历，讲自己的处理方式的，也有质疑舍友的关系的，这些都不是问题的关键关键是，题主问了这个问题，答案已经很明显了。这个问题不涉及编程、不涉及代码，也不涉及什么作业……大体上可以确定，题主犯上了取悦别人的毛病，即不敢说“不”如果你们几个的关系比较好，你说不让他抄，是不会伤害彼此之间的感情的，但是你拿捏不准，害怕伤害别人，如果我不给舍友抄，一个小小的作业，就让我们的感情散了，不值。造成不敢说“不”的原因，只有一个，那就是你高估了说出“不”后，对舍友的伤害。你拒绝给舍友抄代码，你觉得会伤害感情，舍友不会这么想的，在他眼中，这是小事，一两天后这件事可能就把它忘了，除非你们只是表面兄弟。当然，说不也是有艺术的。假如你告诉舍友：“是谁都会种想踢死你的冲动。最好的方法二十四个字：说出类似的话，我不相信会伤害你们之间的感情。还有，最重要的一点是，——以上是来自W3Cschool的回答。,"用rust写代码，我大一一直用的c,cpp写代码，主要也是课程要求，后面没有语言限制了，我就用rust完成我的大作业，因为这语言用的人比较少，老师看了肯定有印象，而且也不好改动，我的室友看了我代码一般都会知难而退，因为这种语言老师一般都会多问几句。",取决于你室友是什么样的程序员：改改variable的名字交了，结果查重99%重复，卒。：改variable名字，改代码结构，你用for loop，他写个while，你用：改variable名字，你用for loop，他写个lambda for each，你用boolean，他用int表示，你用equals，他写个comparator，你代码600行，他代码400行，你甚至一度怀疑自己是不是抄的他的。其实抄代码也是一门艺术，抄的是思路，不是语句。抄的好代码整洁度++，抄不好return重修。
有哪些让你目瞪口呆的 Bug ？,,关于考勤打卡的我们单位粗心的人事在系统里删除离职人员的时候不小心把我也删除了当了很长时间的黑户后来虽然又添加回来但饭卡，慰问品之类的总是出错，每次我都得解释一遍然后气急败坏的自己去单独领一份直到我发现我请假系统里不扣年假哈哈哈哈哈哈哈无限续杯,想起来以前有一年教大班，教到交通规则，红灯停绿灯行。班里有个小孩，总是记成红灯行绿灯停。一开始以为是故意的，后来发现不是，就算今天让他记住了红灯停绿灯行，明天他又会告诉你是红灯行绿灯停。又以为是不是色盲，但是他是分得清红绿的。我和主班老师都觉得很奇怪，别的小孩都能教会，这小孩虽然平时死板固执了点，也不至于都教不会一个红灯停绿灯行吧。然后主班老师就问他，你爸爸妈妈带你上幼儿园，带你回家，过马路的时候，是红灯走还是绿灯走呀？他:我爸爸妈妈一直都是红灯走的。我:6主班老师放学的时候还隐晦地提醒了小孩妈妈，说载小孩的话最好还是遵守交通规则，为了安全考虑也为了给小孩做个好榜样。他妈妈:有啊有啊我很遵守规则的！但是那小孩还是记不住，而且第二天问他，他妈妈还是红灯走的。做老师的也不能过多干涉家长的习惯，我们也就没有再说什么。后来有一天，我骑电瓶车载我闺蜜出去玩，到十字路口的时候，她说旁边的车都走了我咋不走。我没好气跟她说你看不到红灯嘛，没车也不能闯红灯！她说我看不到！你这么大只挡在前面我怎么看得到！然后我突然意识到，我班里那小孩，他爸爸妈妈是用自行车载他的，他坐在后座，确实是看不到正前方的红绿灯。他只能看到左右的红绿灯。所以当他正前方是红灯，左右就是绿灯，他就会以为他看到绿灯就得停着。当他正前方是绿灯，左右就是红灯，他就会以为，他看到红灯就代表可以通行。我不喜欢跟家长沟通，所以我把这个想法跟主班老师说，叫她去跟家长说。他妈妈听完也是恍然大悟，带着他走了一次十字路口，跟他说明白了红绿灯得看自己正前方的。最后这个困扰我俩大半个学期的bug就这么解决了。,魅族手机把sim卡名称改成“无sim卡”系统就会以为真的没有这张卡 直接断服务 且整张卡选项变为灰色 无法进行更改 重启也不行解决办法是把系统语言改成英文 因为这样会识别到卡名字叫做“无sim卡”而不是真的没有sim卡 ,一个老爷子卖酸奶三块一瓶，十块三瓶来个小伙子“大爷，来瓶酸奶！”“三块！”“大爷，再来一瓶！”“三块！”“大爷，再来一瓶！”“三块！”“大爷你看，我买了三瓶酸奶，才九块钱，所以你那个‘十块三瓶’算错了，买的越多应该越便宜才对！”“呵呵，每天都有你这样的来一下买三瓶！”,有，不过是店员目瞪口呆，而我稳如老狗。06年时候在福州，华莱士汉堡三个10元，两个7元，一个4.5元。有次晚上请同学去吃，我说先来四个汉堡。店员，“四个汉堡，14.5元。”我，“不是14吗？”店员，“三个10元，加一个4.5元，是14.5元啊。”我摆摆手，“不要三个加一个，我要两个，加两个。”店员，………………好了，可以点其他的了。,以前在一个小公司遇到的bug，一个只在阴雨天出现的bug，一个同事至今想起来还激动的拍轮椅测试环境的服务器是两台实体主机放在我旁边的桌子下面，生产环境用的某天前端开发人员反馈测试环境某些接口调不通，某些接口正常，经过排查，调不通的接口都在同一台测试机器。过去看发现机器居然关机了！我们很奇怪，周末办公室没有断过电，为什么机器会自动关机？重启大法解决了。然后这个问题谁都没放在心上，直到过了几天又出现了！这下开始慌了，是不是谁写的代码里有隐藏的bug导致了机器会关机？但是代码审查一直没有查到这样的代码，而且几个版本的迭代过程中生产环境从来没有过这样的问题而这个bug像个梦魇一样，隔那么几天就来一回，而且我们发现每次bug出现的时候都是阴雨天。老板下令一定要找出原因，不然每次新版本上线都胆战心惊，怕问题蔓延到生产环境于是我把两台服务器从桌子下拉出来摆在我脚边，就是要看看到底什么原因后来.............后来问题找到了，天气一冷坐我对面的家伙就把腿抬起来放到测试服务器主机上，那里出风口暖和不小心就把插头搞接触不良断电了我们把他腿打断之后这个问题再也没出现过,写代码的时候记得把显示器屏幕擦干净点。。。。。。                                -一个曾经被屏幕污点坑过的人(ノ=Д=)ノ┻━┻,有一次，上班时指头被a4纸划破，虽然伤口不大，还是挺疼就用创可贴把中指贴了一圈第二天早上起来打开一看，我去竟然完全愈合，毫无痕迹突然想起周星驰电影《功夫》里的练武奇才难道，我也是？就在我向同事吹嘘时他默默来了句你看你中指旁边的指头汗……贴错指头了,看好多人都在说IT的事儿，我也说一个，不匿了，不嫌丢人！！那是2008年，那时候的我...在公司主要负责数据中心这一块的项目实施和技术维护，日常比较拿手的就是服务器、存储、光纤交换机、Linux、坐标郑州，某个项目需要去一趟张掖，对，甘肃的张掖。那边的服务器有问题，我们做的项目，设备不到两年，掉电重启之后就是异常，卡死，进不了系统。这个地方时以前没去过的，很远，所以很兴奋。到了现场，确实蓝屏，各种操作都不行...其实这些不重要。然后，那天下午，就联系了厂商，嗯，给IBM售后打了电话..报了产品型号350和序列号...竟然查不到。然后，我报了公司名称和我的名字，公司毕竟大客户，我在IBM也有认证证书。服务态度很好，协助我排查问题，因为机房没外网，也只能电话沟通一项...按照要求，做了各种配件的更换（现场还有其他机器）就是不行...就算是重装系统，也是装不下去，一直折腾到第二天下午...问题已经升级到了很高的位置，有个很牛逼的工程师（因为他帮我解决了问题）说：我们慢慢来，一步一步来。到一步要进入RAID配置界面的时候，工程师说：按CTRL+H...我按了F8进了RAID界面，随口说：这个是按F8...然后那边沉默了会儿，幽幽的问我...兄弟，你看看服务器是IBM的吗？我愣了一下，然后低头看到了HP的标....当时...虽然隔着电话，我都能感受到对面那无语到透顶的语气...真的，当时真想死了算了...IBM有350这个型号，HP也有350这个型号....不知道怎么挂的电话，赶紧联系了HP，工程师几句话的事儿，解决问题。然后，我还没上火车，就接到了关系很好的公司商务（负责联系厂商、订货、培训、方案等等的部门）老总的电话，开头就是笑，然后问我：你找IBM了？我特么...明显的，IBM估计给她讲笑话了，我没说啥，直接挂了电话！第二年吧，参加IBM小机的一个会议...主持人在会议间隙，说讲个笑话...当然人家没点名，只是说甘肃的一个项目，某个资深工程师为难了IBM一整天，最后发现报修的机器是HP的...日了狗了！！,有评论说硬盘磁头防震，读取数据时拿着硬盘上下甩也没事儿。首先上下甩是低频外力冲击，和播放青藏高原时的高频声波不一样。其次硬盘外封装有减震作用，磁头也有防震设计，但甩硬盘还是有风险的。读写数据时磁头悬浮在硬盘盘片上的，磁头到盘片的距离是纳米级别，所以设计的防震级别也是有限的。------------再一次的分割线-------------有人问怎么解决问题的。就是把固定硬盘的螺丝紧了紧，固有频率改变，硬盘就不共振了。--------------原答案的分割线-------------听一个有用户反映每次用笔记本播放为了抓住这个bug，朋友听了一个月的青藏高原...,"        近读       读至此段，不禁哑然失笑，暗叹此书审校者不够精细，“万里”竟能误作“万瑞”。再翻几页，竟又有两处将“万里”误作“万瑞”，即本书“万里安能制夷狄”都写作了“万瑞安能制夷狄”。       我不禁大疑，《诗论红楼梦》、《桃李集》此句均转引自《红楼梦》，莫非是《红楼梦》的抄胥或印刷工匠笔误将“万里”误作“万瑞”？如此多的书论都出现“万瑞”，难道说此耳熟能详之句，尚有作“万瑞安能制夷狄”的其他版本吗？但如作“万瑞安能制夷狄”，那“万瑞”又是何意？     经评论提示，要避免此错误，只需在使用WORD做繁简转换时，将“转换常用词汇”勾选项取消即可。       结合评论区的指示，检索下，发现出现这种繁简转换错误的实在不少：       1、“海内存知己”简体转繁体变为“海記憶體知己”。百度搜索“海記憶體知己”足有14,200个结果。       2、“終南捷徑”繁体转简体变为“终南快捷方式”。这个错误太常见了，出现“             方勇《庄子鉴赏辞典》上海辞书出版社2010年版：“这种宛若     刘金柱主编《纪晓岚全集》大象出版社2019年版。乾隆上谕“徒以四库书馆，开幸进之阶，为终南快捷方式，又岂可不防微杜渐耶？”      3、“巨集”繁体转简体变为“宏”，这导致很多帖子把“李彦宏”写为“李彦巨集”，百度一搜“       4、“雪梨”繁体转简体变为“悉尼”，导致很多帖子把“冰糖雪梨”写为“冰糖悉尼”，百度搜“冰糖悉尼”相关结果有很多，内容读起来颇为搞笑：“川贝冰糖悉尼热量不高”、“悉尼和苹果去皮后切开”、“冰糖悉尼可以清热止渴”等等。       5、“引數”繁体转简体变为“自变量”，导致很多网页文字版的《三国演义》会出错，出现很多“遂自变量骑下山坡来”，“便自自变量百骑赶来”，“凌统自变量千军马”之类。审校不细的书籍也会犯这种错误。       廖彦博编       6、“陣列”繁体转简体变为“数组”，因此不少帖子和书籍会将九字真言“临兵斗者皆阵列在前”误作“临兵斗者皆数组在前”。      李丰楙著      王题著       7、“豈曰無衣，與子同袍”繁体转简体变为“       2015年华东师范大学艺术研究所编",那年在淘宝买笛子，商家送了个陶笛，大概长这样：娃上小学，笛子半天吹不响，这玩意儿就没这烦恼，于是开心地玩起来。我上班时她得意地打来电话，说已经学会了2句，要吹给我听。  商家送的谱是“这是碰到本专业的bug了啊，我兴趣来了。 拉着娃一遍遍试验。最终发现吹到“惹人醉”那个“惹”，电话必断。 见了鬼了！坐在那儿分析：这是全曲第一次碰到“6”这个音，看来信道中某个设备对这个频率敏感，误检成了特殊的DTMF信号，触发挂断。 我的手机是广东联通，娃是湖北移动，经过的关口有点复杂。 我让娃打给她妈妈的同是湖北移动的号，果然没这个问题。,,其实不算Bug二十年前，某地电信局，一路光纤时断时续，因刚刚换过光路板，怀疑是新板子问题，各种检查、换板子均无果。于是挂表查断点，开车上路到断点，发现线杆老化倒地，光缆被野狗咬开外皮，光纤未断，却缠住了狗嘴，狗嘴一张一合，光路断断续续。史称“狗咬光纤”事件。,政治敏感？,在国内上大学的应该都知道有个校园套餐我办的移动的，套餐里有50G校园内使用流量还有1.5G国内流量。BUG就是我在学校里上网，他却扣我国内流量，还记得是今年中秋节前，国内流量给我扣完了，实际上那半个月我都没出学校。我就在宿舍坐着他还在扣，发短信了，超出流量5rmb我就给10086打电话跟她说了半天，她说：我们没有权限给你补话费，等后台给您处理。过了半天后台来电客服：您好五块钱已经给您补上了我：这半天他又扣了我五块钱，我一直在学校没出去，还在一直扣我钱，我校园流量还有40G没用呢。客服：不好意思呢先生，退款每六个月只能申请一次哦。我：我也不缺你那几块钱，可是问题你要给我解决啊、1.马上中秋节我要回家，你能把误扣的国内流量补给我吗？难道让我用三毛钱一兆的流量？2.而且为什么半年只能申请一次退款，这明显是你们的失误啊。客服：不好意思我们也没有办法 你们牛逼移动真牛逼，无赖公司，你当爸爸就这样不管了？果断登陆中国工信部投诉一开始点投诉网页不会加载我就很奇怪，为什么工信部网页能打开，这投诉界面就加载不出来真相就是：他怕你投诉，所以你用移动网络无法登陆工信部投诉呵呵老子有vpn我挂了个香港的vpn，立马能投诉了然后填写投诉信息—提交第二天早上移动公司客服给我打电话客服：您好先生balabalabalabla，我们赔钱，求您撤诉（大概这个意思反正）我：可惜你们半年只能退款一次诶，我都被误扣三十多块啦客服：会如数补给您之后呢她赔给我一共70块其实这些公司真的贱明明自己的问题，非要推给客户非要爸爸们举报你你才老实,我高中同桌，上了本地一所理工大学。大一新生入学，发现宿舍没有插座。一群学理工的男生能忍吗？当即分工合作，从日光灯的线上引了一根线出来搞成插座。搞定以后集体欢呼握手。昂首四顾。热血澎湃。随即发现墙边的插座。,猜测，可能对象没初始化。,在10年前左右，不知道大家有没有看过一个广告：数码圈的朋友都知道，这种家教机本质上就是换皮的安卓平板，系统是安卓4.1，这款机器的系统是高度定制化的，不能安装自带应用商城内以外的apk，自带的应用商城内的app少的可怜，绝大部分的都是学习软件，游戏也是有的，只不过都是诸如：经典五子棋，中国象棋一类的，当时流行的我的世界，天天酷跑，想都别想没办法，很多方法我都试过，那款机器是可以插内存卡的，就是那种小的tf卡，我在别人家电脑上下载了apk，然后用tf卡安装也不行，显示无法安装，请到应用商城安装。最绝的是有一次，机器的储存几乎满了，应用商城下载的一个应用没安装上，提示空间不够，然后apk保留在机器内了，本来也没在意，后来翻文件管理器的时候被我找到了，最最绝的来了，就是有那么一个灵感突然蹦出来了，简单来说就是狸猫换太子，那真把我激动的跟周围小伙伴炫耀好久（那时候是住在城中村的小平房，小伙伴挺多的），显然他们听不懂我在炫耀哪个点，反正知道了我的那个学习平板可以打游戏了。后来我用同样的方法下载了一些别的app，然后装上了第三方的浏览器，学会了上百度（自带的浏览器只能上官方给的几个网站，上不了百度），发现百度上也有其他人发了破解教程，破解过程跟我的方法差不多，不过更方便一点，就是直接安装个总之，即使10年后的今天回想起当时破解成功那激动的心情，还是很有感触，如今玩数码圈，还是得感谢那个机器带我入坑。————————分割线——————根据评论区网友的提醒，以上提到的“包名”为表述错误，替换为“文件名”。,说说我做Android系统遇到的一个bug。测试妹子提了一个bug，说她在午休的时候看手机，屏幕亮度有时候会突然变亮或变暗。我查看了log，没有特别的异常，亮度确实是变化了。午休的时候，我们是关灯的，光线比较暗，难道这个时候手机的亮度自动调节会有bug?  我把手机放到桌子下面黑暗的地方，抓取log，查看亮度，没有大的波动啊。但妹子却表示这个问题她很容易复现。于是我决定找妹子当面聊聊。这是一个萌妹子，眉清目秀的，眼睛大大的，戴着一副圆框眼镜，微微泛着青光。在妹子描述她的测试过程的时候，我一直望着妹子美丽的面孔，不知道妹子有没有男朋友呢，妹子都有些害羞了，转过头去，突然间，我兴奋了，对妹子说，你转过来，让我看看，妹子惊愕的看着我。我继续说，你的眼镜反光。答案确实如此，眼镜反光，
现实中程序员是怎样飞快敲代码的？,哪些场景你最顺手、最烦躁、飞快敲代码最喜欢干啥，最烦啥？,当你看到一个程序员的两只手在键盘上上下翻飞，行云流水的时候，多半不是在敲击代码，大概率是在跟产品经理撕逼讨论需求另一种可能就是在跟测试打口水仗10%几率是在论坛码字摸鱼1%几率是在跟MM聊天可以手速飞快而不需要停下思考的代码，多半也可以靠Ctrl + C/V 搞定。而当你看到程序员双目呆滞，遥望天际的时候，多半编程开始了——————————————6月7日更新没想到随手写的段子竟然戳中了这么多人的心。感觉就像随手划了根火柴，却炸翻了整座山头既然这样，那我就多说点儿。每逢项目之初，我们飞速写下的每行代码，都宛如每个变量都宛如慈父膝下的爱子，名正言顺感觉每一处精心设计的逻辑，都是一段完美的乐章，应在维也纳的金色大厅永久传唱每一段完美实现的逻辑代码块，都应该镌刻在石碑上，供后辈顶礼膜拜就在你得意之际，更新一段“ int aa = 0;”莫名出现在你的代码里，这感觉仿佛是石碑上被油漆笔歪歪扭扭喷上了“XXX到此一游，嘿嘿嘿”一个不孝忤逆的逆子，让你血压飙升，头发尽断满屏的诗和远方，瞬间成了眼前的苟且—————————9月29日更新随着窗外街灯的亮起，夜谦卑地跪在你的面前，奉你为此间的主人，双手呈上久违的宁静你其实并不喜欢加班，但却有些享受在办公室独处的感觉。日间的嘈杂、突如其来的会议、打断思路的问题让你无法集中精神反而是现在，除了和空调百叶偶尔发出的咔哒声，周围一片，万籁俱寂。你伸了伸懒腰，略微活动了下手指，戴上耳机，颠了颠手边略沉的快乐水，一切准备就绪。空灵的音乐带来无比的专注，专注的力量令你灵感迸发，敏捷的思维仿佛是疾走的奔雷，划破厚重的迷雾，整段代码原本错综复杂的逻辑，被瞬间照亮，清晰无比。在这一刻，你是无比自信的，思路没有丝毫的滞塞，指尖在键盘丛中飞速游走，轻盈弹跳，整块代码一气呵成，逻辑完整得就像整除一样干净利落，没有丝毫得拖沓。用户的每一步操作、每一处错误，都在你的意料之中，你就像是循循善诱的牧羊人，指引着迷途的羔羊，重返阳光大道。用户仿佛是你座下的子民，按照你预定的轨迹，徐徐前进。而你，此时此刻，便是此间无可争议的王。......一个电话突然打了进来：“先生，您的筒骨粉到了，给您放到楼下门卫那了，祝您用餐愉快！”“好的，我下去拿。”你将剩下的快乐水一饮而尽，空易拉罐被捏成一个小蛮腰，划过一道完美的弧线，落入垃圾桶中。你胡乱地踏了双人字拖，渐渐消失在昏暗的走廊尽头，唯有油亮的脑门和门禁的荧光绿，在黑暗中若隐若现，遥相呼应。,我来回答一下吧，一天7.5个工作小时。1.早上九点到公司，打开手机看会儿新闻，朋友圈。2.开始进入工作状态，看哈需求有没坑，再构思一下怎么写会好点。3.开始vc大法，找找以前的代码，copy一下，看一下能不能运行。如果没有，差不多就自己写，开发工具也很智能，给出提示，自动补全类。如果没搞过的，百度一下，看看别人怎么写的，能拷贝就拷贝。4.大约10.30左右，休息一会儿，喜欢抽烟的就去抽烟，不喜欢抽烟就刷一会儿朋友圈，讨论一下中午吃什么。5.这时候差不多11.30了，停下工作，准备吃饭了！6.中午吃完饭肯定是要睡一下，13.30开始工作，这种状态能持续到15.00左右。7.休息半个小时或者一个小时，聊天，抽烟，刷朋友圈。8.差不多16.00到17.30再次进入工作状态。9.准备下班了！ps整个开发过程内心是这样的傻逼客户，提的垃圾需求傻逼项目经理，做的垃圾计划傻逼产品经理，做的垃圾需求，看不懂傻逼测试，不会测试，乱点傻逼同事，写的垃圾代码傻逼架构，搞的垃圾架构傻逼百度，找不到查不到想要的问题众人：傻逼开发！,直接上视频，看看现实中程序员和想象中的程序员敲代码有何不同！是不是发现自己生活被偷窥（手动滑稽现实中，很多程序员更熟练运用 Ctrl/Command + C 和 Ctrl/Command + V。拿到一个需求，先搜有没有轮子，能直接用，绝对不自己写。能通过改改改就能用，绝对不自己写。当然，如果他写的烂，我还是会嘲讽一波，然后自己写个更好的（手动傲娇我们签约经验丰富的程序员，采用线上开发、驻场工作、招聘猎头等方式，帮科技企业解决软件开发和技术用人难题，为程序员提供新式工作机会。程序员客栈的使命是为程序员服务，当好程序员的经纪人，布道先进技术。,飞快敲代码？不怕秒得一天也就是100-200行代码，加上IDE的各种神奇自动补全功能，能敲几次键盘？如果我听到我的组员在飞快的敲键盘，我都不要站起来看，就知道他们在撩妹，不会干别的，一定是在撩妹。【此处有神秘的微笑】,先上图拿图的请自觉点赞10点前一秒赶到公司打卡范围钉钉一下慢悠悠挤电梯，上楼，放包，摆正电脑下楼买个包子或煎饼或灌饼，顺便带一杯咖啡或脉动或气泡水吃完早点10点30啦，然后打开文档编辑器浏览器等乱七八糟然后开始刷微博刷知乎刷微信刷一切或者去论坛啊社区啊指点江山围观热点刷到11点，看看领导状态如果盯着我或者来姨妈，就放下手机回忆回忆昨天的进度如果开会或者春风满面，继续刷刷刷反正上午是不可能敲代码的除非到了deadline11点半到45之间开始幻想中午吃啥11点45开始12点准时拉上小伙伴抢电梯12点45或13点基本吃完饭又回到工位趴着简单刷下消息，然后开始睡觉睡到14点到14点30（看有没有人催）然后倒杯水，看状态迷迷糊糊到15点或15点半开始正式敲代码 敲到18点，下楼吃饭，不饿就下楼散步19点上楼继续敲代码，或者开始搞点新技术什么的基本上没有需求就是自己玩奇奇怪怪的东西 敲到17点，周一评审会，周四研讨会，周五定审会开会大约到18点30，然后下楼吃饭19点多点上楼，敲代码，或者开始搞点新技术什么的或者继续开会然后到21点看情况加班，比如上线或开会或挨批或批人下班以后10分钟走路到家（住的比较近）或者磨叽到10点就打车去远处朋友家彻夜撸串，或者去夜生活什么的带薪抽烟一天大概五六次的样子，一般10-15分钟，可混时间约1小时带薪拉屎基本上还是要分情况的，小号才是真的个人需求，大号都是混时间，正常人哪有那么多屎。。。大号20分钟起步吧，大概2次左右，连带着小号又是1个小时过去了基本上每天就是下午那两三个小时加上晚上一个小时，这是10 9 5工作制度10 7 5工作也差不多，只不过下午就纯敲代码，19点下班，正经工作时间差不多，但是思维比较连贯，效率稍高一点而且因为没有晚饭时间，所以加班都很急，赶紧干完赶紧走，反正没有补贴，磨叽到10点要三个小时，实在难熬，所以基本没有打过车。。。但是需求来了就真的急，往死里逼那种晚上回家熬夜继续敲，周末在家自己想办法搞定，高铁飞机继续敲紧急情况一个电话打过来，地铁上开个热点就是干所以电脑随身带，有事没事都得背个包有些复杂需求随便搞搞就到了23点了但是23点打车，显示排队50位+。。。,不，荧幕上电脑高手的原型，并不是现实中的电脑高手，而是作家本人。只有作家才需要噼里啪啦的敲键盘，这样才能让输入速度赶上他的思维。而编程语言的信息含量要远高于自然语言，所以不管是读、还是写，都远比自然语言要慢。所以初学编程，千万不要因为自己无法“流畅阅读”代码而自卑，谁都办不到的。,————没想到这么多赞，那就补充几个具体的案例吧。——————某些跟数据库有关的项目，CV大法比自己敲快很多，也少出错。很多时候有很多字段，因此写增删改查的时候。往往是想把一个表的字段拷贝到注释的地方然后一个个剪切或者拷贝粘贴弄到相关的代码里。这样比自己敲，更不容易出错。————一些算法要求比较高的项目，但是在而具体操作就是像素级别的改写，具体操作是一个一个函数拷贝过去，慢慢改语法规则。——最后，现实中程序员能飞快的敲代码是一个流传很广的谣言。事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。这个谣言跟一些谣言有得一拼，如：,买过编程类图书的人应该都知道O‘REILLY的大名，这个系列的图书封面辨识度很高，标题之外通常会配有一个手绘的动物形象，比如这样:有网友制作了一个O‘REILLY封面于是就有了以下的作品，调侃了现实中程序员的工作状态：「Copying and Pasting from Stack Overflow」「从Stack Overflow粘贴复制」「Trying Stuff Until it Works」「不断尝试直到成功为止」「Changing Stuff and Seeing What Happens」「改变一些代码看看会发生什么」「Googling the Error Message」「搜索错误代码」生成器链接：国内网友制作的版本（支持中文）：,Google在职程序员，坐标硅谷。写代码的时候，我有相当一部分时间在【Ctrl+C】+【Ctrl+V】。Google internal IDE Cider-V的AI插件会随后自动猜测出我大概要写什么代码，然后自动填写大致内容。之后，我会扫一遍代码，确保没有逻辑错误，并且进行调优。我的大部分时间其实花在并不限于：如果我以180迈的速度飞快打字，那只有三件事：最后给大家欣赏一下我的工作专用更多文章，请关注我的专栏：,一定要用机械键盘，因为声音大，要干就干得轰轰烈烈，让全世界都知道你每天8小时都在写代码；一定要用vim，因为快捷键多，可以增加按键次数，让别人听起来你一直没停；按回车键的时候一定要最用力，让别人知道你这么快又写了一行；按删除键不要太用力，否则别人会认为你老在写没用的代码；一定要戴上耳机，因为别人说你太吵你可以假装听不见。再补充一个，就像评论里面很多人同意的那样，机械键盘要选青轴，,Google研究过，一个程序员一天能够写出的高质量代码也就是100-200行。哪里需要飞快的敲键盘。像程序员工作的本质是用程序来解决问题。程序员大部分的时间还是用在寻找解决方案，测试验证方案。用在敲打码上的时间很少。如果你看到程序员在飞快的敲代码，那多半是在和PM撕逼，或者写文档。,自己剪辑的视频里面有一段就很好的诠释这个问题。代码从没飞快过，只有我们被气的飞天。写代码总共有两种情况1、一动不动的呆着，想了半天，哦，要这样，然后一个一个的打出来，速度慢的旁边人看着都急。一般逻辑性强的人，打得非常慢，也非常稳，飞快是不存在的。2、复制粘贴小修改，开会撕逼再吃饭。程序员不会追求飞快，那样是无意义的，要追求的是思路清晰，码字沉稳，中间不会被产品、运营、实习生等一系列问题打断。一个人安静独处时多么重要，就跟程序员的电脑，下班后从不会关机一样。而现实中想更快速更沉稳的敲代码，只可能多练，多敲，多看项目，在自己脑子里形成事件线路。就跟我们要多刷题是一样的道理。来来来，赶快把下面小项目都收藏了，让手速，快人一步。 资料链接： 配套资料： 配套资料： 配套资料： 配套资料： 配套资料：配套资料：配套资料： 配套资料：   点赞数上升有点快啊，那就五个视频都给链接吧。,呵呵，不要被电影骗了，就算是黑客，也用不着噼里啪啦没完没了地敲键盘。剧情有趣还表现真实（仅指操作计算机）的黑客类电影我安利《防火墙》（主演:而程序员是不是抢票都要写代码？这得说说为什么要写代码了，写代码的目的就是把流程描述出来，然后嘛，让机器替代你不厌其烦的、没完没了的执行呗。所以，抢个票为啥要边写代码边抢呢？写个 JS 让他不厌其烦的替你点呀点呗，至于程序员，喝杯茶听听歌，等着唱“在那山的那边、海的那边有一群……”。围观一下最早的作者。当然了，现在都被收编了，铁老大也松口开始开放更多接口创收，抢票插件/软件也都不再那么没个正经了。现实中敲得快不快，别人我不知道，至少我敲了一二十年，肯定没此刻打字快；敲 10 分钟休息 1 小时，挠挠头、喝喝茶、吵吵架，基本上就这个样子。关于敲代码快不快有个悖论：如果对一个问题很熟悉能连续的敲代码完成这个任务，那么我为什么要重复地、不停地敲呢？把它封装好下次直接调用/设置不就行了？所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。,电视剧看多了吧。程序员更多的还是脑力劳动，而一些影视作品里那样霹雳哗啦的敲键盘的是真正的体力劳动。上海堡垒中操作无人机手指都没接触到键盘，一大堆代码就噼里啪啦出来了，你也敢信？先说下我前天的工作：9点起床，洗漱；9:10分开车到公司；9:30到会议室开会；11:20会议结束，去泡壶枸杞菊花茶；11:30处理邮件，打开聊天工具看下消息；12点打开IDE，准备写代码。突然惊奇听到同事喊吃饭。13点午休；14点起床，上个厕所先；14:10分回座位的路上巧遇产品经理，一起顺便讨论个需求；14:50服务器同学说对下技术方案；15:30测试同学问这个需求怎么测，一起过下用例；16点参加隔壁小王同学代码评审；17:30回到座位上，旁边的同学问这个技术难题怎么解决，去帮他分析问题；18点以为终于可以敲代码了，却又惊奇发现到饭点了，先去跑个步；19点跑步结束，到家了，吃晚饭；19:30去公司；20点再开个会；21:30写个周报月报总结专利啥的；22点终于顺利打开IDE准备干活，leader丢个bug过来，这个问题你先看下，和测试沟通怎么复现，然后看代码；23:30夜深人静，终于可以敲代码了……在敲代码的过程可以很快，可以基本上不停，但是在实际工作中占比很少。因为前期杂事比较多，会议多，沟通多，讨论多。有产品经理，有测试工程师，有PM，有设计师，还有leader，有bug。在编程过程中，脑子中思考的是各种各样的逻辑和架构，注重先思后写。在开发一个较复杂的程序前，会经历很多步骤，比如画流程图，写文档，画架构图等等，而真正的编码则是在一切都想清楚以后才会开始进行的。甚至，高级程序员可以使用编辑器和IDE的自动完成功能，避免手动输入代码的错误。除了intellisense之外，还有很多其他自动完成功能可以同时启用。比如自动完成行，自动完成文件路径，搜索所有打开的文件自动完成词等等。某些程序员不用这些功能并不等于它们不存在或者不重要。所以程序员总是在面对新的问题，这也就是为什么大家说敲代码时间不长的原因，查资料、讨论、调试才是真正要花时间的。练成熟练而快速的敲击并不是一件很难的事情，也许不到半年就能练成，但是能够编写出低耦合高效能的代码却是一个程序员毕生的追求。事实上大部分程序员敲代码的速度远小于文员敲键盘的速度，或者是打字员敲键盘的速度。所以别被电影中的那些镜头给欺骗了。理想很丰满，现实很残酷，同志们还需多多努力。,这几点：这次我真的凑不到7了:-),我为什么想当程序员？就是因为太懒了，同一件事干多了就干不下去。所以我要用编程语言告诉蠢萌的电脑，遇到A情况应该怎么做，遇到B情况应该怎么处理。然后让它一遍又一遍地重复我不想做的事情。所以思考的时间至少是输入时间的3倍，跟写文章差不多。敲代码也是一阵儿一阵儿的。--------以上是理想情况，现(zheng)实(qian)的情况是：我就是甲方的翻译，他需要什么功能我翻译给电脑。然而很多甲方并不知道自己需要什么功能，然后电脑干的不对还要甩锅给我。,看到这个题目就猜到高赞那个视频会出现，我也知道关心这个问题的人都不是现实中的程序员。真正的程序员必须明白一个道理，程序的灵魂是可复制性。可复制性也是软件开发区别于其他行业的最显著特点。可复制性有两层含义。一层是说代码客户有多个实例在运行，同样的程序可以在你的电脑上跑，也可以在别人的电脑上跑。另一侧含义就是代码可以开源，大部分通用需求都有开源代码可以用。一个程序跑起来所需要的代码，绝大部分都是别人写的，即使是一个“Hello World！”。程序员敲代码速度多块，都比不上找到合适的开源代码快。当你要实现一个需求的时候(例如解析一个Excel文件)，如果完全自己实现这个功能，敲代码再快也不如找到一个合适的所以，上面这步非常重要，找到适合自己的开源库、框架、组件，是快速高效开发一个软件的前提条件。然后才是敲键盘，当然还有Ctrl C/V。记得很早以前，刚毕业的时候吧，有一次去王府井外文书店。书店里正在播放一个英文听力VCD，场景是在森林里父亲教孩子打猎。父子俩藏在草丛里，动物出现了，孩子比较慌张。父亲在儿子耳边说了三句话：First，listen。Second，think。Third，Action！我觉得短短这几个词组成的三句话非常有用，特别适合现实中的程序员们。首先，要听。听什么？做项目，听用户的声音。做产品，听产品经理的讲解。了解需求，知道真正的需求是要做什么。否则，干活不由东，累死都无功(我初三班主任经常说这句话)。然后，要想。想什么？如何能够高质量、高效率的实现功能。这其中就包括上面提到的常见通用功能如何找到可靠的开源代码。最后，才是行动。这一步才是编码。如果没有上面两步就开始编码，上午敲得多快，下午删的更快。其实，现实中的程序员，一项核心能力要求就是：,最近，国外有个叫 Mckay 的开发者，基于 它可以通过语音对话，自动帮你生成代码，并将代码推送到 GitHub，部署至 Vercel。就想钢铁侠电影里的贾维斯一样，自动帮你搞定一切！此外，里面还提到了一款名为 CodeWand 的工具，它能通过自然语言，结合 GPT-4 来快速开发应用。不过目前还在内测，需要申请才能试用。最近几天，我接收到的 GPT 和 ChatGPT 相关内容比较多。为了方便自己后续学习与阅读，我整理了一下 ChatGPT 玩法技巧和实用工具，最终弄成了这么一本《手册地址：文末，照旧安利一波我们的公众号：,你如果听到同事键盘噼里啪啦，手速飞快，大概率是在聊天打字，记笔记，写文档等！编程功底再深，写代码也是需要思考的！教学视频里老师编码那都是敲了无数遍的结果,短答案：敲代码的过程很快，可以基本上不停，但是在实际工作中占比很少。因为前期工作很多、很多。首先大佬会提出一个 idea，假设从 lead 这个 idea 开始。这时候基本上大多数时间都是在读代码库、看之前的相关 bug、写文档以及和各个相关的人讨论、调研。把详细的设计、工时以及 milestone 都搞出来。拿到划分好的模块之后，这期间就可以开始构思怎么实现了。有必要的话我一般还会写一个小小的 demo。主要是思考过程居多，敲代码实际上很少。一般会考虑参考资料：我的回答 这些都搞好之后，就要开始敲代码了。如果一天 8 小时算，可能平均正式敲代码的时间最多只有 1-2 小时。其他的时间全部基本都在准备编程。在这 1-2 小时内，编程基本上很快，就像代码已经提前打印在脑海里一样，直接往外冒即可。如果途中遇到卡壳，一般是搜索，看看常规的解法。Stack Overflow 肯定是必须要参考的网站之一。所以到真正敲代码环节实际上是非常迅速的，只可惜大部分时候我（们）都没有在敲代码。
你的编程能力从什么时候开始突飞猛进？,,你就明白：它也许有用，但它封印了你精进计算机英语的机会。你就明白：各地大佬们的文章很Nice，但它们仅是你技术知识体系的精华补充。你就明白：你以往东拼西凑几十篇烂文才明白的事，书上那几页纸都写着，而且详细的很。你就明白：那些烂大街的21天宝典，7周速成，都是些什么玩意，误人子弟！图灵牛逼，动物牛逼，Manning牛逼。你就明白：技术是一环扣一环的，有牢固的技术知识体系，学啥都事半功倍。你就明白：所学的技术该用在哪。你就明白：光会用技术，和用好技术是两码子事。你就明白：原来工作摸鱼不是梦。你就明白：某天需求一变，它兼顾不到，可以把你往死里坑，坑到你得去看源码。你就明白：开始还是很讨厌的，等全盘搞明白了，发现“咦~有点意思”。你就明白：自己的再往后，或许你的技术确实突飞猛进了，然而你却只会觉得编程本来就是这个样子的。突然获得这么多支持，十分感谢大家。知乎就是师兄的心得记事本，喜欢的可以「卫星｜ktshixiong，深度职业规划＋」一、新手进阶，可看《篇幅短小，示例经典，讲解细致。最重要的是新手读起来不费力，可以作为长久阅读的床头书，开卷必有益。帮助你学会如何写出有层次的好代码，让你在工作中赢在细节，更容易获得有实力的前辈的认可，职业发展更轻松。二、寻求职业长久发展，可看偏重于讲述编程哲学，几乎无代码阅读成本，笔者像一位睿智的导师，以亦师亦友的口吻，有条有理地为你分析各种项目问题，分享各种工程与人的权衡，还有可靠的处理准则，有志于在编程事业上长久发展的朋友推荐阅读，可以少走很多弯路。主要是打开你规划工程的格局，次要是积累行业谈资，一石二鸟就是全书都是优点，UNIX作为经典中的经典，它的设计理念，基础功能的实现方案，都是值得熟透于心中的，无论往后有多少新系统，最底层的东西都是大同小异。书的内容量大，适合长年小口啃。打牢基本功，基本功是你技术高度的基石，永远要记住这一点。此外，不要局限于自己是什么IT岗，只要能帮助你积累优秀的技术思维，好资料再多也不嫌多，职业路走宽了，在IT行业，你什么时候都能走得雄赳赳气昂昂。→ （持续更新）→ → → （带过 10 来位新人入行的经验）→ → →→ → → 最后，还是万分感谢大家的支持^_^。 ,update:评论区很多学弟学妹要求整理一个学习路线，刚写了篇文章：从小白到后端工程师的自学之路 - MutexLock的文章 - 知乎 ---------------在啃掉一本本计算机经典书籍和写下大量代码以后。疫情原因回不去学校，作为一个马上毕业，即将入职腾讯的大四生，分享一下自己的学习历程吧。本人在大学之前从未接触过编程，最开始的编程学习还是在高考完后，从书店买了本大一上的时候，来到了华中师范大学，还没有转专业到计算机，一直在自学C语言和看一些计算机入门书籍（编码、大一下，转专业到计算机了，开始自学数据结构，算法和C++，部分看完了 数据结构与算法分析，并且把书上的数据结构实现了一遍，记得当时五月份给自己的flag是看完大一暑假，txr大佬 大二上，十月，忐忑迎来了大二下，这个学期是打下计算机知识基础的关键时期。从知乎找了一系列书单，看完了CSAPP（做了lab，为了bomb lab还通宵了，强迫症想让自己把炸弹都拆了）、半本算法导论、大二暑假和大三上也一直为这个目标奋斗，补上了APUE、部分UNP、深度探索C++对象模型、STL源码剖析、操作系统概念、操作系统真象还原、Linux时间到了12月份，9号楼某个自习室内，txr大佬一直鼓励我去投简历找实习，本来我一直畏畏缩缩，对自己不太有信心，被鼓励后想着投就投吧。当时投了字节跳动和大三下，基本都是在实习，学习了很多工程实践上的东西，接触了go的技术栈，并且对大三暑假，腾讯实习了两个月，开始学习最后，顺利拿到了腾讯转正和字节跳动的秋招offer，两家都给的比较高，选择了工作体验更喜欢的腾讯哈哈。总的来说，学习计算机是需要积累的，花一两年时间啃下那些厚厚的经典书籍后，才能构建自己的知识体系，然后阅读大量优秀源码，做一些有趣的项目，编程能力就能突飞猛进啦。现在回头来看，大学时光真是如此宝贵，这是人生中为数不多可以静心学习的一段时间，可以不用考虑任何其他事情，每天学习十多个小时。部分藏书：,大概……是为了追女生而写了一个游戏的时候吧。大概七年前，我为了追一个女生，以她和我为主角写了一个战棋类RPG游戏（其实还做了很多别的事情hhhhh），灵感来源于小时候玩的世嘉版《水浒传》。故事的背景是我大学，游戏名字叫做《我一直都觉得，在大学，生产力的来源主要有两件事情：这个游戏有对话系统：有战斗系统：有职业/升级/转职/职业相克系统：有角色属性、物品、存档系统：有剧情：有作战系统和敌人的AI：故事的背景是我的大学，这是中心食堂和足球场：我甚至还在综合楼的自动售货机上做了一个物品买卖系统：这个游戏大概不到一万行Qt代码，没有用任何的框架和引擎，现在看来相当原始，所有的移动和动画效果都是用Qt的定时器+一堆if/else判断徒手撸出来的（当时不知道更好的办法，就这么一根筋地写了几个月）。我自己的感觉是，写代码超过5000行的时候，自己的能力会有一个飞跃——以前从没有注意过的东西开始觉得费解，从而逼迫自己思考和学习，然后进步。在我参加校招的时候，这个游戏的代码量占我当时的代码量的差不多一半……现在回想起来，我校招能进阿里，这个游戏带来的能力提升功不可没。这个游戏没有最终完成，也从未发布，静静地在我的硬盘里躺了七年。四年前我跟游戏设定的女主角结婚了。这周二我无意中看到它，拿到现在的机器上重新编译通过。在吃晚饭的时候，我问她：“你知道我当时给你写了个游戏么？“她说：“不知道啊”。代码在这里（我知道它很烂），遵守WhatTheFuckPublicLicense，随便修改：最后放几个全地图的场景，如果你和我是一个学校的，会觉得相当亲切。不过，大部分的地图都不是我做的，我自己做了中心食堂、综合楼、研教楼、校医院、一馆五个场景的室内地图。评论区炸出了很多同道中人： 说：@ Authur  说（at找不到这位老哥，刚刚at错一次）：如果赞能破万的话我就把可以运行的二进制版本release到,大学时浑水摸鱼，毕业后大约半年，在网络上寻找自学资料时，发现了GitHub和一些包括购买了梯子，独自啃下两套纯英文官方文档，在GitHub上友好亲切的交流，刷题，看最新的软件工程实践书，等等===========更新2：===========一些人问我是在这里看的：其他的我不知道=========== 更新 ============断断续续的收到一些赞，写一些可能对大家有帮助的东西吧：1、提高知识最好的途径是读书，包括但不限于计算机四大名著2、3、4、善用搜索引擎（专指Google），最好能把自己最常用的工具的官方文档啃一遍。主要是习惯英文文档的表达方式+系统的认识自己所用的工具，对自己写文档也是有很多帮助的。5、因个人有长期的抑郁经历，所以对心理方面关注得也比较多，十分推荐学习《哈弗大学幸福课》。这门课的综合内容十分丰富，实践性很强，能够有效的提高生活、职场中的软技能（沟通能力、抗压能力等）（这门课另外一个很厉害的地方在于，仅仅是上课的方式，也能提高你的逻辑思维能力，毕竟据说是哈弗学生选修最多的课，课程质量极其的高）。6、有一个我自己打算做但实践得还不太好得地方：看经典7、最近在坚持做8、关于职业规划这种事情，我以前是没有的（主要还是抑郁+低自尊影响的吧）。现在获取的信息太多太多，没有职业规划很容易被带偏。我是在做了长期的心理咨询+《哈弗大学幸福课》，工作、生活上都有一些经历了之后才慢慢想清楚自己将来的生活与工作要怎么打算。这种事情想清楚过后，做自己想做的事情目标会比较清晰，不会得过且过。感谢阅读，祝好。,"学了OO, 熟悉了“设计模式”, 领悟了看学了, 当我开始去看分布式系统算法, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维,  项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人,  甚至开始关心组内的技术文化建设;这是因为“编程是最重要也是最不重要的事”以上引用出自我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个""",回顾一下，我的技术能力（不仅仅是编程，而是1. 刚入行时的入门练习题这个是当年入厂之前我在Linux上没有写过代码。两天时间从Linux基本命令的熟悉，vim gcc gdb的使用学习，从这两天把我四年本科三年研究生没搞扎实的工程基础全部补上了。结论:有目的的练习，尤其是一个完整的应用问题的解决，是学习的不二法门。2. 接手一个完整的模块（子系统）搞完入门练习，leader过来跟我说：小胡，现在有一个重要的模块交给你，赶紧熟悉一下，然后完成如下功能升级。这个模块是前厂存储网页的核心模块，在当年内存4g的奔腾主机上单机存储几千万网页，几台机器存下了当时整个中文互联网。支持高性能的随机存取和顺序读，可以说把机器性能压榨到了极致。3w行，纯C。啃了几天终于搞明白了结构，（多年以后我还得感谢然后是上手改，看懂了之后功能升级很简单，只改了十几行代码，但上线的时候真是手发抖！后来才知道这个模块好几个前任都没成功接下来就被fire了....后来又经历了若干次升级，解决各种诡异bug（搞过高并发存储系统的应该知道坑有多深），编码和解决问题的能力突飞猛进。结论: 学习系统设计的最佳途径是看一个优秀设计的源码，检验成果的方式是改造它应用于你的实际场景。3. 接手一个完整的系统搞定存储模块之后，我的下一个任务是升级喝扩展一个完整的抓取系统。和入门练习做的抓取器不同，这个完整的抓取系统（又称大大小小十来个模块，十来万行代码，大部分是C，还有接近一万行的这时会发现很多模块内部都有不少实现不尽如人意的地方，但是由于借口定义的好，模块直接容错性强，整个系统还是work的。这促使我思考系统级的架构，最需要关注的重点是什么，良好的结构远胜于细节的雕琢。大约小半年后，我对这个系统基本做到出任何问题能立刻反映到是那个模块出的问题，对问题的分析定位能力又上了一个台阶。结论: 理解了接口定义和系统结构重于实现细节，就迈出了架构师的第一步4. 设计一个完整的子系统此时大概工作快两年了，原来的抓取系统有一个很大的问题，就是积累的网页数太多，更新资源分配不过来，导致系统中大量网页在互联网上已经404但仍然会进到线上被检索出来。我们称之为死链接问题通过对死链的规律分析，我发现互联网上大部分死链存在站点或目录级聚集的现象，这个其实很好理解，一个网站无力维护了，自然就全部挂掉，目录级很可能是网站改版了，或者一个子频道关闭了。利用这个规律，我们可以大幅度降低死链检测的资源耗费。在这个认识的基础上，我设计了一个独立的死链检测系统。上线效果很不错，检查死链的流量开销降低到原来10%，网页库中死链还下降了。结论: 架构师首选要解决的是待解决问题的精确描述，和对问题域的分布规律的挖掘，然后才是结构设计。5. 设计一个新的系统 工作第四，五年间，hadoop在业界逐渐流行起来，基于Google三件套的设计，当年的hadoop最上层的table还很不完善，但是整个抓取系统和建库系统的分布式改造，相当于重新设计一个新的大系统。需要考虑方方面面，如何逐步升级兼容原有系统？如何保证功能的完整性？原有设计中有一些不合理的地方，如何利用这次迁移同步改造？主导完这些工作后，系统架构方面再也没有遇到搞不定的问题。结论:  好的架构师需要在合适的时机解决重要的问题，业务发展才能给你这样的机会。上面5个节点，大致是T3 T4 T5 T6 T8的水平。新冠在家隔离，半夜睡不着码字这么多。看完给个赞呗。,阶段一：啥也不会，抄代码都运行不起来，学会了百度+google，学会了舔着逼脸去求大神。阶段二：学会天坛看教学视频，得瑟能写一些页面，停留在阶段三：开始了解底层，看书研究底层，原来发现全是数据结构算法、操作系统、网络底层，开始沉迷研究底层技术，用优雅的设计。阶段四：知道一些底层，开始跟别人喷技术的优雅性，忽略了我们技术是为了业务带来收益。阶段五：能灵活判断业务的情况，给出合理的技术架构。总之，突飞猛进的时候是自己会实践用起来，同时在项目环境中碰到问题，研究底层最终解决疑难杂症，随着经历无数个疑难杂症的积累，也就是这时候。说明：很多小伙伴都在问，就是抛出了现象没说每个阶段怎么解决问题，大家可随便评论区问问题，我收集完统一系统性回答。没想到瞎写写这么多赞，谢谢大家！近年来，有些读者会问我一些形形色色的问题，让我很难去回答，甚至给不出建设性的意见。举个例子：1. 我学习什么能进入优秀的互联网公司工作？2. 我想做研发我应该学习什么？众所周知，这问题就像你问学霸说你这么厉害一样让人难以回答。我作为一个双非软工本科学生，经过大学自己摸索和不断试错，毕业开始在百度从事研发工作。其实，我当时也有很多的疑惑，在这里给大家讲讲我的踩坑历程。记忆中，我当年逛知乎、求助高人、甚至我的导师，都无法给出一个可操作的建议。除此之外，在我那种二本学校，知名企业都不会去咱学校校招，我和学长们对春秋招的概念微乎其微，进大厂是件很困难的事情，概率与踩狗屎不相上下。让我想起了我当年问学霸题目如何解？学霸说：这个题目是来源于第X章第X例题，你这样解，答案就出来了，很容易的。当时，我真的是花里胡哨的啥都学，啥都去倒腾，不知道是不是梁静茹给我的勇气。前端、这些概念，对于小白或者在校生来说，这仿佛在对说你不用学了，除非你天生技术欲望特别强烈。这对于大多数普通人来说，明显是劝退的节奏，可操行十分有限，几乎没有参考价值，不知道从何下手。接下来，我系统性拆分问题，在不同阶段应该「学什么」、「如何学」、「学到什么程度」，重点讲我当时遇到的问题，还有我是如何去思考的，最终如何解决的，思路比结论重要。根据问题归类来看，主要在我自己的角度谈谈普通本科如何实现进入Top级互联网工作？首先，说说在大厂工作都是些什么样的人，他们当年都是背着什么光环混进去的？经过我的调研和分析，重点说一下在校招中面试官看中和考察的东西。大概思路就是，要么你证明你令人信服的天赋如逻辑系统思维、聪明，让人觉得你可以被快速培养；要么你有丰富的工程实战经验，证明你具备优秀工程师的潜质。当然，你可能会说这么多要求，恐怕神仙也做不到啊，简单太苛刻了。在这里，并不是上述要点全部满足，只是满足其中两项证明你的实力即可，毕竟面试时间十分有限必须有点让人信服的东西啊。举个例子：1、假设你是上海交大、华中科大大学毕业的学生，你可能只需要重点复习数据结构/算法等专业知识，辅之把学校的科研经历说一下。可能进入什么阿里华为百度问题都不是很大，专业知识对于你们来说自己不再话下，毕竟考理论就是你们的特长。2、假如你是双非大学毕业的学生，那么你必须用国家级大赛、开源项目、互联网公司经历证明自己。鉴于上述分析，知道需求是什么？对于我们来说，主要把精力投入在技术本身。接下来，我们将面临一系列问题。 1. 我应该做什么方向？（方向） 2. 我应该学习什么内容？（规划） 3. 我如何学这些内容？（方法/策略） 4. 我应该学到什么程度？（量化） 5. 如何把理论用到实际项目/产品中？（产出）不同方向，意味着不同领域不同，学习的知识和实战项目有共性也有差异。根据我的经验，可将内容分为原理、应用、擅长方向三个纬度。原理：计算机网络、操作系统、数据结构/算法，这些东西都是专业课好好学即可，数据结构/算法可以偶尔刷题。校招的时候再重点复习，初级阶段不必花太多时间深究。应用：它是最基础的内容，不管你从事什么领域都将离不开它们。这也是小白入门重点花费时间的地方，你将在这里不断与程序斗争如调试、验证、异常、解决。方向：不同方向本质上就是在基础应用上扩充，发挥它们擅长领域和特性去解决特定问题。在这里，简单列一下涉及的技术栈。基于上述分析，主要讲了整体思路，大家可能会觉得有点不太好理解。接下来，拿我当时遭遇的处境进行举例阐述，这样让不同水平或时期的同学有不一样的体会。假如有时光机让时间往后倒退3年，时间来到我刚上大二的时候，作为一枚小萌新开始学习JAVA走上后端开发之路。对于我来说，举例：假设你学骑自行车，你是直接上去就蹬？还是先把轮子拆下来研究清楚原理再去学习怎么蹬？重点：根据我的经历，在新手阶段不管是接触新的语言，还是新的方向。根据上述策略，刨除我踩的一些坑，我把学习征途划分四个阶段，实现学习效率的最优解。在我入门的时候，我遇到的最大困难是代码不会写，DEBUG不会做，程序报错不会看毫无头绪，甚至大家常说的百度一下的关键字我也不知道搜。这时候，最大的目标就是根据百度/查文档/看视频，把程序调试出预期结果，甚至你抄代码都行，很多时候抄代码你都不一定能DEBUG出预期结果。这就是现实，主要就是要把对编程的排斥消磨殆尽。这个阶段，不需要太关注底层实现原理，对于现已从事计算机行业的同学，其实这部分内容非常简单，可能按照正常水平少则几天，多则不超过一周就能开发出简单模块。简单说，它顶多是普通本科毕设设计水准，主要是让新手在感官上体验软件产品。作为小白，我们不得不面对一个现实，小白阶段中大多数人对计算机了解几乎为零，尽管你小时候玩游戏贼牛逼。就像写个HelloWorld，你起码要安装好环境，安装好幸运的是，我们在互联网如此发达的时代，市场如此火爆，视频资源可以随便搜索，甚至自动给你推荐。我是特别推荐这个时期，大家去完整找一套视频来系统学习。尽管新手视频对于现在的我来说很费时间，但是对当时小白的我来说，这是新大陆，它能带你简单过下计算机体系导图。我在课余时间学习视频，让我在课堂上学习理论的时候，能够有豁然开朗的感觉，自然就比别人强了。在这里，我就简单给大家推荐一些学习资源。假如你学习java，推荐你去尚学堂/通过第一个阶段学习，你对编程从一无所知到有所斩获，对计算机世界充满了好奇，甚至有所开心。这时候，你最应该做的就是去满足你装逼的梦想。假设你是爬虫方向，你应该去爬表情包、爬知乎数据、自动抢票，去满足你无数个装逼梦想。假设你是算法方向，你可以去研究推荐算法、图像识别模型，去做个商品推荐、人脸识秀一秀。假设你是后端方向，你可以去研究下画外音：多做项目，坑是一步一步踩出来的。作为大学生，实验室、软件设计比赛、经过前两个阶段实践，时间来到大三，这时候基本的软件开发已入门差不多达到普通培训班毕业水平。同时，专业课如数据结构/操作系统/计算机网络也上的差不多了，对概念多多少少有初步了解。这时候，你会发现很多原理你不懂，将很难更上一层楼。你将处于写代码一时爽，一直写一直爽，遇到性能问题直接土崩瓦解。所以，你不得不去学习理论知识让你走得更远。在新手阶段去强化理论知识，会让你兴趣骤减且产生学了有何用的错觉。同时，这是最好的时机，学校专业课学完你有基础概念，你有实际软件应用场景，这些东西让你深挖理论的时候会快速给你构建起基础图谱，让你兴趣激增不断体验学会的东西，将戳痛你最痛的神经，瞬间把你以前遇到的问题有新的认知，这就是答案。其实，编程语言和计算机基础都是相通的，只要你学透一门编程语言剩下的就大同小异。当然，计算机基础毕竟是枯燥无味的，学习毕竟是有方法的。举个例子：站在编程语言的角度，你用心去总结，你会发现不管什么编程语言，变来变去都是换了个花样在谈以下内容。不管在面试还是技术探讨，重点考察的都是集合、网络通信、线程/线程池。源自于它跟计算机基础有紧密结合，你要优化它们你必须具备扎实基本功。基于我的研究经验，我建议大家在学习计算机基础的时候，不要因为理论而理论。你应该去通过编程语言源码去学习计算机基础，只学你当前认为最重要的。举个例子：当我去学习数据结构/算法的时候，我会一边学习源码一边思考数据结构，这样就让我有实际应用场景不会因为理论而理论。我学习list、set源码的时候，我就学会链表、栈。我学习map的时候，我就学会了当我去学习计算机网络的时候，我会一边学习socket的用法，学习Linux网络通信模型当我去学习线程/线程池的时候，我会学习锁机制、生产者/消费者模型这些操作系统原理的重要知识，跟编程语言中关联不大的我就粗略记忆。经过前面三个阶段的学习，你已经具备扎实基本功和项目实战经验。接下来，你需要做的就是更加的专业化，研究一些有生产意义的东西。如果你一直写学生管理系统，这些没有价值没有意义的东西，那么毫无意义。这时候，你应该去互联网公司验证你学习的技能。除此之外，你可以去学习额外的成熟先进技术栈。画外音：去实习，最好去大厂实习，接受互联网软件开发的挑战。要是不能，那么去研究实际企业技术栈的应用与底层研究。举个例子：假设你是后端开发，你就可以去学习微服务的技术栈，经过上面的训练，已经具备了解决问题、快速学习、编写代码能力，也就是具备软件工程师的职业素养和扎实基本功。这时候，进入互联网公司开启职业道路，你将会很快有产出，不会陷入徘徊自闭的状态。更何况，你的职业素养已经能够让你遇到问题，能快速的学习克服困难。但是，要是让你去参加面试可不一定能独善其身，毕竟工作拧螺丝，面试造火箭可不能疏忽大意。面试也就是把自己卖出去，让别人觉得你值。简历是至关重要的环节，所有的知识和技能全都是围绕它展开，否则毫无意义。因为在面试中，面试官关心你有什么，也就是面试完全围绕着你会的东西展开提问，所以你就把你的优势发挥到极致就行。简历一定要认真对待，一定要简介精炼，尽可能把内容压缩到一页，毕竟简历筛选就30秒不到。这时候，简历排版、简历字体、简历模板都有讲究，细节决定成败。在写简历的时候，主要分为个人资料、实习经历、项目经历、专业技能。其实，没什么技巧，参考假设有读者需要简历模板，可关注提供给大家。以前，学习知识是零散的，学习策略更多是面向解决问题，以至于知识不系统，表达逻辑层次有限。面试官逻辑思维强，所以你必须做好充足准备才能脱颖而出。按照互联网面试流程大多数分为三轮面。一轮面试：主要是考察计算机基础知识和擅长语言基础知识，重点考察数据结构/算法、网络编程、擅长语言基础。但是，绝对不是死记硬背的东西，一定是深度和广度紧密结合，环环相扣直到把你肚子里的东西全部挖出来。举个例子：你会发现每个问题都是环环相扣，从简单到难，目的就是挖掘出你的极限。大多数情况都是，从数据结构/算法入手，扩展到编程语言特性，再扩展到并发/网络编程不断进行深挖。当直接问实际用法应试者答不出来的时候，就会再次引入到计算机基础知识，这样不断反复调度试探应试者的是深度和广度。二轮面试：这轮考察实习/项目经历，重点考察你的面试储备。众所周知，大部分应届生项目经验十分有限，大多数是图书馆管理系统、电商系统这样。重点说一下应对策略，可以去网上找你做的项目可能遇到的领域难题，去找解决办法，最终扩展补充到你的项目中。三轮面试：这轮面试更多是经理考察应试者的基础能力。也就是逻辑思维、抗压、时间管理等基础能力，看下是否能融入团队，毕竟适合团队的才是最好的。这里主要讲了思路和应对策略，至于篇幅有限，面试题只能读者自己梳理，假设有需要后续再聊。大体的思路： 1. 梳理知识体系看面试可能考哪些东西？ 2. 去网上搜寻和整理面试题？ 3. 把数据结构/算法、并发编程、网络编程串联起来，还要学会理论知识和实际实战中来回串联。总之，作为普通学校的同学，你只有花更加多的时间在项目实战中，实习/打比赛/逛开源社区，这些时间让你更快接近成为职业软件工程师。当机会来临的时候，你抓住机会就踏入大厂的大门了，幸运永远不会无缘无故眷顾你。经过读者提问，再附之我的思考，我大概总结出来分为这么几类问题。不卖光子，直接说下整体解决思路。有用：计算机理论（算法、网络、操作系统）、项目、实习。企业招人就一个目标：来了公司能干活，培养完能干活。软件研发这职业，像奖学金、三好学生、学生会主席、英语四六级，对于咱们这职业来说用处不大，有只是能彰显有亮点可作为加分项，锦上添花。当然，你能去拿到这些东西尽量去拿，毕竟别人能拿到，你拿不到你怎么证明你比别人强？前端、后端（产品或架构）、测开、运维、大数据开发、数据分析从大学时间角度，每个学年会拆分出目标。从专业知识角度，根据不同解决学习不同知识。总的来说，实际操作起来还算清晰。阶段一：找培训机构视频学习，只要能独立实现可让人访问的应用如仿微信聊天软件。阶段二：做项目，你可能会学习崭新的技术栈（springboot、redis、阶段三：通过做项目使用了很多新兴技术，计算机理论知识也学了很多。这时候，你核心目标就是把学过的东西总结归纳，拿着他们去面试找工作，这时候你要能说出怎么用，还要说出为什么要用。开源学习网站：要是觉得还得写不错，点击 ,我有幸有个姑父在腾讯做的蛮高。。。我曾经请教过他这个问题，他的回答是 ”他有个观点，好的 programmer 不是教出来的，更多是师傅领进门。这个东西就像武侠小说，真正的高手不用你出手，光是走几步，就看得出来了（代码风格）。而所幸一切顶尖的”招式“都在 github 上有对应要做什么事情 ---> github看看做的最好的是怎么做的 ---> 代码一点点拆分、阅读、分析，看看有什么可以学习、借鉴、模仿，甚至蒙住看自己会怎么写 ---> 自己动手做，学习，比较，学习具体来说，多关注一些 github 上的技术狂热者，热衷分享技术和代码，比如 ,身边朋友说我是在如今这个十分看重学校和出身的时候，这几乎是不可能的事。老实说，我真的觉得真的有点夸张了，我只是比别人多花了点时间而已，仅此而已。首先问大家一个问题，不知道大家有没有这种情况的出现：“在实验室或者图书馆怎么想也想不出来某道题/某个 bug 的解法，但刚出实验室/图书馆，立马就想到了”。在过去一年这种情形出现在我身上太多次了。。。。在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在可以说我能够自己以前的学习笔记包括下面是我的校招学习笔记网站内容大纲不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！回到问题本身，就我自己而言，我想应该是在我绞尽脑汁克服一些困难的时候提升的，没有某一个瞬间、某一天、某一周或者某一个月忽然提升了自己的编程能力的说法。比如：我就按照 说来惭愧，在 8 月之前，我对 C++ 的影响还停留在 “Hello World” 上，本科时期老师教过的 C++ 基本全忘光了。C++ 三大特性的“ 封装、继承、多态”我真的只记得一个多态，还是死记硬背的那种。当时选择 C++ 而不是 Java作为自己的学习语言除了因为实验室项目的需要，还因为 C++ 比 Java 要难学一点。是的，就是因为 C++ 比 Java 难学一点，大家都贪图入门快、简单、易上手，我偏不这么干，简单易上手也代表着跟你竞争的人更多。思虑再三，我还是选择了 C++ 作为我的主攻语言， C/C++ 能让我见识到整个计算机体系结构是如何被搭建起来的、程序是如何跑起来的、程序是如何被编译链接在一起的、函数的底层构造是怎样的....说干就干，我经过再三比对和考究，选择了某马的 C++ 入门教程，于 2019 年 8 月 17 日，我开始了 自己的 C++ 自学之路。我是一个喜欢动手操作的人，一边看着授课老师在上面讲，一边在底下自己开始学，跟着视频敲代码，他怎么写，我就怎么写。我看的很快，我记的开的是 1.5 倍速看的，十天左右的时间我就看完啦，当时还去留了个言，现在想想也确实感谢那个时候的自己。说到这里，也分享一下我自己以前准备校招过程中做的一些还好当时正值暑假时候，老师的项目暂时停滞，也没什么事情需要我去做。所以自己也能够有一个多月的时间去入门和学习，这是一段很完整的学习时间了。对于每一个 C++ 技术栈的同学来说，《C++ Primer》几乎可以说是一本圣经，我当时在看完上面的视频后就直接去看这本大黑书啦。月末的时候，我去 LeetCode 写下了自己的第一道题，也就是“两数之和”的题解，从此自己就走上了一边看书 看视频，一边刷题复盘的不归路。转眼就到了九月，这个时候也开学了，研究生老师也开始慢慢安排事情了。由于白天需要帮老师做横向项目和看论文，所以我一般都在周一到周五的白天去干活写代码做项目，傍晚去跑步溜达溜达的，而在每天晚上八点之后看 C++ 书籍和刷力扣题，周六周日两天则是自己的全部学习和复盘时间。在九月自己在看完《C++ Primer》的前八章后就开始疯狂得在力扣刷题了。因为刚上手的缘故，自己刷题速度也比较慢，对于一些不会的题往往需要两三个小时之久。自己能顺利解出来还好，解不出来就跑去评论区看别人的解答。在刷题过程中真的是感觉到人和人之间是有差距的，实在不明白有些人的脑子在呢么那么好使。我现在还记得力扣第一题的评论区有一句名言“有时候对象邀我一起回宿舍，我也会说你先回吧。就觉得这道题没做出来回去了也睡不着，一定要把它做出来为止，为此搞到半夜一两点也是常有的事。整个九月我都沉浸在 C++ 的世界里，也没去学别的科目。这可能是整个GitHub上最全的计算机经典PDF仓库了。（如果由于网络等等因素，如果不能访问可以尝试地址2） 其中涉及C/C++、Java、Python、Go语言等各种编程语言，还有数据结构与算法、操作系统、后端架构、计算机系统知识、数据库、计算机网络、设计模式、前端、汇编以及校招社招各种面经等~进入十月了，在七天假期里除了第一天跟对象出去吃了顿饭，剩下的时间都用来看书学习了。嗯，是的，七天假期我也没出去玩，也没打游戏，都用来看书学习啦。在经过九月一整月的学习我对于 C++ 有大致的了解后，就没那么把心思和时间都花在 C++ 上了。我开始着手学习操作系统和计算机网络了，比如哈工大的操作系统、清华大学的操作系统、南京大学除此之外我也看了一些比较经典的书籍，像《图解HTTP》、《老师依旧还是那样，我们每周五还有组会要开，要汇报自己一周的进度，包括项目上的，学习上的。说实话挺烦的，有时候自己一周明明啥也没干，也没啥进展还要在组会上吹牛逼，读研读了三年别的没咋学会，写 PPT 、美化包装自己工作的本事倒是精进不少....时间在指缝中不断流逝，自从开始有计划地学习后，感觉时间过的更快了，有时候一周在不知不觉中就过完了。与之相对的就是视频越看越快、PDF 越滑越快、桌子上的书也越堆越多，吃饭速度也越来越快，每晚回宿舍的时间也基本都在十二点之后了。那段时间，我是我们宿舍回去最晚的一个，还好自己的室友们都给我留着门哈哈。走在回宿舍的路上，我都会想哪一个知识点还没搞懂，明天要再重点看一遍；还有视频中讲到的某一个题，为什么自己没有解题思路；还有哪些书自己还没有看到，规划一下自己的未来一段时间的进度.....十一月的时候我慢慢的开始去看操作系统的书籍资料了，像《现代操作系统》、《前段时间的某一天我忽然突发奇想，想看看分别抓，哦不，最终将抓到进行数据清洗和合并，得到一份计算机领域类的书籍榜单！说实话让我觉得有些意外，因为Python类和机器学习类书籍确实不少，不过就是下面这三本，现在免费分享一下自己以前抓到的转眼就进入十二月了，《C++ Primer》也快啃完了。看书过程中，除了记录自己的所思所想，在看这本书的过程中有些课后题我也没放过，很多人说没必要做课后习题，对此我持否定意见，每章课后习题数量不等，前三道我基本都是必做的。这样一本经典的书籍，它的课后题都是经过精挑细选的，你看完一章学没学会检验一下就知道了，到圣诞节前后，《现代操作系统》和《深入理解计算机系统》也看了一大半了。力扣刷题也一直没落下，在刷题过程中，自己也知道了 C++ 中还有 STL 这种神奇的东西，也知道了另外四本经典的 C++ 书籍《Effective C++》、《我一口气全部买回来了，兴冲冲的直接去看源码剖析，差点把当场我劝退。。。。我又去搜索大家在看这本书的时候是怎么看的，有没有什么值得借鉴的方法。由此知道了侯捷大师，也知道了侯捷老师的几门经典课程。------更新一下---很多同学说侯捷老师的视频以及下架了，不能看了，还好我以前有保存过侯捷老师的全部课程，给大家分享一下！主要有：-------------------就跟我开始学习C++时会选择从黑马C++教学视频入手一样，在学习STL的时候，我也选择了从侯捷老师的 STL 讲解视频入手，依旧是 1.5 或者 2.0 倍速看的。十二月的时候我除了看操作系统的书籍之外也另外看了“STL标准库”和“C++内管管理”这两个视频。感觉时间真的不够用啊，想看的书和视频也越来越多，可是自己一天只有 24 个小时，还要帮老板做项目和看论文。元旦那天，我和对象去吃了四川串串晚上去看了电影，然后继续看书、刷题。在放寒假前我特意把两本 《Effective C++》 带回家了，现在想想还好自己带回去了，没白白浪费那个寒假。因为一月份回家的时候，把侯捷老师的 STL 源码剖析视频下载下来了，存在 Ipad 里，因为以前就看过一遍，在火车卧铺上迅速过了一遍，也没花多长花间。回家的时候家里有人生病了，一直在医院接受治疗，外出打工的爹妈也还没回来我就去陪护了。就类似下图这种病房，但我们那是十八线小县城，没有这么干净整洁。一个病房四个床位，每天来探病的人络绎不绝，在那种嘈杂的环境下不可能看得下去书，我又掏出自己的 Ipad 接着看视频，比如尚硅谷的 MySQL 视频、Linux视频都是那个时候看的。一月下旬的时候，家里人出院了，我也能顺利回家不再继续陪护了。也终于能有一个相对安静一点的环境看书学习了，我捡起闲置了大半个月之久的 《Effective C++ 》和《More Effective C++》开始囫囵吞枣起来。也许是《C++ Primer》 打的基础比较好，看着两本书的时候并没有花很多时间，很快就看完了。在家的时候，每天早上八点起床，吃过早饭修整一下就开始看书了，一直到中午十一点左右，中间也没什么人来打扰我；下午吃过饭就午休一会，醒了就径直去医院拿中药回来，然后就开始下午的学习了，下午我一般不怎么喜欢看书，我比较喜欢写代码，我会选择做一些课后题或者复盘一下以前做错的力扣题。到了晚上则是看教学视频，十点多了就玩玩B站，看一些比较有意思的吃播，比如华农与竹鼠的爱恨情仇、硬核厨师阿远、还有大姨绵羊的视频。睡前会跟自己的对象视频一会，然后就不知不觉的睡着了。。。多说一句， B 站真的很多优秀视频，总是有人问我该看什么资料看什么视频，其实你自己去 B 站输入一些关键字，直接找播放量比较高的视频来看就可以的，播放量比较高的视频，质量一般都过得去。话说阿秀自己经历了2021届的互联网秋招，在面试的过程中，被问过各种各样的问题，但是大部分都是基础性的题，所以基本功很重要，也很关键。在我以前通过校招上岸字节跳动后，将自己的秋招找工作笔记开源在可以说我能够自己以前的学习笔记包括下面是我的校招学习笔记网站内容大纲不少学弟学妹们在这个网站的帮助下，顺利进入BAT、TMD，甚至去了字节跟阿秀一起做同事，都跑来找我报喜！后来到了二月，这时候国内疫情已经进入了比较严重的时期了。武汉全城封锁也已经好多天了，每天起来第一件事就是看看疫情发展情况。在学习的时候不断的有新名词冒出来，就好像在学习 C++ 的过程中，网络编程这个词也慢慢出现，我也是知道了 C++ 后台开发跟网络编程有关。第一反应就是直接去知乎看有没有推荐的资料，在看过差不多二十多个高亮回答后，我发现有三本书出现频率最高：《TCP/IP 网络编程》、《Linux 高性能服务端编程》、《Linux 多线程服务端编程：使用 muduo C++ 网络库》。我最先看的是游双老师的那本《Linux 高性能服务端编程》。讲真，确实有点云里雾里的，因为以前也没怎么接触过这个。后来转头去看了《在看这本书的过程中，我知道了一个简易版的 这本书上例子很多，我很快就看完了，然后就开始看《Linux 高性能服务端编程》和《Linux 多线程服务端编程：使用 muduo C++ 网络库》了。前者我好好看完了，收获很多，但后者我没怎么看完，随便翻了翻就没看了，我也不是很推荐这本书。后来疫情逐渐严重起来，接到学校通知说要延迟开学，我有点不爽，可也有点高兴。不爽是因为在家呆久了，老妈整天唠叨我，干啥都有错，高兴是因为自己有更多的时间来学习看书了，一回学校就要开始做老师的项目课题了，就没有这么多空闲的时间了。进入三月后，因为一直没能回学校也复习不了C++，我的笔记都在书上，看不了就很难受，只好转头去看操作系统和计算机网络的知识。同时力扣上的题也开始二刷了，当时我重点刷HOT 100 的那 100 道题，来来回回的刷，一道题最多的时候来回刷了七八遍。我并不是什么算法大佬，自己脑子也很榆，一遍记不住我就刷两遍，两遍做不出来我就去做三遍，总有能做出来的一天。老是有人说什么算法太难，你先看看自己下够功夫了没？对于每道题，你是真的会做了没？是不是你自己做出来的？对于你不会做的题目，你有没有及时复盘和总结？如果你的回答全部都是 最多在刷题的过程中你可以选择性的看一些别人总结好的资料，比如这种前人准备好的一些刷题笔记之类的，支持三种语言就很不错，如果算法题有障碍可以多看看。在复习完操作系统和计算机网络后，我除了开始继续刷力扣再者，虽然我已经有一个实验室的项目可以写在简历上，但一个项目还是不太够看，思考再三，我决定走前人走过的路，我也选择做一个 emm，真香！我是根据 TinyHTTP 和 游双老师的《Linux 高性能服务端编程》的课后大作业为基础，这两者结合后做的自己的 可项目还没做完，学校已经给消息了让尽快回去，本来想在家把这个项目做完的，没办法匆匆买票，赶紧滚回去了。可能谁也想不到，一个寒假居然能放 150+ 天的。回去学校第二天，我就立马把《C++ Primer》捡起来看，因为第一遍看的时候比较用心看，所以第二遍过的时候即非常轻松加愉悦了，很快就看完了。然后又把以前的《STL 源码剖析》这本书捡起来看，因为寒假时候已经看过了相应的视频，看的很快，不到十天就看完了。随后又看了《深入探索 C++ 对象模型》，重点看了一下第三章，至此 C++方面的几本经典书籍都看完了，这几本书对于校招足够了，基本不会考察这几本书之外的知识点。在此期间也是把自己的服务器项目完成并且开源到 。按理来说金九银十，他们一般在九月份就应该开始找工作的，但以前的师兄师姐都是在十一月份才开始写简历找工作，去的也都是一些愿意来我们学校进行校园招聘的企业，我也私底下问过他们，得到的解释和答案就是学校比较差，然后 balabalabala 之类的。。在六月份校招提前批的时候，我就兴冲冲的投了简历，结果全部石沉大海，后来才知道提前批是选拔优秀人才的，提前批能上岸的也都是一些好学校的学生，比如各种投完简历没有后文，我也在找自己的原因，除了学校不行是一个因素之外，在思考有没有其他可以改进的地方。后来看了一些比较优秀人才的简历，我觉得问题有可能出在自己的简历上，因为自己的第一版简历写的着实垃圾。所以后面又迭代完善了自己的简历，足足写了 26 个版本的简历，也正是自己精心打磨的简历使得自己在接下来的秋招正式批中能够收获到不少胜利果实。光是修改这 26 个版本的简历，就足足花了我十来天的时间。说到这里，分享一下我自己以前准备校招过程中做的一些去年的秋招正式批是在 7 .15 号开始的，在经过提前批投递简历的全盘皆输后，我开始有些畏手畏脚不敢投递简历，因为每个校招学生可以投递一个公司的机会是有限的，比如京东，每个学生都只有一次投递的机会，每次可以投递两个岗位。所以投递简历的机会，不能随便浪费。在别的小伙伴开始大势投递简历的时候，我总觉得自己还没复习好，一直在不断复盘以前学过的知识点。我自己的经历告诉我，永远不可能有复习完的那一天的。因为你每次面试都有可能遇到你不会的题目，所以最好的方法就是在实战中成长，多去投递简历。当然投递顺利是有技巧的，前期去投递一些小公司，积攒积攒经验，后期再投递一些互联网大厂！所以小伙伴们不要抱着把全部的知识点复习完事后，再去开始投递简历，等你复习完了，黄花菜凉完了，校招早就结束了。整个七月我都是在复盘知识点 + 刷题中度过的，7.15 号正式批一开始我就立马开始投递简历了。如果是往届的师兄师姐们，他们投递第一份简历很可能要到十月份去了。还好自己没听他们的话....不知道你们是否体验过笔试全部会做的感觉？就是我所投递的互联网公司发来的笔试，我居然都会做...这不是装逼或者凡尔赛，就是我当时的真实情况，来一道过一道，来两道过一双。在牛客网看到他们发帖讨论今天 XX 的笔试题好难，求交流求解答之类的时候，我下意识地以为他们是不是在夸大难度，因为我觉得貌似没他们说的那么难；傍晚在操场跑步，听到旁边的人在讨论今天的 XX 公司的笔试题怎么这么难，我停下来随口说道：今天这笔试第一题是力扣在我过五关斩六将一般通过一场场笔试后，随之而来的就是一场场面试邀约，为了避免漏掉笔试或者面试，还专门用备忘录记录了一下。最多的时候一天我面过五场面试，上午两场，下午两场，晚上一场。那天面试完后，感觉身体好像瞬间被抽空一般。然后就是笔试、面试、复盘的交替进行、循环往复。那是真难熬啊，也真难受啊，在面试过程中遇到很多自己不怎么会的知识点，有时候也会被问到崩溃或者被面试 PUA ，可来不及伤心和怀疑自己，因为可能一会就要进行下一场面试了。心态真的会崩，当我心态崩了的时候，我一般都是去操场上跑两圈，然后回宿舍洗个澡，再来到实验室看个电影或者看看吃播，然后第二天接着干！还好，最后终于有所收获。如果你能看到这里，确实很了不起。我罗里吧嗦说了一大堆，每个人的成功都是不可复制的，我写下这篇回答的时候是2021年的五一期间了，距离那段时光已经快过去一年了，确实挺快的，还有一个多月自己就要毕业了，时间真的很快。有时候我就在想，“我是小镇做题家长大的，我记的上大学第一天代班问我们有什么才艺。我惊奇的发现，我好像没什么才艺。但我想，我的孩子不会再像我这样了，我保证。希望我的下一代除了会做题，儿子会跆拳道、轮滑、散打，女儿会弹古筝、弹钢琴、吹葫芦丝、唱歌、跳舞等。文中涉及到的资料如下：讲真的，我也不知道有多少小时。在校的时候，周一到周五白天都要忙老师的事情，基本没时间自学，都是晚上八点之后学的。周六周日两天好好利用，各种节假日好好利用。可能是习惯了吧。以前跟师兄坐同桌的时候（他现在在华师大读博，今年该博二了），师兄很用功，每天早上八点十分就来了，每晚十二点多才走，每周工作七天，很少见他休息。我真的很佩服他，所以我慢慢也养成了这种习惯。读研三年，差不多在校期间都是 8:30-23:30 的作息，每周 6.5 吧。这是什么概念我也不知道，只是华为二面面试官听到我在校期间的作息后，露出了欣慰的笑容。。。。太多了，真的太多了，所以我觉得学习不累。。1、相遇即是有缘，我最近发现github上有几本不错的算法刷题资料，支持Java、C++、Go三种语言，其中对于面试中考察较多的链表、树、动态规划、数组等知识点讲解的都很全！如果你算法能力比较弱，比如互联网大厂面试中手撕算法比较差的话，那要好好看看了。、对于一些想要转行或者读研的朋友，下面两个回答肯定能帮到你！、建议多看经典书，而不是什么《、Linux C/C++ 方向自学的完整路线，很多人不知道学习完 C++ Primer 能做什么项目练手，这个回答不可错过！、如果你准备时间不多，就抓住重点，在最短的时间内搞定必要的数据结构和算法而去面试、我自己在学习计算机过程中看过的优质网课，你的基本大学四年绝对够用了。、如果你决定不了到底学习C++还是Java，不妨来看看这个回答！我在自己八九年的计算机学习生涯中收藏了不少数据，最后如果同学们觉得有帮助的话，不要双击屏幕就是最大的支持啦！一个赞就足以！这样也可以让跟多的同学看到了。如果同学们如果还有什么问题，比如计算机考研复试、相关互联网大厂求职、技术方向等等问题，,在我的码农生涯中，一共有2个节点，感到自己有一种技术上「突飞猛进」的感觉。那时候刚刚转行一年，熟悉了同事，大致理解了公司产品的技术栈，知道整个流程是什么样的。按我现在的角度来看，当年的水平也就是个过得去的实习生（然而当时已经全职了……）。我全心全意地想提高技术水平，然而总不得要领，也反思为什么自己对于技术的理解深度和同事们有那么大的差距。在熟悉了Python语法后，我所会的其实仅仅是将自然语言和逻辑翻译成代码，然而并不能从计算机的角度去理解代码执行的原理，当然更无从理解性能优化之类更深奥的事情。那时候带我的数据工程师，手边经常放着一本《这两本书讲了很多巧妙的方法，打个比方。有一天CTO突然把我和另一位前端负责人叫到一起开了个3人小会，讲了一下要写一个新的后端数据读写服务。这个服务非常核心，对性能和健壮性都有很高要求。当时会议的情况我记忆至今：CTO和前端负责人你一言我一语地说着架构，我在旁边听天书，都是没见过的词。聊到最后，CTO问我一句，「你能听懂么？」我像美剧《硅谷》里面的Dinesh一样……不过赶鸭子上架，用了大半年的时间写完并打磨这个组件，最后好歹完成了一个靠谱的东西（在早期还有另一个大牛同事帮我搭了脚手架，非常感激）。这也是我码农生涯中完成的最重要的东西。开发这个组件遇到无数知识盲点、踩了无数坑，数据库、运维监控、通讯协议、性能调优、单元测试……这些全折腾了一遍，感觉像读了个加速版CS本科。做完这个项目，我的编程水平终于从一个实习生无限逼近于工业级了。回头看看，像做梦一样，居然这么熬着熬着就成为同事口中的「在毕业多年后开始学习写代码，让我理解了很多事情，不仅仅是计算机，也包括了「如何把事情做好」的方法。「突飞猛进」往往是自然发生的。,,,,,,,,,,
有哪些顶级水平的中国程序员？,希望写上名字，代表作，特点，轶事。（注：程序员既可以是在中国的，也包括中国人在国外工作的）,ACM世界冠军他有一个爱好是看日本动画片，为此自学日语，最后能和日本人正常沟通，参与字幕组做翻译。好多人留言问他的情况，这里统一补充答复，他是我见过的最纯粹自由的人，对钱，对名誉毫无兴趣，对别人怎么看他也不在乎，只对挑战性的问题有浓厚的兴趣和异于常人的专注。,在鹅厂职级调整前，做到T5（科学家）的程序员，水平和履历都很能打。比如下面这位大佬：吴石曾经是全球提交漏洞数量最多的个人。他曾独自发掘超过100个他曾创造过单月申报微软漏洞数量全球占比10%、独自发掘15个iOS漏洞的惊人成绩——这个数字比同期苹果自家研究人员发现漏洞（6个）的两倍还要多。他曾发现只要给对方的QQ发送一条消息，就能够得到对方电脑的权限，进而控制对方的电脑，这对于受众巨大的QQ而言无疑是颗不定时炸弹，据说初二之前吴石的数学非常差。但后来遇到良师启蒙，他对数学的兴趣一发不可收拾。高二拿了全国数学竞赛一等奖，后来考入了复旦大学数学系。上了名校的吴石也和在座各位一样打游戏，但不是帝国时代和红警2，而是叫做“MUD”。但人家玩着玩着就黑进了游戏的服务器，并且成功修改了自己的游戏数据，从此走上了走漏洞之路。你玩王者只想着喷队友，别人玩游戏自己开挂，这就是差距啊同学们。整个大三吴石几乎都在搞计算机，他去软件公司打工，以至于几乎没有上一节课，但就是这样人家也就挂了一科。一次偶然的机会，吴石向微软提交了可以实现系统提权的高质量漏洞，出乎他意料的是微软居然提供了奖励——要知道在当时的环境下，国内很少有公司能做到这么体面的事情。受宠若惊的大神一发不可收拾，没多久又提交了数十个漏洞，这甚至超过了微软自家安全团队，2007年他收到了来自微软的offer。再到后来，漏洞大牛的简历愈发丰满：在加入2013年，腾讯抛出橄榄枝，吴石成为科恩实验室的首席科学家。2016年他带领科恩实验室团队和当然现在更为人所知的，是他和他带领的科恩实验室团队对特斯拉的多次破解。参考链接： 没想到这个问题这么多人关注，有兴趣了解鹅厂程序员的小伙伴，可以再看看这两篇：,2000年加入阿里巴巴，在阿里的花名叫“2003年，被马云拉进了一个秘密项目，和另外两位工程师一起从零开始，要在一个月内，搭建一个名叫“淘宝”的网站，并涵盖所有2003年-2007年，独自维护淘宝搜索引擎，并且这还不是他全部的工作；2014年，被邀约成为阿里巴巴合伙人。阿里系统软件事业部研究员阿里同样是阿里合伙人、天猫技术部副总裁春哥的编程之旅起于抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法江苏镇江人，1999年，初中的章亦春第一次接触《结束淘宝量子统计的工作后，全心从事 2017年，在美国创办了 OpenResty Inc. 公司。有人说：“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”（中间捧奖杯那个）世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。,在美国留学时，曾经用两天时间，就复制出一款H5的Clear软件，在APP Store上线一天，就取得了付费版和总版第二的成绩。2014年2月，尤雨溪开发了一个前端库，就是我们熟悉的后来尤雨溪希望自己能够将所有精力都放在Vue.js上，希望全职去开发和维护，在为了大力推广Vue，他经常出现在JS的各种交流会上，给广大开发者分享Vue的开发经历，使用Vue开发的方法和技巧。在他的带领下，Vue.js正在茁壮成长，国内很多大小公司都在使用Vue，相信你也一定使用过这款前端的开源框架。尤雨溪全职做Vue后，已经赚取人民币上千万了，真是非常厉害的程序员，值得我们大家学习。这就让我们不得不深思，同样是程序员，人家怎么这么厉害呢？蔡景现被称为阿里的扫地僧---“多隆”，是阿里巴巴初创时加入的三名工程师之一，也是阿里巴巴新增的三位合伙人之一。非科班出身的他，在一个月内从零开始搭建出了现在的淘宝，为了解决项目问题，常常在半夜爬起，去排除故障、去解决问题，独自维护淘宝搜索引擎5年，被称之为“他精通C/C++/Java，从前端到后端，在从技术底层和高层业务之间来回切换，阿里的CTO对他做出过很高的评价，一个人能够顶得上一个团队。比如，写一个文件系统，别人做可能是一个项目组或一个公司，而他在很短时间内就能从0到1一个人做出来。在所有工程师的眼中，他是一个神，甚至在公司内网的便签上，他也被称之为神。他很有钻研精神，很喜欢写代码，很傻很天真，写代码可以写到出神入化的状态。我们应该像蔡景现一样，要有钻研精神，多写代码，多做项目，多学习；编程只是一个技术活，多做练习便能熟能生巧，将来也会成为一名出色的技术专家。陈皓被大众称之为“皓哥/耗子哥”，他在博客上写出了很多经典文章，推荐大家可以去看看，他的博客：他从事软件已经17年多了，对底层技术架构早已了如指掌，曾就职于亚马逊、阮一峰是一名经济学博士研究生，依靠对技术的执著和热情，不断学习钻研，成为了一名IT专家。他热爱技术、热爱写作、也热衷于开源。他是经济学里写博客最好的，写博客将IT技术写得最通俗易懂的。前端的同学对他应该不陌生，估计很多学前端的同学都是跟着他的博客学习的，他的文章随处可见。他翻译的著作有：《《软件随想录：程序员部落酋长Joel谈软件》《异常流行幻象与群众疯狂&困惑之惑》等。大家都称他为“春哥”，他曾经就职于现在的春哥已经全身心投入到如果有小伙伴想知道春哥是如何通过抄书学编程的，可以去他曾经是ACM的冠军，现就职于阿里巴巴，在公司内部被称为“人肉逻辑机”。他为人十分低调，做事情深思熟虑，做人十分低调，做事不轻易动手。当有搞不定的代码时，他不是调试代码，而是逐行逐行的看代码，然后将某一行的代码错误指正出来。我估计他在看代码的时候，大脑就已经在运行每行代码了，大脑就是他的多核CPU。之前网上流传着他的一个传奇故事：某次代码遇到Bug，他的同事无法搞定，打电话向他求助，他在电话中直接指出某个他号称中国Lisp第一人，人称伞哥，他的思维远比技术值得关注。曾就职于网易云，在业内声誉很高，他的成绩我就不过多的介绍了。有情趣的同学可以去看看伞哥的日记，地址：他的性格古怪，他坐在丁磊办公室的旁边，经常跑到丁磊办公室，将丁磊正在充电的手机拔掉，给自己的手机充电。因为性格的古怪，后来被丁磊给开除掉了。离职时在博客上写：CEO 丁磊先生跟我性格不合，难以共事，但因为我工作成绩突出，无法直接开除，而我又深深留恋这家公司，不肯主动辞职，于是不得已将我劝退，给予 N+1 补偿，并言辞恳切地请我走人。所谓 “好聚好散”，我不得不接受。伞哥走的时候说，他不会怀恋网易的，只会怀恋战友，等他下次回网易的时候，就是收购网易的时候。Gray Wang根据 作为最神秘的亿万富翁高管，Gary 平时性格神秘，很少公开露面，网上照片屈指可数，连公司同事都经常很长一段时间见不到他，甚至领英的照片也只有一个背影。Gary 出生在中国，8岁后就随父母移民2010 年他参加高中数学竞赛，刚好结识了 SBF 和 Gary 在大学中逐渐建立信任，他们做了三年室友，学习之余，他们常一起打游戏，做谜题。在空闲时间里，还会共同参加 “很多人觉得 Gary 无法相处，就和 Gary 保持距离，但我不会，我认为 Gary不想刻意远离这个世界，他非常聪明，而且他可以腾出时间去思考一些很困难的问题。”SBF 这样回忆道。他们多年的求学经历结下了深厚的同窗友谊，毕业后 SBF 去了华尔街的交易基金 Jane Street 做交易工作，Gary 去谷歌做机票价格的整合引擎 Google flights 的开发。2017 年 11 月， SBF 在旧金山创立了量化交易公司 Gary 认为在谷歌的工作确实感受不到挑战，于是接受了 SBF 邀请来到旧金山。他们经常并肩战斗，Gary 没日没夜的编写代码， SBF 经常睡在公司，两人每天只睡 4-5 个小时。一开始，SBF 用自有资金运作 Alameda，买卖主流币和山寨币，但业绩不佳，甚至每天的损失高达 50 万美元。但在 Gary 加入 Alameda 之后，团队在很长时间的摸索之后，确定交易策略为利用日本、美国和韩国之间的比特币差价套利。在最关键的一环中，Gary 为 Alameda 写了整个然而这并不是一切的开始，早在 2018 年， SBF 就请求 Gary 写过一个比特币交易所的程序，Gary 一个月就完成了一个交易所 但当时合约交易所普遍存在的问题是，当客户的头寸经历损失，并且需要追加保证金，交易所会先请客户追加保证金，如果市场变化太快，交易所就会先承担资金的这部分损失。在后来的合约交易所的代码中，Gary 发明了一个新的清算引擎机制，可以按秒为单位来监控客户头寸，当客户保证金不够的情况下，立刻执行清算，从而保护了交易所的资金。虽然这个功能让交易者感到厌烦，但是解决了长期困扰众多交易所的关键问题。Gary 为 FTX 加入清算机制后，Binance、Kraken 和其他交易所也跟进开发了这个功能。此外，在一般的合约交易中，用户需要有对应资产的抵押进行借贷， 缺少资金的灵活性。针对这一点，Gary 为FTX开发了“交叉保证金”功能，让用户可以用多种数字资产共同为一笔交易做抵押。这一功能也在后来被其他合约交易所相继推出。实际上，作为 SBF 成就大业的“二把手”，Gary 不仅仅只是一个优秀的程序员，他还是一个顶级的产品经理！Gary 甚至可以单独通过市场需求开发出领先竞争对手的产品。 与此同时，Gary 会负责 SBF 一些特殊程序的核心请求，并且只有 Gary 和 SBF 有权限使用和查看，FTX 的工程团队甚至都不知道 Gary 写的全部的程序。其中就包括 Alameda 可以从 FTX 转移资产的 “允许负余额”这一功能，这一程序让 Alameda 可以无限制地使用 FTX 客户的资金。在 SBF 和 Gary 的领导下，FTX 做到全球交易量排名第二，市值高达 320 亿美元。 却在 2022 年 11 月，FTX 一个星期轰然倒塌，欠下超过 100 万名的债权人的超百亿美元的债务，堪称虚拟货币世界的FTX 的核心团队全部住在一栋巴哈马的顶层公寓中， 事发时刻警察上门扣押了包括 Gary 以内所有 FTX 的核心人员。他在 2022 年 12 月承认了包括电汇欺诈、商品欺诈和证券欺诈等所有罪行，即将面临 50 年的监禁。目前，Gary 正在寻求在法庭上合作作证以减轻判罚。一代天才程序员 Caffe框架的创始人，也是,"耗子叔有一个访问量千万的技术博客: coolshell, 上面的文章可以说是篇篇精华，我墙裂推荐大家去看看，CSDN 经常由于访问量过大被推上首页。耗子叔尤其擅长底层技术架构，C/C++/Java和Unix/Linux/Windows。对高性能，高可用，分布式，高并发，大规模数据处理系统有很深入的研究。是一个他在 2001 年那年被外包到了某银行做开发，就是用 C 语言在 AIX 系统里堆一些银行的交易逻辑，他坦言，这个过程并没有让他学到什么东西，也没有什么成长，每天想的就是要离开这个地方。所以，他在晚上 10 点以后开始看书学习到 11 点半，并使用工作环境动手实践书上的代码，一年后，精读了《这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：正是凭借着这股子对底层技术的持续不断的专研劲，才有了耗子叔现在的成就，并且影响了几十万做技术的人。在谈及程序员加班、996 这个话题的时候，耗子叔说到了他在外企的经历：，我解决了一个网络通信莫名其妙的断掉的问题，我把性能优化了很多倍，我解决了一个不能重现的一个困扰团队 3 个星期的问题（其实就是大家没有认真读文档），我在入职一个公司的第一天里就为这个公司解决了一个历史遗留问题。在 Platform，我每周解决了 bug 数是全公司的其它人的总和还要多（从不加班），在路透，我带团队优化的系统的性能是全球所有研发中心最高的，在亚马逊，两周打通美国和德国的订单和商品列表系统。我也有失败的时候，你不信你可以看看你们公司那些不用加班，就算什么也不干，公司也要花钱养的技术人员，他们的成功一定不是努力和加班加出来的，不是高手，也不是牛人，离他们的距离还很大。只是从2003年开始在网上记录一些自己的技术知识和想法，今天还在努力学习希望能成长一个高手，因为，面对生活在今天这样技术日新月异的时代，我们每个人都是一个新人。在这里也转一篇耗子叔的专访：：我的精神家园（我当时在银行做银行网络、银行的电子邮件系统和办公自动化系统。当时正处在银行信息化的阶段，加上当时互联网和IT业刚刚火起来，得到这份工作其实是很幸运的。银行正值扩张电子信息化业务的时候，其实应该有很多事可做，但是当时的主要工作都是由厂商来干。比如说IBM或Cisco拿下单子来，会把工作外包给系统集成商。作为一位技术人员，其实可以发挥的空间并不大，多数时间我只是出了问题打电话的角色。没有人会教你任何事，出了问题，就是打电话，然后按照他们的指导来完成工作。但这个还不是促使我离职的最主要原因，我离开是因为互联网和IT业的兴起让我有些心向往之，有想去看一看的冲动。我还记得当时的辞职书是这么写的：“本人对现有工作毫无兴趣，申请辞职”。处长说，“你可以这么写，但是要加上‘经调解无效’，另外，分给你的房就不能要了”。我说好啊。就这样就辞去了工作，去了上海。老实说，这个决定真不好做，因为几乎所有的朋友和亲人都很反对。当时选择上海是有原因的，我觉得在当时的环境（2000年）下，上海的发展比较不错。没有选择深圳的原因是个人感觉那是因为政治原因凭空冒出来的一座城市，我不是很喜欢。北京我有很多同学，而我想去一个陌生的地方。但是后来发现上海也不是做技术的地方，过得有些压抑，初来到上海的时候经常会被人瞧不起，毕竟是刚刚来到大城市。我当时感觉银行束缚了我，想看看自己可以跑多远，能发挥出多大的价值。于是决定出来闯一闯，主要就是要去经历一些应该去经历的事情，不希望老了以后会后悔年轻的时候没有去。当时IT产业的发展是一个大趋势，我感觉我必须要去一座大城市，去经历一些东西。在小地方基本没有这些机会。要学会游泳就必须要跳到水里去呛两口水，所以我就义无反顾地出来了。我仍然记得自己拎着皮箱站在上海火车站的样子，举目无亲。原来在老家的时候觉得自己还挺厉害的，自以为不愁找不到好工作。不过事实却不是这样的。我还记得第一次去面试时，（面试官）问了很多和C相关的问题，问了我半个小时，我一个问题都答不上来。我一直低着头，好像被审问的犯罪分子一样。我从大学毕业出来就没经历过什么面试，再加上自己内向的性格，所以，整个过程我都在低着头，不敢看别人一眼。最后，面试官问了我一个问题是“有不懂的问题你会怎么办”，这样的问题我都不敢回答，其实这道题的答案不过就是“问别人”或是“自己看书”或是“上网查资料”什么的。很显然，这场面试我肯定是被灭掉了。但这还没完，最后面试官对我说：“你出来干什么，像你这种性格根本不适合到大城市来”。我当时被严重地打击了，感觉到自己确实有一些东西很差。第一个是性格差，不知道怎么与人交往；第二个是技术差，很多问题不知道；第三个就是视野狭窄，没见过世面。后面的几家公司的面试都大同小异。一个人在异地他乡，经历了这些事情，心里会非常地恐慌，“我这条路是不是走错了？”，我经常这样问自己。面对这样的情况，我被逼迫着一定要改变自己。因为，离开银行时，我的家人、同学和朋友都很反对我出来，如果这样灰溜溜地回去，我面对不了他们。而前面的人还看不起我。我当时的处境真的很难堪，就像爬在悬崖中间，上不去也下不来。所以，当时只有一个想法，就是要证明自己不是那么差的人。人被逼到那个份上，活得就比较简单，哪有什么职业发展规划，只想拼命地多学技术，提高自己的能力。这个经历有点像是一剂兴奋剂，同时也相当阵痛。但是回头想想，第一个面试官应该是我最感谢的人。在同学的帮助下我找到了在上海的第一份工作。南天公司，这是一家给银行做系统集成软件的公司，大学毕业时本来也可以进去，现在绕了一圈而且还是靠同学帮助进去的，所以那时的心态还很不平稳；另一方面因为以前是做银行的，是甲方，现在成了乙方了，两边的人都用异样的眼光看我，心态非常不好。不过，这是个技术不错的企业，国内早期很多搞Unix/C的高手都是从这个公司培养出来的。我当时的技术还是不行，比如说到了用户站点以后，不知道怎么做，我曾经误操作把用户的数据删掉了。经常犯低级错误，不但没做好自己的工作，反而还给别人添了麻烦。这些经历都让我有一种“技术焦虑感”，或者叫“技术忧郁症”。我觉得自己这也不行，那也不行。这也是我今天仍然在拼命学习的原因。这就好像我们经常在参加工作多年后还会梦见自己的英语四级没过，或者是期末考试没过一样。我经常会梦见的是项目又做砸了，又把用户的系统搞乱了，一大堆人要审我、要训斥我。因为技术差，沟通差，不会面试，所以，我决定经常出去面试，基本上每周都要去，不管懂不懂，也不管是什么公司，也不管别人鄙不鄙视我，反正一有机会就去面试，多见见人这样可以让我的性格有所改善，同时，也可以知道社会上需要一些什么样的技能，把别人面我回答不上来的东西都记下来，然后回头找答案。那个时候我会经常去等到一年半之后，用句赵本山的台词说，我在面试中学会抢答了。面试官的问题没问完，我就能说出答案了。其实，基本上是面一个公司过一个（当然都是一些小公司），此时，我就开始挑公司了。感到技术能力不行就去学技术，交往能力不行我就去面试，这两个问题都可以通过大量地实践和努力来弥补，但是眼界这个东西没有办法通过努力来弥补。所以，当时非常想去一些更大的公司看看，如果能去外企更好。我还记得，有一天，有一个和网络相关的技术问题，同事们搞了三四个通宵，也没弄明白，后来想起我好像在看这方面的书，他们就让我去看看、试试，结果我只用了20分钟就搞定了。基础真的很重要，这受益于我看了《后来，我去了一家做电信软件的公司，他们让我做PowerBuilder，尽管我当时想做的是C++，但是因为当时各种原因很需要这份工作，就去了。进了那里的第一天发现公司里有一个论坛，上面都是一些技术上悬而未决的问题，都是关于Windows/C++的。我一看，都是些很简单的问题，一下午的时间就被我全部解决掉了，我的基础知识发挥了作用。于是，当天下午我一下子就被调到了核心组。不过，我只在那里呆了两个多月，因为那时我已经不愁找工作了，这期间有两家北京的公司录用了我，于是，02年我就来到了北京，去到一家做分布式计算平台软件的公司。在上海的这两年的时间，从什么都不是，到得到工作上的全面肯定。那段时间感觉自己牛得不得了，有些狂妄和骄傲了，经常上网和不认识的人争论一些很傻的问题，后来发展到对当时的领导以及银行客户的领导不敬，总觉得这些人太二。现在回头看过去，我觉得那是我人生特定时期的记号，人生的痕迹。我2002年在CSDN开了一个blog，当时叫专家专栏。开个专栏很简单，只要发6个帖子。我也不是什么专家，只是喜欢看书、喜欢学习而已，也喜欢做一些学习笔记。那时候没有笔记本也没有台式机，市面上好像也没有U盘和移动硬盘。正好有CSDN这么一个地方，就去CSDN的站点上把自己的一些学习笔记放在了上面。后来03年的时候技术专栏转到了博客，因为CSDN对其博客经营得不好，我09年就离开了csdn，创建了我老婆是学新闻编辑的，她鄙视我说，你的博客虽然有很多人读，但是只能算是个书呆子的博客，全是一些书呆子式的文章。我有些不服，我觉得技术人员不全是书呆子，我们这个圈子里也有很多有趣的东西，只不过是你不知道而已。于是我想弄一个有意思的、有娱乐性质的东西，里面都是技术圈里面有意思的事儿，但是很多技术圈以外的人也能看懂。一开始酷壳和CSDN博客的风格完全迥然，如果有技术性的文章我还会在CSDN上贴，但是后来我就完全抛弃了原来CSDN上的博客。酷壳的初衷是希望很多人都可以来上面发表一些东西，但是可能是我写得太多了，别人就被压制住了。现在博客更新频率是一周一篇，一开始的时候一周三篇。磨刀不误砍柴工，总是有时间来做这些事的。我经常看书，需要把学到的东西整理成学习笔记。自从在CSDN上写博客的时候，就有这样的习惯了，而且又有“技术焦虑症”，害怕跟不上，所以维护博客的事对我来说是很自然的。现在我已经不用自己再租服务器了，由于酷壳的访问量比较有保证，我提供了广告位，就免费得到服务器了。遇到新技术我会去了解，但不会把很大的精力放在这。这些技术尚不成熟，我只需要跟得住就可以了。我的团队自己想学什么我都不干涉，但是用到项目里的技术，必须是很成熟的，（技术应用）十年以上可能是一个门槛。有人说技术更新换代很快，我一点儿都不这样想。虽然有不成熟的技术不断地涌出，但是成熟的技术，比如Unix，40多年，C，40多年，C++，30多年，Java也有将近20年了……，所以，技术并不多啊。还有很多技术比如Ruby，Lisp这样的，它们没有进入主流的原因主要是缺少企业级的应用背景。如果要捋一个脉络下来，70年代Unix的出现，是软件发展方面的一个里程碑，那个时期的C语言，也是语言方面的里程碑。当时所有的项目都在Unix/C上，全世界人都在用这两样东西写软件。Linux跟随的是Unix，Windows下的开发也是C。这时候出现的C++很自然就被大家接受了，企业级的系统很自然就会迁移到这上面，C++虽然接过了C的接力棒，但是它的问题是它没有一个企业方面的架构，否则也不会有今天的Java。C++和C非常接近，它只不过是C的一个扩展，长年没有一个企业架构的框架。而Java出现之后，IBM把企业架构这部分的需求接了过来，J2EE的出现让C/C++捉襟见肘了，后面还有了.NET，但可惜的是这只局限在Windows平台上。这些就是企业级软件方面语言层面这条线上的技术主干。另外一条脉络就是互联网方面的（HTML/CSS/JS/LAMP…）。这条脉络和上述的那条C/C++/Java的我都没有放，作为一个有技术忧虑症的人，这两条软件开发的主线一定不能放弃。无论是应用还是学术，我都会看，知识不愁多。何必搞应用的和搞学术的分开阵营，互相看不起呢？都是知识，学就好了。技术的发展要根植于历史，而不是未来。不要和我描述这个技术的未来会多么美好，用这个技术可以实现什么花哨的东西。很多常青的技术都是承前的。所以说“某某（技术）要火”这样的话是没有意义的，等它火了、应用多了咱们再说嘛。有些人说不学C/C++也是没有问题的，我对此的回应是：如果连主干都可以不学的话，还有什么其他的好学呢？极端一点，我要这么说：这些是计算机发展的根、脉络、祖师爷，这样的东西怎么可以不学呢？大部分学校虽然都会教授C，但是教得都不好。学校喜欢教微软的东西，老师好教学生好学。我不是说Windows不好，但那不是计算机文化的主干，那只是微软的主干、PC的主干。整个计算机文化的主干肯定是源起于Unix/C这条线上（注意，我说的是文化不是技术）。我也写过很多与Unix文化相关的文章，大家可以看看我写的“Unix传奇”。学校教的大部分都是知识密集型的技术，但是社会上的企业大部分都是劳动密集型的。什么是劳动密集型的企业呢？麦当劳炸薯条就是劳动密集型的工作，用不到学校教授的那些知识。如果有一天你不炸薯条了，而要去做更大更专业的东西，学校里的知识就会派上用场。有人说一个语言、一个技术，能解决问题能用就行了，我不这样认为。我觉得你应该至少要知道这些演变和进化的过程。而如果你要解决一些业务和技术难题，就需要抓住某种技术很深入地学习，当成艺术一样来学习。我在“软件开发‘总之，这主要看你职业生涯的背景了，如果你整天被当作劳动力来使用，你用到的技术就比较浅，比较实用，但是如果你做一些知识密集型的工作，你就需要用心来搞搞研究，就会发现你需要理论上的知识。比如说，我之前做过的跨国库存调配，需要知道最短路径的算法，而我现在在亚马逊做的库存预测系统，数据挖掘的那些东西都需要很强的数学建模、算法、数据挖掘的功底。我觉得真正的高手都来自知识密集型的学院派。他们更强的是，可以把那些理论的基础知识应用到现在的业务上来。但很可惜，我们国内今天的教育并没有很好地把那些学院派的理论知识和现实的业务问题很好地结合起来。比如说一些哈希表或二叉树的数据结构，如果我们的学校在讲述这些知识的时候能够结合实际的业务问题，效果会非常不错，比如：设计一个IP地址和地理位置的查询系统，设计一个分布式的NoSQL的数据库，或是设计一个地理位置的检索应用等等。在学习操作系统的时候，如果老师可以带学生做一个手机或嵌入式操作系统，或是研究一下Unix System V或是Linux的源码的话，会更有意思。在学习网络知识的时候，能带学生重点学一下以太网和TCP/IP的特性，并调优，或是能做一个网络上的Pub/Sub消息系统或是做一个像Nginx一样的web server，那会更好。如果在学图形学的过程中能带领学生实践开发一个作图工具或是一个游戏引擎，那会更有意思。总之，我们的教育和现实脱节太严重了，教的东西无论是在技术还是在实践上都严重落后和脱节，没有通过实际的业务或技术问题来教学生那些理论知识，这是一个失败。中国人中庸的思想，入世和出世，每天的工作就是入世。举个例子，在上海的时候，给交通银行做项目的时候，每周休息一天，早九点到晚十点，每天工作12个小时，这样的工作持续了一整年，没有节假日，项目上的技术也没什么意思。当时我晚上十点回到住处，还想学一些C++/Java和Unix/Windows的技术，于是就看书到晚上11:30，每天如此，一年下来学到很多东西，时间没有荒废，心里就很开心。我觉得当时是快乐的，因为有成长的感觉是快乐的。现在的我，工作、写博客、养孩子，事情其实更多。我早上7:30起床，会浏览一下国外的新闻，hacker news，tech church，reddit，highavailability之类的站点，9点上班。晚上6、7点钟下班，开始带孩子。十点钟孩子睡了觉，我会开始重新细读一下这一天都发生了些什么事情。这个时间也有可能会用来看书。学习的过程我是不喜欢被打断的，所以从十点到十二点，家人都睡了，这正是我连续学习的好时间。可能从晚上11:30开始，我会做点笔记或者写博客。我现在对酷壳文章的质量要求比较高一些，所以大概积累一个星期的时间才可以生成一篇文章。每天我大概都在一两点钟才会睡觉。没办法，我有技术焦虑症。但是觉得这样的生活很充实，也很踏实。另外，任何一门技术玩深了，都是很有意思的。有些人形成了一个价值取向，“我只做什么，绝不做什么”。前段时间有一个刚来亚马逊的工程师，他原来做的是数据挖掘推荐系统，后来公司重组要他做前端，他不肯。我觉得，前端后端都是编程，Javascript是编程，C++也是编程。编程不在于你用什么语言去coding，而是你组织程序、设计软件的能力，只要你上升到脑力劳动上来，用什么都一样，技术无贵贱就是这个意思。回到问题，怎么才能享受到快乐呢？第一，入世和出世要分开，不要让世俗的东西打扰到你的内心世界，你的情绪不应该为别人所控，也不应该被世俗所污染，活得真实，你才会快乐。第二点就是要有热情，有了热情，你的心情就会很好，加班都可以是快乐的，想一想我们整个通宵用来打游戏的时光，虽然很累，但是你也很开心，这都是因为有了热情的缘故。我承认我活在我的精神家园里面。我推荐大家看一下王小波的《我的精神家园》，这篇文章对我的影响非常大。看了这篇文章，你就会明白我为什么要躺在自己的池子里，如果不想被这个社会所污染，就必须要躺在自己的池子里。做大众是很容易的，做自己是最难的。当你老了的时候，回想过去，如果你是为自己而活的，你总会觉得很踏实。可能有人会觉得我偏激，没关系，为什么要所有人看法都一致呢？世界因为不同而美丽，多元化的价值观并不冲突。最后送大家一份自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、设计模式、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、Linux使用及内核、数据库、Redis....等主流的编程学习书籍。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：书单： 最后给大家分享一下计算机学习路线大全，很多同学照着这个路线学习进了拿到大厂offer",说一个大家可能不太听过的——梁肇新。这是百度百科上的照片，无论从发量还是气质上看都像是一个乡镇企业家，而不是一个程序员，但是这并不影响他作为中国顶级程序员的地位。在2000年至2005年的电脑城，新配的电脑不一定会装office，但是一定会装豪杰超级解霸，而它的作者就是吃到美味的鸡蛋不会去问哪只鸡下的，普通用户也不会去关心,"能做出好产品又能引领企业走向巅峰的人，很厉害求伯君，浙江绍兴人。1988年，一个人，一年时间，写出了和微软抗争了十多年的国产办公软件“WPS1.0”。年仅25岁，他就成为了程序员出身最富有的创业者，他的名字早已写进中国软件的历史！是那个时代最让程序员们振奋的“英雄”，无可争议的成为“中国第一程序员”！个人历程：1964年，出生于浙江绍兴一个贫苦农民家庭；1984年，国防科大信息系统专业，分配到河北某仪器厂；1986年，仪器厂辞职，加入北京四通公司；1988年，加入香港金山公司；1994年，在珠海创立珠海金山电脑公司；2011年，从金山退休，副董事长雷军接任。个人成就：WPS之父：以一己之力写出WPS1.0，填补了我国中文字处理软件的空白；创立了中国第一个电脑游戏《中关村启示录》；金山之主：带领金山上市，成为当时最富有的程序员；IT导师：金山中，走出了雷军、民族软件导师：中央电视台《东方时空》在比尔·盖茨来中国的当天，请求伯君谈民族软件以及WPS97如何抗击Word。评价：雷军：写求伯君的文章虽然很多，但令人满意的还没有。网友：走进当年的IT圈，到处都是求伯君2.0版。雷军，湖北仙桃人。写过加密软件、杀毒软件、财务软件、CAD软件、中文系统，焊过电路板，干过黑客，大学四年课程两年修完，就靠开发软件成了百万富翁，业界公认的劳模。做发布小米1.0需要拍视频，陈年、个人历程：1969年，出生于湖北仙桃；1991年，毕业于武汉大学计算机系；1992年，进入金山软件做程序员；2010年，创办小米科技；2011年，后接任求伯君任金山CEO。个人成就：与同事合著《深入DOS编程》、《深入Windows编程》等书；个人信仰：20年前我是一名软件工程师，到今天依然是！外界评价：：其实雷军是大家口中程序员的一个最佳典范，永远的精力充沛，时刻都想着去 build，并且能够及时的修复过程中的 bug，有着这么严谨的程序员思维，这也是他现在这么成功的原因。猎豹CEO傅盛：雷军无论多成功，永远一副低姿态。第一次见他，他手里拿个小本，问我当时做360安全软件的成功经验，我说什么，他就用笔都记下来。李彦宏，山西阳泉人。学霸级的人物，持有“超链分析”技术专利，甚至奠定了现代搜索引擎的发展方向。年少钟爱戏曲，一度被剧团相中，但在中学时还是回归课堂，以阳泉市第一名考上北大！个人历程：1968年，出生于山西阳泉，他在家中是五个孩子中的唯一男孩，少年时钟爱戏曲，曾被剧团录取；1991年，毕业于北大信息管理系，随后赴美完成计算机硕士学位；1994年，进入华尔街道·琼斯公司，担任金融信息系统设计工作；1997年，进入硅谷著名搜索引擎公司Infoseek(搜信)公司；2001年，回国创立百度；2011年，成为大陆地区的首富。个人成就：曾经为道.琼斯公司设计的实时金融系统，仍被广泛地应用于华尔街各大公司的网站；最先创建了ESP技术，并将它成功地应用于Infoseek/拥有“（李彦宏称之为搜索引擎第二定律，利用检索关键词在一篇文章中出现的频率多少进行网页排序的技术，被称为第一定律）个人信仰：技术本身并不是唯一的决定性因素，商战策略才是真正决胜千里的因素。外界评价：合伙人徐勇意：李彦宏不仅有技术背景，还对商战有敏锐的直觉和出色的判断。网友：做为一个技术人，他曾经非常优秀；做为一个商人，他有很高的“觉悟”。做出最好产品的人很厉害一个孤独的人，生命中只有音乐、网球和代码。每当有争论，都是张小龙以长时间的沉默来结束。个人历程：1969年，出生于湖南省邵阳市；1994年，华中科大电信系硕士毕业，随后在广州一家互联网公司工作，业余时间开发出Foxmail；2000年，张小龙以1200万元的价格把Foxmail卖给博大公司，并任公司副总裁；2005年，腾讯收购Foxmail软件，张小龙“陪嫁”到腾讯公司。个人成就：利用业余时间，独立开发出Foxmail，以1200万元被博大收购；为对抗雷军“米聊”，带领13人仅用一个月上线微信，不到两年爆发2亿用户。如今微信估值8000亿，是支付宝的两倍。个人信仰：我说的是错的！外界评价：柳传志：做微信的那个小孩张小龙，确实做得漂亮，我没见过，据说也是比较宅的人。好友和菜头：张小龙是一个生性孤独的人，烟瘾很大，“是广州深夜里最大的Kent消费者”。不管他愿不愿意，几乎所有互联网公司，都曾向他宣战！做过5年程序员，但真正赚到人生第一桶金却是从炒股开始，最精彩的一单是将10万元炒到70万元。个人历程：1971年，出生于广东汕头一个小村子；1993年，毕业于深圳大学，主修计算机及应用；随后进入深圳润迅通讯公司，专注寻呼机软件开发；1998年，与2004年，腾讯在香港交易所主板挂牌上市；2018年，47岁的马化腾成为全球华人首富。个人成就：与朋友合作开发风靡一时的股霸卡；开发中文版的ICQ，即后来的QQ。个人信仰：用最笨的方式去领悟编程，用抄代码来培养感觉。外界评价：马云：“QQ的攻击永远是悄悄的！”王石：马化腾能把握好底线，一个工程师控，凌晨两点发微信他还能马上就回。敢于折腾的技术人很厉害史玉柱，安徽蚌埠人。人们熟悉史玉柱，有些是因为脑白金，有些是因为巨人网络。他不仅是个成功的营销家，而且曾经是名出色的程序员。开发汉卡赚到了人生第一桶金，又因巨人大厦转瞬欠了几个亿。人生大起大落后，还清所有债务，重新回到IT行业，现在已是网络游戏界里的老大之一。个人历程：1962年，出生于安徽蚌埠；1984年，浙江大学数学系毕业，分配至安徽省统计局工作；1989年，深圳大学数学系研究生毕业后，下海创业；1991年，成立巨人公司，推出M－6403；1994年，投资保健品，第一个产品是""脑黄金""，后为投资巨人大厦，几乎破产，欠债2.5亿RMB；2000年，再度创业，开展“脑白金”业务；2007年，旗下的巨人网络于纽交所上市，成为在美发行规模最大的中国民营企业；2016年1月，带领全公司展开手游研发。个人成就：M-6401桌面排版印刷系统；创业之初，一己之力编写文字处理软件，关键模块用汇编语言完成，软件代码数达到50万行。外界评价：网友：“负债过亿，东山再起的故事，注定也是中国商人史上最为“成功”的失败样板。”新浪网：”绝对是当今中国商界最具争议和最具传奇色彩的人物。坚定理想主义的人很厉害，四川成都人。一个成功地由顶尖技术人才转型为全面的管理者，带领搜狗，快速成长为中国用户量第三的互联网公司。个人历程：1978年，出生于四川成都；2003年，清华大学计算机研究生毕业；1999年，兼职加入初创的ChinaRen公司（中国最大的校友录网站）2000年，搜狐收购ChinaRen，王小川进入搜狐公司；2003年，正式加入搜狐，任高级技术经理；2005年，晋升为搜狐公司副总裁；2010年，搜狗CEO。个人成就：使用分词技术，使 ChinaRen 成为当时第一家能通过“机器自动生成相关新闻内容”的网站。个人信仰：像老板一样思考，像员工一样工作外界评价：：小川在少年时期就是计算机的天才。网友：也只有王小川这种具有「钝感力」的创业者才能够坚持下来，花好几年，一级一级组建自己的产品架构。张一鸣，福建龙岩人。从着装到谈吐都特别“不文艺范儿”，用他的口头禅来说：“实用，是第一重要的。”想挖人时，会拿出计算器，告诉对方如果加入今日头条收入增多少，有多少股份“如果你跟了XX，看上去是不错，但你的股价会翻十倍吗？”个人历程：1983年，出生于福建龙岩；2005年，毕业于南开大学软件工程专业；2006年，进入2012年，今日头条上线，上线仅90天，积累用户1000万；2012年，创办字节跳动；  2016年，推出抖音；2018年，卸任今日头条CEO。个人成就：创造性地将机器算法和大数据技术应用于媒体传播2018年，字节跳动估值750亿美元，成为全世界估值最高的创业公司， 国内仅次于阿里巴巴和腾讯的互联网第三强。个人信仰：对于编程，更注重的是实用性，数学才是对事物之间最基础关系的描绘。外界评价：网友：“你似乎很难从他的身上，找到其他创业者对金钱的那种渴求，他更像是一个自由纯粹的冒险家。”丁磊，浙江宁波人。一个坐飞机头等舱，不穿机舱的拖鞋而是自带；江湖里出了名的酒量惊人，环保乐观，跑着步上班，既朴实无华又富于传奇。个人历程：1971年，出生于浙江宁波一个高级知识分子家庭；1993年，毕业于电子科技大学，毕业后回老家电信局做公务员；1995年，跳槽在skybase做软件开发；1997年，创办网易；2000年，网易在纳斯达克上市；2003年，丁磊成为中国首富；2015年，投资拍摄电影《少年班》个人成就：设计网易的整体架构；和个人信念：勇于“归零”外界评价：网友：“丁磊是一个有着浓重复旦情结的人，注定又是一个理想主义者。”不为外界所动的人很厉害周鸿祎，湖北黄冈人。曾对着一张印有键盘的纸张，敲敲打打，因为没见过真正的计算机。他叛逆、口不择言，不忌惮与人剑拔弩张，被封为“流氓软件”之父。他曾说：“我觉得除了百度和腾讯，以及他们的打手，都是我们的朋友。”个人历程：1970年，出生于湖北；1995年，西交大管理学院硕士毕业；1995年，就职方正，从普通程序员一路提任至总经理；1998年，创建3721公司，6年后被雅虎以1.2亿美金收购；2004年，任雅虎中国总裁；2006年，创建360公司；2016年，带领360从纽交所退市，完成私有化；个人成就：推出了3721“网络实名”，开创中文上网服务之先河；创办360，成为免费安全之父。著书：《智能主义：未来商业与社会的新生态》《周鸿祎自述:《颠覆者：周鸿祎自传》个人宣言：要成为一个合格的程序员，怎么也要写个10万到15万行以上的代码。如果连这个量级的代码都没有达到，那说明你还不会写程序。外界评价：网友：“也许周鸿祎是中国互联网界最像乔布斯的人。一方面有着特立独行的叛逆思维，另一方面也有对产品的极致完美追求，还有他不满意时就口不择言的直率。”不了解王志东的人觉得他放弃了软件，而后又被网络所抛弃。但了解王志东的都知道他最钟爱的还是软件，而且现在他同时拥有了网络。个人经历：1967年，出生于广东东莞；1988年，毕业于北大无线电电子学系；1989年，特邀进入北大计算机技术研究所；1993年，任四通利方总经理；1998年，创建新浪网；2000年，新浪纳斯达克上市；2001年，王志东被迫离开新浪网，同年创立点击科技。个人成就：用时7个月，研发出“中文多窗口图形支撑环境”；用时一年，独立完成国内第一个实用化Windows3.0中文环境——BDWin3.0，一度引起各界震惊。外界评价：网友：“现在的新浪和王志东显然是没什么联系了，但是唯一可以确定的是他最爱的还是开发、是软件。”张朝阳：“他不够敏感，对于到眼前的危险、对腹背受敌的处境不够敏感。”从唯一历任苹果、微软、谷歌、高管的华人职业经理人、IT界黄埔军校的校长、大学生导师、创业者之父、抗癌战士到人工智能布道者，李开复的身份一直在变化。但始终未变的，是他在语音识别、人工智能、三维图形及网络多媒体等领域，享有的声誉。个人经历：1961年，出生于台湾，现移居北京；1972年，赴美国读中学；1983年，哥伦比亚大学计算机科学系毕业；1988年，获得卡内基梅隆大学计算机系博士；1990年，任苹果公司全球副总裁；1998年，加入微软公司，创立2005年，加入Google，任全球副总裁兼中国区总裁；2009年，创办创新工场，曾被《麻省理工学院技术评论》评为“最火的计算机实验室”；2013年，患淋巴癌。个人成就：运用统计学原理开发出世界上第一个“非特定人连续语音识别系统”，把语音识别率从40%提升到96%，当年被《商业周刊》授予“最重要科学创新奖”；著作：《做最好的自己》《微博：改变一切》《与未来同行：李开复文集》《一网情深与学生的网上对话》《世界因你不同：李开复自传》《向死而生：我修的死亡学分》 外界评价：创新工场创始人之一在技术领域有的人，凭一己之力开发出了几千人使用的开源软件有的创造了网络的神话，至今为传诵有的授业解惑，或教室、或出书、或博客他们影响了一批又一批的后来者他们的名字经常被提起 这是一群对技术有着最纯真热爱的人蔡景现，一个更广为人知的名字是--“他是阿里巴巴初创团队三名工程师之一，非科班出身的他被称“码神”，又称“阿里扫地僧“。1976年，出生于浙江苍南一个农民家庭；2000年，从杭州大学生物系硕士毕业，加入阿里；2014年，成为阿里合伙人；2017年，41的他以26亿身家登上胡润财富榜。对于技术，既懂C/C++，又懂Java内核；既可以深入技术底层，又能切入到高层业务领域，从前端到后端，独自维护淘宝搜索引擎长达5年。突然得知成为阿里合伙人时，蔡景现当场蹦出一句“让我当合伙人？可我只会写代码啊！”只会写代码的纯粹，让他全票通过合伙人票选！阿里CTO张建锋：“多隆（蔡景现）做事一个人能顶一个团队。江湖人称""浩哥/耗子哥""，对新手总是热心的帮助，一位百科全书类的前辈。大学毕业进入云南工行，不满体制内的缓慢困滞，两年以后去了上海。由于技术不够，面试时遭遇羞辱，于是疯狂学习，专注底层，C++，JAVA，UNIX/LINUX 等，后成为大牛！曾于Amazon中国任研发经理；曾在阿里巴巴北京研发中心任资深专家一职；曾在阿里巴巴核心系统专家组，从事阿里云ECS相关的虚拟化平台的开发工作；现为MegaEase创始人，为企业的高并发高可用架构，提供一整套的技术解决方案和产品。“我不是高手，我也不是牛人，我只是在跟随着我的兴趣和喜好去学习一些技术。”“他是一个对技术和生活都有非常深地思考的人，很多观点都能让人醍醐灌顶。”上海财经大学世界经济博士研究生，自学网站制作，依靠自己对技术的热情，不断学习钻研，成为一名IT业内专家，也是中文互联网上的知名blogger。不仅热爱技术还热爱写作，同时还热衷于开源。学经济学的人里写博客最好的，写博客的人里写IT技术最透彻易懂的！2008年取得上海财经大学经济学博士；毕业后当了老师，任教于上海金融学院；2014入职阿里巴巴。译著：《黑客与画家：硅谷创业之你Paul Graham文集》《《异常流行幻象与群众疯狂&困惑之惑》等博文在网上的权重很大，IT系列教程影响了极大一批初入编程的小白！“他像是一个我从未谋面的引路人，过褒或过贬，都是不客观的！”""喜欢阮一峰并不是因为他有多厉害，而是因为他不停的学习，乐于跟我们分享。他写的博客总是通俗易懂，对于我们这些小白来说是很珍贵的财富""，世界著名计算机学家，应该说是一位非常重量级的“程序员”。他是唯一 一位获图灵奖的华人。在伪随机数生成、密码学和通信复杂度多个领域，都做出了巨大的贡献。与第一位获得诺贝尔奖的华人一样，姚期智在此之前是美籍华人，2017年才恢复了中国国籍。1946年出生于上海，幼年跟随父母到台湾，以麻省物理学博士身份转攻计算机。2000年，获得计算机界最高荣誉“图灵奖”；2004年，归国任教于清华大学，创建姚班、智班。如今71岁高龄的姚期智，致力将半生心血付于年青的学生们身上。创建了理论计算机科学的重要次领域：通讯复杂性和伪随机数生成计算理论；奠定了现代密码学基础，在基于复杂性的密码学和安全形式化方法方面有根本性贡献；解决了线路复杂性、计算几何、数据结构及量子计算等领域的开放性问题并建立全新典范。“姚先生是这个时代的科学诗人，他身体力行教会我如何欣赏科学的美，如何创造美好的科学，如何许诺用科学，带领人类走进一个更美好的时代。”江湖流传一个小故事：一款名叫Clear的软件，在正式推出的第一天，就登场了Apple Store付费榜和总榜第二。而身在美国的中国留学生尤雨溪，仅仅花了两天的时间，就copy出了一个html5版的Clear，并且放出了源代码。出生于江苏无锡，在上海读完高中后，2005年到美国主修艺术史，硕士主修美术设计与技术，开始慢慢接触编程。毕业后曾就职于 Google Creative Labs 和 Meteor Development Group。由于工作中大量接触开源的 JavaScript 项目，最后自己也走上了开源之路，现在全职开发和维护 Vue.js。一己之力打造Vue.js框架；构建了Web界面的Javascript库。“尤雨溪做出了近几年最火的前端框架Vue.js，是开源世界华人的骄傲。”信息学世界冠军，让“人工智能”不再冷门的时代领袖 ，他的身上光环无数。曾经获得上海交通大学校长奖、江苏苏州人，1983年出生，1991年，在苏州古城区读小学二年级的戴文渊，考了三次数学全班第一后，加入计算机兴趣小组。10岁开始写logo语言，学习C语言。在上海交通大学就读期间，带领三人团队夺得了ACM世界冠军和三个亚洲冠军，并担任ACM竞赛教练指导学生多次获得亚洲冠军。交大没有人工智能领域的老师，2007年发表的论文Boosting for Transfer Learning在迁移学习领域论文引用数至今排名世界第三；全世界首个提出“非监督迁移学习”概念的人；开创了“非监督迁移学习”这一重要研究方向；此外，他也首次提出了“翻译学习”（即“跨领域迁移学习”）和“迁移学习通用框架”等...2014 年，戴文渊和他的老师杨强成立“第四范式”，帮助企业提升效率、降低风险，获得更大的商业价值。港科大学杨强教授：“戴文渊是全世界最优秀的青年学者之一，是产业界、特别是中国产业界 AI 落地的杰出代表，对人工智能领域的发展帮助极大。”姚期智得意门生，公认大学生计算机编程第一人。有这么一个笑话，在编程界输入“教主”，会立即输出 “楼天城”。在程序猿界，其他人可以称得上牛X，但被冠以传奇之名的只有一个 ——「1986年出生于杭州，因为数学太差，所以选择计算机编程，高中后开始屡屡获奖，2004年保送清华大学计算机系。2006年，TopCoder（世界顶尖程序员）排行榜全球第三，中国区第一名；2008、2009 年，Google Code Jam （谷歌2012年3月18日，Facebook黑客杯」名列第三；2016年创立无人驾驶公司“只要有楼天城参加的比赛，别人就只能想着怎么拿第二。”“他是未来推动中国互联网产业发展的中流砥柱”--李开复江湖人称“春哥”，编程之路起于看不懂而抄书，就算如今已是罕见的编程高手，春哥依然逢人大力推荐他的抄书学编程之法。创立的OpenResty开源社区，获得了锤子科技一百万的捐赠。江苏镇江人，1999年，初中的章亦春第一次接触《结束淘宝量子统计的工作后，全心从事 OpenResty 等开源项目的工作；2017年，在美国创办了 OpenResty Inc. 公司。OpenResty的创造者（OpenResty ：开源的 Web 平台，用于开发高性能和高动态的 Web 网关或者 Web 应用。）“这是个不需要技术圈“网红”捧的务实大牛。一个牛逼的好人。是我见过的最Geek的工程师。”国际顶尖无线数据专家，连续创业者，写了34年的代码，如今50多岁，依然写代码。湖南长沙人，出生于1968年，初中时手拿一本《Basic语言编程》，从此走上编程之路；1986年，考入中科大，认为计算机太简单而选择力学系；1994年，美国印第安纳大学攻读天体物理博士；1997年起，在美国从事无线互联网的研发工作；2015年荣获全国优秀无线互联网专家称号；2008年创办和信，专注移动互联网IPPush和IP实时消息服务，2010年和信被台湾联发科收购。2013年创办快乐妈咪，专注母婴智能硬件和母婴健康服务，2016年初快乐妈咪被太平洋网络收购。2017年创办涛思数据，专注时序空间数据的实时高效的处理（存储、查询、计算等），研发出性能明显超越业内标杆产品的TDengine，可广泛运用于物联网、车联网、工业大数据、金融等领域。51岁的陶建辉是圈子里名副其实的“老炮儿”，把物联网技术，做成了业界无法忽视的开源生态。一个在网上搜PHP教程的初学者，华丽转身，成为PHP开发组核心成员，人称“陕西人，1998年，高中时期着迷网络，在网吧做网管，后被父母勒令退学。后来考上西安交通大学，调剂到计算机专业。研究生调剂到北京国际关系学院，信息安全专业硕士毕业。2006年第一次面试雅虎被拒，由此开始在技术上发力学习。后来担任Zend公司外聘顾问, 任职百度、新浪，现任PHP7的核心开发者，PHP5.4，5.5的主要开发者；作为PECL开发者，贡献了Yaf ( Yet another framework )，Yar ( Yet another RPC framework ) 以及 Yac ( Yet another Cache )、 Taint 等多个优秀开源作品；同时也是APC，Opcache，Msgpack等项目的维护者。“PHP继父”他是中国计算机产业界技术大牛，国防科大六院90级校友，是国防科大的传奇人物，努力推行开源，堪称中国开源第一人。生于1973年，少年时痴迷于游戏，后考入于国防科大计算机系；原TelTel公司的首席科学家，ChinaCluster的共同创始人、阿里云CTO，花名为正明；2016年，离开阿里巴巴加盟滴滴；现任滴滴高级副总裁、中国计算机学会技术前沿委员会主席。LVS（Linux Virtual Server）创始人；沉淀了CDN、TFS、Tair、Tengine、MySQL、JVM、Linux内核、图像搜索等技术和产品。“他有技术人员的气质，也有一些文人的感觉。”ACM世界冠军，为人十分低调，公司内号称“人肉逻辑机”不调试，一遍一遍看代码，就能指出某行代码有错误；爱看日漫，为此自学日语，最后能参与字幕组做翻译。中间持奖杯者为为人太低调，找不到资料开挂一般的存在、史上最强大脑、逆天宅男。上海人，是中国最早黑客教父，绿色兵团创始人，计算机信息管理专业毕业。其创建的绿色兵团注册成员最高达数万人，高手云集，可以说，那是中国黑客江湖大一统的时代！大学时偶然接触到了中华学习机，苦求游戏破解方法时，看到台湾黑客coolfire（绿盟创始人，2001年中美对攻领导者之一，红客运动发起者。每当中国被欺负，只能发表“严重谴责”时，红客们便开始了自己的反抗：将红旗插到DI GUO主义的每个网站头上。二十年前，是一个大侠，江湖里真正的大侠。不会轻易出手，但是一出手必会撼动江湖。“近二十年里，龚蔚始终不变的，是追求无限可能的理想主义者，是一名真正的黑客。”————————————————版权声明：本文为CSDN博主「微笑很纯洁」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：",,,,,,,,,,,,,
被公司卸磨杀驴能把代码删除吗？,,删除代码违法，但删除代码的注释不违法。删除代码违法，但使用奇怪的函数名不违法。删除代码违法，但调用乱七八糟的库不违法。删除代码违法，但加入无用的代码不违法。,驴要明白一个道理，被卸磨杀驴后，你把面粉毁了，那买下一头驴重新磨一遍就行了。但是你往面粉里加点脚皮屑，让老板吃，每次他吃的怪怪的，总觉得有问题，又不舍得扔了，然后一直吃。那才是最高效的报复。,想反抗又不敢反抗的时候可以试着加倍努力干烂活，撸起袖子加油干.....烂活态度一定要端正，水平一定要稀烂——我当年实习的时候，领导敢7点之后打我电话，我就敢10点打回去向他请示他敢10点给我打电话，我就凌晨1点给他回,删除代码你什么也得不到，除了泄愤外屁用没有不如在代码里埋点雷，最后还得请你回来修，要么就花大价钱重构注释里面可以下毒，原则就是把注释写的没有参考价值，可以不按照代码实际功能来写注释，或者把注释里的参数名称调换一下，最好再夹杂大量正确的废话，增加阅读难度活用变量大量使用语法糖和各种简略写法，比如六七个箭头函数裹在一行里高耦合低内聚，逼着别人必须极其谨慎的处理你的屎山内存能不回收就不回收了，等着它不写输入参数检查，只要调接口的时候参数有任何一点不对，马上崩就完事了把关键逻辑写成一个总之尽可能把你的代码写成一坨粘稠的屎山，这远比直接删代码来的更能恶心人,首先，屎山，bug，是合法的代码写的差是合法的代码中引用一个你自己的库(一般情况下)是合法的写的代码先不提交是合法的git合并时删掉一些代码也是合法的(合并代码又冲突嘛)写代码不考虑特殊情况也是合法的sql不防注入是合法的域名解析源站ip是合法的漏洞不修是合法的多用点停止支持的库是合法的多写点报错自动退出是合法的，什么参数错误管他什么直接报错判断写严格点是合法的，发现问题立刻报错而且不输出问题不写注释是合法的什么？公司用的是1.8的jdk？没关系，用最新的jdk是合法的，直接把编译完成的代码传上去突然又想到一个：写前端的兄弟们，用但你恶意删代码1.(可能)没有效果，gitsvn直接恢复2.如果删掉无法恢复那等着公司法务吧，违法的兄弟们评论区不看后悔一辈子,卧槽，你们都要埋雷给公司造成损失吗？我当年正常写就行。,十几年前我接私活，帮别人实施一个政务软件项目，合作方老板承诺1万的好处费。当时环境是后来担心的事情还是发生了。我遂告知对方删除map（map及坐标数据是我私人提供的，没备份的话删了就彻底没有了）、删除应用程序以及格式化系统os的时间计划安排。双方电话里相谈甚欢，互相给予对方温暖问候之后，我爽快的拿到了一张中行的支票。,劝开公司的，对各种技术人员好一点，如果你用有一个病毒，中招就会现实这个：程序员要是泄愤，删代码并不是好主意，在代码中加东西才是好方法。,接过一个项目功能很简单，但是防破解的功能我搞了一个星期然后给对方，每次操作软件会跳出框框说免费试用15天15天内未输入注册码的话保持调度通讯功能，但不能操作设备；不到3天就马上打款了,不能，这样犯法。但是代码质量不过关是可以的。你品你细品。,"删代码涉及到违法， 可能会被抓去啃窝窝头，得不偿失。但是在项目里面“一不小心”留几个暗坑，或者因为“技术菜”留下大坨小坨的“屎”，相信大家都是可以理解的。真是没想到，我居然被卸磨杀驴了。入职一家公司，转正不到一个月， 帮他们把框架搭建的差不多了，然后就没我什么事了。这操蛋的，早知道这样应该在框架里面""拉屎""的！一年后更。现在没啥事，就来说说这件事。这公司估计就是招我进去帮忙搭建系统框架的，框架搭建的差不多了，卡着我工作还没满半年的时间节点把我辞退了，很爽快的给2N，谈判过程不超过5分钟。他们很清楚，我也心知肚明。过了一两个月吧，这家公司的技术人员联系我，说框架有问题，他们实在是搞不定，希望我帮帮忙，我找了个借口敷衍过去了，没理。随后又找我好几次，说顶不住上面的压力了，再搞不定他也要走人了。我心软了，指点了几句，告诉他解决思路。这个问题呢，其实我是知道的(当然不是我故意埋雷的)，只不过当时忙着完善日志收集和监控系统，那个问题想着放一放，后面再抽时间解决的。只是他们太着急了，还没完全搞完，就图穷匕见了。",抗战的时候，游击队剪电话线的时候，剪断的时候还得再给它“接”起来，让外表看不出来。,额。核心层用C++写的。大佬告诉我，不要用指针。然后我就把指针的星号都藏了起来…为了效率，也为了懒省事，数据交换经常用数组越界溢出的方法。,我打的人生第一份工，就被老板卸磨杀驴了。我的报复是：我在中午没人的时候，把干活的三台电脑都下载了一个东西，这个东西很神奇，只要一关机，就会重启，然后进入DOS系统格式化非系统盘外的所有硬盘，而且是悄摸摸的，显示器上给你显示的是在检查硬盘错误，让你别动。公司是个广告公司，当时所有的资料都保存在那三台电脑里。这是2001年的事儿了。没有人怀疑是我干的。因为上午的时候断了一次电，3台电脑都非正常关机了，他们都认为是断电导致的硬盘损坏。,学学Twitter的程序员，被裁掉又被马斯克请回来,,删掉干嘛？不如“加点啥”。删是一种破坏性行为，是对公司财富的侵害。而“加”是正常的工作行为，拿工资就是做这个的。,某个前东家有一段代码，在各种机缘巧合之下，是我直接在生产环境一气呵成写完的，除我以外没人敢动，离职六年后还有人打电话过来问我细节。真是……太高看我了，写完不到一个月我基本就忘光了 ,千万不要这么干,// 补充下，有的人说我捞，这种有问题的代码一眼就看出来了。那我就分享个我自己的事吧：上学那会自己找的实习，开发什么智慧农业，无非是c51挂几个传感器，读到数据用lora传出去。我哼哧哼哧做了一个月，有一天主管跟我说，想看看做的咋样，让我把源码，还有搜集到的资料都压缩给他看看（小作坊没有搞svn.git这种）。我一想不对啊，你直接看我的开发板不就行了？怕不是要卸磨杀驴吧，我就随便在几个数据采集的地方，加几个随机值，随机值名字起得挺正式，看起来就是校正值啥的，给主管发过去。后来过几天我就被开了，某天qq收到一个人加我，说大哥我是接替你的人，用了你的程序，感觉有点不对劲啊，数值忽高忽低，他们一堆人研究好久也不知道咋回事，我说不知道啊，反正我用是正常的，主管知道的。哦对了，那个项目还是挂在某省会的什么智能研究院下面，看似高大上，实则水的一批。～～～～～～～～～～～～～～～～最好不要这样做，因为员工在公司的成果，属于公司财产，删代码可能负法律责任。不过我听说有的程序员水平太次了，写的代码烂不说，还经常搞出一些极难复现的Bug。比如说在一些不起眼的地方，加个随机数，外面还套个极小概率的if条件。这样的程序员简直是公司之耻，我劝题主以此为鉴，多去修炼技术，少想歪门邪道。
Bug是如何产生的？,最好可以通俗的解释一下！,项目：学校里的一次月考。程序：确保学生规范答题并交卷，返回学生的分数。教务处开始提需求：要考语文和数学，高一高二高三分开来考，根据教材出题……考务处开始写程序：要出这些题目，给学生分配考号，派监考老师防作弊……普通用户行为：填写自己的唯一爬虫：张三一天之内补考了1024次，把题库记的一清二楚。身份验证漏洞：李四填了王五的考号替考。DDos攻击：王六克隆了王七、王八、王九……王一〇二四把考场挤的水泄不通。兼容问题：选择题只能用2B铅笔涂，老王用中性笔涂卡结果无法识别。社工攻击：小明请校长喝酒，要到了试卷原题。：老师收卷时滑倒，试卷飞出去找不到了性能问题：老师需要3天的时间改试卷，这3天响应速度很慢。木马攻击：小红帮助老师改卷，实则悄悄把自己的成绩改成了100。逻辑bug：“春眠不觉晓，_____。”既可以填“处处闻啼鸟”，也可以填“处处闻啼鸟。夜来风雨声，花落知多少”。：教务主任走进考场，告诉同学们“春眠不觉晓”后面只能写五个汉字，否则不给分。抛出异常：改卷时发现学生字迹太丑无法识别。异常捕获：规定看不清的字迹返回0分。,领导：修个房子。程序员：好的，马上开始打地基！领导：你看那隔壁那木房子就没有打地基，不要在小事上浪费时间，一个月水平面上面什么都看不到，你kpi不要了？一层房子修好。领导：我觉得两层楼的视野好，再加一层。程序员：可是我们没有地基，重新打地基要时间……领导：你一楼都修好了，照着再修个一模一样二楼很难？还要很多时间？二楼修好。领导：天天走路累死了，你再修个电梯。程序员：可是……领导：没什么可是的，地基不稳？就在房子边上搭个电梯就行了嘛，不稳拿根木棍撑一下，这都不懂？电梯修好。领导：我觉得顶楼再加个游泳池就好了。程序员：这个结构行业翘楚的房子也不支持呀！领导：那不正显得我们牛逼么？修快点，夏天要来了。游泳池修好，看着摇摇欲坠的房子，程序员跑路了，领导找来新人继续。领导：我觉得游泳池水不够满，你加点的，一楼光线不好你在墙上打个窗户。新人：好的，没问题领导，马上加一桶水，马上砸墙房子塌了，电梯倒了，游泳池垮了……领导：真是个废物，就让他加桶水，居然能把房子弄倒了，你说这是多没用？新人：我真的就加了桶水，我怎么知道为什么。,老婆给当程序员的老公打电话：“下班顺路买一斤包子带回来，如果看到卖西瓜的，就买一个。”当晚，程序员老公手捧一个包子进了家门……老婆怒道：“你怎么就买了一个包子？！”老公答曰：“因为看到了卖西瓜的。,bug产生于人力有时穷。知乎上看到的段子，但我不记得是在哪个答案了。。侵删：一万个测试工程师在酒吧门外呼啸而过一个测试工程师走进一家酒吧，什么也没要一个测试工程师走进一家酒吧，要了一杯啤酒一个测试工程师走进一家酒吧，要了一杯咖啡一个测试工程师走进一家酒吧，要了0.7杯啤酒一个测试工程师走进一家酒吧，要了NaN杯Null一个测试工程师走进一家酒吧，要了2^32杯啤酒一个测试工程师走进一家酒吧，要了一杯烫烫烫的一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了。。,我以前玩过一款游戏，叫做里面有个巨大的BUG.在新手村打怪，一只怪最多掉5块钱。组队平分，每人1块。但组队可以组满6个人。于是当你组满6个人打一只怪的时候，这5块钱就不够分了。因为1是货币的最小单位。于是惊悚的事情就出现了。系统开始每人几十万，几百万的分。这个BUG就是个逻辑错误。最后，因为刷钱被封号了。,请出一组有点久远的图片。---------,飞机上，乌鸦对乘务员说：给爷来杯水！猪听后也学道：给爷也来杯水！生气的乘务员把猪和乌鸦扔出机舱。乌鸦笑着对猪说：傻了吧？爷会飞！这时，猪伸出翅膀扑哧扑哧问道：你说什么？（,哪有什么bug，都是规则内的可行解。,之前在网上看到一组关于程序员的漫画，觉得用来回来这个问题很贴切！侵删-----------------------------------------我是分割线-----------------------------------------请各位大佬支持一下我的这篇原创问答：,根据我从业十五年的经验，bug一共就三种原因：我艹，没想到！我艹，打错了！我艹，你没告诉我啊！,,,,,,,,,,
将 bug 译作「蚆蛒」，将 debug 译作「揥蚆蛒」，音译兼意译，是不是很巧妙？,因为 bug 和 debug 已经属于 IT 领域专有名词，错误和除错这种词义宽泛的词语不足以准确描述其特指软件相关的含义，中文译名也「专有」一下未必不可行。专有名词不会污染常用语。不全是开玩笑，一个尝试，想试试那些所谓不能翻译的英文是不是真的不可译。至于怪诞感，为了与常用语明确区别，怪一点是有意为之。专有名词，只用于特定场景，与常用语区分是必要的。英文并不是没有同义词来指缺陷和错误，但他们故意用虫子这个词，就是为了让它成为特指的专名。【 bug 】：【 debug 】：（计算机程序的）除错。【 蚆 】bā ：貝屬，海蚆。《正字通》：“蚆，貝屬。今雲南邊侇貨多用貝，呼爲海蚆。本草作𧵅。” 蚆、貝，一聲之轉。古時以貝殼作貨幣。（bug 即是码农的麻烦，也是码农的经济来源。）【 蛒 】 gé：蛴螬。又名蛭蛒。金龟子的幼虫。《方言》：“蠀螬，梁益之間或謂之蛒，或謂之蛭蛒。”【 金龟子 】：昆蟲綱，鞘翅目，金龜子總科昆蟲的通稱。已知3萬餘種，中國有1300餘種。徐珂《清稗類鈔》：“金龜子，俗稱金蟲，體長六七分，金綠色，背有甲，六足，種類甚多。有一種害稻者，其幼蟲色白，是為蠐螬，棲稻根，齧食之。及化為成蟲，仍食稻葉，旋產卵於葉鞘，農家苦之。”（农家苦之：码农苦之。）【 揥 】dì ：捐弃，去除。（词根 de：取消、除掉、去掉）,翻译得挺好这仨字光看着就能感受到一股腥膻咸湿的下次别翻译了,阁下不会就是翻译出的那位姐吧。————更新，应要求添加一下这些词的解释：：robustness，robust意味健壮，强壮，应该译为健壮性，稳健性，强壮性，稳定性均可，译者不知何故要音译，由于词汇太过古早，也可能是译者当时不懂这个词的含义，总之结果导致其在国内教材中广泛使用，造成了大量学生的迷惑。：原文是reduction formula，即：应为半衰期。：应为上古卷轴。：cherry就是樱桃，译者非要音译出另一个物种来。delicious apple就是苹果，译者非要把delicious音译为地厘蛇，再加上红字，听起来像是“红地”这个地方的物种“厘蛇果”。：原文是“The Times”。并没有“泰晤士（Thames）”这个发音，不仅丢失原义，还让人对该报纸的发行地产生误解。：应为巴勒斯丁，见答主“：tautology，原义“同义反复”，纯音译导致的怪异翻译。：Socket，原义插座，接口。：见用户“西瓜回路遮断器”的评论：formula使用了错误的意义。把property映射为attribute，译者（可能是机器）翻译时没有考虑其意义。：parent delegation，应为父类代理，当然，对于某些用户，非要译作：Unitary Matrix：见知乎用户SZnCu的回答：：默认值，原文default，不知道为什么要翻译出“缺省”，同时失去了缺少，默认两个意思。：见用户Dead Drop，标准译法：固定情报投放点。见用户黄金大亨的回答原文bug，译作“蚆蛒”，一晃眼还以为是浏览器没安装UTF-8出乱码了。,我觉得不如叫 涤 洗涤，去掉悖 不合理，冲突，错误格 格式，标准，规范，结构段落悖格 谐音bug，导致错误，冲突或不合理的代码结构。我觉得比你编的那个更加复合翻译的三要素，,我觉得不巧妙。因为你这样文字太多了，文字笔画太多就不好写了。可以简化一下。例如bug，音是：八各。为了简化，可以把“各”简化成为“𠂊”，八字没必要简化了，就两笔。为了区分汉子和翻译，咱们可以把这部分文字增加角标。最终成品：bug→バグ,挺不错的，一眼就有种字符集出错的感觉,目前来说，我见过最秀的英文翻译是战锤的四大邪神名字的翻译，读音相似的同时还彰显了人物设定（而且字没那么生僻）给路人来段背景和介绍恐虐：Khorne，代表是颅骨与鲜血，设定中代表难以遏制的好斗，丧失心智的疯狂以及淹没战场的滚滚血海，信仰恐虐的自然都是战场狂战士。纳垢：Nurgle，代表瘟疫和无穷无尽的死寂，世界上所有瘟疫都是在纳垢精心调配下产生，纳垢接纳所有信徒，不论老丑、善恶。色孽：Slaanesh，代表放纵享乐堕落和感官刺激。欲望，骄傲和自我放纵是所有追随他的人的标志。奸奇：Tzeentch，混沌四神里最多变狡猾的邪神。有人说奸奇来源于希望，象征着智慧。但那早已被邪恶的混沌所扭曲，奸奇的希望来源于受害者身处绝境无限的绝望与千方百计的求生，智慧则来源于那无穷无尽的算计与阴谋。另外附上台湾（港译）译名：恐虐-Khorne-哥达/科恩纳垢-Nurgle-乐高/奈格色孽-Slaanesh-沙莉士奸奇-Tzeentch-相比较下是不是看得出来译者很用心更正：根据评论区 答主举的例子其实是港译，至今仍是gw港版官译，偏向粤语音译 大陆锤圈港译一度和台译分庭抗礼，现在很多老锤友都更习惯叫色孽.“感谢评论区 先说背景，绿皮是战锤世界里的兽人（Orks），属于比较欢乐，每天只知道打打沙沙沙沙沙的种族，可以理解为绿色并且爱打架的小黄人，绿皮的科技基本全内置在dna里，并且带有搞笑角色属性，最爱做的事就是四处捡垃圾然后拼个不稳定但是能用的武器出来整天打打杀杀的兽人信仰搞哥（Gork）和毛哥（Mork），搞哥野蛮而狡猾，毛哥狡猾而野蛮绿皮的终极泰坦单位叫大脚（Stompa）来源于英语单词跺脚（stomp）国内一般戏称这玩意叫古巨圾，虽然没音译不过蛮传神的另外还有绿皮的技术科研单位技术小子（Mekaniak boy简称Mekboy），这玩意的高级版本叫做大技霸（Big Mek）兽人聚在一起会发动一次声势浩大的Waaaaaaagh！！！，而他们的头领则叫做哇博士（War Boss）,我见过把【bug】翻译成【幺蛾子】的，比你这靠谱多了,把Coca-Cola翻译成蝌蝌啃蜡的人该不会也是你吧！,你自己大可以尽情的使用。但是建议不要跟我们讲。这个答案纯是被这个破问题气乐了、骂了句街，没想到有人看。多说两句。当我看到题主的这种想法，我直接想到的是另外另一件事情。有些人在使用手机的时候，不喜欢设计师精心调教好的默认字体，而是换成了花里胡哨的个性字体。我今天刚收到过这种人发来的屏幕截图，一打开就感觉到两眼一黑。美当然是我们要追求的，照片，电影，诗词，小说，家居装潢，有得是地方让我们追求美。没必要在专业词汇和手机字体这样的、极大的影响着信息的传递效率和准确性的地方，牺牲效率和准确性去追求美。或者说，这些地方的高效所带来的益处，完全能让我们在其他地方得到更多“美”。比方说，一本修仙小说，说有一种灵猴，能在太虚之中操控复杂的大型法术，叫乘虚猿；但是太虚中会滋生干扰法术运行的精怪，公的叫蚆，母的叫蛒；乘虚猿每天必须要去除蚆蛒来使法术正常运行。这个梗虽然够烂，但毕竟是在小说中，我是乐于见到的，因为小说就是追求娱乐的地方。但题主说的是“不全是开玩笑”“是不是很巧妙”，洋洋自得的认为，这种巧妙就是我们应该追求的东西。其实错了呀，管你总之，把生产力的东西归于生产力，把美的东西归于美。,恭喜你，发现了,看大家的评价，有一种小学男生花几天想了个自以为很酷的网名然后被嘲讽的美。,我记得有个问题是“文字有没有,百度搜索,挺好，挺好笑的。如果真的把 bug 显示成蚆蛒会有人觉得你电脑出了 bug。,有一种网易云初中生翻译的歌词的美,你的出发点很好，但是你先别出发。,要我说，不如debug，就叫屯屯屯锟斤拷烫烫烫今天，在我的程序中发现了一个锟斤拷烫烫烫，我把它屯屯屯了。一看就懂好吧。,不好。应该把bug意译为“虫豸”。debug叫“除虫”。,有一种片假不留的美,这个我现在都把ChatGPT称为谈天吉皮提了，全因为出处不明的这个模因：团队一起出去吃饭我不喝酒，说不然晚上就要「coding drunk」了，是因为这个模因：在当代网络环境，新词的内涵可能只占了词价值的一小半，还有大半价值在于这些外延，如果你也能做一些此类模因，造出的新词才能真的获得高价值，得以传播。
王小波的计算机水平有多好？,王小波的计算机水平到底有多好，在王小波自己的小说中，王小波非常骄傲地说，写书的软件都是自己编写的，王小波是自学的还是教的？都会什么语言？,以下文字都是我本人写的。为了让阅读方便，减少模糊性。我在文中以第三人视角描述。 而不用“我舅舅“，”我姥姥“，”我大舅舅“，”我小舅舅“之类的称呼。 这是一个十几年软件工程师的习惯而已。 我舅舅是王小波。我是个禁不住人肉的老百姓。资质平庸。 王小波一篇《我是怎样做青年思想工作》的杂文在我青年单身适龄的年代，给我个人做了最大程度的广告。算是他老人家留给我最宝贵的遗产之一。 除此之外，还有他那台用了很久的PC，在他去世前一年送了我。    他是汇编高手。自己用汇编写了    他人生最后几年，WINDOWS 3.2开始普及。然后是    他人生最后一年，多媒体开始普及。光驱，声卡，2D加速卡普及。95-96年他开始和我合计做多媒体出版。原因现在想起来很悲伤 ------ 他的书很难在大陆出版 。 他不得不想办法让他的作品能够让更多人看见。而平时维持生计，只能忍着严重的痔疮，每日给各种杂志写杂文稿件。 多媒体的兴起，让他感觉也许可以利用他的技术优势，自行制作电子出版物。配上插图，音乐，用电子书籍方式可以让自己作品为大众所见。他给我看了已经制作了一部分的DEMO。就和现在用Micromedia多媒体制作软件制作的电子多媒体制品很像。电子书内容是    我大学后和王小波比较近。那几年每周末都在他母亲家相聚。他母亲5个儿女，只有他1个人在国内。于是他就经常住在母亲家，怕老人一个人，是个大孝子。母亲家旁边有个    目睹了他后半截人生（从我记事起到他去世，中间他出国很多年）。感慨很多。王小波有个八叔，当时双手打算盘，无比聪明是个天才。年少夭折。王小波父亲因为搞逻辑学，引起毛泽东注意，被毛接见聊了一下逻辑学的学术相关问题。69岁心脏病发独自倒在家中过世。王小波去世方式和他父亲一模一样。区别仅在更加年轻。王小波哥哥在受文革影响挖了10年煤。后来去美国博士念,这个月有两个人被拿出来隆重纪念，都是早就计划好的。一个是张国荣，一个是王小波。你得承认不少人是在张国荣自杀之后才听说并喜欢上这个“哥哥”，王小波也一样，97年他死得很突然，名声也在身后突然爆炸了起来。1994年，王小波的1994年也是中国互联网元年，中科院高能物理所第一个接入了互联网，丁磊从同学那里借来了一个账号登上了yahoo，张朝阳从MIT回国，如果你在那个时候搞一个互联网研讨会，估计能到场的也就是20多人。说不定里面就有王小波。知乎网友Vernsu把王小波作品、书信里面和计算机、互联网有关的信息全都摘录出来做了一个网页，大家可以点击 一共18条，其中14条写于1991年春节后到1993年春节前这两年时间里。1992年“更新”最为频繁，王小波写了自己做从中能看出来王小波是在美国读研究生期间接触的计算机，回国之后在人大负责一个计算机室，但是因为软件奇缺，又要做一些社会学研究的东西，所以开始自己接触编程。王小波先后学了因为王小波的如果当时有互联网让王小波可以把这些文字共享出来，那他可以称得上是中国第一代科技博客作者。但是1995年，中国接通互联网后不久，王小波的“科技博客”却停止更新了，最后一条是：王小波如果不是这么耿直的Boy，他本来是有机会创业的，在他的“科技博客”里面，他已经看出来很多商机，、雷军的第一桶金都是王小波还关心了一阵硬件的发展，研究了国内进口电子产品的政策。因为穷，所以锻炼了自己维修装配电脑的动手能力。如果继续朝着这个方向发展，王小波应该在中关村盘下一个档口销售、维修兼容机，说不定就没有后来刘强东的故事了。可惜王小波很快见异思迁，开始把精力放到了文学上面，我们知道写下了《更不要说今年是内容创业的风口，王小波若是活着，即使已经是接近65岁的人，也符合超级IP的设定，出来拿投资，然而王小波毕竟是个耿直的Boy。我们没办法验证他如果创业究竟会发生什么，历史不容假设。但是王小波在《我怎么做青年的思想工作》一文里面写过他的一个外甥姚勇（姚勇听舅舅的话考上了清华，毕业做了程序员，但是没放下摇滚梦，帮水木年华做了一段时间音乐。07年他接受所以就在07年，这个耿直的Boy上赶着颠儿颠儿去给马化腾写了《QQ炫舞》，全盘抄袭了但是毕竟是王小波的外甥，抄完了在所以你看，王小波要是生在了今天，说不定就跟这个外甥一样，去给人写网络小说、编段子、做游戏去了。做得不顺，也会吐槽骂娘，骂得比别人都好看。王小波说过，我们创业者，究竟是像他的那种人，还是不像他的那种人？----------------------,说说我自己的理解。王小波，新中国历史上最早的程序员之一，小说圈中的Geek！早在90年，王小波就独立研发了靠买软件赚了一大笔钱深受很多中关村老板的喜爱纷纷邀请他做当时的马化腾还蛰伏在深圳电信，腾讯还没有影子，马云还在思考这位且看下文早在90年代初，王小波就接触了计算机。1988年，他毕业于美国匹兹堡大学东亚研究中心，获硕士学位，那时就知道早期，因为国内应用软件缺乏，尤其是中文编辑器和输入法。很喜欢写文字的王小波，就琢磨着，能不能自己编一套出来。说干就干，爱捣鼓东西的王小波就利用闲暇时间学习了FORTRAN，汇编，C等各种语言，接着又学习了数据结构，算法的相关知识，还有编译原理，终于创造出了中文编辑器和输入法。在当时，这两个软件中的任何一个，都是大牛级的Geek才会去尝试的东西。这对一个当时爱写文字的他来说，简直天方夜谭，而且，类似的中文编辑器也就通过卖软件，王小波也赚了一些钱，这算是最早的商业模式了。很多中关村老板，纷纷向王小波投去橄榄枝，邀请他加入公司做一名资深程序员，但被他一一拒绝。身后这台就是王小波花大价钱买的286。王小波高兴得一塌糊涂，特意拍下了一张合照。在当年3月份的日记中对此有翔实的记述，行文之间，甚是得意：当问及王小波为什么要自己开发文字编辑程序？王小波很淡然地说，这种坚韧就像是领导让你去改别人写的代码，看了几分钟之后，你一摔键盘，“费劲，不如自己重新写一个！”在《似水柔情》一书中，王小波骨子里那种执拗精神展露无遗：“我觉得我还是我，我要拥有一切—— 读过《黄金时代》、《这就是王小波，敢说、敢写，简单，率真，是荒唐的时间里真诚的存在。这也是王小波和李银河爱情故事的缩影。管他世外有多乱，天真的还是天真，不合时宜的依旧不合时宜，天真得有点轴的银河陪王小波，度过了那个鸡飞狗跳的年代。在第二次和李银河见面时，王小波就向提出交往的要求。李银河在多年之后坦言到，“被其表白后，感到有些难以接受，王小波却浑然不在意，还能趁机调侃有着《爱你如爱生命》一书，记录了王小波对李银河说过的情话：王小波给予银河的爱，是自由的，真诚的，率真的，像极了他自己。纵观王小波的一生，他对于互联网的深度体验，与其在文学上面的尝试是可以等量齐观的。王小波的互联网经历，几乎涵盖了今日程序员生活、工作的各个方面。然而，混熟了互联网的他，对其已提不起兴趣。或者说的可以更直白点，王小波学编程就是为了赚钱养活热爱写作的他。王小波选择了写作。1992年从北京大学、中国人民大学辞职，王小波成为自由撰稿人，陆续出版了《黄金时代》《白银时代》《青铜时代》高晓松曾评价王小波，“以我有限的阅读量，王小波在我读过的白话文作家中绝对排第一，并且甩开第二名非常远，一个比高晓松还丑的男子，却被高晓松称之为可就在1997年，4月11日，一个很平常的日子，王小波心脏病突发，一个人悄悄地离开了世界。在他去世的1997年，也是中国的这一年，联想超越IBM成为中国个人电脑市场霸主，张朝阳创办了搜狐前身爱特信网站，丁磊在广州创办网易，或许我们可以打开脑洞，如果王小波不死，他除了文学创作，在互联网领域，可以去混论坛成为老榕、陈彤一般的人物，可以去创业成为但这都不是王小波。这些都是王小波。,王小波在杂文集“我现在既不是化学家，也不是数学家，更不是物理学家。我靠写文章为生，与科技绝缘——只是有时弄弄计算机。这个行当我会得不少，从最低等的汇编语言到最新潮的C++全会写，硬件知识也有一些。但从我自己的利益来看，我还不如一点都不会，省得整夜不睡，鼓捣我的电脑，删东加西，最后把整个系统弄垮，手头又没有软件备份。”-------------------------------------------不得不说，《沉默的大多数》这本书读起来真的是拍案叫绝：,计算机水平很高，恶搞水平更高，他不高兴的时候把命名都写成caonima1，caonima2，caonima3……,补充 ：  王小波与他的好友间关于计算机和统计的一部分书信摘要。,《姚勇：现在的社会要钱不要王小波》 转载自：原文链接:       作为外甥，他眼里的王小波是什么样子呢？这个王小波对他有什么样的影响呢？或许，能告诉我们另一面的王小波。       出事前不久，姚勇说，舅舅嘴唇的颜色已经变紫了，电话中也透露出不舒服的感觉。出事前两天半夜一点，姚勇接到姥姥的电话，老人仿佛有预感似地说，找不到王小波，可能是出事了。“当时我们都没当真，后来姥姥的弟弟出去寻找，在昌平的房子发现了尸体。”        4月11日早晨7点，姚勇还在睡觉，父亲接到了电话。姚勇匆匆和父亲一起赶到姥姥家，帮忙给剑桥网站管理员写信找远在英国读书的舅妈       “被王小波教育过的外甥”——在王《        “这孩子爱好摇滚音乐，白天上课，晚上弹吉它唱歌，还聚了几个同好，自称是在‘排演’，但使邻居感到悲愤；这主要是因为他的吉它上有一种名为噪声发生器的设备，可以弹出砸碎铁锅的声音。每逢考期临近，他就要熬夜突击准备功课；这样一来就找不着时间睡觉。几个学期下来，眼见得尖嘴猴腮，两眼乌青，瘦得可以飘起来。他还想毕业后以摇滚音乐为生。”        临近下班的姚勇疲态尽显，不时摘下眼镜狠狠地揉搓眼眶；尽管如此，面对镜头的眼神还是有些失去焦点。每天精神高度集中地工作以及经常熬夜写代码，让“疲惫”成了这个32岁IT青年的常态，一如其他所有努力拼搏、处于创业阶段的IT人士。        姚勇留着长发，这可能是他“IT青年”形象的唯一“破绽”。若干年前，他曾甩动长发，用吉它弹出令人兴奋的音符，引发台下阵阵尖叫。后来他一度成为国内著名演唱组合“水木年华”的主唱，他的形象出现在“        姚勇的又一重身份是王小波的外甥，或者按照他朋友的说法，是“被王小波教育过的外甥”——在王《我怎样做青年的思想工作》（以下简称《思想工作》）一文中提到的“天资聪明，虽然不甚用功，也考进了清华大学”的那个外甥，就是姚勇。在王小波生前的最后几年里，姚勇是和他关系最密切的亲人之一；也正是因为王小波，促成了姚勇从手捧吉它到手握鼠标的转变。        24岁前，姚勇的简历基本按照音乐人的标准写就——小学开始学习小提琴；初中进入军乐团、交响乐团；高中喜欢摇滚，苦练吉它；大学成立了自己的乐队“泡沫”，担任主唱和主音吉它。“这孩子爱好摇滚音乐，白天上课，晚上弹吉它唱歌，还聚了几个同好，自称是在‘排演’，但使邻居感到悲愤；这主要是因为他的吉它上有一种名为噪声发生器的设备，可以弹出砸碎铁锅的声音。”王小波在《思想工作》中这样写道，“每逢考期临近，他就要熬夜突击准备功课；这样一来就找不着时间睡觉。几个学期下来，眼见得尖嘴猴腮，两眼乌青，瘦得可以飘起来。他还想毕业后以摇滚音乐为生。”最后一句话，令姚勇的父母大为头痛。        当时姚勇的家人在国外，每周他都要去姥姥家，也就经常能遇到侍奉老人的王小波。而高中阶段就读过《黄金时代》并颇以为“爽”的姚勇，和这位和蔼可亲的舅舅很有共同语言。于是，王小波在《思想工作》里说，“不管我愿意不愿意，我都要负起责任，劝我外甥别做摇滚乐手，按他所学的专业去做电气工程师。”         时隔十多年，姚勇已不记得舅舅当时确切说了什么话来说服他，大意是“人在什么阶段应该做什么事情”、“要花多少精力去学习”、“不必非得那么辛苦搞艺术”、“走上社会的起点要高，不能大学毕不了业”等等，都是些亲人之间常见的教诲。但姚勇说他听得进去，因为舅舅把他当朋友，平等、平和地对待他。        王小波去世后，姚勇才读到《思想工作》，兼之当时他觉得自己艺术天分不够高、音乐之路也很难走，又重新回想起舅舅劝服他时说的话，品出另一些深意。在《我的舅舅》一文中，他说：“作品的灵感只能是来自于作者本身对于痛苦的体验。当我察觉到这一点时，我的舅舅感到了身上的责任。他不希望自己的经历在下一辈中重演。”        于是24岁后，姚勇的重心从20年来一以贯之的音乐，转向他同样喜欢且看上去更有前景的IT。       说到IT，在姚勇看来，舅舅可是个编程高手。在他刚进入清华电机系，对编程还不熟悉的情况下，舅舅已在用C＋＋写自己的中文输入系统、中文编辑器和多媒体系统。姚勇说，生前，舅舅一直在做自己的电子书——他希望他的书为更多人了解。       姚勇和舅舅几乎没有代沟，很多时候他觉察不出舅舅有长辈的样子。对姚勇来说，王小波更多的是一位可以热烈讨论技术、科技触角灵敏的和蔼长辈，而非一位作家——印象中，王小波几乎不在家中讨论他的书稿，姚勇笑称，可能是因为他的第一部小说《唐人秘传故事》并不入文学功底同样深厚的家里人的“法眼”，认为它不是商业小说，无法糊口；而他的小说、杂文，大多都是在他去世后出版，家人才得以看见。        姚勇说，舅舅在家里不太说话，本身也不是健谈的人，可能只有在和他聊起电脑技术的时候，话匣子才被打开。        姚勇回忆，他常常周末去姥姥家，舅甥两人就坐在计算机前，讨论电子小说和编程细节。有时候王小波会向他展示编程的进展，“敲完键盘，歪过头来冲边上的我嘿嘿一乐”，有时“和我一道痛骂微软公司的险恶——在他们发明的Windows操作系统下编程犹如噩梦。”        一次，姚勇在舅舅面前抱怨父亲不给他买计算机，舅舅表示理解，并当即决定去买一台奔腾，把自己的电脑送给姚勇。“我乐得不行，简直可以说是欢天喜地。”王小波还亲自把这些自己用了好多年的家当抱下来，给姚勇打了辆面的，“在关上车门时，我冲他招手，心中充满感激之情。看到他微笑着站立在马路边上缓缓向后退去的身影，心中闪过一阵阵温暖之意。”        1997年，王小波去世前的最后一个春节，是和姚勇、姚勇的姥姥一同度过的。和往年一样，舅甥二人在院里放了鞭炮，迎接崭新的一年。之后，从小身体不好的姚勇受长期扁桃体化脓的困扰，打了一个月点滴，还与父亲因学业的事情闹僵，正躺在床上无人照料时，王小波打来电话安慰，让姚勇好好照顾自己，还担心着他的学业问题，“怎么样也得拿到毕业证呀”。        出事前不久，姚勇说，舅舅嘴唇的颜色已经变紫了，电话中也透露出不舒服的感觉。出事前两天半夜一点，姚勇接到姥姥的电话，老人仿佛有预感似地说，找不到王小波，可能是出事了。“当时我们都没当真，后来姥姥的弟弟出去寻找，在昌平的房子发现了尸体。”         4月11日早晨7点，姚勇还在睡觉，父亲接到了电话。姚勇匆匆和父亲一起赶到姥姥家，帮忙给剑桥网站管理员写信找远在英国读书的舅妈李银河——当时email还不是那么普及。在打开电脑的时候，姚勇哭了，那里有舅舅未竟的《         那年秋天，姚勇制作了一个网站，把舅舅的一部分作品放在上面，纪念这个教育他人生道理、和他讨论程序、带领他进入网络世界、影响他之后人生观价值观的人。         1998年，姚勇留校做了程序员；2000年，跟朋友一起开发网络游戏3D引擎；到了2002年，姚勇用“潦倒”来形容自己的状态，身边的钱刚够吃饭；与此同时，“水木年华”的一名成员离开，清华校友        2003年，        也就是在2003年，某天晚上十点多，        几年间，姚勇胃病频发，事业也有过不顺利。“现在的社会不需要舅舅说的智慧、趣味，要的是钱。舅舅的思想曾经在我脑中存在，现在也一直都在，但你面临的责任、处境、解决问题的方法等现实，逼迫你不能用这些思想解决问题。但经历了那么多，我的信仰仍然是我的兴趣，是我坚持的动力所在。”        还是在2005年12月31日这篇博客中，姚勇写下如此一段：“身边所有被资本支撑的产品，都呼啸而过。伴随着几十亿几十亿滚滚而来之后又滚滚而去。只有我，依旧在原地，抱着最初的那些童真不放。青春逝去， 再不复返。有时醒来想，为兴趣而活，真这么错么？想实现一点梦想，真这么难么？”,Fork without any hesitation.,高中时候泡图书馆，偶然翻到了他的杂文集。 一口气全部看完，发现他理科很好，又写书，会编程，留过学，想法之类的符合我的取向，当时就感觉打开了新世界的大门。当时高中做化学实验，想起他吸氨水我就想笑。看了看书的封面，还特别年轻，心想，这人不错啊。结果翻到了最后一页，发现97年就走了。。。。。。。当时心里一万句我操。。。有些难过，觉得他的文章什么时候都不过时。后来看完了全集，看了书信，难过，唉，我心中的,具体怎么好我不知道，但是20年前就能写出《从internet说起》，就知道他比好多人高到不知道哪里去了。。。,Programming language 也是一种语言，语言功底好的人，写程序也很有天赋，很庆幸王小波没有选择去写代码,1996年发表,"Show me the code, 有强烈的想看王小波代码的冲动，想来这些代码在计算机圈中比他的文字还珍贵，还能""人肉""到这些代码吗？",不值一提的长处罢了,王小波的技术到底够不够牛，我是无从了解的，因为那个时代也许已经与比他更牛的人存在的，但是他的精神是现在依旧可以在IT民工身上看到的，我们是技术流，只为了技术，一个纯粹的技术疯子他不懂得他的创举能带来多少利润他只知道可以更方便自己的使用，他追求更高层面的技术，永不停歇!,“我现在软件写得出神入化，大概8088上能做到的一切，我都做到了。自己觉得该告一段落，去写小说了。”,我一直都以为王小波只会天马行空，装深沉。。没想到他还会,今天读《爱你就像爱生命》  看到这页我实在是看不下去了 我是来看情书的啊 前面各种爱 各种信任 各种撒娇啊 怎么画风不太对了……然后开始怀疑人生……毕竟我一个交互设计的研究生，一直赖着不学编程……所以，今晚我去图书馆借了一本编程入门的书……大一的时候，偶然在图书馆找到了小波老师的一本书，当时我对小波老师的认知就是：一个我还没读过他作品的作家，所以我就找了一本读。忘了是《青铜时代》还是《然后这么多年，再也不看小波老师的书（心里阴影太大），最近是因为关注然后又查了一下，1978年高考，考上人大，这最起码说明还是有碾压当年的同龄人能力的吧……美国匹兹堡大学……然后大部分人的知道的身份是作家……反正这两页 我也看不懂……最后：完全0基础、文科编程小白，求好心的大神指点入门（数理化生一个比一个差）谢谢,他是毕业于北大数学系深藏功与名。,总之人家是觉得写书和写程序都能挣钱，不如写书去了。
怎样评价《数码宝贝》第一部中的泉光子郎的编程水平？,,受到 虽然这段代码会自己乱动并让甲虫兽进化，显得狂拽酷炫吊炸天，但其实和第十集出现的代码是一模一样的（而动画里表现出的效果明显不同）。第十集里的代码反而看得更清楚一点。根据这张图抽出文本如下：如果想重新原汁原味地运行这段代码，首先要明确它的语言和版本。注意到注释和变量定义的语法更接近在资料检索过程中主要发现两个问题。一是和这段代码语法相近的语言太多，比如第二个问题是，如果仔细看光子郎的代码，你一定会陷入困惑，因为这段代码根本不像是有一个统一的语法规则。这里举两个栗子：然而，在我就要放弃之际，一位国外先行者的博文给了我曙光（尽管文章里有一些错误）事情要追溯到1987年，夏普发布了一款型号为X68000的PC。作为那个年代的电脑，搭载了10MHz的这个系列的最后一款电脑在1993年发布（配置有所增强），而《数码宝贝》第一部是在1999年放映的，可见在动画制作时期，光子郎的代码也不算特别陈旧。为了实际地跑一下这段代码，又经过一番艰辛的努力，我搞到了X68000的模拟器，还有操作系统Human68k（version 3.02）的磁盘映像，现在还能找到这些东西，真的要感谢极客阿宅们的默默奉献。在模拟器里一开机，感觉就成功了一半：为了能使代码顺利运行，还需加载SX-WINDOW映像。最后终于找到X-BASIC，一字不差地键入了光子郎的代码：执行run命令，按代码要求输入一个1到2之间的浮点数值，下面就是见证奇迹的时刻了！我不禁望向窗外的那只放屁虫，它仍在很悠闲地晒太阳，很遗憾我的甲虫兽并没有进化……原因很简单，这真的只是一段随机生成「coast」轮廓的代码。初始输入是一个阈值，从视频里看，显然阈值越高「海岸」越险峻，阈值越低「海岸」越平滑，很有可能是摘取了当时哪个游戏里地图生成器的一段源码。所以，导演又糊弄事呢？为了跑这段代码，我查到了一些资料和工具，在此罗列一下，有兴趣可以看看。最后话说回光子郎的编程水平，这段代码的难点主要在于用递归实现了分形图形的绘制，虽然没什么特别神秘的地方，但还是需要一定程度的编程技能和数学知识。原理上很像我之前绘制谢尔宾斯基三角形的代码：但是光子郎当时好像上小学四年级？而且在动画里，这段程序的输出是这样的，光子郎最后靠这个成功还原了他和美美所在的迷宫。嘛，单从这里看，感觉能进科大少年班就是了……彩蛋：当年,"2020年，光子郎用Python打开了数码宝贝世界的大门，也象征着我们的青春结束了。不说别的，就看他写了什么。坐标是数码宝贝第一部的第五集这是和 光子郎用来进化甲虫兽的代码发现这大概像一段VB代码。不敢确定。根据诸位大佬的研究，光子郎的代码是X-Basic破千了！！ 十分感谢各位大佬的抬爱。在各位大佬的指正下，把这个看不清楚写错的文本修正一下。转文本如下：对这段代码的个人理解如下：定义一个当 s<1 或 s>=2	s = input(""ratio 1 to 2"")s = (s-1)/10+1screen 估计是一个类？不知道有什么用大佬指出 这是一个屏幕控制命令sqr 估计是定义四个浮点数调用调用又一个自定函数 line 接受6个参数最后程序建了模所以估计是一个这里声明前面的fractal函数 这还是一个前面不知道变量s是啥所以这个代码从这里开始可读经过大佬指出，s变量是x2,y2值的一个参数四个浮点数这是求两点距离的公式 l 是两点距离如果这个距离小于2 或者 sp>=9画条线后返回？rnd 应该是随机数函数递归调用在这里根据编程语言的通性，笔者用python大概重构了一下这份代码。希望能够进化我的舍友。基于前辈和大佬，对这份代码进一步修改：运行结果如下：的结果：甲虫兽表示身体发烫。充满力量。愿伟大的祖国繁荣富强，国庆节快乐。","————————————————————————友情提示，本文配合此音乐服用效果更佳：有句话叫做不看广告看疗效，我们就直接来看看光子郎都有过哪些优秀操作吧。：1.成功分析出了动力室的程序，并且用程序手动进化了甲虫兽（技术宅威武）。2.成功获取遗迹的地图，并且还建立了语音通讯来指导美美如何走出这个迷宫一样的地方。3.分析了发现希望徽章后出现的那个山洞里面的程序，直接得出了数码世界是建立在现实世界之上的结论。（我觉得这段是光子郎最神的一幕。）4.发现了5.基本上找出了石盘上卡牌摆放的内在规律。（之前在水底，玄内说的那些东西也基本上只有他才能完全理解，最后干脆单独和他说。）6.成功设置好了（你看不见我~你看不见我~你看不见我……）7.连接了8.通过查询玄内老人给他的数码宝贝图鉴，光子郎发现了9.虽然一开始由于使用电脑造成暴露目标，但是光子郎很快就把他和太一的方位变成了”禁忌的多重存在“让敌人一头雾水。10.没错，重头戏来了。在剧场版《看一个人的技术水平，可以看和他交流的都是些什么水平的人（光子郎自己也说过，在数码世界里最希望的事就是回到家上网发邮件给他的朋友）：当然了，更diao的在后面，这水是有多深…小试牛刀，几下子就成功连上ISDN网络。在由于地狱使者兽入侵导致掉线以后，通过卫星电话连接上了外国节点再次进入了网络。最后的关头，光子郎意识到BOSS的速度太快导致无法锁定，直接快速把巨量的邮件全转发到BOSS的邮箱，于是，BOSS卡机了……，被10.剧场版里的夏天过去了，在第二部的故事里光子郎依然风头强劲，多次发挥重要作用。仅靠一张杂志照片就大概分析出了一乘寺贤家所在的大体位置（细思极恐）。提出只要有D3整个第二部里的光子郎，基本上分析与联络玄内的事情大部分都是他在做，作为一代二代补充性质的广播剧给第二部主角做知识辅导也是经常的事情。比如解释数码宝贝的合体进化（他还专门为此新做了一个词：“Joint + Progress=Jogress”），又比如下图里向11.而在第二部的剧场版《超恶魔兽的反击》里一开始，光子郎就充当了一个召集者的角色（毕竟网络世界要是出了什么异常肯定是他最先知道的）。在好了关于他的事绩基本上说得差不多了，不得不提的是他还有一个非常可贵的品质：。第一集开始就在自己一个人摆弄电脑。太一觉得“电脑敲一下就好”，被光子郎赶紧拦下了。还是唉…并且作为一个光美党，我要先去哭会儿…：由于只注意遗迹里的文字，不理会美美，结果人家都气哭了，说他是个笨蛋。（一声叹息）不过也就是在这个岛上，美美明白了光子郎研究文字的意义，光子郎也明白了不能单纯靠电脑的运算。于是到了第二部的剧场版里大家就玩得很开心了…总之不管别的了，反正技术宅你今年一定要把美美给追到手啊听到了吗！加油！QAQ新PV出了，美美早已看穿了一切，哈哈。————————————————————————————————《我们的光子郎依旧是操作犀利,意识超前,输出恐怖。距离第二部已经又过了3年，人类世界再度出现迷之怪物。八个孩子们再度聚首，不得不说光子郎还是那个最能透彻地分析情况的人啊（这时要是能再响起技术宅专属BGM就好啦）：第二，（不过在这里还是要小小吐槽一下，你们倒是好好听光子郎讲的啊…果然光子郎的水平已经进化到了大家都不明觉厉的程度了吗？……诶诶，太一跟阿和怎么又吵起来啦。扶额）（还有阿助啊……你其实是专程来虐狗的吧！~我也想问，对方是人类吗…【喂！）(把光子郎都惊呆了…)（哈哈哈此刻大家的表情都神同步了）好了，接下来光子郎开始蓄能了，大家赶紧做好心理准备。先是和阿武聊天的时候，表示自己早已是买买买的一员了（按照剧场版的设定那还是在05年啊）。（其实光子郎你的小心思啊，其实大家都明白的啦…）接下来就又是光子郎的秀操作时间了，为了挑选好看的衣服，他开发了一款“光子郎环游世界”（大雾）软件。即使宅在家里也可以各种衣服换着穿啦。（哈哈，甲虫兽你真是为光子郎操碎了心啊）好啦，镜头一转，我们又来到了……嗯，看来美国网友真的是没白交啊。前方核能预警！看到这儿的时候我已经不由自主地献上了膝盖…一个电脑制作的虚拟空间可以快速地了存入和取出数码宝贝，简直就像是自己造了一个“数码世界”一样啊。这时光子郎的帅气程度我感觉已经超越分析出数码世界奥秘那集了。终于，就在光子郎的办公室里，数码宝贝总算是有了媲美隔壁棚相信不少人会有一个疑问，太一明明把护目镜送给了大辅，为什么在Tri.又戴上护目镜了呢？嘿嘿，答案就是光子郎熬夜只睡了三个小时给太一做了新的护目镜！技术宅亲手制作的护目镜当然不止是用来耍帅的。戴上以后才发现另有玄机（谷歌赶紧开发这样的应用吧，哪怕只是模拟的也好啊）而太一也正是通过这个故弄玄虚装神秘的阿尔法兽出现了。光子郎马上动用电脑里的图鉴（肯定也是优化过的了，还带扫描分析的）。只可惜相关数据还是太少了。是的，第一章里光子郎的表现就是这么抢眼。但我还是要说！光子郎你就不要再各种迷之脸红啦，赶紧就从了美美吧！你看看连阿助都有女朋友了（喂！），你到底还在等什么呢？众人：有情况加油啊光子郎！明年再见！————————————————————————————————光子郎依旧充当着的技术核心作用。总是能第一个知道有突发情况出现并且及时地通知给大家。并且一直在根据最新情况分析这次危机的原因：说到这个感染的问题啊…喂！数码兽你们又在乘机卖萌了！萌死我算了…哈哈不过他们也不用太担心，因为光子郎也不是毫无准备的啊：在收到一封神秘电子邮件后，他进行了解析，果然又是与数码世界有关的信息。不过答案真正揭晓，又是在之后的事情了。在扭曲消失以后光子郎及时地打开了观测数码世界的窗口（虽然不能够进入，但是在数码世界的数码兽能听到电脑那头孩子们的声音）：呐呐呐，至于光子郎和美美的事情呢…怎么说呢…光子郎说了句“美美太以自我为中心了”。美美的心里明显是很不好受的（当时第一反应：？？？我去，官方你不要这样…）嘛。不过乐天的美美还是在大家（特别是哈哈一副要面试了的表情：哈哈哈光子郎你还是蛮帅的。不过不要老是害羞啦勇敢一点吧！你看美美多大方啊。这章，光子郎也陷入困难了，虽然他可能已经算是孩子们里面知道的最多了。数码兽们，还是被感染了……而且还不止一只，甚至光子郎也清理不出头绪……光子郎开始没日没夜地钻研，几近崩溃的状态。没办法，这集他是主角，真正的考验来了。当然光子郎毕竟是光子郎。从这句话里就能够看出来。感觉甲虫兽的话是互文，“希望”对应的是光子郎的“知识”。终于，光子郎调查清楚了！错位的发生是因为原本的二进制被篡改成了一个数码数据无法处理的计数法。而光子郎很快也通过数据分析知道了感染发生的根源最后关头，光子郎还在错位空间里创建了一个备份场，不单能使数码宝贝不被重启，还能剔除感染。可惜最后一个都没有留住，哭瞎了QAQ调整好了数码世界的坐标（之前也是他一直在联系众人再回去）图鉴再度发挥了作用就这样，被选召的孩子们又一次前往数码世界展开了冒险……光子郎的故事，未完待续。",,,,,,,,,,,,,,,,,
为什么祖传代码被称为「屎山」？,,一个有趣的事情，一个哥们上班时忽然怒气冲天，大声质问这TM谁写的代码，这么明显的bug都能出，还不写注释，当时项目组的码农们都心惊胆战，不敢说话，害怕把自己揪出来示众。项目经理听到发话了：XX，你查一下这哥们：我已经在查了....过了几分钟......这哥们：不可能吧，这怎么可能呢？大家都凑了过去，发现这段代码是这哥们一年前自己提交的。为了避免过度尴尬，大家都没再提这个事情。---------------------------------------------------回到问题，是的，都是一堆臭屎，不做记号的话，还真分不出来是不是自己拉的。,最近公司的电梯出了问题，平常从1层到8层都畅通无阻的电梯，偏偏在经过4楼时神秘的跳过了这一层。原本负责修理电梯的老程序员已经被扔进电梯井了，所以老板决定由你全盘负责电梯的修理和维护。你简单研究了下这部电梯，似乎初步找出了问题的关键所在。这部电梯的1层到4层是一个老程序员修建的，而后面的5到8层则来自于另一位跟你水平相仿的程序员。这也就是说，问题很大可能正是来自于4层到5层的接缝处，随着公司大楼的不断加高，原本生效的程序发生了某些错误的吻合，才导致4层被神秘的“跳过”。了解了问题所在，你立刻开始针对性的开展工作，在你的妙手回春下，你和你的老板一起眼睁睁的看着电梯不可逆转的上升，向上、向上，甚至还顶破了8层的天花板，在一众员工的众目睽睽下消失在了高空之中……显然，问题从来不会这么简单的解决，你决定研究下那些延伸进钢筋混凝土深处的钢索，刚研究没多久，公司的女同事就过来对你破口大骂——因为电梯的钢索会影响厕所换气扇和电灯的开关，让整个厕所像极了三流鬼片的拍摄现场。你开始意识到问题可能稍稍超出了你的想象，面对老板的不断催促，你只能赶鸭子上架般拿出了你的最终方案:1.要求前往4楼的人站在电梯的后半部分。2.在电梯下方安装滑梯。3.将电梯后半部分的地板换成活版门，当检测到有人按4楼时，在5楼开启4.最重要的一步，关闭电梯内部的光源，将电梯变成后来人看不明白的黑箱，也就没人会来找你的麻烦了。虽然有些员工抱怨前往4楼时会遇到匪夷所思的失重感，但这无伤大雅的问题跟4楼的恢复使用又能算得上什么呢？你唯一需要知道的就是，你成功的解决了公司的问题，你的薪水翻了三番，而且你因为业务能力出色被调到了跟程序毫无关系的领导岗位，甚至还跟前一任修理电梯的员工当上了同事( )至于你问那个电梯？要相信后人的智慧。而“去4楼只能站在电梯的后半部分”则变成了一个公司的都市怪谈，没人知道这古怪的规定是如何生效的。但它正在客观实在的发生，不是吗？,有一天，有几条虫子，干扰了老板赚钱，老板希望你能抓住它们。你带着年轻的锐气，青春的活力，学艺多年积累的程序设计艺术，打开了公司的代码仓库。远看，似乎一个运转的机器，巨大的代码堆积在一起形成了大致的轮廓，蠕动着前进。凑近了一看，在不净的框架中，乱码般的语句在运转，像生了麻风病的这是一个前人留下的屎堆起来的一个你满心热血，要对这座山进行清理，使它成为一个鲁棒的钢铁巨兽，可以随时更换最新的部件，奔腾如飞，坚固异常，带着兄弟们走向人生巅峰。你经过缜密的分析，顺着虫子留下的痕迹，终于找到了问题的源头，发现一坨很多年前某码农因为时代局限或者水平有限拉的陈年旧屎，你觉得只要对它改良一下，梳理清楚结构，加强判断与容错，就可以变化成一个钢铁部件，让这坨怪物离巨兽更近一步。你用力的挖掘其中的信息，却发现，事情没有那么简单，这一坨实际上不是孤立的一坨，而是和整个山体融合在一起。或者说，这座山实际上是一坨坨粘稠滑腻的克苏鲁，通过无数的触角和粘液连接在了一起，这些克苏鲁伸出无数的触角，伸进这座山体中未知的角落。有看起来结构相同，但是出现了几十上百次的重复逻辑。有无数道不知道伸向何处的判断分支。有七零八落到处都是又无法解释的神秘数字。有从表面直接伸向最底层的神秘调用。还有猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。还有无数神秘的线程在独立的挂在那里，猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，哪些资源会莫名其妙的被改动。神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。他们你极其困难的清理和修改了其中的一点点内容，让这一点点的内容脱离出在经历了一轮又一轮的批评，几乎结识了全公司所有模块的负责人之后，你终于抓住了一条虫子。但是在这个漫长的过程中，你早已忘却初心。在无数次的赶工加班熬夜的迷糊中，被同事老板挨骂后的愤懑中，表白失败/和女朋友吵架/发现自己头顶有点绿的低落中；无数次当做临时代码写下，计划单元测试完成后就重写却忘记的过程中，因为偷懒或者不舍得打断思路而而懒得抽出轮子而产生的超大代码块中。留下了无数看起来结构相同，但是出现了几十上百次的重复逻辑。无数道不知道伸向何处的判断分支。大量的无法解释的神秘数字。从表面直接伸向最底层的神秘调用。猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。无数猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，莫名其妙改动资源的神秘线程。神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。你要抓的哪条虫子确实抓出来了。然而，在你没看到的地方，随着运转，更多的新的虫子正在茁壮的成长。这时，你突然发现你的脚抽不出来了，几条触手顺着你的腿向上攀延，你的手被深深地吸入泥沼一样的屎山，你使尽全力想要抽出胳膊，但越是挣扎，陷得越深，仿佛屎山中心有一个冰冷的黑洞，要将所有接近的物体吞噬殆尽。你的精气在一点点流失，一种极度的疲惫，但是又释然的感觉涌了上来。此刻，你觉得舒适又满足，渐渐地闭上了双眼，你甘愿奉献头发与生命，将自己化作一块补丁，维系着系统的苟延残喘。它再也没法离开你了，你和你的头发，成了它的一部分。不知道过了多久。终于又有一条虫子在运行中暴露，干扰了老板赚钱。老板又安排了一个年轻人来抓住这条虫子。这个年轻人带着锐气，青春和活力来到这座山前。看到这摇摇欲坠的克苏鲁大山，不仅倒吸一口冷气。“oh shit ! shit mountain !”,直到改出了 bug，才知道原来某行代码是干这个用的n天后，我擦，那行代码不止干了这个又n天后，我擦，这种代码不止一行又n天后，妈的，老子也搞上去了几行,屎山？小公司的祖传代码才可以叫做屎山。大公司的祖传代码，那是屎海上漂浮的僵屎山。你就在这屎海里面漂着，一旦进来了，就出不去了。每天的工作，就是在粪泳前进。还有拉着部门的粪船前进。各个部门的粪船每天继续产出新鲜的屎，投放到屎海里，它们不断聚集，成为新的屎山。旧的屎山顺着洋流还相互亲热着，迸发出岩浆般热情的屎，掉落在你头上和身边。你不得不一边拼命地游以自保、一边还想尽办法地不沾太多屎到身上。系在你身后的是部门的大船，部门领导坐在船上，用伞和棍子推着避免撞上屎山。偶尔有个负责的领导，还会愿意让你上上船休息。可惜一旦你沾着太多的屎了，或者让船沾着太多的屎了，就等着被踢下船去吧。偶尔有那心有抱负的人，尝试着改变这一切。他们以为找到了一些仿佛可以容易对付的屎山，想着要重构，说他们看到了一条干净的出路。但是，他们还是太年轻了。因为，他们看到的，只是屎山的一角。他们带着部门的船从旁边划过，却不知这就是昨日的泰坦尼克。,"第0天，你发现电灯开关离床很远，每次睡觉关灯都很麻烦，于是把电灯开关封锁起来，从里面拉了一条连杆到床头，用机械传动的方法缩短了睡眠区域和开关操作区域之间的距离。第1天，你觉得这样还是太远，打算再把它改造成遥控的，于是你做好了自动按按钮的装置和遥控器。此时你面临三种选择:0.直接把装置装在新按钮上1.把连杆拆了，把装置装在旧按钮上2.把旧按钮拆了，换成传感器你想了想，好不容易做好了，不用多可惜，于是选择了0。第2天，遥控器不见了，你找了老半天才找着，心想这遥控器好是好，就是容易丢，于是一气之下用强力胶把它粘在了地上。你冷静下来一想，不对啊，直接在床上合适的位置搭个小桌板，把遥控器固定在那上面不就行了？真聪明，可惜现在遥控器死死黏在了地上，要想扒下来就得把整个地板拆掉。好巧不巧，你在某宝上发现一个电动伸缩器，一接到信号，就会像一根手指一样伸出来，然后缩回去。你大喜过望，赶快买来了伸缩器，吊在旧遥控器正上方，再量好了自己睡眠时手的位置，在那里搭了个小桌板，把伸缩器的遥控器粘在上面。这样，你睡觉之前只需要按一下小桌板上的遥控器的按钮，伸缩器就会按一下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。第3天，你感觉这小桌板硌得慌，于是把床平移了一段距离，清空空中空间。但这样，按钮又太远了。于是你去某宝买了个声控灯和一块黑色的幕布，罩在小桌板上遮住新遥控器，又给伸缩器装了温度传感器。睡觉前只需拍拍手，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到升温,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。第4天,你发现最近气温变化迅速,温度传感器总是误报。于是你接了一台电脑、一个机械臂、一个视频识别仪,每隔一秒,机械臂就会操作电脑刷新显示实时的外界温度的网页,再由识别仪扫描电脑屏幕,读出温度数字,由此刷新温度基准值。于是现在,睡觉前只需拍拍手,声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。第5天，你发现声控灯时常因为环境噪音误启动，但又没有说明书，不知道怎样把它拆开来调整启动的分贝阈值，于是又买了一个语音识别信号器，把它的输出口和声控灯的输入口封在一个密闭的隔音空间里。只要你说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。第6天，你嫌每次睡觉前都要说话太麻烦，于是在床下装了一个压力板，连接一个录音机。只要你躺下，压力板就会启动，录音机就会说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，伸缩器就会受热膨胀按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。第7天，你感觉自己还是很怀念点按按钮的快感，于是你买来一个机器人，在床下压力板四周装上了复合杠杆和摇杆，把床顶起来，减轻压力板收到的力。只要你按下按钮，机器人就会摇动摇杆，床就会下降，压到压力板，压力板就会启动，录音机就会说“关灯”，语音器就会收到信号，在隔音空间里发出声波，声控灯就会亮起，幕布内的空间就会升温，温度传感器就会监测到幕布内和外界温度的差值超过了阈值,伸缩器就会按下地板上的遥控器的按钮，旋转器就会挤压连杆末端的元件，连杆就会移动，按下电灯开关，电灯就会关掉。第8天，你发现你的装置失灵了，起初以为是机器人坏了，于是拆开了机器人，发现没有坏。无奈之下你只能把机器人和摇杆强行报废断开，自己摇动摇杆，发现摇杆也没坏。于是你只能把复合杠杆再拆成一节节钢棍去调查压力板，发现压力板也没坏。你只好把录音机的电路剪开，发现也没坏。只能破开小桌板看隔音空间的外壁，也没坏。于是撬开隔音空间看声控灯的接收器，发现也没坏。于是撕破幕布看声控灯的灯泡，没坏。伸缩器的手指，没坏。地上的遥控器，没坏。你一不做二不休把地板穿了个大洞把遥控器取出来，没坏。旋转器，没坏。连杆，没坏。敲开封装的盒子，原来是大灯的一颗螺丝松了。你把它拧了回去。第9天，你还是像9天前那样从床上跳起来，关灯，跳回床上，睡觉。",说到祖传代码不得不提当年在移动的一段经历。我刚入职第一天，旁边的妹纸告诉我，你是今年第五个负责这个模块的，心里凉了半截，这TMD才七月份啊，听她说最长的干了两个月。我就不信那个邪，页面交互一般，后端不也就增删改查？能难到哪里去。看了代码才知道，too young，too simple。里面最老的代码是09年那会的，直到现在一直在维护，今刚好十周年庆典，我光荣接盘，这大概就是代码届的接盘侠吧，现在用的还是jdk1.6，不分什么前端后端，页面都是用Java写的，最坑的是里面的js，有四五个公用的js文件，大概几万行代码，注释掉的代码占三分之二，大概是我这么多年见过最多的注释了，是谁说注释多的代码质量高的？出来，我不打死他。说来也怪，两个月了还没给我安排需求，就是来的那个礼拜说了句让我看代码，每天早上一杯咖啡，页面点一点，心情好就看看代码，日子过得很是惬意，这大概就是程序的春天吧！真不知道前面那四个哥们放着这大好的日子不过，咋跑了呢？一天中午，项目经理喊我，问我代码看得怎么样了？从项目架构说到业务逻辑，其实有个屁的架构，随便扯了五六分钟，项目经理笑了笑，点了点头，很是满意的样子。“小李，这有有个bug，你去修一下““嗯嗯，没问题“意料之中，毕竟也快两个月了。“下个月初，你争取弄完哈“说话的时候十七八号的样子。“没问题。“开始写代码了，带着一丝激动，毕竟两个多月没操练了，也带着一丝胆怯，因为是个人都能看出来这是是否能顺利转正的关键一战。两个多月来，最认真的看了一天代码，我在哪里？我是谁？我在干什么？是哪个智障写的函数，十几个行参，变量命名汉语拼音占了一大半，我严重怀疑这是小学生写的代码，还智障一样的不分前后鼻音，小学语文老师怕是后勤老师教的（真不是看不起后勤老师），函数内部无止境的递归调用，本以为快结束了又来个这样的日子浑浑噩噩的过了七八天，招我进去的那个技术老鸟实在不忍心，过来指点我。“小伙子，你这样看代码，估计明年春天也搞不定，你这个bug，是第三个人上线的时候写出来的，你重点看下他提交代码的部分“一语惊醒梦中人，只能用这最白痴的办法了。看了三天，终于找到问题所在，花了十分钟，搞定。然后技术经理核查了我两个小时代码才放心让我上线。后面有一次和项目经理吃饭，“小李，前面四个人都跑路了，我就看好你，你知道为什么当初你刚来那两个月，我啥也没让你干？我是怕你一开始就做需求，扛不住跑路。”“经理，那代码那么老了，怎么不重构一下““上一次重构代码的项目经理已经被大老板开了“,几年的代码也好意思叫shit山？这种东西得在微软/电信公司这种toB地方才恐怖。我司有些代码我正好要升级gcc版本，要试试转docker踢到云上去，然而这批代码写于2000年前，那个酸爽哦。最早的部分可能写于1980年代bell实验室，第一批维护升级做需求的人早就退休了，第二批也退休了，每一行代码动起来都胆战心惊。这会出现什么结果呢，重构花费时间极长，但是b端客户对稳定性和可升级性的需求不是普通客户能比，所以历代开发在这个坑上只能采取坑上盖板子这样的方式继续开发，坑传个10年20年，从底子上来看问题多太正常了。质量全是靠工程手段维持。框架稀里哗啦，代码风格迥异，逻辑不知道干什么，早期代码没有注释，指针到处乱来，文档有一本砖头一样厚的90年代开发指南，那感觉，嘿嘿嘿。,公司代码已经40年了，最早写代码的人不知道是否活着，要命的是文档没留下。你们几千几万代码算什么，这个比微软系统还大。项目代码堆在一起有90多G，目测过千万行。像int2 int4 int8 uint12345678这种类型定义上千种。无意中，翻出了一个用于定义的头文件，24万行的#define，我不知道这是不是人类写的。我们有个古老的更新记录，当然，没有汉化版，像读一本流水账样的历史书。代码被美国人、印度人、中国人、澳洲人都更新过。时代在发展。像MFC已经不美了，我们却用托管C++强行封装并中转成WPF，然后，引用WCF是作为中间桥梁进行通信的。哦。。我在里面添加个helloworld是多么不容易，要写一天，模块上千个，结构体万万不能动，任何一个结构体的修改会导致整个项目的瘫痪并要重新编译一整天（也许到最后是失败的）。迷宫都比它简单，起码只有一条完美的出路。真是大粪堆。匿了，怕公司看。过去一年了。感官上不一样了，再搞两年成熟练工就不再痛苦了，只是英语还需要更高的水平，听印度人讲英语还是听不懂。,驾驭屎山的唯一方法，不是重构，而是为什么有人可以在屎山里加功能？很简单：把屎山扒拉开，每块闻一闻，找出和你要改的功能对应的那坨屎，把这坨屎包起来（封装），你就可以假装它不是屎，是巧克力。然后，在旁边拉一泡新的屎，等它风干成型（测试通过）就可以收工了。当然，怎样优雅地在一座屎山里闪转腾挪，做到“百屎丛中过，片屎不沾身”，还是需要很多经验和技巧的。不过说白了，就算失误了摔个嘴啃屎，臭也只臭你程序员一个，老板还觉得你很努力，客户还觉得真香。很多愣头青觉得自己是天才，可以把屎山重构了。他们中的大部分人引发了屎崩，永远埋在了几千米高的屎山之下。极少数人活了下来。他们真的做到了，他们真的重构了整座屎山！当一个系统复杂度增加的时候，它的熵也会增加，这是宇宙规律。而某些有洁癖的码农，他们非要强行降低这个你想让谁来付这个成本？老板还是客户？屎山不是一天拉成的。每一代屎山的建设者，都是非常聪明的人。他们非常清楚继续堆高屎山，未来将产生的代价。他们理性中立客观地评估了推翻屎山重建的成本，然后做出了一个充满智慧的决定：这个决定对于每一个人都是最优解，因为每一个人只需要对他当下的目标负责。每一次“继续拉屎”的决定都是正确的，不这样做才令人匪夷所思。如果重构屎山，客户很生气，因为交付时间更长了，还会冒出许多以前没有的bug。老板很生气，因为成本大增，而客户毫无多付钱的意思。就连重构屎山的人自己也很生气：天天钻在屎山里996，搞得浑身屎味，工资却一分钱没涨。尿海不择细流，故能成其大；屎山不拒细壤，方能就其高。屎山就这样一天天长大，终于令最后接手的码农感叹：高山仰止，无论你使用何种语言，师从什么流派，哪怕23种设计模式样样精通，最终还是会踏上前往屎山的道路。因为，条条大路通屎山。就连微软、谷歌、Oracle这样的大公司，他们的产品也都是屎山。Oracle每改一个功能，全公司的服务器需要全速测试几个月。chromium浏览器的源码有十几个G，虽然是开源的，但没有人敢在如此险峻的屎峰上提交自己微不足道的屎坷垃，高处不胜寒。至于微软，呵呵……从win8到win11，10年了，控制面板还是有两种口味：一种是古早味的，一种是苹果味的。office从2016到2021，5年了，不拿放大镜都看不出有什么区别。这段话可能会让你误以为，微软、谷歌都是垃圾。但实际上，他们是地球上最强的软件公司。世界上最高的屎山，都是最聪明的屁股拉出来的。换了一般的程序员，屎山还没垒出一个小屎包，就屎崩了，就这点水平还天天嚷嚷着要重构屎山。所有代码的最终归宿都是坟墓，而绝大多数代码早已死无葬身之地。屎山是不可能重构的，这辈子都不可能重构的。打败屎山的唯一方法，唯有另起炉灶，建一座新的屎山。这就是为什么在巨头们巍峨连绵的屎山脚下，总能有新的小屎包崛起。当然，对于血气方刚的少年，我知道，你很可能觉得我在扯淡，屎山有什么好怕的，重构就是了。明知山有屎，偏向屎山行。来，壮士，干了这碗屎，我绝不会拦着你。我只会献上一本秘籍，祝你早日成功：作为一名有理想的程序猿，我也在努力建造自己的屎山。我想做一个能直接翻译英文pdf的工具，不是链接如下，感兴趣的同学可以试试。目前只有PC版，APP的坑一直没填：Rust语言代言人 。他翻译的pdf是这样的：说实话，得到这样的评价实在出乎我的意料，因为我还从没试过翻译编程领域的文章，初看貌似效果还行。不过，我在受宠若惊的同时，也暗暗感到惭愧。因为只有我自己知道，屎山里还有多少坑没填……不说了，我要进屎山填坑了……如果你喜欢我这种用脱口秀style把道理讲通透的风格，可以尝尝我最近出版的两本科普书。这两本书都入选了2021年度CCF“科普阅读推荐图书”榜单。CCF是什么，对于程序员就不需要介绍了吧……一本既不吹捧科学家的伟大、也不纠结历史细节、只想让你无废话看懂量子、还吭哧吭哧手绘100多张彩色漫画实验图解的硬核科普：一本不屑于教Python和调参、只想和你探讨人类命运和智能本质的AI科普：还有不赚钱、只求交个朋友的套装：,之所以被成为屎山，因为你一碰，就会屎山爆发，那画面……不忍直视！有句话，说的非常好：,你管理着一个动物园为了创收，你在动物园里修建了一个海洋馆，门票另收，吸引小孩子结果上面下来一个工作组，说这是违规的，你一个动物园搞海洋馆另收门票和旅游局搞杜绝宰客、吸引游客的精神相悖于是你决定钻个空子，把海洋馆“外包”出去，实际上从自己的左手转到右手。为了做得更像一点，你在地图上把海洋馆抹掉了，但为了让游客知道有海洋馆的存在，你在游客守则里此地无银三百两地加了一句“本园没有海洋馆，如果有工作人员向你售卖海洋馆的票，拒绝他们”但你一个为了创收而建起来的动物园哪来的经费搞海洋馆？于是你在海洋馆和大象区之间造了个为什么大象这么多？你也不知道你前任跑了个什么程序，能以固定的频率转化出几头大象来你不想知道这个，是因为上次探究为什么动物园有那么多跑来跑去的兔子的经历太具有灾难性了。你造了一个坚实的围栏，让兔子再也跑不出来，结果因为动物园空空荡荡，别的动物以为这都是它们可以获得的领地，都想跑出来。你想了想还是兔子攻击性小，于是在兔子园区底下挖了个坑道，让兔子能跑出来兔子那么多怎么办？（其实你也不知道为什么会有那么多兔子，按理兔子园区也没几只兔子啊）于是你雇了一批员工捕杀兔子，维持兔子的正常数量结果你发现员工杀完兔子之后处理现场时会把兔子肉和兔子血先分包扔在架子上，等都处理好了再一起丢，于是有的游客不明所以就把兔子血和兔子肉当商品买走了。没办法，你只好在游客守则里写上“动物园的饮料店不提供‘兔子血’”过了几个月领导又下来检查了。领导看到那海洋馆里的大象的时候都被你气笑了，他问你，你告诉我这是鲸鱼？领导还发现海洋馆和动物园的员工就是同一批人。于是领导又责令你进行整改动物园又没钱，你还能怎样？你只好在鲸鱼区贴上“大象是3D投影”的告示，然后让员工分成两批，穿不同颜色的衣服，还告诫海洋馆里的员工不要回答任何与动物园有关的问题，问就说没有动物园。为了避免下次检查的时候发现你在动物园里搞捕兔运动（毕竟兔友挺正确的），你决定给兔子肉打上“山羊肉”的标签，让人不明所以年末的时候你发现海洋馆亏损了，原因是有人偷偷摸摸溜进海洋馆投宿（是的你开了个酒店），却不付钱。于是你给游客发放不同颜色的衣服以供辨别，叮嘱海洋馆员工把入园的时候没买住宿的人赶出去，而且1：00以后把所有灯都关了，让那些想投宿的人摸黑去吧！你还发觉员工离职率有点高。你想了想，让员工干捕兔子这回事确实不太容易留住人。于是你把动物园员工也分为了两批，其中老员工穿黑衣服，负责干捕兔子之类的活，还有就是撕掉游客地图上的虚线——鬼知道为什么印刷厂送来的地图会有虚线！总有好事的游客沿虚线撕下一部分地图去喂动物，把动物喂死了你的动物园终于开始盈利了——的确，它特别奇怪，压根就不是什么正常的动物园，但它能跑起来啊！发现你的动物园很奇怪的人认为你的动物园里有污染认知的东西，还写出了几张告示来保护人们。其实哪有什么“它”，就是一群秃头的程序员罢了！程序员又有什么错？,曾经在visa工作过，感觉什么10年20年的代码简直naive，你见过1965年的代码吗？第一次看到简直惊呆了，这半个世纪的代码现在还在用还跑的好好的？机器是大型主机，语言是COBOL，估计这一辈的攻城师都没见过吧，90年代c和java都没什么气候的时候行业50%的人都在写COBOL，现在连这个语言的名字都没法出现在教科书里了吧。能跑就接着让它跑吧，换的话成本太高。,我大二的时候在学校实验室有过一次失败的打工经历，大概就是学校一个实验室需要重写一部分代码，从FORTRAN到Java，我开始觉得还好，和两个朋友应聘都通过了，毕竟整个学校愿意为了打工专门学一下FORTRAN的人也是屈指可数。拿到代码以后我们就懵逼了，这部分代码比我们所有人年纪都大，从197几年一直更新到1989年，以后再也没有人更新过，加起来有上万行，曾经有过文档但是丢失了，几乎没有注释，变量命名乱七八糟，为了让这坨代码在进入Windows时代后能跑起来，90年中期又有人专门给这坨代码用FORTRAN + C写了一个编译器，随着系统升级，编译器也不能用了，然后在2001年还是2003年又有人用 C 重写了编译器，得到了一个在当时Window版本可以用的二进制程序。但是因为系统升级以后，这个二进制程序不能用了，而且编译器也不能用了，就决定直接把最早的那堆FORTRAN代码重写。原始代码为数不多的注释里，还有一些特别可怕的内容，类似“我也不知道这里为什么能运行，但是得到了正确的结果，千万不要改”。我当时不知道屎山这个词，现在看到以后回想起来，简直是层峦叠嶂的屎山。……反正。最后也没有重写成，解决方案是把电脑系统降级回去了。,"从前 有个函数佳佳type add(type a, type b);它爸希望它返回a+b。有一天佳佳被诊断出//add(666,28) ——— 250它爸的兄弟也就是它的舅舅们想了一个办法，在给他吃东西之前看看这东西它会不会过敏。if(a!=666&&b!=28)return add(a,b);else return 694;大家发现这种方法简单粗暴。于是每一次佳佳被诊断出先天性疾病的时候都在前面加上一句if else。N年后，大家每次要去跟佳佳吃饭的时候，都得小心翼翼的检查食物。if((a!=666&&b!=33628)||(a!=666&&b!=28)||(a!=3666&&b!=446628)||(a!=38666&&b!=65328)||(a!=4666&&b!=528)||(a!=4666&&b!=6667328)||(a!=7666&&b!=7628)||(a!=28666&&b!=399228)||(a!=2666&&b!=428)||(a!=375666&&b!=3928)||(a!=9666&&b!=328)||(a!=6636&&b!=48528)||.....||||(a!=66976&&b!=728))    return add(a,b)然后开始处理佳佳的过敏物else if (a!=66976&&b!=728) return 67704;else if (a!=375666&&b!=3928) return 379594;else if (...) return ...;............else ............;又过了N年，大家发现佳佳还可以被用来检测它亲兄妹健健的先天性疾病，于是有了if(add(a,b)!=把上面那一坨东西写成三元操作符?:的形式，你懂的反正就是一坨)sub(a,b)else if (a!=66976&&b!=728) return ...;else if (a!=375666&&b!=3928) return ...;else if (...) return ...;............else ............;后来医生对佳佳和它的近亲程程以楚楚芳芳等及其他拥有相同病症的人给出的治疗方案。有一天，有个人发现了楚楚有一个特性，每当给它的第二个食物是0的时候它都会发脾气把家给烧了。这和它的远门祖宗球球表现的一模一样exit(0)可是佳佳的上司请不起球球，因为球球太贵了。于是上司门决定给楚楚的第二道菜是0来让楚楚烧家。exit(0) 被替代为 div(0,0);1万年后，科技的进步，时代的前行。医生们考古发现了佳佳的先天性疾病，想对它进行治疗（debug）。功夫不负有心人，佳佳的病被治好了。这个时候医生们发现，佳佳的病治好了，可是依赖佳佳的健健和程程们都因为佳佳的大病初愈而而疯狂。医生们想着，既然佳佳都能被治好，那就顺便治一下健健和当医生们完成手速之后，发现楚楚，芳芳，开开，萍萍好像也因为他们被治好后而疯狂。 疯狂的不仅仅是他们，还有他们的孩子们（所有使用这些函数的人）。于是医生们日复一日，年复一年的治疗啊，发现这治下去没完没了了。终于医生们放弃了，把治好的病人们又恢复了原状。（放弃debug）终于世界又恢复了宁静。10万年后，有个叫灭爸的人，它发现这样下去会有大量的资源被这些疾病缠身的人们给消耗殆尽。于是它打响了一个响指，所有终于在他们的执着努力下，所有被他们消灭的人的岗位都得到了新的替代。他们终于消灭了所有的已知疾病。不知又过了多久，一个叫嘉佳的年前函数，被确诊为拥有了某先天性疾病。................",看着难受，又不能改它，只要一动，山就塌了，将自己深埋屎下，臭不可闻。就像你有几栋楼，几百个房间，手上拿着一串没有备注的钥匙，一个一个房间试，你以为你打开了，却没想，门后还有一道门。当你费劲心思解决了所有门，你又发现，钥匙断了。你完全不明白为什么要这样设计，那么愚蠢，当你有了个新想法，忙碌之后，又发现自己写的更蠢。不要试图去理解它，改变它。这是神圣的传火，让你的下一任有点事情做。,先给你看一下一坨屎一样的代码这坨屎，忍忍，你有足够的时间还可以修复的。花了我一天追根溯源了解需求；花了一天修改代码；花了两天对比自测，以及尽可能遍历所有异常场景，测试会怎么样，以及询问前开发，leader，产品，各个相关人士，这些问题得意见；然后上线预防环境clone请求并行跑1天，对比两边结果是否一致，研究不一致的原因，并解决；最后才正式上线…300行代码终于变成30行..如果这样的狗屎增加100倍，并随机遍布到其他100w行的正常代码中。你试一下去解决一个bug？你就会体会到攀爬一座屎山，并在上面采摘一个可以食用得部分的那种独特快感..你除了骂一句 谢特shit，别无他法。2021年6月1日给大家介绍一下比上面更牛逼的狗屎代码。先说最大的一个问题，增加一个字段需要同时修改10多个子项目，提交10多次github，build这些模块之前先instal一轮，模块之间编译安装的还有依赖先后..这完美分布式单体应用，成功锁死所有修改，牵一发而动全身，这句话我算是懂了。还有分支用来区分客户的。比如分支名huawei，就是客户华为，分支名weiruan。就是微软..….其他人无权利创建分支。方便他自己管理项目呗因此任意修改代码都需要“架构师”亲子处理，无其他人可以搞定。另外公司离不开他了，整个团队中中他永远是受益者，不管招聘多少人开发效率还是太低了….一直加人…全体996也不行..然后他拥有了80多个下属….离职率百分80（能呆着超过2年的员工只有3人..）.…@可他已经升级成公司技术vp..评论区的说kpi的同学，这就是你们想要的真实故事。哈哈哈哈哈哈那个代码我感觉挺多人说挺好的，没问题。怎么说呢，确实没问题。直男癌和撩妹高手的差别吧。举个例子：直男：我想和你嘿嘿嘿撩妹高手： 我想和你一起看日出的绝大多数人对于屎山是痛恨的，但是自己写的时候又还是写成了狗屎（包括我自己..）这是人性，能偷懒不香嚒？做一些看不到眼前利益得事情，没动力呀。所以才有重构，重构就是为了解决这个问题。大概思路：1写最直觉无脑版本代码2优化变量名称，函数结构，提取方法，类。抽象3刷代码规范，4面向对象的优化，函数式优化5优化过多if6性能优化7更好的中间件选行替代8容错，高可靠，高可用优化每次一点点的来，没几个人能一步写到位。2022年2月25日那个架构师，升级成副总之后，半年不到，巅峰结束..…他被降级成为了team leader ，管10个人…——————2022年11月5日他被开除了，花了很长时间最长才找到工作。。。,有网友觉得我们技术总监水平太差，搞个脚本都要好几天，是什么野鸡总监……这就不得不提到屎山里的另一个大坑，最初大家想的很简单，从生产上拿一份数据放到本地库里，再修改一下代码逻辑循环生成合同……但尴尬的是我们svn上的合同模板和生产上的不一样！进操作间动生产数据不是吗那么容易的……大量的时间都浪费在和甲方勾心斗角上，留给写脚本、测试脚本的时间并不多……说一个亲身经历的一座「屎山」，曾入职一家成立15年的软件公司，我当时应聘的是中级程序员，但在入职几个月后，我的岗级和薪资调整到了高级程序员，这并不是因为我在这几个月中技术水平跨越式提升，而是因为这三个月中发生了以下事情：前任组员一号和我完成交接之后这是一座年轻的「屎山」，我是第三批接手者，历时几个月后我成了项目组中，资历最老的员工！实习生和初级程序员写出来的bug和低级错误我就忍了，都是从菜鸟过来的，勉强可以理解。但是框架因为“高程”、“架构组”、“大手子”等人的填填补补，已经到了严重影响用户体验的程度！！！当时项目的工作流很奇葩，不论出现什么错误，都会统一提示“发生未知错误”。哪怕我照着“公司祖传框架使用手册”，在配置中填写「核算系统接口调用失败」、「当前时间不允许操作」、「xxx号风险模型校验失败」等提示信息，但客户用的时候还是统一提示“发生未知错误”！起初因为运维人员每天都在帮客户解决这种问题，客户倒是没有多大的怨气。某一天，因为很复杂的原因，客户为了此事大发雷霆，我被要求解决这个问题。在一顿忙碌之后，问题定位到了一个公司自己封装的xxx是一个很陌生的名字，几番打听之后才知道，xxx是我们组的第一任组长，离职两年多了！我只能在svn上继续摸索，愣是没有找到jar包的源码。几经波折之后才知道，svn之前是几个外包厂商共用的，后来因为外包厂商多了，就给每个厂商重新配置了一个然而故事并没有结束，从公用svn找到的源码，和我通过反编译出来的代码，很多地方对不上！源码里的注释在我眼中都变成了「年轻人，千万不要动这坨屎！」最后我只能在工作流外面，又封装了一套组件，专门用于代替工作流提示信息，并且留下了一行注释「以上只是「屎山」一角，「屎」是因为祖传代码里面有很多问题是真的臭，「山」是因为屎太多了。最讽刺的是，你可能为了治理「屎山」，也在里面拉了几次「屎」......昨天答完问题，晚上做梦梦到了当时做项目填坑的苦逼生活，项目组负责的几个系统中，有一个负责放款的系统（背景是甲方爸爸接了个一个大单，但是因为量太大，其中几笔合同的合同号录差了，导致纸质合同和线上合同对不上，甲方爸爸就找到了我们组的一个组员去做数据处理。处理了一下午，线上合同的合同号还是没有变，组员来找我的时候已经满头大汗，我心中隐隐猜到，又要踩屎了。我发现组员按照数据库文档修改了合同号，但是系统上还是显示旧合同号。因为已经踩了几次屎，我就直接去翻代码了。然后大量“中文拼音”命名的变量和无数意义不明的注释，看的我太阳穴一跳一跳的。原来生成电子合同功能跟我们前任运维人员交接的时候，说放款系统上线一年没啥问题，唯一要注意的就是因为与外部系统交互产生的交易文件很多，所以要定时我当时就给技术总监和项目经理打电话，三个大老爷们大半夜跑到单位附近的肯德基研究对策。好在数据都在数据库里，技术总监捅咕了几天，写出来个脚本把所有被删的文件重新生成了一遍。但是服务器空间不够又传不上去，就跟甲方爸爸说电子合同这块设计不够完善（“事故”尘埃落定之后，项目经理想要追责却发现这锅只能他自己背，除了他全都是后来的......在那个公司干了一年多，工资涨了三次，但我还是离职了，毕竟「屎」是真的难吃......当我把项目交接出去的时候，我就想起我在项目里留下的注释（屎），露出了和（幸）蔼（灾）亲（乐）切（祸）的笑容。知乎第一个过百的评论，心情十分复杂[捂脸哭]评论区很多朋友提出重构或重写系统，关于这一点本苦逼打工人又要吐槽了！曾经在某一个外包项目上苦苦挣扎了一年半，除了春节基本没完整休过节假日，精神和肉体都处在崩溃的边缘，一度准备离职。项目经理苦口婆心地挽留我，发生了如下对话：“小孙啊，这个项目明年就要重写了，到时候你就是这个业务条线的leader，其他公司哪有这个机会。”“我敲代码还行，我这年纪轻轻的当不了领导，而且重写项目这事说了一年了，也没看到动静。”“那你再等半年，年底往上申报调薪的时候，我给你多涨点，你要是不满意再走也不迟，现在这时间段工作也不好找。”“现在工作还挺好找的吧，已经谈好两个下家了，薪资都比现在高不少。”“你这是早就准备好了啊？不再考虑考虑？”“也考虑挺长时间了，可能是我不适合这份工作吧，希望公司能越做越好。”最后脱离苦海，摆脱了一座屎山！后来找工作的时候，就尽量避免外包了，外包公司的屎山是最高最臭的，因为上面拉屎的人来自天南海北！,你面对一个巨大的屎山。有的块都发黑变硬了，也有的还新鲜带虾仁的。不要试图了解都是谁拉的他们吃了什么。新需求就撇条新的垛上去。旧bug就试试自己拉泡稀的把旧的粘起来拍打拍打能用就行。不要试图去什么设计模式代码风格也不用多在意，山上什么样的都有。不行就上手捏出需要的形状,屎山通常由一开始的沟通不畅或学艺不精引发，这是人类工作中几乎不可避免的，尤其在当下，很多领域的程序员门槛越来越低的大环境下，上述问题更是难以避免。此时随着新需求的引入，或者已有需求与条件的变动而产生的大量编写与重构工作中，由于周期短，工作量大，可能存在人员交接等情况，上述问题将会在工作中产生极大的影响；而“祖传”只是将这种影响累计起来，最终可能就会走向一发不可收的局面，所以通常就会把各种祖传代码称为“屎山”。当然这么说感觉很空中楼阁，不如我给你个形象的比喻吧：现在，甲方给你了一个很简单的需求：提供给他纯净的首先，你可能会想到最简单的实现：就像蒸馏后的污水会变成纯净的水一样，你也可以去工厂回收废旧的乙酸乙酯，然后搭建一个蒸馏器，这样把蒸馏出来的纯净乙酸乙酯提供给甲方，任务就完成了。但很快问题出现了：工厂送来的废旧乙酸乙酯开始混有乙醚了，这玩意沸点比乙酸乙酯还低，一蒸馏会跟着乙酸乙酯一起出来，纯度满足不了客户的要求了。好在学过高中化学的你很快给出了解决方案：既然已经花大精力搭了蒸馏装置了，不如直接把原料换成乙醇，乙酸和浓硫酸，直接制取乙酸乙酯，这样收集的地方加个但可惜你忘记交代小A装置被你改过的事情了，他还以为你在用上一套蒸馏废旧乙酸乙酯的那套装置，于是他望着收集装置处出了神——这出来的不就已经是纯净的乙酸乙酯了嘛，为什么还要用碳酸钠洗一遍，上一任维护者真是不懂得节约。于是小A自以为聪明的去掉了收集装置处的碳酸钠溶液。结果这一去，甲方大大暴怒了：你这送过来的乙酸乙酯咋出口处显示的pH值还是4呢，这肯定纯度不行，以后再这样咱合作取消。小A一听这也不是个事，于是紧急连夜拆拆探探地检查了整个蒸馏器，但是不论怎么检查，都没发现蒸馏器的什么问题。“那既然蒸馏器没问题，肯定是出口处那个pH监测器坏了”，小A如是想到。于是在小A的一番调整下，显示的数值调整到比实际的数值大3，这样看起来就是7了，完美。甲方大大看过后也点头，这件事就这么结束了。直到小A的接班人小B到来了，小A临走前告诉他，那个pH检测仪是坏的不要随便乱动，蒸馏器加的原料是废旧乙酸乙酯，你只要看好蒸馏器就行。但是这个小B可是个人才，他一番折腾后发现pH检测仪可是太正常了，就是被小A人为调大了3，这小B可是气不打一处来，好嘛，小A你自己瞎调赖机器有问题，看我给你调回去。结果调回去后小B傻眼了，咋蒸出来的东西pH值都是4，但好在小B没那么傻，发现加料的地方可不止一个孔，还有一个孔加的是浓硫酸，小B想了想，既然另一个孔小A说是加的废旧乙酸乙酯，那这个浓硫酸估计就是干燥废旧乙酸乙酯用的。“虽然硫酸难挥发，但谁知道这蒸馏温度有没有人动过，没准是少量硫酸也被蒸出来了呢”，这样想着，小B把浓硫酸换成了中性的结果这下好了，问题更大了，不但蒸出来的产物pH值比4还低，而且居然还能溶在水里(乙酸乙酯几乎不溶于水，伴随着甲方大大的反复催促，这工不能再停了，但是问题又确实查不出来。没办法，小B只好在产物里加一些生石灰，然后额外加一套过滤装置把多余的生石灰过滤走，最后把测定出pH值合格的产物交给甲方。从此，本来一套简单的蒸馏器，在收集处不但多了一个生石灰添加装置，还多了一套过滤装置，不仅如此，还有小B留下的温馨小提示：“不要动加料口处的浓硫酸和收集处的任何装置，本生产车间严格依靠这些装置运行，任何的操作都可能会导致生产无法进行”。屎山就是这样炼成的；这下你是不是就懂得，为啥很多祖传几代的代码，就会不可避免地变成“屎山”
学 Python 都用来干嘛的？,我最近学python，不过不知道怎么练习，不知道用来写什么。大家都用来干嘛的？都说说python可以用来写什么好玩的东东。,最近做了个Python办公自动化的Live讲座，里面对技术讲得更加详细大家有什么编程或者求职的问题可以在值乎向我提问哈Python基础知识小技巧,能写的东西可太多了，比如哄哄女朋友：向手机发送通知：文献搜索工具：制作日历：检测人脸是否佩戴口罩：打水印：提取音乐高潮：树莓派+智能音箱：+摄像头：更多有趣的Python教程欢迎关注公众号：Python实用宝典或者访问网站：,我们家娃喜欢看电视，一看就没够，为了让她在看电视的时候做点儿有意义的事情，我用python做了一个小程序，叫bear_kids_player. 说起来也简单，就是在播放视频的时候每隔一段时间弹出一个对话框，里面有一个问题，让孩子输入。答对了对话框就销毁，然后视频就接着播放；答不对，对话框就一直在那里，视频停止。最初的设定只是让孩子输入字母或者做做加法，后来加了一点改进，目前可以显示图片，并且自动朗读显示的单词。具体安装只要用pip install bear_kids_player 就可以。安装结束以后，用如下命令可以启动：ctrl+o 可以打开视频ctrl +F2 可以关闭视频在 .../bear_kids_player 文件加下有一个config.csv 文件，可以对一些参数进行设定比如：Intervals(间隔时间)， 打开文件的快捷方式，关闭文件的快捷方式，题库筛选的阈值，题库筛选所需的类型另外还有一个questions.csv 文件，这是一个题库。这个题库可以自己输入题目，答案，类型，以及想要显示在对话框里的图片链接，可以依据个人的情况自己添加题目。下面是一个简单的演示当然由于朗读功能使用的是gtts实际上链接google获取音频的，所以在国内可能朗读功能会不那么好用。不过本来也就给自己娃写的程序，倒是也没指望推广。python的主程序用的此外，视频解码程序是K-Lite_Codec_Pack_1526_Basic（17MB），可以从下载到，需要安装解码程序才能对常见的视频格式进行支持。家里的娃娃三岁半，原本小写字母认不熟，许多字母会搞混譬如p，q，g，d，b，还有一些小写字母认不出，教了无数遍都不上心学。自从使用了这个程序大概三天左右，小写字母都差不多认识了。增加了单词输入题目以后，娃娃只用了两天就可以不依赖我的帮助，自己把我事先设定的10个单词准确输入了。我们家娃从来没接触过键盘，有这个成绩我还比较满意。后面可能会做些升级，比如要求娃朗读，然后用pyttsx库做语音识别输入；或者去掉她输入熟练的单词的显示，让她依据读音输入单词。或者换些加减法等数学问题。总之慢慢添加新功能。程序没有很认真地注释，距离工业级水平相差甚远，目前就是东拼西凑 能用就行的状态，不喜勿喷。,当然，如果你想自己做一些事情，比如爬一下喜欢的图片，爬某个网站，或者是抢火车票都可以，下面我们就来说说具体的！配套资料：配套资料：配套资料：配套资料：配套资料：配套资料：更多Python用途（想学习哪个可以直接私信我获取哦）：关于Python的学习，可以看Python入门教程完整版，600集让你轻松入门Python！配套资料：,2020年03月29日-更新：有不少小伙伴私信我学习python的方法。我简单回复一下。入门推荐：1、2、有了基础后推荐做一些小项目。使用python做个表格，自动处理数据。或者参考我这篇文章做个爬虫。在这个过程中肯定会遇到很多的问题，这也正是提升自己的最好方式。3、假如你是程序yuan或者科班学生，那么更推荐你刷LeetCode。选择python答题。双管齐下，效果更佳。4、最后的最后，推荐一款我最近在用的学习辅助工具。    复杂+理论——生动+理解+样例+练习+纠错。主要专门对计算机考试，但是并非是刷题，而是重在理解    零基础——深入进阶，对小白友好，对基础不好比较友好～。有学习群、助教全程陪伴学习，疑问可以在线解答，可以反复与大师沟通经验。    感兴趣的同学可以关注【夜曲编程】，后台回复【免费教程】开启白嫖之路。    有什么python下载问题，和库的安装、删除的问题都可以找夜曲编程的人员问问，就不用花精力捣鼓下载python，学习python的过程会更加方便。-------------------------------------------- 我是分割线 -------------------------------------------我来更新一波，最近又学了些骚操作，那就是查阅网上的图片，更进一步来说可以瞻仰漂亮小姐姐的图片。有时候当你浏览这么一个话题时。想要一次性全部下载图片，作为珍藏，但是总不能手动一张张保存吧，这时候就要祭出时代的翘楚，乱世之英雄了。此代码，直接在cmd中能跑起来，自动在当前目录创建一个文件夹存放图片。    这部分下次更新，我要去睡觉了。看了各位dalao的回答，又增长不少知识。心中不禁感叹！我当初学习Python的目的很简单，我学习的背景为，我负责开发的设备每天都会产生大量的日志，而通过日志数据可分析bug。以前都是人工统计，就是一个一个的数，看的头昏眼胀，数据量小的时候勉勉强强还行。但数据量大了之后就凉凉。所以我学习的目标就非常明确了。所以我建议题主带有目标的学习，就不会出现不知道该如何练习这类型的困惑了。好了，啰啰嗦嗦又讲了一大堆。那么问题抽象出来，如何从大量的数据文件中寻找制定的内容呢？一、实现思路：二、代码实现。（为了更有说服力，那就贴一下我的代码，仅供参考）以上为代码实现！（话说知乎的编辑为什么没有代码类型文本的编辑呢）,如果你还没有开始使用Python，答应我，把这个回答看完，如果你真的学习并深入使用过Python，我想你一定会爱上他，并且对于Python的未来充满期待。对于Python而言，不光是简洁的语法，它广泛的应用场景，完善的语言生态，丰富的库，都吸引着我不断地探索，接下来，我分两个方向和大家聊一聊 Python在各个领域中的可能几年之前，说到数据分析，你并不会想到Python，但不知从什么时候开始，数据分析师的简历上，Python已经成了最亮眼的加分项。各种数据分析框架的出现，让Python这种本就极其简单的语言更加方便易用，让数据分析师可以将更多的经历放在数据本身。而后随之而来的各种数据可视化框架，也让数据分析工作不再需要切换不同的语言不同的软件，将所有的工作集中交给Python，他都可以用最简单便捷的方式帮你完成。话说数据分析是当下一个非常热门的方向，如果你想学习的话，可以学习知乎曾几何时，讲到科学计算，我们想到的就是几个头发花白的老教授在实验室里不停的计算，但如今，我们每个人都可以站在巨人的肩膀上进行科学计算，这个巨人就是丰富的科学计算库，我们只需要几行或者十几行代码就可以做到数据的预测，评估，图像的判别，修复，路线的规划，修改等，随着近几年Facebook，Google，百度等大厂的加入，Python在科学计算方向的地位水涨创高，现在已经成为数据挖掘，机器学习，人工智能等的第一编程语言，相信过不了多久，可能我们人人都是数据科学家吧。大数据现在可是风口，不亚于10年左右的移动互联，怎么能少了Python的身影呢！近几年Python你在大数据领域的发展也是风生水起，虽然无论是实时还是离线计算，Python你的性能都是远不如Scala与Java的，但是Python的易用性，以及丰富的库，大大提高了大数据开发者的工作效率，同时，Python能够更好的兼容各种通常，脚本编写是指编写小程序以让简单任务自动化。从简单的定时开机关机，批量修改删除文件，到复杂的游戏外挂，自动抢票，整点自动秒杀，再到企业级的定时任务脚本，自动化运维，自动化测试等等都是脚本的应用，简单的开发过程，以及强大的功能，让Python可以在脚本编写领域和Shell有一较高下之力。说道Python就不得不说说爬虫，很多人了解Python都是从爬虫开始的， 至于为什么，我只能说，贴近生活，简单高效，既可以解决工作，生活中的数据需求，又可以做些私活赚点外快，何乐而不为呢？很多人都认为Web方向是Java的赛道，没错，现在市场上90%的web服务还是java实现的，但是由于Python服务的简单高效以及完美的扩展性，让技术门槛变得非常低，几行代码就可以制作一个简易的Web服务器，现在有多少大学生的第一个博客项目就是Python编写的呢？对于嵌入式应用，我不在行，但是我知道Python可以配合Rasberry Pi工作。它在那些硬件发烧友中非常流行。您可以用相反，我推荐您用Unity的C#脚本，它是最流行的游戏引擎之一。它允许您在很多平台上构建游戏，这些平台包括：Mac、Windows、iOS和安卓。您可以用Python的Tkinter来开发，但是它似乎不是最流行的选择。相反，用Java、C#和C++等语言开发桌面应用看起来更流行。最近，一些公司也已经开始使用JavaScript来创建桌面应用程序了。比如，Slack的桌面应用程序是用Electron来构建的。它允许您用JavaScript来构建桌面应用。就我个人来说，如果我要构建一个桌面应用，我会用JavaScript。它允许您复用Web版本的某些代码（如果有的话）。当然，Python的能量不仅仅如此！！！我们一起期待Python带给我们的其他震撼吧。希望我的解答可以对大家有所帮助，也欢迎大家随时补充交流。,“学 Python 都用来干嘛的？”看了一些小伙伴们的回答，已经列举了很多应用。那么这里再为大家补充一款同样免费、好用，而且更加灵活的 Python 应用工具，那就是：再具体点来说，在 SeaTable 表格中，我们可以上传 Python 脚本到到平台，可以把脚本和数据放在一个地方进行管理，不需要再单独找一个服务器。同时，可以在表格中根据不同的需要存储多个 Python 脚本文件， 一键点击运行或通过设置自动运行就可以达到我们想要的效果。而且，相比于传统的 Excel 表格， SeaTable 表格支持单表千万级数据，同时提供 SQL 查询接口等。为 Python 应用提供了完善的功能支撑。另外，它支持免费私有化部署，可以用 Docker 方式，简单易维护。用 Python 从维基百科中抓取往届举办冬奥会的城市数据， 然后自动填入到 SeaTable 表格中，并用 SeaTable 表格的可视化插件自动生成城市地图、城市图库。比如我们团队平时管理的站点就有20多个，全部使用的是免费的 Lets' encrypt 证书，并通过脚本在证书过期前自动更新证书。偶尔会出现脚本没有配置对或其他的原因导致证书没有正常更新，尤其是对新部署的站点。这就需要制作一个应用来解决这类的问题。比如用 SeaTable 表格做了一个股票池，将股票名称、代码、相关文件资料等信息都记录到了一起，并且增加了一个“股价更新”脚本，通过代码调用网上的股价数据，一键点击就可以自动更新股价，甚至还可以设置每天自动更新等。这样，查询和管理自己的股票信息就变得更简单方便了，而不用每次必须登录证券交易软件来查询。比如在本案例中，本活动的打卡规则是：参与者须连续9天，每天打卡一次，并且打卡时间是在16点至22点前。如符合规则，那么活动结束后，我们会如数返还之前缴纳的费用。因此，我们会按打卡规则编写脚本代码。利用编写好的脚本筛选掉不符合打卡时间的打卡者。下方这个视图中的“标记”列，就是用来自动标记通过脚本筛选出的不符合打卡时间的打卡者。完成上一步后，我们在下方的视图表上，点击右上角的“脚本”，将编写好的脚本代码粘贴或者导入进去。然后就可以点击运行脚本了。脚本会对「标记筛选视图」 里的汇总数据自动进行如下处理：运行脚本后，如下图：后面一步更简单，用统计功能统计出连续打卡9天及以上者即可。本案例如下：比如，从考勤机中导出来的打卡记录，存在每人每天的具体上下班打卡时间都在一列里，也存在着每人每天有多次打卡时间的记录。那么我们用脚本就可以从表中获取每人每天的最早打卡时间作为上班打卡时间，获取最晚打卡时间作为下班时间。并且把每人每天的最早打卡时间、最晚打卡时间统计到一行，这样就十分清楚了。“按钮”是 SeaTable 表格的一种交互式字段类型，在用了“按钮”列类型的单元格中，通过点击按钮或自动化触发，就可以执行指定的动作，自动完成一些数据处理和工作流程。这些动作包括但不限于：运行脚本、发送邮件、发送企业微信消息、将行复制到另一个表、修改行等。限于篇幅，本回答就介绍这么多，SeaTable 表格功能丰富，使用灵活，我们可以配合使用，快速打造出自己的应用。,先来看看，大佬都用Python干啥。还有人用 Python 来买房。实验楼上面好多 Python 项目，真的是可以做很多事情，下面一起来看看！通过 Python 数据分析和算法，实现【苹果公司股票分析、实验楼课程数据统计、用户情绪分析、潜在客户分析】等项目：使用 Python 的 Flask 框架和 VueJS，通过两个实战项目留言板项目和论坛应用的练习，掌握 Flask + VueJS 进行 Web 开发的能力。利用 Python 异步特性实现异步爬虫系统，一步一步地将构建索引、索引压缩、排名算法等环节编码实现，最后利用异步 web 框架 sanic 构建后端实现一个完整的实现一个 Redis 服务器监控工具，第一部分实现了 Redis 服务器管理和监控信息获取的 API ；第二部分创建一个用户系统接入微信公众号平台。借助这个项目我们可以进一步学习 Web 开发中的一些知识。,还能一键扣图，让开淘宝店的设计师下岗，在一旁痛哭流涕……再也不用担心工作忙，没法经常和她/他/它聊天了。可以实时知道女友的情感情绪指数，再也不用担心女友莫名其妙生气了。还能顺道教女朋友学英语（女朋友一定很惊喜）为了方便快速开发，我们使用python中的wxpy模块完成微信的基本操作。首先，我们设置一个config.ini配置文件，并从这个配置文件开始读取信息。这些参数一看就懂，所以无需多言。设置完相关参数以后，我们再来学习一下，如何每天教女友学英语：如果你愿意，可以在上面对时间的判断中，加入一些其他你想要的，这样你女友就更开心啦！后期如果有时间，我将会加上以上节日问候功能。接着，开启微信机器人，为了程序的健壮性，自动判断一下操作系统，根据不同操作系统执行不同指令：只有每天的问候和节日问候是仅仅不够的，我们必须时刻知道她的情绪指数，这里可以使用snowNlp或者jieba来做分析，但是为了能够在打包成exe可执行文件时使得程序尽可能小，我们采取直接调用接口的方式来做。代码如下：教完女友学英语后，开始把我们的关心语发给她。这里涉及到wxpy模块的相关操作，很简单，看我的例子就会了：最后，就是如何每天定时发关心语给女友的问题了。首先来个while循环，365天无限关心最后，输入以下代码开始守护女友模式吧~至于没有女朋友的……要不考虑一下它这张逼死淘宝专业抠图店家的照片，用3行Python代码，花5秒就能超高精度抠图。这里的 API 接口来源于 Remove.bg 网站，一个邮箱账号可以申请一个免费接口，可处理 50 张照片，如果想处理更多或者生成高清照片，需要买套餐，算下来价格大概是 上淘宝搜索「接着比较感兴趣淘宝店家是怎么抠图的，抠图的质量如何，于是选择了排名前两位的店家来做测试，跟掌柜开始了一段「先找了第一家店主，店主上来就说先发照片，抠图满意再付款，于是就发了文章开头那张比较难抠的一张，想看看他们水平怎么样：没想到店主这一抠就是二十分钟。。。满心期待地打开图片一看，头发丝抠的不好，照片色彩也变了：跟第二家店掌柜聊了后，也是花了 16 分钟弄好，比第一家稍好一点：把三幅图一对比，从头发丝抠的效果和照片的色彩还原度就可以看出还是 AI 效果最好，而且只需要 5 秒钟。于是，大致可以总结心疼掌柜，花了 20 分钟还没有拿下我这一单……这么难抠的图 AI 工具效果都好，那简单的证件照应该更没问题，基本确定有商机。接下来用 Python 把上面的代码进行完善打包成 exe 文件执行。轻松实现这样的功能：效果如下：具体实现很简单，第一步输入 API，第二步输入图片所在文件夹，接着程序就会先抠图，生成带透明背景的 PNG 格式图形。  接下来第三步利用 PIL 库来设置图片的背景颜色，键入一个字母就可以秒生成对应的背景色证件照。这样就做成了一个简单的证件照更换工具，拿去开个淘宝店和抠图的设计师抢饭吃没有压力……估计打死店主也都想不到让自己下岗的是几行代码……效率还是自己的N倍……此工具可关注公众号“七月在线实验室”后，发“证件照”获取。↓↓《名企AI⾯试100题》涵盖,我们在做技术方案的时候，系统架构图是必不可少的。轻松用 Python 快速绘制出一份精美且清晰的架构图，省去拖拽调整连线的步骤，让你分分钟上手。用 Python 做个陪着自己玩的聊天机器人，多有意思啊，想和它聊啥就聊啥，也不会烦。爱动弹了，就再升升级，搞个群聊、私聊的~用 Python 模拟手写体汉字，基于 Python 的 PIL 就可开发实现。将图片转化成各种较小图块拼接成的图像工具。马赛克风格的图片转化工具，支持自定义拼接图案和符号。工具实用方便、代码简单易懂，适合对图像感兴趣的小伙伴学习和上手。Python 强大的模块系统，可以高效的完成办公自动化的操作，轻而易举实现 Excel 自动化、Word 自动化、PPT 自动化。比如比如比如比如Python 写的微博爬虫，命令行直接启动。可以连续爬取支持获取微博用户、内容字段丰富。以后去掉背景图，把自己从图片里抠出来，咱谁也不求，Python 就能办！不光抠图，剪视频咱 Python 也行，不只是单个剪，批量处理也么的问题！只需两步，就能用 Python 做自己的专属二维码！,,,,,,,,,,
既然有些人喜欢开挂，为啥不开发一款网游，提供编程接口，允许玩家自行用各种软件，同时允许计算机参与计算？,比如，敌方开枪，由玩家设定扫描区域及间隔，同时服务器返回扫描区域内的物质，由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的，或者双方纯拼算力，参考超神学院，诸天降临(gay伦对饕餮王的那一段)，这样，大家都考虑着去优化算法了。也就没心思去搞挂了 ,"真有这种游戏啊。。。steam链接：有想要挑战一下的可以看这个live demo，不需要注册就可以立刻试玩：游戏的介绍：Screeps is an open source MMO RTS sandbox game for programming enthusiasts, wherein the core mechanic is programming your units AI. You control your colony by writing JavaScript which operates 24/7 in the single persistent world filled by other players on par with you.介绍的翻译：Screeps是一个为代码变态(划掉)爱好者设计的开源的MMO RTS（大规模多人在线即时战略）游戏。这个游戏的核心机制就是来为你控制的单位写AI。你可以用JavaScript来控制你殖民地（里的一切），并且这些内容7*24小时运行的，并且充满其他玩家来与你对抗。说白了就是给你提供一个JavaScript的接口，用来写一个“AI”来跟其他玩家对抗。可以简单的基于规则，也可以写现在这个游戏已经变得巨复杂了。从能源到采集，从防御到进攻策略甚至还有贸易等等等等。。。这个游戏有多复杂？首先想要入门，游戏是全英文的，除了写code要用纯英文，最重要的是所有的官方文档也都是英文的。你需要通过阅读文档来学习这个游戏的API：（这文档一看就是API Reference的风格）文档中包括整个游戏系统的运行逻辑、写code的接口和一大堆内部机制。当然，还有API References！来来来，请随意体验一下被代码支配的恐惧：然后看看大佬开源出来的code：（是的，放在了全球最大宅男/女交友社区）这个游戏的收费是花钱买算力(subscription token)。。而游戏中你可以获得算力再出售。所以完全有可能通过写一个巨厉害的code来赚钱……详细信息建议看steam页面中更：附上大致的意思是这样的：从场景中找到名为Harvester1的一个creep(既游戏种的一种基本单位)。然后寻找当前房间中的所有source。然后命令creep去harvest 所有source中的第1个source。但这个过程有可能返回值是“ERR_NOT_IN_RANGE”这个错误，说明creep距离source太远了。然后就命令creep moveTO那个source里。然后整个函数永不间断地执行下去。如此，万里长征第一步搞定了！你得到了一个可以遍历采集资源的creep。但是抵御不了入侵者，也很难最优化效率等等。想要更高端的agent，还是要多烧脑了。更：看了一下API，这玩意居然还支持",哈哈哈，我玩过一款网游可能符合题主的意思。预警：本文较长，注意流量。既然是外挂，提供编程接口就没什么意思啦，允许玩家自行用各种软件这个才是问题的关键。大概是2014年的时候吧，有时候上下班通勤时间或者厕所蹲坑时间，想找点游戏打发时间，不想玩单机，也不想爆肝玩一些容易耗时耗力的游戏。然后我就发现了一款现在回想，这游戏仍可以排进我玩过的沙雕网游的top榜之首，游戏很简单，就是点这个茅屋，然后就会造一个小人，（还记得游戏里面的boss就是山，而且那些山不是叫王屋和太行，策划们给那些山取了一些很脑残的名字，诸如：打boss就是，点击这个山，然后你的子孙数量就会减少一个数值，山的HP数量（血条）也会减少一个数字，然后根据你的子孙数量，和移山的数量，会在游戏里面有一个世界排名，然后里面也会有一个好友排名，会显示你和你的游戏好友的子孙数进行排名。当然，作为一个网游，它不可避免的也有充值系统，当然沙雕游戏的商店也是很沙雕的，卖的就是一些莫名其妙毫无关联但是让你在游戏里更快生孩子的道具，或者是对好友使用可以给好友避孕的一些道具。游戏中增加生产率的方法有很多，比如升级茅屋变成豪宅，茅屋点一次只能生一个，豪宅点一次可以生十几个；比如增加草丛或克隆人装置等自动生育场景（充值开通或者攻克boss之后的金币道具购买）游戏内核就这么简单，接下来就是开始斗法。=======简单分割线========我开始玩的时候，我那个同事已经是图2那种级别了，子孙67亿，生产速度222万人每秒，击败全球60%的玩家。我想偷偷地超过他，于是悄悄咪咪地开始玩，由于这个游戏只有“点击生娃”这么一个简单的操作，于是我先用了最简单的外挂，按键精灵。用调试完成之后，我心满意足地上班去了，也不敢挤号，看着我同事一本正经地工作的时候，我总是莫名想笑，心想着过几天我的游戏排名就要超过你了！兀自暗爽！然后我当天下班，飞一般的回家开电脑，打开一看，连点器仍在正常运作，但是我的子孙居然只有1.1亿！卧槽怎么回事，是我的数学不好还是游戏策划的数学不好？我又检查了一下连点器，依然是一秒一百次，一分钟72万，明明过了八小时，为什么只有1.1亿！我不解地百度，崩溃的发现原来这个游戏还有随机事件，就是会出现一个叫做“智叟”的人物，一下子就按百分比屠掉你的子孙，比例高到15%-30%！！！估计就是官方为了平衡我这种无脑点击挂出的类似验证码事件。然后这个游戏没有日志记录，被智叟屠了我也看不到是什么时间，也不知道他出现的规律和频率，除了网上搜到的图片，我都不知道他到底长什么样子，更不知道该怎么应对。但是我综合分析以往的游戏套路，应该是他出现之后点击他会触发一些事件，可以驱赶或者打败之类的。于是我守在电脑前大概2个小时，果然出现了智叟，只要在3秒钟之内点击他，就可以把他驱赶走，不然他就会屠杀很多的子孙，我不得不又在连点器原始代码里加上监测智叟出现的代码。当天晚上，捣鼓了半天，开了几个自动生产场景，自动生育率在每秒四万个，加上连点器，一秒钟可以生52000个子孙，一小时就是1.8亿子孙！！！睡觉之前再次确认了一下正常运行，明早起来，20亿妥妥的。果然，第二天一早起来，我的子孙大军已经生到23亿了，然后又是解锁场景，又是升级女娲，自动生育弄成了80万每秒，点击生产也达到了每下1000个，开挂高达每秒10万，加起来也就是90万每秒，和昨天的速度简直不可同日而语，并且我的世界排名已经击败了30%的人！超过同事指日可待！！可能也就是这两天的功夫了！！有了一天的游戏经验，除了智叟之外我还获得了一个信息：就是在游戏途中升级场景或者道具，会让产出比更高！于是我又下载了一个同事的游戏似乎没怎么打理，每秒生产率还是两百多万，但是人口总数已然达到了3000亿的级别，这个时候让我不得不感慨计划生育的重要性。想要超过他，不得不花点功夫，由于我有连点器这个大杀器存在，于是我开始讲究策略，我把点击就能生产的女娲升级升级再升级，虽然越到后面升级需要的道具金币就越多，我又不得不去移山，移山又死掉几亿的子孙，真的体会到愚公移山的精神。总之折腾了一个晚上，我的人口总数变成了只有一千多万，但是我点击一下女娲，可以用生产50000个子孙，然后又优化了一下连点器，让它每秒可以点击140次，这样光是点击的产出率就达到了700万每秒，加上生产场景每秒100多万的产出率，我的子孙以每秒800万的速度繁衍着。生产速度已经达到了我同事的四倍！预计一晚上我的子孙就可以突破3000亿的大关！明天上午，就可以全盘超过我同事！时间很快就到了我玩这个游戏的第三天上午，我同事5500亿总人口的时候，我已经6000亿了！！我差点就忍不住跟他说了！！但是我压抑住激动的心，硬是等到了下班的点，我的人口数经过一顿操作已经达到了10000亿，也就是一兆！！而我的同事仍然只有6000多亿！！我的世界排名已经击败了70%的用户！！下班时候我风淡云轻地叫住了他！我打开手机上的游戏，故作轻松地说：“你是不是也在玩这个游戏？你看看你的排名。”我准备欣喜若狂地收获他大吃一惊的表情，但他并没有特别惊讶，看到之后只是笑着说：“你小子可以啊，我这两天没玩你一下子把我超越了。”我们顺着聊了一会，然后我又得知他玩游戏的原因，因为他有一个同学，是一个网游重度氪金用户，玩这个沙雕游戏，居然也充值了一千多块钱！！同事为了证明技术比金钱牛逼（或者是证明他同学是个沙雕），就也开始玩这个沙雕游戏！也是想像我一样通过某种外挂手段干过他的同学。而且我同事仅仅只比我早玩两天！！这两天他下班忙着约会没有怎么玩游戏，所以一不小心被我超过了，我们坐电梯下楼越聊越起劲，干脆就去了公司附近的星巴克，他现场给我演示了一下骚操作！他走的外挂路线是提升自动产出，他觉得连点器什么的太low了，而且效率不高，他说自己一直在攒道具金币买地狱之门，这几天没怎么管，刚好消耗掉一波子孙，可以换两个地狱之门！地狱之门是一个可以一秒钟生产150万子孙的大杀器！！也是游戏里生产率最高的场景！！他打开了他的ThinkPad，然后麻溜的开出模拟器，兑换两个地狱之门，然后打开了一个辅助软件——变速齿轮！变速齿轮利用HOOK API修改游戏时间的倍速！他用的版本最高可以调速到256倍！也就是现实中每过1秒钟，他的游戏里已经过了256秒！！他的两个地狱之门就已经可以达到300万人/秒，加上变速齿轮，每秒造人速度居然高达7.68亿！然后我们喝咖啡聊天那一会儿功夫，他的人口数居然也突破了一兆！！除了一脸震惊，我还能说什么呢？然后我们正式踏入了一兆大军，世界排名也达到了击败70%玩家水平！但是他给我看了一下他那个氪金的同学，让我知道什么叫金钱的力量！！他的同学居然有世界排名！世界排名只有100个人，他的同学就是在52位，击败全球98%的玩家！据了解，他的同学不会软件，也不会外挂，纯粹是充钱玩，就玩到了这个地步！！我百思不得其解，因为根据我的研究，正常打boss加自然生产（没有谁会沙雕到一直狂点手机生产吧？），想要到我们现在这个程度（击败70%），可能都需要玩1个月。然后同事告诉我一个令人伤心的真相：因为我们都没充过钱，所以我们看到的商店和充过钱的玩家看到的商店不一样，充过钱之后商店里是可以直接购买地狱之门的，15块钱一个，买了地狱之门之后还送金币，送的金币又可以升级地狱之门，所以我这种辛苦攒金币买的地狱之门一秒只能生150万个子孙，但是我同学氪金买的地狱之门是这样的↓WTF！果然免费玩家和收费玩家玩的不是一个游戏！原来我们看到的商店都不一样！！我的商店里还有很多的问号，我以为是到了某个级别才能解锁，原来是要充钱！！最让人生气的是，氪金玩家还可以买几种道具，它们分别是：+10%，+20%，+50%就是字面意思，你要有10亿人口，买一个+50%，瞬间变15亿！可气的是，这些道具只要几块钱（1-3块钱左右）然后充了会员还是月卡啥的玩家，每天还有一次6块钱子孙翻倍的机会！！5000亿瞬间变1兆！而且没充钱的玩家只能遇到智叟来屠杀，充了钱的玩家随机事件居然是：天空突然经过同事的同学就这么无脑氪金，各种道具各种点各种付款，就这么硬生生氪了一千多，到了世界排行榜的前100！榜上有名！！我们要给平民玩家涨个脸，我们也要进榜！我们要证明技术比金钱牛逼！我们结合了我俩的骚操作，研究出了后台双线程操作，一边疯狂连点，一边变速齿轮自然生产，就这种疯狂的生产速度，居然还是不及排行榜上大神的生产速度，top100的大神们人口基数太大了，计算单位都不是一个量级的，我们爬天梯爬得好辛苦。游戏第六天的时候，到了一个阶段，所有能获取金币的渠道都打完了，场景和女娲都没办法再升级，我们的产值变成固定的1秒220亿，世界排名变成了击败90%的玩家！可以说是瓶颈期了，并且随着排名的提升，居然又多了一种玩法，就是你可以去掠夺其他玩家的人口，然后玩家会有闪电，可以打击前来掠夺的人，然后就会击落侵略者的一些人口数变成自己的人口数，但是闪电每一个都有冷却时间（用完了可以拿金币买），有时候掠夺的人来得多了，后面只能被掠走一些人口。我和同事研究中发现，这个游戏的安全机制（反外挂机制）可以说几乎没有，这个闪电很快就会用完但是很慢才能冷却，于是我们又用了新的外挂手段：wpe封包。我们设置了闪电的冷却时间，将数据包中的30分钟冷却设置成1秒，这样我们就一直有闪电，所有掠夺者，一个不留全部干倒！真正实现了朋友来了有好酒，敌人来了有猎枪！然而一天劈死几百个侵略者，我们的战利品——那些增加的子孙们，居然只让我们的世界排名提升了1%。但是这个契机我们灵机一动，可以刷CD时间，为什么我们不刷金币呢？这里值得一提的是，到后期干掉一个boss会给几百个金币，在所有百分比道具里面，+10%的道具是可以花1500金币购买的！但是我们目前范围内已经无boss可杀，没有获取金币的渠道，后来还是同事聪明，10金币买了商店里一个最便宜的道具，抓到数据包的数据之后，把金币数量的减法改成加法，然后封包发送，结果成功了！我们金币增加了10金币！然后开始刷金之路，一路刷到999999999999个金币，到了游戏金币栏上限。虽然免费玩家没有+20%，+50%和+100%(翻倍)但这个+10% 对于开挂玩家来说，已经够用了！然后我们的连点器变成了连点+10%，在我们已有的人口基数下，可以说是涨幅是一个天文数字了！全服第一指日可待！玩这个游戏的第九天：终于到了世界排行榜的第一，第二就是我的同事，我们人口数差不多，只要少抓一个智叟，就能轮流坐第一。拿到排行榜第一之后，这个游戏开始变得索然无味。同事也赶紧抽了个时间去和他的氪金同学嘚瑟，结果氪金同学说了这么一段话：他同学的一番话真的是震耳发聩如雷贯耳，我和同事都羞愧地低下了头。不过事后氪金同学从技术角度了解了一下我们的操作方式，然后抱着学习的目的刷到了世界第三。最后坚决抵制外挂行为，呼吁大家用钱支持自己喜欢的游戏。=====================备注：本故事纯属虚构，如有雷同实属巧合。本人不为故事中行为和语言承担任何道德上的谴责或法律上的责任。,我们有个黑客游戏，岂止是允许写外挂？而是不会写代码没法玩。：一个服务器，每人一个你们会想玩不…,有啊有啊。有个游戏叫2001年发布，最新版是2018年4月发布。玩法很简单，用程序控制自己的坦克击毁对方坦克。但实际上可没那么容易，开炮要算提前量，不过对方也不傻，会用随机移动来扰乱你的瞄准。当然你也要用有效的移动策略防止对方打中。我随便贴个视频你体会一下当然这是低段位的比试，双方的动作都有很多问题。高手对决可以用深不见底来形容。虽然国内并不流行，但真的是很好的游戏。,虽然不是完全符合题主的要求，但这两款游戏，一定程度上形成了一个“开挂”的小圈子，各国作者都在研究如何更加优美，更加奔放的“开挂”。而且后者对于外挂的研究深度，一定程度诠释了外挂的最终形态。第一款游戏是暗黑破坏神2大家可能都玩过，一部分人的记忆停留在血乌都瑞尔上，硬核点的玩家可能还记得build各种char。但能觉得这款游戏能跟开挂扯上关系的，无非也就是但这个游戏有一种小众而独特的玩法，叫做硬血就是修改暗黑2的人物存档，d2s文件，不涉及MPQ，dll文件的修改，使其可以进入任意暗黑2的战网房间内，两个人进行PVP。因为相比于正常存档，硬血人物是完全打不死的存在，所以起名硬血。硬血玩法是硬血人物对抗硬血人物，不像传统单机游戏一样是外挂欺负AI，也不像传统网游一样是外挂欺负正常玩家。所以如何修改成一个好的硬血人物存档，有着非常深刻的讲究，其中运用了非常多的暗黑2基础游戏机制，需要大量时间去钻研。硬血人物图片硬血科普贴：第二款游戏是mugen。mugen是一个格斗游戏引擎，最经常拿来做同人格斗，详情请见我的科普格斗游戏中，被讨论的最多的就是人物的强度，绝大部分格斗游戏，都被玩家严格的区分了人物等级，S-C不等。甚至更多的人还在跨作品比较人物强度，比如KOF97中的大蛇和KOF2001的再加上中期mugen的AI作者的崛起，本来傻傻的任人欺负的普通人物，被赋予了强大的AI，于是mugen玩家们不再去手操控制人物，而是观战让AI打AI，于是你在B站上看到了各种各样关公战秦琼的杯赛。我的入门杯赛：强中-凶中略有节操大乱斗开启拳皇时代的杯赛：拳皇世界既然人物-AI都是各国作者制作的，那么mugen人物就免不了被加上各种私货，比如制作一个超高防御超高攻击时刻全屏攻击的大蛇，这样的人物应该就是mugenmugen中的凶恶技术，是各个时代中喜爱凶恶玩法的作者，对于制作高强度攻击面，和高强度防御面的汇总。由于喜欢凶恶的作者和观众非常多，甚至达到和普通玩家分庭抗礼的存在。即使到现在，mugen传播在外的名声最大的mugen角色，也是一个凶恶人物——祸灵梦。mugen有着非常严格的分级制度，纸并强凶狂神，强上凶下的等级差不多就是一个格斗游戏的顶尖玩家操作非BOSS S级角色的水平，而到了狂中往往存在各种回血脱离，已经是人类手操正常角色战胜不了的存在。到了神下之后，格斗游戏的表现力都趋近于无，你来我往之间只是画面和音效的演出效果，更多的是后台代码之间的战斗，神级角色们搭载了各种各样的凶恶技术，这些凶恶技术积累于日本作者和中国作者，所以有着各种各样的中二名称。比如即死，OTHK，混线，超即死，永续毒，毒，死宣，强制死宣，即死返，贯通炮，邪眼杀手，亲变更，NOKO。每一种称呼，背后都有对应的一项技术，这些技术往往针对了mugen中各种判定和BUG，来让系统判定自己胜利。好的凶恶角色往往搭载了更多，更通用的凶恶技术，也有着针对某些角色钢板防御面的特殊对策。凶恶技术：凶恶技术还分攻击面和防御面，凶恶作者更加追求攻击面，在神级的顶点神最上的战争中，打掉多少高防御面的靶子，就是攻击面的体现。2018神最上评测 然而神最上就是mugen的顶点了吗？并不是。随着mugen作者的深入研究，更加凶恶的技术出现了。那就是针对mugen内存地址，汇编代码，栈溢出的隔离技术，包括本体亲捏造，%n，%f，statedef溢出，def溢出，这些技术应用往往已经不局限于mugen中的胜负了，可以直接注入汇编代码，修改mugen源代码，调用dll，调用windows的API执行任意行为。这种人物之间的攻击，往往在游戏战斗之前就开始了，在选择人物甚至载入人物的时候就完成了攻击。所以出现了打开浏览器的人物，删除所有人物的人物，听歌的人物。所以有个mugen笑话就是病毒人物。选择即关机或者重启的两个人物选择之后按E，可以打开作者博客的人物（调用explorer.exe被360报毒了）隔离技术：这里必须要提到一个中国作者，ydccdy2010，通称遥远，几乎大部分的隔离新技术都是他提出来的，是mugen凶恶历史上最重要的作者。这些新技术的出现，让mugen人物强度再次提升了一个档次，甚至让原本的神级人物不带他们玩了，神最上评测中不允许出现隔离技术。论外·攻守对决：看到上述两款游戏，你是不是对外挂又有了新的理解，其实不管是单机游戏的修改器，还是网游的挂，都没有太多深度。外挂的最终形态，就是变身成黑客，攻击游戏本身，攻击玩家电脑，攻击服务器。,我之前就想要做一个这种游戏来着，没有人机界面，全部API提供，后来被朋友阻止了，他们的理由非常说服人：我不想下班了以后再上班。。。。=====没想到这么多人想要下班了以后再上班。。。。。有建设性意见的可以加我微信，备注：下班之后再上班，我拉你进讨论群。。。。,更新：感谢各位点赞，如想开私服，微信扫我头像。——————————————————————————这种游戏不要太多。从最入门的  到到到到,不知道大家有没有听过大家只想在有秩序的环境下做那个有特权的人，而不是在一个混乱的环境下肆无忌惮得做任何事。在一个混乱的环境下大多数人只能被按在地上摩擦，即使没有被按地上摩擦，那也远没有开挂带来的凌驾于秩序之上规则之外的感觉来得更爽。,------------------------------------------------简单地说，2019.5.27添加------------------------------------------------虽然mugen并不是网游，但是其它方面完完全全体现了题目中的各种设定。首先说一下mugen是什么：绝大多数游戏，在给玩家提供了太过自由的环境后，往往都会发展出一些莫名其妙的东西出来。比如我的世界里有人造了一个游戏机，然后在我的世界里的游戏机里玩我的世界；中世纪背景的besiege，制作者原本想象中的投石机摧毁停车场变成了汽车人大战F22；war3原本一个RTS游戏，但是现在空战赛车射击消消乐连连看什么地图都有。mugen也是一个被“玩坏了”的典型。这里引入一个概念：纸 并 强 凶 狂 神 论外，也许有些人听过这个东西，不过这里也大致不太严谨的解释一下：纸 并 强 凶 狂 神 论外是用来对游戏人物进行分级的，最弱者为纸，大概有星爷电影中眼镜仔的强度（或许更弱？）；mugen玩家制作的并、强、凶人物还比较正常，纸级太脆，作为游戏人物而言战斗力不足1鹅。并、强、凶级的人物就开始有意思起来，玩家创造出来的人物在自己制作的AI支配下互相战斗，各种花式连击和战斗脱离有声有色，状态爆发之下，一套连击带走对方也是有可能的，还出现了一个常用语“十割”，表示一套连招打掉整整一条血条，有十割当然也有五割、七割，一气（能量豆，用来施放超必杀技等）十割，三气十割等。但是到了狂级，一些奇奇怪怪的东西就多了起来。比如死星或者叫做死兆星，源自普通mugen角色的作者（或者可以理解为mugen这个游戏的玩家）还在想办法用拳脚到肉的方式击败对方，还在尝试不断提升AI对于技能招式的判断，给自己游戏角色增加了死星的玩家已经脱离了正常的格斗概念。类似的还有大伤害，脱离，无敌等等mugen的画风从这里就开始奇怪了像先是有些作者作出的角色可以把对手打浮空一套连击到死，或者干脆就是自带无限连然后就有作者给出了脱离——甭管你打的多开心，我都可以瞬间脱离被你打中浮空的不可控状态紧接着有作者给自己的角色增加了大伤害技能，特定条件下的招式可以一击打掉一条血那么对应的有些角色就出现了大伤害检测功能，一旦出现大伤害，则会令其无效有些作者制作出了“我看了电视”这种无法格挡的赖皮技能那另一些作者干脆搞出类似“自信”（白罗灭精）之类的全屏伤害、自身无敌的大招出来所以狂凶级别的战斗通常最为精彩，大家往往看的眼花缭乱，B站随便搜狂级/凶级/mugen都可以看到很多。（某不走心的随便举例）神是个什么概念呢？大概就是“普通人不能理解”这种概念吧。普通人战斗的目标还是消减对方的血条，让对方血条归零，或者低于自己拖到时间结束。神已经不满足于这些了，像这种普通攻击模式，神级是不屑于做的，攻击最起码也要是全屏伤害，自身无敌等。举几个例子：时间暂停——游戏打一半，突然整个世界清静了，除了释放暂停神技的角色外，一切飞行道具、人物、时间包括背景人物统统被暂停了，然后等时间恢复后，瞬间脸上飞来无数拳脚黑粒子。开场偷跑——游戏双方还在摆pose的阶段，一方就已经开始各种拳脚飞踹了，这时候甚至举着无敌——你打不到我的脸哟，“无耻”的作者们干脆去掉了自己的人物受击框，脱离了这个次元，比带土的写轮眼可要厉害多了。回血/锁血/空血不死——我站着这里让你打，能打死我算你厉害。秒杀——游戏一开始，ready go 刚刚喊完，屏幕上紧接着就出现了w的这些操作已经不是在游戏设定的框架之内进行了，有的通过调取mugen系统自带的一些金手指，比如让自己瞬间满血，对方瞬间死亡等，有的利用游戏规则漏洞，比如无敌、暂停等不一而足。所以神级人物有人也称之为灯光师。两个神级角色战斗时各种炫酷的技能四处飞射，但是两边要么无敌，要么脱离了这个次元，让对方这些平时能够秒杀纸并凶狂的技能只有一些动画效果，完全没有伤害或者干脆打不到人。那么什么叫做论外呢？论外，大概就是讨论的时候要排除在外的意思吧。为什么要排除在外呢？因为能够驾驭mugen世界规则，乃至篡改规则的神级角色们，也都无法击破论外的防御。论外采用的技术完全就是黑客手段。比如直接消去对方PLAYER，架还没打，对手就从这个世界里消失了。比如直接篡改规则，让游戏宣告自己胜利，或者宣告对方失败。比如冻结对面，直接让对方无法读取数据，各种神级手段无法施展。比如让数据溢出，导致对方无法正确读取自己的角色，己方无敌等等。比如直接修改对方人物数据，把对方神级人物变成一个白板再来和自己单挑。像这种时候，谁能取得胜利已经不是看招式如何了，完全是看谁的程式加载更快，早一步把对方变成白板，就直接在游戏开始前取得了胜利。而且论外最强的地方其实不在于攻击，而是在于防御，论外最强者被拉下马，要么是出现了一位拥有原本“论外最强”都无法击破的防御的人物，要么是出现了一位攻击快过对方的新人物。像这种修改角色数据、修改可以说这些游戏角色已经脱离了原有的框架，完全就是一段病毒，像那种借助金手指开挂的，在里面都是相当低端的存在。贴个论外大佬们的战斗？视频提问者说的“由计算机运算区分出是否是子弹，及时提醒玩家，或者自动计算躲避路径，并及时躲避，可以扫描出敌方位置以及移动速度，计算弹道什么的”在这些无节操的论外角色面前，可爱的像是一只小绵羊。最后说一点：由于mugen各种技术实在太过复杂，我也仅仅是个偶尔看看视频的爱好者，所以这篇答案里面对于,少年，你知道MUGEN神战吗？为啥随便答一句就被顶起来了真正的圈内大佬的回答却没人看啊……,有这样的游戏，只是没有做成对战类网络游戏。在大学里，这个游戏叫航模大赛/机器人大赛/算法大赛。在体育界，这个游戏叫F1。在网络上，这个游戏叫网络安全。在市场上，这个游戏叫至于为什么没有面向普通玩家的游戏，这样的设定，与天斗，太容易，与人斗，太难了。,你要知道，这些人开挂，是因为他们太loser只能在一个公平环境下去用不公平的工具满足于自身产生虚假成就感真要真刀真枪干外挂服务器csgo有外挂社区服务器在那里面，什么锁头穿墙都是弟弟小陀螺都是垃圾那里大陀螺是起步，大陀螺不是你转的更快打的更快大陀螺是能规避子弹的就像题主说的，比拼算法优劣了你觉得，公平环境下low到开挂的菜狗，他会编程吗？,那我干嘛不打全球同服，万人竞赛。在线评分，一发入灰。服务器位于俄罗斯，受俄罗斯法律保护。,要是喜欢编程pk，可以去玩玩Screeps用JavaScript调教你的AI侵略别人的领土保护自己的领土的游戏Steam上68，官网上有免费试玩版，没有中文听说建议先玩玩试玩，因为太硬核了，很可能发现不对自己的胃口我并没有玩过，因为没学过JS。。。,玩家开挂并不是因为喜欢自己动手做外挂，而是别人没有的超能力但我有，能通过最简单直接的方式大杀四方，享受的是那种高人一等的快感。,有啊，mugen是一个格斗游戏引擎。玩家自己开发角色参战。最开初大家都尽量还原原作性能。某一天一个人突发奇想的在某个招式下面加了个这个[state -2]type= nohitbytrigger1=1time=15这样这个招式就有15帧的无敌时间了。然后陆陆续续的作者希望自己的角色更强配合优秀的ai+人物性能当时的神级，现在的狂级就诞生了。狂下位的审核：黑鬼（又名高速回血回气，各种广范围的无敌技能，一个秒杀技能。手操一个强级人物和他打打就知道有多绝望了。但这并不能满足作者们的欲望。于是神级，诞生了。神级的审核五位成员都是常时锁血，常时无敌。一般的技能对他们已经不起作用了。这时候就必须要借助引擎本身的bug来扣他们的血。然后各种代码之间的针对与反针对开始了。某一天，一位作者发现了512内存溢出法可以让对手几乎无任何抵抗方式的被ok。论外诞生了。他们的生死和血条已经完全无关了。他们的攻击手段也和扣血无关了，直接利用内存溢出的方式ok对手。论外的技术由于过于凶恶，所以称之为“论外”。发展了这么久，最凶恶的技术有目前四个：1.极限卢卡尔为代表阻止对面人物加载，替换对面人物文件，普通即死获得胜利2.文本为代表修改胜负判定法则，自杀判胜。3，4，记不得不过目前貌似还有更加凶恶的：混元魔女。利用xp系统bug在打开mugen时就造成杀伤，不选人直接获得胜利。,额，据我所知，有人在去年组织了一场“神仙大乱斗”。是的，绝地求生神仙大乱斗比赛，参赛选手带上各自的挂，看谁能活到最后，在斗鱼直播的好像……然后比赛被叫停了。…………………………………分割线…………………………守望也出地图工坊了，你可以完全自定义除人物模型和地图模型外的任何细节，比如更改技能和触发动作，改变角色在某种地形上的移速，改变弹道速度和命中判定，传送角色，更改物品属性等等……不知道会不会出一个挂房……,本末倒置了。游戏的第一要素是好玩，不是防作弊。还是那句话：游戏不是为了防作弊而开发的。开发者全部精力放在玩法上，也不能保证游戏好玩，怎么会更多关注防作弊呢？而作弊者，不好玩的游戏他也不会去玩。因为他享受的是相对大部分人的优势。一个人玩作弊缺乏观众。如果有人费尽心思开发防作弊机制，结果可能是不好玩儿没人玩，作弊机制无用武之地。而游戏好玩，大量玩家涌入，导致需求巨大，再好的防作弊机制也会被破解,这怎么能少了老牌fps游戏，大名鼎鼎的穿越挂线（cross f***，简称cf）呢？正式服的外挂不能满足题意。基本处于不明显的挂（如透视）大号开着，明目张胆的挂基本是小号的状态。如果是大号明目张胆开挂100%是盗号/借号/租号但是！cf还有一个服务器，叫做体验服当年体验服本意好像是比正式服早更新，用于玩家测试。然而体验服很快外挂横行，也不知官方怎么下了决心，就把体验服变成养挂场所了，在体验服开挂我好像没听说过有处罚。反正体验服就是个神仙斗法的地方:进入刀战地图，作为良民入场。刚进场对面就冲过来个玩家，他手上的拳套挥得凶猛，下下似猛虎扑食，却又快若轻鸟舞翅，大有金丹期气势，你就看见个无影爪刚碰到你就横尸了然后我方一个队友突然大喝一声，震退金丹术士，掏出破天然后他就从我们家走到对面家一遍，把包括那个拳套哥在内的全干趴下了。结果对面又进来个屠龙哥，他的术法依然是快刀。但恐怖的是他的刀只有起手没有落刀，我连挥刀距离都看不清，只要进入攻击范围就死。这哥们跟我方元婴大宝剑战了几个来回，互有胜负，看来也是元婴大神。这边正难舍难分，对面又突入一个身影。只是他一进来就开始翻滚（正常角色被看起来相当厉害啊！完全不知道他的真实位置在哪。犹如轻功高手，身影不定。结果我方大宝剑冷笑一声，高速再来了个绕场循环，连翻滚哥一并砍倒在地。好吧，原来是个中看不中用的。然后对面又进来个屠龙哥，只是……只是我看不到人物模型。恐怕已是出窍分神，实力深不可测！至于为何我知道是屠龙？因为他站在原地，轻抬宝刀，就能以屠龙索命千里之外。（玩家对这个挂取的外号叫做“小李飞刀”）不，这可能已经是合体期了！他轻轻松松把我方大宝剑摁在地上摩擦。元婴强者都被打得惨不忍睹。（话说我们这边就大宝剑一个修仙之人，所以其他人完全是任人鱼肉状态）后来这位强者觉得太无趣，自己跳到地图底下（死亡隧道地图）划水去了。（我下去就看到一片轻刀打水激起的水花犹如水雾一样，他一抬头我就GG了）这时，一个笑脸兵入场。刚瞥见他的级别（最低级别图标就是个笑脸）就两股战战，要知道，在正服仙家最强战力基本是笑脸兵。还未等我缓过神来，只见他小刀在空中漫无目的地一划，我们这边全部人应声倒下！倒在血泊中的我才忽然顿悟了，原来笑脸，是对凡人最大的鄙夷和嘲讽。（问题是这把怎么挂基本都在对面？）[以上除艺术加工外全都是我真的见过的外挂]还有一次是生化模式。一个玩家拿着美中不足的是他的飞天挂需要不断按跳跃键，不然会下坠，显得不太美观。也许这把无敌手，太无聊了，这玩家没有参与下一把。结果新一轮开始，玩家中一架妥妥空中炮艇，我们所有人都变生化了他还在空中火力压制。而且他的飞天挂是固定高度的，不需要他连续操作。所以他可以专心开炮。正当我以为又要望洋兴叹的时候，生化群里突然窜出一只刚才还平平无奇的小红，腾空而起，直奔炮艇。我们麦都兴奋炸了:“卧槽！神仙对决啊！”“抓他！抓他！”这小红飞天就是上局那个轰炸机的连续跳跃飞天。虽然慢了点，但却恰恰对固定高度的飞天形成了威胁。小红从下面一点点扑上去，炮艇的飞天挂改变高度似乎很不连续，所以他只能且战且退。勉强打死小红一次，击退第一波攻击。但很快小红复活，继续扑上来。炮艇不就就被贴身击毙了。后来他两还搞出了飞天终结者对战空中炮艇，飞天终结者对决飞天复仇女神……反正我们一帮凡人都在地上喊666,允许算法参赛，这种游戏很多啊。只不过，这种所谓提醒玩家的功能其实是完全没有必要的。因为允许算法的话，所有的事情都可以由算法完成，玩家只需要看就行了。本质上你想要的所谓掌控一切的感觉，然后却发现在AI面前人类的操作显得那么没有意义，实际上给不会编程的玩家不会带来多少乐趣。因此这类游戏最终变成了程序员专属，或者至少是对算法感兴趣的玩家专属。也算是某种程度上的策略游戏吧。这对于某些只想要操作取胜，不想要极致策略的玩家来说并不友好。
程序员必须掌握哪些算法？,,为了让你对数据结构和算法能有个全面的认识，我画了一张图，里面几乎涵盖了所有数据结构和算法书籍中都会讲到的知识点。这里面有10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。这里也给大家推荐一个特别适合新手免费刷题的网站算法相关内容非常全面，从基础入门到进阶提升，所有必备知识点都包含了，而且牛客不光是一个刷题网站，还是一个交流学习平台，发个问题总有热心的大佬帮助！如果觉得不错，别忘了双击点个赞哦。貌似手机端打开连接有的会出现问题，可以点击这个总结看看：这里补充一下，无论是学习算法还是学习编程的任何一个技术点，想要得到提升，最好的一个方法就是去阅读，阅读优秀牛人的分享，目前主流的程序员习惯阅读的博客网站中，掘金社区属于质量不错的一个，内容包括前端、后端、Android、iOS、人工智能等等，各个方向，各个技术点都有，C++程序员需要的知识都能找到。喜欢在掘金社区阅读的小伙伴可以通过下方链接了解。学习数据结构和算法的过程，是非常好的思维训练的过程，所以，千万不要被动地记忆，要多辩证地思考，多问为什么。如果你一直这么坚持做，你会发现，等你学完之后，写代码的时候就会不由自主地考虑到很多性能方面的事情，时间复杂度、空间复杂度非常高的垃圾代码出现的次数就会越来越少。你的编程内功就真正得到了修炼。入门的同学，我建议你不要过度追求上去就看经典书。不要一来就拿着《然后就放弃学算法了。所以，入门的同学，我建议你找一些比较容易看的书来看，比如《大话数据结构》和《不要太在意书写得深浅，重要的是能不能坚持看完。《大话数据结构》 这本书最大的特点是，它把理论讲得很有趣，不枯燥。而且每个数据结构和算法，作者都结合生活中的例子进行了讲解， 能让你有非常直观的感受。虽然这本书有 400 多页，但是花两天时间读完，应该是没问题的。如果你之前完全不懂数据结构和算法，可以先从这本书看起。《算法图解》 跟《大话数据结构》走的是同样的路线，就像这本书副标题写的那样，“像小说一样有趣的算法入门书”，主打“图解”，通俗易懂。它只有不到 200 页，所以内容比较少。作为入门，看看这本书，能让你对数据结构和算法有个大概的认识。当然，这些入门书共同的问题是，缺少细节，不够系统，也不够严谨。所以，如果你想要系统地学数据结构和算法，看这两本书肯定是不够的。通过基本入门算法书的调教，你已经逐渐体会到了算法的魅力，现在正是时候踏入基础系列算法的领域！！！这些书籍需要你费点心思去阅读。很多同学在学习的过程中，看到一篇算法科普文章经常会有这样的想法。哎呀，要是文章的代码是 Java 语言就好了呀。哎呀，要是文章的代码是 Python 语言就好了呀。虽然代码并不会很严重影响阅读，但还是有很多强迫症的同学喜欢看到文章的解释代码是自己擅长的。我这里推荐《数据结构和算法分析》，这本书非常系统、全面、严谨，而且又不是特别难，适合对数据结构和算法有些了解，并且掌握了至少一门编程语言的同学。而且，这个作者也很用心。他用了三种语言，写了三个版本，分别是：《大家都知道，对于程序员来说很大程度上算法就是为了应付面试的。所以，推荐三本有益于面试的书籍，分别是：《剑指 offer》《编程珠玑》《《剑指 offer》这本书的目的非常明确，就是为了面试。这本书几乎包含了所有常见的、经典的面试题。如果能搞懂这本书里的内容，应付一般公司的面试应该不成问题。面试之前也可以去牛客看看笔面经，知己知彼百战不殆！我做了一个 图解《剑指 offer》的小程序，应该能帮助你学习，感兴趣的可以在微信搜索 图解剑指offer。我也在 B 站录制了一些图解剑指 offer 的免费视频课程，感兴趣的也可以看看，每个视频控制在5分钟以内。《编程珠玑》这本书的豆瓣评分非常高，有 9 分。这本书最大的特色就是讲了很多针对海量数据的处理技巧。这个可能是其他算法书籍很少涉及的。面试的时候，海量数据处理的问题也是经常会问的，特别是校招面试。不管是开拓眼界，还是应付面试，这本书都很值得一看。《编程之美》这本书有多位作者，其中绝大部分是微软的工程师，所以书的质量很有保证。不过，这里面的算法题目稍微有点难，也不是很系统，这也是我把它归到面试这一部分的原因。如果你有一定基础，也喜欢钻研些算法问题，或者要面试 Google、Facebook 这样的公司，可以拿这本书里的题，先来自测一下。正如 遇到一个实际问题，充分利用所学的数据结构，将数据及其之间的关系有效地存储在计算机中，然后选择合适的算法策略，并用程序高效实现。。在工作过程中，我们多多少少都接触过 OAuth2 ，在使用 OAuth2 授权的时候，通常应用会弹出一个类似这样的信息：如何你熟练掌握了各种数据结构的特点的话，那自然而然想到使用 我们把权限划分成最小粒度之后，每一个 bit 都它的含义， 例如我们把权限划分为以下几种：每勾选一个选项，就代表着这个权限被授权，为了保证可扩展性，我们使用一个 例如，第一个 bit 如果设置了，那么就代表可以获取你的昵称、头像、地区、性别等基本用户信息， 第二个 bit 如果设置了，就可以用你的身份发状态。数据结构的实际作用还有挺多，感兴趣的可以搜索以下知识点：同样的也来思考一个问题：计算机的缓存容量无论再大，缓存满了还是要删除一些内容，给新内容腾位置。那么删除哪些内容呢？我们肯定希望删掉哪些没什么用的缓存，而把有用的数据继续留在缓存里，方便之后继续使用。那么，什么样的数据，我们判定为「有用的」的数据呢？这个时候采取的策略就是 LRU 的全称是 Least Recently Used，也就是说我们认为最近使用过的数据应该是是「有用的」，很久都没用过的数据应该是无用的，内存满了就优先删那些很久没用过的数据。具体的关于 补充：为了避免知乎大佬觉得我吹逼，先贴一下自己的 GitHub 地址，算法是一种技能，是可以通过科学合理的方式训练出来的能力。在想刷题之前，得从心里认识到接受刷题很重要，才能坚持去刷题。江湖有个传言：就目前互联网的情况来说，无论是面国外大厂还是面国内大厂，如果想换工作都要去刷题，一面二面不丢你几道 Hard 题，都对不住你偷偷摸摸找个会议室假装开会实则面试的鸡贼。同时，还得认识到一点，而某些小镇刷题家，还真就靠刷题拿下了 Google、微软、脸书等大厂offer。国内大厂也有这种趋势，比如字节，一大半都是面试题。（PS：感谢大家耐心的阅读，算法是程序员的重中之重，必须攻克，大厂面试必考，顺便送一份阿里大佬刷Leetcode总结的算法笔记，如果你能吃透，那我相信80%的技术面试都会不在话下： 这本书的目录，非常经典：不知道怎么刷题，对很多概念都很陌生，各种数据结构和知识点几乎完全不懂，打开 LeetCode 第一题，满头问号。有人相爱、有人夜里开车看海、有人 LeetCode 第一题都做不出来。2、算法上基本已经入门，Easy 可以做出来，Medium 纠结半天也能有头绪，但基础不牢，比如字符转字符串还得 Google 一下。3、刷了几百道题后，总结了自己的解题模板，参加周赛有时候甚至可以全部完成。4、开始以 beat 100% 作为 AC 的目标了。就目前的算法面试大环境来说，能达到第二阶段，中小公司可以应付过去了，到达第三阶段，字节、腾讯算法面试环节妥妥没问题了。怎么样到达第三阶段？给一下我的一些小建议吧。1、如果目标是国内大厂，那么一定要刷足够的题，不需要把 LeetCode 上 2500 道算法题都刷完，但至少刷 200 道算法高频题，这些高频题我都写了题解同时也录制了视频，在这个链接总结了：2、面试前一周以看题为主，因为刷题也刷不了几题，多看看自己总结或者别人总结的模板，比如回溯算法模板，掌握后，几十道回溯题都不在话下。一些模板：3、刷题过程需要注意难度要循序渐进，算法训练是一个系统工程，需要循序渐进，太过于急功近利，反而容易因做不出难题而产生挫败感，带来反效果。如果你本身有基础，熟练度高，那你刷简单的 LeetCode 应该是几分钟一题，几分钟一题的，花不了你多少时间。如果你刷简单都花费很长时间，说明熟练度不够，就更应该从简单开始，然后过度到中等，再过度到困难。并且，目前国内大厂的算法考察，基本不会超过 LeetCode 中等难度，上限难度基本都是 LeetCode 中等题里面的中等难度，所以不要太去纠结难题怪题偏题。把高频题掌握就行了：再退一步，如果你觉得 LeetCode 的题目太难，可以先从《剑指 Offer》上的算法题开始学起。为了帮助大家更好的入门学习算法，经过半年的积累，我给大家领取地址：4、这样做有几个很明显的好处。一、持续地刷同个类型的题目，可以不断地巩固和加深理解，可以总结出自己的思考路径或者解题模板。比如链表题目，就会去思考虚拟头节点、双指针、二、可以更全面地接触这个数据结构，算法的各个变种，这会促使你对这个数据结构，算法的理解更加全面和深刻，学习的效率会更高。我一直认为读书是世界上性价比最高的成长方式，书很便宜但分量很重，是让我们摆脱平庸走向卓越的方式之一。对于计算机专业的学生而言，读计算机经典书籍不光能让你快速提升知识和能力，更会让你在校招之际如虎添翼。下面这是一个1、怎么学好数据结构，看下面这个回答，已经获得了 2、如何系统地学习算法，看下面这个回答，已经获得了 3、新手该如何使用 GitHub，看下面这个回答，如果在大学期间就知道使用 GitHub ，那么能力远超同龄人。4、想成为一名优秀的程序员，那么这些程序员平时都喜欢逛的论坛怎么说你也得收藏一些吧。5、无论别人怎么说，我都是坚定不移的选择计算机专业。6、如何系统地学习 C++ ，这个回答能帮你找到路线。7、想要准备 Java 面试，那么这些面试题必须掌握。,程序员必须掌握的常用算法正如 1、排序算法：1、数组和链表还可以在此基础上细分，例如单单排序算法就可以分为以下十种：对于学习算法，我推荐在力扣上刷题：此外，推荐一个用动画的形式演示 LeetCode 上的题目的项目：例如基础的该项目正在完善中，已经用动画的形式演示出了一下题目：此外，再推荐一些免费的学习资源：在学习的时候，要想为什么要这样设计，优点在哪里，有什么改进方法，逐步通过这样的方式提升逻辑思维能力。不懂就查，找学习资料和相关解答，坚持学习。算法学习网站，上去每天刷两道算法题，走遍天下都不怕。也是算法题网站，同上。这个是上面算法题网站的中文站点，英文不好的可以刷这个，英文好的推荐去刷英文网站的题目，还能提升英语能力。中国大学MOOC是由网易与高教社携手推出的在线教育平台，承接教育部,。下面是我觉得值得学习的一些算法以及数据结构，当然，另外，这里有个可以白嫖的项目，推荐给大家1、时间复杂度2、空间复杂度一般最先接触的就是时间复杂度和空间复杂度的学习了，这两个概念以及如何计算，是必须学的，也是必须最先学的，主要有最大复杂度、平均复杂度等，直接通过博客搜索学习即可。文章推荐：不用说，链表、列表必须，不过重点是链表。特别是优先队列，再刷题的时候，还是经常用到的，队列与栈，是最基本的数据结构，必学。可以通过学习算法的过程中，有业余时间也可以学一学项目，毕竟很多算法最终都落地到项目上滴，这里给大家推荐一个（必学）哈希表相关的，推荐通过博客来学习，推荐文章：树相关是知识还是挺多的，建议看书，可以看《算法第四版》。相关文章：树状数组其实我也没学过，，，，这里给大家推荐一份刷题笔记，里面把各种算法题型以及经验都总结了，把这份笔记突击学习一下，很多算法考察，基本都稳了，给大家看一下目录下载链接：对于十大算法的学习，假如你不大懂的话，那么我还是挺推荐你去看书的，因为看了书，你可能不仅仅知道这个算法怎么写，还能知道他是怎么来的。推荐书籍是《算法第四版》，这本书讲的很详细，而且配了很多图演示，还是挺好懂的。推荐文章：图还是比较难的，不过我觉得图涉及到的挺多算法都是挺实用的，例如最短路径的计算等，图相关的，我这里还是建议看书的，可以看《这方便的只是都是一些算法相关的，我觉得如果可以，都学一下。像贪心算法的思想，就必须学的了。建议通过刷题来学习，leetcode 直接专题刷。我觉得动态规划是最难的一个算法思想了，记得当初第一次接触动态规划的时候，是看01背包问题的，看了好久都不大懂，懵懵懂懂，后面懂了基本思想，可是做题下不了手，但是看的懂答案。一气之下，再leetcdoe专题连续刷了几十道，才掌握了动态规划的我写过两篇字符串匹配的文章，感觉还不错，看了这两篇文章，我觉得你就差不多懂 这方面的一些算法，我也只了解过一些，感兴趣的可以学习下。最后，给大家推挤个项目，以防不备之需对于上面设计到的算法，我都提供了感觉还不错的文章，建议大家收藏，然后可以利用零碎的时间进行阅读，有些人可能会觉得上面的算法太多，说实话，我觉得不多，特别是对于在校生的，上面涉及到的算法可以不用很懂，但至少得了解。至于书籍的话，如果你连基本数据结构都还不懂的，建议看《这些算法的学习，虽然你觉得学了没有什么用，但还是那些话，它对你的影响是潜意识的，它可以给你打下很深厚的基础内功，如果你想走的更远，那么我推荐学习，标注算法的学习没有太多捷径，离不开刷题，刷多了就会有感觉了，这里再给大家推荐一份某大佬的 leetcode 刷题笔记，汇聚了上千道 leetcode 题解，并且代码都是 beat 100%：下载链接：这里有个可以白嫖的项目，推荐给大家,"《Python入门教程》《Python初级入门精讲》《Python爬虫开发》《Python实战编程》《1小时掌握Python爬虫+高效学习法则》【收藏是点赞的4倍，你们是要闹哪样！】程序员必须要掌握的十大经典算法快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。算法步骤：1 从数列中挑出一个元素，称为 “基准”（pivot），2 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。3 递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。堆排序的平均时间复杂度为Ο(nlogn) 。算法步骤：创建一个堆H[0..n-1]把堆首（最大值）和堆尾互换3. 把堆的尺寸缩小1，并调用shift_down(0),目的是把新的数组顶端数据调整到相应位置4. 重复步骤2，直到堆的尺寸为1算法步骤：1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置4. 重复步骤3直到某一指针达到序列尾5. 将另一序列剩下的所有元素直接复制到合并序列尾这种搜索算法每一次比较都使搜索范围缩小一半。折半搜索每次把搜索区域减少一半，时间复杂度为Ο(logn) 。算法步骤：1. 将n个元素每5个一组，分成n/5(上界)组。2. 取出每一组的中位数，任意排序方法，比如插入排序。3. 递归的调用selection算法查找上一步中所有中位数的中位数，设为x，偶数个中位数的情况下设定为选取中间小的一个。4. 用x来分割数组，设小于等于x的个数为k，大于x的个数即为n-k。5. 若i==k，返回x；若i<k，在小于x的元素中递归查找第i小的元素；若i>k，在大于x的元素中递归查找第i-k小的元素。终止条件：n=1时，返回的即是i小元素。深度优先遍历图算法步骤：1. 访问顶点v；2. 依次从v的未被访问的邻接点出发，对图进行深度优先遍历；直至图中和v有路径相通的顶点都被访问；3. 若此时图中尚有顶点未被访问，则从一个未被访问的顶点出发，重新进行深度优先遍历，直到图中所有顶点均被访问过为止。上述描述可能比较抽象，举个实例：DFS 在访问图中某一起始顶点 v 后，由 v 出发，访问它的任一邻接顶点 w1；再从 w1 出发，访问与 w1邻 接但还没有访问过的顶点 w2；然后再从 w2 出发，进行类似的访问，… 如此进行下去，直至到达所有的邻接顶点都被访问过的顶点 u 为止。接着，退回一步，退到前一次刚访问过的顶点，看是否还有其它没有被访问的邻接顶点。如果有，则访问此顶点，之后再从此顶点出发，进行与前述类似的访问；如果没有，就再退回一步进行搜索。重复上述过程，直到连通图中所有顶点都被访问过为止。算法步骤：1. 首先将根节点放入队列中。2. 从队列中取出第一个节点，并检验它是否为目标。如果找到目标，则结束搜寻并回传结果。否则将它所有尚未检验过的直接子节点加入队列中。3. 若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。4. 重复步骤2。算法步骤：1. 初始时令 S={V0},T={其余顶点}，T中顶点对应的距离值若存在<v0,vi>，d(V0,Vi)为<v0,vi>弧上的权值若不存在<v0,vi>，d(V0,Vi)为∞2. 从T中选取一个其距离值为最小的顶点W且不在S中，加入S3. 对其余T中顶点的距离值进行修改：若加进W作中间顶点，从V0到Vi的距离值缩短，则修改此距离值重复上述步骤2、3，直到S中包含所有顶点，即W=Vi为止关于动态规划最经典的问题当属算法步骤：1. 最优子结构性质。如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质（即满足最优化原理）。最优子结构性质为动态规划算法解决问题提供了重要线索。2. 子问题重叠性质。子问题重叠性质是指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。 动态规划算法正是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是 在表格中简单地查看一下结果，从而获得较高的效率。朴素贝叶斯分类器依靠精确的自然概率模型，在有监督学习的样本集中能获取得非常好的分类效果。在许多实际应用中，朴素贝叶斯模型参数估计使用_________________________________________________________________________________________公号：聊聊Python，感兴趣的可以来找我玩，一起来聊聊Python这点事~作者：lxlmycsdnfree链接：希望能对你有用","我来缅怀一下当年OI和ACM的日子……题目都在 一.基本算法:
二.三.数据结构.四.简单搜索五.动态规划六.数学七.计算几何学.
一.基本算法:
二.图算法:三.数据结构.四.搜索五.动态规划六.数学七.计算几何学.
一.基本算法要求: 
二.图算法:三.数据结构. 四.搜索 五.动态规划 六.数学 七.计算几何学. 八.综合题.
      (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263)=====================================================================如果你不是要死磕acm搞出成绩来的话，多放点心思在数据结构上对以后的帮助会比较大，比如字符串相关的btw这些算法和数据结构如果能精通的话，对你以后做数据挖掘和机器学习是有极大帮助的。广告时间：如果你对以上学习路径有什么困惑，或者你对以下问题感兴趣：
那么欢迎来到我的知乎 Live：",上述都是程序员面试的高频考点，想要彻底掌握的话，推荐的学习顺序：Leetbook的好处是把算法归类为各个章节，而且大部分章节都是免费的。如上图，在入门的时候就不要刷那种高频面试题了，先把数据结构和算法的各个基础打好。每个 book 里都是先教学、再由易到难地实战，一个知识点大概有十几道题，刷完基本上就能掌握一些套路，到medium的水平了。然后才是去看各种下面是我总结的一些必刷算法（字母是难度），部分解法在文末的脑图中，可以直接下载。---当然，一位CMU硕士整理的101道经典题型，按体系归好类了，初学者可以先跟着走一遍（文末下载）：还有LeetCode Cookbook对1479道题都给了思路和解法、复杂度分析（文末下载）： , 作为全球极客挚爱的技术成长平台，致力于为同学们面试、求职提供帮助。 向下阅读的同学一定要注意，下方 在这里，力扣君也为大家整理了一些程序员在 现在 ChatGPT 风靡全球，AI 的概念离不开算法，学习算法更为重要在 如果不谈面试的需求，对于程序员来说上面提到的那些算法依然非常重要，可以说上述内容都是有人可能会觉得，这些基础的算法在工作中完全用不到，安安静静地做一个 其实不然，虽然同是程序员，程序员之间也是可以分出个三六九等的。那熟练掌握这些算法，到底可以为身为程序员的我们带来什么呢？比如，现在让你实现这样一个功能：给你一些有序的数字，动态地查找目标数字。实现这一功能的方法有很多种，当面临不同情况的时候，我们需要使用不同的方法。如果你熟知各种基础算法，那么你就可以很容易地针对不同的场景找到合适的解决方案，并且将它们变成代码，以提升程序的效率。而不是遇事不决，先上暴力，虽然解决了问题，但是在时间与空间上还有很多不足。通过学习这些算法，可以提升我们在计算机方面的能力：抽象建模能力、逻辑思维能力等，并且积累一些解决问题的基本思路：折半、倍增、贪心、分治等。现实中的问题都大相径庭，但是我们通过将其抽象并建模之后，会发现问题的本质是相似的，我们往往可能从某一个基础算法中获得启发，从而高效地解决问题。而达到这一境界，就要求我们首先对基础算法能非常了解，并达到熟练运用，融会贯通的地步。所以，即使过了公司面试这一关，算法对于程序员来说依然是非常重要的。熟练掌握算法，将是你职场晋升路上的一把利刃。还是那句话，奔着求职、面试、晋升的小伙伴，刷 对于算法的学习的平台，只要关注以下三个维度来进行选择：力扣的 拥有上千道原创算法题的 在力扣 参加每周一次的 Github 除了其中将许多著名的算法都做了可编辑的动画，对于后期理解图论等相关算法有很大帮助。亮点是这个项目是中文的，算法由浅入深，相对适合从零开始学算法的。想挑战自我？可以试下 TopCoder 参加过 TopCoder 比赛的童鞋可能会对它印象深刻，它有它独特的魅力。TopCoder 没有测试用例，在比赛中，完成代码后可以去直接阅读别人的算法，并构造错误用例来为对方扣分。可以说 TopCoder 很适合学有所成的人去寻找下刺激，不过建议有一定的刷题基础再进行尝试。Coursera 上有各所大学的算法课程。有很多都是世界顶尖的算法课，有兴趣学习的程序员也可以不妨前去一试。关注力扣官方微信公众号：「,,,,,,,,,,,,,
为什么美国程序员工作比中国程序员工作轻松、加班少？,工作效率区别大吗？感觉美国程序员工作时间灵活、加班少，相比与国内程序员工作，似乎压力小很多。但是美国程序员的产出却非常牛逼（如google、fb等）。难道是因为他们效率更高吗？如果是，国内程序员是否能提高效率减少加班和压力呢？,不是因为外国公司效率高，也不是因为他们开会多。同类的app，不论是电商还是视频，国内的app远比国外的复杂，变化更快，功能更多。三天一小改，五天一大改，过个节都要出一套ui，新功能层出不穷，做活动此起彼伏。国内程序员的工作量，就是比国外的同行多，同样多的功能，国外程序员做，照样加班。关键是，这些功能，真的有用吗？知乎可以提问，可以回答，因为它是个问答社区。但它还能直播，能视频，能充值，能交易，能借书，能开课，还能众裁。正中间的按钮，有时是想法，有时是会员，是创作，是发现，但没人在乎，大家只是看看首页的时间线罢了。这么多的功能，对用户来说，体验不一定有几年前的版本好。大量的加班时间，花在了一些可有可无的需求上。微观上看，是kpi焦虑，宏观上看，是违法成本低。有多低呢？大概像水电费那么低。多开几小时的灯，就能出个新功能，成本近乎于零，没人用也不亏，何乐而不为？没有法律层面的支持，劳动者就像在随着时间的推移，加班成为新常态，向各行各业蔓延。生活越来越单调，越来越重复，人从生产者，转化为生产资料。,你自己随便拿出一个app看看吧淘宝，支付宝：要喂小鸡？要建农场？拼多多：要各种小游戏，要砍一刀，要各种抽奖抽红包（100%最大奖但就不行，你就得花几秒钟去看一个抽奖动画）微信：直播，视频，小程序美团：也是各种小游戏，稍不留神就点进去了中国的KPI啊，明明是个购物app，明明是个支付app，明明是个外卖app，明明是个即时通讯app为什么要增加那么多各种各样花里胡哨的小游戏？亚马逊有小游戏吗？说白了，不就是骗老板骗投资人的钱吗？无法增加用户时长，咱们就小游戏走起，甚至送钱让你玩各种app内置的垃圾游戏，说白了，就是花公司的钱，花用户的时长，增加自己的绩效。往上，骗得是投资人和老板，一看数据，全都增长往下，坑的是用户，版本三天一小更，五天一大更，让你每天多花十来分钟挣那几分一毛钱往内，写代码的不堪其扰，一会这需求，一会那需求，天天996，把自己的app跟摊大饼似的，约摊约大。,嗯，被经理举报了：现在我切换到表扬模式。是的，他们效率更高。但是，国内程序员不可能通过提高效率减少加班和压力。因为这事的决定权不在你而在公司。之前“开发和产品经理因为识别手机外壳颜色而打架”的传闻之所以能引起广泛共鸣，就是因为这类事实在太普遍了，太多人感同身受。因为中高层怎么样？满意了吧？满意了我们继续。所以，当你花大力气设计了一个精简高效的架构，把一个很难的问题干净漂亮解决掉时，绝不会有人击节赞叹——恰恰相反，他们觉得你捣鼓了个把月才产出几百行代码，反而会犯嘀咕：这人是磨洋工呢，还是不会？你面向搜索引擎编程，乱七八糟拷一大堆东西到代码里，用到用不到都留着，KPI表现反而会特别亮眼。一天几千行代码当然亮眼。一群外行，怎么会知道这几千行里面就两行有效呢。类似的，你兢兢业业，一个bug都不让出，人家就把你忘了；反之，你大大咧咧，一个功能你能写出800个bug——经理看起来就很忙很努力，因为他得不停的和你交流；你也很忙很努力，不停跑经理那里讨论问题：全公司你最忙你经理最敬业，不奖励你俩还有天理吗？！你看，你好我好大家好，身为聪明人，你为什么不多写点bug呢。当然了，这是极端情况。大多数公司还是没这么极端的——他们的中高层还不是那种即便如此，他们中的绝大多数——包括多数程序员——仍然不懂软件工程。他们并不知道，或者说并没有想过，今天你写的每一行代码，都会是明天的新代码的地基。即使你知道，也没办法让中高层明白。如果你今天写的太过随意，明天就很难在这个基础上扩展它；如果你着急完成任务，今天不先把昨天的设计缺陷修改掉，而是想一个办法绕开……那么明天你就不得不绕着圈子躲开更多问题。越往后，就越难改；越难改，就越容易出bug。但是，如果你想改昨天的代码，你就得先解决前天的问题；想解决前天的问题，大前天乃至大半年前的设计缺陷你就得逐一解决掉。然后，这大半年里，你就完不成任何新提的需求。反正至多做三两年我就要换工作了。随他去吧，完成眼前的工作要紧。因此，为了急功近利的眼前效率，中国程序员的长远效率自然变得极低——越往后越低。我曾经接过一个任务。因为高层设计的严重问题，我们不得不在项目经理不懂。他觉得一条SQL语句也就是0.0x秒的事，我们的流程耽误1秒问题应该不大，所以就答应了。我说每个用户都可能卡这么0.0x秒，人多了咱这模块吞吐量就没法看了。这个咱不能接。真要接也行，得改成多线程架构，得多安排时间。经理说没事，直接加就行。做出事了他们负责就是（言外之意，一旦接了这个，将来我们自己的锅也有办法拉他们一起来背）。既然都这么说了，我就动手做。做完，内部测试没有任何问题；但一上线，整个系统死了。原因是，那个库负荷特别大，一条数据库更新语句能卡几秒甚至几十秒。将来人多了还会更卡。经理说，算了，你改多线程吧。我思考了三天，决定不动我们这边的架构；而是设计个thread_call接口。任何传给thread_call的函数都会在另外的线程里执行——为了避免读写到调用函数的局部变量、然后在线程执行时调用函数已退出，thread_call内部会自动申请内存，把转交给工作函数的字符串等通过指针引用的参数统统复制过去；当线程执行结束，函数返回值也会保存在某地等待查询（超时或查询后自动删除），同时释放用到的资源。为了实现这个，需要一个全局单例类负责管理线程、及时清理用到的资源；同时最好有一个线程池和一个内存池，免得频繁申请/释放。不然长时间运行下去，把内存弄的千疮百孔，程序就更容易出问题了。内存池我已经写过一个泛型版本，直接拿来用就行。剩下的线程池、资源自动申请/释放（基于RAII和泛型，不支持原始指针因为无法确认空间大小、也无法确保复制成功，玩过泛型的都懂），加起来一百来行代码解决。最终代码量300多点，其中一大半是注释。这个东西轻松的一次编译通过；然后挺过了各种测试，没发现任何问题。这东西差不多相当于给C做了个简易协程框架（当时协程概念还没流行起来，不然我就把你看，如果程序都照这样写，是不是就会越写越快？因为你昨天写的东西，今天可以拿来就用。写的越多，积累越多，实现新功能时需要重新实现的东西就越少，效率自然越高。但是这个东西让项目经理作了难。这是因为，如果算KPI的话，等于我花一周写了300行代码；然后又测了一周……两周300行代码的产出，这实在太少了。反观别人，一个用户注册，人家一个字段一个字段一个字节一个字节的用代码检查、复制，轻轻松松搞出来500行。很水的几个功能轻松灌水上万行代码，然后部门KPI也有了，个人重要性也体现了——而且修不完的bug：你看，离了我们这个部门，公司真不能过啊！可我傻乎乎的300行代码搞出这么复杂个东西，竟然还测不出bug……项目经理是知道这里面功能多，但上面觉得你忽悠他。300行代码你还能吹出花来不成？而且，既然没有bug，以后人家还需要你这个部门吗？问题都解决了，我们这些人……还有继续雇佣的必要吗？总之，他希望以后再写程序，尽量写长一些……而且，为什么要复用呢？其实每一个类似的需求，都是可以给他整个几万行代码出来的嘛。没错。人家的预期是：这是个挺复杂挺难的任务，你应该加班加点忙上几个星期，提交几千上万行代码，到时部门KPI有了个人业绩也好看——将来每个类似任务都应照此办理。而我呢，轻轻松松300行代码，杜绝了类似任务的出现——什么都不用管，加一行thread_call，全都妥妥贴贴了。一个任务对应一行，这KPI还能看吗？你看，面向目标的不同，面向KPI编码就必然使得实现臃肿、问题频发、每天996过劳死……但做起来其实轻松愉快，因为你完全可以磨上仨月洋工，然后吹嘘“多线程有多难”；然后还能让高层不断找你、解决诸如野指针、数据脏读脏写、死锁、内存碎片导致长时间运行后大块内存分配失败等等等等疑难问题——既让你显得重要，又能轻轻松松“骗”来大量的KPI，最后还不需要去学鬼画符一样、难的不要不要的泛型技术……而面向问题编码呢，借助泛型，自动识别、复制函数参数（它们可能来自调用者的栈，随时可能失效），再加上用池来加速资源回收/分配效率、提前杜绝内存碎片问题——这完全是个简单轻松解决的小模块。而且只需解决一次，我们自己的“类协程库”都出来了，以后写程序会越来越快、越来越好：你甭管我怎么做完的、耗了多少时间，功能点我给你实现了、上线后但是，后者在这个公司行不通。代码量少没KPI你气不气？bug写的少没人找你显得你不重要，倒霉不倒霉？将来项目失败抓人背锅时，别人说我天天加班996007态度端正；而你呢，955一分钟班不加，这态度是不是很能说明问题？从上到下都不懂你能怎么的？别说这家公司的管理者了，他们的技术人员自己都不懂。我两个关系比较好的同事，还真以为我们是公司里干活最少、最不重要的几个呢。因为别人忙忙碌碌总有干不完的活、修不完的bug，高层中层领导天天围着转，求爷爷告奶奶但任务就是做不完，重要的不得了。而我们几个公司公认的技术专家呢，每天到时间就走；座位上冷冷清清，从无领导过问；经常上班时间闲极无聊于是借“学新技术”的名义逛论坛……时间久了，他们自己都心虚：为啥别人总是有干不完的活、见不完的领导？为什么我们经常整周整周的没有任务、闲坐着发呆？人家是不是比我们干的多、任务难啊？不对啊，每次分配任务，分给我们的，都是别人接不了、不敢接的啊？直到有一天，午饭后散步聊天打屁谈到这事，我才觉得不对，提议回去看看工作日志/提交记录之类东西。那天我们大概照例聊到了下午三点吧——没错，因为事少，因为要都要不来工作，一个月至多也就忙一周，955都大块大块的空闲时间。别说加班了，平常上班我们都经常偷空出去散步。悠哉游哉回到公司之后，我们就去翻看所有同事的提交记录和bug报告数据。这才惊讶的发现，我们比其他同事完成的功能点数量高出5~10倍、难度也普遍更高，bug率却近乎为0——别人一个功能点能有密密麻麻几十个bug，而且上线几年bug都抓不完；而在我们看来，这些都是压根就不应该发生的低级错误，而且我们提交的代码的确不包含这类错误。所以，别人一年只做三四个功能点，每个功能点都要出十几、几十个bug；而我们呢，一年起码几十个功能点，加起来不过3~5个bug（我更是一年只有1个bug，而且bug原因还是需求没写清：某个字段让返回字符串，我按照C惯例后面加了个‘\0’；对方用的java，不能识别这个\0）。问题是，“我们接的任务最多最难”，这事我们项目经理知道，中高层领导不知道。中高层领导知道什么呢？他们只知道，这个任务总是在别人那里卡住；他们只知道，系统出了问题，该找的人肯定不是我们几个（从不出bug自然不需要找）——所以你猜，在他们心里，谁更重要？于是我决定辞职。这是我第一次进这种公司，也是最后一次。因为这种公司完全是“逆淘汰”。水平越差越吊儿郎当越吃香，水平越高越兢兢业业越被边缘化。,先说结论：跟国外公司比，国内公司最大的问题就是管理者素质不高，对问题的边界定义不清楚。提需求的人没有成本，无止境地提不靠谱的需求。码农自己开发时也追求快糙猛，提高了系统的风险。总的来说，经理很忙，产品很忙，码农很忙，测试很忙，运维也受不了。。就是这样的结局。我在血汗工厂，大亚麻。整个大部门有80号码工。想知道大家工作有多轻松。。。我先上图为敬。这位是最忙的。。这Commit记录你们看着办。。。 我们部门是前两年重组出来的，做了七八个全新的项目，按血汗工厂的风格，SDE是要full stack的，还要讲政治，写个类都要摆出个设计文档。跟自己组，隔壁组过完设计，大家blibli一通留言，然后针对几个service的API划分和命名再掰扯个一周。最后谁都说服不了谁，摆出一句”求赐名“这时高级经理或者SDE会猥琐地从希腊神话里找一个神的名字出来命名service，再随机指定几个比较顺眼的命名，会议就结束了。除了内部Tech的会议，偶尔也会参与业务方的会议。在这里也是要讲政治的，你参会了就必须要多说，无论说什么，一定要存在感巨强。当小透明是行不通的，为什么，小透明就说明你这个人没想法，能力不行啊。某种意义上，声音大就是impact，就是能力！！有没有！！接着说对SDE full stack的要求。你以为我们有前端，有测试，有运维？想多了，新开的service，如果涉及前端页面。是要自己写的。。。。没错，别管你是前端工程师还是后端工程师还是算法工程师，首先你得是个工程师，工程师就没有解决不了的问题。。。我们做前端时也要开很多会啊，跟业务方沟通进展和Demo时，业务方可以提意见，一旦提了意见是要sign off的。不是随意说说那么简单。这样有个好处，很多东西定下来了就不随意改变。提需求的人是面临很大的成本，你老提了需求又改，又sign off，不出两月大家就觉得你这人不靠谱，会给你很差的反馈。谈完了前端，该到开发阶段了吧，开发时50%的时间在也业务代码，50%的时间在写测试代码。如果没有测试代码，code review是说啥也过不去的。写完代码之后，内部有很完整的自动部署工具，把你的单元测试，集成测试都跑完，然后部署测试环境，这么一说确实挺忙的，实际上50%的时间都在会议，20%时间写代码，20%时间写测试代码，10%时间捣鼓一下配置，监控。但从来没有人加班，整天在家办公，这公司怎么还没黄。。怎么还没凉。我来总结一下，会议是生产力。讨论得越清楚，返工就越少。比如系统设计，几个组的人一起讨论清楚系统的边界，上下游系统的关系，你的问题边界和需求是很清晰的。码工自己啰啰嗦嗦地对全流程服务。测试，运维等看似工作量繁重，实际上有效地降低了风险，极大地提高了软件的质量。跟国外公司比，国内公司最大的问题就是管理者素质不高，对问题的边界定义不清楚。提需求的人没有成本，无止境地提不靠谱的需求。码农自己开发时也追求快糙猛，提高了系统的风险。总的来说，经理很忙，产品很忙，码农很忙，测试很忙，运维也受不了。。就是这样的结局。我说得这么清楚，应该大家都了解了吧。求赞。。比心。。最后,其实科学的规划和合理的安排可以令每个人的工作量减少的同时令结果质量更高。然而有些人就是不信，怎么办呢(摊手国内很多公司的领导自己都没有想清楚就交代任务。自己多做1%，就可以让好几个手下减轻一半的工作量，稍微动脑子优化一下流程更是不得了。其实这就是领导能力差的表现，他们还不自知。真正的领导能力不是令人服从，而是让大家用正确高效的方法完成任务。,先问是不是，再问为什么。难道美国的程序员就不加班吗？他们就一天八小时工作，还想来就来，想走就走？非工作时间完全找不到人？还有什么食物饮料都免费提供？让我来告诉你真实的情况吧，还...真是这样的。加班文化应该是中美两地最明显的不同了，形成这种差异的原因不是一两句可以讲清楚的。我在两个国家都工作过，也在不同岗位工作过，所以就尽量从不同角度来简要说一下。国内程序员加班严重，首先问题不在程序员这个群体。产品层面，拍脑袋决策多，美其名曰：互联网思维、小步快跑、试错思维，其实是没想清楚，反正我就需求一提，技术团队来做，上线后成功了我是产品天才，失败了也没啥坏处，找个借口说什么“互联网市场变化太快”也能搪塞过去，或者找个新项目，继续画大饼。国内的产品经理实在是太多了，很多还是刚毕业的小鲜肉，没有一点经验积累，凭借天马行空的想象力，提一个需求，就能让一帮技术专家为之操劳好几个月去实现，这简直是不可思议的。即使产品经理很厉害，但人数一多，每个人都要业绩，都拼命想点子、提需求，技术团队怎么能招架得住那么多需求呢。于是就会这些现象：产品经理没有想清楚某个功能的价值，或者带来的收益不痛不痒，而技术团队则需要为此付出巨大的心血，也就是加班。当然这也不一定是产品经理的错，国内公司，老板的指令太多了，不说了，你懂的。在美国这边，产品经理大多是行业经验非常丰富的人，要么是从工程师转过来，要么是从多年的商业领域经历然后读个 MBA转过来。上线一个功能，经过严谨的理论推演、多轮前期调研、科学的 AB test，从提出 idea 到最终用户看到更新，经常耗时半年或一年。很多不成功的 idea 还没面市，就因为数据不好而“胎死腹中”。这样一方面提高了产品需求的质量，另一方面也给技术团队足够多的时间来设计和实现一个可持续发展的架构。管理层在做决策时，往往更重视产品更新迭代，而忽视技术的建设。比如说技术团队有100个小时，老板可能会把90小时都投入到实现产品功能，给技术优化、修补技术债务。于是就会出现技术实现非常粗糙的情况，举个栗子，给你一周时间，实现一个 IM 功能，你还会考虑什么模块化、可维护性、性能优化之类的吗？当然是怎么快怎么来，百度一下有没有别人实现过的代码，ctrl+v / ctrl+c，一点运行，诶，跑通了，上线。所以国内很多程序员看别人的代码，感觉都是一团 shit，完全没法维护，干脆自己重写一个。技术老大能跑到老板面前说“我们先把产品需求停一停，让我们的技术团队好好地优化一下基础设施吧。”吗？只要他不是傻子，都不会这样说。话语权低还体现在，对产品几乎没有决策权，甚至不能质疑产品决策，提反对意见，总会被产品经理各种理由挡回来，产品经理有一句话终结争论的尚方宝剑：这是老板要做的。久而久之，技术债务越堆越高，bug 越来越多，程序员不加班，谁加班？而美国公司的现象是，技术话语权非常高，一个没想清楚的产品需求，能被技术团队直接打回去。同时，技术团队可以自主地花很多时间在技术优化上面。产品不能按时上线？经理说：没关系，延后，按照最优的技术方案来推进。有时候你想赶紧上线，提交一段粗制滥造的代码，会被同事鄙视死，被老板骂死。每个季度最后一个月，专门抽出精力，来弥补技术债务，产品需求放一边先。在这样的环境下，短期看起来效率低，但长期是最高效的。国内是“欲速则不达”，美国是“慢工出细活”。知乎上有一个比较热门的讨论：腾讯的技术建设是否落后？这不但是腾讯的问题，实际上绝大部分公司的技术基础设施都非常差。有多少个公司能养一个专门的 Infra 团队？有多少个技术团队能专门成立一个小团队，进行 Infra 优化？即使有，有多少个公司能保证 Infra 团队的成果能在全公司推行？我相信能做到这样的公司是凤毛麟角的。中小公司不必说，在这样高度竞争环境下，哪有财力养一个不能直接带来 KPI 提升的团队，即使有钱，也没时间搞优化。而大公司呢，即使腾讯这样的体量，有一个 TEG 事业群做基础设施建设。但是现实情况是，依然没有全公司通用的内部工具，各个团队依然在重复造轮子。阿里算是做的很好的，前几年开始推行的大中台战略取得了显著的成果，解放了各个产品部门的生产力。计算机程序这种东西，一个人写和一群人写，几千个用户使用和几千万用户使用，是完全不同的概念。没有强大的基础设施建设，技术团队越壮大，效率越低，用户数越多，bug 越多。出来混总是要还的，今天没有人关注基础设施，未来就会又无数个程序员为此加班。而说回美国这边，专门的 Infra 团队几乎是每个公司的标配了。这也是工程师文化的结果，创始人、高管团队一定有很强的技术背景，走过了很多弯路，所以非常重视基础设施建设这种“重要而不紧急”的事情。最后再来说说文化的差异。美国人非常注重个人和家庭，牺牲自己的时间来给公司加班，这是不可能的。一到下班时间准点走，非上班时间完全不查邮件。很多公司入职培训就专门强调了怎么平衡工作和生活，其实就是说：下班时间就是你的时间，你有权利不处理公司事务。反观国内，不知道从什么时候起，加班就是约定俗成的。还出现了看似很有道理的人生经验，比如“年轻人就应该多拼一下”，“加班能学到更多东西，对未来也有好处”。加班，竟然成了光荣的、可以拿来攀比的现象，比如说加班到凌晨一两点，拍个照，发个朋友圈，收到老板的点赞很开心。而管理者呢，还就吃这一套，谁加班多、会来事儿，考核的时候就更有好处。在这种加班氛围下，甚至还出现了“伪加班”。早上十点到公司，上个厕所、看会儿新闻、刷刷朋友圈，就到十一点半了，什么工作也没做，然后准备吃午饭；饭后逛一逛、睡个觉，又到2点上班时间了，写会儿代码、刷刷知乎，一下午又过去了，很多公司有免费晚餐，吃完饭回来7点左右，再写写代码，磨到10点。哦耶，又是充实的一天呢，发个朋友圈给老板知道。其实一天有效工作时间还不够8小时，但就是“加班”了。综上，大概就是国内加班严重的原因。我觉得这也是某个时代特有的现象，谁都没有错，谁也没有办法改变这种情况。在国内这样一个高度竞争的环境下，公司为了生存必须跑快点，个人为了发展必须多做事，毕竟你不做就会有千千万万的人来抢。等到中国真的发展到美国这样的发达程度，生存的压力减小了，才有可能谈更好的生活品质。关于找工作，我拿到过 Google/Facebook 等大大小小公司的众多offer，如果你想知道怎么在北美求职，,我在参加工作前看过《换句话说，加班肯定会让程序员工作效率降低。当然，话不能说死，有一种加班实际上有利于效率的，那就是程序员主动加班（我说的是真的主动，而不是签了“奋进者”之类协议之后的“主动”），如果程序员真心热爱自己的工作，停不下来，加班把事情昨晚，当然更好。但是，这同样不长久，之后程序员依然需要休息才能恢复过来。其实，当过程序员的都明白这个道理，我再说个大实话吧：管理者如果懂得现代管理，知道让员工发挥主观能动性、让员工热爱这个公司、让员工身心健康对公司对员工都是好事，那就不会强制加班，但是，我国目前大部分管理者无此觉悟。我国大部分管理者和资本方的意识（或者潜意识）是：我给你工作机会，我培训你工作技能，我给你工作经验，过几年之后谁说的准你还跟不跟我干，赶紧压榨你才是正经的，能多压榨一点是一点，什么科学管理，狗屁，没那时间也没那必要去搞。从程序员角度出发，这个行业风气如此，你对一个公司不满意可以辞职不干，但是你换一个工作可能还是这样的风气，所以你逃不出这个行业的魔掌。。,来传递点负能量，做了4年多游戏了在国内做游戏都是外行指挥内行，做的越快越多改的越多还不如直接拖到deadline之前做完，大家都没时间改，你好我好大家好在国内，你做的快是工作不饱和，下次分配任务你会被增加工作量，而且你做的快还不能早下班，早下班就是没有集体意识这种环境下怎么出效率出产品？还有看楼下说开会的，国内开会现在也开，开会定了之后leader说改就改，你还不能有意见，因为人家说是对数据负责，改了之后的工期还要算在你头上，你上哪说理去？,时隔两年多，更新一下。两年前相比，国内近年来对然而，和上一次说的情况相比，新的奇葩问题又冒了出来。某司两年多之前声称要改革，然后...然后制定了一堆据说是反复研究了google之后定义出来的“研发效能标准”，比如啥此外还加了一堆线上运维指标...其实说白了就是自动化覆盖+运维响应，这也没什么稀奇。然而这帮中层干部就开始作妖了，说一定要统一，单测框架要统一，研发流程要统一，工具全部要统一。这个统一不是业务开发说了算，是并不负责业务产品的研发部说了算。而这研发部呢，其实是以前多测试部门...其理由是：业务团队的开发不懂怎么设计通用型服务（貌似qa很懂），所以不管是xx还是yy（不说产品名字，反正都是大家从小用到大的东西）历经十多年内部的工具体系统统不算数，统统都是“没考虑通用性”，只有某顾问定义的“效能体系”下给出的工具才能是“标准统一”。然后就疯狂要hc要人呗，做一堆奇葩的工具，这部门自己都无法全部串联起来，然后再申请hc，说要去“培训开发团队写单测”，不然的话开发者不知道不会写单测...具体就不写了，不然太多细节。总之好处是研发体验开始收到重视，是个好事，但由于中高层的一窍不通，底层一线缺乏实际经验，cr也好ci也好能起到什么作用都不清晰，只能说勉强在摸着石头过河。然而不会有人出来回答：能否大规模统一使用jenkins用jenkins？这tm怎么好去申报项目？怎么好意思在大众面前吹逼。一定要自研，一定要“统一，面向未来”...******分割线******举个例子，中国某家一线互联网公司，没有统一的ci体系，问一下有没有内部公用的jenkins系统，说都是各个项目组自己搭建维护（修正一下，今天了解到其实有一套，应该是在jenkins上搭建，设计思路很有些特色，虽然初次使用一如既往被网络隔离卡了一下，但是我觉得还是个不错的系统。然而，也失去了使用然后不知道从哪里规定“代码必须只能在公司内部机器”，所以你要学美帝去work from home是不可能的，要接触代码必须在公司工位上。所以呢，单元测试没有的，自动跑测试是没有的，code review更是做梦。所以只能瞎check in，然后不敢回家只能等，出了问题赶快加班，测试全靠手，然后最爱扯性能和安全。最可怕的是因为大多数中高层老板在他们的职业生涯中是在国内早期互联网浪潮中野蛮成长的，对现代开发流程和工具可以说没什么体会和了解，现在面临新浪潮的冲击，首先是要让他们自己能理解现代模式，这就更难，别人说老子不玩你那套一样在赚钱，你忽悠谁呢？累吗？但是另一方面，国内程序员自己也有相当大责任。小组之间互相不透明，生怕别人看到自己代码，不愿开放共享，造成难以独立debug（所以国内把“联调”看得很重）；对微服务不理解，很多喜欢把自己的东西作为“组件”（也就是库或者独立程序）提供，非要别的组用各种奇葩方式来调用，说自己已经提供了sdk，已经达到要求。。。然后就是各种艰难的调试。。。还有个现象是一方面老板重业务，程序员又喜欢用性能做借口，我看起来很快就能实现的改动，下面的非要说影响性能所以要做几周。。。没有那种get things done的思维，一天纠结些细枝末节的东西。产品还压根没几个人用就在纠结性能～～～我tm看着他们做得都累，何苦。,话说回来，谁会真的996满负荷拼命呢，还不是上有政策，下有对策，得过且过。最关键的一点是，不能做一块总是能挤出水的海绵，否则就等着被挤干吧。这不，世界杯话题聊了两个小时，晚上继续加班。今天带薪拉屎 了40分钟，出去抽了三次烟，每次15分钟，聊聊各种话题（不包括上面说的世界杯话题）50分钟，午睡晚起了10分钟，早上打卡后早饭吃了15分钟，刷刷手机网页各类信息1个多小时，等着编译器转菊花......我是996，我骄傲 ✌️。最后补充一句，一个人加班是自己能力的问题，整个公司（大多数人）加班就是公司的问题。,恰恰相反。国内程序员，单打独斗的能力绝对一流，不敢说远超越国外，但至少不逊色。但问题是，为什么这些一流的程序员和在一起，同样的产出，却要比别人工作更长时间，付出更多辛劳呢？我们不禁要问，我们多付出的时间和辛劳都去了哪里呢？想到这，我要分享一个故事，就是最近，疫情期间，我朋友公司的故事。朋友做Java后端开发，受疫情影响，公司业务大跌。要说，这种情况下，大家应该无事可做才对，但和朋友聊天，情况恰恰相反，朋友的原话是：“忙疯了！原来加班到10点，现在则是12点，活根本干不完！”听罢，我回了句“呵呵”，然后冷冷的说：“瞎忙，行为艺术而已！”沉默了一会，朋友回复说：“太对了，就是瞎忙！”“因为没有业务，怕被裁员，大家就越拼命加班，好显得自己很忙，很重要的样子。”“其实，公司都没业务了，做的东西不过是闭门造车，根本就是伪需求！”“但这不重要，要的是态度，是表现！”朋友的这段话，真真道出了程序员整日忙碌、整日辛苦的天机。而这个天机恰好在疫情期间被戏剧性的放大了，但本质和原来并没有区别。。因此，朋友，如果你是一名程序员，你可曾质疑过自己，我们每日开发的东西，有那些是用户真正的需求？又有那些不过是些“表演艺术”？也许，经过思考后，你会发现，我们的忙碌根本经不起审视，它一直很“荒谬”！荒谬的领导，荒谬的需求，荒谬的任务，荒谬的KPI，荒谬的…最后，导致的是荒谬的忙碌！,严格执行劳动法严格执行加班薪酬补偿制度聚餐时看到这个问题，恰巧旁边坐了一位在皇家银行做码农的同学，问了一下他加班和工作强度的情况他的回答是加班不少，但项目管理人员事先要和员工打招呼，并且发比正常时薪高两到三倍的加班费，如果是在周日超时加班，加班费可能高达正常时薪4到5倍。看在待遇的份上，他本人是很愿意加班的，毕竟下班回家闲着也是闲着，加班有这么多钱拿何乐而不为。但，即使他想加班，所在岗位也不允许他随意加班，原因就在于高昂的加班费。每次领超额的加班费，他首先要和项目管理人员签一份合同，他本人同意加班，经理同意发加班费，然后经理要拿着这个合同再去人事部门得到批准，人事和经理两边都过关后这份文件再转到财务部门，这时财务部门才给他发加班费用。如果一个项目组总是要加班，总是要支付大额的加班费，财务部门就会面临超支的问题，质问项目组负责人在经费和人员安排上是不是不合理。如果项目方表示活太多人手太少，财务部门就要征询人事部门为什么事先不招够有水平的人；反之，如果项目总是出现延误而不得不临时加班，人事和财务要质询项目管理人员的管理能力。当然，这里面有一个时间差可以利用。项目部门可以和工作人员签合同让他们加班，然后再以人事部门和财务部门不同意为利用不发加班费。我同学表示这种事情也发生过，不过非常少，经常这么干员工们会投诉，管理层会被纪律和HS（Health and Safety）部门撸掉的。如果公司什么都不干，劳动法伺候之不过不过不过企业的应对办法有1，找临时工，即劳务派遣工，contractor，虽然都坐在同一个办公室内，但这些员工不享受任何福利，没有退休金，没有劳务补偿，想让他们加班多久就干多久。作为平衡，这些人的时薪比正常员工通常高两倍。2，不按时薪和月薪来，按照项目进度和完成度发薪水。开放远程和在线办公，八个小时工作时间排进十二个小时才能完成的任务量，如果你还是能在八小时内完成，算你是大神你牛×；如果不行，自己回家在3，量大而简单重复性的工作交给实习生。实习生不算正式员工，任劳任怨，一般只要给比法定最低薪水高一点点的工资就分满足了。4，签 zero hour contract，上面第2点的加强版，在合同里点明了这份工作要经常超时加班，下班后还要on call，你愿意签就来干活，不愿意就滚，一个愿打一个愿挨。在就业压力下，以上4点很容易执行，大批老印老中排队干contractor同时还自愿把薪水降低到普通员工还低的水平。,美国的环卫工人每月的薪水也比中国环卫工人薪水高呢，找谁说理去？难道美国的黑叔叔效率更高？,这个题目能出书了。两边的IT的企业五花八门，形形色色的都有。大部分答案都是抱着批判的态度。主要谈谈自己的看法吧。毕竟我也只在一家美国公司工作过，国内的工作经验为0，不足的地方希望指正。社会形态的差异肯定是原因之一。美国是一个很讲究Work Life Balance（工作生活平衡）的国家，人权大于公司的利益。所以如果企业如果过分“压榨员工”，是肯定会被劳工部告的。大公司只要有任何风吹草动，都可能惹上负面新闻。比如，告的就是Google付给女性员工的工资低。当然男性员工也在告Google。举这个例子只是说，在我们眼里，美国是一个非常美国的企业非常怕事，哪怕他们没错，他们都会花重金摆平这件事情。比如前段时间的UA事件，Starbucks事件，都很好的说明了美国企业有多怕事。所以过度加班这种高压红线根本不敢碰。作为一个企业CEO，该破产就破产。美国的企业是非常好“碰瓷”的，告自己雇主的事情是在太多了。在我们眼里，屁大的事情他们都能够上法庭。公司即使没有错，也会花钱摆平。不然一帮好事的媒体整天在显眼的地方报道这些新闻，非常影响企业的声誉。企业是趋于利益的。而且有时候确实需要加班来满足需求。所以很多公司喜欢雇佣亚洲人和墨西哥人，因为这两种人即使加班也不会抱怨。很多美国公司用各种非美国人的Contractor和ICC也是这个道理。当然美国某些公司也是加班很严重的，比如四大。但是（听说）美国的四大好像没国内累。只是相对而言。美国人看重家庭大于工作，家庭比工作重要。所以那种牺牲自我，保全公司利益的行为是很少会发生的。当然中国也不是最差的啦。日本加班比我们多多了。这边加班太多了。日本人讲究的是为了工作可以抛弃一切。要论程序员的幸福度：美国 > 中国 >>> 日本。我没有见过美国码农的公会。也没见过罢工。。。公会发达的是欧洲。法国是公会的巅峰。啥屁事，都罢工，而且完全不管后果。你能想象地铁和大巴司机罢工吗？整个城市会陷入大混乱。有一次考试，我辛辛苦苦背完了所有的概念，结果地铁罢工，考试取消。。。导致我第二周得继续再背一遍。大学经常学的Encapsulation(封装）也是主要原因之一！OOP编程里面的封装其实非常重要。美国这边的公司非常注重Encapsulation。最简单的例子就是，用web framework去写server比徒手用原生java sockets去写要容易多了。很多公司都喜欢Everything As Service (把所有技术都封装成服务），然后把这些Service做成Platform（平台），然后模块化。比如在Google，所有的Infrastructure（架构）都被封装成Service了，使用起来只要关心业务逻辑和资源分配就行，非常省时间。在新的Server里面加Feature也只需要加一个加一个新的模块就行。相比而言，如果花大量时间去调各种开源软件的配置，会花大量的时间。Google的做Infra时间比Facebook长，Infra种类多余FB，这也是“Google比Facebook轻松一点的一个原因”。每次开发产品，我都有种搭积木的感觉。从web framework，到pipeline framework，到monitoring和resource，基本都是非常直观的事情。偶尔有问题，一个邮件就能解决。平心而论，硅谷的Infrastructure比国内好太多了，每个公司都有专门的组去认真研发新的Infra。所以硅谷的公司，只要不是太小，都多多少少有一些开源的项目。凡是做Public Cloud Computing的公司，封装都不会太差。国内现在很多公司也开始做了。因为Cloud Computing讲究就是把自己Infra打包给外面的程序员使用，同样的功能，接口越简单越好。如果外面的人都可以很好的使用，自己人就更容易了。硅谷技术强，但是产品迭代速度比国内差太远了。所以，Uber，Airbnb，Linkedin在国内的市场表现都不怎么好。很多技术壁垒不高的产品，比的就是用迭代速度去占领市场。技术壁垒高的产品，不是迭代速度能解决的。中国的IT公司对用户的需求感知的特别快，他们清楚的知道用户需要什么。国内公司对竞争对手的动作也特别敏感（抄的特别快）。你会发现， 阿里，京东比Amazon的功能多多去了。饿了吗，美团也比Ubereats功能多多了。王者荣耀的新东西出的实在太快了。Google的大佬很多都是工程师出生，重技术，轻产品。而硅谷大部分有特色的新型互联网企业早期都有大量的前Google员工，所以这也是硅谷的一个特色之一。所以中国的IT和硅谷其实是两种IT。迭代速度和发现新的Use Case是中国企业的强项。为了保持这个优势，唯一的方式就是加班了。,主要是因为在美国违反劳动法代价太大了，扯别的都没啥用……大家都必须合法经营的时候，自然是在这个基础上去比拼效率；而大家都可以一定程度违法（比如996）的时候，996的天生有优势，那么公司也都会倾向于996走起。在国内，目前无论是仲裁还是起诉，都难以对这种利用KPI逼迫程序员“自愿加班”的做法提出补偿请求，而且即使成功，也只是针对单个员工，并没有集体诉讼的手段，也没有集体诉讼的群众基础。另一方面，中国程序员群体很年轻，买房、结婚压力很大，本身也有许多人愿意花更多的时间、甚至一定程度上牺牲健康来换更多的钱。这也导致程序员群体本身没有办法团结起来去反对996——如果严格40小时工作制，但是工资减半、年终奖减半，很多程序员也是不乐意的。其实说到底，为什么美国对于劳动法执行这么严格？的确8小时工作制是无产阶级通过艰苦斗争甚至流血牺牲争取来的，但到了今天，坚决维护8小时工作制其实更有利于大资本家，因为如果不严格执行，大资本家有舆论监督，而小资本家偷着996，就很容易追赶上大企业，尤其是在互联网行业；反过来，严格执行8小时工作制，大企业就能在同等条件下产生体量优势。所以大企业会反过来推动更严厉的执法，保证小企业不会利用不对称的优势威胁自己的垄断地位。所以你也会看到美国不遗余力地要把劳工权益保护写进自贸协定里。中国反过来，大企业带头加班，这就比较烦人了。,这个我来答吧。本人在美国IT公司快十年了，大小公司都待过，也做过经理雇过人，从来没有加班过，除了唯一一次做release做到了半夜，当时还是report给一个中国老板！不仅不加班，而且我还经常在家工作。平均每天上班时间，扣除通勤，只有6个小时，额。。。很多公司还有unlimited paid-time off了。。。我每年带薪假至少用20天，不亏着，当然也不好意思用太多。这相当于每年工作11个月。上班有时候还能开个小差，吃个2小时的lunch break，出去散散步，买个咖啡，看个医生啥的。我做的最过分的是在旁边ucsf开了个健身馆会员，有时中午开车去游个泳洗个澡，回来一身氯水味估计下属都能闻到。为毛不用加班呢？分析有一下几点，有个人原因，也有企业文化和法律原因。最后，说实话，空大妈没关系，也就不养眼呗，但胖子空大妈最好还是别再招了。。。我能证明胖子空大妈挡着我拖行李。。。。,美国程序员工作比中国程序员工作轻松、加班少总体来说是事实，但都归结到美国程序员效率更高，制度更好之类就过于片面了。我觉得主要原因在于别的一些地方，例如加班的边际效用，程序员的生活习惯。背景：我在baidu（北京）和所以我觉得问题在于一些更本质的东西。这里是我的几点观察：。美国社会成熟度比较高，在湾区生活的同学也许过去10年都感觉不到特别大的变化，而中国则翻天幅度，特别是互联网领域。例如手机支付，美国普及很难，因为信用卡已经很普及了，手机支付带来的好处不显得很大。但中国的基础设施没跟上，所以手机支付在便利性上提升特别大，同样的技术，大家会不惜余力的去推广。经济学上这个叫做边际效用。同样的技术，中国的边际效用比较高，所以大家可以全力推广。美国因为起点高，所以更加谨慎一些。这个影响到了加班文化。通过加班可以完成更多工作。如果项目经理觉得这些工作带来丰厚回报，他们肯定会压着组员做。在中国很可能是这样，例如做出这个产品马上会有人用，升职加薪跟着就来。然而在美国，即使今天做出来，用户也是慢慢的过来，完全不需要急着那么几天。。美国程序员年龄普遍偏大，因为计算机行业在2000年在美国就很红火（参考互联网泡沫），培养的大量的程序员，这些人现在很多都有小孩。在美国小孩都是自己带，双方父母不怎么帮忙。请人又特别贵，例如湾区工作日请人带娃一个月起码是2千美金起。而且学校课程松，所以放学后都要靠父母照顾。此外，很多人住的房子都带院子，请人打理费用贵，很多时候大家亲自动手。例如于是在加班边际效用不高的情况下，大家纷纷早点下班回家做家务。并冠冕堂皇的叫work-life balance。我认识好几个未婚朋友，他们觉得每天那么早下班实在是太寂寞，毅然回国去了创业公司，并对996大家赞赏。记得计算机技术日新月异，而且随着经历增长，需要提升各项领导能力。这些都需要足够多的时间去学习。我认识的厉害的人无一不是在下班后努力挤出时间工作，丝毫不比996工作时间少。与其现在羡慕别人轻松，不如埋头努力工作十年再来看。===19年更新===我对答案中对996淡淡的赞同表示很惭愧。反观我自己，在身体和家庭允许的一些时间里，可能每周会工作60、70小时。但如果每周坚持是不可能的。很是不赞同企业家大肆鼓吹必须996。,不知道别人的情况，说说国内的几个典型情况：,亚洲国家，人多资源少，没人能过上真正优雅的生活要么你拼命，能维持阶层不倒退。要么你被别人踩下去即使你觉得这样没意思，想安心过简单的生活，不想踩别人，还有人看你位置好，想踩你一脚呢你跟中国人比谁牛逼，谁更会拼命，谁更拼命谁拿钱更多，这样比比就算了。人家美国欧洲的人，跟你不是一个维度的，谈不上在一个指标上竞争。人家生活质量高，不是因为人家更牛逼更拼命，而是人均资源丰富（美欧澳），靠金融资本生存（欧洲），靠掌控世界资源和能源（美国），靠已有科技优势（美日英法），靠资源出口（美澳）。。。各有各的活法，唯独不靠劳动压榨国民，不需要这么拼命搞只有靠劳动力的国家，才尊崇努力奋斗，996，养老靠自己，70岁也要买房，这样中国要复兴，宣传捋起袖子加油干。美国要复兴，川普号召工人去996了么？逗呢。人家要的是制造业回流，加强知识产权保护，要中国金融开放，唯独不逼着自己国民去加班，去延迟退休，去靠自己养老，去买房。。。依靠劳动力的国家，老龄化就完了。所以中国歧视年纪大的，码农3040失业，前台只收年轻小女生，年轻人在北上广奋斗十几年然后被撵出去，等等除了中国，亚洲的日本新加坡也是如此，新加坡活到老干到老，和天朝有一拼。不过它们发展的早，积累的红利多，福利情况好一点简单的道理现在你知道为啥人家要移民了吧。移民之后变nb了吗？非也。出了国门，没人在乎你多拼命多牛逼。也不要问为啥在美国朝九晚五就买得起大house，在中国996连首付也攒不起。情况不一样，单纯比谁努力，没有意义,管理文化不一样。中国官大一级压死人，所以像狗一样言听计从的狗逼多，上面说什么就干什么，不考虑可行性，不会据理力争，然后把pressure压给下面，到时候甩锅下面。美国，你是一个manager就要为自己的决策负责，干不成要买单，因为你对你的同事有责任，于是会陷入管理层的bullshiting，很多事情就不会放下去做，也会丧失一些idea实现的机会。所以下面干的轻松。说白了，中国就是靠着频繁的无用功来以量取胜，奈何我国农民太多，这帮农民失败了就无处可去，他们失败了就是死路一条。所以你是这种人的管理，让他们跪下来叫爸爸都行。期待中国人口红利消失的那一天，让这些狗逼集中的企业彻底没人来，然后这些落后的企业淘汰完蛋，这些占据了资源的企业才是中国创新上不去的根源，它们不死，中国进步不了。就像当年的国企一样。
学会了 C 语言真的可以开发出很多东西吗？,我现在c语言入门，基本靠自学，就看网上的那种教程，但是我怎么觉得它就是只能做下数学题，我觉得它并不能编辑出一个啥子游戏或者软件出来噢……初学者，见谅。,马里奥碰到花朵就变身。什么是马里奥？一个装着 16 × 32 个小色块的长方形，其中一些色块填着颜色，另一些没有。什么是花？一个 16 × 16 的正方形。什么是「变身」？把马里奥这个方块里面代表衣服的褐色变成红色，代表背带裤的红色变成白色。什么是褐色？暂且说它是 0x887000 这个数字。什么是「碰到」？马里奥的长方形与花朵的正方形有所重叠。什么是「重叠」？假设马里奥的这个方块占据屏幕（什么是屏幕？一个能装下 256 × 240 个小色块的矩形）中 X 方向 101 到 116、Y 方向 21 到 52 之间的区域，那么只要这个区域内有一点或更多点也被花朵所占据（比如花朵处在 X 116 到 131、Y 21 到 36 之间的区域内），我们就认为两者有所重叠。若给定以八个数值代表的两个矩形区域，请写出判断两个区域是否有重叠的 C 语言程序。如果你能写出来，那么祝贺你，如果有朝一日你想自己用 C 做一遍 NES 版本的《超级马里奥》，你至少知道让他变身需要做什么了。是的，C 语言也许「只能」做数学题。可是，绝大多数游戏的运行过程就是不停地做数学题，而所谓编写游戏，也就是把游戏的规则和游戏的效果转化为数学题而已。其中不少题目电脑都已经知道怎么解——是别的程序员事先告诉它的——比如「求一堆散落在三维直角座标系之中的多面体在 8(x−3)−10(y+1)−11(z−1)=0 这个平面上一个给定范围内的投影」或者「给定一些彼此相连的顶点，求任意两点之间的最短路径」之类的数学题，它只需要千万分之一秒就能给你解好。这种能力有什么用？电脑上 FPS 游戏的本质活动就是不停地求三维座标系下的多面体经过变换之后在二维平面上的投影，不停地判断两个多面体是否彼此重叠，以及不停地寻找两个顶点之间的不过我能理解你的困惑。投入大量时间看完教程，结果只能在黑框里输出一串数字。这是在学编程还是在向七十年代致敬？编程是这样无法给人成就感的活动吗？是，也不是。看你的表述，应该不是小孩子了，因为小孩子不会因为初学编程能做的事情很少而没有成就感，或者说，觉得这样做没有成就感的小孩子根本不会继续学下去。最初学编程的成就感单纯来自于「我居然可以指挥机器做一些事」，至少我小时候用中华学习机编一个程序帮我算暑假作业上的无奈大多数人过了一定年纪就很难再靠「我能指挥机器」这种简单原始的快乐来驱动自己学编程。见过世面，听过传言，欲望和野心变得复杂而庞大，你想要图形界面，音乐音效，人工智能，云端同步，可是你闷头学了几堂课，还是只学会在黑框里显示一串数字。你怀疑这是学 C 语言的错，于是你到知乎上来问了这个问题。你的疑惑是有道理的。如果能把编程学下去，日后你就会明白，任何程序都是一座冰山，最终用户能看到的界面和使用的功能，只是程序浮在水面上的十分之一。知乎这个网站其实也是个运行在某台电脑上的程序，你能看到的十分之一是用什么编写的呢？HTML，CSS，JavaScript，或者 Objective-C。而你看不到的那十分之九是用什么编写的呢？Python。这些你无法直接观测到的 Python 程序运行在世界某个角落的某些计算机上，隔着光缆、双绞线和无线基站，为你面前或掌上的用户界面注入生命。（ ……可是 Python 是用什么编写的呢？C 语言（当然，这么说并不严谨，Python 理论上可以用任何其他语言实现，实际上也已经被用很多其他语言实现了，不过这并不是重点）。任何编程语言都是实现某个功能的工具，Python 实现了知乎这个网站的大部分功能，而 C 实现了「用 Python 写程序」这个功能。为什么是 C？C 是初代程序员所使用的语言，那时候硬件很贵，软件必须高效；而计算机的用户都是职业程序员，对于硬件有足够的理解。C 贴近硬件，就意味着它容易译成机器能懂的语言，而它的设计者也并不需要操心普通人学起来可能会比较困难——而且，说真的，其实也不很难。但是，这么多年过去之后，软件规模变得越来越大，C 就像锤子和手锯，修小木屋得心应手，造摩天楼就比较力不从心；但 C 语言可以用来造出其他更适合建造摩天楼的工具，乃至组成摩天楼的预制件，就好比用锤子和手锯造出挖掘机和吊车、混凝土板和一体门窗一样（当然，这个类比并不十分贴切。可是没有什么类比能贴切地描述软件工程，因为软件工程像许多东西，却又什么东西都不像）。所以，回到你的问题上来，是的，学会 C 计算机语言真的可以开发出很多东西，但除非内力深厚，场合适当，并且闲得蛋疼，大多数人不会拿 C 或者只拿 C 来开发太大的东西。如果你只是想要一门能够让你「编辑出一个啥子游戏或者软件出来」的语言，而且你用 Windows，那建议你转去学学 C#。它长得和 C 挺像，但却能迅速地写出至少是带有图形界面的程序，用起来也很方便，鼠标点一点就能让你对自己的程序看起来什么样有个比较直观的印象。还有，在国内，另外，还有一件事你必须弄明白：现代的所谓编程这一活动，其实大部分时候是在「合理地堆砌别人已经实现的功能来实现新的功能」，C 语言莫不如是，比如 尾注1：题图画错了。马里奥身宽应为 16 像素，我画成了 17。尾注2：NES 上的超级玛利奥使用 6502 汇编完成，并不是 C，碰撞检测也不是像素级的。尾注3：我不是,你能想到的，C语言都能搞，可以说是无所不能，把C学好，上手其他语言也会事半功倍。题主只是还没有入门，只看教程不动手永远学不会，推荐5个免费的C语言入门小项目，由易到难，开始动手做一些常见的小东西吧。1.用C语言做一个简单的计算器，进行加、减、乘、除操作。项目涉及的所有数学知识都很简单，但输入过程会增加复杂性。2048是之前十分火爆的一款益智游戏。项目将使用 C 语言完成一个2048游戏。3.扫雷是Window系统中自带的经典游戏。项目将使用 C 语言完成一个简单的扫雷游戏。本次课程将使用 C 语言完成一个简单的日历功能。输入相应的年/月即可看到当月的日历。5.用最最简单的代码来实现五子棋游戏，帮助大家复习基础知识，了解一个项目的开发流程。收藏的童鞋们顺便点个赞吧：）,"首先可以肯定的是，答案是，你学的只是c语言语法，是与平台无关的，不调用图形接口，就没法写windows应用。不调用操作系统网络接口，就没法写通信程序。不学习不学习硬件平台,就没法开发,是你进入计算机世界,和电脑沟通的基础.试问一下,你学会一门语言,就能了解当地人的习俗和文化,并能和当地人开展生意了吗?不能!你总得了解下当地人的习性,文化吧!你还得学习一系列其他知识,才能真正干活.你要是想去火星当包工头子,就得再学火星的建筑术语,怎么和火星打工人沟通,火星建筑学!这个与c的发展历程有关，现在的c多用于底层库开发，而多年前，这个c相当于现在的安卓java，是几乎所有操作系统程序开发的标准语言，现在因为其过使用起来过于繁琐复杂，开发周期长，被java等高阶语言所替代。学好c语言,就可以进一步学习c++了,c语言就业面比较窄,学好c++,不错的工作还是很多的.如果还有童鞋对于C++学习还有疑问。这里我推荐下,windows c开发, 游戏开发,dos应用程序开发嵌入式单片机,广泛存在于洗衣机,空调,微波炉,空气净化器里下图是一个基于单片机控制的有兴趣的可以搜索单片机入门学习一下.,推荐读嗨翻c语言,里面有一些实用小项目包括等等,教给你很多其他书没有的实用技能.你可以考虑读一下,unix环境编程,unix网络编程,Windows c程序设计(不建议,95年的技术了,我初中看过)unix环境编程能叫你写linux各种常见命令行程序unix网络环境编程能教你linux后台程序如何设计学一下arduino,来掌握嵌入式设备的编程方法.如果要写桌面软件,可以试试linux下的gtk(不建议学),Windows 如果你实在想做app,我建议你去学java或者swift,个人更建议swift,相对容易如果你觉得自己学习困难,没有头绪,没人指导,建议找一门在线课程,开课吧一个c++免费的偏实战的课,可以弥补实战不足的问题,对于小白还是很友好的，，还能领取项目题库资料，需要的同学点击下方链接，免费听一下他们家的试听课程","曾经我对C语言的认识是：黑框框+数学题，后来变成：C语言----让生活更美好。直接上实物图!!!一起体验硬件开发中，C语言的黑魔法。内附：追女神的套路新增几个娱乐点：1.难度系数：任何一个东西要想做的很精，都很难，所以很难下结论。这里难度系数，答主默认为从学生角度来看，实现的难易程度。2.介绍：怕大家看不懂图片，多多介绍功能。3.背后的故事：讲述答主和该项目的故事1.喜闻乐见的智能车那些年，我们一起玩过的智能车。因为这个被带入不归路的同学，请举起你们的双手！！！我从手机翻了很久才找到这张照片，让大家娱乐一下。说一下我做过的三类车：（1）避障车：功能：①遇到障碍物可以自己躲避（因为有超声波传感器可以检测到前面有障碍物），比我们小时候的四驱车智能多了吧！！！！！②当然还有其他功能：液晶屏显示走过的距离，红外避障之类的。（难度系数：★）（2）我们将两个轮子的车放在地上，那它必然会摔倒。平衡车就是利用（3）WIFI视频车：该小车自带一个摄像头，如果电脑和小车上的WIFI连接了以后，我们通过PC端的一个软件，就可以看到小车摄像头实时传过来的画面。（难度系数：★★★）背后的故事：答主大一最爱的就是做车。。。。。。。2.萝莉语音温度播报介绍：①可以显示温度②如果按下播报键，可以语音播报当前温度③同时还具有蓝牙功能，几十米也能收到温度消息（用手机或者PC直接连接温度器的蓝牙就能收到！）④可以将温度实时传送至PC，并在动画中显示温度变化⑤声音自己可以录制，选择你喜欢的声音难度系数：★★★背后的故事：当时有个好基友假期要做兼职，我说做兼职多没‘’钱途‘，我们来做这个比赛，基友拒绝。两个月后颁奖。。。。学校给了一部3.万年不变的万年历介绍：①可以显示日期，温度，还可以设置闹钟叫醒自己哦！！！！！！！！！！！！！②可以在特定日期，屏幕显示特定的祝福。-------据说有无数宅男做出这个送给了女神③不要看不起它哦，大家想象一下，送给女神后：三个月晚上的某一天正好是情人节，半夜12点，铃声响起，女神下床一看，屏幕显示了一句告白的话~~~~~~~~~~~后面的剧情自己脑补难度系数：★★背后的故事：没故事，答主练手做的。4.采矿致富车--------------电赛作品--金属探测车介绍：这是某一年难度系数：★★★★背后的故事：做出来简单，做的稳定+快就难了。答主的车跑的飞快。。。，测试的时候竟然跑出线了，吓尿！幸好最后没事了，喜拿1等。5.基于物联网的介绍：这是答主参加某比赛做的，是不是一脸懵逼？看不懂？其实很简单，用九个传感器仿照手机九宫格解锁，使用者只要在远处挥动手势，这个门就可以打开，如果三次错误就向主人打电话报警！！（还会语音提示：小偷，我已报警，请走开。喇叭就在右下角，大家应该能看到）同时还会在我们做的网站上，提示有人盗窃~~~~~~~~~~~~~可惜图不全了，不然一定放出来！ 难度系数：★★★★，做出来简单，做的好看+稳定就难了。背后的故事：我能说人生第一次上电视，是因为这个么。。。。。虽然就晃悠几秒6.基于心理治疗的儿童电子琴介绍：啧啧啧，这可不是普通的电子琴哦。使用者可以隔空弹琴，隔空哦！！一个学姐拿这个，儿歌弹得飞起。。。。其实是为抑郁症,残疾儿童等设计的，用于心理治疗。难度系数：★★★★背后的故事：虽然这个项目不是我做的，但是也算节间参与，也正是因为这个项目，把我带上了不归路。。。。。。。该项目‘’荣获‘’大学生喜闻乐见的比赛--挑战杯XXX国家级XX奖，答主蛮惊讶的还，毕竟我一直当它是玩具。。。。。它还有多种模式，可以选择某一首歌播放，也可以自己弹，哪个键动了，对应的动画也动，如下图：7.用一次就想丢的-----生活中，你是否遇到这样一些问题？不用怕，只要用了我们的蓝牙防丢器，保证你以后再也不敢丢了。介绍：找不到图了，放一张百度的图功能：①手机和防丢片通过蓝牙，只要一个离开一个（超过一定距离），双方都会响难度系数：★★★背后的故事：参加挑战杯XXX比赛做的，一个学弟仿照淘宝的东西，让我照做一个出来。绝对是坑啊，离开一两米就响那确实能防盗。这东西和手机离开三十米估计才响，你让我去哪里找贼啊？而且声音很低。。。人多听不见啊。。为了考证，我去淘宝买了两个，结果一模一样的毛病，已哭，现在不知道被我扔到哪里去了。这也从另一个角度告诉我们，这些比赛有多水（其实很多角度都能看出来，哈哈），最后得了个省XXX奖，不醉不行。比赛失利的孩子，不要哭，继续撸。感慨：还有好些项目，找不到图了，答主吃完饭回来看能找到不！真后悔当初乱删照片，现在看到这些照片真激动，全是青春的回忆啊~~~~~~~~~~~~~~~~~~~~8.操作系统嵌入式系统，可以运行在真机。我发了一个15天内制作操作系统的攻略，有完整的编写教程。想写操作系统的朋友，可以看看结尾：C语言----让生活更美好9.如何让C语言走进生活？这样的例子数不胜数，答主举个简单的例子，抛砖引玉，剩下的发挥空间，交给你们了！相信知乎有很多爱养宠物的童鞋们，有时候经常加班或者没时间照顾小猫小狗，何不考虑做个宠物喂食器，就算自己长期不在家，也能让他们安然无忧。①比如这样的，喂水器：（小狗走近就会滴水）②.又或者这样的喂食器：（小狗走近就会落食）③.喂水+喂食+逗他们玩的恶作剧，也是可以的啊！自己制作的好处就是，可以方便的增删功能，贴近自己的生活习惯。④怎么做：只要有C基础的童鞋，想速成，非常快！！！！！！！！！！！认真做，一个礼拜就能做成一个有雏形的喂食器了。是不是感觉很有趣啊~~~~~~~~~~~~~结尾：C语言----让生活更美好",对于大部分初学者，学习C语言的目的是希望做一名合格的程序员，开发出靠谱的软件来。但是学了C语言的基本语法后，发现只能开发“黑底白字”的DOS程序，完全没有漂亮的界面和生动的交互。似乎只有黑框框:于是学数据结构，学算法，学操作系统，越陷越深，越来越难，最后迷茫了，不知道学C语言能做什么，认为学习编程很难，开始怀疑自己，甚至想放弃。其实，这是很多初学者都会踩到的一个坑！C语言本身是一门很简单的语言，提供的实用功能不多，大部分要借助操作系统、第三方库、单片机来完成。也就是说，只学C语言基本什么也做不了，也基本找不到工作。首先，给学弟学妹们分享一份大学期间自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，去网上挨个找的，最后汇总而成。汇集了编程语言(Java、C++、C、Python等等)、操作系统、计算机网络、系统架构、设计模式、程序员数学、测试、中间件 、前端开发、后台开发、网络编程、Linux使用及内核、数据库、Redis....等主流的编程学习书籍。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：书单：C语言是一门通用性的语言，并没有针对某个领域进行优化，在实际项目中，C语言主要用于较底层的开发，例如：所以C语言永不过时: 既然C语言的应用这么多，为什么很多读者觉得它什么也做不了呢？我们先说一个概念，就是库（Library）。库就是编程专家写好的代码，我们可以拿来直接使用，这样能够节省开发成本，提高开发效率，并且库代码的执行效率、严谨性、安全性和规范性要明显优于我们自己编写的代码，市场上有很多优秀的库，有的收费，有的免费，我们要善于利用这些库，尽量不要重复造轮子。另外，推荐一个谷歌大佬的刷题笔记，强烈推荐：库一般分为两种： 第三方库不是由官方开发，没有质量把控，良莠不齐，但是有相当一部分也非常优秀，已经得到了大家的认可，已经应用在大公司的项目开发中，这些库能够和标准库媲美。标准库是我们在学习编程语言时就要一起学习的，例如C语言的输入输出、文件操作、日期时间、字符串处理、内存管理等都是标准库提供的功能，它们并不是C语言语法的内容。如果一门编程语言的标准库强大，初学者经过简单的学习后就很容易开发出实用的项目。例如Java，它的标准库包含了GUI（图形界面）、图形处理、网络通信、网络服务器、HTML解析、HTTP协议、多线程、多进程、反观C语言，它的标准库只有输入输出、文件操作、日期时间、数学计算等基本功能，都是在黑黑的控制台下进行的，跟网站、PC软件、APP等八竿子打不着，所以初学者觉得C语言没有用。那么，C语言到底能不能开发网站、PC软件或者APP呢？C语言的标准库肯定不能干这些事情啦，就得依靠第三方库了，遗憾的是，C语言的第三方库大都也是底层库，支持应用开发的库寥寥无几，只有一个 GTK 库能够开发出 PC 软件来，而没有与网站开发和APP开发相关的库。GTK 库在PC软件开发中也很少用了，PC软件开发已经是 C++、C#、VB、Java、Delphi 的天下了。换句话说，开发PC软件基本不使用C语言，而是使用 C++、C#、VB、Java、Delphi 等其它语言。记住，C语言几乎不用来做软件、网站、APP等这些应用层开发，其它的编程语言能够更好地完成任务，没必要非得使用C语言，C语言基本都是用来做底层开发，也就是看不见摸不着的、在后台默默提供服务的那些项目，而这样的项目对初学者来说基本没有实用价值，初学者也不知道它们该怎么使用。初学者想要的C语言没有，C语言能做的初学者用不到，就是这种矛盾导致初学者非常迷茫。有人可能会问，C语言不是还可以用来开发单片机或者嵌入式吗？是的没错，但是这个方向是软硬件结合的，不是在我们的电脑上进行开发，而是在特殊的开发板上进行开发，并且还需要学习数字电路、模拟电路、汇编、ARM、Linux 等方面的知识，只学C语言也没有用武之地。如果你觉得学了C语言没用，那么恭喜你，你是对的，应用层的开发一般真的用不上它。但是，没用也要学，学习C语言并不一定是要应用它，C语言可以夯实你的编程基础，尤其是数据结构、算法、内存、线程、进程、通信、操作系统等底层的计算机知识，没有C语言基础是学不好的。这些底层知识并不一定能够直接应用在实际开发中，但是它们会让你有底气，会让你透彻地理解编程概念，会让你站的“低”看得远，会让你避免很多低级错误，会让你心中有“架构师”的思维。部分内容来自网络：关于数据结构、算法、内存、线程、进程、通信、操作系统等这些基本的知识，重要的是理解概念，知道计算机是怎么回事，千万不要深入细节，把自己绕进去，耽误一两年的功夫，要尽早跳出来去做应用开发，找到兴趣点，获得成就感。这个时候，C语言主要的作用是让你入门，了解编程语言的基本语法，强化编程思维，学习计算机底层知识，为以后的职业生涯打下坚实的基础，而不是用它来做实际开发。在实际开发中，遇到问题，或者哪里理解不透了，可以再来回顾这些底层知识，这个时候就可以深入细节了。因为有了实际开发经验，再学习底层知识就知道哪里是重点了，不会像无头的苍蝇一样乱飞，什么都学。C语言是一门“古老”的语言了，在中大型的应用层项目开发中，C++、Java、Python、C# 等其他编程语言能够更好地胜任，为C语言开发应用层的库简直是费力不讨好，所以几乎没人这么做。GTK 算是一个应用层的库，但是它也比较老了，新版的 GTK+ 已经支持 C++ 了，不再仅仅支持C语言了。我们先不管C语言的优势是运行效率极高，这正是底层开发所看重的。底层开发有时候就是一个模块，或者是一个服务，规模不算大，但是对效率有严格的要求，此时用C语言就非常合适，所以针对底层开发的C语言库较多，因为它们有非常大的实用价值。推荐几篇我写的关于C语言的文章： ,什么是计算机？一个那为什么世界可以这么美？减法用8位一字节，128个字母组单词单词做指令，数可以代表指令也可以代表运算部件，指令有操作码和操作数。指挥加法器操作数。图像RGB三元色256灰度，声音44.1kHz采样，汉字两字节unicode。于是世间音形变成01。有了这些，我便可以用单片机控制led。我传1你就亮，这是开关。当我128*64个液晶一起控制，这是12864液晶显示屏。当我1920*1080这就是锤子的屏幕。于是显示器出来了。怎么现实锤子二字？怎么使用键盘扫描a这个字母？怎么打开wifi模块？怎么写驱动？这都是c语言在干的。驱动出来了，处理器改怎么分配时间，内存怎么占用，硬盘内存cache怎么分，进程何时用，外设驱动怎么处理，等等，这些写好了就是简易操作系统吧。linux内核全用c哦，屏幕可以任意显示了，音响可以随意响了，有os做底层支撑了。然后我让屏幕显示一把枪，我定义它为一个物体，定义一些操作，比如扣动扳机。再定义一些人物，场景，定义一些规则。这就是cs了吧。这里枪只是一个枪，我不会去管它怎么画怎么显，我只要知道他是一个东西，我可以用它。于是就出来了楼主所说的但是从那让你学c不是让你用它写出什么中国版linux，是为了让你明白如何去操作工具。学的是如何用机器思想思考。而不是你说开机就开机。入门，学的是语法的抽象。是知道名词动词和句子有结构这个事实。至于汉语主谓宾和英语主谓宾，学了一个另一个不就好懂了吗我也不知道我要说啥了T T。这里的每一段的一个功能或许就是几百个博士教授一生的目的。其实就是讲计算机的一些原理。对象语言更多的是使用工具，比如库，函数，调用什么的。而c是他们的基石。更新于22夜晚我们大家都忘了一个事，软件真的只是写代码吗？写代码只占了不到百分之十吧，大多的是在维护，规划，文档，找bug。。。。编程语言有好多，汇编，是最直接效率最高，但是看到一堆1001谁都眼花。别信什么传说曾经有人用针在光盘上刻出过一个操作系统，现在几乎都可以用c代替了吧。但是还要懂一点灵魂。c是高级结构语言，但还是偏向与硬件。linux仅仅几百k的源码大多就是什么处理器内存存储管理，进程管理。linux牛是因为他驱动多。c就是一线员工，危险都得上，但少了他不行。老师们教导我们劳动只有分工不同没有贵贱之分。反而很多c工程师待遇超好。java ，javascript之类脚本语言，这个没学，不太懂，不敢说了，求介绍matlab fortan之类偏向数学吧。什么控制，图像处理，识别，人工智能，神经网络，机器学习。感觉好高大上哦。这些东西都是你看不到，但神奇的可以很实用的问题，这就是数学的魅力。你知道一个vhdl， html之类，求指教但所有编程不都是一个理嘛，一个物质操纵另一个物质，加法器操作数，系统操作开关，屏幕。你的鼠标操纵一个对象，whdl操纵一条电子线路。当然还差很多，要实现这些，还有太多太多。最后什么国产e语言。我觉得没啥用，除了汉语好看，没一点用,理论上C语言能开发出几乎所有软件。但是，计算机发展了几十年，留下的大量的轮子和解决方案。C后产生的各种新语言和第三方库如此丰富，这已经是巨大的财富。我们没有必要我接触C语言完全是因为课程的安排。C基本语法掌握后，接下来就是数据结构。开始了想题主一样，做“数学题”。用C实现链表、但是这个过程对我的影响几乎是最大的。再后来接触Java和Python，特别是Python，太改善生活质量了。所以毕设毫不犹豫选择Python做开发语言。这之后，我开始关心开发的复杂度。其实实际开发过程中，业务逻辑本身带来的复杂度是无法消除的，而且开发过程使用的语言和选择的框架也会带入复杂度。我之前搞C语言，特别是多线程的时候，内存回收太容易出Bug了，很头疼。即使使用了我个人的观点，就是用最接近人脑理解的方式来抽象，即使增加开发成本也可是付出的。让数据有更好的组织形式，优先考虑良好的数据结构表达而不是沉迷于OOP的设计模式，减少抽象过程带入的胶合层，能吞掉的就不要暴露给使用者。毕竟胶合层本身就是增加复杂度的大隐患。减少开发的复杂度真的可以改善生活！请相信我。我推荐还在大学学习的，时间多的是，不要根基不稳就追逐看似高大上的新玩意，很多真的当你用的时候在去看也不晚，多看看C和数据结构以及算法。折腾明白了，学其他的会比较快，而且不会迷失在各种框架里面。,学的不够初期: -----------------------------------------------------动态规划Dp状态设计与方程总结 ,大一的C语言课选了一个很有趣的老师，当时微信的打飞机游戏正火，于是老师期末考试就让我们用SFML图形库模仿微信写一个打飞机游戏。最开始真的是一脸懵逼，虽然上大学前写过一点小程序，但当时我也跟题主一样就只能写写算法题，一个真正像样的软件都写不出来。。后来就天天泡图书馆看SFML的官网的API文档，跟着《SFML Game Development》这本书一步步学，最后终于赶在deadline的前几天通宵写出来了23333刚写出来那会特别有成就感，抱着这游戏可以玩一整天:-D  毕竟这是我第一个能拿得出手的程序，虽然代码写的很糟糕，很多地方还可以优化，但也无伤大雅啦hhh后来我一个比较喜欢的女生也找我要这个游戏玩，我偷偷地把难度调到了最高，然后跟她打包票说打通关了请你吃饭2333诶等等..我好像知道我为什么一直单身了(ಥ_ಥ)-------------------------------------更新------------------------------------------看到大家对这个感兴趣我就把源码放出来吧,"当然可以开发出很多东西!翻了下各各回答,有单片机的,有小游戏的,有说linux内核的,也有各式各样的算法的,当然,这些东西都挺牛逼的,但C开发的玩意,尽管东西牛逼,但可观赏性不强,娱乐效果不够,导致大家对c的看法就是这玩意做不出多少东西既然如此,那我来给大家表演个绝活儿.最近不是好说,打开sai,先简单画个人设试试水呗现在模型有了,可她不会动啊,不会动怎么能骗粉,这个时候就得上Live2D了,可打开官网一年800块钱,都够我去三次海底捞了,吃着火锅唱着歌儿不比当vtuber爽多了,要掏钱还当啥vtuber,不行!我琢磨着,翻了翻live2D的教程然后首先,我们先创建一个窗体,拉上一堆控件,作为编辑平台然后我们把整个模型加载进来第一步我们需要先建立网格,之前在我其它文章有提到过的,使用C语言编写一个3D软渲染器,不过现在我们只需要图元这样,我们就能通过添加点集来建立网格了当然,骨骼必不可少,为此,将每个图层设置一个骨骼节点,然后连接这些节点,形成骨骼最后,进一步编辑每个顶点的弹性系数,形成那种头发弹弹弹的效果这样,我们就可以通过编辑骨骼来实现那种弹弹弹的头发和耳朵效果了进一步完善功能,包括了骨骼的基础旋转伸缩外力施加纹理切换等功能最终完成动画效果当然,上面你所看到的一切,包括编辑器及整个动画框架,都由C语言编写完成最后,代码及程序,在每次听到C语言不适合图形开发GUI开发只能黑框框之类的言论,我就想笑","C啊, 虽然作为几乎所有搞编程的人的入门语言, 但是C确是一个波大井深, 有着大能力的语言, 为什么都说C/C艹比其他语言难呢? 初学者学完了C的语法后都觉得这破烂玩意只能写写加减乘除.....好吧, 我就说说我的理解好了.当今程序世界两大方向, 一是向上层发展, 面向对象, 面向方面, 面向这面向那, 所谓的高级语言, 高级语言可以轻松的完成一些非常复杂的任务, 因为他们以及有了很多现成的封装好的库. 另一是向底层发展, 被称为如果你看过计算机原理, 或许你能更好的理解直接操作设备意味着什么. 正如某楼说的那样, 图像是由一个个像素构成的, 对于未压缩的24位RGB位图, 每个像素的颜色是由RGB三原色构成的,每个颜色一个字节大小,取值0~255,一个像素是3个字节(事实上是4个), n个像素构成的bitmap图像就是n*3个字节大小, 不算文件头. 这么大一块内存放在硬盘里, 要将它绘制到屏幕上要怎么做呢?屏幕分辨率这个东西事实上就是屏幕的像素, CRT这种老古董不谈, LCD就是无数的晶体构成无数的像素, 所有晶体构成的物理像素个数便是一个LCD显示器分辨率的极限.LCD显示屏纵向和横向各有一排线路来定位激活某一行或者某一列的晶体使之呈现颜色, 这些线路链接到LCD显示器主控处理器的各个管教, 由一个驱动程序控制, 这个驱动程序一般情况下都是C写的, 不排除ASM... 当想要在某个像素显示某个颜色时, 驱动程序将对应的管脚电平拉高或者拉低, 管脚的地址是显示器处理器芯片定义好的, 程序只管修改那个地址的值就可以实现功能. 通过VGA或者其他方式交互数据. 要把一个图片从硬盘绘制到屏幕上怎么做呢? 先读硬盘上的图片, 将图片数据加载到内存, 然后将这块内存交给显卡驱动, 显卡驱动开始控制显卡上各个模块处理这个图片, 只是绘制的话不需要做处理, 显卡直接将图像数据转化成显示器能识别的数据, 发送到显示器, 显示器处理芯片控制每个管脚作出改变, 使屏幕上的像素跟图像的像素颜色对应起来. 这样一副图就呈现了....显卡驱动是直接操作显卡硬件的程序, 基本上就是C写的,效率要求变态的地方会用ASM. 而显卡提供的大量底层接口不可能让一个普通开发者直接调用啊, 我要绘制一个图标不至于读显卡的产品手册吧. 所以就来了各种各样的图形库, 什么GDI, CxImage, OpenGL, DirectX......这些是封装了或通用或独家的显卡驱动接口, 将复杂的调用简单化, 而这些大牛级别的东西肯定是C/C艹写的, 更复杂的东西例如虚幻3之类的3D引擎, 或许是调用DirectX, OpenGL之类的程序, 肯定也没跑是C/C艹写的...顺带一提另一个跟这些不怎么相干的, 有个东西叫VLCPlayer, 是用C写的, Linux下会用OpenGL, Windows下可以用DirectX, 都支持, 如果你还是觉得C只能写写数学题, 就拜读一下VLCPlayer的源码去吧. 希望有一天你也能写出个这种级别的的东西来.",比如理解了 C 语言里面的函数指针，那么再去学习高级语言里面的函数回调，Windows GUI 编程中的基于事件驱动的框架模型，还有 Java，C# 里面的 Action，Invoke 就简单了。又比如，理解了 C 语言里面的数据和指针，那么高级语言里面的类理解起来就简单了；在 Java/C# 的面试中，很多人经常被问到 StringBuild 和 String，如果没有深入理解指针，则只能回答 “StringBuild 是结构，String 是类” 这种简单的回答，但如果深入理解了指针，你便可以这样说 “String 是类，如果修改 String，之前的 String 还在，同时会创建一个新的 String，但StringBuild 不会，StringBuild 会直接修改数据” 这样完整的回答。学会了C语言可以开发出什么东西？人邮君结合C语言的不同应用，来给大家介绍一下。在你的问题描述中，你说 C 语言只能做数学题，这倒是可以做一些比如快速计算 24，首先要说明的是，结构 struct 存储单个字符信息，再对字符串进行步进处理，然后进行第二次处理，分析得到的运算符、括号、整数、小数等等，通过语法分析和通过这个项目可以把 C 语言的所有语法知识全部整合起来，包括但不限于：ASCII 码，基本数据类型的使用，char、int、float 等，if、switch 等条件判断的使用，递归函数的使用，函数指针，数据结构。现在 Win32 非常少见，因为太原始了，同时也因为高级语言做应用开发速度更快。但是用 C 语言开发一个 win32 记事本对于理解应用程序运行的内部原理还是很有帮助的，“最基础的就是最有用的”，Windows 编程圣经  Win32 API 为 C语言提供了接口，C语言可以调用以此来和操作系统互动，在开发记事本的过程中可以学习到以下知识：窗口句柄（Hwnd）是什么，GDI绘图原理，windows 消息处理原理等等。由于操作系统本身就是使用 C 语言开发的，所以即使高级语言对底层抽象做的很好，但是在很多时候仍然需要调用 C 语言写的 dll，这个时候如果学过 C语言应用开发就很容易理解。计算机专业有几大基础课：我们来看如何实现一段最简单的 C 语言代码：操作系统是软件领域最复杂的，难度最大的，实现起来涉及的知识面非常广。首先需要有一定的汇编知识，用汇编写一段代码将操作系统的代码写入引导扇区，以及做一些切换处理器模式的工作，剩下的都是 C 语言干的活。操作系统的四大模块：总的来说大概有以下几个步骤：学会 C 计算机语言真的可以开发出很多东西，但一般来看，大多数人不会拿 C 或者只拿 C 来开发太大的东西，因为需要很深厚的功底和时间，以及合适的条件。如果你是小白并且想系统了解C语言，可以看下如果你想了解C语言还可以开发什么好玩的东西出来，推荐========赠人玫瑰，手留余香，不要忘记点赞、收藏、关注 一键三连，感恩有你~,哈哈哈哈哈  终于写出了一个像样的程序 使用easyx图形库  写了一个中国象棋  比贪吃蛇好玩多了 好久之前占的坑，今天把代码整上来让大伙喷几句，虽然写的很蠢，但是当时确实很开心。没有AI，一人一手，红先，不能悔棋，右键取消选中。,,,,,,,
面试被问到不懂的东西，是直接说不懂还是坚持狡辩一下？,,看情况。如果是技术面，我只谈自己懂的技术。如果是如果是老板面，没有人比我更懂技术。,当年我回国，去四大面试咨询组。面试我的是个英国合伙人。英国叔年纪不小了，但仍旧是个好奇宝宝。听说我之前在ASML做算法，就揪着不放，一直问一直问。问得我有点烦了，心想这玩意跟咨询有个毛关系啊？心里这么想着，回答得就有点漫不经心。合计着就把这次面试当练手吧，反正后面还排了好几个。不过英国叔久经沙场，估计看出我心不在焉，于是突然话锋一转，问我Did you hear of COSO？我来之前做了功课，还真了解了一下COSO，于是实话实说，Yes，I did.他吃了一惊，因为这玩意当时刚出来没多久，显然不是我一个做算法的应该听说过的。他不可置信地看着我，让我说说我的理解。我说，I just heard of it.这货听完一愣，接着开始捂着肚子笑，边笑边抱歉，说自己实在忍不住了。他这一笑把我给笑懵了，也没觉着有什么好笑啊？又一琢磨，哦，是不是他把I just heard of it，理解成了I have heard of it from you just now了？你别说，要是这么理解，还真挺好笑的，尤其在面试中。这么想着，我也笑了。我俩笑了一会儿才收住，但面试从此便朝着诡异的方向一路狂奔。英国叔说，这是他工作30年来，听过最好笑的笑话。接着又给我大体科普了一下我说刚才是我第二次听说COSO，可能会比第一次强点，但你要是现在让我说理解，我也只能给你编一个。反正事已至此，我也不把面试当回事，索性破罐子破摔了。英国叔听了又笑了，说行，那你就给我编一个吧。然后我就基于刚听到的信息开始编，毕竟框架有了，往里面增加点细节，并且都改成疑问句式就好了。编了一阵，我说就这些吧，实在编不下去了。英国叔居然在那鼓掌，说编得真不错，如果不是他参与制定了COSO，没准真信了。咱也不知道他葫芦里卖的什么药。面试出来，我就权当去讲了一场脱口秀，很快把这事给忘了，接着面试。过了一周吧，HR打来电话，说我被录取了。我当时一脸懵逼，因为在我的选项里，早就把这家排除在外了，根本没想起来。后来跟人家确认之后才想起来，这不就是我去说脱口秀那家嘛。但我的第一反应是，他们是不是搞错了？得到再次确认之后，我还是有点打退堂鼓，心想这也太儿戏了吧？于是就跟HR说，我手上有几个offer，要考虑考虑，其实就是想婉拒了。HR也没说啥，让我第二天给她答复。第二天我也没想起来这事，到了晚上又接到一个电话，又是那家，说的还是英文。聊了两句，我才发现，这不是英国叔嘛。总之他打电话的意思就是看好我，劝我接受offer，会重点培养我。我说是因为咨询需要“编”的能力吗？他说不是，他看好的恰恰是我的坦诚。这么一说，我就爱听了，于是当场答应，这事就这么定了。后来我在四大年年小黑屋拿高分，估计也少不了英国叔的助推。等到我自己创业，面试也学会了这招，会故意问一些明显超出对方认知范围的问题。而我想要得到的最佳答案就是，“我不知道”。其实英国叔当年并没把话说全，他看重的不光是我的坦诚，更是我的自信。因为只有当你足够强大时，才敢于承认自己的无知。,面试官：请先做个自我介绍吧。求职者：巴拉巴拉一大堆。面试官：请问你会造飞机吗？（求职者内心一万匹草泥马的奔驰，但是想到知乎的网友回答，于是硬扛。）求职者：有幸参与过x次x架飞机的清洁工作，包括飞机表皮杂质分离（拖地）、（面试官听不懂但还是要装作听懂的样子，毕竟人不能怂，这样才能PUA求职者。）面试官：所以，你没有独立造过一架飞机了？（求职者内心再次被惊讶，飞机还能一个人造？这面试官怕不是脑子瓦特了？）求职者：造飞机是一个大工程，通常是团队项目。如果公司有需要，我也是可以承担的。此前虽然并不是独立完成造飞机，但是参与的过程中，也丰富了我的见识，理论知识得到实践的提炼，让我具备了独立造飞机的能力。当然，造飞机是大工程，如果让我独立完成的话，效率肯定比不上团队合作的。（面试官感觉这货很牛的样子，但是又怀疑对方在出牛皮，于是秀出杀手锏）面试官：好的。我这边基本了解的差不多了。你先在这等下，我去喊我们的造飞机总监过来。求职者：好的。....等待了一会，一个戴着眼镜、秃顶的男子走了进来，姑且称呼对方为造飞机总监。造飞机总监：你好，请先做下自我介绍吧。求职者：巴拉巴拉一大堆。造飞机总监：请问飞机发动机启动后发出超过正常的巨大声音，可能是哪些问题？（求职者内心复现好几个问号，？？？，这货不会来真的吧，但是求职者牢记知乎网友的建议，死不认怂）求职者：如果只是单纯的巨大声音，可以考虑xxx手段（反正瞎扯的，对错全看天意）（造飞机总监回顾了一下刚刚百度的答案，似乎和求职者的回答完全不一样，但是求职者的勇气似乎也说明了他并非完全不知，会不会是百度的答案有问题？）造飞机总监：你在上家公司造飞机的过程中遇到了哪些困难，又是如何克服的？求职者：整体的造飞机过程还是比较流畅的，但是的确也会碰到一些极端情况。比如下雨天的时候，人造纳米玻璃抗氧化就需要特别小心（雨水路滑，易摔倒。）这个时候就需要特制装备了。这个虽然是我弄出来的，但是因为跟上家公司有保密协议，所以请原谅我不能透露。造飞机总监：理解理解。我这边基本没问题了。你有什么问题要问的吗？求职者：请问贵公司的造飞机团队有多少人？造飞机总监：你来了之后就有2个人了。还有什么问题吗？没有的话我需要跟老板商量一下。今天的面试到此为止，我们会在3个工作日给你回复的。求职者：好的。（起身，离开。造飞机总监浅送后返回。）另外一个会议室，面试官，造飞机总监正在跟老板汇报。老板：这几天的面试怎么样了？有可以入选的人员没？要知道，虽然拧螺丝不怎么需要技术含量，但是如果有个会造飞机的来拧螺丝的话，那么万一造飞机的不干了，他还能顶上。面试官：今天面试的还不错，有过造飞机的团队经验。虽然没有独立完成过，但是参与过。造飞机总监：虽然有些地方不够精通，但是培养培养还是可以用的。老板：行吧，你们都这么说，就他了。求职刚坐上回家的公交，手机来电话了。HR：你好，请问是x先生吗？这里是xxx造飞机公司。你刚刚的面试通过了。你看下你什么时候方便来公司办理入职手续？求职者：一周内吧。HR：好的，x先生，稍后会发offer到你的邮箱，请注意查收。来公司后直接打我手机，到时候我带你办理入职。求职者：好的，谢谢。（几天后，求职者没找到更好的工作，于是只能来这家造飞机公司。HR带领x先生认识了该公司造飞机团队的另外一个主力：造飞机队长。双方了解后，HR离开。）造飞机队长：咱们的工作还是比较闲的。你平时给我打下手拧下螺丝就行了。求职者：好嘞，我一定好好的拧螺丝！（吓宝宝一条，差点以为真的要造飞机了。）,完全不懂，就答：这个不了解，感谢您的问题，我下来学习一下。如果懂类似的知识点，就答：这个我不了解，但是好像，有个类似的知识……面试，其实是个非常考验情商的环节，只不过很多人忽略了这个。遇到自己非常懂的问题，尽量多说一些。很多人喜欢一句话就答复完问题，这样会迫使面试官为了保证面试时间，不得不提出更多的问题，被问的多了，难免被问住了。很多年前有一次面试，面试官问我这个问题的回答占用了面试官太多时间，也足够表现我对某个知识点的深入理解，之后面试官对别的问题问的就不是那么细致了，很容易就通过了。要尽量自己把握节奏，有些面试官见你答出一个问题，会粗暴的打断你的发挥，继续问下一个问题。面对这种面试机器人，不要慌，见缝插针，一定要在自己熟悉的领域，把自己的主动权抢过来。只要你在面试过程中，而如何可以让面试官不打断你，你就一定要把事情说的有趣，自己在家要多练。这一点不仅仅针对技术面试，一切面试都是这个道理。面试，并不是说你要答对所有问题，但是你一定要给面试官留下深刻印象。我曾经有几年时间，利用这个窍门，变成了不要以为技术面试拼的都是技术，每个技术人都有自己熟悉的领域，突出自己有些时候更看一点运气和情商……有些面试官不喜欢顾左右而言他的，这个就需要你把回答说的足够有趣，才能吸引面试官足够的兴趣。另外一个小窍门，就是不打无准备之仗，面试心仪的公司之前，最好去几个次一级的公司面试练手，面试，看的并不是绝对实力，技巧也起到很大作用。而技巧，可以通过多面试来锻炼，熟能生巧以后，你就是面霸。技术这玩意儿本身就是：无他，唯手熟尔，面试也可以这样来解决。,数十次面试经验：请用英语介绍下自己：用了英语介绍自己，面试没通过理由：我英语不好。说自己英语口语不好，直接拒绝用英语介绍自己，面试全部通过。,面试的时候，聊到具体的技术或者业务问题时，遇到不懂或者完全没接触过的东西，实在太正常不过了，每个领域都是非常宽泛且琐碎的，随便挑几个你完全不可能会的问题，简直不要太容易。我觉得，如果是在聊具体的业务技术问题时，提到了某个东西，然后你不懂，或者以前接触过但不是很熟，完全可以如实告知，然后有效的面试，就会继续去聊别的问题了。为什么面试时，遇到完全不会的问题很正常呢？因为面试是单方面的问问题。我们生活中，所有单方面的问问题，只要双方知识差距不是过于悬殊，都能挑出对方压根儿就回答不上来的问题。这事儿古代文人就经常玩，有的人熟读这本书，有的人熟读那本，然后就互相考对方自己熟的那本书里的各种细枝末节，最后当然是谁都回答不上来。那很可能，公司想要招你这个人，所以安排你来聊聊，但是问你问题，给你挑错的人，并不是那么想要你。这很正常，也许这个面试官自己早就安排好了自己人也来面试，所以才要在技术面时为难你一下。但也不排除，你简历过于美化，去应聘了一个完全不可能胜任的工作，然后面试官只是例行公事一样地问了你几个行业内应该众所周知的问题，你说你不知道，不清楚，不是很了解。这时候，面试官说，你怎么连这个都不知道？你如果再去狡辩说，行业领域大了去了，遇到几个不知道的问题很正常，就只会继续给自己扣分，如果你所在的行业，圈子比较小，而面试你的这几个人又比较有影响力的话，那你就很难在这个圈子混了。,你说我不懂，面试官得出一个结论：你是个诚实的废物。你垂死挣扎说了一通牛头不对马嘴，面试官：这人喜欢狡辩不诚实。你胡说八道粘点边，面试官：虽然很蠢，似乎还可以带一下。你不试试，直接完蛋。你试一下，有可能直接完蛋，有可能有一线机会。所以我建议你试试胡说八道一下。,我来说说这个问题。有一次我参加HR举办的招聘会。HR首先会提问应聘者若干问题，并查看文凭资料。完成后就到我这里，来询问应聘者的技术知识技能。某次当一位年轻人轮到我面前时，我询问他有关供配电的基础知识，发现他回答得莫名其妙。后来我问他什么叫做想起我自己应聘的事了。我在离开大国企之前，曾经到过一家台资企业应聘电气工程师职务，应聘时先让我们应聘人员填表，然后做几道题。题中有一道有关运算放大器的图和提问，这道题是错的，我没做，并且在答题处指出错误之所在。我想，连应聘试卷都会出错，这家公司肯定不怎样，我不能在这家公司工作。我把试卷交给工作人员，略加说明后离去。晚间这家公司的总工来电话，要求我直接入职。我告诉他我没兴趣，之后就把电话挂掉了。再之后，这家公司三番五次派人来要求我入职，都被我拒绝。事后想想，好在没去，后来入职外企多好，比这家烂企业好多了。,首先我们要搞清楚为什么会问到不懂的东西，分情况去应对。这种挺常见的，遇到这种问题不要慌，很多时候工作中没有绝对对错的答案，条条思路通罗马，谁不是一边百度一边把活干出来的。如果直接说“我没有经验，我不懂。”那会让面试官失望了，面试官会认为你是一个知难而退的人。我遇到好多个候选人，经常被最后1-2个很难的问题打击到认为自己面试不通过了，接到我的电话通知面试通过时，还挺意外的。这种情况再正常不过了，这个世界上没有100%匹配完美的候选人。面试官只是一层一层难度问下去，探一探你的经验深度，从而判断你的水平。回答思路跟第一种情况一样，不要狡辩，不懂还要装懂，会让面试官觉得你不踏实。更重要是你的潜力，经验欠缺一些但值得培养，学习能力快的情况下，公司也会录取的。有时候业务部门也没搞清楚自己想要什么经验的人，招聘简章（JD）可能是HR一字不漏复制粘贴其他公司的，写的工作方向和面试的工作方向有偏差，所需的技术也不一样。这种恐怕在IT岗位挺常见的，常听到IT朋友吐槽面试官要的技术方向和他们不一样。遇到这种情况，要意识到可能岗位与自己发展方向不符，应该反问清楚他们工作方向是什么，需要什么技术，要对齐彼此需求。我见过候选人被面试官揪着几个看起来很完美的数据一直质疑一直追问，对方在努力去狡辩，把问题解释得似乎合理，下一个问题又暴露出逻辑矛盾，不能自圆其说。面试官也不是那么好忽悠的。这种情况会出现在看起来很年轻，提问比你更紧张的面试官身上。我第一次做面试官就是这样了（尴尬脸），对岗位不是很懂，也没把握好HR该问什么问题，想到什么问什么，问一些我自己也没有答案的问题。我和候选人，一个尬问，一个尬聊。后来我成为那个坐在新手面试官隔壁的面试教练，看着新手面试官也犯着同样的问题，会突然问了一个很傻的问题，候选人懵逼并强行回答，我负责缓和一下尴尬气氛。遇到这种情况，更不用担心了，畅所欲言就好了，你讲得越多，面试官也许觉得你很厉害（因为他也不懂）。,我记得很多年前，有一次公司要招一个PLC工程师。当时面试官是HR和用人部门经理。经理技术出身，做事情特别认真，是公司的金牌技术培训老师。来了个候选人，学校不错，专业也对口。相关经验三年。人选挺沉稳，也很有礼貌。点头致意后HR开始提问，先自我介绍。一切进展顺利， HR偷偷看了一眼经理，经理低着头看人选简历，看不出是否满意。HR继续问了人选上一份三年的相关工作。人选有条有理，不慌不忙地回复着。HR又偷偷看了一眼经理，经理招起头，饶有兴致听着。HR心里高兴。这个职位招很长时间了，经理就是不满意。今天这个，应该可以完成招聘任务了。这时，经理开了口。“你能不能告诉我西门子PLC和人选愣了一下。本来放在桌上的双手拧到了一起。HR心里一惊，充满鼓励看向人选，恨不得她脸上就写了答案。很快，人选恢复了正常，平静看向经理，说“我工作三年，只接触过西门子的PLC，施耐德的我没有用过。 ”“不知您能否给我一些提示，我试着答一下。”经理兴奋了起来，培训师角色上线了。他把刚才在看的人选的简历翻了个面，在背面画了个图，并给出了一些提示。人选很认真在听，为了把图看得更清楚，甚至站了起来，弯腰看向经理手里的自己简历的背面。“。。。。。。”人选边思索边回答。（技术内容早忘了）经理露着既有鼓励，也有期待的眼神，认真听着。人选答完了，说”我也不知道自己回答得对不对，还请您教教我。“经理的培训师热情被彻底点燃了。往人选方向倾着身体，边指着图边给人选回答着。十分钟，讲完了。人选充满崇拜说”原来是这样的，您真厉害。感谢您。我今天太有收获了。“HR的心里五味杂陈。又望向经理。经理一副心满意足的样子。后来，这个人选被录取了。经理手把手亲自带。,从售后技术支持转行做软件开发时，只学了 7 天 C 语言，熟悉了语法，就开始投递简历，参加面试。那时什么都不懂，经常被问住。面试官问，“我连“野指针”、“悬空指针”的名字都没听过，只好抱歉地说，“不知道。我下来学一下。”面试官问，“不使用递归如何实现见鬼，我都没听说过归并排序，只好抱歉地说，“还没学到。我下来学一下。”面试官，“怎么在AVL树中实现删除？”啊，我不知道AVL树，只好抱歉地说，“不知道。我下来学一下。”我有将近两个月的时间，每天都被问到不懂的东西，每天我都要红着脸低着头很惭愧地说“不知道”，我都能感觉到面试官的摇头和语气变化。嗯，真的是挺难堪的。好在我做了一件事：这件事情的效果，在两个月后显现出来——常见的C语言笔试题和面试题，我都能回答出来了，技术面试的一面基本都能通过。但接着在二面，就又遇到了非常尴尬的事情。二面的时候，面试官经常会问，“做过xxx相关的项目吗？”我从零开始学的编程，一点项目经验都没有，只好说，“没有。我没做过软件项目。”这么一说，多数面试官就礼貌地问一会儿，就让我回去等消息了。但我不能说我做过，因为当时我是真的没有做过软件项目，没有任何经验。印象最深的一次，是面试一家做户外电子屏的公司，笔试、一面都过了，二面是跑到公司的工厂，跟一位负责人聊。对方只问了我不到五分钟，就因为我没有项目经验，让我离开了。还说不耽误彼此时间。唉，我为了那个面试，公交车都坐了一个多小时，找地方也花了半个小时，结果就不到五分钟完事，还被当面讥讽。我离开那个地方的时候，觉得自己真难。就算如此，在后续的求职过程中，我被问到不懂的东西，也还是直接说不懂，不胡乱说，不转移话题。到第四个月的时候，遇到一位肯通过我过去的技术支持工作评估我个人潜力的面试官，问了我许多程控交换机和电话故障的问题，我都能很好的应对，他觉得我是可以培养的，给了我机会，我顺利得到了第一份软件开发工作。在四个月的艰难求职中，这样随着求职过程的推进，我也在快速成长，也越来越能应对各种面试问题，获得进一步的机会。因此，这些回答你可能感兴趣：较远时期的精华，也推荐下：如果你有Offer选择、转行、副业等相关问题需要深度咨询，可以戳下面卡片找我咨询。,真诚一点吧，打不开就说打不开,首先你直接回答不懂，是无法通过面试的。企业招聘的本质就是采购知识、技能和经验，如果你不具备这些东西，企业就没有必要去招聘你。面试官在面试的时候，最怕遇到两种人：第一种人，是一点不懂，一点儿都不懂。第二种人，是两点不懂，这也不懂，那也不懂。其次也不要不懂装懂，因为面试官就会继续深入追问。然后你支支吾吾，答不出来，也会被淘汰掉。而且这种情况比第一种更糟糕，因为从面试官的视角来看，第一种人起码还真诚一点。也有人说，就回答不知道，然后面试结束后回家学。不会的次数多了，学会的东西也就多了，然后再面试，就无往不利。这种操作好不好，当然好，从长期看有很强的执行性。但是，我不得不说，只适合大城市，因为大城市的面试机会比较多，可以不断在面试中试错，然而，在很多三四线城市求职，一个月就那个位数的几次面试机会。这时候，再回答我不知道，我回去学，那么，等到学会，黄花菜都凉了。所以，面试时一套行之有效的救场措施，还是有必要的。声明：下面的方法仅针对你对某个知识点有印象，不太懂的情况，不适合你第一次听到这个概念的情况。具体怎么做呢：不要小看重复的力量，很多营销人员都喜欢复述客户的话，这样可以拉近双方的距离，增加好感，然后面试官就会偏袒你。不要以为我骗你，一试便知。讲关联其实是告诉面试官你获取知识的渠道，给面试官一个你可以轻松获取这些知识的心理暗示。这是告诉面试官你并不是一无所知，只是不精通罢了。这样可以让面试官知道你的下限没有他想象的那么低。如果面试官没有打断你，你基本上就稳了。面对段位比你高的人，你唯一能做的就是真诚，但真诚不等于实诚，更不等于自我贬低，真诚是把你100%的水平拿出来，去证明你能胜任这个职位。最后，这是我近期的几个相关回答，有兴趣可以看一下：,25年秋招即将进入白热化，起步早的大型央国企已经进入面试环节。大家在校招海投的时候真的很难做到对每家企业都有了解，经常是收到了面试通知才发现自己对这家企业的了解仅限招聘公告上那一段背景介绍。想搜集点有含金量的信息，比如经营业绩、发展愿景、主流技术/产品之类的就要花费大量时间，真的让人头秃。豆包列举了金融创新和服务、业务经营和发展策略、风控、金融科技等等四方面的优势，不像有些比较水的搜索引擎会堆砌一些过时信息，豆包提供的内容不仅新、准，还突显了招行本身的特质，不需要自己再去翻各种研究报告、总结提炼，拿来就能用，真的非常省时省力。有了这些基础信息，再可以结合自己的专业加入一些鲜活的例子和个人理解，遇到类似的问题就能答得非常出彩啦。但是豆包可以借助大数据完美解决这个问题。而且随查随问，下载的话直接电脑浏览器上搜索豆包下载电脑版客户端或直接访问豆包网页版就可以使用啦，非常简单又方便！ 比如我想应聘某top券商的风险管理部，把岗位发给豆包，豆包能迅速获取岗位要求，并且帮你围绕这些要求做好基础知识的复习：其中，关于风控的基本理论和方法就列举了三大领域和风控模型，可以说是对专业知识的完美提炼，而且经历过几次面试就会发现这些最经典的就是最容易被问到的。只要把经典理论和模型弄清楚搞透彻，有些周边问题即使不完全了解也能答个大差不差。很多同学在学校没有模拟面试的机会，网上搜搜面经就直接上战场，这样真的无异于裸奔…没有条件就自己创造条件。把你的简历和应聘岗位发给豆包，让豆包出一套模拟面试题给你。面试过几次的同学就能发现豆包提的问题真的很有水准，比如专业知识类的第二、第三题，不仅有对基础知识的覆盖，还有对新兴技术的关注，以及发散思维的考察。如果是在面试中第一次碰到上面的问题，现场整理思路、组织语言既耗时又容易增加紧张情绪，真的很容易一下子懵住。但如果你在面试之前就自己模拟过，遇到不会答的问题请豆包帮你提示下思路，再结合自己的经历展开描述一下，效果就会大大提升，现场应对起来也会更加从容不迫。比如，我对上面工作经验类的第二道题“你的团队正在评估一款新的金融产品风险，需要从哪些方面入手开展工作？需要关注哪些风险点？”没有思路，可以直接问豆包，豆包会帮你从几类风险的角度给出回答：把你的简历丢给豆包，让它结合岗位所需的技能有针对性的修改简历，扬长避短方能脱颖而出。比如，我输入了一段金融行业风控岗的实习经历，请豆包帮我针对应聘公司和岗位美化这段经历，修改以后的实习描述，更能突出风险管理相关工作的专业度、严谨性以及应聘岗位的关联性。祝大家秋招顺利，得偿所愿~,你都用上『狡辩』了，应该知道『狡辩』是一个贬义词吧，当然，互联网时代，很多以前的贬义词现在也当褒义词使，我们姑且捏着鼻子把『狡辩』理解成『硬撑』吧。那么，别硬撑，也别直接说自己不懂，走中间路线。还是拿故事说话吧——面试官：你能不能和我解释一下什么叫做XXXX模型？你：哦，XXXX模型啊，我听说过（也就是不了解），就是一种模型（废话），这种模型的方法其实还很复杂（没有简单的东西），我们一般用的很少（就是说我不了解），但是，就和我之前说的那个什么一样，我觉得还是很有价值的......面试官：你之前真的接触过XXXX模型吗？你：听说过，只是实际工作中没用过。面试官：好吧，你可以直接说。(以上表现0分，拖延时间的战术在面试中绝对是0分）面试官：你能不能和我解释一下什么叫做XXXX模型？你：抱歉，我对XXXX模型不了解。面试官：好吧，我们来说别的。(以上表现60分，坦诚，抓紧时间让面试官问其他问题，问其他你懂的问题）面试官：你能不能和我解释一下什么叫做XXXX模型？你：这个XXXX模型是关于趋势预测的吗？面试官：不是，是关于分类的。你：抱歉，我对XXXX模型不是很了解，哈，我也不敢乱说，对了，我将来的工作会和分类相关吗？我对一趋势预测了解多一些，我们可以探讨一下这方面的问题。面试官：好啊，那我们来看下一题。(以上表现80分，坦诚，在承认自己不懂的同时，也讲清楚自己的特长是什么，引导面试的方向）顺便说以下，知乎上到处都是『是XXXX还是XXXX』问题，别以为答案真的只能是二选一，做一个不被二极管思维套路的知乎er，是一个知乎er的基本素养。,我是一个面试过不下200号人的面试官，特别想告诉大家一个真相：明知你不懂，那为啥他还要问呢 ？这就是某种程度的压力测试，想看看你被“知识型”刁难时会有什么反应，会不会烦躁紧张甚至生气。对于被问及职位无关或者职位超纲的问题，你是否感到被冒犯，从而出言不逊。毕竟工作中常常面对不懂的东西：客户提问题，上级提问题，同事提问题，都有可能进入你的知识空白区。你能否心平气和地回应，很重要。我见过很多放不下面子的职场人，会为这点小事迁怒对方，把小事化大，实在不值当。在著名战略咨询公司麦肯锡，面试官会问这样的问题：“美国总共有多少个加油站？”这个问题不是想了解面试者对数据记得多么清楚，或者答案猜得多么接近。更重要的是要了解面试者，在推理过程是否有自己的思考和方法论。比如说，美国的总人口是多少，人均拥有汽车多少辆，每辆汽车平均多长时间加油等等，然后大致推断出，美国大概有多少个加油站。你当然可以有不懂的东西，但这并不妨碍你对这个东西有自己的思考。为人处世，不是非黑即白的。“ 直接说不懂 ”暴露了你放弃与时俱进，终身学习的心态，“ 坚持狡辩 ”则体现了你不愿正视弱点并做出修正的心态。在职场，这两者都不可取。其实只要你换一个话术，换一种态度，面试官印象会完全不一样。这样，一个正视自己不足，愿意接纳新事物的职场人形象就立起来了。至于坚持狡辩，你可以继续假装努力，但面试官不会陪你演戏 —— 也许他一眼就能看出你在狡辩，只是出于礼貌不拆穿而已。,之前到一家做财经类目的公司，面试运营岗位。去之前我就知道，自己这次面试大概率是无疾而终，因为我完全没有财经领域的工作经验，这点在简历的工作经验上也可以看到。当然，我本来就是对这一块感兴趣，即便知道不匹配，也投了。后来收到对方邀约面试的通知我也很诧异，不过想着对方毕竟也是家几百人的公司，既然肯给我个面试的机会，那肯定得去试试看。面试的过程其实非常顺利，涉及到一些运营相关的专业知识也都对答如流。其中对方也有问：“我看到你的简历上没有财经相关经验，方便问一下为什么你会选择投简历到我们这吗？”我的回答是：“一直以来都对这块感兴趣，平时偶尔也会看些机构的分析和推文，如果有机会，想要踏入这个领域”在我看来，当然，最终这场面试还是以失败告终。至于原因，其实也和我一开始想的大差不差，对方想招的是一个快速上手的，但我在这块仅停留在兴趣层面，花费时间重新培养不划算。不过我也没觉得有什么好遗憾的，毕竟来这家面试的目的本身就是抱着尝试。回过头来看一下“面试被提问，要说不懂，还是坚持狡辩”这问题，我觉得其实有什么说什么行了，态度决定一切。不过这里也要给就求职者提个醒。,面试者是资深中医我有中医基础。面试者是普通hr我就是资深中医。,我经常面试程序员，喜欢顺着简历上的项目经历往下挖。你简历上有项目经历显示用到过并发编程，我就会问你怎么保障数据同步。你回答了用了某个锁，我就问这个锁具体怎么用的。你回答了怎么用，我就问使用这个锁之后，对性能有哪些影响。你回答了性能方面的影响，我就接着问，当时为什么选择了这种同步机制而没有选择那种同步机制。你回答了为什么选择这种同步机制，我就问这种机制的原理。你回答了原理，我就问如果让你自己实现一种同步机制，你会怎么做。……这一路问下来，好多程序员就会卡住，然后不同的表现就来了。有的人开始胡编乱造，没做过说做过，没有性能数据硬说一些明显离谱的数据。有的人会顾左右而言他，说其实这种机制怎么怎么……但明显说不上来原理是什么。有的人会挑衅地反问，“你说这里面是什么原理？”有的人就比较诚实，到哪里不会，就说不会，后面会学习一下，工作用到了会深入了解。相对而言，我原来去面试的时候，也是这种态度，不懂就是不懂，就直接说不知道，不瞎说。我觉得这算是我的底线吧。前两年我面试过许多IT培训班出来的孩子，写的项目经历都一样一样的，一问到细节，就蒙圈了，就开始东拉西扯。这种情况，面试结束我就直接打X，给人事说不行。最后，我还是想说：,通常越是懂得多的人越容易接受有些事情他们不懂，越能坦诚地告诉别人他们具体什么懂什么不懂。反之亦然，越是懂得少的人越想要表现出自己懂得多。这时候你需要猜，到底面试官是根据你回答的内容进行判断，还是根据你回答时呈现出来的心理状态进行判断。这事情没有标准答案。有时候你模仿一下大佬说话的神态，语速放慢一点，尽量少说话但每一句话都抓住重点，效果可能比你不着边际地想到什么说什么要好很多。
一行代码可以做什么？,,,,,,,,,,,,,,,,,,,,,
大一一个学期学多少编程算正常?,计科的学生，大一上学期快结束了，只会用c\c++做做数学题，在oj上写写题   遍一个简单的飞机大战 贪吃蛇 水管鸟(都是字符)     现在在参加学校acm的选拔。    到现在指针还没有搞懂。 学校的上课进度太慢了，感觉就是漫无目的自己学。大佬们能不能给个学习顺序。 做界面硬件相关什么的，什么都不懂，不知道从哪里开始提高自己。,1. 去2. 继续在中国大学MOOC看浙大的注意看视频的同时必须把编程题全做完。如果想玩竞赛，推荐----------时光分割线-----------------------在评论里看到了奇怪的回复……,推荐一个超级好玩的刷题网站：可以使用任何编程语言，学习编程技巧和常用算法。题的难度分级。下面就是练习题目录的Easy难度和Medium难度的部分习题，是不是看封面就非常像玩（刷）一下呢？各个题目还用tag的形式标出了用到的知识点，像是循环、列表、图论等。提供个人等级和排名提升系统吼，反正我已经完全停不下来了哈哈哈。----------------------（12.19）我火了哈哈，点赞破百了，加个视频吧---------------------一个演示进入一个题之后的大致使用过程的视频（这个题本质是将二分查找扩展到二维问题，也就是在横向和纵向同时进行可以看到，界面的右下角是测试用例，左上角是可视化的测试过程，而左下是测试时候的控制台信息。测试是可以暂停，调速，和单步执行的，功能非常强大。那如果遇到无从下手的题要怎么办呢？没关系，还可以看看别人的讨论和解法：而这个网站除了刷题功能之外，还会有像是leetcode一样的周赛机制，而且还创新性地加入了15分钟“在线匹配赛”机制，真的是紧张又刺激（匹配赛的难度随着你的等级而增加，刚开始非常简单，所以不用怕的~）。最后感恩各位亲点赞，有兴趣可以再关注一下本人的专栏吼，祝大家刷题愉快，武运昌隆~------------------------2020.3.16爆裂热乎大更新-------------------------------------------更新了一个该网站上有趣的控制类题目的原创解析（内含实战视频）：当然控制类题目是网站题库中的少数，题库更多的还是传统的算法题，另外还有一些优化类题目。所以如果你想参加------2020.9.27补充（点赞近万了，希望大家能发现我其实是个视觉编程艺术创作者+硬核科普作者，嘻嘻）-----------------------------2020.1.6以及2020.2.2更新-----------------------------------------我自己真正入门Python编程其实是从去年夏天学习《Python基础教程（Apress出版社）》开始的。我读书的方法是在电子版的正文中直接进行“高亮标记”，如果感觉一个知识点重要，而且预料到自己以后还会对这个问题产生疑问的话，就在目录的标签上做一下标记。现在这本书已经是我的当然但是，其实高校学生中其实还是很多是不以刷题，或者成为程序员为自己的目标的。这些同学的最后放些自己精读过的编程书，这些书都是超级符合人的认知规律的，前两本我都看了好几遍了，真是越看越好看，妙哉妙哉。（Python算法教程翻译得挺差，但书内容绝对无敌。有条件建议找个英文版对照阅读，或者等哪天我牛B了给你们重新翻译一版哈哈哈）：C语言入门： ,漫无目的是真的难受了。我的建议很简单。选择C ++或Java。然后学习JavaScript。越来越多的基于Web的应用程序需要牛逼的JavaScript技能。然后根据要执行的工作类型选择PHP，Swift或Python。一旦您很好地了解了这三个集合中的每一个，就可以相对轻松地选择所需的任何其他语言或框架。大一打基础吧。不废话，直接贴出每种语言的顺序，也贴出一些资源。大学四年能学这么多就已经很牛逼了。c和java后面贴出更详细的版本，毕竟这两个是最重要的。1、2、java3、python4、前端5、C/C++详细图解资源  对应1、2、3、4知识点。  对应1、2、3、7知识点  对应4、5、6知识点   对应1-9知识点 对应1、2知识点 对应3知识点  对应上面所有。 对应所有。最后的实战项目网上一搜一大把下面开始解析java以前写过，直接贴链接了。python也是连接，反正关注收藏这一个视频就行了。码字不易，求好心三连啊。,理论学习篇：刷完北大计算机系第一课计算概论A ：计算概论与程序设计基础 刷完北大NOI金牌小哥哥的算法基础&提高课看完《算法竞赛进阶指南》：该书包括国内大公司笔试以及noip、acm、蓝桥杯等比赛涉及的绝大部分知识点，较难。实战篇：通关acwing-Saber的全部题目：在排行榜留下你的名字！AC Saber近期改版啦，双人pk模式已上线，大家快来挑战鸭！刷北大的oj，虽然题目有点老，胜在算法题目经典，刷的人也多，比较适合大一同学。刷完这些，指针都是小问题啦~~,我以前也有过类似经历，第一学期C语言耽误了好几节课，再上课就发现完全听不懂了，也就那一天那一节C语言课的那一刻恍然发现，上课成了看天书，同时心里莫名的慌，但又无济于事。此时，如果没有前辈或过来人及时指点，大多数人、大概率都会就此迷失方向，甚至自暴自弃。其实，类似的经历，包括玩游戏耽误课程，然后自弃、逐渐不及格、连续不及格，最后导致被退学的例子，这些年在大学里都不缺。以下，我作为“侥幸”走出来的“过来人”，给3点个人建议。1、大一迷失的原因，我相信很多人和我一样，全国的老师在高二高三时，几乎都会灌输这样一个理念：“现在是关键时刻，千万千万要忍住别贪玩，努力拼这一次，等高考完了上了大学，就没人管你了，想怎么玩就这么玩，你就真正自由了”。实际情况是，假如大学真的自我放纵，自由自在的话，那么之前多少年的努力都可能会化为乌有。大学恰恰相反，更不能让自己贪图享受，要主动规划、把控自己的在校时间和计划，逐步学会自控，并自我提升，像一块真正的海绵一样，疯狂汲取更多的知识，为进入社会大职场做最后的准备。这些准备包括，掌握适合自己的分析问题、解决问题、总结问题和经验的体系化能力，养成一种在困难面前的天然自信，这样才可能解决后面的挑战。在大学时的老师、班主任，真实情况是，只是你学习路上的“辅导员”，他们精力有限，只会对有潜质、表现聪慧、有进取心的同学投入真正的精力，如果你真的表现出不上进、贪图享受，即便有的老师愿意和你打成一片，做成朋友，你也不应该需要这样的人脉和生活。如果你没有表现出自己是一块可雕琢的好玉，那他们也不会刻意去引导你、提升你，甚至可能对你不闻不问。以上，才是大学的真实情况。所以，果真，我到了大学，确实没人管教，可以随心所欲把控自己的时间，宿友们、同学们也有着各种各样的“课后活动”，其中可能就包括网络游戏。我就被拉着一起玩，周末为了在游戏里等级排第一，趁他们睡觉时玩通宵，结果确实游戏等级上去了，但体力和精力却透支了，上课时注意力难以集中，学业自然下来了。上课听不懂，这样的状态持续到第一学期的寒假，对我来说，这可能是在掉队后，唯一能够弥补自己的机会了，同时我也明白，一旦在一个学期掉队，且没有补上来，第二个学期将加速掉队，后续想补回来，得付出超额的精力投入。那一年大一上学期结束后，寒假期间因为当时爸爸在外地，没回老家，所以我们一家人也去了外地过年，现在想想庆幸这样一个机会，不然如果是回到老家过年，整个寒假很可能都在和同学、朋友聚餐、娱乐，可能就很难挤出一段时间静心去恶补了。那时，身在外地，除了家人就没有了其他认识的朋友了，所以一开始时，可以说整个白天都是非常无聊的，当时无意间看见某子院校的官网底部写着“技术支持：某某某”，这个人就是学长，我觉得名字在这个位置显示出来，很牛逼的样子，内心也很羡慕，然后辗转找到了他的联系方式，短信问他，我能不能加入你一起？我应该学什么？学长回复说，让我先学Jsp，我就去附件书店买了本JSP的入门书。一开始，发现很难学进去，毕竟没有任何基础，就忽然想着，要不先把上学期的C语言课程补回来吧，因为自己有笔记本电脑，就按照课本上（c语言程序设计，十多天时间，每天从早到晚上十点十一点，除了吃饭基本都在房间里就着笔记本电脑学习，终于学完了《但那期间确实很辛苦，从早到晚完全是自发学习、自发理解，感觉比高考的自觉性和渴望度高多了，因为这时是为自己的爱好学习。学会了C语言，我又继续买了本JAVA的书，Java只是学完了SDK的基础入门，包括文件流操作，基本的多线程，所有例子全部敲一遍，再默写出来，但也花了十来天，毕竟体系确实庞大，只不过由于基本具备了C的基础所以Java理解很快。后面又网上下载了本JavaScript的入门电子宝典，有了C语言和Java的基础，JavaScript就更快了，只花了大概3-4天就把入门的电子宝典和基础的代码例子都敲了个遍，也算是搞定了。所以，那个寒假就把这三门语言的“入门知识”全吃了，尤其是C语言，基本功基本吃透了，后来回到学校，状态就焕然一新了，可谓受益匪浅。首先回到学校，就碰巧开始上新的Java课，因为有了寒假的基础，记忆也都还在，上课时老师布置的问题在我看来就成了入门级简单题，很多同学都学的吃力，也有同学因为大一落下课程，几乎看不懂。这样的话，我在课堂上的优势就出来了，经常主动回答问题，相对轻松的解题，也经常被老师点名去回答别人回答不了的问题，或者在黑板上写下代码答案。这个现象，也逐步扩散到了后来的“数据库原理”、“计算机系统”等课程。老师开始更多的关注到你，也乐意给予鼓励和技术细节的引导，很多时候往往是别人不会答的编程问题时，最后让你去兜个底，你也会偷偷和“个别优秀学生”较劲。所以，这样一段时间下来，学习上就越来越顺了，加上老师和班主任鼓励，同学认可，爱玩的同学也越来越少叫你一起“打发时间”了，加上自己也有欲望和动力想学更多，经常会进入疯狂的汲取状态，也越来越自信。当然了，游戏其实也没完全丢掉，周末偶尔也会放松放松，但一定是玩完了就主动删掉，我虽然自控强，但偶尔也会随性，所以有时候达到学习目的了，也会在某个周五周六晚上，玩几把，甚至会在五一节国庆节这样的大节日，玩个通宵过次大瘾，但天亮了依然会毫不犹豫的删掉游戏和安装文件，过过瘾就挺满足了。以至于，后来节假日有同学找我玩游戏（对战类），基本都会自带U盘/硬盘过来给我拷贝，否则我重新下载也需要花很长时间，玩完了我还会继续删掉，包括安装包。到了这个阶段，基本是已经逐步有了自知之明，懂得什么该做、什么不该做，理解到，玩也只是放纵一把过把瘾，人只有在顺风期的时候，才会对自己有更清醒的认知，也才会有着对更加美好方向的向往。现在回头看，如果当时大一只是简单看懂，只是学会本学期的C语言，或者毕业时只掌握了大学期间安排的基础课程，其实也只是满足了大学时期对学生的基本能力要求，离社会职场对该领域“优秀学生”的期望还有很大差距。如果你的经历只是完成了基本课程的学习，那么毕业后的起跑线依然和几十万、上百万的应届生在一起，并没有什么突出的优势和竞争力。如果你想渴望在将来能进入知名IT企业工作，那么在大一的刚刚开始时，就一定要尽早明确一个专研的领域方向。当然了，Java依然还是多年的主流选择，以Python为代表的AI因为人工智能的火热看起来目前也不错，但入门基础低，前端技术也朝着越来越精细化、纯粹的方向发展，而.Net因为去微软化导致岗位数量一定会越来越少，php也很难再翻身成为一个流行语言，C++入门容易但想精通需要5~7年以上的长期沉淀，而且国内的就业机会也低于国外，相对更偏向技术底层平台。以上，这里并不想给选型的建议，只是简单聊聊个人看法，不建议选冷门语言，哪怕有名人或机构强力吹捧的未来，也不要选看起来前景很好，但并非当下的热门语言，你并没有这个精力和资本去博它的未来。大学生往往缺乏对这个行业的深刻理解，所以判断看走眼的概率肯定更高些，但选热门一些的语言，意味着岗位的数量相对多，对于火了一段时间、且大厂都在用的，其实刚刚好，所以最重要的是尽量咨询请教那些优秀的、牛逼的、已毕业的专业对口的学长、前辈，比如在一线大厂或知名IT企业工作的前辈，他们对学弟学妹的建议，往往是无私的、靠谱的，尽量找已经走上中高层管理层的学者或前辈。我的建议是，主动上一线大厂/知名IT企业的社招官网，比如京东、阿里、美团等，或者新兴独角兽的IT公司，以SaaS类为主，看看他们的社招招聘信息，而不是去找校园招聘。看看他们对于1~3年工作经验的研发岗位，其职位要求是怎样的能力？岗位职责和技能清单列表中，可能会有很多英文词汇你都看不懂，没关系，一开始大概率看不懂太正常了，这些单词实际是框架、工具、组件、技术栈等词汇的名称，我们可以一个一个百度去搜，一个一个去找对应的视频或书本教程跟着学（也可以在线的知名培训网站、B站等），买书的话感觉效率和动力更高一些（花了钱的还是不一样的，尤其是书带给人的即时性、既视感体验），但书本相对更枯燥，坚持学习一二三天的人很多，但能坚持7天、10天、半个月的就很少了，如果没有自信看书，或想省钱的话，买本电子书也可以。买书时，一定要看最后编写日期或版本，毕竟新的SDK和语言版本迭代较快，新框架或技术理念几乎每个月都在变化，最好是学最新的知识，但也没必要学最新的、超前的，选最近的稳定大版本即可。这里再次提醒，要重视等你从大一开始，就按照以上方式，提前学完大一到大二所有编程语言类的基础课程，重点不要放在操作系统、计算机网络等课程上，但可以学好基础的SQL语法。从大二开始，一方面完成其他辅助的课程学习，一方面重点投入到按社招的要求，准备大厂所需的我在某大厂，去过西安、武汉等地校招了数次，发现985、211类学生对大学的基础课程知识，其实理解都相对扎实， 基本知识的评分很容易达到80分以上，并且人数相当多，他们擅长计算机类的应试题考试，要想从中脱颖而出，光靠大学的基础知识体系是很难突围的。所以，在应试考试表现优良的基础上，如果对某些基础知识（编程语言、数据结构）有深入到原理级别的了解，比如Java，涵盖到集合类（梳理知识树）、多线程（线池池）、数据库（SQL语法、MySQL原理）等，甚至参与过性能调优，就相当于向面试官展示出了极强的学习能力和发展潜力，再加上可比肩1年以上社招水准的技术视野和项目实践经历（对框架确实做到相对熟练的应用），也就有了超出普通校招生的足够优势，基本就能给到4.5~5星的较高校招评分了（special offer）。不付出比他人更努力的代价，是不可能做到脱颖而出的，最好的状态是顺势而为，跟着学习欲望的感觉走，不要让它轻易中断，人一旦进入状态，身边的人都会给予顺势的肯定和支持，反之，一旦打断，就可能会回归到生活的琐事中去。以上，按这样的话，到毕业时你的能力基本已经达到或超过社招1年以上的水平，何况是去参加校招呢？这时你的自信应该是油然而生、发自内心的，面试官只需要通过几个技术问题就能很快感受到你内心澎湃的知识能量，那时的你，有着超出同龄人的进阶沉淀，也有着比同龄人对大厂职位更精准的理解（通过满足他们1~3年社招岗位的基础要求和部分实践），因为自信了，所以也有着超出同龄人对更高挑战的渴望和坚定。如果最后录取的人不是你，请从自身上找原因，否则至少应该是一堆好企业围着你给offer。,我觉得在校不应该局限于学校的课程进度，有时候我们可以主动在网络上进行学习，现在是互联网时代，你想要什么，基本都能在网络上搜索到！B 站就是一个学习的网站，很多人在 B 站上大学、考研、学编程，但 B 站的视频资源那更是五花八门，要从里面选择合适学习视频不是那么容易，而且观看人数多，并不意味着是好的。我周末从 B 站 搜集了些关于学习计算机的视频了，也跟身边的朋友交流一番，特此筛选了下面这些课程的视频，分享给大家。《B 站视频链接：大学学习计算机网络配套的教材是B 站视频链接：在工作中，分析网络数据的时候，必然离不开 Wireshark 工具，如果想学习 Wireshark 抓包的朋友，可以快速看看这个视频，当你有一定的B 站视频链接：站关于操作系统课程资源很多，我在里面也看了不同老师讲的课程，觉得比较好的入门级课程是《B 站视频链接：清华大学的操作系统视频课讲的比较精炼，涉及到的内容没有那么细，《B 站视频链接：对于非科班出身的朋友，想快速学习计算机组成原理，推荐这个视频，因为这个视频精炼总结出了跟程序员有关的B 站视频链接：如果想系统学习计算机组成原理，可以看哈工大这门计算机原理课，依据的教材正是大学配套的书。B 站视频链接：无意间在 B 站发现一个学习 SQL 很牛逼的视频，主讲人是外国的工程师，这门课程适合初学者和进阶，这位工程师全程以「实战」的方式来授课，案例经典，课程真的通熟易懂，很简练。B 站视频链接：如果你想学习 MySQL 底层原理，这个视频是个不错的选择。B 站视频链接：学习 Redis 的同学，可以看看这个视频，每一个视频都很详细了说明了对应的知识点，而且不仅只是说了基础应用，还涉及了底层原理和互联网场景面试的知识点。B 站视频链接：强烈推荐浙江大学的B 站视频链接：这个视频主要是左神讲解国内互联网大厂的高频面试题，是一个突击的好资源。B 站视频链接：学习 C++ 直接跟着侯捷老师一系列视频学下去就对了，相信很多人都是看侯捷老师视频长大的。[侯捷] C++ 面向对象高级编程：[[侯捷] C++ 内存管理：[侯捷] C++ STL 源码分析：不知道大家有没有听过高淇老师，我在读大学的时候，那时候看的是B 站视频链接：这个视频是 Java 的重点知识整合，是偏向应用类的，比如反射、RPC、SOCKET、文件、JSON、二维码、MAIL、加密等。B 站视频链接：这个视频面向的是 Java Web 的，源码级别的方式讲解了spring、B 站视频链接：----------我是分割线------------最后，说件事。我想着，这世界上肯定有一些朋友也跟我有一样的苦恼，为此下决心，用图解 + 通熟易懂的讲解来帮助大家理解，利用工作之余，坚持输出图解文章两年之久，我的文章都汇总到了网站：网站内容共 1000 张图 + 50 万字，网站宗旨让天下没有难懂的希望图解网站成为你们上班摸鱼必备网站哈哈！也欢迎大家关注 ,哎，想起以前也是抱着满腔热血报的CS，结果整个大学四年老师真的是啥也没教，基本靠ppt，大一大二基本上玩过来的，不过大二下学期开始有点觉悟，觉得自己不能这么下去，于是下定决心找实习，当时自己的想法是不管有没有薪水，我一定要找家公司干活，然后就找了一家，写php，工资发了1200，那段时间还蛮充实的，但是每次回到出租屋，就开始怀疑人生。大三寒假也找实习，在校期间也同样继续工作，大三的时候基本上能自己养活自己了。回到正题，怎么做？我给你个建议，学接着又有一个瓶颈，永远都是增删改查，还是没多大意思，集群，分布式，转前端有一个优势，你做的东西，自己能立马看到，给自己带来很大成就感，一开始用这个过程曲折，孤独，别人在玩，在泡妞，你在敲代码，看不到前方的路，但是相信我，坚持大学，哪怕三年，毕业后你真的不一样。当时我只准备一年，如果大一开始就这样，相信我也能进阿里或者腾讯吧，哎。大三错过大厂实习，大四错过校招，毕业后半年再找大厂的时候，内推的大神直接告诉我，如果是应届生的话，还是有机会的，社招就算了。在这里，希望看到的学弟学妹们，要加油，尤其是学校本身不咋地的………,很赞同其他回答说的，大一其实刚开始接触计算机的话，不需要掌握太多，想掌握太多了也掌握不住，对不。毕竟你还得学高数，大物，英语等等其他的课程。掌握的意思就是要用得很熟悉，别只满足于学校的要求，满足于考试过关就行，一定要能自己写不少程序，做一些项目出来。这样的话，你接下来的学习就能事半功倍了。不管接下来是去做项目，上其他更难一些的课程，还是说去刷题。语言的话，建议学好Java或是C++。毕竟是计算机科班的学生，如果只是掌握Python的话，我觉得还是不够的，虽然拿Python入门到是没问题。但一定一定要掌握至少一门静态语言，且不说，接下来的课程，比如操作系统这样的课程，肯定是需要用到C++的。所以，早点学好一门编程语言就很有必要！其中C++是一个很稳妥的选择。如果想学Python的小伙伴，可以看这个回答：也可以参考这个课程来学：另外这门python课程也很不错呢，用游戏闯关的方式来学习编程，方式新颖效果不错！Java的应用范围也很广，如果你接下来要做安卓开发，或是接下来就是如何去加强这门语言基础。！大学应该掌握的基本数据结构以及他们的实现，可以看这个回答：数据结构的书的话，可以快速看这本。这个过程当中，你的编码能力就稳步提升了，debug的能力也会得到锻炼。快速过一遍之后，就可以跟着算法红包书来一波最基本的算法和数据结构了，虽然这本书书名叫算法，但其实它也囊括了数据结构，而且全书配了很优质的Java代码，想学怎么写简洁高效可维护的Java代码的小伙伴，不容错过这本书，及其配套的网站和网课。下面这些网课我都上过，有C++，有Java。都是我自学过程中让我获益很大的课程，分享给大家。不过，我建议大家一个个看完，学有余力再看别的，千万别东看一些，西看一点的。网络课程的话，则是十二分强推UCB的CS61B。他们家的计算机系的CS61A，B，C课，简直制霸各种课程推荐列表。2. MIT的算法课，教程用的3. 然后就是4. 斯坦福2018 Winter CS106B: Programming Abstractions，虽然从名字不太能看出来，但其实是用C++讲数据结构，想用C++的小伙伴不容错过，我看了一半了，特别有帮助，尤其是对递归和回溯的讲解，简直醍醐灌顶。现在因为不可知的原因，Youtube上面已经下架这门课程，但更方便的是，咱们可以在B站直接看：Again，也可以去这里学：我觉得大一能掌握好上面的内容，就是A+的成绩了。接下来再去跟着这个回答，安排大学其他的计算机核心内容吧。一定一定要自己课余多学，自己push自己，光靠课堂上学的东西是远远不够的。大学是不会教大家怎么去找实习，找工作的。一定要有自己的规划，然后逐步实现。才能在毕业的时候，收获大公司的offer。,当你知道什么叫指针的用法无非就是* &两种，比起很多数理化的公式来说简单多了，一大堆数理化公式不用搞懂照样用得飞起。其实在搞懂指针之前，连int a;这样简单的语句本质是什么一样是不知道的，就当成自己看懂了，然后就用了，指针也一样，当作一种惯用法去用就行了。ACM有专门的训练课程，在参加训练之前，直接照着刘汝佳的《算法竞赛入门经典是国内学习算法的宝典了，知乎上有大量讨论，随便找的图片，不是广告。,," 看了题主的问题, 其实就是想问如何快速提高编程能力嘛,,之前有个学妹也这样问过我,我还单独在公众号写过一篇文章,挺适合这个问题的，我贴过来~提高编程能力，我自己总结了以下几点：先上第一点，关于做项目，这也是学妹的痛，不知道如何去开始一个项目。谈到这点，对不起，我又想讲自己的经历了，有点长。。。是的，我们都知道编程是一门实践的学科，不动手永远学不会，看懂了和学会了之间差了上万行代码。或者说： 刚学完一门语言，想必大家都想做点有用的东西，而不是天天写练习题，但是呢，又不知道从何下手，尤其是 C 语言。我大一上完 C 语言课，就处于这种状态，但是我隔壁一个室友就不一样的。他在学习 C 语言的过程中，刚学到动态内存分配(malloc)，就去摸索着写贪吃蛇、坦克大战，而且完成度都挺高的，那时候是我们眼里妥妥的大神。但是大神和我上的课，学的东西都完全一样呀，况且都是上了大学才开始接触编程，为什么差别这么大呢？以至于那时候，我和学妹一样，常常怀疑自己没有编程天赋，觉得别人天生就是这么强。这种状态一直持续到大一下，那时候刚学完 Java，而 Java 也比 C 友好了不少，所以总想写点什么。于是自己就选择写一个类似 QQ 的聊天工具，其实功能就很简陋，就是一个简单的 GUI + Socket 编程，然后在加上用户信息管理就完了。但是，当我用这个简陋的软件，分别在室友和我的电脑上跑起来并且成功发送消息的那瞬间，我觉得我的编程世界被点亮了。原来编程这么好玩，原来我也能做一些有趣的东西！似乎找到了一丝编程的感觉，但还说不上到底是什么感觉，毕竟这个程序总共也就几百行。紧接着，趁热打铁，我又写了一个但是写这个又遇到了不同的问题，比如棋盘在我的实现里是一个 N*N 的数组，棋子是用对象表示，对象里有坐标、颜色这些属性。当时我就疑惑了，当一方落子后，该怎么把棋子对象通过网络传输给对方呢，再从网络接收的数据恢复到对象？起初自己的想法是手动的把对象转换成字符串，然后像聊天工具一样发送给对方，比如:。这种做法没问题，但是总感觉不够优雅完美，于是上网一番搜索之后发现，原来我想的这个就叫「序列化」和「反序列化」。并且在 Java 里直接实现 这些问题在现在看来，根本就不是问题，更像是“常识”。甚至序列化这块，还会选择一些兼容性更好、性能更高的协议，比如 Protobuf、Thrift、Avro 等等。但是对大一时的我来说，在这个过程中不断的遇到问题并且去解决，就是实打实的编程能力上的提高啊。在我解决掉一系列问题之后，顺利的和隔壁室友用自己写的联机五子棋对战了几局，这个五子棋还支持不少诸如悔棋、暂停、自动判断输赢等功能。界面风格和下面这个很相似（这是网上搜的）但是由于当时没有存 Github 的习惯，代码在换电脑之后没能留下来。通过写这些项目，我像打通了任督二脉一样，不是学了什么厉害的算法、也不是高深的设计模式、更没有分布式这样高级的东西。那是什么呢？只要我们心中有设计图纸，那就能通过胶水把这些积木搭建成想象的模样，缺少什么积木块，用到的时候再去搜索就行了。这段时间大概是我编程能力提升最快的一个阶段之一。关于这个五子棋，还有个小插曲：我写的不是联机五子棋嘛，然后启动的时候输入对方的 IP 和 Port 就能连上对战。后来，我找了一个在其它城市上大学的高中同学，让他和我一起玩五子棋，但是呢，我傻乎乎的让他用 ifconfig 查看自己 IP 后告诉我，然后我在这边连接。那个 ip 呢，大概长得像 局域网内的 IP 只能在内网才能使用，所以我用这个 IP 是永远连不上的他的电脑的。但是那时候我才大一，没学过计网，根本不懂这里面的原理。为啥我和室友能连上呢（因为在一个局域网）？为啥和其它学校的同学就不行？别看现在这个东西在我看来是常识，但我那时候是一点计网知识都没，就是硬着头皮学的 Socket 编程，去理解 IP 和 Port。那是怎么解决的呢？当然是找谷歌呀！在网上一番查询后，大概明白了，如果想让不同局域网内的主机进行 P2P 通信，需要一个公网中转服务器辅助进行 NAT 打洞。。。后来，我就又去尝试 NAT 打洞了，其中细节就不再描述了。其实把我个人编程经历上写这么多，就是想展现我是如何一步步去实践的，遇到了什么问题，又是怎么解决的，把这个过程展现出来。你看我没学任何计网知识，还不是通过边学边用，完成了网络相关的项目。所以你离项目只差一个开始。说到这里，不少同学又会说，我知道要多实践、多动手，道理我都懂。可我还是不知道如何开始去写一个五子棋、贪吃蛇之类的东西。好，那我就要问问你了这应该是大多数同学最典型的问题吧？那我们以贪吃蛇为例拆解一下，看看是如何从问题到代码的。首先，贪吃蛇是一个个的节点组成的，节点肯定有横纵坐标吧？一个个的节点组成了一条蛇，那自然应该想到链表吧？蛇还有什么属性？当前移动的方向还要食物位置吧？ 那这些属性在 C 语言中用结构体表达出来就是这样：接下要考虑的就是如何去绘制蛇，这个简单呀，就把整个链表从头开始把每个节点打印出来。每个节点可以是一个圆点，也可以是方形。那如何让蛇动起来？所谓的动，其实就是不断的将蛇打印出来，然后又清除。并且不断的根据移动方向更新蛇的位置，只要这个过程够快，快过人眼能够分辨的帧率，那看起来蛇就像是在连续的动一样。然后这个过程你还要去考虑如何检测碰撞，如何判断吃到了食物，还要随机产生食物。。。 这些东西首先你得想清楚逻辑，代码实现其实if、else 、for 就足够了。做项目的过程总会遇到不会的东西，也会遇到问题。但是要相信，所有的问题在你之前基本上都已经有人遇到过了，只需要把问题准确的描述出来，然后去搜索引擎上搜就肯定能找到解决的线索。本科上的就那几门课，Java/C/C++、操作系统、计网、可能没有学校会单独开一门课教你 Java Web、Python 写爬虫等等。学完这些理论课，等到毕业，你会发现，依然好像什么都做不了，所以说，要动手，趁早。并且理论上，学完一门语言，掌握了数组、链表、 if、for、函数这些编程最基本的概念，就有能力去实现一些诸如贪吃蛇、五子棋、扫雷这样的小玩意了。这种通过项目去学习，以解决问题为导向的学习才是更加精准和高效的。课堂上的学习大多数是老师灌输知识、学生记住，然后考试就能拿高分。实际上有多少知识能转化为解决问题的能力呢？不好说。还是那句话，编程就像搭积木，学完基础的，积木块都给你了。你能搭出房子、车子、还是火箭这全靠自己。所以动起手来，编程能力是靠码出来的！全文在这，太长了，我就不放过来了，感兴趣的可以去看下：觉得有帮助记得关注我 ---update---除此之外，学习编程过程中一定要多刷题，刷",首先我们要明确的是，学编程时我们到底在学什么。我们在学习过程中不能只关注不同的知识点，而更多的学这个领域的思维逻辑。尤其是在学编程初期，我们扎扎实实打基础是好的，但是我们不要过于专注于把一个编程语言的所有库和语言都过一遍，因为过了也会忘记那我们还怎么学习编程呢，对于在大学还是编程母胎新手的同学请继续往下看，首先我们要知道，可能在你2-4年以后，你的日常会是这样的：可能在你的想象中，你会只用一个语言然后只用理解这一个语言就好了，但是事实并非如此，因为不用编程语言的不同特性和具体工作需求，很多时候你喜欢很快的在不同的语言中切换，这也是为什么培养好的在我们把预期设定好以后，我们来看自己在每个学习阶段当中真正需要注意什么，以下方法不只限于编程的学习中，但是我们以编程为例子，首先在我们一开始进入一个新的领域(在我们学了一定程度以后，我们应该对这个领域的大多数核心方向有所了解，然后相对初学者时的我们来说，有经验(在这个阶段，我们也就可以开始和同学或跟着导师一起做做一些大的项目了，然后学习他们的一些知识，以及慢慢开始做一些开源的项目参加code review等等，这样自己才能够得到更多的回馈，从而找到自己的不足。在我们对这个领域和核心方向都掌握得差不多的适合，我们也需要开始发现一些细化的方向来建立自己的长项了这样成为一个专家(总而言之，学编程不用急，切记不要焦虑。重要的是心里有谱，自己知道自己现在学的一些东西是不是对这个阶段的自己是最有用的，学会优先级处理学习的先后次序，不然如果只是一个编程小白，非要想去一周写一个编译器出来，就只有等神仙来救你了，不过确实搞不好,大一上学期C入门，寒假（疫情期间八个月的寒假）里自己刷题锻炼了一下C，结构体，指针这种老师没重视，于是自己练题也写了有5000行吧，然后自己学了C++STL库，然后也接触了面向对象，之后一直用c++刷题，然后又自己开始学数据结构和算法（严书实在劝退。。）目前大二了开始学于C++,我个人觉得。。正常的大一情况应该是啥字符串操作都不行，写个能做加减乘除的计算器就算行的水平。。。当然现在大学也在逐渐的不养闲人加大毕业难度。。起码我们那个年代的大一学生都是这样的（学校还算凑活）。。。。。。你这个水平的，在我读大学的年代。已经算是学霸了。。笑。。。。。。。。。。。。。。。一个月后我突然反应过来了哦。。。题主这是不是在装b啊。。。。。大一都去刷oj参加acm了。。。然后还说自己啥都不懂。。。结果被b乎一堆更会装的人真真实实的教育了一番装b的正确姿势。。只有我一个老实人傻傻的跳出来做反面教材。 。,大一一个学期能学多少编程？换算一下：一个学期== 4.5 个月== 18 周== 126 天，按照《21 天精通 C++》的速度，一个学期少说也能达到架构水平......当然，以上内容纯属胡扯。下面开始正文。 刚步入大学生活，有的同学对大学的印象还停留在中学老师们渲染出的美好幻想当中。“上了大学就轻松了，随便玩……”“编程？编程是啥，能吃么？”“为什么选计算机专业，我也想知道我怎么调剂到这个学校的计算机专业的。。”当然也不乏有少部分同学在大学之前已经接触过编程，亦或是天赋异禀 21 天就能精通 C++。但这绝对是凤毛麟角。多数同学都是步入大学之后，打开课本才切切实实的了解到“什么是编程”。而今天要说的主要针对这群同学。对于一个刚接触编程的同学来讲，兴趣当然是最重要的。所有计算机专业的同学，第一学期的一门必修课 —— C 语言（鸵鸟现在还记得自己在 C 语言第一节课屏幕上打印出“Hello world”时的心情）。世界上所有和编程相关的东西，都有 C 语言的影子，这是无法否定的。但 C 语言对于一些对编程兴趣不大的同学来说，从一块迈向编程世界的敲门砖，变成了绊脚石。第一份入门教程，主要是让你体会到编程是什么。《再推荐两个第二份入门教程是 MDN 的 Web 开发入门，主要是让你做点实际有用的东西。嗯，做个网页吧。MDN 全称是 Mozilla Developer Network，你可以认为是 Web 方面的官方技术网站。这个教程会带着你建立一个网站，然后你可以把你的网页发布在 GitHub 上。在制作网页的过程中，你写的每一步，都可以很直观的看到，也就更能刺激你疯狂分泌多巴胺。想想有多少同学是因为本身对编程并不了解，而后又在这两份教程都很不错，都是从零开始，带着你从环境准备开始，一点一点地从一些简单又有意思的东西入手，让你感觉一下编程世界是什么样的，相信这两个教程可以让零基础的你喜欢上编程。期间你可能会了解到一些编辑工具，VS Code 是个不错的选择。如果你的大学老师非要让你用记事本，emm，那就随他去吧。有了基础以后，还需要大量的实践帮你掌握技能。举个例子，无论用哪种语言，能做一个非常简单的 Blog 系统，或是 BBS 系统，有简单的用户登录和注册（不需密码找回）；用户发贴（不需要支持富文本，只需要支持纯文本）；用户评论（不需要支持富文本，只需要支持纯文本）。你需要从前端一直做到后端，也就是说，从 HTML/CSS/JavaScript，到后面的 Python，再到数据库。这其中需要你查阅很多知识并多多实践。大一一个学期，时间也就那么多。消化好了这些内容，就准备好精力迎接后面的挑战吧。至此，已经进入编程正式入门阶段，下面该学习该如何编程。编辑：鸵鸟,高数，,,,,
为什么不能有把中文想法直接转换成电脑程序的编程呢？,为什么不能有把中文想法直接转成电脑程序的编程呢？,你说的这种玩意叫“乙方”，你只要端个杯子开个会，说“我要一个APP，大概和xxx有关，具体有哪些东西我也不知道，反正你们先做一版给我看看”然后“乙方”就会根据中文想法自动编程了，非常贴心。Debug也简单，你只要端个杯子开个会，说“我觉得这儿要大气一点”“我觉得这儿应该这样”然后“乙方”就会根据中文想法自动修改了，非常好用。,这个问题在思维上跳跃了一层。为什么一定要“如果有写程序的需求，那么程序运行肯定有一个目的。既然如此，只需要用中文说出想法，然后直接转化成你的目的，就可以了。没有必要编程啊~~所以……不如等——“——“请问程序的目的是什么？”——“帮我把这个照片里的人抠出来。”——“稍等……”——“您的图已经扣好了。”我感觉这样才对【机智】,有。比如你是张小龙。你就可以开会时候一句话，我要……。然后就会转换成程序了。不行怎么办？贵厂（以及同行）规范回答：能实现你就干， 不能实现我换个可以的人来。忽然觉得软件行业很有点《甲方乙方》的“好梦天天游”的意思。实施不力项目经理示意图（划掉）。不对！题目说的不是人工，是自动！实施办法参考老笑话。你有啥想法不重要，得看你是谁。,我说句大实话：就比如说你这个问题，想法就是想法，不存在中文想法和日文想法这种区别。中文只是一种表达工具，想法只有在表达出来的时候才会和中文扯上关系。另外，编程是一个动词，这里应该使用程序一词。所以，这个问题应该是接下来说一说为什么：本来中文就比较复杂，又碰上很多人用词不讲究，表达不恰当。这些东西要真转换成电脑程序，出了 bug 还真没法排查是哪里的问题，计算机和程序员（这里可能叫表达员更合适）互相踢皮球，都怪对方没有表达清楚。一个好消息是，虽然目前没有办法把用中文描述的想法这个办法就是，你可以找一个程序员，你用中文描述你的想法，他来帮你实现。这种人我们通常称之为产品经理，和程序员有不共戴天之仇。,看了一圈答案，好像没有一个人答在点上。NL2CODE（自然语言转代码）这个想法一直都有，而且发展迅速。我们先来看几个GPT-3的例子：十秒生成一个Google首页​快速设计原型自然语言到Shell命令互译帮忙写代码你去搜NL2CODE的论文其实不算少，包括NL2SQL等子领域也非常多。所以把想法直接转换成代码这个想法，其实很多人都想过，也一直都在研究，最近应该算是高峰了。但是这种工具出来并不会消灭程序猿，而会成为程序猿强有力的辅助工具，具体可以阅读我关于GPT-3的文章。,啊这...题主学过钢琴没有？好的。你从来没练过钢琴，对吧？不准偷偷练琴，看见这本五线谱了吗？看完它，然后马上到维也纳音乐会上，把他们的钢琴师赶下台，弹段有专业水准的出来，震惊震惊那帮子傻帽老外。不用高，风头盖过朗朗就行。干嘛挠头？嫌弃太简单了吗？好的。把五线谱交回来，搜段弹钢琴的视频，什么海上钢琴师什么钢琴广告，都行。看20分钟，打听打听朗朗在哪演出，挑战他。你看，多简单点事。都没要你听见“弹钢琴”仨字马上就打败朗朗。啊？你就是朗朗？那咱换一个简单的。1、听说过手动档吗？好的，这是辆手扶拖拉机，你开着它，到赛场把舒马赫的记录破了。2、这是本小学生大字字帖。看见了吗？去，你也写本字帖，把别缩啊。来个真正简单的，不骗你。诺，你看书名，21天精通c++。都敢起这个名字了，总假不了吧？咱也不提21天了。你看两年，帮华为把只要你把这事办成了，第二天我就把你要的,现在已经有了，前不久 Anthropic 发布的 简单说，让 Artifacts 厉害的地方在于它支持 假设我现在需要出一些数学习题，考查低年级学生对四则运算的掌握情况，很显然手动去写的话效率会很低；如果能编写一个程序，自动完成习题的生成，那就方便和灵活多了。于是我把这个任务交给 Claude，让他做一个习题生成器，使用如下 prompt：Claude 给出的回答如下：可以看到，我只是提出了要求，并没有给出任何实现方法，而 Claude 会自动分析需求，编写程序实现完整的功能，甚至还会考虑到我没有考虑的方面，比如还给每个题自动加上了正确答案。于是我就轻松得到了一个“习题生成器 v1.0”，整个过程用不到 1 分钟。如果对这个初级版本不满意，那么直接在对话框中告诉它，让它继续修改即可，比如“然后就得到改进后的版本“习题生成器 v1.1”。还可以继续改进，包括程序功能和样式设计等等，直到满意为止，中间如果出现 bug，也只需要把错误截图给它，让它自己修改。可以想一下，在没有这种 AI 工具的时候，对于一个不懂编程的人来说，完成类似上面这个工作要有多高的门槛，以及需要花费多少时间和精力。而现在，你根本不用懂任何编程语言，完全通过自然语言交流，就能让 AI 把这事干了，几乎没有任何门槛AI 能给很多人带来实际帮助和效率的提升，把不可能变为可能。类似的例子其实非常多，过去这一年多大家应该或多或少都接触过一些 AI 工具，只是可能并没有深度使用。以我个人的观察和经验，绝大多数人都是没找对正确的用法，这个东西还是很讲究契合度的，因为 AI 工具千千万，只有跟自己工作场景匹配的才是有用的。这里我非常推荐大家去听一下AI智能办公，这个课提供了大量如何借助 AI 工具提高办公效率的案例，以及具体的操作方法，比如高效制作汇报 PPT、总结文档、处理和分析表格数据，以及 AI 编辑和图像创作等等，反正几乎覆盖了所有的办公场景。老师分享的都是非常实用的且可实操的技巧，如果你缺少 AI 工具使用经验，别错过这个机会，听了一定会有启发。现在通过下面的入口就能参加⬇️然后记得上完课可以找助教领 4 套 AI 资料包，包括 Claude 的 Artifacts 功能的玩法远不止于上面的例子。更多例子。创建一个简易的 给游戏添加更多功能：Claude 本身支持上传文档的功能，可以用于辅助阅读，总结文档或提取关键信息。结合 Artifacts 可以创建一个交互式的文档阅读器，增加可读性，更有助于快速浏览文档的关键内容。社区上还有国外网友开发出的更多的花式用法。创建一个 web 应用，调用电脑的摄像头，使用 生成的代码保存为 HTML 文件后可以本地浏览器运行，添加摄像头访问权限，就可以调取摄像头画面，并实时检测画面中的物体。类似的应用还有许多，比如模拟太阳系星体运动，比如数据分析和可视化，等等。实现上面这些东西对于专业的开发者或程序员来说可能小菜一碟，但是人工智能也给不懂计算机和编程的人一个能轻松创建应用程序的机会，不用学计算机语言、不用配置编程环境、也不用写代码，只要会说话就行了，甚至当你说不清楚时，画图也是可以的（比如一个程序 UI 的草图）。还有什么比这更“总的来说，我觉得未来这类 AI 功能的潜力还是非常大的，而且现在 AI 发展速度很快，现在题目问的还是把想法转换成程序，但是也许未来通用人工智能出现之后，连电脑程序也不需要了，甚至连电脑也不需要了。对未来的想象，可以尽情大胆一些。,抖个机灵。假设存在一个程序A可以把输入的想法转换成一个程序。我向A输入这样一个想法：“设计一个程序B，B能够对任意的输入程序C判断其是否停机”。然后A给我输出一个程序B，这和“所以不存在这样的程序A。假设存在一个程序A'可以判断输入的想法是否可以解决；如果可以解决则转换成一个程序，不能解决则输出“不能解决”。于是A'对于上述想法会输出“不能解决”。我向A'输入一个新的想法：“这是程序C，设计一个程序C'在有限时间内完成和C一样的操作”。如果C能停机，那么A'会输出一个程序C'；如果C不能停机，那么A'会输出“不能解决”。也就是说我利用A'能够判断C能否停机，又由于C的一般性，A'是一个停机问题的通用解法，矛盾。所以不存在这样的程序A'。更新：随手抖个机灵没想到获得了可观的阅读量，看来以后答题还是得找那些有点人气的问题。补充几点。,不知道日常生活中有没有像本妹纸一样的人——过于感性。感性到什么程度？我会把身边任何的“死物”都能当成是有血有肉有灵魂的个体存在，认为他们有感情、有情绪、有想法、甚至应该主动来理解我的处境~~~别急，我举个例子就好：比如某一天，我早上洗漱完要出门上班，还没走几步就被脚下的一个凳子绊了一脚；于是，我就很生气，狠狠地踹了一脚凳子，踹的很远很远，狠狠地发泄了一通；这时候在卧室的妈妈听到了声响，以为发生了什么事，一脸懵逼；得知事情原委之后，妈妈对我说：它是死的，你是活的，你至于跟它生气计较吗？OK，这里应该能懂我要说什么了吧？？？但作为电脑而言，它就是个“死物”，它不会像男女朋友那样，你的一举一动都会牵动着对方的神经，并由此判断你的喜怒哀乐、主动接收你的行为信号...想要跟电脑直接进行沟通，方式也只有通过计算机语言——编程语言或运行程序；之前在计算机发展史介绍中，汇智妹有介绍过编程语言发展史，从物理计算机诞生到人机交互，时至今日已经诞生了很多语言来实现人和机器的交流互动（感兴趣的小伙伴查看下面这条视频即可）所以这里，对于题主的这个问题我们可以这样来理解：——回想下，我们在念汉字的过程中，早已养成了不自觉附加思索的习惯，当别人念完一段汉字之后我们对这句话的理解也就自然而然的完成了；可在面对电脑计算机时则不然，首先需要把中文转换成英文词汇，而后通过对英文单词所组成的语句段落来实现计算机语言转换，进而触发应用程序来执行对应的指令命令。（当然了，在国外或许可以直接跳过中文英译的环节；而至于为什么编程不能用中文汉字来代替英文，我也想问为什么，而且想了很久很久...）——相较上一种情况，我们这里不妨引入一个不恰当的案例：（当然也可以是残障人士：重度渐冻症患者，不能讲话、四肢无法动弹等极端情况）在这种情况下，只能靠眼睛/局部肌肉的收缩和扩张来供仪器识别并作出反应，拿霍金先生来说：这位伟大的科学家在他21岁时就患上了“渐冻症”，全身处于瘫痪状态不能说话，手指只有三根手指可以活动，轮椅是他的全部。霍金患病后，轮椅一开始只是他的代步工具，随着病情的恶化，轮椅也开始不断的升级。他说话模糊的时候，为了让他能与人交流，工作人员就在轮椅装了一台电脑和显示器，植入了一个叫“平等器”的程序。他可以依靠能活动的三根手指给电脑确认指令就能做到输入。到了2008年，霍金的手指已经虚弱到按不动确认键，不过脸部肌肉仍然可以活动，所以工作人员又为其开发了全新“Cheek Switch”装置到霍金的眼镜之上。该装置可以用红外检测脸颊肌肉活动，当霍金面部肌肉收缩时，传感器就会接收到信号，信号反馈到电脑后，来选定目标字母。相比之前的用三根手指打字，脸部肌肉打字的方式在效率上无疑会更低，所以工作人员再次对输入法进行升级，联合Swift Key公司采集霍金大量文档，分析词频和上下文关联，就像现在的手机智能输入法，当输入“肯德”时，输入法会自动联想出“基”。不过这套输入法随着霍金在2011年病情的再度恶化，不得不面临全新升级。这一次，技术团队还是针对霍金的轮椅下功夫，安装了一套可供残障人士使用的交互系统（简称ACAT），可以让霍金的任何脸部动作进行操作，打字效率提高了1倍。后来该套设备还加入了一键静音、快速搜索、多任务切换等功能，使得日常处理任务的效率提高了10倍。再后来，技术团队又给轮椅装了一套交互系统，所有的脸部动作都可以操作，打字的效率能提升一倍。还有多功能感应系统等——轮椅上还加装了12英寸屏幕，可以完成写稿，收发邮件，听电话。同时轮椅上还有一个万能遥控器，通过红外可以操控霍金办公室和家中的电视机、音响、灯光、开关门等任务。多功能感应系统，搭载了各种传感器，还能实时检测霍金的健康状态，记录轮椅的使用状况。不夸张地说，这应该也是世上最“可即便如此，仍然无法实现题主所说的“把想法直接转换成编程程序”的理想状态，看起来更像是目前我们接触到的人工智能，更多的是基于数据库/词频、词库等历史操作习惯和应用场景来推算、预测下一步动作，节省更多冗杂的思考和操作时间；这也是众多长假所声称的学习能力和所谓算力，我能承接多少大的需求、并在多短的时间内做出反应...听上去更像是应用层面的表征；而对于底层逻辑架构方面的革新，还是任重而道远——毕竟看似简单的运营操作背后，通常都是数不清的各类编程代码和机器语言；从软件开发到硬件配套，系统性的智能工程绝非一朝一夕可以轻松实现。因为在理论上，从脑电波/电信号接收（如何捕捉信号算是一大难点）、到指令生成以及对应的编译程序运行（有点像极致化的模块编程概念），完全是可行的；无非是什么时候我们才能将个人想法/信号，像目前的语音/声波信号转机器语言那样，让机器变得更像一个“活物”罢了，能跟我们对正常的高效沟通罢了。（类似IOS系统下的siri、可以想象，到那时嗯，总之，还是莫名有点小小期待了呢，哈哈哈~但愿有生之年可以如愿看到那一刻的到来...我是汇智妹，一枚程序员萌妹纸，每天除分享IT技术干货之外，也会聊聊IT圈热议的那些事儿；公号【汇智动力学院】——职场技能提升、就业加薪升职、以及有对转行IT感兴趣的小伙伴，记得关注一波哟~比心❤,中文想法------>程序 ❌中文想法+钱  ------>程序✅,这是个测试行业的问题，讨论的是黑盒与白盒的关系。什么是黑盒？我想吃炒饭-点个外卖-炒饭到了。店家如何炒菜、小哥如何送菜，你不需要关心，你只要在正确地输入（点单）后等待输出（取餐）就可以了。什么是白盒？我想吃炒饭-买菜、蒸饭、切菜、炒菜、出锅。每个细节你都要亲自把控输入和输出。但其实这仍然不够白盒，因为种菜的过程农家已经帮你完成了，这个过程是黑盒的，你只管买就行了。天然气的采集、输送也不需要你关心。这叫“封装”。把一些步骤封装成一个简单的操作，具体的步骤由机器或其他人来实现。我们的现代生活就是建立在层层封装的基础上的。简单的一个炒菜，背后经过封装的操作涵盖了各行各业的方方面面，铸铁、挖掘、管道铺设、农肥、化工、伐木、冷链...而这里边每一个步骤都可以再细分出更多的被封装的操作。所以，即使不涉及编程，你的一个中文想法，也不可能有一个机器能帮你直接转换成现实。你必须提供一定的输入，才能得到输出。如果有一台能够自动炒菜的机器，你必须要输入原材料它才能帮你炒出来。原材料是输出的前提条件。到了编程领域，需要你输入的“原材料”，就是一个个前置程序。而这些前置程序是“中文想法”的层层分解。比如简单的一个想法“画一个圆”，够简单吧？但它缺乏必要的输入：圆的直径？线宽？是否填充颜色？是什么颜色？是否是半透明的？是圆盘还是圆球？于是乎你需要定义这些参数，也就是输入前置条件，才能得到输出。这个过程简单到无法封装，因为每一个操作都是原子化的，也就是不可分解的。如果换成一个你可以发现，每一个信息都不是靠机器自己就能完成的，例如轮胎的尺寸问题，程序如果想要知道什么尺寸才是合适的（或者你想要的），它需要你输入如下信息：如果你期望上述问题能够靠程序自动完成，你需要赋予程序足够的你会发现，如果你真的不作任何输入，程序将无从下手，除非它是全知全能的神。而这还只是“画一个轮胎”这么简单的想法带来的问题。如果你想的是“生成一辆汽车”，这背后涉及的知识将涉及人类整个现代工业和基础科学，包括数学、物理学、化学、生物学乃至美学、文学...所以，程序做不到完全黑盒，只能由人来白盒操作其中的诸多细节，才能环环相套完成一个个输入和输出，得到最终的结果。,我不知道你说的自动交易系统具体指什么，但是你可以参考下面的例子。如果有一个超级ai，能完全理解中文，那么，我：我想要一个选课系统。AI：好的，什么是选课系统？我：就是很简单的，有个课表，学生可以在上面选选修课。AI：好的，什么是课表？什么是选？什么是选修课？我：课表就是一个表格，上面列了课程名称，老师，课时，学分，上课时间。选。就是选择，我选择了这门课，就会把我登记上去，然后这门课的剩余名额就会少一个，然后老师可以看到有谁选择了这门课。选修课就是一种课程。AI：好的，什么是课程？什么是名称？什么是老师？什么是课时？什么是学分？什么是上课？什么是登记？什么是名额？什么……我：去死吧，我不要了…编程其实就是尝试告计算机，你要帮我做什么。由于计算机的内置逻辑只有一些基础指令，而这些基础指令建立在逻辑门电路上。那么一个很简单的程序，往往也需要大量的前期，与你想要的业务逻辑无关的准备工作，比如回答电脑上文那些问题。这个跟你用什么语言编程没关系。就像你要给一个三岁小孩解释你的自动交易系统，如何才能让他明白你要做什么。可能无论你用中文还是你家乡的方言，都很难。好在现在有操作系统，编程框架，程序引擎，中间件软件等等，帮助程序员做了大部分基础功能的定义和实现，使得上文的十万个为什么大幅减少，但是涉及到具体的问题，还是比一般非程序员想象的要复杂的多。你可能从来没想过，有人会不知道“课”是什么，“选”是什么，但是计算机真的不知道，要告诉他才行。这个真的跟中文不中文，没有任何关系。,"从题主的描述来看, 大概率是从没有接触过编程的. 当然, 这不是什么问题, 毕竟编程也不是什么普及的技能. 很多人不了解也是很正常的. 所以, 就打一个比方来解释一下.先要了解一个概念: ""编程""是一个动作, 所以题主的问题""这里把不相关的""比方正式开始:编程使用的各种开发语言, 其实就是一种工具. 和我们用到的螺丝刀钳子扳手一样.所以, 编程这个动作本身, 就是使用工具的行为. 而无论你是做机械加工也好, 木工也罢, 乃至是艺术创作, 工具都只是让你的""思想""成为""作品""的一个媒介和助力. 其本身没有自动把原料变成成品的能力. 那么你可能要说了: 自动生产流水线不就是么, 加工中心不就是么, 这头原料进去, 那头成品就出来了.   但是你想一想为什么流水线和加工中心会把原料""正好""变成需要的成品呢?  还是得有一个操作的过程, 需要人工去安排去调试.   和原始的钳子扳手相比, 只不过是更加高级的工具而已.  而和钳子扳手那些工具相比, 流水线和加工中心的设置和调试需要更高级的知识而已. 所以, 从钳子扳手螺丝刀=>流水线,自动加工中心, 变化的是技能要求.  工具依然是工具,只是提高了效率. 接下来再深入一些, 抛开工具的差异, 解决问题的""思路""是可以抽象出来的. 比如说你要吃一包方便面, 那就需要以下的步骤: 找个碗,打开方便面包装, 把面和调料放进碗里, 放进开水, 加热, 吃这就是你平时吃方便面这个""想法""到实现的具体过程.  只不过因为你的身体太过于熟悉这种流程, 不需要太多大脑的思考就能驱动你的手去完成而已. 但是当你要从""想法""变成""程序""的话, 这些流程又该如何体现出来呢? 就好比你想""我要吃方便面"", 电脑驱动某个外部设备把整包方便面塞到你嘴里. OK, 完全符合你的""想法"".  错的只是你.然后你就会想到""要去掉包装, 要放水, 要加热......""最后你发现, 这TM不就是自己在编程么. 你所需要的只不过是一个脑波输入法而已...",您就别整这个东西了。您就用中文想法，告诉身边的一个打工人。如果不同的打工人总能完成的比较好。那你已经可以去当中层管理人员了。,因为中文的想法往往和程序的编程在精细程度上不是一个量级的。很多人有简单的想法：做个外卖软件，要有订餐功能、付费功能、能追踪订单实时状态、有餐厅/外卖员评价体系等…是不是觉得每个功能似乎都简单，至少想法形容起来费不了什么事？然而实际上用编程实现起来，连显示餐厅时用的字体，图片的界面范围等细节都要用代码明确写出来。举个不恰当的例子，当你想造人时，你的中文想法是人要有各个器官，而编程时的代码却要完成每个细胞的设计与实现。如果你的想法只有器官级，目前还不够智能的电脑还不足以帮你脑补出各个细胞的具体实现。再进一步，假设你是个细致的人，想法非常细致具体，对显示餐厅时用的字体种类大小，甚至各种界面的图片边界布局都有明确的构思。从器官级的想法细化到了细胞级的想法。那么问题来了，用中文如此细致地描述一个程序的具体实现方式，要写多少行多少页？到了这时候你会发现，写代码比写中文想法用的行数更少。因为编程语言是由英文关键字+数学/逻辑符号组合出来的、专门用于描述操作流程语言，描述操作流程时比中文这类自然语言更简单。相同的道理，描述一个数学问题，用数学符号形式化地写出问题的表达式可能只要两三行，但用中文或英文描述就得写一大段（还不一定写得清楚、无歧义）。所以既然编程语言可以更清楚简单，为什么要用中文去描述一个程序的实现？,有的你只需要使用一种叫做程序员的编译器就好了。你输入自然语言，他输出,因为很多人高中没毕业，搞不懂啥叫集合你别不服，举个例子，你说开发个系统，用户使用手机号登录，后台发验证码给他，验证码正确允许登录。光这一句话就是漏洞百出，高中的集合都没学好， 仅仅指出了验证码正确允许登录，那验证码错误呢，不给登陆，你以为这是补集，逻辑完备了？实际上，你后台发不出验证码呢？是否临时用密码登录？你考虑了吗？你考虑的就已经不完整了，AI就不可能给你写出无bug的程序这个不是AI能力的问题，是你自身的问题,是可以的，例如人工智能。自己当老板，说想要个色彩斑斓的黑，底下一堆人工帮你智能的实现即可。这叫,这个可以用一样的道理，想法是模糊的，符合你初步的想法，但是实现出来你发现不是你要的那种的程序有很多，正好是你要的那种，基本不可能出现。所以就像需要人工整理积木一样，需要编写程序，降低熵。,目前的流程是，老板把想法告诉程序员，程序员再写出程序。你想要直接干掉程序员这一步，也就是希望电脑能够完美替代程序员。既然电脑能替代程序员这一工种，意味着他能写出任何一种程序，意味着它能做任何事。你说帮我写一个能够做出世界上所有美食的机器人程序，那么所有厨师就失业了。以此类推你可以干掉全人类。这样的电脑，用五个字来形容：也许人能够造出上帝，但以目前的技术水平做不出来。
打字速度对编程的影响大吗？,本人打字极慢，程序员，指法很差，可能是小时候计算机接触晚造成的。但感觉自己编程还行，编程的时候感觉也没有那么必要像聊天那么快，因为要考虑很多东西，命名，设计模式等。由于担心工作之后的工作环境非常“艰难”，最近想用vim。问题：现在再练指法提升打字速度，必要吗？,很多人以为程序员大部分时间都在码代码、敲命令，反正就是对着RGB机械键盘各种怼。实际上，程序员的日常是：老板又让我实现xxx功能，还是搜一下有没有现成的轮子好了。然后开浏览器准备上google，忽然瞥到右下角的youtube弹窗，点进去，哎，这个视频好有意思哎....两小时后......完了完了deadline要到了，强行关掉youtube，搜了下发现确实有现成的轮子，不过轮子里用到的xxx库我好像没用过，继续google一下xxx库的文档。五分钟后，哈哈，我已经完全了解了怎么造这个轮子了，于是把网上的代码ctrl+c +v过来，写写接口改改变量，然后编译一下。卧槽，这个错误提示是什么玩意儿......然后google错误提示......重复以上过程N次之后，哦耶，编译成功，开始调试。靠，这个数组是怎么越界的......妹的，到底哪里内存溢出了......妈个鸡，谁来告诉我这个指针指哪里去了............然后进入debug死循环...所以说，你的大部分时间会花在google搜索（刷youtube）、看文档（刷知乎）、跟各种错误提示和bug斗智斗勇（刷朋友圈）当中。真正码代码的时间可能不超过1/10。视频出处：,影响非常大。比如每进行一次操作，打字慢的需要30秒。打字快的需要10秒。相比于打字慢的，打字快的程序员勾搭的妹子永远感觉对方在线。所以最后打字快的程序员，都有了女友。站在程序员鄙视链巅峰！影响真的非常大。,很多答案都把话题说偏了。这个指法是否熟练和打字速度是否足够快，我这里定义一个分隔线：就是当你需要打某个字符的时候，是否需要思考这个字符在键盘上的位置。如果是的话，那么这个思考本身就会打断你编程的思路。如果不是的话，那么这个影响是不大的——当然，还是会有影响，因为并非所有的代码输入过程都需要思考。程序员是否需要练习指法，严格来说当然是没有必要；但是对于指法不熟的人来说，只需要一两个月的练习，就能熟练指法提高编程效率，Why not？,要知道，编程绝不会和聊天的打字速度一样，不然编程就是和打字员一样的工作了。微软以前Windows里做内存管理的专家，他打字是,这么说吧，如果影视作品里把程序员（当然他们更喜欢拍『黑客』）的镜头都按真实来拍，大概率应该是角色对着屏幕『发呆』（要么在等编译，要么在思考这个类该叫啥名）。以前发生过因为误操作等原因导致写了一天的代码丢失，不得不重写。然后就发现你开发+调试花了一天的工作，重新写一遍的话，大概半个小时可能就敲完了。不过话说回来，花几个周末练下打字很难吗……喏，拿去：,"影响不大，但是当打字不会block你的思考的时候，你编程编得更舒服。另外还有一个影响，就是当你请教大佬问题的时候，大佬告诉你这样这样改就好了，大佬的预期是20秒钟就改完的，所以等着看你改完的结果。 可是你硬生生折腾了5分钟你们才终于看到效果，你猜下次大佬还愿不愿意指导你？ 你猜会不会有大佬愿意跟你一起再比如处理个线上问题，敲几个命令行命令的事情，打字快的人大部分命令就直接敲了，而打字慢的不管一点啥都要动用鼠标各种复制粘贴，这种人处理线上故障的时候，旁边的领导估计看着简直想发疯。 处理这种问题，强的程序员会开发积累自己的工具包，活用脚本语言，alias等等，让自己每敲一个键都比别人更有意义。一般的程序员能做到命令熟练，打字流畅，也不至于让人看着抓狂。还比如我见过很多程序员，他们的单文件代码从来都是没法独立运行和测试的，每做一个调整，想测试一下，得把整个项目运行起来，然后从UI界面开始点击，一直到触发自己刚才改动的部分逻辑才行。他们从来没想过要对代码做模块化的分解，为每个模块构建独立的开发～测试循环。 当他们回顾自己为嘛改这么个小问题就花了一整天的时候，可能发现自己只是打字慢了一点，鼠标点的多了一点，等编译等得久了一点而已，似乎没有什么大毛病。总结一下，真正只是打字慢其实对编程的影响微乎其微，然而很多认为自己只是 ""打字慢"" 的人的问题其实并不是打字慢，而是没有优化自己工作流程和效率的意识。",流畅的盲打是种享受。指法不好，一会看键盘，一会看屏幕，敲个几十年，是很累的。既然打算做这行，不如花一个星期，练好指法，提高生产力。打字慢，不影响编程思路，但影响编程体验。,我早年连数字键和符号都不能盲打，现在可以了；过去我写了十多年程序都没专门练习过指速，指法也不标准；后来练习了两个月，指速翻了一倍，然后以两倍指速+摘录两条该回答评论里的感谢信：以及：,这个取决于编程的定义了：如果只是纯粹的代码编写，那打字速度当然很大的影响编程速度。但是实际上编程是一个很复杂的过程1：设计2：实现3：测试只有实现这一步有大量的代码编写，但是这里还包含完整的调试。所以一个功能的实现，持续的代码编写只占20% - 30%。从这个角度讲，影响并不那么大。,打字速度的提升带来的好处：1.打字不再打断你的思路了；2.你更愿意写注释了；3.你不再担心万一程序丢失重打的麻烦；4.你不再对大程序排斥了；5.你更愿意对程序修改做更多的实验；6.快速的聊天回复使你更好地保护你的工作思路；7.不看键盘的盲打能让你专注屏幕，不再低头打字忽然抬头发现打出来的都是中文原来中文状态下打了好多代码。8.不看键盘打字能让你看到更多的屏幕提示，比如智能补全提示、函数参数提示、颜色变化等。9.指法快了你让你更愿意使用编辑器的快捷键，带动其他方面的工作效率的提升。10.,,"影响大不大看你打字速度有没有跟上你的程序设计的思路了。我是上了大学，双手才接触到键盘。图书馆第一本书是Windows系统入门，给大妈做新手指引的那种。然后上课的时候，老师在上面演示，我在下面手抄，一边抄一边理解记忆。有点幸运是，C语言老师特别关照我，是个50多岁的小老头，人特别和气，抄完一抬头，经常看到他对我慈祥地笑。上实验机课，他喜欢站我旁边看我写代码，所以舍友们都不愿意和我坐一起上实验机课（我中小学经常在考场上被老师围观答题，已经习惯了。。。）然后有天，他问我，""小树啊，我看你编程速度虽然慢，但是思路很清晰嘛。可是你为啥要看着键盘一个一个字母按啊？""我的脸瞬间红了。""哦。你以前没碰过电脑啊？""""嗯""。红炸。""训练打字是很无聊的，我来教你个法子哦。现在你们大一新生会有很多群吧，你多加几个，甚至可以去搜索一些QQ技术群，你多活跃活跃，什么时候你能同时进行十个窗口的会话，打字速度就够用啦。""于是，我就开始了网络社交，混入了各种奇怪的圈子ψ(｀∇´)ψ，编程速度也突飞猛进了。ps，后来大四，有同学看到他的女儿来找他，据说长得和我有点像。",修改一下之前的回答：别人以为你编程的时候是这样（噼里啪啦敲键盘，屏幕上字符滚动，看起来很酷很牛逼）：其实现实中你编程的时候是这样（大部分时间手拖着下巴 ，望着屏幕发呆，心里想着WTF）：所以结论就是：,"编程速度与很多因素有关，做到以下这些，可以有效帮助你提高编程速度：如果你熟悉了键盘上的各式快捷键，就会惊奇的发现，使用键盘进行快捷操作能让你比使用鼠标时拥有更高的效率。因为快捷键的使用多数依赖于肌肉记忆，更像一种条件反射、而不需要思考——比如清屏时的Ctrl+L，自动完成文件名时的TAB、window中对操作界面进行迅速切换的art+tab等。有些程序编辑器甚至允许你通过编程添加专属的快捷方式。因此，作为一个优秀的程序员，在编程过程中绝不会频繁触碰鼠标。要想编程快，首先打字快。一个能够快速进行编程的程序员，一定是一个可以轻松实现每分钟70-80个单词打字速度的打字健将，甚至有些大神表示每分钟100-120单词也不在话下。因此，如果你的打字速度不够快，小目标可以竖立起来了。-优秀的程序员总能快速对程序进行debug，比新手快上一百倍可能并不是夸张的说法。这不仅仅是因为他们懂得的知识比新人们多，更是因为经过千锤百炼、千劫万难之后，他们找到了严格而有逻辑的方式进行debug、进行错误源头的寻找。所以，如果你还是个只能慢慢debug的新人，那么你接下来的任务就是不断写代码、解决错误，把经验积累到一定的量，然后期待debug速度质的飞跃。优秀的程序员明白怎样寻找所需信息才是最有效的。当他们使用一个系统遇到了问题，相比较于求助谷歌，他们也许会更偏向于看软件的源代码，通过源代码来了解系统的具体运行方式，进而解决使用系统所遇到的问题。很多时候——高达百分之九十，这种方法对解决问题而言具有很高的效率，远高于求助谷歌。当你看见一个程序员开始在电脑前指如飞燕、惊叹于他们码代码速度之快如有神助时，他们实际上已经花了很多时间在这个程序上了，对算法和解决方案也已经进行了深度的思考和探究。在码下第一个代码之前，优秀的程序员必然已经在胸中有了大致的设想。切记，程序员不是一天二十四小时，一周七天都在写代码的怪物，更多的时间他们是在思考和布局，而这些思考和布局的时间，将为你省去之后码代码过程中的大量头疼。所以，随时带着你的笔和纸，在编程之前仔细规划。一个良好的编程习惯能带来的时间利益简直无可估量，他能天然的帮你减少大量的bug、帮你大量减少后期项目改进和维护所需的时间，毕竟一个具有良好架构的程序是很容易进行维护和改进的。很多时候，开发商之所以会在后期面临大量的bug，就是因为他们没有使用良好的编程习惯、不遵循良好的软件设计原则。所谓磨刀不误砍柴工，要想成为编程小能手，首先你要找到一个趁手的代码编辑器。一个好的代码编辑器能给你很多额外的福利，比如自动选项配置、语法辅助、编辑单词自动识别分离等，而这些福利能令你的编程速度得到一定的飞跃。有些编程语言和汇编语言一样会允许进行文本替代宏设置，也就是说，你可以在写了很长很长的代码之后，仅用一两行的文本实现对其的显示替代。而这种替代，能在很大程度上提高你之后编程的速度。同样的一段代码，一遍又一遍的进行编写无疑是无意义的。将这些代码用脚本进行表示，在需要时进行引用，能很大程度上提高码代码的效率。有些时候，你需要的东西是你的同事、其他程序员已经做过的，那么就不要浪费精力进行重复的工作了，懂得利用已有的资源，你才能拥有更快的编程速度。人普遍存在的一个问题就是不能正确估算自己所需的时间，也许经过反复训练可以，但着实较难。很多时候，你不追踪自己的时间消耗就根本无从得知自己完成一件事情的速度有多慢，和你预期有多大出入。另外，追踪自己的时间消耗还能在一定程度给予压迫感，而这种压迫感能促使你更专心的对待眼前的事情从而效率更高，编程无疑也是如此。Mark Chen毕业于北京大学信息科学与技术学院。就职于 Google，斩获 offer 包括 Baidu, 网易, Hulu, Google, Microsoft, 小米等。高成良北京大学网络与信息系统研究所硕士在读，曾在微软亚洲研究院（MSRA）实习，负责Android平台上项目的算法调优及部分模块实现。此次 Live 将在北京时间2月8日周四晚上8点举行，报名请戳：",来看看这两位 google 程序员使用 vim 能打多快，手速快了都是浮云呐：现在的QWERT键盘键位实际上是为了降低你的打字速度而设计的。使用优秀的高度可扩展的编辑器是为了让你的打字速度不拖累你大脑的思考速度（当然脑瓜子不能太慢）。正确的指法比较重要是让你能在盲打数字键和 F 区的时候提升准确率。（很多 unix/linux程序员使用终端和 vim/emacs 比较多的不用 F 区，甚至都不用鼠标和触摸板，我撸代码的时候也基本不用）想学 vim 可以看下我最近更新的视频 vim 专栏，体验只用键盘的感觉：笔者在慕课网还有一个免费的 vim 教程：vim 作者曾写过一篇文章：如果你每年几百天每天都要花很多时间用在编辑各种代码、文档、写博客、写读书笔记、写电子书等，学好一个编辑器能节约你很多时间，当然可以不局限于 vim/笔者是后端工程师，经常和服务器打交道，使用 vim 让我在本地和服务器几乎有一样的开发体验，我经常 ssh 到服务器直接用 vim 修改代码调试。很多 vim 用户用惯了以后即使切换到其他编辑器或者 IDE 其实都还会装个 vim 插件模拟 vim 按键操作，你会发现现在流行的几乎所有的编辑器和 IDE 都支持 vim 键位扩展。看到有些答案举了极端使用 vim 还可以让你用以下这些小键盘，手指始终集中在主键盘区：,无数所谓的「大牛」已经深刻地讨论过这个问题了。。总结起来就是打字慢的人不能称之为程序员。。慢指的是打字速度低于60wpm（每分钟60「词」），当然这个标准有待商榷啦。。 至于打字快了有什么好处，你想象一下「人肉」 交互解释器（REPL）就知道了。。节省了无数安利一个练 typing 的链接：,"排版也不用自己排，只需调用 formatter 即可，自动排版。与其提升打字速度，练指法，不如想想还有什么其他方法可以提升代码效率。就我个人的经验，高效率编程主要要注重如下三个方面：第一点, 减少程序重启或编译时间, 不仅包含编程型语言, 也包含解释型语言。一般我们在开发一个项目的时候，往往希望我这边敲几行代码，马上就能看到结果，反馈即时，而不是先闷头写代码，然后再按一下 IDE 的那个绿色小箭头 ，run一下.尤其是当项目变大的时候, 要重启项目, 很费时间, 所以现在基本上, 无论是前端, 还是后端, 还是其他领域, 很多项目在开发的时候, 都有 dev 模式, 这种模式可以 live reload 你的项目, 相关的 dev 工具会监听你源代码的更改,如果源代码更改了,它就自动热更换你更改后的代码。像我写 Angular 项目和 Spring Boot 项目的时候，基本上这个 live reload 因为这边写一点代码，马上就能看到结果，即便是编译错误，也马上能看到编译错误信息，马上改正。我们对于 bug 的原则就是，bug 越早发现越好，最好是写几十行代码，就验证一下这几十行代码是否有效，而 第二点，减少代码定位时间  当项目变得越来越大的时候，文件特别多，这时候你要快速进行代码定位，才能快速开发，因为这时候，很可能你从文件夹里找那一个文件都很费事。不管是寻找文件，还是寻找文件中的一个函数，大家一定要多用 这是 VSCode 里的文件搜索，从那么多文件中找到自己想要的文件，我只输了 五个字母。第三点，快速获取重复代码片段。其实就是要多使用 比如，写 SQL 的时候，常见的语句就那么几种，我完全可以做一个代码碎片，然后这样：就会生成相对应的语句，还比如说我写前端 Angular 的时候，经常需要写一个和后端restful交互的一个 service 层，每次写的都差不多，然后写代码的时候，只需输入前缀 a-rest-service c即可ji'k排版也不用自己排，只需调用 formatter 即可，自动排版。说了这么多，核心思想就是，经常要用到的那么代码，经常要进行的操作，经可能降低最后再提一个事，多看看快捷键，还有就是，用 VSCode。",1、打字速度对编程影响不大。就算不论“打字速度”和“思考速度”的比较以及“大牛憋三分钟写十行代码好过新手狂敲十分钟”这些因人而异的东西，在IDE环境中，如果你追求最高输入效率，其实应该是充分利用代码补全和重构功能，你连续输入大段文本的机会根本就不多。况且为了准确性，就算我打字速度足够快，我也会优先选择复制粘贴或代码补全，减少输入错误。2、编程速度取决于思考的速度，以及将想法输出为代码的速度，思考的速度和打字没啥关系，主要是通过各种渠道获取到相关资源，包括谷歌，包括GitHub上已有的一些库。编辑代码的速度虽然不是编程快慢的决定因素，但还是很重要的，选一个自己熟悉并能驾驭住的编辑器或者IDE能事半功倍。3、所以，提高打字速度，对于程序员来说，还是很有必要的！不仅仅是程序员！另外，打字就像开车、写字、骑车、游泳、基本数学口算一样，在现代社会是必备技能。如果打字速度极快，而且是条件反射式的“盲打”，不用为了输入看键盘，那么你在工作中思考问题时就不会被打字输入打断你的思维。打字对于IT工作者来说，就像呼吸对于跑步者一样，是最不显眼的功能，确实最不可或缺的技能之一。如果打字能力差，在输入的时候要去看键盘，要想输入顺序，那么很容易打断思维，这将大幅降低工作效率和准确性。4、做到核心程序员的时候，数据结构算法熟练，语言特性建模技巧运用自如，这是我的产出高峰期，两个我认为很有价值的能力，一个是积累了很多自己常用的函数库，基础代码的重复开发率极低，包括数学字符串数据结构常用算法甚至一些常见库的简易表达的封装；另一个是局部化的编程方法，在编程的过程中每个时刻保证只考虑非常有限的内容，这需要对整体较好的驾驭分解能力做前提，辅以好的键入速度，编程如泼墨是非常畅快的，这个阶段我专门去花一点时间练习了键盘输入，也是这个阶段感受到了普通键盘对手指的少许伤害，可能是习惯不好我会不自觉的击键过重，05年的时候买了第一把很普通的机械键盘解决了这个问题。PS：并不影响，作者：IT人故事会来源：慕课网本文原创发布于慕课网 ，转载请注明出处，谢谢合作,既然题主提到了vim，那么就说点可能离题的东西。离题之前先简单答下题，打字速度对编程影响不大。就算不论“打字速度”和“思考速度”的比较以及“大牛憋三分钟写十行代码好过新手狂敲十分钟”这些因人而异的东西，在IDE环境中，如果你追求最高输入效率，其实应该是充分利用代码补全和重构功能，你连续输入大段文本的机会根本就不多。况且为了准确性，就算我打字速度足够快，我也会优先选择复制粘贴或代码补全，减少输入错误。======================下面离题说说vim，既然题主提到想跳vim的坑，作为vimer自然是欢迎的。但首先，vim，并不会提高你的打字速度，它充其量是提高你修改文本的速度而已（个人感觉对比普通的文本编辑器惯用方式至少提高50%以上）。此外，我跳vim坑的最主要原因，根本不是打字速度，而是vim的操作方式是一套经过时间证明足够有效率且已移值到众多IDE和编辑器的通用操作方案。熟识了vim的操作，基本上能在1. Linux服务器命令行环境2. Intellij （及Jetbrain系所有IDE）3. Eclipse4. Netbeans5. Visual Studio6. Sublime Text7. ranger / vifm ( 命令行状态下的文件管理工具）中流利进行所有基本操作了。此外vim方便的文本对象，宏定义，正则查找替换，多重剪贴板（vim里叫register）都是普通文本编辑器没法比的，只能说谁用谁知道。至于说提高操作速度对编程的影响，最大好处是减少不必要的精神消耗，比如说之前我选中个字符串，要把光标移动到字符串起点引号之前，ctrl+shift+右箭头数下，后面的引号在不同的编辑器下还可能不会被选中，需要根据情况再敲一下shift+右箭头。整个过程至少有三个关注点（不同的IDE可能对选中语法结构有特殊支持，但跨编辑器的通用的方案只此一种）。而在vim操作方式下 va“ 三键搞定，省心。此外，虽然未必常见，但开发中总会有进入巅峰状态的机会。比如说你憋着屎又想在去蹲坑之前干完点什么，有时就会进入巅峰状态，思路突然异常清晰，胸有成竹就差敲进去了。这时操作流畅就能让你保持思路活跃，成功实现目标，这时就特别有满足感。老实说偶尔遇到一次这种状态是开发中一种很大的乐趣，而熟练的操作手法能让你抓住每一次这样的机会。,我觉得更重要的是熟悉IDE快捷键吧，把整个IDE大部分功能摸熟后代码里大部分字符都已经不是通过打字打出来的了，打字本身也就不太能影响效率了。
如何系统地自学 Python？,本题已加入圆桌零基础情况下，想学一门语言。另 《Python 编程入门经典》这本书怎么样，是否值得看？,"上周旁听了一个大学学长组织的线上Python交流会，里边不乏充斥着各位行业大牛，讲的内容确实精彩，可能对于Python经验5年+的人来说，是受益匪浅，欢迎程度极高，恨不得跳出屏幕来表示赞同，毕竟很多提到的问题，我在工作中也很常见，但是作为资历一般的程序员，有一些理解起来还是有些困难，评论区里同时也还有另外一种声音：我很能理解“另一种声音”，我当初也是自学Python，刚开始的时候，我连循环结构和分支结构都搞不明白谁是谁，去找有经验的人问，结果问了几回人家就烦了，所以，学习这种事，还是得靠自己。根据我自己的经验来说，想从零开始学Python，以后也确实想找相关的工作，基本是下边这三种方式：读研读博这件事时间成本比较高，我对自己没有完全的自信，所以我思考再三，还是决定踏入社会浪潮了。（但是对于学习能力强，本科也比较优秀的学生，非常建议继续读研读博，未来踏入社会起薪会非常高，我现在身边就有两个博士大神，我只能膜拜了。。。）进入社会之后，我基本就是买书和看视频自学，这回给你们来个全方位安利：Python初学者的法宝，如果你想下载Python，最好还是在这个网址去下，不要想着用一些不明来源的安装包。在这里，你不仅可以下载各种版本的Python源代码和安装程序，更有各种文献资料、Python交流社区，还会告诉你Python的最新行情，不得不感叹，这功能太强大！站内的知识点很全面，无论你想学习哪种领域，都可以轻松在这里找到合适的资料。这个学习网站很大的优势就是在浏览器上直接编写代码，轻松解决了初学者程序环境安装的困扰。如果你英文比较好，交流没有问题的话，比较推荐这个网站。这是一个课程学习网站，内容涵盖编程各个领域，目前已经和200+所大学合作课程，还可以在线读学士、硕士学位。如果说你的英文是难题，给你推荐CSDN，是国内老牌程序员社区，里边有各领域博文、资料、课程，基本很多专业问题都可以在这里查。如果是初学Python的话，没有什么编程基础，还是比较适合从这本开始学的。整体是以习题的方式开始引导初学者学习编程。这本书既有知识点的详细讲解，又有更多高阶用法的延伸，对于已经有一定基础但是掌握不牢的同学来说，无疑是值得拥有的好书。这本书对于Python的高级用法探究很深入，涵盖了数据结构、对象、并行与并发、元编程等多个方向。其实，除了学习网站和书籍，我还在网易云课堂、51、慕课、CSDN学院买了不下10套关于Python入门的课，在得到也买了时间管理课。我自己的话，因为我是想进行系统学习，也想节省一些学习时间，加上我也比较懒，非得有人督促着才能坚持不懈，所以我选了CSDN的Python训练营。最近正在学习Python的进阶领域-AI，这回同样参与了一个训练营，深刻感受到监督使人进步！不为别的，也是希望自己以后的工作范围更广，也能跟上时代的脚步。也许有人会问：“你干嘛把自己逼得那么紧，安安稳稳的不就很好了吗？”作为一个人，如果长期处于一个舒适安逸的环境，慢慢就会被这种安逸笼罩，变得懒惰，原本拥有的能力也会逐步减弱，当有一天危险来临，所在的舒适圈被打破，连生存下去都是个难题！所以，为了好好活下去，要不跳出舒适圈，要不就扩大你的舒适圈。跳出舒适圈，意味着你要彻底离开现在的区域，也许是换个城市、换个工作、甚至换个行业，让自己重新拥有危机感，让新环境逼着你去成长；扩大舒适圈，就是让自己能生存的舒适范围更大，主动学习、提升你的能力。我选择的是从零开始全方向提升，因为我想着，既然要痛苦，就直接痛苦这一次。上边就是我学过的系统课，内容很全，不过价格也相对更贵。如果有的同学目前是打算一步一步慢慢来，或者之前已经有一些基础，只是想突破单个方向，下边这几门课程我也在刚接触Python的时候买来学的，价格更便宜，内容却丝毫不打折扣，是比较值得学习的！如果是毫无基础可言，甚至不知道如何下载Python， 比较推荐这回是偏基础点的，之前也分享过两门，都可以进行参考。我买过两类数据分析课，零基础入门和多方位学习，现在直接发出来，也是为了方便不同需求的同学。说起人工智能讲的好的老师，必说他是计算机的博士，好像还参与了挺多国家级项目，我听过几次他的课和直播，老师的讲课风格很幽默，经常会举例子，让你更清晰的搞懂知识点，我觉得自己是在学习中享受。（基础知识配实战，这样学习起来相对也更容易）今天先说到这里，下回我会跟大家细说这回学AI心酸与快乐，满心干货！我的目标是进阿里，祝我幸运进阶！《Python入门教程》《Python初级入门精讲》《Python爬虫开发》《Python实战编程》《1小时掌握Python爬虫+高效学习法则》————————————————————————————————更新：说明几个事1.很多小伙伴纠结于这个一百天的时间，我觉得完全没有必要，也违背了我最初放这个大纲上来的初衷，我是觉得这个学习大纲还不错，自学按照这个来也能相对系统的学习知识，而不是零散细碎的知识最后无法整合，每个人的基础以及学习进度都不一样，没有必要纠结于一百天这个时间，甭管你是用三个月还是用一年来学习这些东西，最后学到了不就是收获吗？何必纠结于这一百天，觉得这一百天学习不完我就放弃了呢？（另，项目后面没有更新完，大家可以按照这个框架去学习，没有更新完的大家可以自行找资料。）2.还有小伙伴说这是广告，那请这位项目创作者看见这条“广告”给我打钱。真的很没劲，这个项目多少人知道，在github上也非常火，火有火的道理，对于一些学习者来说的确很有参考价值。谁打广告不找个几万分的大V，来找我这个小弟弟？更搞笑的还有说我是成都某机构培训老师？本人坐标北京谢谢，也不是什么老师，只是一名普普通通的程序员。自认为我的水平还担不起什么老师。下面是原文：Github上位名叫骆昊 (jackfrued) 的资深程序员，为大家规划了一条从“从新手到大师”的百天之路！我觉得这个模式你可以参考一下。现在已经有5w+星了！给初学者的几个建议：先附上github地址：下面是这个一百天计划里面的学习框架，我在这里放上来。Python简介 - Python的历史 / Python的优缺点 / Python的应用领域搭建编程环境 - Windows环境 / Linux环境 / MacOS环境从终端运行Python程序 - Hello, world / print函数 / 运行程序使用IDLE - 交互式环境(REPL) / 编写多行代码 / 运行程序 / 退出IDLE注释 - 注释的作用 / 单行注释 / 多行注释程序和进制 - 指令和程序 / 变量和类型 - 变量的命名 / 变量的使用 / input函数 / 检查变量类型 / 类型转换数字和字符串 - 整数 / 浮点数 / 复数 / 字符串 / 字符串基本操作 / 字符编码运算符 - 数学运算符 / 赋值运算符 / 比较运算符 / 逻辑运算符 / 身份运算符 / 运算符的优先级应用案例 - 分支结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图if语句 - 简单的if / 应用案例 - 用户身份验证 / 英制单位与公制单位互换 / 掷骰子决定做什么 / 百分制成绩转等级制 / 分段函数求值 / 输入三条边的长度如果能构成三角形就计算周长和面积循环结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图while循环 - 基本结构 / break语句 / continue语句for循环 - 基本结构 / range类型 / 循环中的分支结构 / 嵌套的循环 / 提前结束程序应用案例 - 1~100求和 / 判断素数 / 猜数字游戏 / 打印九九表 / 打印三角形图案 / 猴子吃桃 / 百钱百鸡基础练习 - 综合练习 - Craps赌博游戏函数的作用 - 代码的坏味道 / 用函数封装功能模块定义函数 - def语句 / 函数名 / 参数列表 / return语句 / 调用自定义函数调用函数 - Python内置函数 / 导入模块和函数函数的参数 - 默认参数 / 可变参数 / 关键字参数 / 命名关键字参数函数的返回值 - 没有返回值 / 返回单个值 / 返回多个值作用域问题 - 局部作用域 / 嵌套作用域 / 全局作用域 / 内置作用域 / 和作用域相关的关键字用模块管理函数 - 模块的概念 / 用自定义模块管理函数 / 命名冲突的时候会怎样（同一个模块和不同的模块）字符串的使用 - 计算长度 / 下标运算 / 切片 / 常用方法列表基本用法 - 定义列表 / 用下表访问元素 / 下标越界 / 添加元素 / 删除元素 / 修改元素 / 切片 / 循环遍历列表常用操作 - 连接 / 复制(复制元素和复制数组) / 长度 / 排序 / 倒转 / 查找生成列表 - 使用range创建数字列表 / 生成表达式 / 生成器元组的使用 - 定义元组 / 使用元组中的值 / 修改元组变量 / 元组和列表转换集合基本用法 - 集合和列表的区别 / 创建集合 / 添加元素 / 删除元素 / 清空集合常用操作 - 交集 / 并集 / 差集 / 对称差 / 子集 / 超集字典的基本用法 - 字典的特点 / 创建字典 / 添加元素 / 删除元素 / 取值 / 清空字典常用操作 - keys()方法 / values()方法 / items()方法 / setdefault()方法基础练习 - 跑马灯效果 / 列表找最大元素 / 统计考试成绩的平均分 / Fibonacci数列 / 综合案例 - 双色球选号 / 井字棋类和对象 - 什么是类 / 什么是对象 / 面向对象其他相关概念定义类 - 基本结构 / 属性和方法 / 构造器 / 析构器 / __str__方法使用对象 - 创建对象 / 给对象发消息面向对象的四大支柱 - 抽象 / 封装 / 继承 / 多态基础练习 - 定义学生类 / 定义时钟类 / 定义图形类 / 定义汽车类属性 - 类属性 / 实例属性 / 属性访问器 / 属性修改器 / 属性删除器 / 使用__slots__类中的方法 - 实例方法 / 类方法 / 静态方法运算符重载 - __add__ / __sub__ / __or__ /__getitem__ / __setitem__ / __len__ / __repr__ / __gt__ / __lt__ / __le__ / __ge__ / __eq__ / __ne__ / __contains__类(的对象)之间的关系 - 关联 / 继承 / 依赖继承和多态 - 什么是继承 / 继承的语法 / 调用父类方法 / 方法重写 / 类型判定 / 多重继承 / 综合案例 - 工资结算系统 / 图书自动折扣系统 / 自定义分数类使用tkinter开发GUI使用pygame三方库开发游戏应用“大球吃小球”游戏补充：敏捷软件开发宣言角色：产品所有者（决定做什么，能对需求拍板的人）、团队负责人（解决各种问题，专注如何更好的工作，屏蔽外部对开发团队的影响）、开发团队（项目执行人员，具体指开发人员和测试人员）。请参考2.通过数据表创建模型（反向工程）3.代码性能调优4.静态资源访问优化作者：骆昊 (jackfrued)来源：githubgithub地址：公号：聊聊Python，感兴趣的可以来找我玩，一起来聊聊Python这点事~",【实体书】Python 3版本的实体书：【Python 3版本】Python 3版本的笔记已更新完成，链接：目录：【Python 2.7版本】Python 其实挺简单的，也挺强大的。我用 Python 做科学计算，自学一年，也记了一年的笔记。笔记链接（基于Python 2.7）：,幸运的是，Python 是一门初学者友好的编程语言，想要完全掌握它，你不必花上太多的时间和精力。Python 的设计哲学之一就是废话不多说，学会一门语言的捷径只有一个： 任何一种编程语言都包含两个部分：硬知识和软知识，起步阶段的主要任务是掌握硬知识。“硬知识”指的是编程语言的语法、算法和数据结构、编程范式等，例如：变量和类型、循环语句、分支、函数、类。这部分知识也是具有普适性的，看上去是掌握了一种语法，实际是建立了一种思维。例如：让一个 Java 程序员去学习 Python，他可以很快的将 Java 中的学到的面向对象的知识 map 到 Python 中来，因此能够快速掌握 Python 中面向对象的特性。如果你是刚开始学习编程的新手，一本可靠的语法书是非常重要的。它看上去可能非常枯燥乏味，但对于建立稳固的编程思维是必不可少。下面列出了一些适合初学者入门的教学材料：Python 的哲学：学习也是一样，虽然推荐了多种学习资料，但实际学习的时候，最好只选择其中的一个，坚持看完。必要的时候，可能需要阅读讲解数据结构和算法的书，这些知识对于理解和使用 Python 中的对象模型有着很大的帮助。“软知识”则是特定语言环境下的对这些知识的学习，取决于你尝试解决的问题的领域和深度。对初学者而言，起步阶段极易走火，或者在选择 Python 版本时徘徊不决，一会儿看 2.7 一会儿又转到 3.0，或者徜徉在类库的大海中无法自拔，Scrapy，Numpy，Django 什么都要试试，或者参与编辑器圣战、大括号缩进探究、操作系统辩论赛等无意义活动，或者整天跪舔很多“大牛”都会告诫初学者，用这个用那个，少走弯路，这样反而把初学者推向了真正的弯路。选择一个方向先走下去，哪怕脏丑差，走不动了再看看有没有更好的解决途径。自己走了弯路，你才知道这么做的好处，才能理解为什么人们可以手写状态机去匹配却偏要发明正则表达式，为什么面向过程可以解决却偏要面向对象，为什么我可以操纵每一根指针却偏要自动管理内存，为什么我可以嵌套回调却偏要用 Promise...更重要的是，你会明白，高层次的解决方法都是对低层次的封装，并不是任何情况下都是最有效最合适的。技术涌进就像波浪一样，那些陈旧的封存已久的技术，消退了迟早还会涌回的。就像现在移动端应用、手游和 HTML5 的火热，某些方面不正在重演过去 PC 的那些历史么？因此，不要担心自己走错路误了终身，坚持并保持进步才是正道。起步阶段的核心任务是掌握硬知识，软知识做适当了解，有了稳固的根，粗壮的枝干，才能长出浓密的叶子，结出甜美的果实。完成了基础知识的学习，必定会感到一阵空虚，怀疑这些语法知识是不是真的有用。没错，你的怀疑是非常正确的。要让 Python 发挥出它的价值，当然不能停留在语法层面。在你面前会有多个分支：科学计算和数据分析、爬虫、Web 网站、游戏、命令行实用工具等等等等，这些都不是仅仅知道 Python 语法就能解决的问题。拿爬虫举例，如果你对计算机网络，HTTP 协议，HTML，文本编码，JSON 一无所知，你能做好这部分的工作么？而你在起步阶段的基础知识也同样重要，如果你连循环递归怎么写都还要查文档，连 BFS 都不知道怎么实现，这就像工匠做石凳每次起锤都要思考锤子怎么使用一样，非常低效。在这个阶段，不可避免要接触大量类库，阅读大量书籍的。「Awesome Python 项目」：vinta/awesome-python你可以按照实际需求，寻找你需要的类库。至于相关类库如何使用，必须掌握的技能便是阅读文档。由于开源社区大多数文档都是英文写成的，所以，英语不好的同学，需要恶补下。这里我只列出一些我觉得比较有一些帮助的书籍，详细的请看豆瓣的书评：科学和数据分析：爬虫：Web 网站：... 列到这里已经不需要继续了。聪明的你一定会发现上面的大部分书籍，并不是讲 Python 的书，而更多的是专业知识。事实上，这里所谓“跳出 Python，拥抱世界”，其实是发现 Python 和专业知识相结合，能够解决很多实际问题。这个阶段能走到什么程度，更多的取决于自己的专业知识。这个阶段的你，对 Python 几乎了如指掌，那么你一定知道 Python 是用 C 语言实现的。可是 Python 对象的“动态特征”是怎么用相对底层，连自动内存管理都没有的C语言实现的呢？这时候就不能停留在表面了，勇敢的拆开 Python 的黑盒子，深入到语言的内部，去看它的历史，读它的源码，才能真正理解它的设计思路。这里推荐一本书：另外，Python 本身是一门杂糅多种范式的动态语言，也就是说，相对于 C 的过程式、 Haskell 等的函数式、Java 基于类的面向对象而言，它都不够纯粹。换而言之，编程语言的“道学”，在 Python 中只能有限的体悟。学习某种编程范式时，从那些面向这种范式更加纯粹的语言出发，才能有更深刻的理解，也能了解到 Python 语言的根源。这里推荐一门公开课值得一提的是，这门课程对C语言有非常深入的讲解，例如C语言的范型和内存管理。这些知识，对阅读 Python 源码也有大有帮助。Python 的许多最佳实践都隐藏在那些众所周知的框架和类库中，例如 Django、Tornado 等等。在它们的源代码中淘金，也是个不错的选择。每个人学编程的道路都是不一样的，其实大都殊途同归，没有迷路的人只有不能坚持的人！希望想学 Python 想学编程的同学，不要犹豫了，看完这篇文章，,我是真正零基础开始学Python的，从一开始的一窍不通，到3个月后成功搭建了一个动态网站（没有用任何框架）。相比于计算机大牛，我更加知道一个小白将会遇到什么坑，遇到哪些难点。我把我的学习过程写在下面，并附上在每个阶段的学习资料，希望对零基础的Python学习者有所帮助。注：本文只做经历分享，不是技术探讨。在知乎上常常看到想要转行IT，或者是想学习编程但不知如何开始的朋友。回答这类问题的人往往只是列出书单资源然后给出一个大致的方向。有些朋友一开始就扎入了理论学习的汪洋大海，从苦读类似《算法导论》开始，能够坚持读下来的寥寥无几，学习的积极性也被不断的挫败感消磨的所剩无几。一直以来，编程对我而言是一种「黑魔法」般的存在。今年所以，我的心底深处一直都想变成这样的一位魔法师。今年的8月，刚好工作上想要开发一个基于微信的英语学习网站，借此机会，我决定好好学习一下编程。在此之前，我所有关于程序的知识仅仅来源于两部分，一是本科时期的C语言必修课，现在已经忘的一干二净，不过好歹我从中明白编程是怎么回事；第二部分是大概两年前由于工作关系学的一些Python，不过只是皮毛，现在忘的七七八八。简单说，我的目标是建立一个网站，不过这个网站是动态的，也就是说它能识别谁登陆，然后对不同的人显示不同的内容。而当时的现实是，我完全不明白网页是如何显示出来的？譬如每个人登陆知乎的时候看到的是定制化的页面，后台是如何基于每个ID来组织出不同的页面的？所有我们看到的问题，回答，参与的评论在背后的服务器上是以一种什么样的形式存在的？又比如为什么有些页面只能在微信端打开，在电脑上就会出错？（不知道你有没有发现这一点）当时我的心中充满了无数个类似的问号？当然如果你也是小白，一定有着同样的疑问。好处是一开始就明确了学习的目的：Web建站。所以我的学习方案基本就是通过做项目学习，哪里不懂就解决哪里，边做边学习，不断推进。另外，由于知道很多成功的网站在用Python做服务器开发，比如知乎，所以我就自然选择了Python。于是我就开始了我充满着挫败感和成就感的编程之路……从8月到12月的四个月里，除去本来的工作，为了学习质量，我会保证平均每天4个小时的学习时间，周末也不例外。另外，所有的文档，问答都尽量看英文的，这可以帮你剩下大量的时间。12月13日，我做的网站上线了，3天时间大概有5000人访问了这个网站，我有时在后台看着日志，不免有些心潮喷涌，我想把自己的经验写下来，希望对于那些有心学习编程但无从下手的朋友提供一些帮助和鼓励。1）基础刚开始的时候，我对搭建网站一无所知。为了给自己迅速建立一个框架，我在Google上面泡了整整一天，了解了HTML，CSS，JavaScript，Ajax，jQuery，React，SQL，服务器脚本等等知识，不求精通，只是了解每一项技术是干嘛的，另一方面建立起了一个学习的roadmap，这样大概知道做一个Web App需要哪些知识，分别学习的主次顺序。重点推荐两个资源：Python基础知识：Web App基础知识：@有了这个W3Schools: JavaScript：HTML & CSS : 前端是需要慢慢学习的，在看完上面的资料后，虽然能写出来一些挺漂亮的页面，但是我自己知道很多都是不符合标准的，更不要说代码风格什么的。这只能通过不断地积累和增加代码量来提高。由于明白服务器端需要耗费自己大量的时间，所以在发现自己能够按照构思勉强实现网页之后，我就把学习中心放到了服务器端上。不过每天还是会抽空写一写网页，避免手生。2）服务器端最先了解的是HTTP协议，也就是浏览器和服务器之间是如何通信的。也就是当你在浏览器里键入网址按下回车直到网页显示在你浏览器的这个过程中，浏览器和浏览器之间发生了什么事情。这是很有意思的内容，我是以读小说的心情了解了这部分内容。了解这部分后，你就会明白类似为什么有时候会有404页面？在百度搜索框里键入的搜索词是如何提交到百度服务器的？为什么重新登录知乎的时候就不用再输入密码了？之类的问题了。HTTP协议学习资料：的博客：了解了HTTP协议之后，我就多少有些入迷了。看似神秘难懂的现象其实原理并不复杂，你反而会被吸引。接下来就进入到我投入时间最多的部分了——后端开发。记得当时了解Web开发的MVC（Model-View-Controller）模式后，有一种心血喷涌的感觉，觉得太有意思了（程序员别喷，我就是这么没见过世面）。我们以知乎为例子来说明MVC是个啥：每个人的主页都是相同的布局和风格，例如最上面的菜单搜索栏，颜色分割，左边显示动态等，右边是个人信息等，然后具体的内容却因人而异——每个人的头像，名字，动态都是不一样的。那么知乎是如何保证每一个人看到的都是自己的主页呢？你可以把这个相同的布局想象成一个模板，里面有一个个空格子，当你用你的账户登陆页面时，想象你的电脑里有无数个小人根据你的账号从知乎后台的数据库里取出你的头像，动态，认证信息等等内容，然后对应着模板上规定好的位置，把对应的内容填进去。这些小人的动作实在是太快了，以至于你觉得这是在瞬间完成的。上面所说的模板就是MVC中的V，是View的缩写，负责显示。这样做的好处在于，如果知乎有一天突然想改变一下个人主页的风格，那么只需要改变这一个模板，然后几千万注册用户的主页就相应的变化了，因为模板是公用的，是不是省了很多事情？（早期的Web开发可不是这样哟，你可能要一个个用户去改，非常麻烦。）而这些小人除了摆放内容，它们真正负责的是业务逻辑，我们把他们叫做Controller，也就是MVC中的C。例如当你登陆的时候，这些小人要检查你的用户名是不是准确的，如果准确，它们要去数据库里取出你请求的信息等，如果用户名错误，它们要拦截住你的登陆。它们的职责还有很多，无法一一列举。在实际中，这些小人做的事情其实就是Python（或者其它脚本语言）做的事情。最后，MVC中的Model其实就是传给View的数据，包括上面的头像，用户名，动态等因人而异的数据。这些数据在知乎服务器上是以数据库表格（table）的形式存在的，你可以把它们想象成很多不同的excel表格，不同的表格储存着不同的信息，有些记录着知乎用户的个人信息，有些记录着回答，有些记录着评论等等，而这些表格之间又彼此联系，当你在知乎的不同网页间跳转的时候，上面说的那些小人就根据你的要求，组合对应的表格取出对应的数据，然后把他们放到模板对应的空格里，发送给浏览器。然后浏览器根据你写的CSS，用不同的颜色，大小等等，将数据很漂亮的显示出来。这样做的好处是什么呢？虽然你最终在浏览器里看到的是一个完整的页面，但是在后端逻辑上它们都是区分开的——模型（M），视图（V）和控制器（C）的区分就保证了较高的可维护性——我可以随时修改主页的显示并看到效果，同样我可以随时加入一些业务逻辑。如果你的学习坚持到这里了，首先要恭喜你。其次你可能已经知道一些非常成熟的Python Web框架了，例如Django，Flask等等，并且你可能看到了很多小白教程教你直接使用，毕竟大部分人可能觉得没有必要重复造轮子。本来为了省事，我也打算直接用框架。我是在设计数据库的时候，当时在看SQLAlchemy文档，觉得相对自己的项目SQLAlchemy太过复杂，所以我决定自己写自己的ORM（名词不懂没关系），这对于当时的我来说是一件难度非常大的事情。于是我投入了极大的精力每天都在看关于SQL和Python相关的教程和资料，现在回头看，我认为这一段时间的造轮子是提升编程能力最快的时候。比如为了写ORM，就必须去花很多时间学习SQL，去了解Python里面的metaclass，而如果用一个现成的框架，我很有可能偷懒不去关注某些细节。而不出问题还好，一旦出问题，我就只能跪。另外，造轮子迫使我在开始的时候就构思整个框架，因为我必须尽可能的考虑到所有的情况，于是就会不断的强迫自己完善知识体系，和别人的代码作对比从而改进自己的，这个过程充满了无尽的挫败感，但是得来的成就和快乐也是无可比拟的。SQL书籍：Python：Github上的优质Python资源：过程中还牵涉到部署，我的网站是跑在Linux上的。关于部署网上有非常多的优质教程，一搜一大把。这里就不再赘述。这些是我学习大致路线，当然过程中充满着小的磕磕绊绊，虽然网站上线了，貌似运行还比较顺利，但是如果以一个程序员的标准来要求自己，自己依然非常菜鸟。不过我并没有以前那样惧怕技术了，就像你明白魔术的背后的原理后，会更多的思考原理本身。很多人都推荐小白第一门语言选Python，因为语法简单。这句话只说了一半，Python确实容易上手，对初学者的门槛很低。但我发现，这也是我觉得自己的经历对小白是有价值的一个原因。因为设计一个动态的网页是一个很不错的练手Project。建立网页（Web App）会逼迫你了解从你在浏览器里键入地址按下回车到网页显示在浏览器的过程中，浏览器，网络，服务器都干了些什么。具体到技术上面，你不得不去学习前端的HTML，CSS和JavaScript，后端的脚本，数据库，操作系统等。也就是说，这个过程能够促使你去主动学习上面提到的系统知识，如果你再做另外一个项目，你就不会像现在这样无从下手，而有能力去进行一些技术性的探讨，所以我认为这是一个非常好的练手项目。1）一定要空出时间补充理论知识很多人会强调learn by doing，边做项目边学习，这也是我自己采用的方式。在这种方式中，你不断犯错，改正……学习效率非常高。但是，很多人走了极端，最后的结果就是不注意理论知识的学习。你会发现自己Google的能力越来越高，但是真实的编程能力并没有得到提升。如果有这种情况，你需要反思一下。一种可能是你太过于依赖各种成熟的框架，结果编程就变成了用「胶水」去粘合不同的框架完成需求。就好比你的Web App用了SQLAlchemy，虽然自己不太懂SQL，但是网站跑的也还不错。这时候如果数据库出现了问题，那你就只能跪了。另外一种可能是你完全沉浸在做项目中，忽略了学习理论知识。做项目虽然充满困难，但回报是强烈的成就感，很容易沉浸其中。我觉得这是极其错误的。首先半路出家的程序员都没有经过系统的学习，没有形成自己的知识体系，如果你不懂数据结构，算法复杂度，操作系统这些理论，那么你能达到的高度就极其有限。所以，在每天做项目的同时，一定要保证抽出一定的时间，恶补理论知识。这部分的书单在豆瓣和知乎上都有很多总结，可以自行搜索。2）不要太纠结于无意义的问题，比如什么框架好，XX语言比XX语言好啦这种问题。前期确定了练手项目，就去专心积累代码量，积累基础知识。那些你现在还看不懂的炫酷技术你慢慢也就能明白是怎么回事了，反而没有基础，再炫酷的框架对你而言都是天书。3）学会发问。好问题是建立在你自己已经实践或者思考的基础上问出来的，这是对自己的负责，也是对别人的尊重。不要一遇到困难就喜欢直接上网搜索：「这个问题是怎么回事啊？」，「我不明白你能不能帮我看看……」。4）学好英语。THE END最后，给自己打个广告，如果学英语，一定要关注我。,"最近，GitHub上一个关于Python的工程完工了。一个名为“暮晨”的贡献者，把一个非常有趣的Python项目，翻译成了中文版。这个项目是《What the f*ck Python!》，专门介绍 Python 里面那些奇奇怪怪的语言坑。项目的主体构成部分就是示例，一共分为5个部分，分别是：Strain your brain!/Appearances are deceptive!/外表是靠不住的!Watch out for the landmines!/小心地雷!The Hidden treasures!/隐藏的宝藏!Miscellaneous/杂项以上，总计51个示例。每一个示例的结构都是一样的，以“Mutating the immutable!/强人所难”为例：首先，会给出代码：然后，给出Output（ Python version）：然后，对意外输出的结果进行简短的描述，在这个示例中，就是：接下来，就会对示例进行说明，简要叙述发生了什么以及为什么会发生。如有必要, 也会举例说明。在这个示例中是这样的：有些地方，贡献者还会给出译注，比如整个示例中就是：其他还有50个示例，等你来看~当然，要学习一下怎么使用这个资源。项目贡献者在用法部分表示，最好依次阅读下面的示例。然后，在阅读每一个示例的时候，这样做：此外，还可以在命令行阅读 WTFpython，有 pypi 包 和 这个项目的原作者，是一个名为Satwik Kansal的印度小哥。GitHub上的介绍称，在深度学习和目前，英文版资源，标星已经8.3k了。中文版：英文原版：最后，了解更多前沿科技，请关注我们的知乎号：",如果你一直想学Python，但是不知道如何入手，那就别犹豫了。这篇文章就是为你写的。随着数据科学概念的普及，Python这门并不算新的语言火得一塌糊涂。因为写了几篇用Python做数据分析的我经常需要根据他们的不同情况，提出对应的建议。这样针对性虽强，但效率不高。这个问题，我还是写出来，让更多的人一同看到吧。有几位出版社的编辑，给我发私信，鼓励我赶紧写一本Python教材出来。我暂时还没有写Python基础教程的计划。因为在我看来，现有的学习资源有现成的资源和路径，为什么许多人依然在为学Python犯愁呢？因为学习有个效率问题。Python语法清晰明快，简单易学。这是Python如此普及的重要原因。但是，选择合适的Python学习方式，需要跟你自身的人群划分的标准是什么？不是你是否计算机相关专业，也不是你是否已经工作，而是一个重要的指标——你的你可能觉得我说的话没有信息含量。自律能力强，学得更好，地球人谁不知道？可是，自律不够强的人，难道就注定什么也不能学了？当然不是。每个人的性格都有不同的特点，没有绝对的高下之分。不信你听听自律能力也是这样。只要你能清楚认识自己，就能以更高效的方法来学习新知识和技能。下面我们分类探讨一下，不同自律能力的人，该如何学Python，才能更高效。咱们先从自律能力这样的同学，往往是三分钟热度。偶然受到了刺激，发奋要学习Python，以便投入数据科学的事业中。他会立即跑到图书馆或者书店抱回来一本《你没能坚持下来，自己肯定是有责任的。但是最大的问题，在于过度这样的同学，我推荐你到Coursera平台上，按部就班学习一门非常好的MOOC——“Programming for Everybody”。推荐这门课，是因为课程质量真是太好了。首先是教材好。这本教材的来源是有故事的。先是 Allen B. Downey 写了一本开放书籍 “Think Python: How to Think like a Computer Scientist”。这本书在Amazon上的评价是这样的：Charles Severance觉得这本书写得太好了，想把它作为教材。于是征得作者同意，大篇幅借鉴了这本书的内容架构，编写了一本 “Python for Informatics”。Charles写作这本书的时候，同时开放推出了iBook格式。里面就包含了自己的授课视频，供学生直接观看学习。后来，Charles用这本书扩展，做成了一门MOOC。2015年上线不久，硅谷资深工程师就都争相学习。Charles深谙课程迭代的技艺。他不断添加内容，完善课程体系，将一门课发展成一个专项课程(Signature Track)，并且将教材升级为 “Python for Everybody: Exploring Data In Python 3”在目前全球MOOC口碑榜上，Charles的这门课一直名列前茅。这个专项课程深入浅出讲解Python本来就很简单的语法，而且还用数据科学的一些基础工作任务，带动你去使用Python语言写简单项目。这种扎实的训练过程可以增强你的信心，激发兴趣。对于自律程度低的同学来说，下面这个特性Coursera上的课程，每周的任务很明确。练习题正确率如果不能达到80%，就不能过关。到了截止日期，如果你不能完成全部练习和课程项目，就拿不到证书。老师在前面引领你，助教在旁边督促你，平台用时间表提醒你，论坛上的同学们在用同侪压力推挤你……想偷懒？想三天打鱼两天晒网？很难。如果你的自律能力中等偏上，那么你可以选择的面就宽了。这里我给你推荐另一个MOOC平台，叫做Datacamp。我第一次接触Datacamp，是在2015年初。那时我在Coursera上选修杜克大学的统计学课程 “Statistical Inference”，配套的练习就在Datacamp上。当时这个平台就给我留下了非常深刻的印象，因为代码的运行都采用了云环境。学习者不需要在本机安装任何环境，一个支持HTML5标准的浏览器就能带给你完整的学习体验。对初学者来说，这种入门方式太好了。要知道，许多人的学习热情，就是被环境配置和依赖软件包安装的坑埋掉的。两年之后，Datacamp已经迭代得更为强大。你可以打开首页的Data Scientist with Python这个学习路径，查看其中已经提供的20门课程。这些课程涵盖了从Python基础，到数据处理，直至人工智能和深度神经网络的方方面面。所有的课程设计，都是短小精悍的。一般不超过4个小时，就可以完成某一主题的学习。这样你学起来毫不费力，可以在相当短的时间内获得反馈（练习题自动评分）和成就感（证书）。这个平台的课程，进度完全由学习者它既可以给你即时的回馈，让你时刻了解自己所处的位置进度，不会迷失方向，又能充分体验自主学习的乐趣。Datacamp的课程，一般都是第一部分免费开放。后面部分购买后才能解锁学习。如果你对自己的学习能力和毅力有信心，可以购买一个完整时间段（例如一年）的课程。在此期间，所有平台上的课程，你都可以学习，并且可以在通过后获取证书。这样的购买方案本身已经有优惠，而且每年都会有特定时段的大幅打折促销，非常划算。建议放到购物车里面多关注。这是我在Datacamp拿到的深度学习框架Keras课程证书。确实只需要几个小时的时间就能学完。成就感还是蛮强的。前面提到的课程费用不菲。Coursera上每门课平均价格在49美元左右。对来自发展中国家的学生群体，Coursera可以提供助学金。你可以根据自己的需求如实填写申请表，来获得资助。对于自律能力强的同学来说，你的选择可以变得非常简单直接——可以用最受推崇的教材，自己看书学习。的教材，其实是没有的。正如西谚有云：这个世界上，就没有哪件东西大家都说好。但口碑非常好的教材是存在的，例如这本起了个怪名字的《笨办法学Python》(Learn Python the Hard Way)。千万不要被名称迷惑，望文生义觉得这是一本糟糕的Python入门教程。恰恰相反，这本书的设计，非常适合人们的认知规律。我们学东西，由浅入深，由易到难，逐步递进。如果一味追求新知，那么之前学的东西会很快遗忘。如果总是原地打转，会带来枯燥和无聊的感觉。还记得高三做的那一年卷子吧？好的教科书，应该在每一个章节给学习者提供新的知识和内容，提出足够的挑战。但是挑战性不能高到让学习者产生挫败感而放弃。同时也不能忽视在后续内容中把前面所学知识改换面目不断螺旋上升式重复出现。只有这样才能巩固所学，让学习者感受到基础知识的作用，增强学习的愉悦感。这么说有些抽象，实际上有一本英语教材非常符合上述认知规律。就是我在课堂上和文章里反复推荐过的这一套教材：《下图是我当初学习时，照着这本书敲的代码。书中对Python基础内容训练的完备性，至今顺便说一句，这本书有中文版哦。所以如果你英语不好，完全不用担心。嘱咐一句，英语真该好好学。拓宽的不仅是你的眼界，也增加了你可能获得的机会。考虑到仔细阅读这部分的读者都是自律性很强的人，我就不用多说了。三条基本的Python入门路径讲完了。通过对自己自律能力的清晰理解，相信你可以找到一种适合自己逐渐学习和掌握Python的方式。但是完成了读书和听课，是不是就完事大吉了？当然不是。许多人在这里犯了错误。他们以为拿到了证书，或学完了教材，就算是真正掌握了Python。然后把这门语言丢弃在一旁，去刷美剧和小说了。相信我，你会如果你对于长期不接触的东西从不遗忘……去医院检查一下吧。大部分人的记忆模式，都是这个样子的：若不加以干涉，不出一个星期，你就能把学到的新知识几乎忘光。如果你不希望自己辛苦学来的Python知识被如此轻易浪费掉，怎么办？你应该实践。实践Python技能，未必一定要找个世界500强企业的核心技术部门，“996”工作N年才能完成。你可以从生活中寻找各种有趣的问题，然后思考能否用Python编程来解决它。我真正觉得自己项目非常简单，就是用Python作为胶水语言，把一系列工具连接在一起。可以把Markdown撰写的内容随心所欲一键变化成各种格式。格式包括而不限于：其中部分功能我正陆续发布在github公开项目中，地址在这个小项目，我从2014年开始做。实话实说，现在回头看当时的代码，简直惨不忍睹。但是如果你逐渐对自己的代码有了这种感觉，证明你在进步。不要指望自己一出手就能写出我在做这个项目的过程中，曾经遇到了中文编码、隐私信息存储、文件名空格处理、绝对与相对路径、发布流程划分、功能解耦合、Web图片地址附带参数……等等一系列的问题。通过回顾用git版本控制工具记载下来的日志，以及版本对比功能，你可以清楚看到自己是在何时利用什么方法解决了这些问题。然后别忘了，给自己工具箱里的新增小技能打个勾。一个个小问题逐渐被你攻克的时候，你才能真正感受到所学技能的价值，并且点滴积累自信。你学会Python了吗？你是用什么方法学会的？可否把你的学习心得体会分享给大家？对本文推荐的资源和路径，你有什么不同的意见，或者更好的建议？欢迎留言，记录下你的思考，我们一起交流讨论。喜欢请点赞。还可以微信关注和置顶我的公众号如果你对数据科学感兴趣，不妨阅读我的系列教程索引贴《,首先，我个人是参加过培训的，我是因为自学的进度非常慢，而且太考验自律了，本人综合对自己的了解才选择的培训。当然我也还是蛮赞同自学的，不过要根据自己的实际需求和情况来决定，毕竟自学的时间要长，在有些问题上解决上也要慢很多，如果时间充裕自律相对较好的还是可以选择自学的，下面是我的整理过的一篇文章，希望能对想要学习的伙伴有一些帮助吧~之前有一个回答被好多人看到，就有很多伙伴私信我说要了解学习python的一些事情，有的刚刚毕业，有的不是理科生，有的是工作了想转行，基本都是零基础，该怎么学习，其实我还是想说，python的话是相对入门比较简单的，零基础也是完全没有问题的，不过如果想要参加培训的话我个人建议可以自己先找一些线上课程自学一下，现在网上的课程也非常的多，这里个人可以多寻找两个机构的课程自己先自学一下，一是可以感受一下各个机构的课程教学风格与质量，二是可以感受一下课程难度自己能否理解接受，三是可以判断一下自己是否感兴趣，其实无论是参加培训还是自学，都还是比较需要自己的自学能力的，毕竟还是那句话，师傅领进门修行在个人，也不能完全依靠老师教了你就成神了，当然名师出高徒也是有道理的，不过名师自来都是带勤奋的，有天赋的，毕竟名师也是靠这两样才成为名师的，咱们都是普通人还是自己多吃点苦勤奋一点为好，我认为老师只是在我们学习路上，传道，授业，解惑的人。我是参加过培训的哈，我整理了一下我参加的培训班一些免费课程和资料，我放在这里，有需要的伙伴可以参考学习一下哈。我也整理过一篇文章是我学习python准备的一个经历，大家感兴趣的可以看一下。首先自学肯定是要先学会安装python，下面附带python安装包的下载 ---------------------------------------------------------------------------------------------有很多伙伴私聊我说自学的问题，这里我分享一个自学的思路吧学习python，首先根据自己零基础的情况下，为什么学习Python作为核心问题，进行了一个自我定位以及目标定位，我认为只要有一个目标，那么就找方法去打成目标就行了。完全零基础，选择学习Python主要还是因为看到大家都说Python是相对简单，比较好入门IT行业的，而目的也是希望学习完Python可以找到一份相应的工作。当然，也有很多人可能已经从事其他编程工作，但是想要学习Python以来丰富自身，提升自身的核心竞争力，我觉得这样应该会比我这类完全零基础的学习要容易快速的很多，我也搜查了一些学习方法的问答帖子，里面也看到很多推荐的学习方法，有推荐书籍的，有推荐网课的，我开始认为，看书应该是比较好的选择，因为著作成书籍，表明内容上是相对有一定的权威和系统的，同时，想到从小都是书本学习，这更能让我信服，于是我就购买了书籍，开始了我的学习计划，可是，在半强迫自己的情况下，我看了三天半书籍实在是看不下去了，看书不行，于是我就想着还是找网上的视频教程学习吧，上网一搜，真的是各家机构的教程也是琳琅满目，还真的让我不知道从哪开始学起了，这个时候真的是想有一位前辈可以给我指点一下迷津，告诉我应该先学什么，再学什么，哪些是重点知识，哪些是了解就好，就是可以给我一些学习的建议，于是我想那我可以先加入一些技术学习交流群，在里面应该可以认识到一些学习的人，于是我就开始大量的搜索加入学习群，于是在里面开始咨询学习方法，但是，这个时候我又发现，我好像一张白纸，我想问一些问题，可是我不知道该怎么问，我也只能问大家都是怎么学习得，群内的朋友也都还很热情，也和我说了很多学习方式，不过我发现每个人都有各自的学习方式，各自都有各自的理论和优势，在那么多的方法面前我再一次的有些混乱，又不知道哪一方法适合我，于是，我想到千人千面，每个人有每个人的想法，我咨询的人越多，获取的信息越多可能我就会越乱，于是我决定，于是，我并没有先着急的就找教程视频来直接学习，我现在想知道就是，应该先学什么，掌握哪些知识之后，再学什么，我觉得我应该先整理一套相对看上去系统的教程，虽然我最希望可以找到一个人给我一些这类的指引，但是奈何没有找到，那就只能自己去整理了，我根据我买的书籍目录，以及查了一些培训机构的学科介绍，教程大纲内容，进行了一个统计对比，发现其实学习的内容路径也还是有它一定的规律，那我就整理了一份知识点的目录学习路径，我按照我整理的这个学习路径上的知识点目录去查找对应的教程，这样就整理了一套自己的学习资料，整理学习路径和教程，利用了我比较多得时间，不过整理好了那么就可以开始学习了。但在查找教程的时候，又走了一些弯路，我当时只想到只要按照我整理的这个目录找到对应的教程就好了，可是在学习的时候，还是觉得知识点之间的衔接有些杂乱无章，而且每一个知识点都是不同机构课程风格不同得教程视频，这让我学上去有些别扭，而且有的老师讲的我很喜欢听，有的就不是很喜欢，于是，我就又想，那我就找我喜欢这个老师的课程就好啦，可是我找了两三天，同一个老师的教程是非常难找到公开的全套教程，这个我想也可以理解，老师也可能没时间和精力来从零开始录制全套教程，而且老师也是要工作赚钱养家生活的，于是我想那我可以找同一个机构的教程吧，这样也能最起码是课程风格一致，于是我就找到了我我认为课程比较好得教程机构，又将我的学习资料重新的整理替换了一下，果然我觉得学习感觉好了一些，而且我又找到他们的客服，要到了他们课程的一些配套资料，这对我学习来说起到了更加的有效帮助。最后，在学习完我整理的学习知识教程之后，又遇到了一个瓶颈，就是学习完知识点内容，掌握的也是七七八八，之后又不知道该怎么做了，不知道自己学习的有没有达到可以找工作的条件，于是我又查询了一些资料，可一些招聘信息，了解的一些信息主要要求说是需要项目经验，需要一些项目功能技术的掌握，那我的理解就是，已经掌握了基础知识，企业招聘人员需要掌握一些项目技术能力，去帮助解决处理问题，也就好像，最后我总结一下我学习过程中我认为比较重点的内容把至于找工作面试的事情我就不详细的写了，手敲了这么多，有点累了，最后希望我的建议可以对想要学习的伙伴有一点点帮助吧。,,,,,,,,,,,,,
如何用尽可能少的代码画出刘看山？,期待大家的文字元素创意～希望可以附上截图和代码," 有点意思，看山决定亲自下场害羞     ⁄(⁄ ⁄•⁄●⁄•⁄ ⁄)⁄ 诶？！  Σ( ° ● °|||)︴面无表情  ( • ● • )不开心   (..•˘●˘•..)哼唧       (๑ • ● • ๑)摊手     ┑(￣● ￣)┍ 掀桌     (╯ㆍ●·)╯︵┻━┻卖萌     (｡◕●◕｡)         加油    (ง • ● • )ง比心   (,,• ● •,,) ﾉ♥print("" ⁄(⁄ ⁄•⁄●⁄•⁄ ⁄)⁄"")开个小玩笑，各位大神厉害，看山佩服  ZHI——print( ⁄(⁄ ⁄•⁄●⁄•⁄ ⁄)⁄ print("" / Σ( ° ● °|||)"")print(""(╯ㆍ●·)╯︵˞ʕ̡̢̡,,•⌓•,, ʔ̢̡̢˞"")",用代码画了个3D的代码算不得少，含注释和空格有107行了。像不像就见仁见智吧，自觉，……，其实也不那么像，哈哈哈。想要尝试的各位可以去下载开源软件OpenSCAD，支持Windows、MacOS、Linux等各种常见平台。安装包只有21MB。把代码粘贴到左右代码窗口，右侧就能看到预览。有3D打印机的各位，可以把各个零件挨个导出成STL文件并打印。模型设计时已经加了0.5mm的制造公差。模型各个零件打印过程无需支撑。源码如下：三视图：打印组装过程，持续更新中：想了解OpenSCAD的可以参见以下：,写到一半我流下了悔恨的泪水：为什么我要用java看看这public static void main(String[] args) ，这System.out.print。。。去掉大部分空格可读性变差一截后：总计再次更新用一个异或奇技淫巧，现在是其实就是提醒你们，,写了俩小时，压缩的我已经忘记每一行东西都是啥了总共491个字符（如果我的word文档没忽悠我）比目前最短的 二更，总字符数降到了459个字符，我尝试过解码器也编起来，但是没有成功三更，增加了原理的说明，我想起来我是怎么写出这个程序的了，某种程度上也希望一些正在学习python的初学者们能从中学习到一些奇技淫巧四更，我灵光一现，发现了个进一步压缩编码的方法，来到448个字符让我们简单观察一下这个程序，把它一些还有一个技巧就是把常用的，名字很长的函数用一个变量代替，在文中就是注意到，这里的print是没有后面的括号的，在python中代表这个东西不是print函数的结果，而是print函数本身。所以我们在如此定义之后也可以用p来输出文字将这几点修改，并且把变量名写全之后，我们就得到了：代码的含义都在代码里，这里可以着重讲几个问题：因为ascii字符中有含义的只有95个，其他的在我的编辑器里面都不显示成字符。如果按照严格定义的ascii编码我们其实可以用128进制，但是我想这样子代码就会充斥着乱码，这是我不想看到的首先这张图的编码来自其他答主的代码，而连续的黑或者白都会被表示成连续的数量，毕竟如果变成另一个颜色那肯定是黑变成白或者白变成黑，并不需要指明变成了什么颜色。而连续的黑或者白最大的数量是62个，加一个换行符用63表示，我们也就获得了一个区间在0-63的数组，也就是能被64进制表示因为我单独写了个程序来生成这个编码，中间碰到的几个问题都是值得展开来讲的。下次更新再说以下是第一版程序执行效果：第二版程序：,"泻药记一次程序员1024比赛题目:初见题目:绘制刘看山? 还最小的代码?第一个思路就是对刘看山的图片进行二值化,再对0或255的位置填充'a','b','c','d', 见过很多大佬一行shell就搞定了,如下还有第二个要求, 代码字符量最少者胜出,  如果考虑使用外部依赖以及静态资源. 这里就需要对图片进行编码压缩,编码后字符约小越好.由于时间问题, 我这里对刘看山图片进行二值化后存储在01数组当作, 再对连续相同01进行合并处理,达到简单的编码压缩,代码如下:效果图欢迎补充",看似很简单的一个题，实际上这个题的关键点在于「代码字符量最少」，瞬间变成了一个算法优化题。 实现一个0️⃣外部依赖，无网络请求拿图，无外部图片，无第三方库，纯 JS 实现版本，最终代码如下： 解析：比如上面的刘看山 0 1 图，先计算出有多少连续的 1，比如有 29，那就先记录下 29，然后有 5 个 0，则最终字符串为  上述均为准备过程，得到压缩后的字符串之后，做字符串反向解析，36 进制数转换完之后解析 bitmap 按序输出即可 然后是 JS 的最大优势，混淆压缩！ happy coding ~,我来卡个bug语言：python准备：代码：还能再短吗（,运行结果：,“小张，你用程序给我画一条狗。我不要过程，只要结果，下班前交过来。”纯语音输入，代码含量为0,（要是不规定刘看山样式的话，感觉可以压缩巨多，建议确定一下刘看山的样式标准。）三更，由于没人重画刘看山，针对rle压缩规则优化了一下刘看山。最少字符：186字符，344字节。但是顺便弄了最少字节版本：248字符，250字节。看刘看山：最少字符实现：把之前的版本优化一下，这是最少字节数版：二更，中文版本搞出来了，字符数239，字节数503。基本上是搬运工，也没搬出啥，就不放代码了。一更：算法思路照抄 感谢大佬慷慨放码，附上回答链接：写成非交互，也就是脚本文件的话，字符数403，字节数405（因为julia异或运算用的unicode字符）但是考虑到julia的即时编译器REPL，软作用域内就不用再引入全局变量了，于是字符数来到376，字节数378，我水平挺低只会重写，应该还能再压榨一点：,输出效果如下(Linux):windows 下 dev c++ 编译， 加上颜色!,来，先上而且，仔细看一下大家能发现：下面每幅图片的而之所以显示出不同的图像，仅仅是至于如何实现，非常简单。即使不会美术的小伙伴也能轻松做到！原理就是：就这么简单。甚至，实现代码如下，采用了世界上最好的语言（嘿嘿）：PHP！OK，我是真不会画画，但是会写程序的：程序员易哥。,,不能少了Python。代码如下：使用异或改进一下：文本编辑器统计共407字符。,众所周知，用CSS能画一切！代码：,print（“ʃ ̂͜•̄ ̱̩̩̩̂ ̄͜►“）,否则就会出现：, 写了一个代码，其实还能更短一点,抖个机灵没有限制不能联网的话，其实联网下载预制的字符串比本地绘制代码要短得多甚至代码本身也可以只是一个loader，联网加载组件执行所以这个问题可以转换成如何用尽可能少的代码下载一个文件首先我们先做一个接下来就是如何下载并输出这个文件的内容fetch('这是我能想到的尽可能短的js实现，文件1和运行代码的页面放在同一个网站根目录内即可46个字符，看上去应该极限了但还可以更激进一点我们把上面那一行保存为另一个文件，文件名为2fetch('2').then(r=>r.text()).then(eval)现在砍到39个字符了，因为不过既然都用eval了，不如直接把console.log(刘看山的字符串)保存为文件3，然后fetch('3').then(r=>r.text()).then(eval),题主来发个答非所问的小细节，在这个问题页面下拉也可以看到
写代码没激情怎么办？,大学计算机狗一枚，最近感觉写代码十分没有激情该怎么办？,要激情是吧？打个广告，最近新项目来了，晚上还要加班肝代码，原来的台灯用久了发现有反光，眼睛特别酸涩，于是入手了一台Screenbar Halo屏幕挂灯，专为显示器使用者所设计。能够减少屏幕反光来护眼，此外质感和颜值非常高，推荐给大家。这个灯还是比较能耐的，usb接口，这么点功耗能整的特别亮堂。比较对我胃口。现在晚上打游戏也不会眼睛痛。虽然我不经常在家里干活，但是有这么个灯，干活或者摸鱼都比较舒服。,——————————补充：1）2）有一个非常有意思的刷题网站，刷题就跟玩游戏打怪是的，界面也非常赞。,编程本身是很枯燥的，所以你要去找一些有意思的东西做。如下是我的Idea墙，从做有意思的东西开始。: 制作程序员专属Badge制作： 成为顶尖的Web开发者的APP： GEOJSON与ElasticSearch制作GitHub大V地图 ： Django ElasticSearch Ionic 打造O2O移动应用： 游戏地图生成器PC端编辑器Web端VR应用Slide框架更多可以参见我的Idea列表：以及对应的ideabook: ,我高考超常发挥，考入自己的目标学校。选专业时选高分的专业，生怕自己的分数浪费了，因为我当时也不知道哪个专业好，喜欢哪个专业，有志于从事哪个行业。完全凭感觉，这个专业分数高，一定有前途。一共选择六个专业，加上“服从调剂”，由于分数垫底，没有资格选专业，所以我被调剂到软件学院。所以内心稍微有点不高兴，这种情绪影响了我一年。我曾有和你一样的想法，对编程提不起兴趣。大一上学期对C语言很是抗拒，现在想想，明明是很简单的数学题，当时看了就是不愿去想解决方法，因为是和编程相关的，心理有抵触。我曾一度想转专业，无奈自己大一由于没能学好基础和专业课，没有资格调剂。到了大二，有点破罐子破摔的感觉，学习知识也是东一头西一头，从文学到地理，从小说到学术，从经济到政治，反正能逃避专业课的东西我都想尝试一下，企图发现自己的兴趣来跳出软件这个坑。一年下来，一无所获是比较中肯的自评。大三也是浑浑噩噩的，依然在逃避编程，从专业课的选择上都在逃避编程。所以能动手操作的测试和作业都被我尽可能的避免掉了。到了大四，只不过是又一次循环，甚至有了船到桥头自然直的想法。在我实习三个月没写过像样的代码时，我又萌生了逃避的想法，于是我离职了。紧接着我就找到了一家非软件相关的公司，我以为我跳出了这个大坑，是的，我跳出了软件这个“坑”，然后跳进了另一个坑，是不带引号的那种坑。几个月后，我从那家公司离职了。回到家乡，我发现除了软件行业，其他行业我都干不了，我连其他行业的基本概念都不了解，连我都不相信我能胜任工作要求（由于几年的逃避，失去了自信，这真是件可怕的事情）。所以我只能找软件的工作，这一次我找了技术支持工作，你看，直到毕业快满一年了，我依然在逃避编程。我干了一年后，发现这个工作属于重复性的无技能提升的工作。但是这时我并没有醒悟，而是又拖了一年。技术支持两年后，我突然醒悟，觉得自己如果再这样下去，是要被行业淘汰的。所以我修饰着自己无开发经验的简历，想要找一份开发的工作。在我投出十几封简历后，没有收到任何目标公司的面试通知，但是很多乌七八糟的公司的电话却是不少。这让我既沮丧又恐惧。当时，也就是在一个月前，我才清醒的认识到，毕业近三年，我一直在逃避困难，已经被人落下了。此时，应届生的薪资已经无法吸引我，而按工作年限的期望薪资找工作，我连面试的机会都没有，这时我才清醒的认识到，自己选择的简单模式，已经为自己设置了陷阱，必须要选择困难模式重来一遍。该拼搏的时候选择了安逸，这笔账，生活迟早要跟你算的。一次偶然的机会，同学内推我到他的公司笔试面试，提了一个比较满意的薪资（自己觉得是可以的），最后获得了offer，顿时感觉自己的天亮了。我的笔试和面试都不错，证明我并没有我想的那么差，而我曾认为自己就是那么差。可见，没有真正的技术，连自己都会不相信自己。这真是件可怕的事。我曾看过关于“人最重要的能力是什么”的问题，有人说是学习的能力，有人说是自信。我觉得不是自信，盲目的自信会眼高手低，结果一事无成。我觉得也不是学习的能力，因为如果一个人不自信，是不相信自己能学习得了技术的。把这两点结合起来是最合适的，就是当你从内心接受它时，它也对你敞开了大门，也会接受你。现在再看当年的C语言教材，感觉很是简单。这难道是我几年来智力和理解力有所提升？不是的，只不过是我不抵触它，从心里接受了它罢了。学习的过程是枯燥的，所以我会时不时的自我反思些勉励的话记录下来，也会吸收别人的思想来激励自己。大道理不必多讲，你需要不断的给自己打兴奋剂，因为没有哪条箴言会激励你一个星期的，否则也不会有那么多人迷茫。我建议你总结几条积极的，鼓励和勉励自己的话（不必太多，够用就好）。尽量不要用消极的鞭策的话来激励自己，因为这类话很容易让你潜意识里产生逆反心理而抵触学习。所以我在学习完教程后看到这个问题，我觉得作为过来人，有必要跟你说一下你可能会走的路。如果能对你的职业生涯有一点点好的影响，我真的倍感欣慰。,大学的时候写代码是为了成绩为了技术为了未来，工作了之后写代码是为了工资为了升职为了加薪。写代码从来就不是为了有激情。公司的OS为了满足在飞机上运行的要求，进行了极其严苛的测试，基本就是写各种test和说明。是的，在你代码跑起来的时候会很爽，在设想自己程序完成之后的样子时会很爽，找到一个bug解决的时候也很爽，但是干什么有激情？去迪士尼有激情，打LOL有激情，唱KTV有激情。因此你这根本就不是什么问题，写代码没激情就对了。,写代码没激情，可能是没有融入集体学习氛围中。如果你的C++老师写了个提交作业的系统，上面有ranklist，可以查看每个同学的做题进度，你会不会有激情？也可能是对未来比较迷茫，所以漫无目的的写代码，变得机械化从而渐渐缺少激情。1.成立学习小组可以找几个志同道合的同学，一起组成一个学习小组，每次选择一个task，成员之间互相监督、帮助，一起完成，最后互相指出其他成员的优点与不足，共同进步。2.参加ACM集训队如果想要提高自己，可以参加一下ACM集训队，把自己置身于一个有学习氛围的环境，就会有竞争意识，出去参加竞赛，开阔一下视野。一旦你获得了奖项，对日后找工作也会很有帮助。3.做点有意思的东西4.做项目刷题没激情，跟老师做项目，有点牛逼的感觉，或者学校里的类似创新、创业项目的那种项目，在做项目的过程中学习进步，还能丰富日后的简历。5.确定方向在学习过程中，找到自己的兴趣点，提早确定方向，这样有利于深入学习，有了方向，要做的事情会变得很多很多。,现在看到这种问题真想引用小岳岳的口头禅对题主说：“打死你个龟孙儿！”（；￣ェ￣）作为一个快要毕业找工作的学了6年+机械专业现在准备放弃转行做IT的master来说…答主你是体会不到你现在CS出身，且能系统地培养编程能力……which means能找个好工作是多么的幸福幸运。（让你自己抱着C艹，算法和数据结构自己从零开始啃，还得一边刷着leetcode泥试试！）反正现在能让我安静地撸代码真心感觉是很lucky了…每当我撸累了，我就打开浏览器点开一个名叫“it和机械行业对比”的收藏夹，里面都是我随便百度的……简直酸爽，尽是这样婶儿的：然后我tm就有精神了！(●°u°●)​ 」……真是…好尴尬……呀(╯°□°）╯︵ ┻━┻,李敖有句话是有个回答是很多时候我们躁动不安，觉得自己对于当前做的事情缺乏激情，而言下之意是只要我有了足够激情，就能完成的特别好。这和“我家孩子很聪明啊，就是不努力”是一回事。大部分事情并不需要什么天赋或者激情才能完成，只要有切实可行的目标、合理的计划和风雨无阻的执行力就够了。很多时候我们觉得没有激情或者没有兴趣，只是因为在所做的事情上没有成就感，不能得心应手，打个不恰当的比方：玩游戏时我们最喜欢的既不是毫无挑战的幼儿益智，也不是超变态的抖m系列。最能吸引玩家的往往是有挑战性，却在能克服的难度之内。生活中的事情也是差不多的道理，没激情，可能是因为你正在做着无趣的简单重复工作，也可能是远超你能力的任务。前者需要自己调整工作内容，后者需要加强自身基础能力。,✔没激情的是给别人写代码✔给自己写代码的永远有激情，开个小项目吧。✔其实激情的也就是代码前的构思，码代码只是个验证的体力活。可能写到一半就累了。这时候出去走走休息下。看看那山那水那人。,第一、逛淘宝，买一套合适的女装。第二、穿上女装。第三、开始写代码。你会发现，女装写代码，专注度增加50%，亢奋度增加100%，不但有了激情，bug也少了。,最后祝您身体健康 再见分享今菁的歌单《学霸专用，脑细胞工程背景乐》,"告诉自己,这行代码五块，这行代码十块...",现在写代码都俩显示器，一个放片，一个写代码,当你发现生活里面太多蛋痛的时候太多没办法去控制的事情出现你会发现能静静写码是种幸福什么都不用想 一切都是自己迟早能把握的这个时候你会发现自己满满的动力ˊ_>ˋ,要不 ，试试这个？？？…,我推荐你连一根电线在脑后，10分钟不写代码就电一下,你得找个女朋友，有家庭的压力。怎么？你和我一样没有（doge。不急，不急。推荐插件 - Rainbow Fart（系统，定制化不管你是躺着敲，坐着敲，单手敲，不过一些需要细致的代码还是不建议的，毕竟会影响思路的。,写代码遇到低潮，我一般就换种编程语言写。,代码只是工作不是生活 把激情放到生活中 把冷静留给代码,记住你写的不是代码是人民币，你不是程序员，你是印钞机。好了，现在有激情没。
如何入门 Python 爬虫？,,“入门”是良好的动机，但是可能作用缓慢。如果你手里或者脑子里有一个项目，那么实践起来你会被目标驱动，而不会像学习模块一样慢慢学习。另外如果说知识体系里的每一个知识点是图里的点，依赖关系是边的话，那么这个图一定不是一个看到前面很多答案都讲的“术”——用什么软件怎么爬，那我就讲讲“道”和“术”吧——爬虫怎么工作以及怎么在python实现。先长话短说summarize一下：你需要学习以下是短话长说：说说当初写的一个集群爬下整个豆瓣的经验吧。1）首先你要明白爬虫怎样工作。在人民日报的首页，你看到那个页面引向的各种链接。于是你很开心地从爬到了“国内新闻”那个页面。太好了，这样你就已经爬完了俩页面（首页和国内新闻）！暂且不用管爬下来的页面怎么处理的，你就想象你把这个页面完完整整抄成了个html放到了你身上。突然你发现， 在国内新闻这个页面上，有一个链接链回“首页”。作为一只聪明的蜘蛛，你肯定知道你不用爬回去的吧，因为你已经看过了啊。所以，你需要用你的脑子，存下你已经看过的页面地址。这样，每次看到一个可能需要爬的新链接，你就先查查你脑子里是不是已经去过这个页面地址。如果去过，那就别去了。好的，理论上如果所有的页面可以从initial page达到的话，那么可以证明你一定可以爬完所有的网页。那么在python里怎么实现呢？很简单写得已经很伪代码了。所有的爬虫的backbone都在这里，下面分析一下为什么爬虫事实上是个非常复杂的东西——搜索引擎公司通常有一整个团队来维护和开发。2）效率问题出在哪呢？需要爬的网页实在太多太多了，而上面的代码太慢太慢了。设想全网有N个网站，那么分析一下判重的复杂度就是N*log(N)，因为所有网页要遍历一次，而每次判重用set的话需要log(N)的复杂度。OK，OK，我知道python的set实现是hash——不过这样还是太慢了，至少内存使用效率不高。通常的判重做法是怎样呢？注意到这个特点，url如果被看过，那么可能以小概率重复看一看（没关系，多看看不会累死）。但是如果没被看过，一定会被看一下（这个很重要，不然我们就要漏掉一些网页了！）。 [IMPORTANT: 此段有问题，请暂时略过]好，现在已经接近处理判重最快的方法了。另外一个瓶颈——你只有一台机器。不管你的带宽有多大，只要你的机器下载网页的速度是瓶颈的话，那么你只有加快这个速度。用一台机子不够的话——用很多台吧！当然，我们假设每台机子都已经进了最大的效率——使用多线程（python的话，多进程吧）。3）集群化抓取那么，假设你现在有100台机器可以用，怎么用python实现一个分布式的爬取算法呢？我们把这100台中的99台运算能力较小的机器叫作slave，另外一台较大的机器叫作master，那么回顾上面代码中的url_queue，如果我们能把这个queue放到这台master机器上，所有的slave都可以通过网络跟master联通，每当一个slave完成下载一个网页，就向master请求一个新的网页来抓取。而每次slave新抓到一个网页，就把这个网页上所有的链接送到master的queue里去。同样，考虑如何用python实现：代码于是写成好的，其实你能想到，有人已经给你写好了你需要的：4）展望及后处理但是如果附加上你需要这些后续处理，比如如你所想，这里每一个点都可以供很多研究者十数年的研究。虽然如此，所以，不要问怎么入门，直接上路就好了：）如果学完了爬虫你对搜索引擎还感兴趣，也欢迎阅读我正在写的教程：我会一直更新，我自己的公号 ,看了大部分回答不禁叹口气，主要是因为看到很多大牛在回答像“如何入门爬虫”这种问题的时候，一如当年学霸讲解题目，跳步无数，然后留下一句“不就是这样推嘛”，让一众小白菜鸟一脸懵逼。。作为一个0起步（之前连python都不会），目前总算掌握基础，开始向上进阶的菜鸟，深知其中的不易，所以我会在这个回答里，尽可能全面、细节地分享给大家从0学习爬虫的各种步骤，如果对你有帮助，请点赞~-------------------------------------------------------------------------------------------------                               ||                              ||                              ||（注：这里并非要求“掌握”，下面讲的两点，只需要先了解，然后通过具体项目来不断实践，直到熟练掌握）NO.2  XPATH：高效的分析语言，表达清晰简单，掌握了以后基本可以不用正则NO.3  Beautifulsoup：No4. JSONpath￼￼抓包类的爬虫（通常是动态网页），往往需要json的加持。更多官方文档看此：                              ||                              ||                              V 非常不错的xpath测试工具，但是有几个坑，都是个人踩过的，，在此告诫大家：                               ||                              ||                              V                              ||                              ||                              V||||V||||V||———————————— 乱入的分割线 —————————————然后学习编程关键的是学以致用，天天捧一本书看不如直接上手操练，下面我通过实际的例子来讲解爬虫——比如最近，楼主在豆瓣上认识了一个很可爱的妹子，发现她一直会更新签名和日志，所以没事就会去她主页看看，但一直没有互相加好友（作为一只高冷的天蝎，怎么可以轻易加好友嘛！而且加了好友，你更新什么都会收到推送，那多没意思啊！一点神秘感都没有了！），可还是想及时获得妹子的最新动态，怎么办？于是我就写了个70几行的python脚本，包含爬虫+邮件模块，跑在家里的一台闲置笔记本上，通过计划任务每准点抓取妹子的签名和最新文章一次，发送到我的邮箱。。嗯，其实是很简单的技术，，代码如下所示：怎么样~是不是很简单~======,以下是我学多图预警！以下奉献一段爬取知乎头像的代码结果：：挖数（ID:washu66），对于Python的初学者，推荐这门免费公开课：,呃本来只是想给题主一个传送，因为本身也是一个Python爱好者。简单介绍一下我的那个入门教程，其实根本算不上教程，基本上算是一个学习的笔记，很多内容都是从网上整理然后自己实践得到的结果。如果说深入学习爬虫，还是建议那本《Python爬虫的学习，最主要的是多摸索，多试验（哪个不是这样）。先从最简单的例子做起，比如爬取百度主页，爬取百度图片，然后正则，巴拉巴拉。我的学习笔记可以作为一个参考的索引，里面很多东西没有深入探讨，因为毕竟当时我也只是一个小菜（现在也差不多）。给初学者一个入门的途径，接下来的路还是要自己走^_^至于匿名、个人习惯潜水。继续匿了。推荐一本朋友写的爬虫教程，崔庆才 著，Python 3网络爬虫开发实战。利益相关：作者是我学弟。以前写过一个爬虫入门的系列，传送：比较入门，不过多接触一些小demo没有坏处哈,"本回答针对初学者，我会用最简单的案例告诉你如何入门想要网络爬虫，其实叫作就是归纳为四大步：这会涉及到数据库、网络服务器、HTTP协议、HTML、数据科学、网络安全、图像处理等非常多的内容。但对于初学者而言，并不需要掌握这么多。如果你不懂python，那么需要先学习python这门非常easy的语言（相对其它语言而言）。编程语言基础语法无非是数据类型、数据结构、运算符、逻辑结构、函数、文件IO、错误处理这些，学起来会显枯燥但并不难。刚开始入门爬虫，你甚至不需要去学习python的类、多线程、模块之类的略难内容。找一个面向初学者的教材或者网络教程，花个十几天功夫，就能对python基础有个三四分的认识了，这时候你可以玩玩爬虫喽！当然，前提是你必须在这十几天里认真敲代码，反复咀嚼语法逻辑，比如列表、字典、字符串、if语句、for循环等最核心的东西都得捻熟于心、于手。教材方面比较多选择，我个人是比较推荐如果想少走弯路，不妨看看一些视频课程。自制力比较差的小伙伴，跟着老师把python基础走一遍，效率非常高。前面说到过爬虫要爬取的数据藏在网页里面的HTML里面的数据，有点绕哈！维基百科是这样解释HTML的总结一下，HTML是一种用于创建网页的标记语言，里面嵌入了文本、图像等数据，可以被浏览器读取，并渲染成我们看到的网页样子。所以我们才会从先爬取HTML，再 解析数据，因为数据藏在HTML里。学习HTML并不难，它并不是编程语言，你只需要熟悉它的标记规则，这里大致讲一下。HTML标记包含标签（及其属性）、基于字符的数据类型、字符引用和实体引用等几个关键部分。HTML标签是最常见的，通常成对出现，比如这些成对出现的标签中，第一个标签是开始标签，第二个标签是结束标签。两个标签之间为元素的内容（文本、图像等），有些标签没有内容，为空元素，如以下是一个经典的HTML文档由嵌套的HTML元素构成。它们用HTML标签表示，包含于尖括号中，如在一般情况下，一个元素由一对标签表示：“开始标签”在编写python爬虫程序时，只需要做以下两件事：这两件事，python都有相应的库帮你去做，你只需要知道如何去用它们就可以了。首先，发送HTML数据请求可以使用python内置库urllib，该库有一个urlopen函数，可以根据url获取HTML文件，这里尝试获取百度首页“看看效果：我们看一下真正百度首页html是什么样的，如果你用的是谷歌浏览器，在百度主页打开设置>更多工具>开发者工具，点击element，就可以看到了：对比一下你就会知道，刚才通过python程序获取到的HTML和网页中的一样！获取了HTML之后，接下就要解析HTML了，因为你想要的文本、图片、视频都藏在HTML里，你需要通过某种手段提取需要的数据。python同样提供了非常多且强大的库来帮助你解析HTML，这里以著名的python库BeautifulSoup是第三方库，需要安装使用。在命令行用pip安装就可以了：BeautifulSoup会将HTML内容转换成结构化内容，你只要从结构化标签里面提取数据就OK了：比如，我想获取百度首页的标题“百度一下，我就知道”，怎么办呢？这个标题是被两个标签套住的，一个是一级标签<head><head>,另一个是二级标签<title><title>，所以只要从标签中取出信息就可以了看看结果：这样就搞定了，成功提取出百度首页的标题。第一步先获取该网页所有图片标签和url，这个可以使用BeautifulSoup的findAll方法，它可以提取包含在标签里的信息。一般来说，HTML里所有图片信息会在“img”标签里，所以我们通过findAll(""img"")就可以获取到所有图片的信息了。看看结果：打印出了所有图片的属性，包括class（元素类名）、src（链接地址）、长宽高等。其中有百度首页logo的图片，该图片的class（元素类名）是index-logo-src。可以看到图片的链接地址在src这个属性里，我们要获取图片链接地址：结果：获取地址后，就可以用urllib.urlretrieve函数下载logo图片了最终图片保存在'logo.png'本文用爬取百度首页标题和logo图片的案例，讲解了python爬虫的基本原理以及相关python库的使用，这是比较初级的爬虫知识，还有很多优秀的python爬虫库和框架等待后续去学习。当然，掌握本文讲的知识点，你就已经入门python爬虫了。加油吧，少年！如果你想学习使用requests + xpath，请看这篇回答：","如果学会了python的基本语法，我认为入爬虫是很容易的。我写的第一个爬虫大概只需要10分钟，自学的 scrapyd ,  看官方文档花了20分钟，因为我英文不是很好，很多单词需要搜索一下。再接触到了 requests , lxml ，配合基本库 urllib, urllib2 就几乎无所不能了。后来有人推荐我用 BeatufulSoup  之类的库，但其实原理都差不多。一、入门爬虫的干货 0. 爬虫的基本思路 a. 通过URL或者文件获取网页，b. 分析要爬取的目标内容所在的位置c. 用元素选择器快速提取(Raw) 目标内容d. 处理提取出来的目标内容 （ 通常整理合成一个 Json） e. 存储处理好的目标内容 （比如放到 MongoDB 之类的数据库，或者写进文件里。） 1. 为什么我入门爬虫那么快，我是不是在装？ 答：我自己总结了一下，在接触爬虫之前：       a. 我挺了解HTTP 协议（看了《HTTP权威指南》），b. 我写过基于Flask框架的后端（大概三年前@c. 我写过前端(HTML+CSS+JS)，了解什么是DOM ，会一点jquery。 d. 正则也是勉强够用的。 e. 本人大学也是计算机专业，学习挺认真的。 f. 所以算是厚积薄发。 2. 那么毫无专业基础，也没有前后端基础的人应该怎么办？ 答：那当然要超过半小时啦。先花点时间去大概了解以下内容： a. HTTP协议的请求方法，请求头部，请求数据b. 大概了解一下什么是 cookie c. 学一点HTML和元素选择器 d. 学会使用Chrome 的 开发者工具ps, 阮一峰老师的技术入门博客写得很不错，除此之外，3. 放一个新鲜出炉的代码，看懂就能入门了：4. Python 爬虫常用的库是哪些？入门应该掌握哪些库？答：网上有很多相关的资料，但是我个人觉得新入门的人，不需要也不应该一下子接触所有的库。正如幼儿刚开始学说话的时候，不应该同时教普通话粤语闽南语英语。 我个人认为，学会 requests 和 lxml ，就可以入门爬虫了。二、一点点涉及爬虫进阶的分界线 0. 知乎上很多爬虫代码，一个函数几十行，是很不好的。应该尽量减少重复代码。 1. 重要的事情说三次，函数不是越长越好， 好代码应该简单易懂好维护！函数不是越长越好， 好代码应该简单易懂好维护！ 函数不是越长越好， 好代码应该简单易懂好维护！ (放在进阶是因为能做到这一点的爬虫代码不多，很多都一团乱麻，坑死接盘侠)2. Scrapy + MongoDB + Redis  分布式爬虫系统其实不复杂。a）. Redis 用来存储要爬取的网页队列，也就是任务队列 b）. MongoDB  用来存储爬取的内容结果。c) . Scrapy  里放爬虫crawler , 分别爬取不同的网页内容，ps：分布式这个东西，听起来很恐怖，但是拆开了也就这样。所以不用害怕。*************************-----  讲事故的分割线  ----- ************************* 曾经在某创业公司被赶鸭子上架（我最初是一个后端程序员，现在成分有点复杂，一言难尽），要在一星期内跟一个分布式爬取各大网商（包括淘宝天猫京东等十几家网商，Scrapy + MongoDB + Redis）的数据。当时差点吓坏我了，因为没写过爬虫。  然后leader 给我的线索只有 基本框架是 Scrapy。 也许是无知者无畏， 也没想到去问谁，就自己看了 Scrapy 的文档，半小时就写出来了。后来就很顺利把分布式爬虫系统搭起来了。就这样，我做到了。当然，加了不少班。ps:  用很多的机器，代表需要爬取的爬取的数据量很多，但是和项目的复杂程度不一定相关。所以不要害怕。害怕也没用，需求来了，一边颤抖一边加班也要写完代码的。pps: 你们要复制粘贴就能跑的代码--- update@20200927 --- 原答案写于 20170506，这三年 python添加了很多新的语言特性，scrapy 在我吐槽过后不久也开始全面支持了 py3,  py2 在 2020年初已经被官方全面下架, 知乎版本从后台到 APP以及前端也做了大量的修改,  所以，别再问我为啥上例代码跑不动了，我也懒得再改了。总之，不要总想着抄代码，要学会理解代码后自己写。",——————最重要的话写在前面——————0、1、带着一个目的来学爬虫。#我的目的实现了…所以我来写这个回答了。2、3、举个印象最深的例子。我在统计知乎回答voters的具体情况的时候（后面会介绍）发现知乎的数据是这样发送的。什么鬼（摔）。等到我辛辛苦苦用正则把里面的信息提出来的时候发现我得到的数据是这样的…我的内心是崩溃的……问题很明显是编码问题……用户那一列全部是unicode编码……转成中文就好了嘛……我刚开始也是这么想的…当我尝试了各种encode和decode…以后整个人都不好了。大概是这样的。我用Shell演示一下…应该能看懂。但是我的字符串是自动获取的啊，怎么可能挨着用 u' '赋值……于是我开始了漫长的搜索之路……在看了无数篇重复度高于百分之80的关于编码的文章后，在我都快要放弃的时候…看到了这个…大概就是这样。所以例子不多言了。后面还有很多。——————正文1：我的爬虫入门，不谈学习，只聊项目（代码已贴）——————前面说到学爬虫需要一个目标。那我的目标是什么呢？听我慢慢讲。前些日子我回答了一个问题可是突然有一天呢，我发现突然就出现了一个300赞的回答…当时那个问题的关注似乎还不到300。我百思不得其解…但是我看了看那个回答的赞同和答主的主页。大概是这样的：然后我隐隐觉得…可能会是刷赞？当然我们不能恶意地去揣测别人，要拿数据说话，毕竟知乎现在的三零真实用户还是蛮多的，不一定都是水军的小号。于是我一个从来没有学过爬虫的人就开始学爬虫了…然而并不一帆风顺。首先是知乎显示“等人赞同”的方式做了修改，参见其次我刚开始的时候不会维持登陆…每次抓到的数据里都有很多的“知乎用户”（也就是未登录状态下抓取不成功）。为了行文的连贯我跳过中间学习时做的几个小爬虫…直接放我做成功的结果吧。选取的样本回答依次为：感兴趣的可以下载数据结论就是……没有结论。话说我回答的那个三零用户比例也好高啊……我真的没有刷赞我保证！（话说我的赞里面要是有水军的话我会很伤心的……我一直以为是我写的好他们才赞我的QAQ）到这里第一个项目就结束了…这个我暂时不贴代码…代码不完善…还得有点小修改。两天内放上来。——来贴代码——使用前请填写config.ini文件，cookie不用填。依然不完善。是这样的，知乎在获取“等人赞同”的时候有一个很畸形的地方在于……答案的id很畸形。比如我现在这个答案。当我点击“等人赞同”的时候。抓包得到请求地址。我用的是Firefox的Firebug这个地址是这样的：如果你继续往下拉，知乎会自动加载更多用户，你会得到形如这样的地址：分析这个地址的构成就会发现/answer/这里应该是这个回答的唯一id，而这个id显然与上面的所以我没办法实现完全的自动化…你如果想爬指定的回答，似乎得先手动抓包了 QAQ抓包的示意如上，打开网络面板，点击“等人赞同”，找到地址中的数字就可以了。如果你会抓包了请接着看下去。代码的下载地址在上面的github。Python版本为2.7，希望你们会用pip安装依赖的库。简单说几个方面。1、知乎的登陆。我模仿了 在实现了登陆之后，只要使用s.get(url)得到的页面都是登陆成功的状态。//2、获取数据假如我们获取到了单页数据，那么使用正则可以很简单地获取到想要的数据，具体参见代码。我们需要做的，其实是获取那些需要爬取的URL。通过上面对于网址的分析我们可以发现，网址的组成为domain/answer/ans_id/voters_profile?total=xxx&offset=xx&...后面那堆乱码不重要，重要的是total和offset，每次会展示出10个用户的数据，所以我们只需要获取到点赞的总数total，就可以知道需要循环多少步（total/10），注意从是0开始，不然会漏掉前十个数据。而这也就是我在3、改进我们在其中最关键的地方在于可是这样做有一个问题，如何控制循环呢？假如我们去看最后一个页面的话，会发现是这样的。。而我们知道（不知道的你现在知道了），所以我写了其中核心的改动是这样就实现了程序每次爬取页面时从页面中获取地址，而不是人为构造地址循环。下面是原来的做法。讲实话我不知道这两种写法哪种好，但我还是蛮高兴自己发现了第二种做法。于是我做了一个运行时间的测试…运行结果如下：构造地址的办法用时451秒，第二种办法用时251秒。……我不知道为什么方法二会比方法一快，可能是网速吧……QAQ。有了解的前辈还望告知原因…到这里也就结束了。最后的结果是写入excel的，有知友说让我去学习csv，已经在看了，不过这次还是用的让人又爱又恨的excel。按照惯例写To-dos：——更新完毕，大家学习愉快，共同进步————在..\Python27\Lib\site-packages\下新建添加代码——————正文2：学习路上顺便写的项目——————在学习路上写了许多类似test的小小项目，就不赘述了。下面贴出来三个还算有结果的。1、抓取知乎话题下面的问题，分析容易得赞的问题具体描述在 代码在2、写完1中项目以后。我爬取了爬虫话题分类下面的所有回答。结果然后我从其中挑选了“关注量/回答量”较大的问题（也就是有人关注但有效回答较少）写了以下两个回答，大家可以看看。——————结语：谈谈学习——————至此我能说的就说完了。鼓起勇气来回答这个问题，不知道自己有没有资格。毕竟自己也就才学了一周多一点。自认为还谈不上入门……因为不会的实在太多。系统学习爬虫的思路别人讲的肯定比我好。我的经验在开头已经说过了……如果一定要再补充写什么，贴上我之前回复知友的评论吧。首先要带着一个目的去学，这个目的不能太复杂，不能一上来就搞那种需要模拟登陆，需要js动态实现的网站，那样你会在登陆那儿卡很久，又在js实现那儿卡很久，很容易挫伤学习积极性。比如我最初的目的就是爬知乎。知乎登陆/不登陆数据会有差别，比如抓不到某些人的数据，返回“知乎用户”这种。有了目的，你需要一些基础知识。html是什么，标签是什么，浏览器和服务器之间通信（比如抓包）。爬虫的原理就是要把网页的源码整个下载下来，然后去里面寻找我们需要的信息。所以首先你得能获取正确的网址，然后通过配置你的程序（Headers伪装浏览器，代理防止封ip等）来成功访问网页并获取源码。…………诸如此类的基础知识，其实特别简单。你可以去找一些爬百度贴吧，爬煎蛋，爬有了源码你需要去里面寻找东西，比较简单的有正则表达式，更方便的有BeautifulSoup。对json解析有json。等等。最后你可能需要一些模块化的思想。比如我在写爬知乎问题的时候，写了一些代码来让它把输出的结果自动保存到excel里…那我是不是可以把写入excel这个行为单独抽出来，定义为一个方法。以后每次遇到需要excel的地方我就拿过来改一下就能用。同样的思路，登陆过程，post数据的过程，解析数据的过程，是不是都可以自己慢慢积累为模块。就好像你有了很多乐高积木，以后再做的时候就不需要做重复的事情，直接搭积木就好~最后感谢一下在我学习过程中参考过的别人的回答和博客。太多了无法一一列举。再次感谢。。你还在等什么？,个人觉得：1. 打开网页，下载文件：这几个库有它们各自的功能。配合起来就可以完成爬取各种网页并分析的功能。具体的用法可以查他们的官网手册(上面有链接)。做事情是要有驱动的，如果你没什么特别想抓取的，新手学习可以从这个实在闯不过去，再到学完这些基础，再去学习scrapy这个强大的爬虫框架会更顺些。这里有它的感谢大家支持，改了改链接的格式，好看多了，呵呵=============================到期，闯关不再维护了。感兴趣的可以看这里lesson模块是闯关的源码，用,其实写爬虫是一个很微小的事情， 在其实拿到数据怎么用，比如做数据分析，做创业项目原始启动数据，数据可视化等等。那我就利用Web开发的优势，把数据在页面上展示出来吧。无图无真相，先上图：这是IPhone打开看到的：移动版的图有点糊，是因为使用了小尺寸的图片，担心太浪费读者的手机流量。我刚爬了网易云音乐精彩评论， 其中包含了 28925 个歌手（组合）演唱的 710182 首歌曲中的 720699 条评论。它们都在这里 我在用随机刷着玩的时候，看到了这么一条：AJAPKK：我就点进去听了下这首其次是发现最热的评论中薛之谦的歌曲占了好几个，好吧我得先承认，之前认为喜欢参与综艺节目的歌手歌唱的都不行，尤其薛之谦以段子手而著名。但是看到总榜之后，我还是挨个听了他的歌，觉得其实还行。在知乎，感觉没用过Python写爬虫都不好意思和人打招呼。我想写篇爬虫的文章，所以就开始找需求，其实一开始我是准备爬豆瓣害羞组（不懂得可以搜一搜），但是连续2个深夜2点去蹲守，发现现在那几个小组不够劲爆，而且量也太少，而且担心发了文章有人举报我 ~=(๑•́ ₃ •̀๑) ，所以作罢。上班的路上，除了看kindle，我也经常会带着耳机听网易云音乐（简称网云吧）里面收藏的歌，额，其实经常还能看到好多好玩的评论的，有辣眼睛的，有悲伤的，有总结很精辟的，有讲一些不是同年代人不会懂的。可以先预览下 等不及了？ 它们都在这里 这个项目地址是： 1. 后端： Flask + Mongoengine + Mako + requests + Redis + lxml + 2. 前端：React + Mobx + Fetch + Material-UI + ES6 + Webpack + Babel今天先和大家聊聊写个爬虫需要熟悉哪些知识，思路是什么，怎么实践的，欢迎关注专栏，节后我再聊后端和前端的实现， 也有使用Flask的经验。既然要爬整站的热门评论，就要找到「那网云呢？评论在歌曲下，歌曲在歌手下。找到全部歌手就好了。所以先爬 其次是预估最后的结果量。其实我这几十万的只是网云评论数据的一个小小小子集，主要是看爬取要花的时间，以及可提供存储的空间。对这个需求来说，有些歌曲都是几十万个评论，我用一台非闲置的服务器抓取，肯定一年也抓不完，1. 每个歌手只抓取Ta最热门的50首歌曲。2. 每首歌只要最热的前10条评论。当时目测歌手数量在1-2w，而有些冷门歌手没有50首歌曲，或者热门评论不足，也就是大概200万条左右（理想情况下 1-2w * 50 * 10）。实际上和我预期的少了不少，但是还是让我的1G VPS捉襟见肘了... #论确定需求的重要性#我使用过各种解析页面的库，现在一般只使用BeautifulSoup（bs4）或者lxml，如果页面比较简单，标签写的比较严谨且需求单一或者一次性一般都用BeautifulSoup，比如豆瓣；复杂的、未来会一直都在用的选择lxml，比如淘宝这种页面被各业务线拼的模板。那为什么要用xpath，假如你只是爬一个站，其实无所谓，假如你要爬各种同类型的网站，比如豆瓣东西的接着说 concurrent.futures， 这是一个在Python 3.2 的时候就被放进标准库的模块，它高度抽象出了异步执行任务的接口，把队列的使用隐藏起来，而且多进程和多线程接口统一，对于使用来说，切换多进程和多线程很简单。这比你写一大坨的多进程或者多线程的代码要简单很多。它的我们这个需求中抓取逻辑中，这样使用：from concurrent.futures import ProcessPoolExecutor                                                                 可以把它理解成一个2个进程的进程池。如果你的服务器CPU个数更多，处理能力更强，不要吝啬加大这个值哦。最后说requests。这个太有名，不用它的人可能不理解为啥都用它，它的说明是「Python HTTP Requests for Humans」，是的，其实并没有人要用它，你得自己写一大坨的代码才能支持会话，Cookie，代理等需求。对于没有自虐倾向的人来说，Python标准库提供的方案确实太底层了。我之前还特意研究了下为了这么好的东西不直接放进标准库？ 看 所以要准备一堆可用的代理IP，如果公司有额外的比较闲的IP最好了，闲着也是闲着，在不影响正常业务的提前下，多换IP。否则就要想办法获取免费代理。我的书中这个地方有写。2. 3. 4. 首先一定要防止「由于异常等原因造成爬虫程序错误，重新启动还会重新爬」的尴尬。我建了一张Process表，用来存爬取的状态：开始爬取置状态为「PENDING」，抓取完成置状态为「 SUCCEEDED」（当然也有失败，比如页面解析未覆盖到情况造成的失败，之后失败的状态应该没有条目才对，否则就要去兼容）。每次抓取程序启动都会检查哪些PENDING的先抓完，抓过的直接忽略去下一个。真的数据Model包含4个：Artist（歌手）、Song（歌曲）、Comment（评论）和User（评论人），我们感受一下抓取的过程（截取重要部分）：def parser_artist(artist_id):                                                                                      整体就是这样。整个抓取解析的流程的代码加上空格是110行。其中的热门评论是通过API获取的，思路可见 原文在这里：  ,如果你仔细观察，就不难发现，懂爬虫、学习爬虫的人越来越多，一方面，互联网可以获取的数据越来越多，另一方面，像 Python这样的编程语言提供越来越多的优秀工具，让爬虫变得简单、容易上手。利用爬虫我们可以获取大量的价值数据，从而获得感性认识中不能得到的信息，比如：爬取知乎优质答案，为你筛选出各话题下最优质的内容。 抓取房产网站买卖信息，分析房价变化趋势、做不同区域的房价分析。爬取招聘网站各类职位信息，分析各行业人才需求情况及薪资水平。比如你要做一个推荐系统，那么你可以去爬取更多维度的数据，做出更好的模型。爬取知乎钓鱼贴\图片网站，获得福利图片。这些事情，原本我们也是可以手动完成的，但如果是单纯地复制粘贴，非常耗费时间，比如你想获取100万行的数据，大约需忘寝废食重复工作两年。而爬虫可以在一天之内帮你完成，而且完全不需要任何干预。对于小白来说，爬虫可能是一件非常复杂、技术门槛很高的事情。比如有的人认为学爬虫必须精通 Python，然后哼哧哼哧系统学习 Python 的每个知识点，很久之后发现仍然爬不了数据；有的人则认为先要掌握网页的知识，遂开始 HTML\CSS，结果入了前端的坑，瘁……但掌握正确的方法，在短时间内做到能够爬取主流网站的数据，其实非常容易实现。但建议你从一开始就要有一个具体的目标，你要爬取哪个网站的哪些数据，达到什么量级。在目标的驱动下，你的学习才会更加精准和高效。那些所有你认为必须的前置知识，都是可以在完成目标的过程中学到的。这里给你一条平滑的、零基础快速入门的学习路径。大部分爬虫都是按“发送请求——获得页面——解析页面——抽取并储存内容”这样的流程来进行，这其实也是模拟了我们使用浏览器获取网页信息的过程。简单来说，我们向服务器发送请求后，会得到返回的页面，通过解析页面之后，我们可以抽取我们想要的那部分信息，并存储在指定的文档或数据库中。在这部分你可以简单了解 HTTP 协议及网页基础知识，比如 POST\GET、HTML、CSS、JS，简单了解即可，不需要系统学习。Python中爬虫相关的包很多：urllib、requests、bs4、scrapy、pyspider 等，建议你从requests+Xpath 开始，requests 负责连接网站，返回网页，Xpath 用于解析网页，便于抽取数据。如果你用过 BeautifulSoup，会发现 Xpath 要省事不少，一层一层检查元素代码的工作，全都省略了。掌握之后，你会发现爬虫的基本套路都差不多，一般的静态网站根本不在话下，小猪、豆瓣、来看一个爬取豆瓣短评的例子：我们通过定位，得到了第一条短评的XPath信息：但是通常我们会想爬取很多条短评，那么我们会想获取很多这样的XPath信息：观察1、2、2条短评的XPath信息，你会发现规律，只有<li>后面的序号不一样，恰好与短评的序号相对应。那如果我们想爬取这个页面所有的短评信息，那么不要这个序号就好了呀。通过XPath信息，我们就可以用简单的代码将其爬取下来了：当然如果你需要爬取异步加载的网站，可以学习浏览器抓包分析真实请求或者学习Selenium来实现自动化，这样，知乎、时光网、这个过程中你还需要了解一些Python的基础知识：文件读写操作：用来读取参数、保存爬下来的内容list(列表)、dict(字典)：用来序列化爬取的数据条件判断(if/else)：解决爬虫中的判断是否执行循环和迭代(for ……while)：用来循环爬虫步骤爬回来的数据可以直接用文档形式存在本地，也可以存入数据库中。开始数据量不大的时候，你可以直接通过 Python 的语法或 pandas 的方法将数据存为text、csv这样的文件。还是延续上面的例子：用Python的基础语言实现存储：用pandas的语言来存储：这两段代码都可将爬下来的短评信息存储起来，把代码贴在爬取代码后面即可。当然你可能发现爬回来的数据并不是干净的，可能会有缺失、错误等等，你还需要对数据进行清洗，可以学习 爬取一个页面的的数据是没问题了，但是我们通常是想爬取多个页面啊。这个时候就要看看在翻页的时候url是如何变化了，还是以短评的页面为例，我们来看多个页面的url有什么不同：通过前四个页面，我们就能够发现规律了，不同的页面，只是在最后标记了页面的序号。我们以爬取5个页面为例，写一个循环更新页面地址就好了。当然，爬虫过程中也会经历一些绝望啊，比如被网站封IP、比如各种奇怪的验证码、userAgent访问限制、各种动态加载等等。遇到这些反爬虫的手段，当然还需要一些高级的技巧来应对，常规的比如访问频率控制、使用比如我们经常发现有的网站翻页后url并不变化，这通常就是异步加载。我们用开发者工具取分析网页加载信息，通常能够得到意外的收获。比如很多时候如果我们发现网页不能通过代码访问，可以尝试加入userAgent 信息。往往网站在高效开发和反爬虫之间会偏向前者，这也为爬虫提供了空间，掌握这些应对反爬虫的技巧，绝大部分的网站已经难不到你了。掌握前面的技术一般量级的数据和代码基本没有问题了，但是在遇到非常复杂的情况，可能仍然会力不从心，这个时候，强大的 scrapy 框架就非常有用了。 是一个功能非常强大的爬虫框架，它不仅能便捷地构建request，还有强大的 学会 scrapy，你可以自己去搭建一些爬虫框架，你就基本具备爬虫工程师的思维了。爬回来的数据量小的时候，你可以用文档的形式来存储，一旦数据量大了，这就有点行不通了。所以掌握一种数据库是必须的，学习目前比较主流的 MongoDB 就OK。MongoDB 可以方便你去存储一些非结构化的数据，比如各种评论的文本，图片的链接等等。你也可以利用PyMongo，更方便地在Python中操作MongoDB。因为这里要用到的数据库知识其实非常简单，主要是数据如何入库、如何进行提取，在需要的时候再学习就行。爬取基本数据已经不是问题了，你的瓶颈会集中到爬取海量数据的效率。这个时候，相信你会很自然地接触到一个很厉害的名字：分布式爬虫。分布式这个东西，听起来非常吓人，但其实就是利用多线程的原理让多个爬虫同时工作，需要你掌握 Scrapy + MongoDB + Redis 这三种工具。Scrapy 前面我们说过了，用于做基本的页面爬取，MongoDB 用于存储爬取的数据，Redis 则用来存储要爬取的网页队列，也就是任务队列。所以不要被有些看起来很高深的东西吓到了。当你能够写分布式的爬虫的时候，那么你可以去尝试打造一些基本的爬虫架构了，实现一些更加自动化的数据获取。你看，这一条学习路径下来，你已然可以成为老司机了，非常的顺畅。所以在一开始的时候，尽量不要系统地去啃一些东西，找一个实际的项目（开始可以从豆瓣、小猪这种简单的入手），直接开始就好。因为爬虫这种技术，既不需要你系统地精通一门语言，也不需要多么高深的数据库技术，高效的姿势就是从实际的项目中去学习这些零散的知识点，你能保证每次学到的都是最需要的那部分。当然唯一困难的是，刚开始没有经验的时候，在寻找资源、搜索解决问题的方法时总会遇到一些困难，因为往往在最开始，我们去描述清楚具体的问题都很难。如果有大神帮忙指出学习的路径和解答疑问，效率会高不少。这里真诚地推荐我们的系统化爬虫课程：——————————关注公众号（datacastle2016），获取更多数据分析干货。,,,,,,,,,,
编程究竟难在哪？,"例如C语言，C++,Java，好多程序语言就算学很久也可能不会，为什么这么难？有什么好方法么？","编程的难分为两类，一种是我先回答一下工程上的难：我们做一个比较, 就是开发一个大型软件, 和设计并建造一栋摩天大楼, 究竟哪个更难, 为什么?实际上这个比较一旦抛出, 软件开发的""难""就立马显现出来了。摩天大楼一旦盖起，将不再，也不可能“而对于软件来讲，它本身的一个灵活性，导致了它一个东西越是牵扯的东西多，越和环境耦合，和“用户”耦合越深，和“自身”耦合，和“历史”耦合越深，它的“这就是为什么摩天大楼几乎无法进行功能性更新，因为建筑这个东西本来就是一个“它和用户的所以有时候不仅是某个功能模块的更新，随着一个”服务型“的应用不断发展，它要提供服务的用户量就会不断提升，一个典型的例子是淘宝，学过数据结构的我们知道，这世界上很多东西的复杂性并不是线性增长的，简单的例子就是排序，最优的十年前php可以撑起淘宝的流量，而今天呢？php的性能问题恐怕让其无法再承担淘宝的亿级流量，所以只能用java重写，而这就是有人说服务一万人用一台服务器，那么服务一亿人用一万台服务器就解决了，哪来那么多事，而这也正是我刚才说的，陷入了”一万人的时候，可能有时候可以让系统停掉，进行一到两小时的服务器维护，这一万人也不会因为你停了服务器就有多大的损失，那一亿人呢？你的服务器集群敢断电吗？敢让网站挂掉进行网站维护吗？所以既然要让网站每时每刻不断运行，就首先要做到所以，扯了这么多，我用一句话总结编程的”工程性难点”就是，算法上的难明天再来答。算法的难主要集中在两点, 一种是算法的构思和提出, 一种是提出算法之后, 用code实现出来。个人认为算法的构思和提出最为困难，因为这部分经常要求我们将我们眼中“显然”的东西，转换成计算机语言。比如我们现在要实现一个算法，这个算法能够识别一张图片，判断图片中是否有人脸，对于人类来讲，这是不经思索的，一眼就能看出来的，但是问题是，你自己也不知道你自己是怎么看出来的，这个判断过程，其实我们的大脑内部发生了很复杂的化学反应，但是我们却说不清，我们到底是怎么判断的，还比如判断人脸的情绪等等。但有人说，这说明计算机比人笨，事实上完全不是这样，计算机的特点就是容错率低，但是可预测性强，确定的代码和输入就能得到确定的结果和输出。人类的特点是容错率高，但是可预测性差，对一个东西的执行结果经常受情绪，身体状况，心态等的影响，结果常常是不确定的。所以其实，一个系统的”所以我们要注意一点就是，容错性这么低，你还指望它能接受人类这种模糊的自然语言？当然不可能了，所以它一定有自己的，语义清晰的语言。一个语言一旦语义清晰了，语言灰度底了，它一定是逻辑性很强的，或者说，我们其实是用逻辑写代码，而不是用“感觉”或是“情感”写代码，这和我们人类理解世界的方式本来就是有区别的。人类虽然有逻辑思维的能力，但是逻辑思维从来就不是人脑的强项，人脑的强项其实是整体感知，和一些“系统预设”的功能，比如你眼睛睁开了，投入你视网膜的光就会自动的转换成图像信息被你感知，这个过程你调用了任何逻辑思维了吗？你几乎什么感觉都没有就完成了一个极其复杂的过程。所以我们的大脑绝大多数复杂的进程，或者说运行过程，都不能被我们逻辑性地去感知，比如你听到一首歌，这首歌给你一种很舒缓的感觉，你说你听着这首歌仿佛进入了一片天灵之地，但是这个过程，请问你进行了任何逻辑思维没有？你就是感觉了一下而已，但是我们想让机器去做这样的“感知”，因为计算机体系的极低容错性，我们必须用我们的逻辑思维搞明白，这首歌，究竟是因为什么，它有什么样的特质，才导致了它给你这样的舒缓感觉，这样你才可能把这个过程转换成计算机语言输入到计算机中，让计算机去判断这首歌是“舒缓的“还是”狂野的“。所以我总结一下编程在算法上的难，就是：看到这里，你一明白了，要想让两种不同的生物更好的交流，要不就是让人类变得更像计算机，要不就是让计算机变得更像人。你想一下siri，一个AI的算法模型种，往往要引入大量的参数，然后不断地输入样本，根据预测值和真值是否匹配而动态地改进这些参数，这样一个系统，容错率是低了，可预测性呢？确定的AI算法模型能得到确定的预测结果吗？所以与此同时，你也要注意。容错率低的，重要的事不要交给siri去做，因为它和人一样，不可预测。考虑到这个看这个答案的同学里面肯定有一些是想要入门编程，其实入门编程的时候还是不要被这些困难吓到，可以从简单的场景入手，最近我了解到一个编程学习平台，叫做「夜曲编程」，特别适合零基础的编程同学学习，上手门槛非常低，可以直接在线完成学习：而且还有简单的知识卡片，像背单词一样学编程：对于零基础的同学来讲，「夜曲编程」是一个不错的学习平台，不妨试试～包括现在也能在他家的公众号回复「免费教程」然后就能拿到，免费学习的扎实课程，虽然是体验课 感觉内容还是毫不敷衍。",编程一点都不难；它只是和你十几年来在学校受的教育格格不入而已。自小你受到的教育，总是：1、记忆和理解一个个的知识点2、给你一个未完成的拼图，让你把自己记忆的、某几个合适的知识点以正确的姿势放进去（超过三个就是难题，超过五个就是压轴题！）3、好了，满分换句话说，你从未学过创造；你只是被训练的极为擅长“填补拼图中缺失的一角”而已。看我的这个回答：嗯，显示所有答案，你会发现另一个怼我的答案排在第一。他说，“高票答案没有真正回答问题”，而许多许多人表示同意——而且非常反感那些装X的答案，以至于要狠狠踩上一脚。搞笑的是，他的答案也被很多人认为“没有真正回答问题”。终于，我知道这些人缺失的是哪一环了。于是不得不添加这么一段回复：可笑吧？这么个幼儿园级的简单问题，得如此长篇大论才能说清楚——显然，他们甚至压根就没有把一个幼儿园级的问题表达清楚的能力。因为能说清楚他们自己就会完成思考了（这也是那个认为“高票没有解决问题”所以自己走低彻底解决了问题、然而还是有人在他的评论区疑惑“0/1怎么对应到高低电平上”的原因）。幼儿园不解决；现在，想要教会他们，你就必须彻彻底底的掰开、揉碎，像喂两个月的婴儿那样一点点给他们喂！实质上，这已经等于教不会了。当然，这个问题实在太简单、太初级；大多数人在他们上幼儿园之前就已经解决掉了。所以，读到上面那段文字，你可能无法感同身受。那么，这段呢？ 编程不难。但它要你创造。过去你已经习惯了的、出题人准备好一切、只留下一两个缺口让你补充拼图的“思考”方式，在这个领域渣都不是。听着，你不需要学习什么“语言”。你只需要知道，程序语言有顺序分支循环三种控制结构、与或非三种逻辑——剩下的，统统靠你自己。不。你就是再读一千本书，也甭想靠这个把“编程的技能”直接灌进你脑子里。没那好事。相反，你必须自力更生，你必须靠着“鄙陋”的顺序分支循环和与或非以及中小学水平的数学运算支持，解决手头的一切问题。你学的是编程，不是编程语言。脱掉C的底裤，并不能帮你写出哪怕一个简单的鼠标驱动程序。混知乎或其他网络论坛，总有人忍不住骂“你们码农怎么什么话题都想插一嘴？”很遗憾。但程序员的工作，恰恰正是“理解各行各业的工作，然后把它教给电脑”。没错。学编程，学的甚至不是计算机本身；相反，它要求你从声学到视觉暂留、从结构力学到滤波解调……随便哪行哪业，你都要能够快速抓住重点、然后把它说的清清楚楚明明白白，这才可能把它教给计算机、让CPU代替人工作。如果连“手电筒的原理”你都理解不了、如果连“遥控小车”这样简单的发明你都做不到“信手拈来”……那么，他人从液体分层原理借来的冒泡算法、从猜测的它要求的，是“从三百五百甚至成千上万个知识点中挑选出最合适的那几个、然后用它们解决你所面对的问题”！编程真的不难；但你从未受过解决问题的训练。而编程，恰恰就是最最纯粹的、以精确无歧义的方式表达问题解决方案的一种工作。不。你甚至不知道“学习编程”就是学习“如何用电脑解决问题”，反倒学编程语言本身去了……这种学法，怎么可能不难？, 大佬说了关键点，这里算是做一点补充吧编程难么？对于有些人来说确实挺难的，我在大学里见过许许多多靠背代码过程序语言专业课和二级C的同学，其中不乏优秀的同学，比C语言难100倍的模拟电子技术、在应试教育模式下，你可以不懂期望、方差等一系列概念是如何被发明出来的，可以不懂微分方程有什么用，可以不懂但是对于编程来说，“不理解概念”的负面反馈是及其迅速和强烈的。因为编程没有“题型”和“公式”可以把你解决问题的过程简化成填空，编程提出的问题相对来说是很宽泛的，需要你根据脑子里的逻辑推断，利用所学编程语言的各项功能组织成代码去解决问题。当你不理解概念的来由和用途的时候，你根本就想不到用它，也解决不了问题。比如你不理解指针，那么涉及结构体、学习编程语言就像你学习卷尺锤子扳手怎么用一样，只是学习工具使用。任何一道试题和现实中的需求，都是在考你用工具解决问题的能力，而不是你对工具本身的了解。每一行代码都是人如何使用多种工具达成一个目的逻辑过程，只要你有一行代码，甚至于一个关键字、符号不理解，你写出的程序就可能出错，而计算机是个很简单的东西，不对，就不过，不会给你步骤分。我自己在大学里辅导过不少C语言老大难的同学过二级，我从来不让他们刷题，而让他们拿看不懂的程序给我，我一行一行的给他们讲代码为什么这样写，查找他们知识点的缺陷，帮助他们理解，最后他们考过二级也都是凭借着用自己理解的概念写了能写出来的程序，而不是蒙到考题把背好的程序从脑子里贴上去。，这点包括很多已经工作的同学都在犯，喊着“我要学C++/Java/XXX”然后抱着一本大砖头开始啃，啃了两章就没下文了，为什么会有这种现象，学了，能懂，但不知道怎么用，不断学，却练的少，最后在迷茫中打出GG，编程语言是个蛮复杂的工具，不要指望一蹴而就，当你刚掌握还不熟练的时候，不用很快就会生疏。为什么很多人推荐一边看题主说C语言难学，我不知道题主是不是还在上大学，据我身边的情况来看，国内大部分大学的C语言教学质量是很堪忧的，包括部分985。以至于身边很多同学学完C语言课程之后，居然不知道#include<stdio.h>是什么意思，不知道头文件，没听说过C标准库，不知道如果你C语言的基本知识都很成问题，那么请丢下编著的教材，可以去找国外教材但是不推荐大砖头，或者在网上找公开课，把学习重心放到理解概念上，我个人推荐  如果你是在拿C进阶实践上产生了疑惑，那我推荐一本书 C++和Java相比于C，理解面向对象程序设计是一道坎，这一道坎，需要你用代码堆过去，空想是没有办法理解的，做题也没有办法理解，面向对象是为了应对有规模的工程如何组织代码而提出的概念，想要理解，也应该去看看上规模的工程是怎么用的，推荐自己一边学一边做点小东西，比如用Qt做桌面应用，拿Java写点Android Demo等。,题主说程序语言学很久可能学不会，让我们理一下语言的发展过程。计算机的世界是 0 与 1 的世界，如果编写过机器语言，你将会有更深的体会。让我们先看下边的代码片段。  为什么叫机器语言？这可以说很明显了，这段代码猜到下个世纪也猜不出来吧，真的是字如其名，机器才能懂的语言。这每一条都是一条指令，这个每条指令总共是 32 位，前边 8 位可能表示这条指令是加法，后边 12 位可能是第一个加数的地址，再后边 12 位可能代表第二个加数的地址，然后结果可能保存到第二个加数的位置。只是随便举了个例子，每条指令的规定是什么，当然就取决于硬件了，有单地址的指令，双地址的指令等等，犹记得当时这里我们可以看到，硬件和软件之间的相互配合，硬件如果没有实现，我们可以用软件，凭借硬件已经提供的功能和我们人类强大的逻辑，实现硬件暂时没实现的功能。当然软件实现的话速度和效率方面肯定会比硬件直接实现差一些。那为什么不用硬件把加减乘除乘方开方都实现了？这硬件的开销、复杂程度太大了，在速度可以容忍的情况下，乘方开方这些还是用软件实现比较好。程序员如果每天写着 10101001010 ，大概会疯掉吧。于是第一反应就是，我能不能把这些指令用英语单词表示了，之前 10101 代表加法指令，我直接写个 add 岂不是更好？于是汇编语言出现了，它的可读性比机器语言增加了很多，可以看下边的代码片段。  我们终于能看懂些了，mov，loop，sub，add 等等都是见名思意，每条指令几乎和机器指令一一对应，这样只要再拥有一个类似「翻译器」的东西，把它翻译成机器语言就完全够了。但是！！！！我们还可以看到 ax，bx 这些东西，他们是 CPU 中的寄存器，还有一些 0b800h 啥的，这些是内存的地址。可以看到我们仍旧直接面对硬件在编程，这样的好处当然是程序的速度会快一些，缺点当然是对程序员的不友好，我们只有懂了硬件才能进行编写程序，于是，面向我们程序员的高级语言渐渐诞生了。这可能是大多数人的入门语言了，让我们看一下它的样子。这看起来就非常的舒服了，即使一个没有学过编程的人，基本也能猜出来这是在干什么。是的，它是在计算 1 * 2。但大家有没有想过，有了这段程序，机器看不懂呀，是的我们还需要一个能够把我们编写的 C 语言程序的代码变为机器语言的东西，我们把它叫做编译器。编译器无非是一个软件，那么，我们用什么语言写呢？其实，在 C 语言之前，已经有了 A 语言，B 语言，我们不妨选择一个在当时用起来比较简单的 B 语言来去实现我们的编译器。等等等等，B 语言写出的程序用什么去编译成机器能够执行的程序呢？用 B 语言的编译器！！！那么 B 语言的编译器哪来的，用 A 语言写呗。前边一段话比较绕，大家理一理。终极问题，A 语言的编译器呢？用汇编语言！！！是的，逻辑就是我们先用汇编语言写一个相对容易实现的语言的编译器，有了这个编译器我们就可以实现难度更大，更抽象语言的编译器。最终，一层一层的就实现了 C 语言的编译器。当我们有了 C 语言的编译器，意味着我们用 C 语言写的任何程序都能够转化成机器语言去运行了。这时，我们甚至可以再用 C 语言写一个 C 语言的编译器，再用之前写好的 C 语言的编译器去编译它，一个新的编译器就诞生了，哈哈哈哈哈，好像绕口令。知道了这些，我们现在甚至可以模仿其他语言设计的规则，然后自己实现一个编译器，然后属于你自己的语言就诞生了！当然说着简单，做起来就比较烧脑了，具体的可以去学习C 语言出现后又陆陆续续出现了很多语言，而它们的编译器也大都是用 C 语言去写，底层很多东西也去用 C 语言实现，C 语言可以说是高级语言中，离硬件最近的语言了。编译型语言常见的 C 语言，C++，C# 等等，这些语言都需要编译器将所有的东西翻译成机器语言，形成可执行文件，例如 windows 下的 .exe 文件，相对于解释型语言，编译只做一次，然后就可以多次运行了。还有比较特殊的是 JAVA ，它的一大优势是跨平台，也就是他的代码写好以后，编译成 .class 文件， 然后只要机器里有 JAVA 虚拟机，不管你是什么操作系统，window 也好，linux 也罢，它都可以执行，所以实现了跨平台。它可以说是编译型和解释型语言的结合了，它没有直接编译成机器语言，而是先变成 .class 文件，再由 JAVA 虚拟机一条一条解释执行。但他的语法风格和 C 语言也有很大的相似之处，所以我也把它放到这里了。解释型语言常见的 python，JavaScript，Ruby，或者称他们为脚本语言，这种的话就是需要解释器，它是一句的一句的通过解释器将其翻译成机器语言去执行，很明显，在运行的时候，如果不做特殊的优化，它的速度肯定比不上编译型语言。标记语言常见的 html，xml，和上边两种完全不一样，它的作用主要是描述一些东西，然后用于显示或者传输，例如下边的 html 。它不能做一些加减乘除的事情，它仅仅供浏览器读取，然后根据相应的语法把它显示出来。就是下边的效果。说了这么多，我们怎么学一门语言呢？  我认为这取决你要做什么，不同的语言其实语法大同小异，不同之处在于它们的生态圈，它们所提供的库的方便程度与类别的不同，以及它们各自的一些特性。如果你要写一些 windows 的桌面程序，你当然可以去学习 C++，C# 等。如果你要写安卓，你当然得学习 JAVA。如果你想写一些自动化的脚本，帮助你做一些事情，你可以学 python。如果你想做一些面向硬件的编程，C 语言当然是不错的选择。不管你最开始学的是什么语言，都不会影响到其他语言的学习。我们要把语言当成一门工具，它是为我们服务的，需要啥就学啥呗，并不需要畏难。当你用熟了一门语言后，再上手一门语言会发现很快，快则两三天，慢则一周便能游刃有余。你知道 C 语言怎么产生的吗？ 写 UNIX 的时候，Dennis Ritchie 觉得 B语言所编译出来的核心效能不是很好，于是将 B 语言重新改写成 C 语言，再以 C 语言重新改写与编译 Unics 的核心， 最后发行出 Unix 的正式版本。是的，就是这么随便，另当代学生「头痛」的 C 语言，就是这样简简单单诞生了，惊不惊喜，意不意外。而现在很火的 JavaScript 当时也是 Brendan Eich ，为了应付公司安排的任务，用10天时间就设计出来了。让我们看一下最新的编程语言的热度吧，看上边的语言，很多可能连名字都没有听过，但事实是他们在各自的领域都发挥这很重要的作用。学一门语言，首先要明确你为什么要学它，然后再去学。为了考试？为了做一个应用？为了写一个脚本？不管怎么样，有了这个目标导向，我们就会有动力。我学编程期间开始也觉得很难，迷茫，因为刚开始接触方向实在是太多了，之前写过我的一些想法。给初学者的一些建议。自己做过的一些应用，大家看看可以产生一些灵感。下边是一个应用诞生的全过程。下边这本书强烈大家看一下，也就是学习方法，学习任何东西的方法。如果没什么想做的项目，可以刷一刷题。最后总结下，我自认为不是算聪明的，记得刚开始的学习的时候，有时候一个知识点看了一遍又一遍才会理解，写一个阶乘的函数都会兴奋，但就是一点一点的积累，自学能力和网上找东西的能力越来越强，慢慢的做东西变的快了，即使自己没有接触过的东西，也不会畏难，相信自己可以做出来，只是时间的问题而已了。所以学习编程我觉得最重要的就是,1 考虑问题不周全，这一点就是需要天份和努力双子座。程序员是一个严谨的职业，不周全的代码就会有漏洞，这种思维方式，在什么时候有过专业的训练？并没有。2 忽视了扩展性，很多人只能尽全力实现自己当前的需求，很少有余力能考虑到未来的变更。然而写代码是一个持续的事情，总会为自己当初的错误买单。人生如此，写代码更是如此，不是么？3 缺少测试的动力，多数人都沉浸于正确的路怎么走，在大多数人眼里，都应该按照正确的路去走，可是程序员研发出来的系统要求必须考虑什么是不允许做的，像是一个虚拟世界的规则制定者。可是谁会反复站起来看自己手里的工艺品是否完美无瑕呢？你只是程序员而不是艺术家呀。4 对底层知识要求很高，大多数程序员无法变的更厉害，就是接触底层知识太少，一旦遇到黑盒子，立刻懵逼。你让他把西红柿放冰箱还好，你告诉他冰箱在2019年7月3号下午4点13分~15分出现温度升高2℃，他怎么解决呢。5 忽视文档的同步，很多人都认为自己写的代码就是属于自己的，完全不需要交流和沟通，更不需要花点时间维护一下。这好像是，我煮了个泡面，你要我写清楚煮泡面的设计规划方案？6 没有复用性。抽象和分层是穿透表象，分析核心的重要思维方式，不把每一个细节掰开揉碎，很难组装起来。大多人宁愿重复做无意义的事情，抱怨整天写业务代码，从来不愿意思考用什么方式能够让自己的工作更高效简单。毕竟，抱怨是容易的。7 缺少凭空想象力，有象棋，围棋经验的人可能会清楚，多数要在自己脑袋里去推演场景。编程也是，在设计之初，对着空气要构造出来未来的样子。在上线之后，对着日志要复原出来当时的样子，是不是比警察破案还要酷？8 缺少主动学习方法能力，大部分人仍然停留在别人教什么我学什么，不教我就应该不会，不会就别怪我的阶段。我年纪大了，我英语不好，我零基础，我没时间，我们公司用不到这么高深的框架，没有技术大牛愿意带我，公司太慢不给我时间成长。做为dws学习法的倡导者，做为主动学习的实践者，慢慢理解，对他们来说，编程实在是太难了！我们自小都只学会知识，通过知识去间接训练自己的习惯和思维模式，然而到了工作中慢慢发现，错别字不要有，命名要统一，分解任务要明确，反馈进度要及时，做事有先明确预期再验收，是这样么？在游戏里开团才学会团队协作，在篮球场上去联系组织能力，在棋牌中模拟场景，在谈对象的时候练习包容和尊重。这些都是编程中少不了的啊，其实不是编程难，是编程是一个照妖镜，照出来每一个人被隐藏起来的短板。我觉得我能吐槽一年~也一直想办法怎么做能提升大家各种编程能力，而不是仅仅教授语法框架这些知识，欢迎关注IT修真院的知乎专栏，也许哪天我就想到了呢？,其实，做任何事情都很难，无论是编程、做营销活动、做商业计划、做融资、做一个手机的工业设计、写可以大量引流的公众号文章……只不过编程你以为你在学习编程语言，其实你在。这两类思维的差异非常明显。著名的“让程序员：去买6个苹果回来，如果看见西瓜就买一个“就是这种问题。开发者要用人类思维去理解PM的要求，同时又要根据严谨的逻辑去将方案转化为可以实现的流程图、编程大部分时候是一种编程因为解决问题的需要，会也许有人发现自己在编程过程中没有/很少遇到上面的问题，觉得编程很简单。总是能够按照类似的方式一遍又一边的写代码来赚取收入。我很遗憾，这种叫做“流水线编程工人”，永无出头之日。毕竟对你简单，对别人也同样简单。门槛对所有可能的参与者是一样的。如果真的想跳出来，真的以编程为事业，那么并没有什么捷径可走，下定决心去学习、思考，并在痛苦中努力成长，能够做其他大部分人都做不了的事情。这个方法也同样适用于任何职业。相关问题：,第一等级的编程难，和学英语是一样的难度：记不住单词/命令/库/best practice（这个中文应该叫什么？）。大部分爱好者和手写代码一万行以下的，卡在这个阶段。这个没办法的，不可能有捷径解决，只有去练。相信21天学会JAVA的，和相信知乎live5小时精通雅思单词的一样蠢。第二等级的编程难在生态，C++还好点。现在连JS都讲究生态，别说微软系和JAVA系了，从前到后一大堆，以前写JS开个notpad就可以，现在装个这一级主要是初级人员往中高级人员进步遇到的槛，解决方案是自己投钱投经历，把本行主要的生态环境在自己家里搭建起来，摸索摸索。第三等级的编程难在思维。很多人语句熟悉了，生态熟悉了，脑子还是人脑。拿到一个需求，就在脑子里把中文的英文的需求，翻译成JAVA的，C的，JS的。这是阻止大约SDE2/P6这个层次往架构去的主要原因。计算机编程的一大特点就在于对自然世界的抽象，提炼和优化，而单单平等的翻译，是做不到一个好的人员的。最后的一个编程难度在TMD和蠢货沟通上。脱离了单纯开发工程师到了技术专家的角色，你面对的是无穷无尽的蠢货的问题。“为什么再加点内存不会更快？”“为什么加一倍人开发时间不能缩短一倍？”“为什么你们的软件不能侦测到服务器死机了重启服务器？”TMD我这是JAVA好吗！重启服务器你去找Oracle ME啊，蠢货！,"编程甚至对智商都没什么太大要求，对耐心与认真要求才是最大的。实现一个简单的功能，就需要小心翼翼的操作每一个变量，设计每一个函数，设计每一个模块，耐心的写每一个测试，最后细心的debug认真检查程序运行的过程。而在学习编程的过程，也要耐心地读文档，读不懂倒回去再读或去寻求他人帮助。别人的代码一行一行的看，看不懂自己想办法跑一跑观察一下想办法搞懂。程序员这个行业，是一个区隔度特别高的行业。不少人短短几年就可以成长为高级工程师、资深架构师、这是因为编程不是一门「线性科学」，而是一门「「线性科学」，比如跑步的速度就是，世界冠军的速度也不可能是普通人的10倍。「非线性科学」是指很多种因素交汇在一起，极大增加了系统的复杂度。程序设计和实现不是一种线性能力，像经验、编码能力、工程能力、知识、学习新知识的能力、对无用部分的识别等这些就不仅仅是线性优势，汇聚到一起会对编程产生倍增级效应。优秀的程序员能达到百万年薪，而入门级或者初中级程序员可能只能拿10万年薪。过去11年的职场生涯，我带过过百名程序员，见过非常优秀的也见过平庸的。以下是我认为编程的8个难点：（PS：感谢大家耐心的阅读，算法是程序员的重中之重，必须攻克，大厂面试必考，顺便送一份阿里大佬刷Leetcode总结的算法笔记，如果你能吃透，那我相信80%的技术面试都会不在话下：目录非常经典：说实话，很多程序员只是会写代码，美国有很多优秀的操作系统公开课，比如mit6.828、哈弗OS/161。这类课程都会给你提供一个mini os壳程序，相当于一个核心组件，剩下的你可以自由发挥。比如你可以设计线程管理、文件系统等等。相比只是看操作系统的书籍，这种学习方法的效率简直高100倍！国内也有一些顶尖高校也是采取类似的方式，比如清华ucore基于 Linux 0.11魔改版本国内说数据库就是mysql，这点要相信我！基础：调优：核心原理：架构与运维：对于零基础的童鞋：首先，学习基本的SQL语法。完成这个后，你就可以编写SQL语句了。这一步推荐：W3Schools的 其次，学习数据库的主要功能和使用方法，比如用户相关或者权限相关等等。十分推荐阅读我分三个阶段来介绍：学习网络过程中,要不断抓包分析等,自己能写些简单的应用来发包更是完美。抓包工具推荐:LINUX环境下用TCPDUMP,windows环境下用 wireshark。这个阶段写习完后,已经是个小高手了。。3.高手阶段协议的实现方面， 主要学习底层协议(指不知道大家有没有见过「复制粘贴工程师」，review他们的代码甚至会发现一些网上的注释，又或者其他人的编写错误。不少工作多年的程序员甚至连一个简单算法排序都没有考虑，当然这并不影响普通工作的输出，但在面临调优或者攻坚，这类型的程序员的表现甚至比刚毕业的优秀程序员还要糟糕。在压测模拟过万人同时使用的情况下，没优化前服务端程序直接卡死，优化后能流畅的运行。在这个复盘过程中，我发现实现这个功能的程序员缺乏基础的算法基础。for循环的嵌套，简直是触目惊心。BAT大厂招聘高级工程师，为什么总是要求手写各种算法，恐怕也是基于考察裸编程能力。查找和解决BUG会占用程序员大量的时间。查找BUG产生的根源不是一件简单的事情，需要整体的分析和经验的沉淀，同时还需要对各种调试工具熟练应用。不少程序员，解决完一个BUG却导致了更多的隐患，没有真正把BUG产生的原因找到，只治标不治本。对于程序员来说，掌握在合理的步骤内修复BUG，以极简的方式编写较少BUG的代码的能力，就能显著提升效率。另外在团队中担任骨干的往往都是调试能力极强的程序员，在其他成员遇到困境之时，快速定位解决问题。能否运用调试技能快速解决问题，是衡量一个程序员水平高低的重要标准。有一种炫技程序员或者架构师，喜欢简单事情往复杂了做。明明几个类能搞定的，弄出很多中间类，明明三层架构就解决的问题，生生弄出五层。简约是成败之间最为明显的分界点，事实上能做到简约的人，恰恰是深度理解了系统的复杂性。一个产品功能，有人用了500行实现，你写了几千行。多出来的代码有价值吗？不仅没有价值，还会对未来接手代码的人有很大的困扰。不要多写一行无用的代码！老板想了个idea授意产品经理估工期。产品经理原型都没画出来，只有个大概想法，就找技术排工期。为什么这么说？只有具备这项能力，才能让开发工作游刃有余、可进可退。事实上锻炼这种能力也并不困难，拿移动端开发来说，一个idea大概对应多少个页面多少个首先在没有出文档之前的估计，可以作为给老板的重要判断武器。做任何功能一定会投入研发力量，而往往研发力量是最宝贵的，如果在idea出来之后就能大概知道工期，对于做什么不做什么的判断，意义重大。产品文档出来之后的精确工期呢？对控制风险和进度把控非常有帮助，这个时候的精确排期其实对风险点的估计、资源协调的能力都有很高要求。准确预测的过程其实就是风险预判的过程。比如数据结构、网络协议、操作系统相关知识，等等。程序的很多问题都是源于对计算机工作原理的误解，即使是使用高级语言开发的程序也一样。另外，一些更偏应用层的架构或框架，基础一定是更底层的系统。比如Docker技术兴起，改变了CI/CD的方式，推动了：一提到分布式锁问题，大多数同学想到的方案是基于Redis的Master-Slave模式来实现。这个实现方案行不行？分布式锁本质是一个CP需求，基于Redis的实现是一个AP需求，乍一看基于Redis的实现是无法满足的。从技术战略的需求层面来看，如果分布式锁在极端情况下获取锁的不一致，社交业务场景能够接受，那么基于Redis的实现是完全可行的。那么基于Redis的实现方案是不可行的。在锁强一致性的场景下，需要采取基于CP模型的做出以上判断，需要深度理解底层系统原理。缺乏了这种理解，无法做出正确的架构抉择，也自然会对工作造成不利影响。程序员非常不情愿看到的一种情况是，需要在一些无关紧要的功能上浪费大量的时间，但你又不得不去将这个无关紧要的功能实现，因为它牵扯着这个项目的主要功能。详细而缜密的顶层设计能够减少上述情况的发生，降低模块间的将通信部分的各种设计搞定，其他锦上添花的方面都可以后续慢慢补充，例如客户端交互、好友关系等等。程序员真正产生价值一定需要和业务结合，业务交付的及时性、健壮性、简洁性、可持续性一定是首先需要考量的事情。在我看来，这也是追求完美主义的一种体现，诚然有一个类似阿里那样的能给各业务线赋能的中台是一个美好的愿望，但很多时候连业务方向都要多变，追求这种赋能无异于空中楼阁。前几天我的读者群又有创业者在谈AI中台，我只想说既然是创业，咱能不能先MVP？等业务用户量更大了，再来追求更漂亮的实现？推荐一本书：人月神话，看完后相信能杜绝很多人的完美主义：《",看了问题的描述，提问者想问的应该是“为什么编程入门这么难？”那么答案就很简单了，学习曲线陡峭，从零基础到做出来一个看得过去/可以炫耀的项目作品，要掌握的东西太多，间隔的时间太久。第一节课配置环境，第二节课 Hello World，第四节课打印九九乘法表…… 这些内容就算你实现了，又有多少成功的喜悦呢？能唤起你拍照留念发朋友圈的冲动吗？到了第六节课后，朋友来找你，——今天学啥了？            ——学了字符串的拼接和切片...——能干啥呀？有用吗？ ——我也不知道能干啥。应该有用吧…——来，带你吃鸡。        ——emmm…… 好吧，来。于是大厦轰然倒塌，一切灰飞烟灭。一个能持续给你正反馈的系统，才是能让人坚持下去的良性循环系统。游戏公司深谙此道，落地能捡枪，捡枪能杀人，杀人能舔包，环环紧扣。半个小时，塞给你十几个甚至几十个爽点。吃到鸡了，还贴心地提供一键分享到朋友圈功能。而学编程，你靠自律坚持半小时学会了操作字符串，全程没有爽点，也不知道可以用在哪里，更没有冲动去和朋友们分享你刚才所学。MIT 媒体实验室为小朋友们设计的 Scratch 就解决了这个问题，每行代码是一块积木，拖动几个积木块到窗口里，卡通角色立刻就能动起来，不同积木块对应不同动作，反馈实时高效。两节课下来，小朋友已经可以用 for 循环控制猫咪走出太空步，而你的 for 循环，只能在控制台里打印等差数列。你靠自律和坚持学到数组和面向对象，能做的依然只是换着花样做数学题和打印字符串，根本满足不了成就感和虚荣心。实时而持续的 “学以致用” 才能支撑你走得更远。不过，对于想学编程的普通人而言，Scratch 实在是太低龄和幼稚了。我推荐同样来自MIT 媒体实验室的编程语言 Processing。Processing 创立之初的目标就是教育，就是帮助人们学习编程。a>所以创始人选择的切入角度非常好，用代码画画。毕竟数不如表，字不如图，人们对图像更敏感，图片的表现力天生就比文字高两个数量级。b>另外，考虑到编程第一步配置环境就会劝退很多人，Processing 把编辑器编译器等等打包成集成开发环境，简而言之，就是下载后开箱即用，无需进行任何配置。c> Processing 本质上就是简化版的Java，语法也用的是简化版的 Java 语法，所以入门之后可以无缝转 Java（其实熟悉第一节课后你能用 10 行代码画出这样的图案。同样是练习 for 循环的使用，画赛博朋克风比打印数列有意思多了。第二节课后你就能风格化处理图像。用数组知识做的魔性动画等学到 class ，70行代码画出飞线涂鸦。整个学习过程中，你不必要告诉自己“今天所学将来肯定有用，再坚持一下”，而是每个知识点都可以作为新武器，和之前的武器排列组合创造出更多可能性，帮你画出更炫酷的图案和动画。学习之后立刻挥洒创意画出来，作品分享出去获得来自朋友和陌生人的点赞，这种持续的正反馈会让你欲罢不能。我当初在学习过程中，常常感到沮丧的，并不是学不会，而是恨自己审美和创意不足。同样是手里的这些武器，为啥别人画出来的就这么惊艳，我怎么想不到这么好的点子。工具简单，创意难得。持续的正反馈会让你对编程有兴趣，而有了兴趣之后，后面的一切就是水到渠成了。编程重要性毋庸多言，乔布斯奥巴马等等一大票名人都在鼓励人人学编程。当然，并不是每个人都适合编程，但适不适合只有试过才知道。而 Processing 的伟大之处，是解决了入门时的枯燥无聊，给了每个人一个超低成本的试错机会。如果你犹豫了，心动了，就点击下面的链接吧，也记得关注我，带给你更多的 Processing 文章。  官网下载Processing，开源免费。   大量学习者在这里分享他们的习作，源码公开。,难在耐心。编程甚至对智商都没什么太大要求，对耐心与认真要求才是最大的。实现一个简单的功能，就需要小心翼翼的操作每一个变量，设计每一个函数，设计每一个模块，耐心的写每一个测试，最后细心的debug认真检查程序运行的过程。而在学习编程的过程，也要耐心地读文档，读不懂倒回去再读或去寻求他人帮助。别人的代码一行一行的看，看不懂自己想办法跑一跑观察一下想办法搞懂。现代人们习惯于快节奏的生活，做很多事缺耐心和毅力，心也不静。有很多人甚至连吃饭都没耐心，而编程这项活动却是世界上最需要耐心的事之一。所以很多人说难，是因为大多人没有耐心，没有极客精神。就是耐心，对困难问题的耐心。面对难题非但不放弃，反而很兴奋。这些都是技术大牛的特质，也是我们常说的天才。现代编程有了高级语言，其实已经简化了太多。我有时候没耐心了，就去想想几十年前，前人的,其实我没学之前也觉得难，等学了一段时间之后我觉得挺简单。之后一直都觉得编程根本就没有什么难的点，真正难的地方，都不属于编程的部分。大部分跟我说难的人，基本上都是不想学，不认真的，他们只是不想去思考而已。直到我碰上了一个学生。。。他其实学习蛮认真的，很积极，很愿意问问题，但是他真的是一个让我体会到绝望感的学生。。。那个时候一点点编程里的基础概念，我用了可能七八种不同方式和角度来解释，连旁边来问问题顺便听了一点的几个学生都已经搞明白了，他还是不能理解。。。最终我只能放弃了。。。我在内心建议他换个专业吧。。。那次之后我仔细考虑过编程里面到底有没有难点。我的结论是，有的。但是编程里真正的难点，按理来说在之前的教育里应该已经被训练和克服了。编程用到的最基础的思想工具其实基本都可以从最基础的数学教育里学习到。除非你当初学数学的方式不正确，否则小学应该就能获得基础的思想工具来编程了。编程在思想上有两个难点，一个是要懂得抽象，另一个是逻辑要严密清晰。所谓抽象，拿个最基础的例子来说。最早期开始学习数学的时候，我们会教，如果你有两个苹果，然后妈妈给了你两个苹果，你现在就有四个苹果啦！这里其实就已经隐含了关于如何进行抽象的教育了，把具体的苹果，抽象为抽象的数，忽略了苹果的绝大多数特征，只保留它关于数量上的特征。编程里时常要使用类似这种抽象的方式，提炼出需要的部分，然后在另外一个是逻辑上必须严密清晰。日常生活里很多经验性的认知往往是直观和混沌的，我们在描述的时候往往是不清晰的，而且我们已经习惯了这种表述和认知方式。编程的时候不能那样去认知，必须有严密清晰的逻辑。打个比方，我不知道你们有没有经历过，但是我妈逻辑特别不清晰。比如说我开车，问她在哪里停，她会跟我说，在前面停。我会问她，在前面哪里，可不可以给一个大致的距离评估，或者给一个标志性建筑，或者你跟我约好停之前多久喊停。她就会很不耐烦......如果是懂得如何抽象思考，并可以判断出怎样的表述是逻辑清晰准确严谨的人，是不会觉得编程难的。尤其是在现代软件工具的帮助下，编程本身是非常简单的，因为可以分解成一步步来进行，心智负担特别小。比什么下棋啊，数学啊，算法啊，那种需要大脑承载大量信息进行推理，分析判断的问题要简单多了。,你学了很多语法，很多 API，但是当给你一个实际问题，让你通过编程实现，不是简单地罗列 API 即可完成，而是需要你对问题进行分析，理清解决问题的逻辑，然后再通过各种算法、数据结构和 API 等进行编程实现。当你解决了思路构建的难点，解决了一个问题，但是你是否使用的最好的方法，这就是所谓的做出来容易，做好难。写的程序能够解决问题且没有 bug 是基本要求。这里的做好不是指功能正确，而是写的程序容易理解，能够很容易让其他接手的程序员（水平不差）看懂为什么这么写。并且程序的可扩展性，规范性高，后期维护难度小。整体功能实现的过程中，各种情况考虑规范。其实学习编程和学习其他内容一样，没有什么太大差别。心态放好，用对方法，你就能够学好。重要的是学知识的人是什么样子，而不是学的是什么。在这给你一些学习编程的建议，希望对你有用。想要培养一项技能的最好的办法，就是将他融入到我们的生活并成为我们的爱好。其实说白了，就是让这个爱好成为一个习惯，一天不去做这件事情，都会觉得少了什么。在不知不觉中，这个习惯会像滚雪球一样积累起来。对我来说，养成这种习惯首先就是要对“拖延症”说不。比如，你想锻炼下自己的写作能力时，但是没有好看的本子，没有好的灵感，没有安静的环境....总之就是找各种理由一拖再拖，最后就不了了之了。为自己设定一下，每周拿出几天，每天拿出几个小时，编程学习就这样慢慢步入正轨。对待编程学习，我们没必要像健身狂人那样一口气做到筋疲力尽。与其直接编程2小时，我们完全可以先做40分钟、然后休息5分钟，整个过程重复4次。很明显，40分钟这样的短周期更容易坚持也不会带来多少压力。不过这样的方式应该配合更为灵活的执行思路。如果你感觉状态很好，而40分钟才刚刚完成热身，那就继续做下去并努力让自己抓住这种状态。向大家推荐蕃茄工作法，这是种学习新型技能的良好机制，推荐各位认真了解。在确定好学习方向和技术栈之前，你可以多做尝试，学不同的语言。但是当你学到一定程度，知道自己对哪个方向更感兴趣的时候，就不要广撒网了，一定要专注于你所选择的领域，做深做精。认真系统化地学习相关语言知识。当然，这不是让你就知道看书，你要看书的同时结合项目实践，进而对自己的掌握程度得到反馈，知道自己哪里不足，再继续学习，如此反复，详见第四点。当你选好方向，认真学习基础知识后，学习一部分的知识，就结合项目做一些实践，已明确自己哪里不足。并且做项目能增加学习乐趣，给自己提供一些正反馈，让学习变得有趣，让自己有足够的动力继续学习。学习编程不能闭门造车，经过这几年的编程学习，我认为想要提升编码水平的最佳途径就是多看、多写。看别人的代码，看一些程序员大佬写的代码，看一些标准库的源码，仔细思考他们的编程思维和编程方式，以提升自己的编程思维和编程方式。阅读别人的代码也确实是快速提升代码水平的一个技巧。学习编程的一个很好的方法就是和其他的程序员交谈。这不仅能够帮助我们多获得一种思维方式，同时也能够以更为愉悦的感受完成学习任务。至于内容没有特定的要求，可以是你正在学习的东西，也可以是你认为很酷的东西，更可以是你正在工作的东西。这样做可能会让你学到很多关于库，服务，编程语言和模式方面的知识。但是，最重要的是，你能了解到其他人是如何看待编程的。如果大家学习了一种新的编程概念，但不能确定自己是否已经真正掌握，可以写技术博文加以检验。或者是在值得提醒的一点，别因为自己刚刚涉及编程而有所顾虑。罗马不是一天建成的，出色的程序员也是一样。只要您对问题有所了解，就不妨给出自己的答案——无论对错，这都将成为一次宝贵的经历。对于人生来说，其中任何目标的实现都离不开耐心。编程学习就如其它任何学习任务一样，都需要反复努力并投入大量时间。在这个过程中，你一定会经历高潮与低谷——别被这些曲线影响了心情。接受已经发生的一切，并尽可能避免其中不好的部分。就像打高尔夫球一样，我们的手感总在不断浮动，但只要坚持到底，你最终总能成为一个大神呢~,面试,"回答这个问题之前，先说一段我在腾讯当码农的经历吧。那时候还是2008年，我加入腾讯做开发工作，部门是QQ GAME下的QQ游戏大厅。刚工作总是兴奋的嘛，培训了一周后领导就交给了我一个任务，做QQGAME的换肤功能，现在这种换肤功能已经很强大了，彼时还是比较新鲜。用C++做了个换肤接口，原理很简单：控制Draw函数，传入颜色(rgb)和透明度(先做了一个demo，运行良好之后，开始在UI基类UILogic中加入换肤接口，大概就用了四天，写了2000行代码，自测完美，然后就喊领导交活了。结果被领导骂得狗血淋头：架构不合理、耦合情况严重、边界情况没考虑、代码运行效率低、代码不够优美、注释不清晰、没同步产出文档、代码没遵循部门格式。。。为了解决这些问题整整又花了2周，领导才勉强满意，，，，，结果提测后，被测试又测出来各种千分之几概率的bug，为了解这些bug真的是差点没给我整出高血压。又花了一周，测试通过，上线后测试又各种报线上bug，电脑机型、操作系统版本适配问题，整的头都大了。。经过这一役，我才开始明白编码究竟难在哪里。。1.实现并不难，框架设计非常难2.提测并不难，debug是真的难3.上线并不难，解决线上bug是真的难4.效率优化真的难5.架构和实现都做到优美，真特么难6.写文档言简意赅，真特么难也感谢入职腾讯就遇到一个严苛的领导，让我知道了编程难在哪，也让我知道了如何成为一名编码犹如盖一栋摩天大楼，架构就是地基和钢筋，如果框架设计这步就错了，这个楼盖得再漂亮最后也得坍塌，算法和数据结构就是电梯，如果不行各种出问题，大楼的人没法上班。文档就是这栋楼的指示牌，也得重视起来，严格的自测和测试就是抗震能力，不合格以后一个地震，人和楼都没了。。。单纯的编码过程，反而如同搬砖的过程，并没有太高的难度。功夫都在诗外呀！说实话，很多程序员只是会写代码，计算机体系知识非常欠缺，这会导致长期的编码生涯会遇到严重的瓶颈。美国有很多优秀的操作系统公开课，比如mit6.828、哈弗OS/161。这类课程都会给你提供一个mini os壳程序，相当于一个核心组件，剩下的你可以自由发挥。比如你可以设计线程管理、文件系统等等。相比只是看操作系统的书籍，这种学习方法的效率简直高100倍！国内也有一些顶尖高校也是采取类似的方式，比如清华ucore基于 Linux 0.11魔改版本国内说数据库就是mysql，这点要相信我！基础：调优：核心原理：架构与运维：对于零基础的童鞋：首先，学习基本的SQL语法。完成这个后，你就可以编写SQL语句了。这一步推荐：W3Schools的 其次，学习数据库的主要功能和使用方法，比如用户相关或者权限相关等等。推荐两本书：2.《看完这些并且实践+思考之后，可以算入门了。接下来对于希望深入学习的童鞋：我推荐几本书（很多大神都这么推荐），《高性能MySQL(第3版)》、 《MySQL技术内幕(第4版)》，《MySQL技术内幕 InnoDB存储引擎》，《深入理解MySQL》还有Mysql的官网。读完这些东西，再加些丰富的经验，理论上来讲就具备DBA的水平了。十分推荐阅读我分三个阶段来介绍：1. 入门第一本书 建议看2.进阶然后第二本要看 《TCP/IP详解1:协议》，这个阶段需要多思考和动手网络在LINUX系统上发挥的最淋漓尽致，所以在学习的时候最好学习LINUX配合使用，学习LINUX,推荐《鸟哥的LINUX私房菜:基础篇》。学习网络过程中,要不断主要技能应该是 ： 对TCP,IP,DNS,icmp等协议应该都蛮熟了得了，dhcp/tftp/ftp等协议也应该都懂些，重点是要学会如何分析一个协议及LINUX系统的基本操作也差不多了。3.高手阶段这个阶段需要有一点的编程能力，指C/C++编程。主要学习的方向是协议的实现和协议的架构原理顺便送大家一份硬核计算机经典书籍，我把大学和工作中用的经典电子书库（包含JAVA、数据结构、操作系统、C++/C、找工作面试题等）打包在一起了，这套资源是伴随我从学生一路成长为腾讯高级开发工程师，360技术总监的打包全套，非常宝贵：听起来很简单对吧？实际上很多程序员缺失这样的能力。不知道大家有没有见过「复制粘贴工程师」，review他们的代码甚至会发现一些网上的注释，又或者其他人的编写错误。不少工作多年的程序员甚至连一个简单算法排序都没有考虑，当然这并不影响普通工作的输出，但在面临调优或者攻坚，这类型的程序员的表现甚至比刚毕业的优秀程序员还要糟糕。在压测模拟过万人同时使用的情况下，没优化前服务端程序直接卡死，优化后能流畅的运行。在这个复盘过程中，我发现实现这个功能的程序员缺乏基础的算法基础。for循环的嵌套，简直是触目惊心。BAT大厂招聘高级工程师，为什么总是要求手写各种算法，恐怕也是基于考察裸编程能力。查找和解决BUG会占用程序员大量的时间。查找BUG产生的根源不是一件简单的事情，需要整体的分析和经验的沉淀，同时还需要对各种调试工具熟练应用。不少程序员，解决完一个BUG却导致了更多的隐患，没有真正把BUG产生的原因找到，只治标不治本。对于程序员来说，掌握在合理的步骤内修复BUG，以极简的方式编写较少BUG的代码的能力，就能显著提升效率。另外在团队中担任骨干的往往都是调试能力极强的程序员，在其他成员遇到困境之时，快速定位解决问题。能否运用调试技能快速解决问题，是衡量一个程序员水平高低的重要标准。有一种炫技程序员或者一个产品功能，有人用了500行实现，你写了几千行。多出来的代码有价值吗？不仅没有价值，还会对未来接手代码的人有很大的困扰。不要多写一行无用的代码！老板想了个idea授意产品经理估工期。产品经理原型都没画出来，只有个大概想法，就找技术排工期。为什么这么说？只有具备这项能力，才能让开发工作游刃有余、可进可退。事实上锻炼这种能力也并不困难，拿移动端开发来说，一个idea大概对应多少个页面多少个逻辑类，是能够估算出来的，以此为基础完全可以估出大概时间。更不用说产品文档出来之后的预测，会更为精准。首先在没有出文档之前的估计，可以作为给老板的重要判断武器。做任何功能一定会投入研发力量，而往往研发力量是最宝贵的，如果在idea出来之后就能大概知道工期，对于做什么不做什么的判断，意义重大。产品文档出来之后的精确工期呢？对控制风险和进度把控非常有帮助，这个时候的精确排期其实对风险点的估计、资源协调的能力都有很高要求。准确预测的过程其实就是风险预判的过程。比如数据结构、网络协议、操作系统相关知识，等等。程序的很多问题都是源于对比如Docker技术兴起，改变了CI/CD的方式，推动了：一提到从技术战略的需求层面来看，如果分布式锁在极端情况下获取锁的不一致，社交业务场景能够接受，那么基于Redis的实现是完全可行的。那么基于Redis的实现方案是不可行的。在锁强一致性的场景下，需要采取基于CP模型的etcd等方案来实现。做出以上判断，需要深度理解程序员非常不情愿看到的一种情况是，需要在一些无关紧要的功能上浪费大量的时间，但你又不得不去将这个无关紧要的功能实现，因为它牵扯着这个项目的主要功能。详细而缜密的顶层设计能够减少上述情况的发生，降低模块间的将通信部分的各种设计搞定，其他锦上添花的方面都可以后续慢慢补充，例如客户端交互、好友关系等等。无论哪一种，过分追求完美都会对业务交付产生影响。完美主义会影响程序员的心态，过于担心外部评价或过于追求内心的安全，反而会导致设计上的过度和偏差。程序员真正产生价值一定需要和业务结合，业务交付的及时性、健壮性、简洁性、可持续性一定是首先需要考量的事情。在我看来，这也是追求完美主义的一种体现，诚然有一个类似阿里那样的能给各业务线赋能的中台是一个美好的愿望，但很多时候连业务方向都要多变，追求这种赋能无异于空中楼阁。前几天我的读者群又有创业者在谈AI中台，我只想说既然是创业，咱能不能先MVP？等业务用户量更大了，再来追求更漂亮的实现？推荐一本书：《人月神话》探索了达成一致性的困难和解决的方法，强调杜绝完美主义。既有很多发人深省的观点，又有大量","难在心急。。。。。。。。。。。。真的，都太心急了。。。。。。。。就像学数学，加减法小学的时候，要天天练习，才能在学乘除法，乘除法也要写好多题，才能学方程。。。。。。。。其实编程正常来说，也是这个道理，数据结构和基础算法（不说那些太难的，就说排序的那几种简单的）都没学会，然后就开始学掉包。。。。以前有非专业的人想学编程，我给推荐的，一般都是多花点时间，刷刷数据结构和算法的基础题，然后看看怎么操作文件，读写，最后在看看TCP UDP的代码，别起手，就上什么numpy pandas，mysql ,redis，掉包urllib库。。。。。。。但大部分人，根本就静不下心来，感觉人家百度上的代码，用这个库，可能就2 3行就OK了，为什么我要听你的，自己手撸呢。。。。。。没什么办法，那就愿意掉包，就掉呗， 人家包里面，为什么传这些参，参数类型为什么是这个，都不懂，纯靠背，纯考提示写，出了BUG，自己还不懂，继续百度，百度半天还不懂，在去问人，其实都是基础的问题的，过一段时间没人愿意解答了，自己也就坚持不下去了。。。。。。。剩下的，也有智商逻辑的问题，的确，业务逻辑太复杂，有的人搞不明白，几层嵌套就完蛋。。。。。。",我觉得难的是写文档，做ppt，吹牛逼。,说个真实的案例。我上学期做计算机网络课程设计，用Java，写一个QQ的主要功能。我是完全模仿QQ的，实现了私聊公聊加好友，传文件的功能。用了2个月，当然是断断续续在做，因为还有其他课程。现在回头看一看工程，代码量不大，也涉及不到高深的算法，但是还用了很长时间，为什么？因为需要用到Java swing，许多界面需要去学习，这玩意老师又不交。还有一些细节问题，比如如何在关闭聊天界面后，再打开该界面，之前的聊天记录还在？这些东西占据了我开发的绝大部分时间，实际的核心功能实现起来反而比较容易。再说刚刚做完的一个iOS大作业，不好意思的说，没做完，只实现了部分功能。服务器用vapor，我不会用，因为常用navicat mysql。客户端就是swift去写，同样的，功能很简单，也就是数据库增删查改，但是比如swift的界面下拉列表怎么处理？要知道如还有iOS语言的坑，比如字符串startwith方法和hasprefix方法有啥不一样？我用后者就可以得到想要的结果，用前者就不行。看看上面两个案例，都是我最近的真实情况。实际上，普通的编程并不难，就是经验而已。入门是艰难的，因为你需要了解语言特性，转换计算机的思维方式。但是一旦你知道某个功能应该怎么写代码，就不难了。但是往往这个代码需要你平时的积累。剩下的比如算法的难题，工程的难题，我认为大部分也是经验的问题。只要别入swift这么年轻的语言的坑，像Java，c++，解决方案有很多。面试鹅厂，我问开发的时候需要自己写的代码很多么，面试官说其实大部分库都是现成写好的。所以说，编程实际上不很难，写过一个工程，其他相似的工程就很快了。但是由于学习的时候有许多方面涉及不到，而开发的时候这些又是基础，所以现学现卖，就比较难了。,"今天就和大家好好聊聊“从小到大，我们受到的教育终极目的是有一个：考取理想的学校。每一张张考卷都是一个个堆砌起来的知识点：三角函数，解析几何，数列，函数…...这么多知识点，你需要做的是背下它们，或者说的更高级一点，理解它们。即便是强调思辨和分析的“文科类”，也可以靠死记硬背答题模板拿分，就连作文都要有统一的标准。记得有一年考试，题目是对出题老师原意是让大家批判孤芳自赏，但有同学偏偏赞美孤芳自赏，赞美这种洁身自好的精神。而这种文章要一律判作不及格。年纪尚小的我们甚至都来不及怀疑“为什么这个学生说得没有道理？为什么所有的人都只能有一样的价值观呢？”因为千万军挤独木桥，保险起见的我们只需要按照所理解下来的知识，将一块块碎片，根据正确而万能的模板拼好，才容易拿下满分。我们非常擅长理解和记忆，并井井有条地套公式。这一切，到了学编程这里，而编程的核心，不是编程，不是语法，甚至不是算法或数据结构本身，恰恰是清华大学前校长陈吉宁曾提过一个观点：清华大学里有很多“A型学生”，但未来社会最需要的是“X型学生”。“A型学生”，指的是传统观念里的“好学生”，他们的成绩总是能得“A”。“X型学生”与之不同，他们的成绩并不一定拔尖，但愿意承担创新风险，勇于尝试新鲜事物。两者最重要的差别，可是我们连作文还不敢写得太跳，生怕阅卷的是个老古董，大笔一挥，让你再考一年。创造力，更是我们在学校想都不敢想的事。绝大部分学生的思维，早已在填鸭式的教学中，变成了一个只会收纳外部知识的容器，根本无法用所学的东西创造出任何东西来。所以，当我们开始学编程，面对“因为编程没有“题型”和“公式”能把你解决问题的过程简化成填空，编程提出的问题基本都是空而泛，需要你根据脑子里的逻辑推断，利用所学编程语言的各项功能组织成代码，来解决问题。但是，只要你明知其中不易，仍有一腔骁勇，你可以尝试在编程的世界中，保持“实验者心态”，不断探索自己的想法，质疑自己的假设，从所犯错误中学习宝贵的经验，就一定能在编程的魔法世界中得到更多宝藏。如果你看过《的子健，他是台上的狂躁主唱，台下的学霸码农。即使每天都在和冰冷的数字打交道，但作为程序员的他，体内有被保护得非常好的创造力，使得他拥有满腔的诗意与细腻的内心，更可以谱写出令人折服，引人共鸣，充满无限色彩的音乐作品。学编程，往往学的也不仅仅是计算机本身，而是将各行各业，结构力学，生物细胞，光学声学……等千百万个行业，抓住它们的重点，迅速理解并且教给CPU，让它代替人类工作。尤其是身处信息时代，计算机是信息处理的核心，商业、农业、工业、教育等，都被计算机技术推动着进步，这是编程的第三难。应试教育标准化的课堂，正好背离了这点。从前的课堂里，为了实现教学效益化，将课程进行了划分。遗传学被归入了生物课，概率这个概念被归入了数学教育，然而遗传学实际上是对概率的应用。同理，物理明明需要应用代数和微积分，它却与这两门课程脱节，成了独立的学科。仿佛每个知识只存在于真空中，于外界事物毫无关联。这些划分限制了学生的理解，让学生对世间万物运行规律的理解产生了偏差。于是，为了了解每个“独立”的知识，我们接收各种各样精细化加工的知识：推演好的理论、公式，讲义、ppt、难点总结、高分模板，我们无需知道这些公式是怎么推导出来的，只要运用公式去解题就好了。所以，你说编程难吗？编程一点都不难，难就难在，""学以致考""和""学以致用""是不一样的；记忆和创造是不一样的；学好学科和理解世界是不一样的。当然，并非要彻底否定应试教育。在中国教育资源极其不平均、经济文化撕裂的大生态下，以考试为目的的教育，提供了一套非常清晰的评判标准，通过分数这个显性的指标来筛选和划分学生群体，选拔出社会精英，可能是当下最公平的取舍了。只是时代在不断的发展，无论是学校，家长还是孩子，都应该反思一下现在的所接受的教育形式，如何发挥出每一个孩子的个性，让他们成长为更好的人——学编程的过程会给你提供答案。",现有很多答案道出了大众进入编程领域难在哪里。换句话说，就是入门的难点。我补充一下对于驰骋在编程战场上的人来说，真正的难点在哪里。关于这一点，或许每一位将军的看法不同，但我比较赞成这句话：翻译过来就是：计算机科学有两大难点——缓存失效和命名。出处至于为什么这么说，一言难尽，领悟的人自然懂得，没领悟的人要么是还没达到境界，要么是已经超越此境界了，当然也有自以为超越了此境界其实还没达到境界的……好了，我要继续这周还没完成的工作了——想想我接下来要写的这个模块应该叫什么名字……,
身为程序员碰到最奇葩的需求是怎样的？,镜像问题：身为设计师碰到最奇葩的需求是如何的？,就最近，部门老大找到我：你，做个微信小游戏吧。我：啥样的？老大：emmmm，反正你就做个微信小游戏吧，现在这个火我：？？？？？？(黑人问号脸)读了几天文档，靠着面向搜索引擎完成了，居然还得到了老大的肯定。为了庆祝一下，当天我就奢侈了一把，找了家附近的麦当劳：你好，我要一份麦当劳。,1 某领导：从本月开始，网站响应时间每个月减少0.5秒，计入技术部KPI。  我：？？？？？负数响应时间咋做到？？？？2 某领导：我们网站故障率太高，下个月开始正常运营时间要达到99%以上！！！  我：哦，上个季度一共宕机30分钟，看来还有很多额度可以用啊。3 某领导：这个视频，剪辑成四部分，第一部分让人免费看，第二部分要回答问题才能看，第三部分弹出页面让用户填写邮箱，我们发个邮件给他，让他在邮件里点开才能看，第四……  我已经无视下面的话了，哪个受虐狂用户会看到第四部分啊？你以为你放的是毛片吗？另外我发现不光我这，别的回答也有类似的评论：“说这些之前不妨想想他是怎么成为你的领导的”我知道有些鸡汤总说：“存在即合理”、“走到这个位置的人必有可取之处”。但被洗脑的人从来不自己思考一下，这个“可取之处”你是能学还是能练啊？然后勤学苦练弯道超车升上高位报复回去？？？这是网络小说看多了还是国产都市剧看多了呢那我举几个例子，鸡汤众练一下吧。我某个领导，是老板的妈，谁来学一下？某领导，有从龙之功，跟了老板二十多年，都没提过涨工资，谁来练一下？讲点实际生活中的段子，大家乐呵一下就算了。那些灌了两口鸡汤就四处阴阳怪气的人，我实在是不待见。,有一天公司老大找我，说：“给app做个功能吧。”“好的，需要添加什么功能呢？”“玩过知乎吗？”我谨慎地点了点头，说：“玩过。”“嗯，玩过就好，知乎有个推荐功能用过吧？”听到这里，突然有种不好的预感，但我还是乖乖地回答道：“嗯，这个功能挺好用的。”“既然你用过的话，就给咱们的app文章部分也增加一个推荐功能吧！”我用满怀惊讶又不敢否定的语气回答道：“嗯，行。是所有的文章都在要应用到推荐范围里吗？”这时，老大不耐烦地说道：“就是推荐功能吗，你又不是没用过，要做成什么样，参照知乎的就可以了嘛！这事就交给你了。”我对老大的语气早已习以为常。然后又问了句，“就我一个人做吗？”老大用很肯定的表情点了点头，“对，就你一个人做就行了，这又不难。”“可是。。”，我还想再说些什么，但老大已经转身离开，连给我辩驳的机会都不给，只留下我一人在风中凌乱。,讲两个真事儿。。曾经呆过一家小公司，做一个Web系统，主要工作内容是伺候某官府的老爷们，那帮老爷年龄基本都大了，有些Windows基本操作都困难。。某天一位老爷打电话过来。。。后来，我纠结良久，默默的改了下载文档的链接，在某页面有个很普通的“人员信息录入”的表单，很普通很正常的那种。老爷们觉得不好看，但是又说不清具体哪里不好看。(不好看 * 1)来来回回各种改UI，各种改交互，风格。N多版本过去。老爷们还是觉得不好看。(不好看 * N)想让老爷们提供个好看的例子，也一直提供不出来。后来项目领导拜访老爷们，进行了正常和非正常的公关后，才请教清楚了这个问题，理由很雷人。老爷们觉得“姓名”的文本框是个方框，不愿意把自己的名字填在方框里，因为只有狗带的人名才放在方框里。最后终于在干掉了文本框边框，只留下方一条线后，顺利交付了这个功能。,客户：做个百度几千块够不够？程序员：不够的！客户：一万够了吧?程序员：不够的!客户：就那么几个页面，我做一个淘宝也只才几千块，你是不是坑我?程序员：你找到了可以做的麻烦介绍给我，我也想做一个。。。,当时还在大学里，接了个私活，给一小公司做个库存管理系统做完验收通过后，我把源代码，工具，安装包，文档等刻了张光盘给那边的老板，说这里面是源码安装包和文档，很重要哈，我自己很快要毕业了，后面自己电脑里不一定会留这些，你们要注意保存好，别弄丢了。老板第二天上午又来找我了，说光盘拿回加里的DVD上没法播放，里面的文档和代码没法看，想想办法文档也不多，我就直接在自己的打印机上打出来给他了，结果他还不走我就问他还有啥事他说文档是可以看了，代码没法看呢，厂里有小伙子想学，要不你把代码也弄一下让我能看？我说可以，然后就写了个小工具，把源代码包里的内容按照名称，路径等导入到了word里面，因为前后端代码没有做分离，生成了前后端源码，和配置文件和数据库脚本等数百个word文档，然后把这些个word文档都拷贝到U盘里，然后告诉他说你拿回去在电脑里可以用office就可以看了，不用装IDE，不过如果要改代码的话，还是要装开发环境，用IDE来进行二次开发。然后老板就走了，我以为就结束了晚上我下楼吃饭，结果看到老板扛了个蛇皮袋往他的摩托车上捆扎，看到我就给我打招呼，我说你这袋子里装的什么呀，这么沉。他嘿嘿一笑：我把你给我的源代码都打印出来了，里面还有一袋子…——————其实完全没有说那个老板怎么怎么样的意思，那一辈人的心思其实是非常朴实的，就是我花了不小的一笔钱买你的软件，总得让我看到点什么，就一张光盘确实不踏实，打印出来了看的那么多沉甸甸的两大袋子，就觉得心里踏实，值了。那时候四十多五十的人用电脑打字都是但其实绝大部分代码都是开源组建或者自动生成的，那时候js也没有压缩，看起来几千行的一个代码文件其实只是css，或者一个js的日历控件，或者一个sql的初始化数据什么的，写业务逻辑的业务代码和核心代码也就四五万行，二次开发的话真正要看的也就一万行左右的代码，再看api就好了。心里是很敬重那一代人的，踏踏实实的做生意，即使是一个完全不懂得行业，也要想办法弄懂一些。,电梯软件设计。有一次接到一个电话：“胃，赵工哈？我们这里有块电路板不小心烧了，您看看改改软件能给改好不。”？？？,实习公司有一个甲方提供的外包管理系统老板想要该系统中的一个数据但是这个数据甲方在系统中是加密存储的不提供给我们公司领导:那个运维啊，你来把他的系统破解了，要不把他服务器黑了也行。给你一天时间，搞不搞得定。,8.25更，虽然之前也发过一两个回答但都沉了，还算是个小透明吧，所以这次能破4k我真的很谢谢大家的喜爱，。愿有脑洞的人不被世俗压垮。我觉得应该把这个回答列为评论比回答精彩系列。个人表示超级喜欢这种头脑风暴的，一个脑洞引发的无数脑洞。评论里手电的那个点子我觉得比这个还秀了。看到评论区大体上风起和谐我也就很欣慰了  原文如下说一个奇葩的idea啊，大一那年学校里让报互联网+比赛一个奇葩同学出的奇葩idea。他问我们导师共享单车算不算互联网+，导师说算的算的。ok，于是他感到思如泉涌，也决定搞一个共享新模式————共享座机！！！！没有，你没有看错，共享座机！！！！当时他提出来的时候大家没觉得有什么不妥。觉得还算个中规中矩的idea。于是导师也同意了，他就开始各种搜集资料，写市场需求，写前景，材料都写的差不多了，突然有人来问——你们怎么盈利啊？——和共享单车一样啊，扫码啊。——用什么扫啊？——你脑残吧，当然用手机扫了。——哦，打扰了。于是那人呵呵一笑，转身而去，十分潇洒(当然，是我加的镜头)然后我同学还问我怎么了？有什么不对的？那个人有病吧。后来那个奇葩知道问题所在以后，气的没把自己电脑砸了，又气又乐。,当初刚毕业进公司做网站，给政府部门搞个门户网站，他们居然要搞个网上商城…尼玛还要跟淘宝那样的…那你们干脆去淘宝开店好吗…最后简单搞了个购物车…弄了个淘宝的接口…然后又来了……搞个论坛…给他们的所谓会员吹逼用…又考虑政治敏感…又怕别人瞎发表什么不和谐言论搞的自己吃鳖…要求敏感字过滤…时间要求还特别急…就我一个人开发…得了…我一顿忽悠…百度贴吧建了个贴吧…管理员给您…您随便玩…,可能有点偏题，一朋友的号让我挂几天，然后……嗯，50的需求（没骂娘，但心里快憋出一口老血）嗯，整体框架好歹总要有的吧？数据库好歹也要有一个吧？扫码响应后台提示总要有吧？后台管理账号应该不能少吧？设备种类，办公区，办公室，工位总要架构保存一下吧？不考虑美工因数，这些活从数据库构库到码代码功能实现，我觉得如果是像我能吃不能干的这种人没有半天时间是下不来的。但他的需求是50搞定……,收到这个多赞惊呆了。故事的结尾是，我拔下了自己家里电脑的4G内存，给阿姨组了6G。我自己本身是8+4的组合。当然没收阿姨钱，毕竟是邻居。***************真事。去年过年回家，领居阿姨敲我家门。阿姨：听你妈妈说你很会电脑啊。我：会一点点吧。阿姨：我电脑特别卡，你能帮你看看嘛吗？我看了一下，发现东西很乱，配置也很老了，2G内存装个64位的win8，也不知道是哪个坑给装的机（台式）。我看着处理器还是个i3，觉得还行，升级下应该就可以。我：阿姨，你这个内存太小了，升级下，硬盘升级成固态的也会快很多，您再看看您有没有什么重要的东西， 备份一下，我给你重装个系统。阿姨：这个要多久能弄好啊。我：准备好的话半个小时就可以了。阿姨：半小时就能弄好啊，那你帮阿姨弄一下吧，这要是搬到电脑城至少要50块钱吧。半小时阿姨就不留你吃午饭了啊。我：.....,不请自答。多年前，刚入行时的事情，一个sencha touch的项目，运行于IPAD。光标点到输入框里是会闪烁的。然后，我的甲方说，我觉得它闪的有点慢，让他闪快点......年幼的我一脸懵逼，不知所措。--------------------------------  补充  ------------------------------有人评论问最后怎么解决的。 当然是把他拽到厕所打了一顿啊...  哈哈哈哈哈 开玩笑啦。   沟通了一下，他就打消这个念头了。补充另外一个好玩的事儿，我同事遇到的。某项目UAT日常例会。甲方：“xxx功能有问题，和我想的不一样。”我同事：“不好意思，这个问题我们排查过，是因为浏览器不支持。”甲方：“浏览器是谁做的。”我同事：“谷歌。”甲方：“谷哥是谁，把他给我叫来！”我同事 ---->>---------------------------------  我好像是分割线  ------------------------------------讲了两个工作中遇到的小事，得到这么多赞，挺开心的。评论里，有人觉得好玩，有人觉得我胡扯，有人来探讨技术，有人要强行装一波13......大家开心就好。故事是真的，这点我可以保证。至于技术细节，还是别问我了。 毕竟我已经好多年不写代码了。不过，我依然觉得程序员是世界上最有意思的职业。,是时候祭出这张图了,接手替硬件部门写的一个系统，同事离职了，烂摊子到了我的头上。下午两点。刚从我不明觉厉，只能点了点头。下午三点。硬件部门老大打了个电话过来，“升级没有?”升级?wtf?怎么都是普通话，我却听不懂。三点-五点陆陆续续接了无数个他的电话，“搞完了没有，还有多久?”“现场一群人等着呢”“客户都要生气了”当时我弄懂事情真相之后，手一抖键盘都差点摔了。终于体会到关谷神奇说的，出版社通知了发行商通知了记者，就是没有通知作者下周出版漫画，这是一种多可怕的情景。两点下好代码，没有咨询过你做新需求要多久，直接就去见客户演示产品了，这心得多大。,   之前公司领导，突发奇想找了我们三个开发人员商量，想要把没有建筑高程数据的地图影像通人工智能算法，识别太阳光照的阴影，识别出所有建筑，并计算出所有建筑的长宽高，然后用3D模型替换掉，变成三维的场景。讲的那个叫激情澎湃呀。前景多么敞亮。  当时我心一草原的草泥马，谷歌就缺你这么一个产品经理，给你五个人你就能绘出整个宇宙。  但是呢，居然让我带头做这件事。好吧，陪太子读书的活给我了。我盯了一下午地图，心里在想，我要是做出来，谷歌地图，百度地图，高德地图......都得倒闭，不行，我不能那么缺德。  然后第二天，新来一个地理科学专业的实习生。然后我们领导转念一想，这个专业对口，可能分分钟做出来。然后我们领导又把大纛交给他了。这才对嘛，这么伟大而又具有创造性的软件需要交给可爱的实习生。  然后过年后我和实习生相继辞职。,做了10多年的BIOS和FW。某一天一亲戚打电话给我，说他有个朋友公司做了块板子，固件一直又问题，让我帮他重写一套，改天请我吃饭。我一听就觉得不妙，婉拒了，跟他说我已经两年多没写过代码了，可以介绍一个朋友给他，专门做外包的。后来做外包的朋友跟我吐槽，亲戚的朋友带了一块工控板，让他重写个BIOS。我朋友看了之后，给了个友情价，8万，对方一脸懵逼的问，写个程序还要钱？,说一个同学的经理。我这个同学做android 的。在指纹识别还是苹果一家独大，其他Android厂商还未进入指纹时代的时候。他的产品经理跟他说：“我们的应用要加上屏幕指纹之别功能！”我同学一脸懵逼，问产品经理：“有样子么？可以想办法仿一个。”产品经理：“应该很简单的，等下我给你发一个”几分钟以后，我同学收到一个App，装上，运行。屏幕上出现了一个类似这样的界面（当时我同学给我看的那个图找不到了，随便找了个类似的）然后手指按在屏幕上，会有一个扫描的动画效果，然后APP就打开了，产品经理说：“这不就是指纹识别么！应该挺好做的”我同学：“..............”2018-6-21日更新昨天跟我的那个同学吃饭去了。据说那个做指纹识别的产品经理已经离职了，换了个一样有想法的产品经理产品经理：“你能不能让这个App（他们公司的一个外包项目）有5%几率闪退？”我同学：“为什么？现在稳定运行不是挺好的么？”产品经理：“你是不是傻，项目有瑕疵才能管甲方要钱继续修改！”后来据说又圈了不少钱，然后把强制闪退的代码去掉了就完事了....其实想回来，某雷，某度的VIP下载加速不是也是类似套路么。2018-7-1更新今天跟另外一个做Java兼DBA的同学聊了下奇葩的PM，这个同学（简称G吧）也给我讲了一个他那的段子。有一天PM找到他：“XX那个项目，有个数据要改。”PM递给他一个U盘“这里有个Excel，有十几条数据，给插到数据库里就行。”G同学：“你确定是插进去就行吗？”PM：“对，插到数据库里就行”G同学花了十几分钟搞定了数据，几分钟后PM电话追过来：“你这个数据还没改好啊？！”G同学一脸懵逼：“改了啊，这几条数据都插进去了啊。”PM：“那原来的数据怎么还在啊！”G同学……WTF……然后花了20分钟跟PM解释什么叫叫插入，什么叫替换2018-7-10更新几天没看赞已经500+了？让我有点受宠若惊。第一次获得这么多赞集中回答几个评论中的问题1、你们怎么都那么关心那个G...那个啥是吧...真的不是我污，我写的时候真心没有意识到这个，好吧好吧，我承认是我污了，还好我同学姓氏第一个字母是G，他要是姓纪，姓金...那画面美得我不敢想象，但是我就是不改！你们来咬我啊。2、关于闪退那个段子的真实性，我也是听说来的，具体是不是杜撰的我也不知道。这个曾经的确是听著名的一个段子，但是段子传广了，就慢慢的成了部分无良产品经理的圈钱手段。现在业内的确有一些无良的公司在这么干。至于有不少人是怎么通过验收的，要知道很多公司的产品验收是做的很水的， 而且不少外包公司结了帐就不管了。3、直接修改线上数据。其实在不少小的项目或者例如某些好了问题先回答到这，说一个我自己的经历大概是4年钱，我在一家国企的软件部门工作，当时公司接了另一个国企的网站翻新工作，分配到了我们的部门，因为原始网站是asp做的，需要全站翻新。开这个项目过了几天，美工兼前端的妹子回家生孩子去了。然后作为一个萌新的我就莫名奇妙的兼起了前端的工作（还要妹子当时把设计都做完了）当时甲方要求我们以天为单位，发布到一个对外的地址上，他们的工程师要实时查看我们的工作进度，并及时反馈问题。（这个就是你们最喜欢的超级负责的验收工程师）然后你们常见的GIF就出现在了我这里，每半个到一个小时我就能接到一个电话，跟我说logo往左调点，大点，字体大点，黑点，...bulabula各种。就是这种感觉到这里还没完，在我受了他两周的电话轰炸以后，突然有一天没给我打电话，我还挺意外。结果第二天我接到一个电话我彻底疯了甲方：“你们这个页面做的有问题啊。我这看着怎么乱码啊？”我：“应该不会啊，前天您不是还让我调样式呢么？也没有乱码啊。”甲方：“但是我现在看的就是满屏的乱码！”我吓得赶紧打开网站看看，即使清了缓存还是正常的：“您好，我这里看着是正常的啊。请请问您现在用的什么浏览器？”甲方：“IE”我：“哪个版本？”甲方：“我看看啊...IE7”我：“不好意思，这个项目是不兼容IE7及以下版本的。”甲方：“那不行啊，XP怎么办？”我：“您可以试试360浏览器的兼容模式”甲方：“不行，你们就得给我兼容IE7”我：“那可能比较困难，您为什么要兼容IE7？是在什么场景下有这个需求？”甲方：“因为我的领导用的是XP，只会用IE7，所以必须兼容！”我当时心里一万只草泥马狂奔而过：“.........稍后我们产品经历会给您回电话....”后来，产品经理跟他们谈了好几天，最后还是同意给他们改兼容性，貌似是同意又给加了些钱。倒是非专业前端的我，加了2周的班，才给他们搞定了绝大多数的兼容性问题。2018-7-18更新我去，一周没看直接过了1.1K？慌得一批啊！第一次拿到过200赞（一个咨询转IT行业好不好的问题）！但是我看了下评论...你们都是在关注G...咳...是么？这个真的不是你们想的那个东西...人家姓“郭”，来看我的口型G~U~O~guo。但是！原答案我就是不改~！心声（误）：改了去哪圈那么多赞....按道理说，收了那么多赞，应该再更几个段子...嗯...我检索一下我的大脑...貌似没那么多有趣的段子了。说一个不算多有意思的故事吧。工作中我们收到的多数奇葩需求，一般源自于神游太空的产品经理，脑洞大开的甲方，还有一批就是审美异常的领导们。向我这种小公司的程序员，一般都是当爹又当妈，除了不用管设计，剩下的从前端到后端，从架构到服务器都得管。很久之前给一个郭嘉某政府部门做了一个网站，带一个人工服务的功能。这个功能直接用QQ的外链，比较简单。一开始美工妹子设计的类似知乎网页右下角这个“建议反馈”这种定位元素。整个网站的风格也是扁平化设计（貌似事这么叫，如果说错了，美术专业的不要打我）。设计的至少我公司这边觉得还挺好看。可是人家领导看了以后，觉得，一看不清楚，二不够显眼。让给改成满屏飘动的那种，然后把图标改成一个客服的头像....没错就是你们想的那种，都快看吐了的那个客服大姐满屏飘，明显感觉就是三流网站的套路。但是，人家领导喜欢啊。美工妹子听完需求，就崩溃了...没办法，我自己瞎鼓捣鼓捣，给搞出来了。后来又陆陆续续提了一堆的界面需求，诸如这个字不够明显改成初号金黄色啊。这个说明出现一次不够啊，出现3、4次啊...等等...反正改到最后，这个网站的感觉保持的一种非常诡异的效果。呃...想象一下以至于后来面试去我都不好意思跟人家说这个网站的UI是我做的...（其实也没必要说，毕竟面的是后端）2018-7-19更新回答被同学看见了……果然程序员的圈子不大……用人家的段子就得提下人嘛，是吧 ,强势置顶补充！嗯……本来名字已经打码了，后来这位顾客实在太凶了，所以拿出来给大家看一下，希望广大同行遇到此人快快退散人类！互相伤害啊！哈哈。此回答只是为了给各位同行图个乐，加班之余过来吐槽，切莫上纲上线。==============================这个我必须要强答一波！在淘宝接外包有3年多了，说实话程序猿干活凭手艺，做事凭良心。一个需求多少钱多长时间，实打实的告客户，有时候我自己多要100都觉得是不是要多了。事情起因是，有一天我预订手办要结尾款，15号发工资，当天13号晚上，手办补款750，手头722.5，就差一点，当时想着找同事借一百就过去了，正好有个学生在淘宝咨询我要做个小游戏。聊了半天说是要做个三消类的游戏，需求说了一堆，还挺要个样，一问给多少钱，说50…对，你没看错，和热评那同行一样的价格！50！这大哥厉害啊，50块就敢提一堆需求还要明天就做完，谁给你的勇气？梁静茹么？奇葩的是我特么接了！这价钱也就对得起我去网上找个现成的大概替换下素材的份。结果交活的时候这人直接说当时说是要两个游戏，还带个打飞机类型的游戏！还特么要源码！大哥，两个项目都给你源码，再送您50个窜天猴，送您上西天怎么样？最后？最后给了我个差评啊，还说我服务态度不好，呵呵，要服务好您去吃海底捞啊，有钱哪都好。本人UE4和Unity项目大大小小在淘宝接了不少，3万的单子也没见过有这位50兄的自信，在下真是佩服还是那句话，程序这东西，凭手艺吃饭，多少钱干多少活，程序真没你50兄想的那么容易。==============================更新一波，就在 刚刚！又遇到一个奇葩的需求！放上截图供各位体会名字打码了，以上信息真实可靠，绝无虚假==============================2018年7月6日再来更新一波这位同学，你要是连文档都不会看，就别做编程和引擎的工作了。出门左转的饭店刷盘子的工作真的挺适合你的。名字我就不打码了，希望各位看到此人速速退散，免得惹上一身麻烦。打油诗出处：==============================竟然破100赞了，一只小程序猿不胜惶恐！感谢各位大佬和有意向学unity的同行，希望能和大家多多交流技术，共同进步。在这集中解答一下，当时补款就差一点钱，满脑子想的都是我能和我的二次元老婆团聚了，完全忘记项目风险这个问题，实在是不应该！希望各位同行能再给我一次重新做一只好程序猿的机会，我绝对不会再因为二次元老婆扰乱市场了_(：3 」∠ )_附上一张同事帮我拍的无毛黑呆供各位兴趣相投的程序猿共同瞻仰==============================竟然破1K赞了，小小程序员何德何能，让同行如此抬爱。感觉这个回答可以做成日常淘宝外包避坑手册，造福广大同行。最后，本人在知乎申请了一个专栏，用来分享平常做项目遇到的一些坑和开发中有用的东西。注意！我的专栏不提供源代码和项目下载！想要代码就自己照着我的图敲一遍，对自己编程是有所提高的！以下帮各位隔离开烦人的广告………………………………………………………_(：3 」∠ )_都说是隔离开广告了，真的没东西了…,多年前碰到一个“投资人”。我看你骨骼清奇，定非凡人。这样吧，跟我一起干一番大事业，我有一个idea，你呢发挥你的特长，我们一起把它做出来。放心，我会用现金投资，你只管莽足劲干。。。省去千言万语。。。两万块钱，我们一起实现一个“淘宝”你看怎么样以上就是我碰到的最奇葩的需求：两万块钱实现一个淘宝。真人真事，11年的事。相信就差一个程序员这样的故事每天都在不同的角落里发生着。最后，爱护程序员人人有责！！！如何评价最近CSDN的行为？,,,,,,,,,,,,,,,,,,,,,
为什么有人可以在屎一样混乱的几千行代码里加功能？不重构能驾驭屎山吗？,,驾驭屎山的唯一方法，不是重构，而是为什么有人可以在屎山里加功能？很简单：把屎山扒拉开，每块闻一闻，找出和你要改的功能对应的那坨屎，把这坨屎套个塑料袋（封装），你就可以假装塑料袋里不是屎，是巧克力。然后，在旁边拉一泡新的屎，等它风干成型（测试通过）就可以收工了。当然，怎样优雅地在一座屎山里闪转腾挪，做到“百屎丛中过，片屎不沾身”，还是需要很多经验和技巧的。不过说白了，就算失误了摔个嘴啃屎，臭也只臭你程序员一个，老板还觉得你很狼性，客户还觉得真香。很多愣头青觉得自己是天才，可以把屎山重构了。他们中的大部分人引发了屎崩，永远埋在了几千米高的屎山之下。极少数人在泥屎流的洗礼中活了下来，浴屎重生。他们真的做到了，他们真的重构了整座屎山！当一个系统复杂度增加的时候，它的熵也会增加，这是宇宙规律。而某些有洁癖的码农，他们非要强行降低这个复杂系统的熵——不是做不到，但需要巨大的能量，也就是成本。你想让谁来付这个成本？老板还是客户？屎山不是一天拉成的。每一代屎山的建设者，都是非常聪明的人。他们非常清楚继续堆高屎山，未来将产生的代价。他们理性中立客观地评估了推翻屎山重建的成本，然后做出了一个充满智慧的决定：这个决定对于每一个人都是最优解，因为每一个人只需要对他当下的目标负责。每一次“继续拉屎”的决定都是正确的，不这样做才令人匪夷所思。如果重构屎山，客户很生气，因为交付时间更长了，还会冒出许多以前没有的bug。老板很生气，因为成本大增，而客户毫无多付钱的意思。就连重构屎山的人自己也很生气：天天钻在屎山里996，搞得浑身屎味，工资却一分钱没涨。尿海不择细流，故能成其大；屎山不拒细壤，方能就其高。屎山就这样一天天长大，终于令最后接手的码农感叹：高山仰止，无论你使用何种语言，师从什么流派，哪怕23种设计模式样样精通，最终还是会踏上前往屎山的道路。因为，条条大路通屎山。就连微软、谷歌、Oracle这样的大公司，他们的产品也都是屎山。Oracle每改一个功能，全公司的服务器需要全速测试几个月。chromium浏览器的源码有十几个G，虽然是开源的，但没有人敢在如此险峻的屎峰上提交自己微不足道的屎坷垃，高处不胜寒。至于微软，呵呵……从win8到win11，10年了，控制面板还是有两种口味：一种是古早味的，一种是苹果味的。office从2016到2021，5年了，不拿放大镜都看不出有什么区别。这段话可能会让你误以为，微软、谷歌都是垃圾。但实际上，他们是地球上最强的软件公司。世界上最高的屎山，都是最聪明的屁股拉出来的。换了一般的程序员，屎山还没垒出一个小屎包，就屎崩了，就这点水平还天天嚷嚷着要重构屎山。所有代码的最终归宿都是坟墓，而绝大多数代码早已死无葬身之地。屎山是不可能重构的，这辈子都不可能重构的。打败屎山的唯一方法，唯有另起炉灶，建一座新的屎山。这就是为什么在巨头们巍峨连绵的屎山脚下，总能有新的小屎包崛起。当然，对于血气方刚的少年，我知道，你很可能觉得我在扯淡，屎山有什么好怕的，重构就是了。明知山有屎，偏向屎山行。来，壮士，干了这碗屎，我绝不会拦着你。我只会献上一本秘籍，祝你早日成功：作为一名有理想的程序猿，我也在努力建造自己的屎山。我想做一个能直接翻译英文pdf的工具，不是链接如下，感兴趣的同学可以试试。目前只有PC版，APP的坑一直没填：Rust语言代言人 。他翻译的pdf是这样的：说实话，得到这样的评价实在出乎我的意料，因为我还从没试过翻译编程领域的文章，初看貌似效果还行。不过，我在受宠若惊的同时，也暗暗感到惭愧。因为只有我自己知道，屎山里还有多少坑没填……不说了，我要进屎山填坑了……评论区有人说反对我当年退出文坛，其实我进入文坛也没多久……如果你喜欢我这种用脱口秀style把道理讲通透的风格，可以尝尝我今年出版的两本科普书。这两本书都入选了2021年度CCF“科普阅读推荐图书”榜单。CCF是什么，对于程序员就不需要介绍了吧……一本既不吹捧科学家的伟大、也不纠结历史细节、只想让你无废话看懂量子、还吭哧吭哧手绘100多张彩色漫画实验图解的硬核科普：一本不屑于教Python和调参、只想和你探讨人类命运和智能本质的AI科普：还有不赚钱、只求交个朋友的套装：,2022年6月2日补一句：你完全说反了。———这个是因为你工作时间比较短…你工作久了跳槽多了就会发现，大多数公司你都是半路进来，大多数项目你进来的时候这系统已经“稳定”运行好几年了，大公司甚至都10多年了。你认为是屎山，当时第一波编写者看看这代码也会觉得是屎山。不，每一个接收的人都会觉得是屎山，然后他用尽全力继续拉屎。在长时间多人数得接力赛之后，这个代码早就不是这个代码了。每一次换新人，一看这代码都忍不住重构一波，但因为时间不够，总有一些代码没用重构，敢动得只有非核心代码，所以，在kpi的压力下，不得不妥协。这样来最保险得做法：自己新写的代码使用新的架构（自己熟悉的），旧的代码不变，需要用老的代码那就桥接过来。每一个人都这么想，然后新的需求又桥接到已经桥接的代码..然后桥接到桥接的桥接的桥接的代码上..所以这个项目中有了大量的桥接代码。所以修改核心代码的难度：不是每次核心代码相加而是：第一次核心代码+每一次代码桥接的阶乘…所以到你头上了，你最好的办法就是继续桥接。明明直接调用functionA就好了的 需要调用一个functionM 间接调用e，间接调用d，间接调用c ….然后才是A..我只能再加一个function H。一个1w行的大方法就是对我最大的仁慈。。。当然还有一个问题每一波人的编程能力或者编程思想不一样。———————-举一个例子比如最开始的作者喜欢kiss原则，代码非常舒服，性能也很好，小而美。第二代喜欢设计模式，，代理模式，工厂方法，责任链..23种设计模式，牛逼牛逼  代码虽然复杂了，但是拓展性非常好，堪比教科书式的案例，前一人虽然性能好，容易懂但是拓展性很差。老子精心设计得代码，可保证10年轻松拓展。第三代不怎么熟悉设计模式，这代码看的他云里雾里，他说：。这什么垃圾代码，一个简单的查询跳了7-8层？一个对象继承了2-3个父级？老子重构， 这写的啥啊，为啥我改了就不行了，改回去就好了，那这样吧，我来还有这块，引用得是jar，都不知道源码在哪..我这个字段加不进去..妈的..还有这个方法是私有的..好了，我用反射来调用..这场景没有5年8年经验还解决不了..多少人都搞不定，被他顺利的高效的完成了任务，领导非常高兴给他发了三个月年终奖。。。第四代 这代码好复杂啊.还有各种切面我终于搞清楚了..。可是明明着bean10个属性，怎最后输出了15个属性？而我的业务需要这几个突然出现得属性..这样好了，我隔离这个代码，使用一个函数屏蔽。所有都和这个函数打交道。除了老代码之外，其他代码舒服了，可是老业务却都还在跑第五代 这代码怎么会这么奇怪？…….第n代 这屎山，老子要重构..卧槽，本人不才，去知乎问下：注意，每一代都是绞尽脑汁，发挥他们得聪明才智解决问题才导致这样的。如果大家痘傻逼一点，老老实实按照老版本逻辑写，或者一不做二不休，彻底重构底，这问题还会存在？质量时间成本不可能三角下，老板可不会允许。所以别怪前任，他们尽力了，其他大多数都尽力了。——————————————————大哥，摆脱，说这么多没卵用啊，我现在急着干活呢？我tm怕撑不过试用期呀。来了来了别慌。对于你我来说，想要玩起来这坨屎需要做这些事情，因为通常这样的项目配置项，中间件依靠很多很杂。大概率会有大量无用配置文件，以及废代码，引入了并没使用的框架，以及莫名其妙的报错，比代码还长的警告..顺利启动这个项目是最重要的事情。2搞清楚如何在ide中，比如idea中打开这项目假如这个项目可以在测试环境，生产环境启动，恭喜你..，但是这不代表你就可以开始干活了。你需要在ide中成功编译..成功run，成功debug..入参-入口-》业务-〉数据》出参比如某web页面上有一个按钮：放款你要做的事情是在放款得时候追加一点业务，比如说黑名单检测。首先找到控制器，如果找不到，打开浏览器控制台，network，看url然后双shift在idea中搜索这个url后面的内容大概率你能找到控制器（ssh项目）如果找不到，比如是gwt，或者其他玩意，那就全文搜索，或者找代码中的配置文件。这样你找到了入口从入口出发 你可以看到宛如瀑布般的川流不息的函数调用..甚至一句注释都没那你统一简化为：数据库操作，非数据库操作两大类数据库操作就可以知道有哪些表。有了表，这样就好多了，就可以分析业务了比如有贷款表，贷款详情表，放款表，利率表，等上十个表。这样再分类成两类，贷款业务强依靠表，弱依靠表。强依靠只记录贷款本身数据，弱依赖⌚️指通知，历史记录等表。在这些表里面找入参和出参数。顺着字段找代码。如果能够从如参找到出参，差不多了。如果不能全部找到，先只找几个。到这个时候你应该可以一两句话概述主要内容了。4搞清楚数据库中表的关系当然大概率啥文档都没..或者文档太久没更新了..因此需要有点想象力..毕竟不是写的博士毕业论文，还是可以猜出来4-6分。5复习下你的业务需求，你需要增加啥入参，增加啥出参，这些参数再哪些表？算法先别管。然后结合搜索代码..到这儿业务自我的差不多了。6学习那些非数据库操作。比如发短信通知，调用接口，写队列，调用非存储中间件代码。到这一步差不多了，然后试图加一个入参和出参。串起来这些代码，表，接口，中间件。如果能完成，差不多了，如果不能，寻找熟悉得人，演示给他看，让他指导，如果他不愿意（大概率不愿意）那就让他在他的电脑上debug讲解一下流程。当然这些都完成不了，也没关系，最重要得是跟你领导同步你的计划-执行-结果，然后求助他，他大概率解决不了会给你一个人帮你，这样可以吧锅甩给他（别太直接，别欺人太甚就行）如果领导说没人，让你自己看。那你为自己争取了更多时间了。记得主动汇报，不要等到deadline再说你不行..不然这deadline真的就是deadline了..未完待续…看的爽麻烦来个三连呗，谢谢。最好说一下，还想继续看我装逼or想学习如何装逼推荐看这几个,别说几千行了，几千万行劳资都可以维护过一个神奇的软件叫3ds Max，总代码量大概八千万行，其中据统计活代码三千万行（就是用户经常能使用到的代码）不过具体到工作经常需要接触到的模块，也就几百万行的样子，有些很成熟的部分，比如图像读写之类的，基本上不用管它然后整体大规模的重构基本不太可能，主要不是做不到，是因为没这个动力，搞的再牛逼也不一定能给公司带来更多的收入，而且我觉得没人有这个魄力和实力下决策也是个很关键的因素其实各种小规模的重构也一直在做，不过吃力不讨好，如果不产出产品价值，用户也会觉得你没做啥，但是事实上你让这个软件的可维护性可能延长了五年不重构能不能驾驭，当然临时驾驭一下是可以的，比如离发布时间比较近了，需要快速解决问题，我就一般会开启黑客模式，我就一个办法，先把关键路径（业务工作流）反复调试，调试到对这个路径上面的局部逻辑非常熟悉，然后开始不过大部分时候还是建议能重构就重构一下的，而且要持续重构，保持这软件的可维护性，不然自己以后回到同样的逻辑再来一次也会很痛苦，我为人人，人人为我嘛。当时团队是使用相互审核代码（peer review）的制度，反正太恶心的代码别人也不想维护，所以基本上review这关也过不了。不得不表扬下3ds Max的插件式开放架构，虽然灵活性无敌，但是因为最初的逻辑和结构设计还是非常清晰的，所以后续可以一直扩展，有些时候通过插件接口把复杂性隔离开了，有些模块可以独立分析，或者基于接口分析改动的影响范围。3ds Max虽然代码量大还能维护这么多年的另一个重要原因是有一套非常成熟的测试机制，包括了自动化的分布式回归测试平台和非常有经验的艺术家测试，这套测试系统和数据也是有专门的团队在维护的。离开了这些的保障，软件工程师也不敢随便改代码，毕竟全球那么大用户量呢（doggy）PS：跑一趟CICD + 分布式回归需要一个小时左右，切分支干别的事不是不可以，但是太麻烦，劳资一般喝咖啡去了^o^后来，有些合作方谈到某个项目，我说你们为什么不这样这样做？他们说因为我们的系统太复杂了，我们的代码量blah blah，结果我一看代码，就这？？？,"      见过一个写了一万多行的代码，就为了调用一个接口发送短信，把这个接口真正的功能独立出来，发现只有10行是封装参数，调用短信接口。      而其他9990行代码在干嘛？各种if  else的判断，外加各种调用其他接口查询获取参数，其中有查询redis，取计数，查webservice、db等等，还有和别的公司系统的对接，最终一堆业务柔和在一起，形成了这一万行代码。    咋一看，这方法名,sendSms，见名知意，走进去，我去，我XXXX，谁他丫XXXX，骂完以后还得继续。   看完这些代码后，我理清了先辈们的逻辑，终于可以加个if  else搞定这个任务了。   至于说重构，给钱了么？给时间了么？   排给你任务的人说，不就是判断一下业务场景，然后发送一下短信么，之前别人做的时候就一天，你怎么还需要一个星期左右？   你怎么说，“哦，代码复杂度高，不重构的话后面越来越复杂，系统会崩的。”  需求会听么？架构师会听么？其他员工加班时会抱怨：“都怪那个XXXX，没事提什么代码重构，要不是他，我现在都回家了”   有一种东西叫做工作，还有一种东西叫兴趣。  作为兴趣，去重构吧，但作为工作，效率是第一。",分情况，大部分时候如果你完全不明白这个代码是怎么回事，那可能是因为你的水平和经验及不上最初设计这套东西的人，许多在他看来非常浅显易懂的设计理由是你完全没有想过的，还有一些奇怪的地方可能是遇到了问题但没能完全解决掉的如果你的水平显著高于之前的设计者，你应该能从代码里很清晰地明白他到底为什么做了这样的设计，并且同时明白这种设计远非最优选择，犯的错误主要有哪几点，并且自己尝试添加或者修复的功能为什么会直接和这个设计冲突；甚至最初的设计思想是什么、途中开发时变成了什么样、后期维护时又变成了什么样，中间哪一段是明显为了应付出现的问题随手糊上去的，哪一段是后来的维护者不理解最初设计做出的错误变更等等。这种时候才是一个适合真正重构的时机，你可以将当前代码的设计和更优的设计之间做一个折衷，在尽量保留现有成果的情况下，提供一个渐进式过渡到新设计的方案，然后逐步逐步替换掉实现错误的代码，并且有针对性地补充测试。注意，完全不修改、继续沿用现在的设计也是一种折衷的方式，这完全取决于你对未来这段代码发展方向的预期。另外，这种理解不代表逐字逐句理解每一行，只要在整体上明白思路、有分隔影响范围的手段、然后在需要改动的局部进行细致分析即可。,听哥一句话，碰到代码屎山，不要尝试重构，如果屎山摇摇欲坠，你赶紧拉上一坨，糊上去就是。哥当年也是激情洋溢，打算把屎山换成,推荐下这本《Working Effectively with Legacy Code》，非常实用。大意是先定义什么是遗留代码：没有介绍很多技巧，印象比较深刻的是怎样小切面地把新的非遗留代码功能加进去，也就是说，我的新代码首先是有测试的所以它不是遗留代码，我可以给它抽个类或者函数啥的把它放一块，然后在老代码里加一点点代码给它调一行，这行调用代码需要简单到不需要覆盖测试你也知道这行不会有错。此外根据「没有覆盖测试的代码就是遗留代码」的定义，每多覆盖一些测试，遗留代码也就少一点... 以及重构前先覆盖测试等等。重构不下去了这本书也有给你心理建设...（试试知乎的带货功能...）,因为加功能和重构完全是不一样的。我记得有另外一个问题是问：为什么有人说只要代码能运行就不要去碰它。这恰恰就是说的这种情况。屎山本身内部在维持一个微妙的平衡，很多地方都是正好只有这一个点是OK的，你稍微改一下就稀里哗啦如同多米诺骨牌一样的结果。但是这很多时候并不妨碍你加东西。你只需要注意不要去改变原来的结构就是了。这就好像操作系统在执行屎山的时候，也能并行执行其它任务一样。对于屎山，你需要做的就是尽量将你新加的加在外部，而不是内部。举个例子，微软的office很多后面加的功能，其实都是类似于执行VBA，也就是用脚本模仿用户手动操作，而不是直接改内部逻辑。所以很多操作很慢。但是能用，这就OK了。同样的功能在google docs里面，很可能就会轻量很多，虽然那是用网页+脚本语言写的。爱立信有位工程师，搞了一套所谓面向方面的编程（AOP），就是改编译器，在每个函数的入口和出口自动插入钩子（跳转点）。这样加功能的时候，就不必动原本的结构，只是hook出去跑新的代码，然后再hook回来。颇有杀毒软件是如何监视其它软件运行的味道。杀毒软件都不需要改你的程序，就可以改变你的程序的很多行为。但是重构。。。那就完全不是这么一回子事情了。大部分时候是，牵一发动全身，稀里哗啦碎了一地，然后决定另起炉灶。但是已有的生意不能停，新的生意也要做，所以最后就变成半新半旧：一座新的屎山产生了。,这个问题我有资格回答，入职微信的第一年的工作可以认为就是在做重构，重构的目标是一个游戏引擎的整个渲染系统。这个很重要，虽然是技术团队，但一个系统原先跑的好好的，重构总要有充分的收益理由，只是所谓“为了未来的可维护性”这一点完全不足以支撑这么大规模的重构。我们最后推进重构的理由有以下几个：有了充分而正当的理由，重构才能被允许加入KPI，而这只是第一步。对于一个已经被使用的大型项目，并不能说我们要重构了，就放下一切全力搞，搞完了再上线，重构本身需要遵守一些原则：在这个过程中，我们做了：整个重构过程包括我在内，纯Runtime大概耗费了20多个高级开发的人月。如果加上工具端的适配、以及业务方的升级和测试方的配合，感觉没100个高级开发的人月打不住。所以，你可以看到在一个比较大型的项目作出重构的决策和代价是多么的昂贵了。要说服老板接受这么高昂的代价，必须要有充足的理由，同时你自身还要面对接下来各种糟心的勇气。如果不是真的必要，这时间拿去早点下班好好生活不香吗，本来国内互联网大部分的项目也活不了多久。,有些屎山是为了政治的需要，刻意为之，有时候过于干净的抽象不一定是好事。懂的都懂。几千行的屎也能叫屎山？有些历史悠久的公司，一个子系统就有数百万行代码。举个现实的例子，我们部门维护的一个平台，在全球的同类业务中属于碾压同行的存在，但它也是公司众多屎山中的一座高峰。可以说遍地都是雷，某些核心代码支撑着数百种业务流，改核心代码的难度堪比外科手术。一个五人规模的精锐团队平均每个月只能产出一千行左右的有效代码，大多数时间，大家都是在进行各种烧脑的分析、测试和扯皮。最后找到精准的位置，挪动一坨屎或者再拉一坨新的。接下来就是跑这种屎山如果不是亲自在里面走一圈，一般人很难想象为什么代码产出会这么低。为什么不去重构？对于这种承载着巨大业务的屎山，重构系统需要的资金数以十亿计，单位是美元。此外，还需要上百号人干上两三年时间，而最好的结果也只是再创造一座小一点的屎山而已。复杂度不可消灭，它永远都会在那里，只是从一个状态转移到另一个状态罢了。巨型屎山是一个标杆，能够衡量出程序员的价值。只有优秀的程序员才能驾驭得了这种屎山，普通的CRUD boy连打杂的活都不一定做得好（关于这一点，我们曾经在外包团队身上验证过）。其实我们都应该感谢这种巨型屎山，是它保住了我们的饭碗，让我们有上升通道，让高级技术岗有存在的价值，让企业不得不开出优渥的薪资来留住人才。巨型屎山是不可能重构的，这辈子也不可能重构，他的最终归宿只能是被推倒重建。巨型屎山的问题在于，经过很多年的维护、很多人的工作，已经没有人能够讲清楚它承载了哪些东西。但如果你还想挑战一下小屎包，还是有一套方法的。至关重要的一点，和屎山搏斗一定要有足够的耐心和细心，每行代码都有它存在的意义，你需要弄清楚这些藏在背后的业务逻辑是什么。如果不能把业务逻辑和细节弄清楚，建议不要随便动手，很容易山崩。你需要先站在更高的层面，去理解这个屎包承载了哪些业务，有哪些业务分支，有哪些细节，然后建议你画个图梳理一下。到了代码层面，你可以结合业务细节来读代码，本地跟踪调试深入理解每个过程。同时可以看注释、看文档或者去问写这些代码的人。只有它是一个稳定运行于线上的系统，总有办法弄清楚的。等你把这些都弄清楚，再去改代码就会下笔如有神。最后，建议对自己的颈椎好一点。,一看就知道没做过大项目，做过大项目就不会有这个问题了。1、有些项目跑了很多年了，语法，思维，习惯都跟现在的主流不一样，随着时间的推移，功能与代码的修修补补，难看是必然的。2、维护的人换了好几批，就好像一句口信经过口口相传最后意思全变了一样，一个项目N个人接手，每个人的水平、习惯、理念都不一样，写出来的东西混乱也就不奇怪。3、有一句老梗叫优化是万恶之源，而什么叫重构？重写一遍代码来实现原来的功能，也就是重构在短时间内是不会有任何收益的，反而会因为重构导致功能缺失或者引发新的BUG，说白了重构只会徒增成本，增加风险，肯定会有人说，我重构是为了更好的性能，更好的扩展性和可维护性，但是实际情况是大多数的软件项目不是技术驱动的，而是业务驱动的，重构在技术上有好处，但是在业务上是没啥好处的，我第一家公司就重构过一版系统，然后推销给客户，客户问重构之后有什么好处？性能客户不在乎，新功能老版本也可以改，重构版本除了增加风险，对于客户来说没啥吸引力，那谁给你的重构版本来买单？4、部分代码可以重构，整个项目建议重做，在现有的项目上重构问题是很大的，直接重做是最直接的，当然这要看高层的想法。软件是有生命周期的，到点了就该让它死，而不是从头到尾的换血续命。重构应该只针对那些频繁改动的关键组件，一些老旧、不明所以、边缘业务代码就放那安安静静的躺着吧。5、对于打工仔来说，主动重构没有任何好处，什么叫主动重构，你嫌弃老代码恶心，就跟领导说我要重构，领导说好，做好的了不涨工资，做差了扣你钱，你不服，问为什么？老板问重构能增加公司收益吗？能减少人力成本吗？能减少服务器开销吗？这些你都不一定能打包票，而重构肯定会影响原来系统的稳定性，徒增人力投入，万一出点严重的BUG还直接影响公司收益，你说老板是给你发奖金还是扣你钱？6、这一句血的教训：,让你去接根线，你还把下面这摊全理了啊！你非得驾驭它干嘛犯不着啊亲！,一个非常有意思的事情，每个人都说自己写的代码结构清晰可扩展性好，每个人都说别人的代码是屎山。客观原因有很多。比如重构这种事在业务上讲基本是没有收益的，你说我花一周的时间重构这几千行代码，功能和以前一模一样，性能也没提升，仅仅是好读了一点，除非没业务做了大家都闲的蛋疼，一般的领导都不会批这种事的。至于几万行代码级别的重构，那更是吃力不讨好，没收益不说，通常还会导致一定时间内功能缺失质量下降。除非拿来作为职级晋升答辩的材料，否则除了一心追求技术的人，谁会有动力搞这个？代码重构的工作量不是线性增长的。几千行级别的代码重构，一周就能搞定。几万行级别的重构基本要两三个人搞半年。更大级别的重构，整个团队十几号人押上去搞个一两年还未必能搞成。因为有能力驾驭二十万行代码的人才是非常稀少的，你的团队里未必有。一般的毕业生能驾驭几百行代码这个级别就算不错的了。毕业两三年达到能驾驭几千行代码的程度算进步快的。在往上到驾驭几万行这个级别，没点技术追求是做不到的。做不到，又工作在大型项目上，那除了在既有框架下修修补补生产垃圾代码外还能做什么呢。大部分人，不过是挣钱吃饭而已，技术追求是什么，能帮我挣更多钱吗？答案是，不能。至少，非常的曲折和间接。大佬分很多种，有 PPT 大佬，有业务领域大佬，有技术攻关大佬。这些领域的大佬和代码质量都没直接关联，有关联的是基础编程领域的大佬，能从宏观架构到代码实现细节包括性能、扩展性等等全方位无死角搞定的那种。可惜的是，这种大佬太少了，远比 PPT 等类型的大佬少的多。所以为什么大部分团队日复一日的在屎山上工作而不考虑重构，除了个别客观的原因，更根本的原因是技术能力不够，办不到。待续。。。,"不少人应该知道Excel 的1900年是被算作闰年，也就是2月多了一天。这是因为给在Excel之前的Lotus写代码的程序猿是个弟弟，为了简化算法就把1900年算作闰年，反正当时功能有限，不影响使用。这也是很多程序猿刚开始建一座山的想法，上面那个勇健（精力旺盛的老头）催的这么紧，我先搞个能用的，有问题以后再改嘛。但是在修正这个Bug之前，有已经有很多重要的文件用上了这坨屎。这些普通人的文件里面的公式肯定是写死hard code进去的，这坨屎要是变了点味道他们还真活不下去了。然后程序猿就开始纠结要不要重新洗一下这坨屎，但是在考虑要加什么调料重新料理这坨屎的时候，更多的人更多的文件用上了这坨屎。好吧我处理不了了，掩饰一下bug，把代码丢给下一任吧？下一任接手一看？什么鬼为什么要我给前任渣男养孩子？你看我长得像接盘侠嘛？掩饰一下bug，把代码传给下下一任吧。越拖延，沉没成本越大，很快这个成本就大到你要是敢动这坨屎FBI就要寄刀片给你了，因为他们的人的Excel也是用这坨屎写机密文件，要是日期改了，记载外星人带肯尼迪去登月这件事的Excel就要炸，克林顿实习生地道的施工方就要不到钱。第6任接盘侠终于肯修这个Bug了，怎么办呢，核心代码上帝都改不了，那我们只能附加上一堆更烂的屎把这个漏洞糊一糊，至于新的屎在未来会造成什么问题？未来？未来关我什么事那是下一个程序猿要头疼的问题，你现在连加班费都不付，整天在涨薪和工资上扯皮，你会付我未来的薪水嘛？古人云不斩来使，说的就是上面的人你不要斩给自己报告坏消息的自己的使者啊，每次有问题都是砍了提出问题的人，除了刚毕业的，谁敢提说哎我们有个很麻烦的Bug，麻烦老板你推了晚上瞒着嫂子去足疗店和重构？对我看得懂前面的人写的屎，甚至他用“1”， “2”，“3” 来定义性别，收入，住址 这几个变量我都知道，就算我能重构这个代码，但是我怎么重构用这个代码的其他衍生代码和文件？它们的衍生产品怎么办？这就是一个深度无穷的粪坑啊你多下去洗几次就不想下去了。非要改我宁愿直接重写。每天早上按一个跑键，然后美滋滋的等程序跑领工资不香么？非要和自己过不去慢慢的修以前人留下的代码？别忘了你的代码可能修一个数就能修的bug, 你可能要把在他们的代码里面玩上几小时的“有的人可是连循环都不用一切都是Hard code啊，而且还是没有排整齐的就算你用代码排列洗了一下很多时候还必须一个一个词修改。甚至还有喜欢在词后面加空格来重命名变量，比如说“pen”, “pen ”, “pen  ”, 我在这没有加双引号有谁能看得出区别？第三个词可是有2个空格的，但是显示出来只有一个，你注意到了吗？为了掩盖这些弟弟的无能向上面的人交代，我们还特意发明了一个专业用词，胆子大点的还能作为KPI，Backwards Compatibility回溯兼容性。简单来说就是说：我们保证了产品新版本能让旧版本也能运行。翻译：",你你有那个精力和能力么？一些真的大型项目第一代程序员可能都已经死了，对应的 domain knowledge 都需要,屎山不到万不得已，千万别去重构，否则真的会爆炸的！一家公司的某个业务，但凡稳定点发展个几年，基本都是屎山般的存在，如果没有特殊事件或者领导的绝对授权，贸然重构屎山是会出人命的。为什么大家能在屎山加几千行代码完成老板的要求？很简单扒开屎山，加上你要的功能，勉强测试通过，打包在一起假装这坨屎变成了巧克力，然后提测风干，成型发布。IT行业大家都懂，老板催活跟催命似的，你要胆子大敢铲屎山，屎山就敢炸你一脸，到时候直接无限delay搞不好就卷铺盖走人了。2010年加入创业时期的360，担任高级工程师，负责一个远控软件，同时要跟操作系统底层打交道。入职后才发现在Leader的神操作下，部门的代码耦合成了一个大泥球，一个主类就有几万行，主类里的一个函数就有几千行。。那个Leader最常说的就是：能跑起来不要想着去改，跑起来就行！后来因为副总裁要求一个大功能，这哥们直接卡壳了，他带着我们几个小弟想改改上线，发现怎么都改不出来，，硬是delay了1个月都做不出来。副总裁直接怒了，快速给他转岗到其他部门，让我先暂代技术经理职位，同时开始招聘。。。面对前任Leader留下来的数十万行耦合严重的代码和框架一瞬间，又回到了大三的那种疯狂状态，每天极限Coding，我们将代码组件化、模块化，实现了一边飞奔一边换轮子。就带了两个实习生，花了3个月搞定了这一堆恐怖的代码。那段时间为了更好的重构代码，我还看了很多计算机经典书籍，包括《重构》、《顺便送大家一份非常宝贵的计算机经典书籍资料，我把工作中用的经典电子书库（包含代码重构、数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这段时间，我的架构思维开始突飞猛进，我们在每一次的重构之前，都会先画出业务时序图、类结构图、工程关系图，然后按图索骥，每每在实现的那一刻，不由得惊叹：程序世界，太奇妙了。所以你看看，带着代码能跑就不要动的观点，真的会害死人的，程序员有的时候就得直面大泥球，不断重构，不光锻炼能力还能保证后续需求的迭代。,作为一个还在写代码，40多岁的cto，今天正好被下属的要求搞的很郁闷。试着回答这个问题。第一，推翻一座屎山，构建出来的可能只是一个大炕，连山都不是。第二，哪怕构建出来一座大厦，过上几个月，99%又变成屎山。软件工程，项目管理，远比单纯的技术人员想的复杂。但是我认为我们依然应该鼓励重构，这样我们才能获得进步。第三，90%喊着要重构的人，嘴上喊的是重构，实际是重写。重写远比重构简单。因为重写并不需要像屎山一样经历严峻的质量验证，所有新产生的bug变得理所当然。那什么是重构呢？能把上万行的功能模块，以每天一个版本的频率提交。而且每次提交都不影响现有软件运行。通过几十次的提交后，整个代码变得整洁了，可读性变强了，这是重构。如果觉得无法做到。那就先从小的，能在几个小时内，一天内完成的重构做起，同时好好去读稳定运行的线上代码，从来都是改出来的而不是设计出来的。,当你开始吐槽历史代码已经像屎一样时，潜台词必然是没有时间重构的。不然你就会说「看，我修了一个干净整洁的厕所。以后你们随便拉」。所以其他所有建立在从你开始提升代码质量的建议，你都要谨慎评估。毕竟 DDL 不会因为你看了哪本书而改变。：P你要做的就是 COW 大法，让屎山裂变。然后以较小的风险修改其中一个。并且对于屎山增倍的事实做到放下心里负担（不然你以为那么大的屎山怎么来的？你前面的大佬改过的屎山是大了还是小了？）这就是在理性的职场中，导致屎山不断裂变的那双看不见的手。屎山随着业务当量的增长，总有一天会突破临界点的。这时候其他的人推荐的书就可以在复盘时用上了。环境上叫先污染后治理。屎山治理的领域就叫延迟擦腚。不过现实一般是干掉一个过深的子屎山，让整个屎山稍微平衡一下。或者拆分下，成为屎山森林。在互联网行业称为微服务化。经过长期的磨练，你终于成长为一个可以轻松拉屎山代码而无负担的人，我们一般称为「菊次郎」；你的团队直接用屎山来锻炼新人，我们称作「菊里扶人」；你的团队一边造屎山一边卖力赚钱，这种精神称为「菊与$」；你们的架构也优化做到了屎山容忍，我们一般称为「菊次郎的春天」。,真正的工程，就是要雇佣有这样能力的人来替雇主解决问题。我们不需要有能力重构代码写得好看的人。,我个人感觉，只是感觉哈，大部分程序员不会改代码，尤其是改别人的代码，或者改自己两周前写的但自己完全不记得自己写过的代码。因为他们根本就没学过、也没有练习过改代码这项技能。他们能写代码，但是不会改。有多不会改呢？我见过一个程序员，他改一个变量名，都不会。他怕会影响其他代码，但他并不知道如何判定是否真的会影响其他代码。明明看到一个局部变量命名有拼写错误，都不敢去改。我见过一段 if else 在多位程序员的迭代下，变成一百多行的又臭又长的裹脚布，他们都只会加代码，从来不改代码，因为改了别人的代码，就意味着自己变成了这段代码的最后更新者，有 bug 就会找到自己。如果是改自己的代码，就会觉得几天前写的代码现在改是不是就浪费了几天工时，还是不改吧。他们都没有错。他们也不敢抽离函数，永远都是在文件末尾加代码，觉得这样就能确保之前的代码不会产生 bug，殊不知，随着需求的变化，没 bug 的代码也有可能产生 bug。他们信奉『开放扩展封闭修改』原则，代码一经发布，就永不再改。他们认为『懦夫才写单元测试』，只要代码通过编译器的检查，就是没有 bug。测试走联调，一个接口调两天是常有的事。我改变不了他们，我只能远离他们，去找敢于改代码、善于写测试、不怕担责任的程序员为伍。因为我怕跟他们在一起久了，我也变成不会改代码的程序员。还好，我现在已经非常善于改代码。看过我直播的同学应该都看得出来。我始终觉得，如果你已经知道代码的问题在哪了，那么现在就应该改掉，否则你就永远都不会去改它。
程序员很闷骚么？,今天上课讲唤醒理论，老师随口举了一个例子，程序员都蛮闷骚，然后全班大笑。。。没有别的意思啊（其实我个人认为这是个褒义词呢Q-Q）咳咳，根据唤醒理论，当人们进入感觉剥夺状态，或者进入相当单调的情景时，他们会变得烦躁和渴望刺激。事实也是这个样子的么？程序员的生活真的很单调么？于是。。。。,跟大家讲个故事吧。老张是我的室友，他喜欢上了一个姑娘。1老张是什么样的人呢？这么说吧，很久之前微博上流传着一份程序猿的特征大全，老张符合上面的每一条。我搬到这个两居室一周之后才跟他打过一次招呼，当时他穿着道袍一样的巨大睡衣、嘴里叼着把上已经泛黑的牙刷、双脚穿着颜色不同的棉拖，迷茫地看着我，含糊不清地说：诶？你谁啊？搞明白我是他的新室友之后，他有点不好意思，双手在睡衣上蹭了蹭，然后跟我握手。我这有好几T的片儿，感兴趣的话可以来拷。他走进自己屋里，突然又探出头来很认真地跟我说。经历过这么别致的初识，我对他产生了极大的兴趣。说来也巧，我最近在做一个心理学的课题，想着能对自己写作有些帮助。他就变成了我第一个研究对象。别看我平时吊儿郎当，其实我心里明镜儿似的。比较相熟了之后，老张在屋里挥舞着双手这么跟我解释，身后是他贴的 Dota2 、海贼王和我平时不讲究，是根本没必要讲究啊。我整天西装笔挺、人模狗样的，给他妈谁看啊？不就是给女屌丝观赏吗？我就搞不明白那些姑娘整天花枝招展是干嘛，自己花这么多钱这么多时间收拾，好看都给陌生人看去了，算什么？做公益吗？你说同事怎么看我？他们更无所谓。你去我们大厦，就看穿衣打扮就知道哪个是我们公司的，哪个是其他公司的。我们同事都很随性，活得明白，不爱慕虚荣。你看那些媒体公司、金融公司的，一个个脸上抹半尺厚的粉，笑都不敢笑，一笑全得抖下来。多累。你看网上都说程序猿傻，不会哄女人开心。其实哪是傻，是懒得跟你聊。说三句话才明白半句，还得用十句话给你解释，这种女人哄她干嘛？为了骗她上床？我有右手啊，轻重缓急我自己拿捏不好吗？浪费那么多时间精力骗个女人上床，都是精虫上脑的原始人干的事儿。文明人才不会被鸡巴牵着走呢。你们这些文化人整天想的是风花雪月，我对这些不感兴趣。你说整天跟女朋友老婆宝贝地叫着、银行卡信用卡刷着，图个啥？不就是晚上来一发吗。电话里甜言蜜语的，挂了电话一口一个臭婆娘；微信上发个笑脸过去，其实眉头早就皱成花卷儿了。有意思吗？...我认真把这些话记录下来，心想老张要是开微博，应该能成个段子手。2有天在客厅里，跟老张谈到恋爱和婚姻。我无所谓。想要孩子了，就找个想法一样的姑娘，也不用什么海誓山盟、什么对酒当歌，直奔主题，结婚生子，凡事都特坦率、特不费劲、特环保。你看过《老张正说得口沫横飞，门铃响了。他皱起眉头来：我今儿没订外卖啊。我说估计是同学来找我借书，把门开了，果然是安瑜。她是系里的学妹，正在报社实习，最近的采访需要跟我借几本心理学的书做参考。安瑜走进门来，我说你就站这等下，我去拿书。从屋里出来时，看到满头油发身穿道袍的老张坐在凳子上，漫不经心地左手抠脚趾、右手啃黄瓜，旁边站着有些局促不安的安瑜，披着耀眼的白色大衣。当然耀眼可能是因为跟老张形象的强烈对比。两个人这时正好对视一眼，互相尴尬地笑了笑，我忍不住掏出手机，抓拍了这张荒诞写实图。送走安瑜，老张正好吃完黄瓜，边往睡衣上蹭手，边问我：这姑娘挺不错，细皮嫩肉的。我嘿嘿一笑：老张你不是说过自己的荷尔蒙从来是在掌控之中吗？老张鼻子哼一下，说：我也没说别的啊。只不过我要是未来找个姑娘过日子，也不可能没有底限。她这正好及格了。我心说你就犟吧，跟他说：这个妹子还偏偏就是你说的喜欢风花雪月、对酒当歌的文青。你就别想了。老张站起来甩甩手，边往厨房走边说：女人就是麻烦。我再去拿根黄瓜。对了，你刚才偷拍照片我可看见了。给我传一份。3之后的几天，老张开始时不时旁敲侧击安瑜的事情。本以为他是三分钟热度，没想到连续打听了一个月。从她最近采访了谁、跟我借了什么书，到她上个男朋友是什么样的、平时有什么兴趣爱好，通通问了个遍。每次我不耐烦地奚落他：你的荷尔蒙都侧漏好长时间了，赶快找时间擦一擦行不行。老张每次都能宠辱不惊地狡辩：允许你研究我，不允许我研究别人啊？我就是最近加班少，无聊了对文艺女青年特别感兴趣而已，什么荷尔蒙，我十八岁那年就戒了。有天我终于忍不住说：我介绍安瑜和你认识吧。我跑腿算是跑够了，以后您老亲自去研究行不？老张装出一副特别勉强的样子，缓缓点了点头。我从微信上介绍老张和安瑜认识，俩人就聊了起来。没过几天，我看见老张开始剪胡子、洗头发、穿衬衣和皮鞋，去跟安瑜见面。整理打扮一番后，我第一次觉得老张还是挺帅气的，实话说配得上安瑜。我把这个想法告诉老张，老张得意地笑了笑：所以告诉过你了，我以前是不想讲究，但不是没有讲究的本钱。对于跟安瑜的关系，老张也逐渐开始松口：原本只是感兴趣，这是实话。现在呢，觉得她也不是那种太虚伪、太无聊的人，我们共同话题挺多，相处得不累。交个靠谱的朋友也不错。你别用那种眼神看我，我又不是为了跟她打炮才去找她玩的。最后这点我倒是相信。老张这么多年都没跟雌性打过交道了，平时说话都带着浓浓的匪气，真想要跟安瑜打上炮那也不容易。4某天晚上跟老张吃烧烤喝啤酒，都有点上头。我的课题遇到瓶颈，一个特别靠谱的访谈对象聊到一半突然闭门不见；老张的项目也不太顺利，工程进度缓慢，副总天天发火，总监一个月换了三次。喝到凌晨一点，我俩都困意渐去、话多起来。我问老张以前有没有过女朋友。老张把半根烤茄子塞进嘴里，含糊不清地说：当然有过啊。那年，我十八，她也十八。她喜欢我，我喜欢她。我们是郎情妾意，花前月下。我哈哈大笑：让你讲故事，你念打油诗干嘛。老张突然叹了口气，细想好像是我认识他之后第一次见他叹气，我便正襟危坐，以表庄重。他把手里的串都放下，举起大杯的扎啤喝个精光。喝完之后，停了半晌，他开始讲他的故事：我初中的时候还是个不良少年，三天两头出去打架，然后跟狐朋狗友在学校甬道上跟女生吹口哨、溜到厕所去抽烟，平均三天得见一次教导主任。说起来那时候还不傻，知道家长老师都在意成绩，所以每次考试都认真复习，考得不差，他们也都拿我没办法。有一回突发奇想跟几个哥们打赌，想比赛追女生，我们写了七八个我们这届觉得难追的女生，汆成纸团抓阄，抓到哪个追哪个，谁没追上或者追上得最晚，请大家抽一个月的烟。我抽着的女生是我们班第一，平时老实巴交的，不爱说话，也不招人喜欢，我没当回事，觉得这种女生好追得很。没想到我那几个哥们一个一个都很快拿下了，偏偏我这个全班第一无动于衷。这可让我恼火了，我那个钻牛角尖的好胜心就上头了。我也不管什么打赌什么请抽烟了，也不怎么跟他们出去吹口哨打群架了，我就一心一意想各种办法追她。细节我就不说了，你要让我记我也记不清了。结果从初二追到初三，追到全校师生都知道我们这点事儿了，这姑娘还是一直不温不火、不卑不亢地保持姿态，把我那个气啊。初三毕业那个暑假，我们到龙泉寺去玩，我就跟这个菩萨那个菩萨的一一发誓，说不追上她我就不姓张。说实话这时候我也不知道是不是真喜欢上她了，但是对她好、同时接受她冷冰冰的回馈，都已经成了我生活的一部分了。高中我跟她一个学校，还是维持着这种奇特的关系。但她对我是好了一些，时常也跟我问好、送我点吃的啊用的啊。你说人吧都贱，她一对我好我这感动得啊，晚上都睡不好觉。有时候她也跟我出去玩，但是照样不爱说话、不露声色。还有几次手都牵上了。但到高中毕业她都从来不承认是我女朋友。大学就没能跟她在一块了。结果她第一个学期就跟自己学院的学长好上了。你可能觉得在这件事儿上我特别傻，花了好几年时间就耗在明知道不靠谱的事情上。其实我当时也明白啊，但每次我下定决心要放弃、要忘了她，第二天她又都会或多或少给我“还有希望哟，再加把劲说不定就接受你了”这样的信号。卧槽我毫无抵抗之力啊，又是一次轮回。大三的时候她跟我坦白了，她确实对我有好感，但好感没有到能成男女朋友那样的程度。可是中学的时候有人照顾、有人关心又是很珍贵、很难得的，所以她自己掌握好分寸，既让我鞍前马后地讨好她，又不让我追上她。她太聪明了，知道追上以后我也许就不会对她那么好了，还可能因为交往影响学习，她一直懂得怎么把自己收益最大化。这段故事让我后来的感情经历都特别不顺利。我在大学的几次恋爱，有的其实都算不上恋爱，全都是在不信任、不坦诚的氛围中度过的。我不敢对别人太好，还时时提防着别人对我好的目的性。所以我自己就找借口啊、找理由啊。我不愿意伤害谁，谁也别来伤害我。...我默默听他说完，不知道该说什么，只好把两杯酒都满上，碰杯喝酒。他突然哈哈大笑：卧槽我说的你真信了啊？我愣了：我了个大去，是你编的？他狡黠一笑，再不说话，装成醉样，懒洋洋地看着天空发呆。5后来几天，老张心情好了很多，不知道是因为倾诉了真的经历精神舒畅了，还是因为编造了假的故事骗住了我。每次我逼问他真相，他都说，A secret makes a man man.他跟安瑜的关系好像也进展不慢。虽然两个人从来不跟任何人提到对方，但看他们朋友圈，一目了然。老张发咖啡厅大胸的服务员妹子，安瑜就会发同一个咖啡厅里有趣的摆饰；老张发五道口堵车，安瑜就会发要等的人真慢还没到；老张发以往只有程序跑通的时候才会露出笑容的老张，现在时不时会对着手机屏幕傻乐，有点毛骨悚然。原来在屋里放的又吵又闹的摇滚和说唱，不知哪天也都变成了情歌大全。有天看到他出门，头发虽然还是油得很，但好像整齐了不少，称赞他两句，没想到惹他大怒：卧槽我这是发蜡，油你个头！现在老张也不说那些程序猿理论了，跟个刚初恋的花季少男一样，百米外就能闻到他身上浓浓的荷尔蒙味道。我以前的观点确实有失偏颇，我也不是圣人，也有想法不全面的地方嘛。老张继续张牙舞爪地强词夺理，手里还是半截黄瓜。有的姑娘吧，确实太笨，整天就知道甜言蜜语的，没劲。但是呢，你看安瑜就不一样啊。她聪明，我刚说半句她就懂我的意思了，沟通不费劲。而且她有理想有抱负啊，不是满脑子想着找个富二代土财主、或者找个大帅哥小暖男，然后就相夫教子、安度晚年的那种姑娘。很多方面我们都很契合，什么都坦白说、明着说，从来不端着、不装腔作势。那，你们坦白的结果呢？没确立关系？我忍不住问。老张很不屑地哼了一声，好像嘲笑我的肤浅，说：当两个人足够坦白了，这些名义上的东西就都不重要了。既然互有好感，那就继续交往着，干嘛非得被名义这种东西给束缚。他把剩下一小段黄瓜都塞进嘴里，得意地嚼起来，一副事情尽在我掌控之中的样子。6老张一直对跟安瑜的发展很有信心，所以当他告诉我两个人已经和平结束之后我还是有些恍惚。老张显得不是很有精神，又开始穿不同颜色的棉拖，坐在客厅里懒洋洋地说：这事儿也说不上遗憾，就是情到了，就做情人，情淡了，就做朋友。其实也挺好，最近我们项目进度得往前赶，正好省出不少时间来。不管是做什么，你他妈老是想着能找到各种逻辑通顺的解释，就算不合理。感情的事儿是能商量出来的吗？什么情到了情淡了，感情不就是先交往才产生的吗？我突然很不爽，用恨铁不成钢的语气跟他吼。老张看我一眼，居然没有反驳，站起来去厨房洗了根黄瓜，回到客厅跟我说：对于一个程序猿来说，一半时间要用在写代码的，另一半时间要用在解 BUG 上。当你想达成一件事情，你会发现做好的准备总是有太多疏漏，你要把问题都找出来，都一一解决，最后程序才能跑通，事儿才能做成。这就是像我这样程序猿的思维。这种思维下，会觉得要想跟一个女生在一起，只要发现出所有的 BUG，一一解决了，就能把程序跑通。所以你看很多上 PUA 课程的都是程序猿。如果要几年前的我，要想跟安瑜在一起，肯定是死命地去追，想尽办法把中间的障碍扫清、问题解决。可是后来我明白了，有些程序是永远跑不通的。它即使没有 BUG，照样运行不起来，因为这些代码跟你不兼容。我不是没有试过跟安瑜培养感情、不是没有试过用各种办法让她对我有好感，但这没有意义。我们能不能在一起，不管是互相坦白想法、还是各自隐藏内心，其实很快就能感觉出来的。她看你的眼神、她的细微表情、她说话的语气，我是知道她有多喜欢我的。这次跟她一起相处的这段时间，就是我浏览她的代码的时间。我仔细阅读了每条代码和它们的注释，最后发现，她在我这里是跑不通的。听完他说的话，虽然知道还是强词夺理的解释，但我也生不起气来，只好骂他：你们这些傻逼程序猿，满脑子就知道代码。说人话行不？7老张对自己的公司特别不满，决定去上海发展。互联网行业的跳槽向来是风驰电掣的，他上午告诉我他的决定，晚上就要离开。小酌了几杯酒，我帮他收拾行李。把事先买好的一大袋黄瓜给他塞到包里，嘱咐他路上别饿着。他哼哼两声，骂着说：卧槽让你给整得跟农民工进城似的。我突然想到一件事，问他说：有件事我一直想问，其实无关紧要，但是我特别好奇。他猜出不是好事儿，一口回绝：坚决不答。我没理会他的回绝，还是问出口：你跟安瑜到底打过炮没有？他理都不理我，拿着行李匆匆出门，消失在楼道里。我无奈地笑笑，回头看到他房间里的海报，不知什么时候旁边多贴了一张照片，是那天我抓拍的他和安瑜。这时手机响了，我看到是他回的微信：喜欢一个姑娘分两种。有的姑娘，你看到她，就想跟她打炮；有的姑娘，你看到她，就只想给她写诗。我抬头看到我抓拍的照片里，邋遢随意的老张，对着安瑜微笑，还真有点像个诗人。,@刘飞  答了道题，叫 “程序猿很闷骚么？”呵呵，他竟然把我跟他的故事写成了小说，然后拿到你们七千多个赞！！！！！！！！！！！！！！！！！！我第一次成了别人的小说素材！！！！！！！！！让我来撕开真相吧。其实，老张并不叫老张，但你们也看到了，“安瑜也不叫安瑜，爸妈没给我那么文艺的名字，我只好自我拯救，起了个江湖艺名叫曲臭臭。事情是这样的——单身太久了，一朋友说，“给你介绍个对象吧，算你半个老乡，靠谱。”没想到还有人惦记着我的终身大事，我很感动，手抖在微信上发了好几行流口水的表情。“但他是个程序猿。”朋友说。“……滚。”我还没到饥不择食找程序猿的程度吧。刚准备扔手机关灯睡觉，朋友发了他三张照片。阅毕，我决定见他一面。<<<因为他颜值太高，是程序猿里的战斗猿？想多了。第一张，他在毕业晚会上说相声。一席儒雅长衫下，露出了阿迪王运动鞋。第二张，格子衫，黑框眼镜，大平头，眯着色狼眼，站在公司 logo 下，面色苍白。第三张，一张大饼脸占满镜头的 98%，五官像被人搓麻将那样蹂躏了一圈。——但我擅长脑补。我发现这是一只潜力猿，如果能被拾掇一下，还是很像样的。虽谈不成恋人，至少做个朋友，拉他一把，帮他提升一点审美情趣，早日体验人生真正的幸福快乐。嗷嗷待哺的程序猿千千万，我不能普度众生，但能救一个是一个。我开始了十九年人生里的第一次相亲。<<<约在聊下来，我发现他没我想象中的那么“程序猿”。他以前在锤子工作，我刚好前几天采访一朋友，得知老罗不少八卦。于是两人相谈甚欢。他在某美甲 O2O 创业，我刚好在做 O2O 的稿子，一起感叹这大好的创业时代。于是两人又相谈甚欢。他在我的家乡念大学，提到一家撸串的好去处，那里刚好也有我不少青春回忆。于是两人又又相谈甚欢。他说相声的视频很好笑，他拍的照片很有水准，他的黑色风衣还蛮有型，发蜡的薄荷香很好闻，右手还戴着一枚骚气的尾戒。（当然，看了他文章我才知道，出门之前他左手抠脚，右手啃黄瓜，完事双手往衣服上蹭。）人的魅力之处，就在于撕下刻板标签后的两重对比。作为一枚程序猿，竟然文艺得如此嚣张。吃完饭，我站在薄荷味的风里，看着淞沪路上随列车一闪而过的灯光，酝酿出一个恰到好处的微笑，对他说，“今天跟你吃饭好开心。”话说到这份上，他牵我一下手表示一下总是可以的吧，结果——他说，“那我再给你讲个笑话，让你更开心。”“……好。”“是这样的。我不做程序猿很久了，之前还在锤子做产品经理。其实那不是真正的经理，但是在银行办信用卡的时候，因为有“经理”这两个字，额度又给长了好多。哈哈哈哈哈哈哈哈哈哈哈哈……”……好，笑，吗？<<<第二天早上，他给我发了个 “Hi”。到晚上，微信聊到一千多条时，他问，“今天要见面吗？”我说“好”。奇迹是在不知不觉中发生的。我们竟然连续见面了十几天。我是那么喜新厌旧追求新鲜感的人，十多天竟对他没有一丝厌倦。朗朗晴天突遇洪水，就索性做一回猛兽。<<<那时已经期末，我被线性代数搞得焦头烂额。每天晚上，我在学校等他从静安寺打车过来，然后他骑我的女士自行车载着我，去大学路的猫空学线代。他说自己宝刀未老，欢迎求助。我性子倔，皱着眉头翻书，咬着笔杆不肯请教他。他坐在我对面，把双肩包里的 iPhone、iPad 和 MacBook 都摆在桌子上码放整齐，默默掏出一本纸质书来看。（……）时间静静过去，线代书越翻越薄，他在我心里留下的脚印越来越多。我不是观音，更不是佛。说是要渡化程序猿，却被他拉进了同一条阴沟，浑身泥巴越滚越多。——他说要教我用 Markdown 写文章，得意地告诉我，“一定把你培养成最会写代码的作家”。虽然不知道作家会写代码有什么用，但后来我的世界里，的确充满了 “#” 这个奇怪的符号。我想换个电脑，他眼睛放光，用生命跟我推销 MacBook Air，说“这是全世界最适合你们文字工作者的电脑”。我点点头说，“那记得帮我装个 Windows 系统。”他浑身颤抖如丧考妣。后来，我成了 OS X 系统的死粉。总之后来我数钱包里有几个钢镚的时候总是从 0 开始数。跟别人见面握手要握三次。<<<在我拿着线代书准备出门跟他见面第十七次的时候，我室友抱怨说，“你最近恋爱谈得太凶了吧，晚上都不见你人。”“什么？我没谈恋爱啊！”我下意识反驳。“这还不是谈恋爱？那你天天晚上是出去坐台吗？”室友说。我被一语惊醒。这些天，每天上百条微信，晚上见面几个小时。我跟这枚程序猿，到底在做什么呢？<<<每晚坐在自行车后座上，我大声哼歌，双腿乱晃，觉得身披万丈霞光。但手始终在尴尬地僵持着，不曾挽过他的腰。他每晚送我到公寓门口，然后掏出手机滴车回静安寺。等车的时间，我们沉默，闲聊，四目相对，隔一江春水。直到我目送他上车，挥手再见。我在等。坐在自行车上等他说“你可以抱住我”而不是“你又胖了”，说冷时等他来牵我的手而不是“我要送你一副我的同款手套”，夜晚分别时等他给我一个拥抱而不是总结发言“你今天线代学得真好”。可是，等一个闷骚程序猿的告白，比掰直一个 Gay 还要难吧。但是，我真的喜欢他吗？我不知道。难道我只想做个玩家，在他这里打通关而已？我也不知道。<<<喜欢一个人，看他一眼，就能在脑海中和他过完一生。我也想过，如果跟他在一起，未来会是什么样子。至少很快乐。他用老张的口气说，“很多方面我们都很契合，什么都坦白说、明着说，从来不端着、不装腔作势。”我好久没有遇到像他这么默契的伙伴了。他懂我的文章，懂我藏着的那点操蛋的理想，懂我在世俗世界埋下的一毫米奢望。说白了，他是枚闷骚而有情怀的程序猿。如果遇上的是五年后的他，我一定会彻底爱上他。但现在，顺其自然吧。<<<而顺其自然的结果是，我越来越忙。考试，采访，写书，时间越来越少。他在微信上写给我的段子，我只能隔半天回一下“哈哈哈哈哈”，他问什么时候能再见面，我只能草草发个微笑的表情。就这么淡了。直到那天，我考完线代，昏昏沉沉从考场出来，看到他用锤子便签发给我的几千字留言。文笔好美，美得让我忘记了言语中的悲伤和无奈，只想一读再读。像他在那篇《程序猿老张》里写，“这次跟她一起相处的这段时间，就是我浏览她的代码的时间。我仔细阅读了每条代码和它们的注释，最后发现，她在我这里是跑不通的。”最后他告诉我，只能离开。——这枚程序猿啊，他什么都没说，却悄然在心中走过千山万壑。他不动声色地浏览代码，阅读注释，不动声色地交集百感，最后，只丢给我一个答案。<<<“我们还是朋友，对吧？”我小心翼翼地问他。“当然。”他说，“但再也做不成亲密的朋友了。”“那，如果我线代挂了，你还愿意教我吗？”“当然。”聊天记录就定格在这里。直到成绩出来，我线代真的挂了。补考前一个晚上，把搞不懂的题目啪啪啪用微信传他。半小时后，他传来一堆图给我。行列式、各种乱七八糟的符号用绘图软件画得一丝不苟。“我用一晚上重新把同济教材看了一遍，不时涌出一种“卧槽我到底在干什么”的想法，但毕竟答应你了，就要做到。”他说。“那，等我考过了，请你吃饭？”我有点感动，更有点想念他。“我回北京了。”……他悄然离开了我的五角场，回到他的宇宙中心五道口，摇身一变，成了知乎上“对生活讲究，原则上只加姑娘”的准大 V。<<<我们好像没谈过恋爱，但他在我心里，撒下了最美的一场雪。但遗憾的是，他并没有给我写过诗。依然谢谢你，老张。哦不，刘飞。,本人不是程序员直接上我前几天在ACM-ICPC诸如这种↑我是先拿到这个名单（笑抽）以后再看到的各个参赛队员 基本都是云淡风轻 放荡不羁 若有所思 还有一部分目光呆滞…总之就是无法将他们和这些队伍名字联系在一起 这些人就应该算是国家未来的程序员预备队伍了吧～还有 你们能想象我们学校计算机系头发已经花白的老教授在颁奖的时候说：“获奖的队伍是：今天萌萌哒 感觉自己吃了药队 红鲤鱼与第一次看到这么多理工科男生 (๑ᵒ̴̶̷͈᷄ᗨᵒ̴̶̷͈᷅)  真是涨姿势啊！！到底匿不匿 好怕被人打 算了还是不匿了吧…,"没错我是来炫耀男神（之一）的。生活单调？嗯……他确实基本不用任何SNS类的东西导致和大家联系都不多，因为他没时间用。不过这家伙为了找时间看书曾经用过达·芬奇睡眠法。（后来似乎因为导致内分泌失调所以放弃了，所以建议大家不要轻易尝试=,.=）有一次他敲我Q，说和我聊天是他两个星期以来第一次和别人交流。因为各种忙所以曾有半年没有剪过头发的记录。（“后来学会了自己理发，妈妈再也不用担心我因为酷似通缉犯而被警察叔叔抓去讯问啦~(*￣▽￣)y ” ←话说这是发生在男神身上的真事儿=,.=）不过他平时一有空就会在家里鼓捣各种东西：比如他初中的时候就自己编了个计算器。后来还考虑过造小型炸弹（只是考虑而已……嗯）。还组装过耳机。好像还有密码锁之类的……这只是冰山一角，他造过的其他东西还有很多，其中还有说出来肯定会被查shui表的囧，还有一堆我不知道的……觉得现有的播放器不好用就自己编了个，用来听古典乐，音质完爆其他播放器。特别喜欢猫咪，对流浪猫特别好，估计他要有时间的话会养一屋子吧…………至于闷骚什么的嘛……所以我觉得吧……环境什么的并不是生活状态的决定性因素啦。虽然这大概是个特例吧_(:з」∠)_最后，我爱技术宅！( •̀∀•́ )y-------------------------2014年3月24日更新造福妹子们的小分割线^_^)----------------------------因为时间太久远没有找到原来的曲单，对不起TAT……于是我就跑去问他最近在听的能平静下来的音乐，他给了我两张专辑。另，一边听一遍讲的其中一首似乎是------------------------2015年6月23日想起来更一更----------------------男神现在有一美丽文静的女朋友，不出意外的话应该会在不知道久不久的将来顺利完婚~希望他们幸福=w=【当然如果婚礼在国外的话，份子钱就没法到位了啊ww",在回答这个问题之前，很想问一嘴，我们程序员吃你家大米了？吃你家大米了？吃你家大米了？天天被调侃。大家不都是社会主义好青年么，看我们程序员好欺负撒？什么事咱都不能以偏概全是吧，闷骚的程序员的确有，但是闷骚的设计师也有啊，闷骚的会计也有啊，闷骚的文案也有对吧。闷骚是一种性格，和职业无关。不过，身边不少程序员的闷骚事迹还真是挺逗乐的，整理一二，权当博大家一笑了。↖(▔▽▔)↗补充提问里提到的“程序员A，80后，工作期间大概连续五六年没谈过对象，后来终于认识了一位喜欢的妹子，聊的很欢乐，打算让对方做他女朋友，鼓足勇气在微信上跟对方表白，妹子虽然也对他有好感，但是感觉在微信上确定关系非常不正式，于是主动约这位程序员小哥出去，结果见面后这位小哥怂的啥都不敢说，设想的n种表白方式都没用上，最终还是妹子先开的口。A说了，他喜欢被动，啧啧。程序员B，花了好几天给心仪的妹子挑了一款礼物——一个钱包，说妹子快过生日了，打算送她做生日礼物，结果半年后再聊起这个话题，这钱包还没送出手，B说了，没找到合适的时机。那过生日的时候呢？生日人家跟闺蜜过了，没约出来；那其他时候呢？其他时候没有送礼物的理由……程序员C，办公室“老司机”，是真的闷骚——表面“闷”，实则“骚”，平日里讲话不多，低调码代码。业余时间接了一个交友网站的维护工作，结果呢？通过“职务”之便，换了好几任女朋友，我们认识的那一位，都是上上任了。真的是闷骚的表面下有颗狂热的内心啊。以上情形纯属事实，下面再来八一个亲眼所见的，如有雷同，可能是巧合。发文之前，我们已经象征性的征得了小赵的同意，并以“为公司发展做贡献”为由，对他进行了采访。故事的名字是：程序员小赵因闷骚而“一厢情愿”的恋爱故事。小赵的“失恋”让大家没想到，因为，据他说，在这段感情的“正常运行”期间，自己已经考虑到孩子大学要报考的专业。大家都知道他已经熟读了10几本恋爱及婚姻心法，所以相信他说得是实话。公司里的同事，见证了小赵和妹子的初识，妹子代同事前来办点事，误打误撞地进了我们的办公间。当时我们刚完成一个项目，小赵一改电脑面前目光呆滞的神态，正端着一杯普洱眉飞色舞的科普普洱的鉴定方法。妹子从小赵身后的门走入，清清爽爽的声音“请问xx是在这里办公吗？”击中了侃侃而谈的小赵骚动的内心，一个猛然地转身出卖了他慌乱的心情，小半杯普洱不偏不倚地击中了妹子的白色外套。道歉期间，小赵发现妹子不仅声音好听，还漂亮、温柔、善解人意，正是他喜欢的类型，于是小赵假借“外套洗不干净就给赔新的”为由，死皮赖脸的跟人家要了电话号码，妹子走后，小赵脸上挂着喜中五百万的表情，哼着小曲儿的扎进自己的工位，对坐在自己身边的同事说：“哥们儿的春天要来了！”小赵真的进入了恋爱的角色。加了妹子微信，时不时关怀一下对方的工作生活；尽可能地推掉下班后所有活动，加班也是能溜就溜，为的是能和妹子约个饭；妹子前一秒发状态说自己饿了，他下一秒就在外卖给妹子点了个单；听说妹子会拉小提琴，午休的时候还能隐约听到他耳机里的小提琴声。生活中，小赵一改“简约随意”的风格，脱掉那件从大学就一直陪伴他的shi黄色外套，换上沉稳内敛的黑、灰、白；脚上不再是那双泛黄的运动鞋，偶尔也穿穿皮鞋擦擦鞋油；头发再也不是刚炸完碉堡的样子，每天都整理的清清爽爽，还别说，经过这么一番捯饬，小赵俨然成了“别人家的程序员”。同事调侃：小赵，没想到一杯普洱泼出个女朋友，你该买两斤普洱孝敬一下月老。小赵并不说什么，略带笑意，一口接一口地抿着普洱。同事眼中的小赵，最大的爱好就是挑战各种“姿势”的bug，别人放假游山玩水，他放假在电脑面前一坐就是三天；做的项目该简单的简单，该炫技的炫技；曾经身无分文挑战西藏穷旅，回来的时候像个非洲难民；一通电话能将同事离家出走的儿子“骂”回家；能将公司组织的滑雪旅游剪辑成《闪灵》。所以大家觉得如此有阅历、有情怀同时又有恋爱婚姻大法加身的小赵，应该很快便能够跟妹子牵手成功了吧。过了没多久，也就两周后，小赵又换上了他那件征战沙场多年的shi黄色外套，整个人也安静下来，不再讲如何惩治熊孩子，不再安利好看的电影，要么眉头紧锁坐在电脑前敲代码，要么若有所思抿着普洱。小赵闷了，办公室的气氛也沉下来。难道小赵和妹子已经结束了？按理说小赵的骨子里流淌着骚气的血液，对妹子又这么上心，怎么会以失败收场？好奇的我们认为他需要找出这场恋爱中的bug，于是小赵聊起这场恋爱行为，合着都是内心戏——微信上的嘘寒问暖，一般以妹子礼貌的答谢而告终；因为弄脏衣服的事，小赵执意要请妹子吃个饭赔礼道歉，结果约饭只约出过这一次；给妹子叫外卖，小赵觉得对方应该可以想到是他，所以只字未提，幻想着妹子感动的表情，但事实是妹子不知道外卖是谁送的，所以都没敢吃；最重要的一个问题在于，小赵从来都没有对妹子表达过爱慕之词，他觉得对方完全可以聪明到猜出他的内心世界……同事问：那么，“分手”是怎么回事？小赵答：她发了朋友圈。她和她男朋友。从妹子的角度来说，就是有人不小心弄脏了她的衣服，为了表达歉意，请她吃了顿饭，就酱。写到这，又瞅了一眼这个问题，“程序员很闷骚么？”嗯，有的程序员，的确是很闷骚的。,刚毕业那两年，有一天晚上，发现一个自己偷偷喜欢的女孩上了QQ，（真的只是偷偷喜欢，基本没有说过话）鼓起勇气和她寒暄了几句，然后友好的互道晚安。第二天晚上，发现她又上线了，激动呀，想找她聊天，但又不知道说什么可以显得自然轻松，于是去改自己的QQ签名，“等你”，“想聊天吗”，“等你和我打招呼”，“waiting”，“waiting for”，“waiting for you”，三个小时过去了，那个女孩还在线，我一直都没敢和她说话，只是在这边没完没了的改签名，心里思绪万千，突然觉得“我在搞什么东西”，于是把签名改成“觉得自己莫名其妙”，然后去睡觉了。,发小在网络公司实习，办公室里一窝程序猿，就她一枚妹子。刚才她发来信息吐槽说，今天邻座小哥换了个,谢邀！任何行业都有人活得很单调，任何行业也都有人活得很丰富多彩。与是否程序员无关。看了  的炫耀答案，补充一点：有时候人们觉得另一些人生活单调、闷骚，只是因为跟他们不活在一个世界里。当我们仰望星空，一颗星星不过是一个只因为我们不了解那个世界，在我们看来，那只是一个,，我觉得应该多说一点才好。闷骚，应该是指表面蛋定，但在某一特定场合或环境中会有出人意料的表现，亮瞎各位的眼。首先作为一个程序员，蛋定是必须的，就算入行的时候没有，久了以后自然就有了。我认为有两点很重要的原因：所以，一个合格的程序员必需是蛋定的，也必定是蛋定。当然，蛋定不代表不会有兴奋，惊讶，伤心，悲愤等等情感，只是因为提前在脑海里预演过了，所以不会有很明显的情绪表现出来。其次作为一个程序员，不说技能点全满吧，但总是不断地或被动或主动的学习新的技能。主要有以下几种get新技能的方式：程序员的闷是职业特点，因为他们在编码的时候，不能被外界干扰，当他文思泉涌的时候，就会完全沉浸在代码的世界里面，不再理会周围的世界。而程序员的骚仅仅是厚积薄发而已。有人问我：你整天顶着这些代码，不枯燥吗?我脱口而出：你看到的只是一屏代码，而我看到的却是一个世界！,不请自来，先自爆身份本人出身信息工程系，历任前台美工，用户体验设计，产品逻辑设计，产品设计，产品包工头，所以我身边——都！是！程！序！员！（有的时候也这么称呼自己）多说几个故事圈内公认的最像程序员的程序员。到了什么程度呢？大二那年，我还是一个吭哧吭哧的美工。小m正在吭哧吭哧的积累代码。有一天这货突然兴致勃勃的卷着一张逻辑图给我，说要写一个程序送给他正在追的一个女生做生日礼物，求我帮忙做用户界面。那是一个pc端的个人管理应用，功能包括定时开关机，任务提醒，记账，桌面管理等等等等。我看过之后非常兴奋，连夜画了一个自认为浪漫无比的主题。然后这件事就如大家所预料的那样没有了然后。问题是，当时我们所有知道这件事的人都觉得这件事非常的酷，而且现在有一部分人仍然这样认为。后来，我终于开始质疑小m的情商，于是有了整个大学阶段最经典的一个赌局。我和大B（这货的故事后面会提到）赌他和小m谁能先找到女朋友，我赌的是相对奔放的大B，而大B却赌小m（注意，没人关心我能不能找到女朋友）。最终我还是输了这一局。赌局设下不到一个学期，小m已经开始赫然跟班内一个学霸级的女生出入成双（了半个月）。大势已去之后，我、小m、大B单独聊过这个事，小m的解释是当时他和那女生都对一项技术比较感兴趣，而小m又是班级里这方面最强的，所以就会经常在一起讨论。半个月后，问题解决了。同为程序员，我们当然知道对程序员来说，半个月成双入对最多可能取得什么进展，于是纷纷八卦他们这半个月内有没有实质性进展（比如搭一下肩膀）。小m对此讳莫如深。只是说，总会尝试些其他的。再后来，小m的本科生活似乎没什么变化，不停刷代码升级，和所有人一样钟情冷笑话、数码产品，游戏和，咳咳，片儿。他读研究生的那几年没怎么见过面。但是从社交账号上的动态来看，小m开始广泛涉猎文艺类书籍。有一天他突然在qq上问我——说实话，你觉得我这个人怎么样？我如实回答。他又哀叹。山东这边的妹子个子太高了，我最近报了个健身房，准备健身。忘了说了，小m江西人，在山东读的研究生。再后来，小m到了企鹅厂工作，我们可以经常见面了。身材几乎没变，还是孑然一身。阅读的涉猎面变得更广，笑话更冷，热爱加班，关心政治。在我们眼里，这个人非常有趣！大B是圈里公认的最闷骚的一个，而且我坚信即这跟他是个程序员无关。当时那个赌局我之所以押注在他身上是因为，这个人是我认识的程序员里最文艺的一个，绍兴人，自带闰土的文风。经常在个人主页里指点江山，回复者女生颇多。然而，这货硬是将初恋保留到了研究生。研究生毕业后，大B自称写代码写出了阴影，毅然放弃了开发的路径，转去做了策划，但还是摆脱不了程序员的身份。前不久跟大B公婆俩吃饭。聊到大B本科时候的绯闻。当时传说大B喜欢上隔壁班一个长相温婉（说计算机系没有长相温婉的女生的滚出去！）的女生。没想到这事竟然是真的。然而，程序员的用词堪比作家之精准。我们全程只说喜欢，都没用到过追这样的字眼。当着媳妇的面，大B供述如下：只是当时一起上课，看起来，这个女孩和其他人不太一样，多了一分好奇，却总也没机会深入了解。后来忙起来了，这事就过去了。大B的媳妇是难得一见的贤妻良母，目前大B在广州做游戏策划，告别了一线开发，收入不太乐观。大B媳妇毫无怨言，两个人合租一个城中村的套件。生活简单却充满方向。说到底，大B媳妇看中的是希望。在大B身上能清晰的看得出聪明，上进，有责任心，乐观这些性格。都说这是做程序员留下的底子好。一日计算机，终生程序员，小毛如是说。每次大B被人说闷骚的时候必拿X爷来挡枪。说来此两人甚像，仅有的一点区别，大B缺了X爷的一点性情，X爷少了点大B的文艺。以前在知乎上看到有人解释性情——性情就是一个巨牛有上天屠龙，在地打虎的绝技，却偏不把这当回事，就会给这个美好的世界卖萌，敢对着石头说我爱你。当时读完第一个想到的就是X爷。大四那年，系里盛传X爷暗恋隔壁班一女生（注意我的用词），最终毕业酒会上，X爷借着酒劲拨通了那个电话。说明来意之后， 畅谈革命友谊，然后送去了美好的祝福。X爷研一那会儿，大B已经有了家室。我去X爷寝室溜达，正看见X爷对着电脑发愣。被我叫回神来就拉着我问：大飞，你帮我分析分析这个女生咋想的，然后点开了XX佳缘的网站。。。说实话，我也单身那么久了，这网站一次都没去过。去年X爷开始找工作，来深圳找了一圈被召去北京去了号称是国内的脸书的那家网站。临走前，一班兄弟送行兼挽留。X爷毫不动摇，承诺会定期回来看我们。送走了X爷，我们自己分析，其实骚爷的选择是对的。老P和小m、大B、X爷不是一伙的。是个半路出家的程序员。所以身上总有些不属于程序员的特质。比如老P相对注重打扮，长得高高瘦瘦，热爱运动。老P是我小学同学，过年的时候一起回家，在高铁上聊起他在微信上认识一个南京的女孩，前不久已经来深圳玩了一趟了差点把我眼珠子惊掉了。按我的逻辑，网恋这种事绝对不是程序员能干得出来的，虽然我也没有可靠的证据。回家的路上，高铁里信号时断时续，老P还是坚持着全程跟他的女友聊着qq。看得出来那女孩很黏他。大概是我单身的太久了，这种情况下，总是想不出来应该聊啥。偏偏老P还不给我看，一个扯淡就把我打发了。一个人百无聊赖想起来身边有个同事跟我抱怨过女友太黏人，每天聊微信耽误他打游戏。其实这样的事，据我所知在程序员身上很少发生。又过了一会儿，信号彻底断了。老P翻出电脑，跟我聊技术，随手建了个文本框敲了几下丢到浏览器里指给我看——你看我写了个框，好看吧？说了这么多，那程序员到底闷骚么？其实只是他们不太愿意像其他人那样与世界沟通。有句话说做技术的做到最后拼的都是情怀。每个坚持下来的程序员其实靠的都是成就感。创造和毁灭一个东西得巨大成就感。因此我们通常比其他行业的人更热爱自己的事业更热爱自己的产品。这也就很正常的赋予了程序员专注、坚韧、谨慎、有责任心的性格。但是他们也温柔，也善良，也爱这个世界。很可能是用充满逻辑的一种方式。这种方式有一个更为大家所熟知的名字——闷骚。你看，我定义了自己的情怀，好看吧？,怎么又来这种问题，程序员是喜欢自黑，但其他行业的人也来这么黑就变了味。“我母校超烂的，好多硬件多少年了也不更新”“对，你母校确实很烂”,是的。我是程序员，我闷骚。我是女的，明骚人家会说放荡。,  我认为：  题目：我眼中的程序员  背景：我的哥哥是一只  小时候哥哥见我对学习还有点儿兴趣，就跟我说，要多出去浪…嗯，是多出去走走，看看更广大的世界嘛～于是发生了以下事情。   NO.1初中时，我第一次践行哥哥说要出去浪浪的…走走的言论。  去哥哥所在的大学找他玩，然后见到了他的女盆友，发现他女朋友跟他一年前左右给家里人看的照片不是同一个了。我就深深的觉得大学果然是一片美丽的土地，连哥哥这一般的很的水平都有不一样的生活了呢。 小结：一个长相一般的男生，无身高、家境等优势，计算机系（好像是这个系名）竟然在大学期间有两个以上女盆友（我当年知道的就两个）！你觉得他闷骚！？！？  NO.2依稀记得，那年我在念高中，哥哥在读研。  他在重庆，他女盆友（不知道还是不是我见过那个，哈哈～(¬_¬)）在长沙。突然有一天，哥哥从长沙回来了！然后，我就知道哥哥不知道什么时候跑到长沙陪女盆友一个礼拜，然后在身上貌似就两千块左右的情况下，给女盆友买了个一千左右的包！瞬间我被惊吓到了！哥哥竟然带包千里赴长沙会女票！我们家的穷逼孩子竟然如此奢侈？！当然，哥哥并没有装富二代，他的朋友同学也知道他的家境一般。所以，他就是为博女票一笑，要浪漫并且大出血！  小结：这么奔放，哪里闷骚？  NO.3艺考时，以看重大为名，我溜到重庆去了。  又依稀记得，哥哥领我胡吃海喝之后的一个晚上，跟我聊起了泡妞一事。当时内心小激动啊～哥哥要交我人生必备技能呢～^_−☆（虽然，我不明白为何妹妹会觉得那个是必备技能…）  哥哥说：“追女孩，其实就是耍无赖！”  我：“噢～～哈！?(･_･;?不对啊”  哥哥：“不对什么，你看，哪个能追到妹子的不是耍无赖？妹子冷淡，依旧P话多；妹子出远门，千里追着走；妹子不舒服，温暖使劲儿砸。”  我：“那人家有些人追妹子，很多年的，真爱啊～”  哥哥：“那叫持续耍无赖！”  小结：跟自己年未满十八的妹妹说这些，闷骚吗？不闷骚。  NO.4又又依稀记得，我刚上大学。  在大一的某个晚上，哥哥电话打来说：“大学不要着急谈恋爱，大一先看看，熟悉熟悉环境。大二呢，就有空了可以好好谈个。大学呢谈个恋爱还是可以的，不过，不谈也很好不着急。不要跟太远的同学谈，谈远了家里人担心。”  我：“放心吧…我们学校男生质量不好，才不要谈恋爱！”  哥哥：“哦～那你们班没同学追你？”  我：“不知道唉…就是一个男生要我做他媳妇儿，河北的。好奇怪～又不熟！”  哥哥：“那种你忽略就好了，同学可能说错话了。平时要注意安全，对新同学要懂礼貌啊～”  我：“放心，我一直都很懂礼貌的，又不是小孩子了。”  小结：不结了。………………………………………………抓机能源不足……………………………………………………………  NO.5渐渐的……我大二了。哥哥知道了，经检验合格后，学校可以辅修双学位。  于是乎~哥哥问我：“学校双学位有想学的么？”  我：“有！想学生科，回去种树~”  哥哥：“那就去学啊~喜欢就好好学，不过学双学位很忙的。学校有人追你么？”  我：“有，一个学长，一个学弟。”  哥哥：“修双学位很忙的，不能好好的陪男朋友，谈恋爱时间不足。还不如把时间放在考证啊~辅修学位上面，男盆友的话，以后等你大三了哥哥给你看看我们研一的学弟。”  我：“恩！好的。”  正所谓，人是会长大的。然后我长成了一只大三单身狗！今年过年回家哥哥领了嫂嫂回来，然后问我谈恋爱了没有。我内心是不想回答的，因为明明是你跟我说不要谈恋爱，把你自己的妹妹坑成了大三单身狗，你竟然还好意思问我有木有拍拖！！！！！生生坑成了大三老阿姨啊~。学弟都觉得我是“刀山”啊！要求死高啊！一定很难追啊~居然大三都没有男盆友。~~~~(>_<)~~~~   但是，我是一个淡定的人。于是我冷静回答：“没有。我是会谈恋爱的人么？”  然后，那只程序猴子用起了老战术，：“恩，没关系你还小，等工作了，哥哥给你相看下同事。大学谈恋爱不小心就谈到外省的，不好。”  哈哈~你当我还会被坑么？才不会！我已经成长了好不好~进化了！据说在大四以前跟室友来一场轰轰烈烈的恋爱会很有纪念意义呢~嘿嘿嘿………………  大结：看~这么会坑妹妹，会泡妞的程序猴子，怎么可能是闷骚？简直就是 明 ！骚！ 好！ 不！ 好！————————————————————————————————————————————————————————以上是不正经篇————————————————————————————有心情再来添加正经篇——————————————————————————————,程序员闷骚怎么了！就喜欢闷骚怎么了！网上聊的好High 现实中脸红害羞不敢说话 多可爱！,程序员都很内秀，只是有时候要长时间面对电脑，显得不爱讲话。他们一般都有自己很深层次的爱好，他们是博学的。因为爱在网上看段子，所以，随便丢来一句话，就会让你笑得肚子疼。因为精神的高度专注，有时候给人一种反应慢半拍的感觉，那只是他们对你不在意，不感兴趣的表现。人都是有惯性的，程序员都喜欢坐着，因为他们习惯了这个姿势。但是，他们的思想是奔跑的。有时候还像风筝飞来飞去。你根本抓不住。每一个程序员都像一个冰山，你以为他很渺小，但你不知道他藏起来多少优点。当你遇到一个程序员请善待他，挖掘他，你会发现他像一个万花筒一点都不会闷。程序员，微笑，萌萌哒~,你没发现闷骚的都在看而不答吗。,闷骚还是看个人本身性格吧，感觉还是有很多活跃的，另外，不要以为程序员都很靠谱，劈腿的还是一大把一大把的,实力反对这个回答，我们公司程序员可不是这样，程序员吃你家大米啦，还说程序员闷骚！！老王跟老张都是2个资深程序员，一个是Java高级信息系统项目管理师，一个是14年行业经验前IBM工程师。老王说自己唯一开心的时候就是编代码的时候，就算天天加班心里也是一百个乐意五一放假的时候因为被媳妇拒绝带回家，干脆就在家写代码，最后写了一个程序员老黄历出来还可以在线测凶吉，写代码起手式必备。不仅每次写代码之前算一次，晚上加班回家前也会算一卦往往算出来的结果与实际都不太符合，代码写好了回家也会挨媳妇骂骂他只有代码没有媳妇，回家这么晚袜子总是她来洗心疼媳妇，老王就在淘宝买了个护手霜选了半天选了个最近流行的“马油”，结果到手之后才知道是去脚气霜为了不浪费，老王天天在办公室抹，还美曰其名熏蚊子老王不是第一次给媳妇挖坑了，拍了张媳妇大饼脸的照片给公司所有人一一传看媳妇晚上恰巧来送饭，看着周围同事忍俊不禁的样子才知道老王干了这样的好事不过老王媳妇也习惯了，老王总给她挖坑跳老王公司那群运营部的小妹子对老王和媳妇的故事简直数如家珍，都能娓娓道来老王媳妇就是担心老王见父母的事情，父母总不同意老王，怪老王只是个程序员老王也总催媳妇赶紧出阁，总能正儿八经的继续坑不是？为了见媳妇父母，老王大清早就起床去购买礼品选来选去就选了个VR眼镜，想着这样丈母娘跟老丈人以后跟媳妇视频能看的更清楚老王媳妇看见了笑中带泪，心里却铁定了非这个人不嫁老王不知道媳妇的心情，给媳妇擦泪还说这有什么好感动的，我一早就知道自己是个好男人其实老王真是个好男人，追媳妇的时候天天车停在公司楼下在车里一边敲代码完成工作一边张望着媳妇出现没有只要出现就立马收起笔记本，装做认真思考的样子，不知道从哪看到的女人最喜欢认真的男人老王第一次给媳妇送礼物的时候，买了6双鞋子，长靴、短靴、凉鞋、高跟、雪地靴就连拖鞋都没忘了买想着媳妇一年四季都穿着他买的鞋，哪还有男人敢继续追她其实老王可疼媳妇了，每天加班是为了赶紧买房把媳妇娶回家给媳妇买很多裙子是怕媳妇在闺蜜面前少了对比的资本老张是个严谨的人，非常看重数据的重要性多年的工作经验，老张依然不会一点办公室政治笑呵笑呵的跟下属开玩笑，从来没有一点老板的架子漫威英雄如数家珍，听说运营部的小v要去追妇联首映，老张还千叮万嘱不要剧透，千万不要剧透边说边继续开始敲代码，割舍了最爱的电影只因为答应了周六要陪着女儿去看老张有天早会迟到了，自己道歉说因为早上教女儿做题没做出来老张对女儿的疼爱不言而喻，通常媳妇打电话催他加班早点回家没用，只有女儿一声嗲嗲的“爸爸”才让老张匆匆忙忙收捡电脑昨天，谢耳朵大婚，老张表现的比当事人还要兴奋还拿着一张谢耳朵诅咒的表情包在公司群里面发我是小v最爱写文章的运营部大妹子,泻药。已经被楼上一堆秀恩爱的闪瞎了氪金狗眼。为何我的手中突然出现了火把和汽油桶。让我来讲述一下我对某产品男A君的产品试用测评。--------------------------------------------------------一、产品介绍第一次和产品男A君接触是在豆瓣勾搭上的。那个时候他刚从北京奔袭到上海跟着七八个小伙伴创业，每天夜晚对着日本籍大姐姐们唏嘘短叹人生苦短寂寞难耐，就上了豆瓣恋爱组蒸女友，还在帖子里放了类似于监狱资料档案式的照片，还觉着自己特别英俊潇洒。对，聊了几次，交换了微信，给了照片互相觉得对方还可以，就果断地约饭了。二、拆包体验一开始约喝下午茶。我定的逼格贼高的餐厅，定的时间，付了预订款，而且准时到了。不幸的是，预定的淘宝卖家坑了我。当时我的内心被暴漫脸踩出了一片泥泞。但是没关系，身为坚挺地见识过技术产品UI群雄4B大场面的高贵冷艳城墙脸少女，我还是果断地先入座。结果半小时之后，A君终于姗姗来迟。【跟妹子约居然敢迟到，扣分扣分】果然是不上相，果然还是圆寸。我内心对自己淡淡说道。没错，A君长得比照片上要好看一点儿，戴着一副黑框眼镜，穿着大衣，收拾得居然还挺小资。不过老娘早就料到了，公司几乎所有产品IT都这副鸟样儿，【既然这样，为何婚后看上去还会更歪瓜裂枣呢？这得问他们太太。】A君非常抱歉自己迟到的行为，并说明了理由。【然而这并没有什么卵用，迟到是既成事实，借口分分钟可以想出一堆。】之后开始面试一般的自我介绍过程= =凸不过没关系，小生一直都是炒气氛小能手，于是试图把话题从僵硬的职业介绍切换到兴趣爱好交流上。结果说到旅游。A君眼睛开始放光了：“我的足迹南到厦门，东到朝鲜，你若有时间可以看一下我的朝鲜游记，还被列为了blabla网站的精品游记...”滔滔不绝。至此，小生不由得长吁一口气~【虽然此时心中在吐槽还没老娘一半的里程呢…】为了显示我是一个既有逼格又接地气的好女孩，我们决定晚餐去吃火~锅~~~~~之后就是我油腻的脸衬着他满是雾气的眼镜。由于初见实在是有点失败，因此吃完海底捞小生就挥一挥衣袖决定回家碎觉。睡前瞄了一眼手机，看到无微信提示，就把此次见面抛诸了脑后。三、第一次实际测评若干个月后【没错你没眼瘸】，我居、然、收、到、了、他、的、微、信。起因是他未成年之前暗恋了很久的青梅竹马小学女同学要结婚了，邀请他参加婚礼。他若独身前往倍感凄凉。重点是：包吃住。要求是：请务必打扮得光彩照人、艳压群芳。当时，我丝毫不知道这货又滚回了帝都。还天真地以为是都从我大魔都出发呢。出于信息不对称和人道主义精神，小生毅然决然地决定援助当然其实真正让我决定如此跋涉的原因是：老娘一个月没出门溜达两圈，又闲得慌了。因为此事的牵绊我们又重新联系上啦~为了不穿帮，在穿着上、言行举止上等一系列细枝末节上呈现出友达以上恋爱未满阶段的感受（这种诡异的要求是他提出来的），我们对了很久的口供。期间对他的认知就如同安装了安卓系统的三观一样又重新刷新了一遍。哦~原来这个产品是个段子手，是靠搞笑来抚平改需求码农的悲愤的。哦~原来收拾完是这样的~还蛮帅的~哦~真看不出来，居然还是“学霸”。由于小生一直秉持着”看上他就强奸他，反正不犯强奸罪“这样毫无节操可言的行事准则的，于是到烟台的时候小生就果断地推到了他。体验感是：之后就陆陆续续保持了一段时间的联系。四、第二次测评后来趁着端午驾校师傅还没对我下练车圣旨的时候，我去了趟北京，旅游。联系了A君来接待我。不得不说，唯一不绅士的一点是：居然在接触这位理工男的时候，我发现了几个真相：1、逼格高都是装出来哈哈哈哈哈哈，见我的时候的小资行头是他为数几套不多能见人的冬装。平时就洗的发白的T恤，运动鞋，牛仔裤。衣橱里果然还是格子衬衫和条纹衬衫的天下。2、误交损友对人生是多么具有破坏性的事情：A君把他身边朋友几乎所有大大小小挫事儿都跟我吐槽一遍。挫事儿传千里~3、即使是一只单身业内行家狗，回家面见江东父老尤其是参加小时候暗恋对象的婚礼的时候还是会使劲找个好看的姑娘打肿脸充胖子。4、总的来说，闷骚和温柔并济吧-------------------------------------------然而以上一切都并没有什么卵用。深爱就是把最好的青春留给你，然后我独自向前。他心中既有了能为之写诗的姑娘，那我也只有收拾行囊继续我走遍世界的旅途。他爱的是,HHHHHHHHHHHHHHHHH今天我我是专门找这个问题来回答的，在我们学校动漫社里面一个后辈群名称后缀是一串十六进制Unicode码，一开始我并没有在意，直到今天在学习python的时候忽然想到了他名字后面那一串，然后我鬼使神差的把他名字后面那串复制了下来丢到了然后得到了这么一串被我打了马赛克的是我们社团一妹子的名字学习真是能给人带来快乐的事情啊然后我当机立断，马上改了我的群名字被我打码的依然是社团里那个妹子的名字233333333333所以说，你说程序员闷骚么？当然闷骚啦！
雷军写代码水平如何？,在网上看到这份雷军20年前写的汇编代码：,1988年，雷军在武汉大学就读大一期间编写的Pascal程序，在他大二时就被编进了新生教材。1989年，大二下学期的时候，雷军写了一个RI（RAMinit，清内存的小工具），持续十多年都有人在用。后来雷军把这款工具软件完全免费，并且开放了源代码，也算国内最早一批开源的免费软件。同年，雷军和1990年，雷军和1990年前后，雷军花大概两周时间破译了当时流行的中文字处理软件WPS1.0，又在原来的基础上做了一些增强和完善，不久之后，由他解密的WPS版本成了国内最流行的WPS版本。1992年初雷军进入金山软件的珠海研发部实习，7月正式加入金山软件，8月15日，由雷军牵头的金山北京开发部成立，主要负责1993年5月，雷军参与研发的金山Ⅵ型汉卡，及WPS-NT，广泛应用于行业，极大地提高了办公效率和工作质量，市场占有率高达90％以上。1993-1995年，雷军参与金山“盘古计划”（WPS Office前身），负责双诚电子表（对标excel）开发。1995年，雷军利用休假时间（大概2-3个月）全部重写了BITLOK 3.0（改版前有约3万行代码），在原有经验的基础上，使用了一些突破的技术，彻底解决了过去用户提出的各种问题。1995-1997年，雷军带领团队完成WPS97开发，这款软件最终完成了3万套正版销售。1997年后，雷军开始更全面地转型到企业管理领域。1998年，28岁的雷军出任金山总经理。当时雷军白天当总经理，晚上还继续写程序，提高技术水平。紧接着就发生了那个，“金山新同事将雷军电脑格式化”的事故，雷军不得不将所有精力放在管理上。2000年，雷军编写的《2002年，在雷军的领导下，100多位工程师历时3年，舍弃了积累十余年的程序架构，将500多万行代码全部推倒重写，为了降低用户学习成本尊重用户使用习惯做出了一款与微软完全兼容的产品,老金山人都知道雷总当年是写代码出身为了金山发展不得已去做总经理金山那代老人都不愿意去当领导管事只想写代码结果雷总上任安排新助理说把我电脑清理下（擦干净的意思）那小哥耿直的把雷总前半生的心血给格式化了然后......然后雷总只能挥泪安安心心去做总经理了至于他的代码水平他自己也说了,刚发现被WPS官方翻牌子了，莫大的荣幸。不送我个会员嘛（狗头）这个我看好像没什么人提过。1990年时，雷军第一次知道了WPS，发现WPS作为文字处理软件非常惊艳，想自己弄一套。但当时WPS和汉卡配套搭售，一套要2000多块。这可是90年代的2000块。按照雷军的说法，在80年代刚刚改革开放的时候有一个说法叫「万元户」，可能现在白万富翁都没这样的感觉。虽然90年代万元户没有那么稀奇，但4000块依旧是一大笔钱。顺带纠正一个特别广的谣传，就是有种说法「雷军毕业时候已经赚了一百万」，这是完全谣传，雷军自己说法是毕业时候存款是4000块，这里面包括各种稿费、奖学金、创业收入，只是说开玩笑说自己4000元差不多该有现在半个百万富翁的感觉了，不是真的赚了100万。话说回来。当时雷军虽然奖学金很多，已经不用家里人付学费了，但2000元实在是一个天文数字。所以他就把WPS破解了，还移植到了普通电脑上。雷军自己的说法是这样的：「这可不是一件容易的事，我几乎有2周就没怎么睡觉才完成了WPS的解密。而使用过程中，我又在原来的基础上做了一些增强和完善，不少朋友都觉得很好用。后来我解密的版本在当时成了国内最流行的WPS版本。」求伯君后来自己也说市面上有三个破解版本，雷军的这个是最好的。其他故事还有很多，比如雷军大学时候合伙创业的三色公司曾经山寨金山汉卡卖钱，结果被大公司套娃山寨卖到低价挤出市场。这里还有个有意思的事情，就是最后三色公司破产了，雷军毕了业去了北京一个航天研究所工作，但业余时间还是喜欢在中关村逛。90年代的中关村里依然有很多80年代时的著名程序员在活动，比如还有后来创办连邦软件公司的所以雷军周一到周五早上工作，晚上回家开发软件经常一干就到凌晨，周末再去中关村。这是雷军感觉最孤独的时候，没有一个真正互相理解、有共鸣的人。求伯君足足劝了雷军一整天。根据两人回忆求伯君还请雷军吃了一顿很好很贵的烤鸭。虽然求伯君是几乎所有程序员的崇拜对象，雷军也不例外。但雷军考虑再三没有立刻答应。求伯君也没有勉强，让雷军再考虑一下，说第二天中午再来找他。第二次见面时候，求伯君谈起自己一个人写WPS的经历，曾一年半时间内生了3次肝炎，每次都要住院一两个月。但病痛其实不是求伯君最大的痛苦，真正痛苦的是代码上没人交流「碰到问题没人可以商量，资料完全要靠自己查。喜悦也没人懂，没人可以分享」，雷军对这种感觉很有共鸣。雷军终于还是被就此雷军在金山一干就是16年。期间在求伯君的强烈建议下转管理岗，期间还有那个有名的被同事（不过其实格式化了的代码大部分都有备份，只是有半个月工作量没了，但后来因此一放就放下了。）28岁雷军任金山副总裁。多说一些求伯君和雷军两个人的“金山情”和WPS情怀，这是我觉得非常具有堂吉诃德般「明知不可为而为之」的故事。WPS其实一直是金山最烧钱的项目。其他的无论是《金山打字通》《金山词霸》包括金山游戏《剑侠情缘》等等的赚来的钱都用来往WPS里面投，WPS活像个碎钞机。从商业角度来看，坚守WPS简直是百害无一利的选择，放弃它的话金山的日子肯定会舒服很多。尤其《但求伯君和雷军选择了坚持，无论变更多少方式，金山始终都坚持把WPS做了下去更新迭代，没有放弃办公室文字处理软件。“民族软件”的名头听起来很伟大，但对金山来说情怀和现实的碰撞真的是很煎熬的。雷军后来回忆，今天这个员工走了，明天那个人萌生去意，看着金山墙上的口号“让我们的软件运行在每一台电脑上”的口号心里百感交集。这是金山的梦想，但为了这个梦想金山放弃了太多了。期间金山一度遇到过现金流受阻，发不出工资要关门的绝境。最后是求伯君把自己的房子给卖了给员工发了工资。所以金山为了坚守WPS走了一条最艰难的路，也错过了很多机会，几次上市尝试都比较坎坷。这也是雷军后来退休三年中反思，得出“顺势而为”结论的重要契机。可以说小米代表了雷军“顺势而为”的思想，那金山就是他“逆流而上”的见证。2007年金山终于成功上市后，雷军没有喜悦。他曾经梦想要战胜微软，结果用雷军的话来说“一个照面就被对方干翻了”。现实一次次挫折，最后凭借敌后游击战做出了一系列其他软件维持生计，最后因为游戏收入弯道超车才完成上市。雷军只是感觉如释重负，终于对金山有了一个交代。即便是上市当天，雷军也对镜头说“我的心情其实很平静”。上市以后雷军就想要离开金山，好好休息一下。求伯君的说法是，本心是真的不想雷军走。但是自己也是看着雷军16年来几乎每天都十多个小时拼下来，多年下来明显人瘦了，衣服号码都小了，袖口小了一两号，求伯君也真的不忍心拒绝雷军的辞职。求伯君最后答应了，雷军正式辞去了金山总裁兼CEO的职位。此后雷军专心天使投资，办了顺为投资，开始跟创业者打成一片。几年后觉得有机会，开始到处拉拢微软谷歌的牛人，着手创办小米。但2010年后的金山严重下滑，在雷军刚成立小米的时候，求伯君走投无路只能给离开了三年的雷军发了短信“如果你不回来，金山可能不行了。”雷军也知道求伯君不到万不得已是绝对不会这么说话，他回去和求伯君和当时雷军已经成立了但雷军自己说，“金山”两个字对他意义过于重大，自己也曾经为这两个字付出很多，即便离开金山后，只要听到别人说起“金山”依旧会心潮澎湃。最后雷军第二次答应了求伯君加入金山的邀请。在其他小米创始人们的支持下，雷军2011年正式重返金山。由此开始开始金山、小米、顺位三家企业来回跑。对金山，雷军制定了「全力转型移动端互联网」的战略。现在这个战略被证明了是非常成功的，金山WPS重新扭亏为盈。2019年，金山办公WPS上市，雷军公开信中写道：“31 年前，求伯君在深圳一间酒店闭关几个月写出第一版 WPS 时，就注定了金山的英雄梦想。31 年来，金山一直肩扛民族软件大旗，即便是在最艰难的时刻，也从未放弃。”媒体也评价道，“因为WPS，让全世界了解到在中国还有一家软件公司能和微软抗衡。”,雷军当年可是其实很多IT名人现在看起来好像只负责管理，不懂技术，其实他们中的不少人也是程序高手，除了雷军之外，还有他的老对头所以说，不要以为他们只是通过管人管事而出名，他们自己本身也是实力超强的技术高手，才能看准技术的潮流呀。,这段用x86汇编写成的代码（以上是代码片段）用于清除内存驻留程序，类似内存加速工具，雷军教科书般规范地注明了代码用意、时间、作者……还细腻地用符号组成了分隔符让代码更加在B站2020年6月份的一个访谈直播活动中，雷总也在给后辈的寄语中不断强调。优秀的系统往往有优秀的结构设计，层次清晰，职责单一，模块化，方便拓展和复用。功能的添加往往只是在现有的框架中添加少量代码。而且Bob大叔在《代码整洁之道》中给了我们一些行之有效的规则，涵盖从命名到重构的多个方面，只要遵循这些规则，就能编写出干净的、让人舒服的代码。详见回答——更多内容——希望有一天，大家的代码都能“像诗一样优雅”！========赠人玫瑰，手留余香，不要忘记点赞、收藏、关注 一键三连，感恩有你~,说实话我觉得应该不行。（狗头）雷军lc有刷够1000道吗？雷军知道jdk14的新特性是什么吗？雷军知道雷军用过ssm框架，redis， 如果你的Serializable类包含一个不可序列化的成员，会发生什么？你是如何解决的？我猜雷军过不了一面 面试评价：候选人技术栈陈旧，年纪太大。,雷军学长在当年的学习条件下汇编满分我们院今年挂了四分之一而且是在卷面34分以上就全部给60的情况下这特么都真事儿,结论：秒杀目前80%的程序问题不大。看过雷军写的RAMinit代码，一个清理内存的小工具。代码是用汇编写的，从代码质量来看，理由如下：函数的名称非常好的表示了函数的作用，虽然我的汇编语言很多指令不记得了。但是可以从这个函数名称知道下面的这个函数是用来判断是否是DOS系统的。即使是一个完成简单的功能的程序，程序也被分成了多个函数，并且每个函数都非常的短小，利于代码的修改。对于代码中使用的常量，大部分在文件的开头进行了定义。如果是函数内部使用的常量，也进行了说明。Color (White in Red)就是对于47h的解释。,我记得好像是13年的时候？阿黎整了个小米网的讨论会。大意是各部门把过去一年里，自己觉得做的好的、和做的烂的，摆出来。例如设计，梁师傅就整了个两个图，一好一坏对比批判一番。到代码那块，我记得好像是海洲来讲。坏的就是整个小米网，因为他觉得小米网的代码他还是不满意，还是要一边开车一边修车。好的，就是雷老大的一段代码，说是二十年前的。那段代码就那么直接投影到大屏幕上，程序员弟兄们沉默一会，然后纷纷点头。发言，大意是：我不指望你们有这水平，但你们得朝这个方向努力啊！事后我问一位程序员老铁：你们是拍马屁还是真服？我只会Hello world，看不懂。这位后来也做了某上市公司CTO的未来大佬对我这个文科生不屑一顾：我没法和你解释。总之，雷老大写得很简练、很清晰、很干脆，这就是牛逼，而且是高层次的牛逼。所以我觉得，应该是真牛逼。,我自学了一些c，看过雷军编写的教材武汉大学计算机专业两年毕业，编程满分，直接编写计算机教程。大学没毕业直接编写程序卖给别的公司赚钱进入金山凭技术做到金山总裁。别的不敢说，他绝对是计算机领域大哥级人物，打爆百分之九十九绝对不是夸张的数字。我国计算机从业者及相关，最少也有几十万人吧？百分之一也有几千人了凭雷军的实力，进不了前几千?,雷军22年前写的汇编代码，大家看看牛不牛：电脑和编程是雷军人生中最大的兴趣，关于电脑和编程，雷军是这么说的：雷军的技术为什么这么牛逼？他在一次采访中说过一段话：我尤其喜欢阅读计算机经典书籍，那是一种如饥似渴的感觉！另外我把大学和工作中用的经典电子书库（包含数据结构、操作系统、C++/C、网络经典、前端编程经典、Java相关、程序员认知、职场发展）、面试找工作的资料汇总都打包放在这了，这套资源可不是一般那种网上找的资源，是伴随我从学生一路成长为腾讯高级开发工程师，360技术经理、360技术总监、中小公司CTO的打包全套，非常宝贵！点击下方链接直达获取：雷军20年前写过一篇文章：《我会当一辈子程序员》。看完你会知道，编程在雷军的眼里是什么样子。关于雷军的代码水平，他自己也说过：,"求伯君、雷军、张小龙应该算是中国第一代程序员里面的顶尖高手， 雷军大一时写的代码后来被老师编入教材，作为样例代码被后面的学弟学妹学习参考，仅仅用了两年时间，雷军就完成了大学四年的课程，提前毕业。1990年初，雷军在一个朋友那里用了一次雷军当了一回不光彩的""黑客”。他把WPS解密了，并移植到普通电脑上直接使用。雷军把解密的WPS版本做成了国内最流行的WPS版本。因为这个渊源，雷军后来认识了WPS的开发者求伯君。进入金山软件之后，雷军成了求伯君最得力的助手，并且最终接班求伯君。雷军对于自己写的代码非常的重视和珍稀，即使他做了管理岗位之后，依然有机会就写写代码。雷军还在网上发表了一篇文章，如下在2018年，金山软件创立30周年纪念日活动上，雷军回忆了这段经历：当我28岁时候在金山白天当总经理，晚上当程序员，当时就想这样能干好两份工作，但发生了意外的事情，有个同事把我的电脑不小心给格式化了，连备份硬盘都格式化了，从此断了我的后路，从而走上了当CEO的“不归路”。他十年间写下的代码就此毁于一旦，心碎之余决定不再写代码，雷军至此解开心结，放下了立志一生编程的想法，全心做好公司的管理。从此江湖上少了一个伟大的程序员，多了一个Are you ok 的网红！！！",雷军20年前曾经写过一篇作文：《我会当一辈子程序员》。看完你会知道，编程在热爱它的人眼里是什么样子。电脑是雷军人生中的最爱，电脑的世界对于雷军而言实在太美妙。雷军觉得，电脑的世界没有人那么复杂。只要你程序写得好，就可以和电脑处好关系，也可以指挥电脑，做一些你想做的事情。雷军认为，电脑的世界很大，程序员都是活在自己的王国里。在这里，程序员可以主宰一切。正是因为热爱，所以雷军一干就是10年。对于雷军来说，虽然现在他更加专注在产品开发以及管理方面，但是曾经他对心爱的代码视为珍宝。之前来了一位技术支持人员，而这位技术人员进公司的第一份工作，就是帮雷军整理他的硬盘。 一位理解错误，原本只要覆盖式的安装系统就可以的事情，这位程序员却把雷军的硬盘格式化了。这些代码是雷军多年来积累下来，而且也是他的最爱，就这样成为 炮灰，相信雷军非常难过。雷军认为，编程的工作同石匠的工作相类似，即是技术活，也是体力活，而编写优秀的软件，算是一件比较难得事。编程是一门技术活，因此才有可能大规模的进行，进而才会有软件工程。此外，因为编程是一种艺术，因此有很多好的产品。以上内容来源于网络如有侵权联系小编,上大学时写的代码能入教材，九十年代写的程序能卖百万。,前段时间不是有一个事情特别火，某游戏的代码写得如x山一般，加载速度相当慢，一查才发现就是这座x山导致的，但谁也不想改也不敢改，最后还是有网上的一位匿名兄弟帮助修复了这个问题并放出开源代码供给其他玩家。而雷军早期写得一些程序就已经注意到了代码的工整性和可修改性，真的是非常了不起、有前瞻性的行为，同时也说明这个人考虑事情很周全，不图一时之快，而是从真正做好这件事情的角度出发。而且雷军自己不也说过吗？“我的代码写得像诗一样优美”,        雷军的优秀是毋庸置疑的，在武汉大学，他两年学完计算机系四年的课程，大二就完成了毕业设计，汇编语言更是武大三十年以来仅有两个满分之一，大三就开始写加密软件、杀毒软件、财务软件、CAD软件等。至于老雷的代码水平，大家看看吧，反正我这个菜鸡是编不出来啊，大兄弟你们怎么样;,,,,
如果让无所不能的神来写代码，是否能写出没有bug的软件？,软件有那么多bug的原因是不是程序员水平低？如果换一个智商无限高的神来写会怎么样,不能，你永远无法知道你的用户会怎么用你的产品，他们测试流传着一个广为人知的段子：一个测试工程师走进一家酒吧，要了一杯啤酒一个测试工程师走进一家酒吧，要了一杯咖啡一个测试工程师走进一家酒吧，要了0.7杯啤酒一个测试工程师走进一家酒吧，要了-1杯啤酒一个测试工程师走进一家酒吧，要了2^32杯啤酒一个测试工程师走进一家酒吧，要了一杯洗脚水一个测试工程师走进一家酒吧，要了一杯蜥蜴一个测试工程师走进一家酒吧，要了一份asdfQwer@24dg!&*(@一个测试工程师走进一家酒吧，什么也没要一个测试工程师走进一家酒吧，又走出去又从窗户进来又从后门出去从下水道钻进来一个测试工程师走进一家酒吧，又走出去又进来又出去又进来又出去，最后在外面把老板打了一顿一个测试工程师走进一一个测试工程师走进一家酒吧，要了一杯烫烫烫的一个测试工程师走进一家酒吧，要了NaN杯Null1T测试工程师冲进一家酒吧，要了500T啤酒咖啡洗脚水野猫狼牙棒奶茶1T测试工程师把酒吧拆了一个测试工程师化装成老板走进一家酒吧，要了500杯啤酒并且不付钱一万个测试工程师在酒吧门外呼啸而过一个测试工程师走进一家酒吧，要了一杯啤酒';DROP TABLE 酒吧测试工程师们满意地离开了酒吧。然后一名顾客点了一份炒饭，酒吧炸了,"研发工程师慢慢走到屏幕前，把鼠标移动到编译按钮上。他只能先在本地运行代码，以防线上服务被未知的Bug弄伤。接着，三位工程师也都开始运行代码了。“看上去太脆弱了，真怕把它碰坏了。”QA小声说。“找不到一点儿Bug，”实习生惊奇地说，“这代码“能强到什么程度呢？”研发问。为了解答这个问题，QA从文件夹中翻出了一个“当前压测QPS是多少？”研发问。“峰值的一百倍。”QA指指显示器一角的一个数字，同时把压测流量调到一千倍。压测后的服务依然没有任何error。“你这东西坏了吧？”实习生说。QA把压测流量注入到自己的测试机上，其他三人凑过来一起看着显示屏，只见压力被放大一千倍的测试机，肉眼看上去很正常，但异常监控曲线如同乱石滩一样粗糙。QA又把压测流量重新打在本地服务上，监控上再次出现了空白的异常打点，与压力没有放大的时候无异。“把倍数再调大十倍。”研发说。这超出了单机发压的能力，QA进行了一连串的操作，把发压机由单机模式切换到集群发压模式，现在放大倍数是一万倍。放大后的异常监控仍是一片空白。而人类技术所能编写的最完美的代码，压力只放大上千倍后其问题就暴露无遗，正像格利弗眼中的巨人美女的脸。“调到十万倍。”实习生说。他们看到的仍是毫无异常。“一百万倍。”毫无异常。“一千万倍！”在这个放大倍数下，已经可以看到，但屏幕上显示的仍是毫无异常，看不到一点儿Bug的迹象，其服务可用性与没有被压测的服务毫无区别。“再把倍数调大些！”QA摇摇头，这已经是发压集群所能达到的极值了。……“真有没有Bug的代码？”QA惊叹道。“有，”研发说，“Hello World就没有Bug。”“但这东西的代码量是正常的！”研发离开到工位上寻找着什么，回来时手里拿着一只猴子，可能是有人在做故障注入时丢下的，其他人来不及制止，他已用力把猴子甩到了电脑上！他只看到一个""WARN""，这日志是出现在控制台上的，由于是本地环境，其他三人看不到。研发接着将鼠标移动到日志打印的代码行打断点，QA立刻用调试模式debug那一行。一千万的压力倍数下，仍是没有任何error日志。研发颓然地把猴子扔掉，不再看代码，低头深思起来，三位工程师的目光，还有知乎上数百万工程师的目光，都集中到他身上。“只能猜了。”研发抬头说，“这项目的代码逻辑，像说明书一样清晰，同时能够自解释，知道这种代码有多难写吗？不用编译器，用记事本就可以看懂。”“这就是它毫无Bug的原因！”QA说，她和另外两位工程师都明白研发的话意味着什么：在普通的业务代码中，代码的历史包袱是很多的，把祖传代码优化掉，不比让程序员写注释容易多少。“怎么才能做到这一点？”“只有一个：产品经理不改需求。”透过屏幕的反射可以看到，研发的额头上已满是冷汗。“这……不是等于业务不迭代了吗！”“业务确实不迭代了……”研发发出一阵冷笑，听起来有种令人胆寒的凄厉，三位工程师也同样知道这冷笑的含义：那就代表程序员也要失业了。“那……我们该怎么办？”实习生脱口问道。“谁知道？也许它只是一个故事，但带给我们的是另外一个信息……”研发说，同时把目光从代码上移开。这句话带来一阵死寂，就在现场的另外三名工程师和知乎上的百万人咀嚼其含义时，研发突然说：“快点赞。”这三个字是低声说出的，但紧接着，他扬起双手，声嘶力竭地大喊：“程序员们，",bug是个主观概念，没有客观衡量标准，客户觉得它是bug它就是bug，即便在需求文档上没有明文说出来。所以不可能做到没有bug。但是万能的神或许能够催眠客户让客户认为这个程序就是没bug，这样的话自然就写出没有bug的程序了。,bug有很多种，全知全能不会出错的神只能防止硬性bug的出现，但很多bug并不是简单的错误，而是反映了程序不够 “聪明”。第一类神没办法解决的bug是设计缺陷。这是业务逻辑上的漏洞，比如老师的课选满了，你想让老师加名额，结果教务处让你找老师，老师让你找教务处。这种bug不是程序员nb能解决的，需要改需求。第二类是对悖论问题的处理方式。两面镜子对着放，左边的镜子反射了右边的镜子里左边的镜子反射的右边的镜子里左边的镜子反射的右边的.........又或者是一个只说真话的人说：“我说的这句话是谎话”。显然这种问题是不可解的，但计算机该如何处理呢？是触发报错，还是什么都不做，还是只处理一次，还是设置固定的递归深度，还是直接向屏幕打印一句颇有哲理的话，比如 “如果有人能理解世界，那么这个人一定是无法理解的。”直接报错是对的吗？程序接受了无法处理的输入，那就应该报告异常。可报错本身会对系统的执行流程进行破坏，错误应该以什么方式被报出来，程序应该终止还是继续执行，哪些模块要回档，回档到什么程度，都是问题。比如支付宝交易，如果你支付的时候断网了，那应该等下次连上网的时候自动完成支付，还是立刻把这次交易作废呢？如果自动完成支付，应该直接谎称交易成功，然后在后台偷偷把事给办了，来获得丝滑的用户体验，还是应当提示用户，添加到挂起列表呢？当然，为了确保安全性，程序会直接告诉你网络中断，交易失败，但如果神把安全性提升了一大截，那是不是这个新特性就能被允许了呢？因此，对于很多答案不明确的问题，不同的时期，不同的人，有着不同的偏好，程序聪明与否，非常主观。对于镜子反射的问题，目前的游戏大都是计算一次，即为，左边的镜子反射了右边的镜子，却看不到右边的镜子里反射的东西。但如果是非实时渲染，通常会计算若干次反射，有一定数量上限。现实中，光碰到镜子，会被吸收一部分能量，在两个镜子间来回反射直到能量全部被吸收或被反射到两个镜子以外的地方。计算次数多了，玩家会说有bug，看见镜子就卡。计算次数少了，玩家也会说有bug，镜子里不反射镜子，不真实。第三类是对于规则以外的输入的处理如果在一个计算器里输入汉字“一加一”，程序应不应该正常运行呢？如果汉子可以，那其他国文字，甚至外星文，应不应该被支持呢？游戏里有一个商人，可以接受物物交换，让你用装了消音器的手枪换任务道具。那装了消音器，又装了瞄准镜的手枪可以不可以？瞄准镜要不要在交易后返还？弹夹装满，弹夹打空，弹夹半满，沒裝弹夹，哪种可以交换？狙击枪比手枪值钱，给他狙击枪可不可以？长得像手枪的冲锋枪行不行？背包满了，先给他一个手枪，待会补一个消音器行不行？新手枪，用过了的手枪，卡壳了但还没修好的手枪，损坏了的手枪，哪些能被接受？显然，只有全新的，型号一致，装且仅装了消音器，上满子弹的手枪才是标准输入，但如果游戏这么死板，会被玩家喷。甚至你还要特意为了做任务而跑一趟商店，买一把根本不需要的手枪，而不能直接从背包里掏出一个给他。但如果兼容性太强，只要拿一个价值比消音手枪高的物品就能交换，那游戏的流程可能会被破坏，比如原本这是一个射击训练任务，给你一把无限子弹的枪打靶，打完靶回收，结果你直接用别的东西代替了。或者是游戏有意引导玩家做一些事，但玩家直接用策划想不到的方式给过了。这种“聪明”，没起到好作用，反而成为了新的bug。无敌的代码之神，也没法做到尽善尽美，永远有一些人们不喜欢的特性被标记为bug。或者用户本身对程序的认知有误，用户以为这个按钮是xxx，没想到却xxx。（这也不是代码的锅，是设计问题，引导不到位）简而言之，没bug，不可能的。,不知道写圣经的上帝算不算无所不能的神。但圣经的水平嘛……最蹩脚的码农看不见警告，而上帝连错误都看不见。转自： ,转知友 有太多的证据说明我们这个世界是虚拟的。1. 为什么宏观上丰富多彩，但是微观的基本粒子却都是一模一样的？这正和图片丰富多彩，但是像素是一模一样的一回事2. 为什么光速有上限？因为机器的运行速度有限3. 为什么会有普朗克常量？因为机器的数据精度有限4. 为什么微观粒子都是5. 为什么有6. 为什么量子计算机运行速度那么快，一瞬间可以尝试所有可能？因为这个本质上是调用了宿主机的接口7. 为什么会有量子纠缠？这实际上是引用同一个对象的两个指针8. 为什么会有补充：这一点非常类似于程序中的延迟初始化为了避免无限止实例化所有微观对象，顾在程序运行时只保留一个状态分布函数，等观测的时候，也就是在使用组件或对象时，进行初始化，new一个新对象出来，同时也确定了该对象的状态。9. 为什么时间有开端？系统有启动时间嘛10. 为什么宗教人士，程序员都很难找女友？系统对这些探索系统奥秘的不稳定份子都很不友好啊如果说什么语言最接近系统使用的语言？我觉得是c++，不然bug不应这么多。总结：建议提问者多看看日报，或许很多脑洞问题会提前被这些精彩的回答所解决最后，不多说了，地球online的服务器快没钱了，我得去帮忙续个费(逃,智商无限高的神会立刻指出甲方需求里的逻辑矛盾和不完备然后因为羞辱客户被开除，而无所不能的神会消灭所有甲方，天下无bug,按照神就是程序员的设定，人+社会就是代码。结论就是充满了bug，但是不用慌，因为整体采用的是进化算法。Bug实在太多了也没事，大堆大堆删代码，重来就好了。就当是一场梦，醒来还是很感动。,这就是中了“计算机软件行业就是写代码”的毒。软件工程别说这几年的急速发展，就算是能看一眼三十年前的《一个软件，能够商用或者广泛使用的软件，无论是单机软件，还是B/S系统，都会面临非代码bug，也就是各种各样的非软件逻辑defect。软件本身功能错误，无论是你用一个MS word，还是一个淘宝，这都可以通过极端人力，在这里预设为神来解决，但是软件是没有可能独自生存的。MS word还要跑在操作系统上，淘宝还要跑在浏览器里，这些容器带来的bug，是软件本身不可能完全解决的。再往上想一层，为什么我们开始的时候提出这些全部是非代码部分会出现的bug，更不用说，软件写完了以后，还要部署，分发，分发渠道会不会有问题？商用的服务器设置会不会有问题？单机软件会不会和其他软件起冲突？截图软件shareX的热键就会和这个神既然无所不能了，与其写代码，还不如直接改了用户的,。哥德尔不完备原理已经清楚的告诉我们：如果你对这些术语不熟，那可以直观但不确切的理解下：一阶谓词就是“存在XX、所有XX、如果XX则XX”，初等数论就是加减乘除自然数。任何软件只要包含这些功能，那么一定有IF判断既没法返回真也没法返回假，那只能死机了，这不就是BUG吗？当然，我这里是假设开发任何可能的软件都不出BUG。你都把神请过来了，要求高一点也可以理解嘛！“说人话！！！“，可能有不少观众会打心眼里怒吼。好吧，那么现在进行——实例问答！有请——神谕机：叮叮口当！这么好康的东西，一定能横扫所有BUG吧！好吧，请听题：神谕机：&%！%¥！%如果你不意思不是开发任何可能的软件都不出BUG，而仅仅是针对某一不太变态的软件，那用不着神出手，我们已经有形式化分析手段从理论上就能确保软件的可靠性。说白了，只要钱到位，都不是问题。,"没有bug的软件，是还没开始写的那个。但凡写出来了，就肯定有bug。虽然软件都是程序员写的，但bug不都是程序员的锅，水平再高的程序员也有bug。换句话说，如果没bug，那还有什么维护什么事儿，有新需求什么事儿。我记得Software Quality Assurance的老师说，你们千万千万别怕新需求，new requirements are where the money is. 说得好呀，按照神的设定，这个世界就是神的代码，including everything，都是他的creation，这其中，人是他最满意的。可是再满意，也出现了蛇，让没有软件是完美的，因为为了与时俱进，咱就得让软件跟上各种更新。用户的需求是不确定的，也是不断调整的，他们的期望也在变化。所以，有变化，就有可能产生bug。Zero bug development is a myth that should be dispensed with. In order to stay relevant, you need to keep things fresh. Twitter, Facebook, Gmail, Dropbox, and other companies constantly improve their software, as we can see in the What’s new section of app store listings. They make improvements to meet end users’ evolving expectations along with changing web and mobile technology. ","这个问题有意思，更有意思的是炸出一堆被甲方虐了千百遍，自尊心受到极大打击的程序猿。抛开可以扯皮的，和需求相关的“Bug”不谈，我认为没有bug的软件理论上存在。如果只讨论bug的一个子集：比如美国国防部于1983年提出了一个“可信计算机系统安全评价准则”TCSEC（Trusted Computer System Evaluation Criteria），分为七个等级，D,C1,C2,B1,B2,B3,A1:商用化的操作系统包括Windows NT内核的系统，大多只能通过C2等级认证。最高的A级认证，要求软件使用形式化方法是基于数学的方法，简单来说，要用资料显示，采用形式化方法开发的软件有：阿丽亚娜火箭的任务调度模型，我国的玉兔号月球车控制系统等。所以为什么商用软件没听说过用形式化方法开发？显然成本很高，而且只能开高度耦合的程序。但如果是神来做这件事的话，——————再来写点维护程序员自尊心的话—————软件开发本身就是挑战人类智力极限的事情。如果随机把一个CPU执行的实时机器码dump出来，估计没人看得懂计算机正在处理什么。所以有段子说：计算机就像女人，你永远不知道她心里在想什么。80年代IBM曾投入5000人年来开发OS/360系统，花了数亿美元，仍然延迟交付。，幽灵漏洞，心脏出血……这两年爆出的各种大厂的史诗级bug还少嘛？！所以我觉得广大程序员们不用羞于承认自己写不出无bug的软件，本来就只有神能做到。",,这个问题我觉得要这样来看，首先要搞清楚这个所谓的bug是由谁来定义。大部分情况下，这是由需求文档来定义的，这种情况下判断是否是bug比较客观，只要需求文档break down的足够细，那么神能写出没有bug的软件的可能性就足够大。另外一种情况，是否是bug，要根据用户的需求来决定，这个判断是否是bug就比较主观难以把控了。当然，如果是神的话，他(她?它？搞不清楚)完全可以大吼一声改变你的心智: 这不是个Bug，这是个Feature！！！首先，我们看第一种情况，需求文档说要实现1+1=2的功能。但是因为神要写出的没有bug的代码，这一句需求文档就要进一步进行细化。大家看到没有，只要你有时间将需求文档做足够的细化，神是绝对可以写出对需求文档来说没有bug的软件的。如果加多一条，只要不跳出当前科技水平和人类认知的物理规律之外的，那别说神了，我们人也完全能写出对需求文档没有bug的软件。只是说如果你要像《三体》中质子在汪淼眼睑中显示结果，我们还没有到这个科技水平而已。既然神和人都能写出对于需求文档没有bug的代码，那么第二种情况，对于用户没有bug的代码呢？如果要实现这种情况的无bug化，万能的上帝只能做一个事情，先制造出一个人，然后以这个人作为蓝本作深度复制，注意是深度复制而不是浅度拷贝(大家都是写代码的，你应该知道我在说什么)，这时还要控制时间和空间，让这些人在同一个时间同一个空间，同样的视力，体力，角度，反正所有东西都要相同的情况下做同样的操作，然后获得正确的结果。那么这个时候上帝就可以捋着胡须说，好，看来我这个1+1是没有bug的！以上只要条件差一点你都没有办法做到面向所有用户无bug化：第二种情况下，我们没有办法控制时空，且对人类克隆是犯法的（^_^），也没有办法控制所有人的所有身体和各方面的条件，所以没有办法做到面向用户无bug化。但是第一种情况下，我们作为做产品和写代码的，还是要尽量做到需求文档的细化，然后尽量的做到面向需求文档无bug化，这是我们基本的职业操守。另外，现在都追求,谢邀，没有bug的代码是可以实现的，不过并不取决于谁写，而是取决于系统的复杂度。这里我们要先解释一下有很多，例如：而如果我们的系统复杂度是“Hello world”难度级别的，那么除去硬件问题，不用无所不能的神，我也可以（手动狗头）。但如果我们设计的是一个极其复杂的系统，那就很难保证无所不能的神能够写出没有bug的软件了。这是因为就好比上帝设计人类之时，并没有想到人类会发明出酒并大量饮酒，而酒喝多了会让人断片儿，即会造成生理功能不正常甚至数据丢失，这在某重意义上就是出现了一个bug。也就是说无所不能的上帝创造出的系统（人类）也是有bug的。在题主之所以会认为的无所不能的神能够写出趋近于完美的软件，不过是认为无所不能的神能够拥有比人脑更加而人类虽然难以无限增加自身的信息存储和运算能力，但其实20世纪探索深度学习在本世纪代取得的辉煌成就也都与此相关，如今深度学习的成功已经用于在照片中识别物体或分类、自动驾驶汽车、游戏、自动机器翻译、图像字幕生成、文本生成、化学结构的毒性检测、预测蛋白质的3D结构形状等。在此，人邮君推荐三本书，《动手学深度学习》是一本关于体验的书。书中不仅阐述深度学习的全书内容分为3个部分：第一部分《深度学习》被誉为“AI圣经”，其作者是全球知名的三位人工智能专家：生成对抗网络的发明者——Ian Goodfellow、2018年全书内容包括3个部分：第1部分介绍《Python深度学习》由书中包含30多个代码示例，步骤讲解详细透彻，立足于人工智能的可达性和大众化，读者无须具备机器学习相关背景知识即可展开阅读。在学习完本书后，相信你将具备搭建自己的深度学习环境、建立图像识别模型、生成图像和文字等能力。========赠人玫瑰，手留余香~不要忘记点赞、收藏、关注 ,"不用神，上python的大当也缘于此，我改了下它的pdb，不停在热态循环写，直接提示contex，几乎不用动脑子记什么东西，简单死了，一遍写好后也肯定没什么常规bug。感觉这东西太方便了，结果写了一堆脚本，那知便宜没好货，当最终发现python根本干不了真正的活时，删都不容易删。最不容易出bug的我用下来觉得是guile的scheme，那个括号一开始觉得别扭死，可后来觉得精妙无比，一个括号就是独立的一段，拷贝删除都方便无比，具然有傻子做了工具硬要把括号改成缩进。写完后一层括号后，我只要在当前层敲个 <s-k>把它发送给右窗的repl，可以一层层单独调，明面上的bug基本不会有，真试用发现有时，它可以整体-拉出每行的执行日志，可以不用进入热态调试，这时我才发现原来热态调还不是效率最高的，不用进热态但能看到热态的全部运行效率才真TM高，python也能这么干，但python给不出变量和参数运行时的值，而且方法一大速度不可接受的（因为它的catch不是在源码层是在脚本层实现的，guile是在虚拟机上做的）。所以你写软件有bug，归根及底还是因为你水平有限导致工具有限而已。当你能写编译器时，你写常规软件会有逻辑错误，框架失败，但不会有太多bug。象c程序员一般bug根本无感，但内存问题个个惊恐不已，没工具你就是神探也没用，我也见这个东西头皮发麻。但如果你能吃透其实我认为libgc也能做这个工作，比如它有个用sigsegv信号截停调试的，可以去除掉libgc的自动回收机制，但所有内存依旧调用gc来分配，并增加一个在 debug 模式下对所有分配的变量内存进行越界监控的功能，一旦越界就给出信号或调gdb来attach，因该更简单的。我觉得我把这个实现出来倒不是很费劲，正好最近又积累了不少内存错误（平时我自用的软件只要能混下去我一般都不查）。所以现在社区的那些所谓大牛说起来忙，开发这个开发那个的，不知道忙些什么东西，没见做什么有意义和价值的东西。linus也就知道吹牛，也不把他的秘密武器公布出来让大家都用用。有高倍的瞄准镜，从没开过抢的也能轻松一抢爆头的。世人急功近利，视底层为浪费时间，其实底层才能控制一切。-------------追更下，我猜torvals的开发环境会怎样-----------------他写代码一次好，没bug，我想完全可能，也必须可能。他所谓精简版的emacs因该编辑、编译、调试源码层三合一的，每次写时，先打个 ctr-b 在当前行设断点，将程序载入gdb，然后编辑，编辑中查询接口直接接入gdb，所以方法签名、全局/局部变量提示什么的全不用tags方式查，gdb直接导进complete热区（这很重要，在定义新方法、全局新变量时，可迅速查清space内有无重名和新名称要怎么样命名合适），引用的所有方法全可通过gdb定位源码，直接jump看源码，实在老了，有的记不清了，方法名上 info 一下，他们写底层，方法定义说明全进info库的。（下属开发递交上来的代码，在gdb中先自动过一遍，设个查看粒度和过滤器，将所有主要方法的调用拓扑及运行值trace出来，生成个tree看看结构有没有问题，没有就通过，如果看到有内存泄露的问题，正好装B教训他们几句，反正内存泄露类较难调的错误在他的gdb运行过程一般都能找出并传给quickfix窗口。别人？我干吗要给你们装老大，自已去编。）然后写完一行或几行，打个enter存盘，不用再打F5了自动后台进行编译，这个过程很快几乎没有停顿和感觉，如果有错，quickfix弹窗，在编辑窗与quickfix之间轮换几次改好。改好再enter存盘一下，自动编译通过，然后gdb将编译好的内容自动重载并运行到新写作点，然后继续。在这一步一步的步步为营中，绝大部分contex上的引用错误，类型错误有gdb的现场值守，全部因能校验出。敲了一天代码后，看下表，该吃饭了，他现在基本不写kernel了，如果写的是git，那正好用写的新的功能 git 下试两下，有问题？ gdb attach后，recreate下现场trace下，看看怎么回事，也分分钟搞定。再有问题，那是这同样也能解释他为什么讲""当然，广义的逻辑需求类bug不在讨论范围的，那也是",这个问题很有趣，但是也有一个陷阱。里面潜藏的一个逻辑是：无所不能的神来写代码，但是软件是给人用的，bug也是人提的。我们应该假设有一个无所不能的社会。里面有无所不能的码农神，还有无所不能的测试神。码农神的设定是：他能写出无懈可击的代码，因为他无所不能。测试神的设定是：他能从任何软件里找出bug，因为他无所不能。最强的矛和最强的盾到底谁最厉害？最强的码神和最强的测神到底谁最厉害？无所不能本身限制了无所不能。原来无所不能TMD本身就是个循环逻辑错误。因此本问题提的就有bug。打回重提。,以下是我的思考。软件中大多数Bug的产生和程序员水平并没有直接的关系。有人的地方就有Bug。这是人类的弱点。你的大脑总有不在线的时候，你的逻辑并不能一直保持严谨。与智商高低亦无关。所以，换成无所不能的神来写代码，效果也不一定好。既然无所不能了，那肯定能写出Bug，是不是这个逻辑？你需要的是一个永远正确的神。其实现在人类也发明了很多技术手段来对抗这种先天的弱点。比如静态分析。比如写C/Cpp代码的程序员，会经常写出一些内存不安全的Bug。即便高手也难以避免这类问题。这是因为C/Cpp把底层控制力完全交给了人类，靠人类的逻辑思维来保证安全性。但人类是脆弱的，包括逻辑思维能力。所以C/Cpp会依赖编译器提供的，以及外部第三方的静态分析工具来避免人类脆弱的逻辑思维而产生的坑。现在，Rust的出现，则又更进一步。在语言层面利用静态分析来解决特定的内存安全问题。配合严格且智能的编译器来保证开发者在底层资源控制方面不会出错。语言级别，意味着开发者写下的每一行代码，都是严谨的。相当于把C/Cpp完全依靠人类逻辑思维的状况，剥离了出来，让开发者对底层资源控制的同时，由编译器来辅助开发者保证逻辑的严谨和正确性。Rust让开发者的思维可以更接近于神，在控制底层资源的时候不容易犯错。这是Rust比C/Cpp更优秀的本质原因。我并不是在吹Rust，上面只是我的一些思考。人类的思维本身就是脆弱的，包括我上面的思考。希望各位看官能来指出我思考的缺陷，而不是来喷我黑我。以上。,还需要一个无所不能的神来当产品经理。如果需求提错了，代码再怎么正确也满是bug。,无所不能的神写的软件给谁用？软件是给能力不足的人类用的，借助计算机的运算和存储能力。所以，神要给谁写软件？既然他们都无所不能了，人类有什么需求，直接满足就完事了，神们内部有什么需求吗？不可能啊，大家都是无所不能的了，能有什么需求要借助软件来实施？问题不成立，没有答案。
大学计算机系最努力的同学都是如何学习的？,看看大神们是如何努力的,我来给年轻人讲讲我当年上海交大的情况和我儿子多伦多大学的情况  我是1984年入从二年级开始，周末已经慢慢开始有休闲时间了，唯一娱乐是打扑克牌。当然周末只是周日，周六是weekday，和平时一样上课。weekday和一年级差别不大。三年级开始轻松一些，因为专业课相对容易，经常熄灯前一个多小时就回宿舍了，打扑克一小时。四年级打牌时间更长，经常上两个小时的自习，作业做完就回寝室打牌了。四年级毕业设计时就是天堂了，白天机房，天天晚上都是打牌。我三年级开始谈恋爱了，一般周日都去女朋友的学校当时叫总的来说，四年大学还是打好了扎实的基础，为将来的工作做了很好的准备。我们班很多同学还是很有成就的。成绩第一的研究生时是最轻松的，我们系共17人，一半是交大的，一半是外校进来的，我们系和电子系、自控系住在研一楼九层楼上，宿舍不熄灯了，两个人或者三个人一个寝室，没有多少作业，有努力的同学和导师做做课题，大部分的同学经常打扑克牌、下军旗二年级时，无锡电子研究所的三个工程师找到我，我们一起开发了国内最早的动态心电监护系统，替代进口，找了香港人投资，我们技术入股，成立了深圳金冕电子仪器有限公司。我们也坐上了风口。很多很多的故事，到1998年，我退休至今。我的导师特别好，我毕业设计很简单，因为我没有时间，深圳、上海两边跑。学校计算机不够用，我给几个四年级的同学机时，他们帮我编程，算是完成了毕业设计。下面我介绍我儿子在多伦多大学计算机系的情况。先说他本科是多伦多大学工程科学系，是多大最牛的系，没有之一。他自己计算，每周有5个小时的自由时间，除了学习睡觉吃饭。买21个玻璃饭盒，每周日做一次饭，分成21份，每天吃三个，微波炉加热，没有时间在酒店点菜吃（高中四年午餐都是酒店点菜吃）。三年如一日。四年级和女朋友住一起，有所变化。上课永远坐第一排，努力回答问题，让老师记住他，暑假前才能写信跟老师申请科研工作。硕士研究生和博士进了计算机系。到现在博士3年级了，总共在多大7年了，没有休息过周末和寒暑假，每天每天工作和学习，我佩服的五体投地。唯一陪女朋友旅游一次是今年暑假。女朋友也读博士。他今年5月到12月在一家公司实习，是世界前7大动漫游戏公司，他经常一次动用二十台计算机运算，大学里没有这个条件。今年9月，他正式告诉我，他决定每周休息一天。他的努力有回报，已经在计算机图像领域最权威的看到这个题目，做为老一代计算机系学生，一时兴起，第一次发言，不当处，多包涵！2024，10，19我是刚刚实名制登记，甚至没有评论过别人的贴子，第一次发帖，完全没有想到这么多人看，非常感谢大家更没有想到评论中最多的问题是问我退休后的生活，  巧合的是其中一个还是我的大学老师的中学同学，所以有长辈问，我必须说一说。其实我31岁又三个月退休后，很多同学朋友也一直问我这个问题。我是一个好奇心很强的人。我一直以为人在宇宙中太渺小，甚至银河系都是亿万星系中的一个而已。世界很大，我又好奇心重，想了解世界是我退休生活的主基调。我第一个家肯定是深圳。后来上海第一套房是古北新区一期，金色房产证，外汇买，涉外的，所以很多国外频道，我们家电视永远只看一个频道，discovery美国国家地理杂志。我最想了解的是全世界的人是怎么生活的，我对风景不太感兴趣。所以，看书、看纪录片，看新闻，经常各地去见朋友聊天。也旅游，今年6月份和太太一起西班牙三周多，7月在南部非洲，总共50天。我退休后第一次旅游是1998年和太太去新疆哈纳斯湖。乌鲁木齐租了一辆我经常一个人住在丽江、凤凰、芙蓉镇这种古城，一住就是两个月。酒吧里和天南海北的人聊天，也认识很多朋友，听很多有趣的故事。当然我家保姆是最不喜欢我这一点，经常会有各色人等到我家吃住，增加她的工作量。当然现在情况变化很大。第一次去丽江，1999年，总共不到10家酒吧，酒吧老板、游客很多都是艺术家，很有趣，见过几次就是朋友了，喝酒互相买单，白天组团一起租车。后来慢慢变，商业化越来越浓，游客也都急匆匆的，不像原来都是慢生活2012年来加拿大，一方面是因为两个孩子读书，移民可以省很多学费。更重要的是，体验新环境，看洋人是怎么生活的。所以我和邻居们处的很好，犹太人法国人伊朗人，经常一起吃饭聊天。我刚才说今年夏天出去旅游，开始时忘了交代孩子草坪割草，结果隔壁的犹太律师，77岁了，看到我家草坪草太高了，自己跑来给我割草出国后也解惑了一些以前的一些疑问。比如，过去看美国电影，经常看到偷车的，不用钥匙 直接开门，拉出几根线，几个多年英语忘光了，来加拿大前几年上课学英语，加拿大政府免费对新移民开的。老师都很好，讲很多风土人情，加拿大的知识。我学以致用，一个人去印度住了三个月。到了一个城市，拼命和当地人搭讪，如果有缘交一个朋友，就住半个月，看看他的生活；不成功就换下一个城市。最好的体验是在恒河边圣城瓦伦纳西，交了两个朋友，住了二十天。我选的酒店离一个露天火葬场只有80米远，24小时不会停歇地烧，我每天都会站在那里看好久，和家属聊天。思索人生的最好地方。无论贫贱，烧的结果一样，只是用不同档次的木材好奇是我的一个性格。懒也是我的另一个特点。所以我说我非常佩服我儿子，他极其勤奋。我喜欢打扑克，线上线下都打。我至今最要好的朋友，都是中学田径队和篮球队的同学，平时一起上课一起训练一起比赛，寒暑假在一起打扑克，大学时也是这样，放假大家都回老家，假期一半时间打扑克。我太太也是扑克迷来加拿大，入乡随俗，运动时间更多了，每周至少5天，一般自己四天排球，一天陪太太网球 。我的一个大学班主任告诉我，30岁之前了解自己，人生成功了一半。我非常同意，扬长避短才能成功。但是不容易，大部分人高估自己，无视自己的缺点。如果能掌握了这条，管理也是易如反掌，安排工作发挥员工的长处，避其短板。社交也是如此，我在儿子高中时训练他，尽短的时间，发现对方的优点，巧妙的表达出来；或者找出对方擅长的领域提问题，增加好感还增长知识，沟通的技巧是少说多问。另外我岳父汤任基对我的早早退休影响很大。他是流体物理学家，三钱之一一口气想到哪说到哪，比较散。总的来说，过自己适合的生活。像评论区有朋友说的，儿子大学毕业就工作了，全家一起经常旅游，没有那么累，过的舒服。我完全赞成！2024，11，21评论区有朋友问勤奋努力的习惯是如何养成的？我来讲一下我儿子习惯的养成，希望对大家有帮助。我完全是用的目标导向。我是煤矿子弟，所以我初中毕业的时候，三分之二的同学就到工厂去工作了，三分之一的同学读高中。后来到九十年代大量的国企倒闭，我一半的同学就失业了，生活非常困顿，有的在传达室看大门，有的做保安。我从小就刻意的带儿子到他们家里去，回家以后就告诉他，如果学习成绩不好，将来的生活就是这样的。我高中是上的省重点中学，大部分同学都读了大学，我会带他到在老家工作的同学的家里去看，告诉他如果读了大学情况就会改善成这样。带他到上海同学的家里去，然后告诉他如果读了最好的大学，就可以生活在喜欢的任何一个城市，过非常好的生活。当然，如果碰到乞丐的话也会告诉他，如果完全不上学的话也是可以生活的，就可以当乞丐。当然，这个工作不是一次两次是要反复多次进到他的血液里。所以等到他上小学的时候，他就已经有这个想法要进最好的小学。当时上海最好的小学是世界外国语小学，他上海科技幼儿园的老师告诉我们至少要认识3000个汉字才能考进去，最好还要学点英语。正常每年8000个学生报名考录取160个，四个班，每个班38个人是考进去的，每个班学号的39 、40是要走大领导的关系，特批进去的。他有了发自内心的这个想法，我先是花了10天时间教会了他汉语拼音，然后给他买了我们家的第一台手提电脑，东芝电脑，买了一套学认汉字的游戏软件叫《娃娃丫丫》买了全套的英文原版的《米老鼠和唐老鸭》。我们保姆的工作就是每天早上起床，只要他玩玩具，就一边给他电视上放《米老鼠和唐老鸭》。其他不玩玩具的时间就是陪他玩《娃娃丫丫》。当然我们夫妻都不陪，因为反复让他知道，学习是他自己的工作。三个月后他成功了他所在的上海科技幼儿园只考进去了两个，我儿子的学号在班里是32号，也就是说他在班里入学考试成绩是第32名。有了这次成功的经验，他就知道了，只要努力什么都能做到，他有了信心。刚进高中的时候，他为了进网球校队，他每天早上起床两个小时，下午放学三个小时在我们小区里免费的网球场认识打得最好的人一起打，后来成功地进了校队。大学的时候暑假他都是一边搞科研，一边拼命地练滑板。现在他的长版 long board dancing是美国和加拿大的冠军，没有对手，只要他参加的比赛都是第一名，今年的世界锦标赛进入前八名。他一个人三年举办了三届加拿大全国比赛，现在是北美地区最有影响力的比赛之一下面这个是他主办的第三届加拿大比赛，有十个赞助商。,就只靠自己一个人的努力，本科毕业前实习过多个大厂，拿到字节跳动，网易等多个大厂offer。看到这里是不是应该算比较努力了？我知道我其实算不上计算机系最厉害，最努力的同学，但是当我毕业后看到这个知乎上的这个问题，脑海中回想到当年那么努力的自己，心里是真的如翻江倒海，五味杂陈。一个从十线小城市出来，没有优渥的家境，没有过人的天赋，没有从小就受到精心的培养，良好的教育的普通人，，大学计算机系的同学努力一些的，要么只专注于比赛论文成绩绩点，保研出国，要么只专注于计算机技术毕业拿到大厂offer。像老学长这样两方面都有一些经历的，应该是比较少的人。同时一路走来，我也踩过不少坑，走过不少弯路。既然问题是如何学习的，那么我也作为一个过来人，给计算机专业学弟学妹们写一写计算机专业学习的一些经验。我会从校内学习，尤其到校招各个技术岗位的求职学习都抽空写一写，无论你现在是大一研一还是大四研三，真心希望下面的内容都能帮助到你们。很多同学发私信给猪学长求一些计算机学习的首先相比于其他大部分专业，我真的觉得计算机计算机是真的可以通过努力改变命运的专业。其他大部分的专业，大学里主要的优秀就是学好专业的课程，取得一个优异的成绩，然后再参加一些专业相关的项目比赛，或者本科能有一些科研论文，就足够代表这你在学校内很优秀了，毕业无论找工作求职还是继续升学深造都足够了。但是计算机专业真的特别不一样。计算机专业技术岗位的求职几乎跟校内的成绩没有什么太大的关系，甚至可以说校内的学习成绩对于找工作来说几乎真的没什么用。产生上述现象的原因，就是国内的计算机专业课堂上所传授知识，跟企业里的面试官要求的标准相差太多了。甚至计算机专业还会出现很多奇葩的现象，就是成绩比较不错的同学反而求职并不成功。我甚至见过一个985大学，计算机科班，专业里排名前几名的女生，面试连一个最基础的但另一方面，我还见过有的同学，大学几乎不上课，挂科无数，学校里所有的活动都不参与，只专心低头学技术。最后毕业的时候成功拿了很多大厂offer。于此同时浙江省有很多双非本科的学校，ACM校队实力超群，每年都会有很多能力超强的选手在ACM编程比赛上摘金夺银。但是尽管他们并没有非常牛的学历，甚至有些选手校内成绩也一塌糊涂，但是并不影响他们毕业找工作时疯狂收割offer，甚至本科就可以进入谷歌微软等知名外企。也正恰恰因为如此，计算机专业也是不限出身，不看成绩，最可以通过努力改变命运的专业。金融行业一直流传着一句非常有名的话:如果你是金融专业，普通本科的同学，那么毕业很难进入头部金融名企去工作，而只能是去卖保险推理财。但是计算机专业这些年来双非本科进大厂的故事每年都在上演，只要你肯努力，一定会得到回报。我的大一在其他同学还在游戏中疯狂战斗的时候，我做了到了大学的时候几乎每个人都会迷茫，我也是一样的。我的开头有写到我在大学里非常非常的努力，做了很多很多的事情。我在大一的时候，也跟所有普通的新生一样，面对崭新的大学生活，各种各样眼花缭乱的社团，并不知道在大学里该做什么。这时候我选择走出寝室，去多结识学院里很多优秀的学长学姐们。通过一两个月的时间，我就发现真正厉害的学长学姐们都特别的忙碌且低调，他们一般并不在各个社团里抛头露面，当什么部长团长，而是都把时间投入到非常重要的事情上。但是，当你真的找到他们向他们请教问题的时候，他们都非常的友好热情而且热心，告诉你很多大学里关键的事情。我在大一上学期的时候就认识了我们学院当时大三拿到国家奖学金的优秀学长，并向他请教很多经验。很早就知道了也正是因为我在大一就知道了很多信息，所以我才能早早的准备，因为知道自己不是天才，就只能比别人更早的行动！我看了这个问题下面的很多回答，都推荐了很多各种各样的巨厚无比的计算机类书籍或者非常高深的项目。但是我觉得对于计算机在校的学生来说，首先最关键的就应打下坚实的编程功底，提前尽早扎实的掌握算法与数据结构基础。：如果你大学里想要超过很多同龄人，在成绩比赛等加分方面超过别人，大学计算机专业里有非常多程序设计类比赛都是非常有含金量的。如果你能在大一就多刷一些题目，打下坚实的编程基础，绝对可以让你在大二大三在各种别赛中崭露头角，最后大学里各种评奖评优奖学金都不是梦。：如果你有意向大学毕业进入高等学府继续深造，那么无论你是保研还是考研。现在国内著名的计算机高等院校复试均有上机：随着国内互联网行业的发展，对编程人员求职者编程能力的考察越来越重视。如果你以后希望去外企工作，你会发现外企非常注重对求职者算法与数据结构基础，编程能力的考察。国内互联网早些年可能不会要求职者面试时编写程序，现在几乎各大公司面试都会模仿外企的模式，考察求职者的编程能力。很多面试题背很多，很多开发框架了解多少，面试造的火箭对你以后做的工作不一定影响很大，但是你的编程功底是否扎实直接影响了你以后的工作效率。如果你没有通过编程题目的考察，几乎很难通过心仪公司的面试。自己虽然不是ACM选手，但是也同样深知打好扎实的算法数据结构基础的重要性，在大一早早的就开始刷题。让我之后在大学中的各种程序设计类比赛，保研复试机考，大厂求职面试都受益匪浅。说完了重要性，那么该如何做呢？学长之前在工作闲暇之余随手回答过一个关于编程的问题，没想到帮助了很多的同学，收获了800多个赞同，这里我就不重复写了，如何做可以看一下这个：我们大学中大二的课程是非常非常满的，因为自己大一就定下了要拿国家奖学金的目标，所以在专业课程方面丝毫不肯松懈，不仅不能轻易翘课，就连平时作业都需要尽可能的都高质量的完成。与此同时我还给自己计划安排了大量的校内项目，国内比赛要参加。我是一个非常喜欢早睡早起的人，我的本科室友们都是会玩游戏到很晚，早晨起得也晚。我为了不打扰他们，同时又不让自己懒床，我天早晨都定两个闹钟。一个是手机振动放在枕边:一个是金属闹钟放到床下桌子上：这样每天就能05:20被手机振动叫醒，同时因为10分钟之后，床下闹钟就要响了，自己还不能贪睡。这样就能做到，既让自己早起，同时又不打扰到室友。同时起床之后洗漱完毕，我也会静悄悄的收拾好书包，然后迎着6点的清晨第一个冲到自习室。几乎大二的无数个日子每天都是在这样的晨曦中开始。因为自己要参加很多的计算机类比赛，大学中的比赛主要就分为程序设计类比赛与软件设计类比赛大类。自己在大一打下一定的算法基础之后，大二又阅读了很多算法相关的书籍:比如非常经典的还有蓝书，有一段时间我对图论相关算法特别痴迷，觉得紫书里面题目还太少了，就买了蓝书去专攻图论相关算法题目。另一方面也是为了后面要参加的算法比赛做准备。蓝书里面有大量的不同算法专题的ACM经典例题与讲解！巫神的挑战程序设计竞赛，这本书也是非常棒的！里面分为不同章节，由浅入深的介绍各种算法。最关键的是，里面给出的很多算法模板都非常非常的经典。是一本不错的算法比赛学习书籍。其实此刻在写这些的时候，回想当年的自己也是觉得走了不少弯路。当年因为我本科学校是垃圾弱校，学院根本没有ACM队伍，其实上面这些书籍的内容有些偏深了，比较适合ACM选手。但是作为普通的计算机专业学生，我当初花了好多精力练习的很多偏深，偏难，偏怪的题目其实后面也不太常用到了。还不如多刷刷然后还有剑指offer上面这些书籍有需要的，这里先分享给同学们：我是在大三时候才知道剑指offer这本书的，其实上面的那些ACM级别的算法书我都阅读过之后，在这期间，我一直活跃在各个oj平台上，然后积极参加各种算法比赛。我贴我一直比较喜欢，一个冷门一点的oj:哈哈当年的账号都已经找不到了。同时因为项目比赛我不太喜欢依靠别人，抱别人的大腿，所以一般我都是自己一个人是队伍中的主力。大二那一年我涉猎了非常多的不同方向的软件开发技术，几乎比赛需要什么，我就立刻学什么，然后就开始上手开发。搞过玩儿过Android ，为我当时还在上小学的小弟开发了一个数学算数训练小游戏的App。同样不仅参加了一个小比赛，而且同时还作为了java课程的期末大作业。我记得当年好像是用安卓写了一个小的游戏机app，里面有别踩白块，上面这些书籍与项目如今都免费分享给同学们：然后同时写过web，搭过电商网站......这其中有的是自己对技术感兴趣，有的是项目比赛需要。回忆起来最有趣的事情，是我曾经还花了一个通宵的时间写了一个哈哈哈，但是我当时一晚上写游戏脚本赚500块钱的事情还是在学院里传了很久。因为自己要参加的比赛，项目太多，有时候当比赛与期末考试周赶到一起的时候，简直就是如噩梦一般的存在。单片机期末，通宵到天亮。还记得当初大家都觉得单片机好难好难，我好像是全班为数不多把功能都实现的。我只记得我大二那一年课真的是巨多巨多，然后真的是好忙好忙。但是努力的付出终究是有结果的！！！当大二下学期结束，大二一年的成绩几乎满绩点4.0，同时辛苦很多时间参加的非常多的比赛都有了收获。然后终于等来了我们那年的国家奖学金的评选。按照当年我们学院的规定，学院每年有四个国家奖学金名额，大三学生分配三个名额。只分配给大二学生一个名额。我当时怀着忐忑的心情像辅导员提交了申请表，因为当时并不知道系里其他同学的实力情况如何，自己能否当选。当评选结果公布，我在公示栏上看到了自己名字的那一刻，我感觉一切的付出都有了结果。还清楚的记得当时每个公示的时候，我的个人信息是跟三名大三的当选的学长学姐并列在展览栏里，我大二的履历栏里的经历就和他们大三时候一样多。当我踏入大三年级的时候，我的成绩已经在专业排名里比较靠前，综合素质排名全系第一。虽然我们学校非常差，保研名额不是很多，但是只要自己大三正常上课，自己不作死，几乎保研是十拿九稳的事情了。因为自己真的大一大二太辛苦了，同时也实现了拿到国家奖学金的这个目标。自己原计划在大三可以休息一下。但是学长得知的一个消息，彻底改变了我的整个大学轨迹。因为我本科的学校是一个垃圾本科，没有很多985名校那些学生自带光环的学历。之前一直觉得这样的学校是不可能有机会进入阿里腾讯这样的大厂的。但是自己大三的某一天突然得知，自己上一届有一个一直非常低调的学长毕业拿到了阿里巴巴的offer。自己永远记得当时自己那个惊讶的程度，在那时的我眼中，垃圾本科学校跟阿里腾讯这样名企是根本毫无关联的事情。然后我就详细跟这个学长请教了好久好久，那个学长人非常非常好，耐心的跟我说了好多他的经验以及准备过程。那时候我才刚刚知道什么是互联网校园招聘，什么是大厂求职面试，什么是秋招春招，才发现校招技术岗所考察的东西跟学校里学的东西几乎完全不一样。自己虽然是学校里“成绩优异”的好学生，但是竟然与企业里要求相差甚远。同时学长也告诉我，去大厂实习非常的重要，不仅可以学到学校里学不到的企业里真正的研发技术，同时还可以作为简历上很大的加分项。我时隔好久再次又在大三走进了考研自习室......跟着所有大四考研的学长学姐一起，他们准备考研复试，我开备战大厂的实习。我在大三上学期花了看了首先最开始的时候，我先通过校招面试题了解到，原来想要面试一个大厂技术工作岗位，原来需要在一个方向上深入的精通，而不是像自己之前那样瞎搞，所有方向都会一点儿，并不深。我就开始锁定的方向上大量的，先结合面经，然后深入的看很多很多的书。因为计算机相关书籍实在是太贵了，就一本一本的去网上寻找电子版的。你们可以看到我的截图里，每个书籍前面都标明了页数，这些都是我自己认认真真阅读过的书籍，并不是像其他人随便搜集到的资源。然后项目方面，我花了好几百块钱在某宝上买了很多的优质的项目课程：上面这些书籍与项目如今都免费分享给同学们：然后这块真的是采坑太多了！！！网上好多的卖项目资源的都是骗子，买到手里之后发现项目都是非常差的那种，技术也非常落后。这块真的是踩了好多的坑，浪费了不少的钱。最后终于找到了一些跟自己方向一致，比较优质的项目。上面的每一个我几乎都是先点进去大致了解，然后最后挑选出最好的几个项目自己深入去学习，同时在电脑上配置相关环境跟着实操，以此来充实自己的简历。然后开始准备在网上投递简历，寻找实习。原本以为普通垃圾本科的我不可能又大厂会看上我的简历，真的没想到在投递后，竟然有很多公司的hr电话联系了我，其中还有很多大厂。在之前我那个时候，好多公司的日常实习还都没有远程面试，都要求必须去现场面试。因为联系我的很多公司都不在一个城市，我只能选择面试机会最多的城市跑过去面试。最后在大三上学期结束的那个寒假，其他同学都回家过年的时候，我放弃了回家，自己一个人跑去了北京面试。原以为自己能找到一个实习就很错了，但是真的没想到最后经过了非常多公司的忐忑的面试后，自己竟然几乎全部通过了，其中还拿到了多个大厂的offer！！！那时候我刚刚大三上学期......当人生中第一个offer进入我的邮箱的时候，我真的不知道我的人生从此被彻底改变......别人的人生我不了解，至少我看到的世界里，我周围所有的同学，同事，小伙伴们都是: 但是如果你能看到了这里，透过我的大学经历你会发现，不仅仅只能低头的努力，越早的掌握信息，越早的找到努力的方向，是远比努力更重要的事情。同时你也会发现我的大学里也走了不少的弯路，我是少数既花时间在国奖保研上，又拼命找工作求职的。在计算机专业这是两种截然不同的维度。，那么你就应该像我大一大二时候，早早的掌握保研，考研，留学相关的信息。像我大一大二那样努力的搞好成绩，然后了解清楚学院内评奖评优的各种规章制度，制定好计划，去实施！，那么计算机专业真的是一个不看出身，甚至连专业都不看的行业。你只需要早早的关注求职，校招，面经，岗位等相关信息。早早的出去实习，学校里的很多无意义的事情，甚至成绩你都可以不用关心！毕业的时候拿到在我后来的读研以及毕业后工作的期间，无数的学弟学妹们都来问我许多非常经典的问题:我在多家国内头部互联网技术面试官就是会认真的去考察候选者的真正实力。我知道有很多有的在ACM赛场上挥洒汗水艰苦努力，有的甚至早早的就在大二从学校溜出来去大厂实习的。而还有的同学身在，都已经毕业了，待在家里的时候才开始到处投简历。无论你现在处在任何阶段，如果你能看到老学长的这篇回答，同时还真觉得有收获，放下手中的手机，关掉电脑中开着的游戏，好好对未来规划一下，我觉得一切都还来得及。最后留下一句我一直特别喜欢，一直用来鞭策自己的一句话，送给大家:....我吐了....就先写到这里吧.....手好酸.....到这里后面老学长的经历还有很多很多，......之后有时间再更啦。上文中提及到的所有如果同学们还有其他什么问题，欢迎在评论区给我留言呀，不忙的时候我都会回复的。然后所有对字节跳动实习，或者求职感兴趣的同学，想找学长内部推荐的，也都统统都可以联系猪学长，记得点一个关注呦 然后对很多同学提的问题我更新一个问答环节！！！在这里我对几个高频的问题统一给学弟学妹们回答一下:看了我这篇回答，很多同学心里应该特别清楚了啊。学校名称，在整张简历上只占4个字！！！！！你能实力绝对跟4个字没关系！！！举一个最简单的例子，如果一个同学是985学校的毕业的，简历上除了985学校几个字，其他空空如也，面试问的问题都不会，实习经历也没有，算法题也写不出来，你觉得他能进大厂吗?如果你是双非的，你能做到这个是我太太太太想回答的问题了，我身边两个部门里工作多年的很多同学从一开始就想当然错了，认为我想要当程序员，我大学专业必须得是计算机，然后大三就开始夸考计算机，然后考研疯狂内卷！！！你可以问问身边计算机科班的同学，几乎所有人校招求职几乎都是靠自己自己学，学校会上一些计算机相关课程，但是那些真的无关紧要啊。同时，真的互联网校园招聘是真的不看应试者的学历专业，因为很多面试官自己本身都不是计算机专业的！！！我之前在网易工作的时候，我亲眼看到我们老大给一个历史专业的同学面试机会，去面试他。我一开始很惊讶，然后我老大说现在其他行业都不景气，同学都是想靠自己努力找到好工作，而且他简历也非常的优秀，不会因为他是历史专业就不给面试机会。现在每次看到这个问题我都只能说非常的惋惜，我前面说的求职不看学历专业真的只限制在互联网校园招聘中。如果同学你已经毕业了，那么你就失去了应届生的身份了。你只能走互联网社会招聘。互联网社会招聘技术岗位非常看重你上一份的工作经验的，如果你上一份的工作经验不是技术岗位，对于部门来说你几乎都不如校招生，所以是很难通过大厂的社会招聘的。至于其他中小型互联网公司能否接受转行的，这个我就不太了解了。,谢邀，没见过贵系/大佬入学的时候还只会python语言，军训的时候就开始看紫书和一本信奥的教材。等我们军训完，大佬已经开始活跃在我们学校的oj论坛上问各种学长学姐问题。我们平时的作息时间是，早上没课就睡到下午，下午没课就睡到晚上。大佬的作息是，有没有课都是十一点睡觉（打cf时除外），八点起床，四年雷打不动。开学两个月有个ACM队新生赛，大佬当时貌似是排第六还是第七，前面都是OI爷。 然后，大佬就开始了疯狂的训练，我印象比较深的就是他每周除了会打leetcode周赛，到了大二，大佬逐渐在acm崭露头角。听说他一般负责写图论，到了大三，大佬就开始收割了。他大三上区预赛拿了一块金牌，建模国赛拿了二等奖，大创也评了省优秀项目然后发了一篇SCI，我记得那个时候看他个人主页的博客有两百篇左右，虽然近百分之七十是题解，但是我看他公开课的大佬大三寒假就去了百度做实习生，大三下的下半学期去了字节做日常实习生，暑假忘了具体去哪了，好像是在字节继续实习，好像是去了大佬最后去了一所美国top10读博了，我们毕业聚餐调侃大佬一个人学了我们四个人该学的东西。当打下这段文字的时候，我又开始怀念那段岁月，怀念大佬在屏幕前纯粹又热诚的身影，怀念他的,在高中，我完全没有想过自己会学计算机，成为程序员。我在大一之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。大一开学，第一门编程语言就是学的 C 语言，怎么说呢，老师讲的，书上写的我都能看懂，但是让我写一个大的程序，我就摸不到头脑。不知从何下手，学了半学期，也只能写写课后习题，算算大一上考完 C 语言后，我便在心里默默念想，这辈子再也不写 C 了，但没想到的是，后来这成了我最爱的一门语言。混到什么程度呢，王者荣耀打了几千场，线代考试前一晚才在 转变大概从大一下开始吧，那时候好几个室友都拿到了奖学金，于是，我自己也开始慢慢反思，觉得这样下去，大学可能就废了。默默的把王者荣耀卸载（当然，后面又下回来了，反反复复十几次。。。）大一下，开始学习此外，还学了一门当时我看来非常牛逼的语言：Java。为啥说我当时觉得它牛逼呢？因为刚经历过 C 语言的摧残，发现 Java有丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用，简直是新大陆。所以我学得很认真，还记得当时看过自己也用 Java 写了不少好玩的东西，比如这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师，Java 也算是帮我解锁了对于编程的兴趣。在学 Java 的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了“精通” Java，我在知乎搜索各种书单，先后看了《Java核心技术卷》《Java并发编程》好几本书，自觉 Java 基础还算可以，不过现在已经快两年没写了，成功转入C++阵营。而且我有个习惯，就是每天早上基本都是六七点起床，八点多对我已经算赖床了，所以和我室友显得有点“格格不入”。早上起太早的话，他们还在睡觉，我在寝室写代码的话，难免会发出各种声音吵到他们，尽管我做什么都是蹑手蹑脚，生怕发出椅子摩地，或者碰撞的声音，这让我也觉得不太方便。所以，后面没有课的早上我一般都去图书馆五楼自习室了，在那看书，看书觉得烦了，就写会代码或者刷刷知乎，看看博客。这是被我长期占领的一个位置，因为书太多，不方便每次都背来背去的，所以就找了个考研自习室。就这样从秋天，到了冬天，桌子上多了围巾手套，还有 那时候，每天上午的盼头的就是早点到中午，我就可以去吃饭，然后去学校散步了，我经常把中午饭菜拍下来，感觉蛮有意思的哈哈哈：一般我都是赶在中午下课高峰之前去吃完，然后去学校绿荫道散步大二时，在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到里面的汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C 语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。后来在知乎大佬的指引下，为了看懂这本书，去看了重学了 C 语言（主要是指针和内存），由于已经学了汇编，指针对我再也不是问题了，同时看完了《C和指针》、《：书单：大二那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，明明 16 年大一时客户端安卓开发还挺火的，到了 17 年各种机器学习、神经网络就席卷而来。不能不感叹，IT 行业日新月异呀，不学习就可能被淘汰。当然了，我也不例外的加入了，先后看了些很多学弟学妹在问怎么咨询、提问，最近我开放了我的编程学习圈子，欢迎加入，不管是计算机转专业，还是大二面临分流、大三找实习、校招、写简历、Offer 选择等都可以直接问。加入星球后，还可以找跟着做了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理，再加上自己数学也学得不太好，这让我学得很没底气。于是机器学习之路也止于大二。大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后自己又跑去学 Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、知乎回答、抢课脚本，玩了一段时间也没太大兴趣了。时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索「操作系统怎么学」，不得不说知乎上各位前辈大佬的回答对我的指引作用极其的大。顺着一堆回答，我发现原来还能跟着别人写一个 于是我买了一本我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入 C 语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。这本八百多页的书，我花了两个月时间啃了五百多页，一下课就跑去图书馆，在我的虚拟机中跑 当时我真的对这个入迷了，为了写 还很奇葩的把我 QQ 签名改成了 jmp 0x7c00(PS: 这句汇编就是跳转到 0x7c00 地址，BIOS 开始引导操作系统于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书（也非常推荐大家尽早去刷一下牛客网，上面很多大三、研二的正在找工作的学长学姐们分享的帖子，早点接触这种就业的氛围，自己也会更加有动力去学习，也知道学习的方向，另外上面可以针对校招刷算法题、刷SQL等等，还挺方便的，现在很庆幸自己在大二的时候就在刷这个网站：于是在大三左右开始了非常标准的 Linux C/C++学习之路：前前后后看了顺便还看了点 Muduo 源码，自己模仿着基于 Epoll 写一个 （PS：知乎上有朋友问我是如何看完这么多书的，其实在之前的文章中就写了，看书我会有选择的挑章节看，不会从头看到尾的，而且大三开始课就少了，我基本就在刷这些书，其实时间还蛮多的？毕竟我也没参加什么社团、学生会之类，也没女朋友。。。那时候会每天记录看书的进度，感觉特别有劲：书看得越多，其实你越能找到自己的方向，大三上我就给自己学习定位：深入C++语言（多线程）+ 存储（学习 Redis、leveldb）+ 网络编程（学习基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注学习 C10K、C100K 这样的后台服务器开发高性能、高并发的解决方法。当然了，还有些到现在还没开始，比如 leveldb 的源码、6.824 的 lab，可能是变懒了......也可能是学习变得不那么纯碎面向技术了，变成面向工作、面向赚钱了哈哈哈。值得一提的是，大三上我们学院有门 System Programing 的课，教材就是使用的 印象最深的便是做 bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是熬夜连着把这几个 phase 过掉的，当然头发也没少掉。当时还在再到后来，我拿到了微信实习 offer，然后顺利转正。在我大三下拿到实习 offer 后，开始做一些国外计算机课程 lab，一方面有钱赚，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些 lab 有些很有意思，对提高基础和编程能力很有帮助。在这里列举一些我做过的觉得有意思的 lab（之前有篇文章写过）：这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 就是版本管理系统，类似 这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多，但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种网络拓扑，可以调节网络 丢包率 Loss chance。当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：这是带去图书馆自习室的书（常占位置）这是毕业整理的书：买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。当然了，我还有自己整理的电子书库，绝不是在网上那种打包下载的，而是自己需要学到某个方向知识的时候，需要看了，去网上挨个找的，最后汇总而成。这部分我是会不断把它完善的，当成自己的小电子书库，不多，但贵在精。：最后真心想说一句，滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”。逐渐构建起属于自己的计算机知识体系，然后选择一个专业方向不断专研。 在这顺便推荐一个 大家觉得不错的话，记得帮我 ,上篇为什么这节标题是屠龙术，因为我认为读这些书能让你了解计算机科学的本质，掌握屠龙之技。没看错，就是汇编语言。为什么是汇编语言，因为我认为现在大家对这门古老的语言都不重视。这本书很多人应该都知道，是经典书。能让你对整个计算机硬件和软件体系有所了解，建议计算机从业者收藏，反复阅读，常读常新。这本书是我大三上操作系统这门课时看的书，当时上课用的教材不是这本，是我在图书馆看到的。当时看后觉得讲的比较详细，就自己买了本当作教材使用了。这本书是我大二上学期上计算机网络这门课时买的。同样学校教材也不是这本书，是自己在图书馆查资料时发现的。这是大二下学期我们上离散数学课的教材，主要讲计算机中的数学知识。这是大一下学期上数据结构课时我搭配的一本书。同样上课教材不是这本，是我在图书馆发现的。这是大三下学期学数据库课时我搭配的一本书，同样不是上课教材，是在图书馆发现的。这本书是我们大一上C++课程时的教材，发的教材其实是英文版的，这里我给大家介绍中文版。这本书是我研究生时看到的课外书，也推荐给大家。介绍完可以屠龙的书，再来讲讲自己读过的一些比较好的书。这些书可以提高你的专业技能，让你的职业道路走的更扎实，更长远，所以我称为乘龙术。C语言之父写的，入门经典书籍，建议大家作为C语言入门的第一本书。可以作为C语言工具书，也可以作为入门。深入了解指针，看完以后对指针不再害怕。看完后可以避免C语言开发的一些坑。这是我在大二学C#时候看的一本书，里面的代码我全部在电脑上手打了一遍。如果想对Windows系统有更深的了解可以看看这本书，我当时在图书馆看到了这本书，讲的也挺不错。Linux入门书籍。我记得在大一下学期，有段时间自己痴迷安装各种版本的Linux系统，到最后虚拟机上把当时各种Linux发行版都装全了。这本书我没有看完，但里面的讲的算法都很不错，想对算法有提高的同学这本书一定要看看。这两本书是在上Java课时看的，同样不是我们教材，在图书馆发现的。讲Java并发库的一本书，这本书强烈推荐。自己看这本书的时间很晚，是研究生找工作时候看的。同样是讲Java并发编程的。Java并发编程实战相对来说全是干货，看起来可能比较晦涩。这本书可能看起来更通熟易懂些，但是没有JavaAndroid开发入门书籍。因为我当时学Android时候这本书还没有，所以自己不是通过这本书入门的。这本书强烈推荐。是从Android初级向中高级进阶的必看书籍，里面讲的知识点都很好。重要的是Android面试会问到很多这本书里面的知识点，找Android开发必看。从源码分析Android系统的书。自己找工作时候反复看了很多遍，面试时候也问到了一些知识点，找Android开发的也可以看看。从Android向后台转型过程中看的一本书。比较全面的介绍了Java Web知识，可以当作入门辅助书籍。学习Spring时候看的书，主要介绍了官方文档的知识。讲的很全面，准确度也高。Spring MVC入门书籍，可以快速上手Spring MVC。学Java Web离不开Maven，这本是Maven入门书籍，讲的很全面。找工作时看的书，主要讲网站从小到大发展过程中技术架构的演进。看完以后你就知道为什么一个淘宝首页会有那么多程序员维护了，也能让你有理有据回怼对产品提出的“给我做一个淘宝，美团”的需求。主要介绍大型网站建设过程中使用到的一些技术，可以作为技术参考书。从中间件角度介绍大型网站的建设。大二上设计模式课时看的书。当时的教材晦涩枯燥，在图书馆闲逛时看到了这本书。这本书以讲故事的形式逐一介绍了23种设计模式，生动形象。还有代码示例，可以变学边实践，是入门设计模式的一本好书。大四时候看的书，可以学习书里提到的编码技巧。大四时候看的书，同样可以提高自己的专业素质，构建专业的编码风格。大一时候看的一本小说。讲了一个程序员大学、工作、创业、以及爱情故事经历的励志书籍。我在手机上看完的，看的时候热血澎湃，让我在大一就对程序员这个职业有了一个初步的认识。这本书大家应该都听过，是我在大四时候看的。当时实体书比较贵，图书馆也没这本书，我在网上下载了电子版，花了两天时间趴在电脑上看完的。可以学习一下乔布斯创新和执着的精神，苹果有如今的成就不是偶然的，与乔布斯的做事风格有直接的关系。研究生时从图书馆借的一本书。是一本互联网发展的历史书，看完可以对互联网的历史有一定的了解。硅谷教父写的书。我在研一时候看到的书，可以一定程度提高程序员的情商，财商。这小节的标题是,,,,,,,,,,,,,,,
如何用我奶奶也能听懂的话来讲什么是 debug？,,你奶奶蒸的馒头又大又软，你蒸出来的又小又硬，咬一口还粘牙。（你试了几次都是这样，（拿着你奶奶给的配方看了几遍也没看出来什么问题。（于是你把你妈喊了过来，让她看看原因。你妈也是蒸馒头的老手了，瞅了一眼案板上堆完面团的痕迹（你一拍脑袋，是这样的！于是你又试了一遍，揉完面后放了十五分钟再上锅。（你给你奶打电话，她说蒸馒头重要的就是和面、发面、揉面、醒面、出锅这几步，你每到关键的步骤都给我打视频，我来看看（你开始重新和面，你奶在视频里看着。（一直到上锅你奶都没有发现问题，她也纳闷了，她就住隔壁单元，于是一溜烟跑到你家，说：我来操作。（馒头上汽后蒸了十六七分钟，你奶把火一关。这时你急着要开盖子看有没有蒸好，手刚伸过去就被你奶打了一下：要焖个五六分钟再开盖，你现在一开盖馒头不都缩了？（你恍然大悟：原来如此，后面就交给我吧！（果然，这次的馒头蒸得又大又软。你想了想你妈和你奶教你的，记在了配方边上，以后就不会再犯同样的错误了。（,不是，很多答主都忽视了一个问题，我奶奶  就不能是还有，你怎么敢假定题主奶奶性别？他奶奶就不能是,早上，奶奶在狗子胸前的篮子里放了一点钱，让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到一半迷路了。于是带着狗子重走一遍路。。解决路由问题。。第二天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到早点摊。发现油条买光了。。于是奶奶加了一个错误处理。在狗子胸前的篮子里放了一张纸条。写上如果没有油条，就买大饼。。第三天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到早点摊。发现钱不够了。。于是奶奶加了一个错误处理。在狗子胸前的篮子里加了一个检查条件。检查钱数。。第四天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，没有买到油条。至于为什么，狗子不会说话。。于是奶奶就开始debug。。首先跟着狗子去买油条。结果狗子走到早点摊。发现油条涨价了。。于是奶奶增加了金额分配空间。在狗子胸前的篮子里加了钱。。第五天早上，奶奶在狗子胸前的篮子里放了一点钱，再次让狗子去买油条。结果狗子出去了又回来了，买到油条啦。。。。调试结束。。。,这个主要得看令祖母高寿几何，一生所治之学分属何业。如果老人虽年逾古稀，但1973年之前就由自动控制或无线电等专业毕业后被分配去了备注：,翻出祖传大米缸，用祖传米碗舀出一碗长了虫的大米，恭恭敬敬端给奶奶，说：“奶奶，今天下午我做饭，你帮我debug一下”,“奶奶，为啥您当时找我爷爷不找门口村长家儿子。”“村长家儿子丑”“对喽，这就是debug”“奶奶，为啥我二婶不招人待见？”“她抠门”“对喽，这也是debug”“奶奶，今天的包子没昨天的好吃为啥？”“没放鸡精”“对喽，这还是debug”,奶奶们不关心那么detail的事情，你就说是“大城市，好工作，工资高，有前途”，就完事了。“呵呵，我的大孙子真有本事！”,去田坎坎拔草秧秧。注音：kei tián kàn kaner fá cào yāng yanger含义：去田地里拔杂草。注：假定你奶奶是四川人。,问ai就行了gpt3.5：gpt4.0：,大家不要看不起这位奶奶！小心到时候回旋镖扎到自己身上！万一这位奶奶Github就算以上达不到，万一题主奶奶是一位AFOer/AFACMer呢？那不是班门弄斧吗,贪官就是bug，debug就是把他们揪出来开除党籍该坐牢坐牢该枪毙枪毙。,您孙子写文章给电脑看，不知道哪个句子写错了，电脑看不懂罢工了。得把几本书厚的文章重新找过来一句句查——对，错一个标点符号也不行，这周不回来吃饭了。,那你得先把你奶奶的简历和Github主页贴一下看看情况，不然我们怎么知道怎么说她听不听得懂,奶奶你看，这米生了米虫，就要想办法把米虫搞出来。我这玩意儿也是，搞不好就有些小毛病，我们也叫它虫，要把它找出来。,奶奶哪管听不听得懂debug啊奶奶只是想多看你、多听你说两句话罢了,打毛线漏针了，要补上。也不是不能穿，但是有时候会漏风，也容易扯烂。所以就拿来对着太阳看哪里透光明显，仔细看那里的针脚，找到漏的地方，但不能拆线，把毛线穿进去合拢。这件织物就是被缔补过了。,bug就是虫子，电脑里也有虫子，所以电脑会工作不正常。debug就是把虫子都捏出来，电脑就可以正常工作了。,程序员的比喻就像老太太的裹脚布——又臭又长，还讲不明白debug就是“挑毛病”，工作没干好，找找原因，解决一下，这就叫debug直说很难吗？？？？？？苦程序员已久当年学java，问学长，什么叫父类子类，学长：父类就是我有一条内裤，你是子类，你就也有一条内裤，你有一双袜子，但我没有一双袜子，懂了吗我：懂了（内心：懂个p）回去翻书课本：子类会继承父类的全部特性（记不清了），同时可以拥有自己的其他特性，这些特性父类并不会拥有。我是学数学的，计算机比不了你们，但是我知道“特例不代表全部”，你们有举例子的精力，直接给一个全集的定义多好，然后再举例子才有用啊,在她包饺子的时候，赶跑来捣乱的曾孙子。,自行车补胎，先要找到哪里漏气，弄盆水，把轮胎充上气放水里，漏气的地方在水里会冒气泡， 然后在这个位置贴一片补丁，这个过程就是debug。
编程新手如何提高编程能力？,本人国内某重点大学渣渣专业大一在读，专业对编程要求较高。大一刚学编程（C/C++），感觉有点吃力，求指点。我们平时练习都是做的OJ(老师负责选一些题让我们做，也可以自己随便刷），一些题还好，可是有些题难度感觉很大，有时好不容易有了思路，转化成代码都要老半天，别人一个小时就搞定的事情，我可能要花三四个小时，而且我本人比较粗心，经常被一些小错误坑了很久。最后就算千辛万苦地做出来，感觉也不值得，毕竟时间消耗太大。还有些题一些思路也没有，但是其他人（也是新手）就能搞定，基本就是别人过10道我过7道的水平。这个时候就会发现智商上的差距真的无法弥补。所有这一切，都让我对自己的前途产生了怀疑，这样下去，我可能只是一个中等水平的苦逼程序员，无法进入顶尖行列。我知道会有人叫我说要努力，可是怎么做？刷题？想看个答案都找不到？问人？哪有那么多人闲着没事干，而且解答正确，使你能够理解？做产品实操？写个两百多行的代码就已经快乱得不行了，不行。看书？终究只是纸上谈兵，没有实际操作的感觉。求救各位大神指点迷津，看看本人是否要转专业？（补充说明，其实我对IT还是比较有兴趣的，特别是人工智能和图形学（游戏开发），也有过很多好的app点子但苦于能力低无法实现。数学自我感觉良好，主要是初高中搞过点数学竞赛，成绩也还可以，所以基础算是比较扎实，但是不想去数学系。）话说回来，我没什么理想和目标，可能还在寻找中吧。总之，请各位提出点建议，关于大学的任何方面都行，学习、生活、理想、交际（谈情说爱的就算了），指点迷津，先谢谢各位了。,"学习编程, 既要考虑诗和远方, 也要考虑眼前的苟且。每年像你这样的学生不计其数，大一刚进校，一门C语言，学校发一本垃圾C语言教材，按时上课，老师在那里念念PPT，讲讲浮点型变量，有的学生学的一头雾水，开始怀疑自己，准备转专业，放弃计算机，有的学生学懂了，写程序一直报错，开始怀疑自己，有的学生觉得教材写得不好，去书店转了一圈，买了三四本C语言的书，但最后厚厚的灰尘盖在了书上，再也没翻过。这三种学生，如果继续这样，最后都要凉凉。马克思教给我们要具体问题具体分析，那我今天就来分析一下，计算机专业的学生，到底应该怎么学计算机，才能效果最好，进步最快。如果你要学习物理，我推荐你顺着物理的发展史学习，先学习牛顿经典物理，再学习热力学，电磁学这些不那么经典的，再学习相对论，量子力学这种彻底推翻经典物理的，再学习但是学习计算机，真的适合这样吗？先学习电路，你要是这么学，必然爆炸。计算机的学习最好应该是这个顶，顶到什么程度？有人说，C语言就是高级语言了，从C语言开始学就好了。但是如果让我教计算机，我第一节课教学生们的，绝对不是C语言，而是教大家如何使用我还要告诉大家如何使用如果可以，我还会教同学们如何科学上网，让英文编程环境成为习惯，让遇到问题google，而不是百度成为习惯，让大家在第一节课上完，就能进入这个世界编程大社区，哪怕什么都不懂，你也能保证所在的社区，就是世界程序员的大家庭当你进入Github，看着各种有趣的项目的时候，相信我，你的视野就会在此为起点，快速打开，不断增长，进入一个良性循环。而当刚上大一的学生第一次进入有人会这样说我：“Github还用教？刚才你说的那些学生，如果能被C语言的困难打倒，那他也不适合做程序员，转行正好。”像这种话，我想说，在很多时候，佛和魔仅在一念之间，你在最开始的时候点到了，给了他引导，他以后可能会马上进入一个正反馈状态，如果你没点到，马上可能就负反馈了。我一直觉得国内的计算机专业的学生很可怜。当当Google搜索可以精准定位你的问题的时候，学生们还在为百度搜索出来乱七八糟的搜索结果无可奈何。你用百度，用中文搜索，你连但是你可以去问问，做一个调查，有多少大一结束的学生，没上过你再统计一下有多少比例的大一结束的学生没用过google，并且对其用不了的原因不太清楚？有人说，刚开始直接学了python这种很简单的高级语言，以后遇到C肯定被吓跑了。事实恰恰相反，在你了解到python的性能问题时，你才会了解python是在你在编程语言中涉及到了“当你发现某个算法，人家的实现比你快很多的时候，你会自然地去思考，为什么我的程序运行这么慢，然后发现对方用的数据结构与你不同，甚至用了一些算法，比如有了需求和疑问，再去学，这样一个过程，是学习的金钥匙。你指望学生自己打开视野，但是那些自己打不开，需要你帮忙开下门的呢？在你的视野被打开之后，我还希望你懂这些：比如你学C语言，与其去做那些OJ题，不如在github上找个C语言项目，然后阅读，理解，修改，模仿。个人认为在知识爆炸的年代，两不要：（真实情况：经典教材都能下载到免费pdf，语言，框架，文档往往已经写的很好，而且最新，github上有无数优质开源学习资源）三个要：我曾听过一种论调，说程序员不会用命令行也没关系。我想说的是，第一，这个世界没有那么美好，什么都要给你做一个图形界面，第二，对于命令复杂，命令多的工具，就算做出来图形界面，往往比命令行更难用，而且命令行可以用命令行脚本进行批文件自动化执行。两个原则：我希望所有程序员明白一个事实是，”我会什么”这句话，其实是最没用，最虚飘飘的东西，你说你会java，python，c，但是你要说，XX著名项目作者，那你就牛了，我也不需要让你证明什么了。大概随便说了点，还有很多内容可以补充，先就这样了，谢谢大家。",其实很多人学编程都会遇到困难，我觉得其中一个根本原因是他们没搞明白学编程到底是学什么。编程不是一种知识，而是一门手艺。我们从小到大的学习都是学习知识，流程一般是课前看书预习，上课听讲，下课做作业，然后复习考试。但是学手艺可不是这么学的。我们先拿游泳举例，游泳不是知识，而是技能，也可以算门手艺吧。需要预习吗？需要上课听讲吗？不需要，因为两岁小孩都能学会游泳，他们连话都不太会说呢，怎么可能听课预习呢。游泳是通过在水里的练习，教练手把手地传授动作，一点一点提高熟练度学会的。我们再来看看弹琴，学钢琴一定要有钢琴，音乐基础知识也是老师在练琴间隙传授的，并且一定会结合练习，另外练琴时间是很重要的，必须保证一定的练习量，有些理想远大的琴童练琴时间可以用惨无人道丧心病狂来形容。千万别把编程看作知识，计算机科学是知识，但是编程是手艺。既然是手艺就要用学手艺的思路去学习。以动手练习为主，看书学习为辅，甚至极端点，初学的时候除了看必要的文档都可以不看书，等有了一定编程基础后再去看书，看完书立刻动手编程去验证书上的理论知识。练习一定要循序渐进，把手艺分解成几个简单的动作，反复练习直到熟练，然后再把基本动作组合起来练习直到熟练。拿C语言举例，比如从认真写好一个Hello world开始，然后去熟悉 if  for while 等基本关键字，然后熟悉字符串操作，内存操作，练习查找 排序 找个师傅，手艺的一大特点就是自学是很慢的，而且容易走弯路，而有人手把手教要快得多，手艺有很多细节，实际操作经验，需要去体会感受的东西，这些细节书上基本不会有。坚持做大量的练习，以代码行数为例，每年50000行左右是比较一般的练习量，有毅力的话可以挑战10万行。（有人说代码行数不代表什么，行数多不见得程序就对，写得好的程序代码很少blablabla，滚，去跟朗朗说去，告诉他其实不用练那么长时间琴。）回忆下自己当年是怎么学会骑自行车，学会游泳，学会打篮球的，按照那个思路去学编程，而不是用你学大学课程的思路去学编程。记住，编程是手艺，不是知识。＝＝＝＝＝＝最后再强调下，对编程能力本质最好的比喻就是弹琴。但是有了编程能力还不能算优秀的程序员，优秀的程序员是作曲家，他们不仅能想出优美的旋律，并且能弹奏出来，就像优秀的程序员不仅能想出优美的算法架构，而且能把它变成可执行代码。你很难想像作曲的人不会任何乐器。很多人的问题是想当作曲家却不肯下功夫去练琴。打个预防针，估计有人会举出反例说我就知道某某某作曲家不会乐器（其实真的有）。我要说的是，等你成了公认的著名作曲家之后再说自己不会乐器，那你牛逼。在成名之前就这么说那是煞笔。,当你提出这个问题的时候，总有人会告诉你，你应该学习这个，学习那个，亦或者是刷题根本没用，你应该去做项目，亦或者你看这个视频没什么卵用，你应该自己去实现一遍，亦或者是你应该使用xxx框架，xxx语言，做一个xxx系统，这样你才能学到很多。我想说这个问题可以做如下分解，编程但是很不幸，你的生活中不会有这样的老师傅，你-----补充-----有人问在哪里看答案，这里给大家提供一个看答案的网站，是我觉得比较高质量的答案：-----3月21日补充-----看了评论里有人说，说说另一个问题,其实这是新手程序员的普遍问题，如果你中招，我只想说很正常。除了其他帖子里强调的技能锻炼，其实另一个大问题是编程能力测评。虽然大学也会诉诸考试，也有厂商的认证考试，但这些测试方法都只能解决评价知识水平的问题，没有办法评价真实的技能水平。交规背的再熟也不能开车上路，怎么帮不具备能力的新手，真正获得编程能力，迈进软件开发的大门？老美一直在寻找一个可量化的科学方法，直到都知道熟能生巧，技能是练出来的，但具体练什么，怎么练呢？CMU教授也给出了办法。他们做了一个供学习者练习的虚拟机镜像，可以免费从网站下载：最后，不知道卡耐基梅隆大学的，捎带科普一下：他们是美国计算机四大名校之一（其他三个是麻省、斯坦福、,哇，已经有25个答案了，估计我的不太会被看到。。就针对题主的疑惑说说自己的感想吧~以数字罗列的是我的观点~-----最近我也在刷，刷 Peoject Euler（）。第129题我已经想很久了，一点也没头绪。有时候灵机一动，哗啦哗啦写了3，4个小时，最后发现还是错的，就很懊恼。一方面是觉得自己笨，另一方面是因为我在心中给自己树立了一个假想敌：可能这感觉在遇到挫败的时候会十分强烈。但我要说：（1）（2）-----我有个英国的讲师，是个Java大神。但是！在Project Euler 的第139题那边，我光是讲一元二次方程的求解公式就给他讲了1个小时（本人英语也是相当捉鸡）。最后我做的比他快。如果他也这么想，他一定崩溃了：对此我想说的是：你怎么知道别人是“新手”呢？说不定人家只是“扮猪吃老虎”（形容看起来很蠢但十分牛逼）呢？退一步讲，人的经历千差万别，说不定人家以前就做过这个问题呢？再退一步讲，人家说不定刚好灵光一现呢？再再退一步，（3）（4）（-----我现在还是中下等苦逼程序员，但我不怀疑我自己，因为：（5）（6）-----确实好像大家似乎都不太愿意“浪费时间”，而没有答案更是一件令人悲伤的事情，那么你需要：（7）（8）-----不知道这里要怎么吐槽了。。请大家配吐槽语。。预留空间：（⑨）-----（10）-----我的建议是：（11）（12）最后的最后，如果因为我这个让你坚持下去修成正果了，请一定要记得我哟~祝好！啊嘞嘞，快下班了！走咯~ 报告组织我又成功安利了一些小朋友进入了程序员大军！谢谢大家！~别忘了那个吐槽语~,去每天花两小时写代码，去研读各种去写技术博客，去蹭技术讲座、会议、公开课程。去逛Github，去StackOverflow上提问，去论坛上找技术大佬聊天去参加去尝试自己写一个个人网站，或者开发一个游戏APP。......只要你愿意提高代码能力，有无数种方法能帮到你，但你需要让你的意愿充斥整个身体，并相信能做好。俗话讲，不积跬步无以至千里，新手想要成为高手，疯狂的练习是第一步。编程应该是最能体验prctice make perfect的技能之一，在前期积累的阶段，往往要大量的去刷题、比赛、模仿，才能显得游刃有余。资深码农就像是老师傅，哪个不是键盘敲到发白。可能练习不一定会让你完美，但大量的练习会让你产生人的大脑可以分为反射、思考、记忆三个功能，大脑可以通过大量的反复练习让思考演变成习惯，最后跳过思考只需要反射的指令操控就能完成，从而达到“生巧”的效果。当然作为程序员，练习不是一味的重复，或者去完全复刻别人的代码，每一次练习都应该增加难度，有突破自己认知的成长。这样经过反复的输入、评估、输出、纠正，你会有惊人的变化。记得工作第二年我和组里同事一起参加某个交通数据科学比赛，根据历史数据预测未来车流数据。为了找到好的算法模型，我高强度地开始使用google，翻遍了kaggle、前前后后代码写了有上万行（包括数据探索、新老方案），比赛后发现自己在编程和算法上比以前通透了不少，也知道哪里有宝藏，哪里有大神。这是我编程能力第一次开始突飞猛进，发现编程真的是一门熟能生巧的手艺，不管是比赛、项目、习题，哪怕是抄代码（初学），都会让你快速进步。但真正想要成为大佬，还得要勤于思考，不然久而久之会变成没有灵魂的代码机器。以学习Python为例，有很多网站可以提供练习精进的资源。Github是全球最大的代码托管网站，也是Python资源最多的网站。各种Python相关的教程、开源项目、技术书籍、数据资源层出不穷，比如说大名鼎鼎的还有诸如awe-some python、Python-100-Days、ML-For-Beg你用Python关键词搜索，会出来300多万的相关仓库，足够你花一辈子去学习。牛客网是国内很火的免费刷题网站，上面拥有众多关于Python的面试真题，也有适合小白初学的训练题。Python练习题不仅包括语法，还有数据分析、机器学习、爬虫、可视化等你可以在牛客网上的编程环境里写代码，无需自己安装Python软件，非常方便，可以试试看。Kaggle是世界上最大的数据科学比赛网站和社区，里面有成千山万个比赛项目，涉及数据分析、机器学习、深度学习、kaggle还有各种各样的免费数据集、模型、教程文档，提供给数据科学爱好者使用。,除了看经典书和看优秀的源码之外最重要的一点是刻意练习。刻意练习包括两个层面，从「写不出来」到「写的出来」，从「写的出来」到「写的很好」。从「写不出来」到「写的出来」的练习过程大家都知道并愿意实践，而从「写的出来」到「写的很好」这个过程往往被大家忽略。比如写完了一个类，会不会回过头仔细考虑这个类设计是否合理，接口设计的是否清晰好用；写完了一个函数，会不会考虑这个函数是否单一职责，是否与函数名语义匹配；写完了一段循环代码，会不会想想有没有更简练和清晰的写法。这个过程可能比前一个过程更耗时更费精力，如果回过头仔细考虑的时候没有发现可以改进的地方，那么可以从优秀的源码中学习。当经过长时间的刻意练习之后能够写出清晰易读的代码，编程能力自然有很大的提高。,如果你看到这个回答，恭喜你！不论是初入编程领域的小白，还是已经在工作几年的老手，下面的内容都将对你有很大的帮助。这个回答我会试着给你带来一个更加不一样的编程能力提高实战指南。如果你觉得这个回答对你有用的话，也不要白嫖好吧！点个赞就是对我最大的鼓励。欢迎转发让更多人看到这个回答，一起变强！先来说一下自己的情况！我从小学就开始接触电脑，不过到了大学之后才接触编程，整个大一都很迷茫，编程很少，也不知道如何提高自己的编程能力。大二的时候，自己加入了学校的一个技术组织，自此之后，便真正开启了自己疯狂的大学自学编程之路。自学编程路上，Github 绝对对我帮助最大。 我在大二就开始接触 Github 了，当时就觉得上面有太多不错的学习资源了。到了大三下学期，自己就想着说要不也尝试着做一下开源呗！然后，我就从比较好入手的 Java 学习和好的！下面我们就开始正文！想要自己编程变得更强的小伙伴记得多记笔记。学习编程前至少要有一个稍微适合一点的电脑吧！关于电脑选择，我觉得不要纠结是买 Mac 还是 Windows。作为一个使用了 Windows 开发 4 年，Mac 开发一年的人客观地说，两者对于编程效率的影响没有你想的那么大。特别是在你初学编程的阶段，是完全没太大区别的。Mac 的性价比更低，一台合格的 Mac 开发本 1 万 2 起步。虽然它确实好一些，但是选择电脑的时候还是要根据自己实际经济情况来决定。另外，一定不要选择内存低于 8g 的电脑，有条件的话最好能 16g。很多人可能会觉得说，我们学习编程，首先是要找一门编程语言好好开始学，比如我在上大学的时候最开始接触的是 C 语言。我觉得非也！就我自己作为一个从大学自学编程一路一路踩坑的过来人来说，初次之外，你还要搞明白一般情况下，但凡是初学编程的同学，往往都需要课后进行持续学习的。一是因为你可能刚学编程，老师教的东西你听不明白。二是因为程序员这个行业本身就需要不断学习。三是因为大学里面教的东西往往和社会实际需要脱节，只有自学才可以让你技术和社会不脱节。推荐几个我常用的学习编程的网站：上面有很多名校的课程和上面有很多比较适合入门的免费课程。另外，如果你需要实战项目视频资源的话，也可以在慕课网找到（慕课网打钱！！！）。是的，你没看错！看 B 站也能学习！B 站上面有很多优秀的学习资源以及优秀的 UP 主比如 Guide 哥。国内的公司慢慢开始向国外的面试形式靠拢，在你初学编程的阶段，也可以经常去上面找一些简单难度的算法题来做。主打付费学习的一个付费学习社区（极客时间私聊我打钱哈！）。不过课程的质量大部分都挺高的，我自己也看了里面很多的课程，并且很多课程都是 Java 领域大佬级别的人物讲的。了解了国内外有哪些比较好的技术社区之后，你才有机会认识到更多更优秀的程序员，看到更多对你有帮助的东西。而不是说，整个人的思想都局限在学校。这点是很重要很重要的! 比较好的技术社区的话有：知道了要使用 Google 搜索之后，你学习编程的和解决的问题可以提升一个档次。如果你实在是无法越过那道墙的话，可以试试必应搜索。你或许也发现了。很多成绩特别特别优异的同学，他们的编程能力其实并不好。在大学的时候，那些编程能力最强的往往是那些成绩比较一般的。我觉得主要是一个思维的转变问题。很多人学习编程的时候，总是想着我要把这个 API 记下来，把这个库的用法记下来。这样学习，导致的结果只有一个那就是你会很难受！因为，这些根本不是要死记硬背的东西啊！真还当这是上课考试啊！拿我自己来说：我平时也会写 Python，基本就是自己看着官方文档或者一些书籍的教的语法跟着写。如果哪个地方不会了，我就去查一下。大部分最新的资料/技术都是国外那边的，基本上大部分都是英文的。据说 90% 以上的程序员都不习惯直接看英文文档，都会选择看别人的翻译/总结或者书籍。但是，书籍或者别人的翻译/总结都会比较慢，而且难免会有个人主观因素影响翻译效果。这个时候很多人就会说了我的英语不好啊！完全看不懂英文文档。别担心！虽然要多看优秀的代码，但是也不要被 “拿 Java 来说，不知道阅读什么源码的话，可以先从 JDK 的几个常用集合看起。另外，我比较推荐看 Dubbo 的，因为感觉会稍微相对容易一点，模块划分清晰，注释也比较详细。搞清楚了 RPC 的基本的原理，知道如何自己实现一个 RPC 框架之后，看起来就没那么吃力了。另外，随便一个框架的源码都 10w+行了，都看一遍是不可能的。要挑选比较重要的地方看，就比如看 Spring 源码的话你一定要看 IoC 和 AOP，要知道一个 Spring Bean 是如何一步一步被创建出来的。你要看 Spring Boot 源码的话就要知道 Spring Boot 的启动机制是啥，Spring Boot 是如何实现自动配置的。看书相比于零散的看一些文章学习更加系统。当然，网上也有很多比较系统的学习资源，比如你要学习 Java 的话，可以看我开源的 初学编程第一步就是选择一门适合自己的编程语言入门。选择的时候，无非是要从下面几点考虑：下面这份数据来自 再来看一下 再来看一下编程语言的平均薪资水平和使用年限。这份数据来自于 编程语言只是工具。我们的确需要有一门比较擅长的编程语言，但是，不是任何时候，我们做任何东西都要使用这一门编程语言来做。比如 Java 适合网站开发而 Python 更适合做数据分析。我见过很多人学习编程一年多了，自己敲的代码可能还不到 1000 行。然后， 你让他做用自己学的编程知识做个什么东西，他就蒙了。就比如你学习 Java 后台开发的时候，能不能通过自己学过的知识独立做个网站呢？再比如你搞懂了某个框架原理之后，能不能模仿着去写一个简单的呢? 就比如我之前搞懂了 RPC 的原理之后，就自己动手写了 就比如技术选型的时候，相同的功能可能有不同的解决方案，你是人云亦云地不顾项目实际需要去选择，还是自己经过详细的对比呢？想当然肯定是根据自己项目的实际需要，然后经过各种对比之后选择！不要沉迷框架，多花点时间去修炼内功——底层技术。很多人觉得在学校里面学的数据结构和算法、如果你暂时觉得这些东西没有用，很可能是现在学习某门技术只是浮于表面。举个例子:如果你要看懂框架或者某个类库的源码，那数据结构是必须要搞懂的吧！如果你要培养和提高自己解决问题的能力，那算法肯定是必须吧!拿 Java 举例子，有哪些比较底层的技术呢？分享和输出的方式有很多种，给大家推荐几种最常见，同时也是我最常用的学习方式。可以养成写博客输出的习惯。我在之前有写过一篇文章来说为什么要写博客:简单来说，主要有下面    几点原因:这个时候，你肯定就纠结了： 作为一个从大二开始就坚持写博客，期间折腾了无数次个人网站的我来说: 这个时候，你肯定又要纠结了：Emm...这部分要格外好好看，适当记笔记哈，小伙伴们！给大家推荐几个最好也是最常见的搭建博客网站的方法，想要免费高速个人博客网站的小伙伴们不要错过。Hexo易非必须中一般Vuepress易非必须易友好Docsify易非必须易不友好Wordpress中必须易友好Halo中必须易一般 关于如何使用 Docsify 搭建一个自己的博客网站，我还写过一篇文章手把手教你搭建：有了自己的网站后，你可以将自己的文章整理成一个系列，然后部署在自己的网站上，自己想看的时候就可以随时查阅。你也可以将文章同步到其他博客平台来扩大自己的影响力。我整理 7 个常见的技术平台供大家参考：一般公司都会有内部的技术讲座以及博客平台。你可以在公司或者项目组内部组织技术讲座，这样不仅可以增加自己的存在感，还能提高自己的表达能力。你也可以在公司内部的博客平台分享自己写的博客，这样你写的东西就能被更多人看到了！你可以在 Github 分享很多东西，你的学习笔记、自己做的实战项目、自己造的轮子......（资源类的不太推荐，太容易侵权）。虽然，现在 Github 被很多人单纯玩成了引流工具。但是，整体来说 Github 整体技术环境和氛围还是很不错的！另外，最好的话是要给项目弄一个英文版本，项目代码中的注释最好也要是英文的。毕竟是开源，最好是能准守开源精神使用世界通用语言（这一点我自己也没做好，反思！）。我站在自己的这些年自学的角度，掏心窝子地说了很多话。看了这我的回答之后，哪怕你只学会了要使用 Google 搜索我都觉得开心，也希望这篇文章能够影响到更多人。另外，文中讲了很多编程领域不可争的事实或者说正确姿势比如：不要以学生时代应试考试的方式学习编程、多实践、2020-07-15 1:36,【绝大多数人努力程度之低，根本到不了拼天赋的程度。】现在IT界的大佬里，马化腾公认天赋不高。在深大读计算机时，小马不显山露水，他不是编程最强的也不是成绩最好的，但完全不妨碍其后来的发展。同时，小马本身也是一名合格的程序员，据说写了第一版的OICQ Dialog。后来小马总结自己编程的学习方法，是用抄代码来打基础，我觉得他的方法对题主也是适用的。不知道怎么学？觉得自己天赋低？想做APP?那就用笨办法，看点基础的知识语法入门，然后上网搜一下别人做的相关例子，或者教学视频什么的都可以，有源码简单点的。看别人是怎么实现的，把别人的实现过程自己在电脑上实现一遍。调通OK了，改一下其中的某个模块实现一些新的功能，就这样一步一步的往前走。多写代码多积累，有一定的基础了再回去看书，和别人交流，参与到一些学校组织或者社会上的开源非谈到天赋，在我读书时，学校很多编程大牛都是没日没夜在实验室干活，在各种科研创业团队里做事。隔壁宿舍的大神基友每天晚上11点从实验室回来，睡前的爱好是看Android源码，题主扪心自问，你真的尽力了吗？如果没有尽力谈天赋又有什么意义？从题主的问题描述里我感觉题主的意志还是太薄弱了点，校园里比起社会已经舒服很多了。对于程序员来说，编程是基础，是敲门砖但不是全部，如果你想往更高的层面发展，学习能力、努力程度、情商缺一不可。建议题主先把心态摆正，静下心来，参考我和 老师等人的方法，再努力一段时间试试。附上一个小马问题的链接，当年他也是很拼的：,每天看课本记忆语法，殊不知编程实际上是一种技能，我大学四年做的练习、项目、外包加起来，累计写了10w+行代码。写什么？可以是OJ上的题，也可以是课后的编程练习题，总之先把代码量堆上去！最近很多新关注的小伙伴，私信问我，说大学很迷茫，不知道该学什么。在这里统一回复下。既然是学习CS，那么在这里，我粗浅的把计算机编程领域的知识分为三个部分：基础知识是指不管从事任何方向的软件工程师都应该掌握的，比如数据结构、算法、操作系统。特定领域知识就是你从事某个细分方向时需要掌握的知识，比如做游戏引擎的需要掌握图形学；做前端的需要掌握浏览器渲染原理、前端三大件；算法工程师需要更多的数学知识。毕竟计算机各种门类挺多的，需要选个细分方向专研下去，什么都学只会什么都不精（大佬除外啦。上面那么划分可能有同学还比较疑惑，再细一点，我认为需要重点掌握学习的就是 ：计算机专业的核心课几乎都是围绕着构建上诉这些能力来的，比如：还有高数、线性代数、离散数学、网络原理、网页设计、多媒体技术、汇编语言、面向对象的设计语言、Java 编程、ASP、SQL等总的来说是另外，对于还在大一、大二的很多学弟学妹们来说，可能觉得刚学会一点编程语言，什么都做不了，更不知道和实际工作的差距在哪。那么最好的方式就是先按部就班的把学校安排的基础课程学好，再在课外自己多练习编程，了解一些业界的技术、框架。把时间充分利用好。我在大一之前完全没有编程经验，高考后，填的专业前几个也是清一色的传统工科，被软件工程录取纯碎是意外。大一开学，第一门编程语言就是学的 C 语言，怎么说呢，老师讲的，书上写的我都能看懂，但是让我写一个大的程序，我就摸不到头脑。不知从何下手，学了半学期，也只能写写课后习题，算算大一上考完 C 语言后，我便在心里默默念想，这辈子再也不写 C 了，但没想到的是，后来这成了我最爱的一门语言。混到什么程度呢，王者荣耀打了几千场，线代考试前一晚才在 mooc 上刷完所有章节，因为平时上课我基本都没听的，这也是我最后悔的事情。转变大概从大一下开始吧，那时候好几个室友都拿到了奖学金，于是，我自己也开始慢慢反思，觉得这样下去，大学可能就废了。默默的把王者荣耀卸载（当然，后面又下回来了，反反复复十几次。。。）大一下，开始学习数据结构与算法、数字逻辑这些计算机核心课了。此外，还学了一门当时我看来非常牛逼的语言：Java。为啥说我当时觉得它牛逼呢？因为刚经历过 C 语言的摧残，发现 Java有丰富的类库，各种方便的工具类。再也没有指针了，变成了对象引用，简直是新大陆。所以我学得很认真，还记得当时看过自己也用 Java 写了不少好玩的东西，比如这让我第一次感受到编程这么有趣，俗话说兴趣是最好的老师，Java 也算是帮我解锁了对于编程的兴趣。在学 Java 的时候喜欢在网上搜资料，但总觉得各种博客上的知识过于零散，为了“精通” Java，我在知乎搜索各种书单，先后看了《Java核心技术卷》《Java并发编程》好几本书，自觉 Java 基础还算可以，不过现在已经快两年没写了，成功转入C++阵营。而且我有个习惯，就是每天早上基本都是六七点起床，八点多对我已经算赖床了，所以和我室友显得有点“格格不入”。早上起太早的话，他们还在睡觉，我在寝室写代码的话，难免会发出各种声音吵到他们，尽管我做什么都是蹑手蹑脚，生怕发出椅子摩地，或者碰撞的声音，这让我也觉得不太方便。所以，后面没有课的早上我一般都去图书馆五楼自习室了，在那看书，看书觉得烦了，就写会代码或者刷刷知乎，看看博客。这是被我长期占领的一个位置，因为书太多，不方便每次都背来背去的，所以就找了个考研自习室。就这样从秋天，到了冬天，桌子上多了围巾手套，还有 C++ primer（误，我从大二才开始学C++的）那时候，每天上午的盼头的就是早点到中午，我就可以去吃饭，然后去学校散步了，我经常把中午饭菜拍下来，感觉蛮有意思的哈哈哈：一般我都是赶在中午下课高峰之前去吃完，然后去学校绿荫道散步大二时，在上一些无聊的课时，我总把这本书带着，每节课可能会翻个几页，那时候看到里面的汇编、内存管理、存储器层次我是真的云里雾里，因为还没学操作系统，C 语言也学得很差。所以断断续续的看了几章，说不上学到了什么，但让我对这种枯燥的基础知识第一次产生了兴趣，有一种想彻底搞懂它们的想法。后来在知乎大佬的指引下，为了看懂这本书，去看了重学了 C 语言（主要是指针和内存），由于已经学了汇编，指针对我再也不是问题了，同时看完了《C和指针》、《大二那段时间，学院里突然刮起全员学机器学习的风气，虽然不至于全部，但是真的是很多人都在学，明明 16 年大一时客户端安卓开发还挺火的，到了 17 年各种机器学习、神经网络就席卷而来。不能不感叹，IT 行业日新月异呀，不学习就可能被淘汰。当然了，我也不例外的加入了，先后看了些跟着做了手写数字识别这种入门必做的项目，但是后来总觉得对机器学习、深度学习提不起兴趣，原因之一就是我觉得无法完全掌握每一步，了解每一步背后的原理，再加上自己数学也学得不太好，这让我学得很没底气。于是机器学习之路也止于大二。大二是学习内容最丰富的时间，当时室友用 Python 写了抢课脚本，感觉很好玩。然后自己又跑去学 Python，学爬虫。写了一堆爬虫，什么爬豆瓣电影、知乎回答、抢课脚本，玩了一段时间也没太大兴趣了。时间来到了大二下，按照课程安排，开始上操作系统了。于是我又在知乎搜索「操作系统怎么学」，不得不说知乎上各位前辈大佬的回答对我的指引作用极其的大。顺着一堆回答，我发现原来还能跟着别人写一个 mini OS，这对我吸引力太大了。于是我买了一本《我一路跟着书写，写到了汇编开机打印出我的名字，再到后来进入 C 语言写内核各个模块，写到内存管理我就中断了，没有继续写下去，这也算个遗憾吧。这本八百多页的书，我花了两个月时间啃了五百多页，一下课就跑去图书馆，在我的虚拟机中跑 qemu，那时候就沉浸在类似下图这种界面：当时我真的对这个入迷了，为了写 mini os我还去看了 Linux0.11 的部分代码，看了哈工大李治军老师的 OS 公开课，原因就是哈工大 OS 实验课是用的 Linux 0.11 来魔改。还很奇葩的把我 QQ 签名改成了 jmp 0x7c00(PS: 这句汇编就是跳转到 0x7c00 地址，BIOS 开始引导操作系统于是就这样，我越来越喜欢偏底层一点的东西，所以决定走 Linux C/C++ 路线，然而现在看来确实太年轻了，Linux C/C++ 在鹅厂好多也是用来写业务滴。。。大二下在知乎、牛客网搜索学习路线，我大概清楚了需要看些什么书（于是在大三左右开始了非常标准的 Linux C/C++学习之路：前前后后看了《顺便还看了点 Muduo 源码，自己模仿着基于 Epoll 写一个 Reactor模型的 Web 静态服务器，跟着知乎 Milo 大佬写 Json 库，总之，这段时期是写了一些小”轮子“的。（PS：知乎上有朋友问我是如何看完这么多书的，其实在之前的文章中就写了，看书我会有选择的挑章节看，不会从头看到尾的，而且大三开始课就少了，我基本就在刷这些书，其实时间还蛮多的？毕竟我也没参加什么社团、学生会之类，也没女朋友。。。那时候会每天记录看书的进度，感觉特别有劲：书看得越多，其实你越能找到自己的方向，大三上我就给自己学习定位：深入C++语言（多线程）+ 存储（学习 Redis、leveldb）+ 基本上是沿着上面几个方向去展开学习的，有的看书，有的论文，也有的看博客看源码。总之，知识面在大三不断扩充，自己开始关注学习 C10K、C100K 这样的后台服务器开发高性能、高并发的解决方法。当然了，还有些到现在还没开始，比如 也可能是学习变得不那么纯碎面向技术了，变成面向工作、面向赚钱了哈哈哈。值得一提的是，大三上我们学院有门 System Programing 的课，教材就是使用的 CSAPP，因此我之前大二草草看完的书，得以再次翻开，这一次我把附带的是个实验也挨着挨着做了，收获良多，有位运算各种奇技淫巧，有 Bomb lab 刺激的打怪通关、也知道了buffer overflow attack.... 还有实现基本的内存管理等等。印象最深的便是做 bomb lab，一个个 phase 的通过真的很让人兴奋，我几乎是熬夜连着把这几个 phase 过掉的，当然头发也没少掉。当时还在简书写了个万字长文记录： 再到后来，我拿到了微信实习 offer，然后顺利转正。在我大三下拿到实习 offer 后，开始做一些国外计算机课程 lab，一方面有钱赚，而且还不低，靠这个我在大三下就实现了经济独立，另一方面这些 lab 有些很有意思，对提高基础和编程能力很有帮助。在这里列举一些我做过的觉得有意思的 lab（之前有篇文章写过）：这个玩意挺有意思的，就是要让你自己去设计一个文件系统，比如文件、数据块、目录等等，而且你要提供创建、读写、删除、随机读、随机写等等接口，然后通过 Linux 的 VFS（虚拟文件系统） 机制挂载到 Linux 内核中，然后就可以用系统调用 open、read、write 这些来在你的文件系统上进行读写。VFS 是Linux一个机制，它规定了 IO 接口，然后你去实现这些接口，你就可以挂载在上面。通过这个东西我深入的学习和了解了文件系统，报酬也是非常值的。就是版本管理系统，类似 SVN 和 GIT的，但是相对 GIT 做了很多简化，核心的就是创建分支、分支合并、回滚、commit 这些，通过这个我又去详细了解了 GIT 的实现原理，并且自己写了一个简单版本的 GIT，受益匪浅，也赚到了几千大洋。这个就是让你基于硬件的原子指令 xchg、cmpxchg 这些实现一个锁，这个需要内联汇编、汇编等知识，简直是硬核！！！做完这个也解开了我对锁实现的一些疑惑。这个就更有意思了，要求用 C++ 写一个代理服务器，类似 Nginx 的代理功能，当然，相比 Nginx 弱鸡很多，但是麻雀虽小，五张俱全，而且老外最有意思的是要求代理服务器对一些图片和 HTML 恶作剧，就是代理服务器随机的在原始服务器，返回的响应里 插入一些图片和文字，因为那天是愚人节。。。 不得不说老外还是很有趣的。这个就更硬核了，人家老外老师就是给力，直接做了一个网站，这个网站你可以通过 TCP 连接上去，然后你需要运行几个节点，互相发消息，他们之间的消息都会经过老师的网站，所以通过网站上是可以控制丢包率的，也能控制节点的拓扑结构，要求就是让你基于这种不可靠的信道，做出可靠数据传输！这简直就是翻版 TCP 嘛，超时重传、ACK、滑动窗口啥的都给我上！就是像下面图中一样，圆圈就表示你可达的范围，不同节点形成各种当然也有很多写算法的，数据结构实现的，图搜索的，也有做机器学习、深度学习的，反正各个方向都有。做这些 lab 真的实实在在的提高了我的编程实践能力，也算是检验了前期看那么多书还是有效果滴。附上大学期间买的一些书，毕业的时候大部分都卖了，因为实在不便携带：这是带去图书馆自习室的书（常占位置）这是毕业整理的书：买这些书花了我不少钱，大家都知道计算机这些书一本就是五六十、七八十起步。大学四年光买书就花了几千块。不过我一直认为这也是我花的最值的一笔投资。最后真心想说一句，滴水穿石非一日之功，学习计算机还是需要沉下心来好好啃书、看源码、写“轮子”。逐渐构建起属于自己的计算机知识体系，然后选择一个专业方向不断专研。,"请原谅我使用英语作答，因为我的中文没有比英文来的打字更快。以下我将分享一些我对国外的线上学习coding的网站的整理，如果觉得是良好的咨询请关注我吧，谢谢。 - SF, Chicago, NY SFCoder Camps- SF Bay Area, Houston, Seattle, DChe Starter League -  - ChicagoStarter School -  - Chicago  - NY - Austin, San Francisco - Albuquerque (without quitting your job) - Chicago - San AntonioSoftware Craftsmanship Guild - Akron, OH:  - AustinPARSEC Group -  <  [Web Dev+Ruby on Rails] < [Web Dev, Ruby, Python, iOS tracks]  <theFirehoseProject> Web Dev & Ruby on Rails <Tealeaf Academy [Web Dev+Ruby on Rails]P.S.以上这些都是学习coding的，如果想了解一些关于英语的线上学习网站的话，也可以到我的网站观看我给其他用户的留言，谢谢，麻烦请你关注我吧。",虽然我不是重点大学的，只是渣渣学校毕业出来的，但是我还是想分享一下观点。首先要多加练习——这一步并非是指有意图的练习，而只是普通的练习。这是我用了两年不到的电脑的以及GitHub上的提交——都是练习为主，天天练习。然后就是： Tasking与学习能力作者：phodal链接：来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。能做到你想做的: Tasking与学习能力虽然这看上去是一件很难的事，但是也不是一件很难的事。这也不依赖于你是否对某一个技术栈的理解，这只实际上只是学习能力的一种体现。在扯这些废话之前，先让我们来看看我们是如何实现一个功能、应用的。这也是在Growth里提到的Tasking：以本文的写作为例，细分上面的过程就是：而如果将其划分到一个编程任务，那么也是一样的：所以，实际上这并不是考验你技术能力的点，而是考验你如何划分任务和学习能力的点。在我不断地实现一个个系统的时候，最后我才意识到了这一点——学习能力和Tasking才是最重要的。换句话说，你现在学会什么并不重要，重要的是你以后有没有学习的能力。有了一直想着过安逸的生活，所以就会安乐的死去。不过反正人生在世，自己开心就行，不要管别人怎么说。随后，我发现大部分我想到的都可以实现。那么问题来了：这实际上就是：用更好的方法来实现功能。,大学毕业，在一线互联网公司代码也写了五六年了，给几点建议：那些早上6点起来在那背代码的，放心，最后还是不会写代码。一门语言写几万行的代码量，就上手了。有空多逛逛github：码农每天都要跟bug打交道，学习如何调试，代码出问题就知道怎么找bug了解决 bug 的社区：几乎所有的编程新手都会犯的一个错误就是，把所有的代码逻辑都写完了，再开始跑。相信我，这样写代码会让你调bug到怀疑人生。正确的姿势是，写一点编译一下执行一下。平常把有用的代码、遇到过的问题等记在最后，真的很庆幸当初大学选了计算机专业。刚开始学也很痛苦，现在已经是真爱。,说点没用的：   轮子哥的堆时间论 深以为是。窃以为，编程就是织毛衣，再精美的织品，分析到最后终逃不过一个唯手熟尔。至于用什么方式达到手熟……楼上诸位已经说得很多了只是希望楼主认准一个方法后，能够坚持下去。毕竟，我们的,"目前赞同最多的两个答案很有道理,但不适合题主的状况.不知道诸位答题前有没有读题主的描述,题主作为""国内某重点大学渣渣专业大一在读"",属于刚入门,的过程.题主欠缺的不只是理论,方法,还有编程熟练度.题主的问题是能够救题主的,不是捷径,而是(基础)代码量.你能看到的大牛,除了少数天才外,大多数还是一行行代码积累起来的.题主说:""一些题还好，可是有些题难度感觉很大，有时好不容易有了思路，转化成代码都要老半天，别人一个小时就搞定的事情，我可能要花三四个小时，而且我本人比较粗心，经常被一些小错误坑了很久。""但是题主指出:""最后就算千辛万苦地做出来，感觉也不值得，毕竟时间消耗太大""其实作为一个过来人,回头想想,刚开始编程的我也是这个样子(请参考所以给楼主的建议是如下几点:1.坚持,学好基础,2.积累代码量,3.忍耐(甘于平淡枯燥的学习).",数据结构和算法本身就是比较难的，转化成代码还需要你对语法比较熟悉，初学者多花些时间是正常的。另外我们周围经常会有比我聪明的人，要调整好心态，至少在编程这件事情上我觉得还是勤能补拙的。把自己编程过程中遇到的所有坑都记下来，每隔一段看一次，积累多了就能避免越来越多的坑，你对这门语言也就越来越熟悉了。如果真喜欢，那就坚持下去，编程是一个熟能生巧的过程。我周围好多同事专科学校毕业的，技术都很牛，也没见他们智力超乎常人，但他们都很努力，很热爱自己的工作。编程这件事上，英雄不问出处。本人鹅厂码农一枚。,,,,
突然意识自己曾经引以为豪的编程其实是一种工具，这是一种悲哀吗？,,大学的时候，常常看央视的天天饮食，看完再吃食堂的饭，都觉得更香了。工作了，在国外，想自己做饭，又想起天天饮食，在线看太慢，就自己写了个下载软件，下载了做饭前看看。后来还给小孩下过动画片，给我妈下过养生保健。后来炒股，不知道那些指标策略有没有用，写个软件，把自己想的，书上写的，大师们吹的策略都实现出来，在真实的历史数据上跑，没一个赚钱的，遂退出股市，这么多年，省了不少心力。后来有了孩子，老婆嫌空调夜里温控不好，孩子容易受凉。我用用虾米听歌，想找点没听过的歌，但各个歌单总是有大量重复的歌，听一会才能发觉，筛歌效率巨低，就写个脚本，自动筛除歌单中听过的歌，找歌的效率立马提高，个人乐库从几百首到两千首，我还给网站首页上加个筛歌的按钮，好像官方为我定制得功能一样。没多久，虾米就倒了。后来思考人生的意义，干什么这一天才没白过，才睡的安稳，才不空虚。经过认真的琢磨，我觉得意义是在学习，生活，工作，健康等八个维度上的价值，把有价值的事列出来，赋上意义值，安排到每天的生活中，就不用愁今天干什么了。然后就写个app，起个名字叫“有意义”，放在app store里。迄今我用了五六年，导出来的excel文件，只有十兆大小，却包含了这几年每一天里我身边的事。这几年胃不舒服，吃药也是这次有用，下次照疼。让我心烦，决定要解决这问题。说是胃病要养，但我也不想吃的太无趣。就写一个app，列出伤胃和养胃的东西，记录下自己日常饮食和胃部症状，建立一个数据模型，画出图来，预测每日的胃痛风险，今天风险高，就老老实实的吃，风险低，就可以吃的潇洒点，刺激点。不但胃好多了，还发现自己的一个特点，越吃越馋。从读书到工作，我们在实现父母的期望，社会的安排，老板的想法。有哪一次，我们是在真正的实现自己的想法呢。一件事，我想做，我去做，我做出来，对于普通人来说，有几次这样的机会呢？编程是实现想法的工具！当你会编程，不用求助于人，你就可以单枪匹马的实现自己的想法。可以验证想法，进化想法，也可以敝帚自珍的欣赏自己的想法。这个过程，是极具娱乐性的。这是编程的魅力，也是创造的快感。有几个人想下载央视的视频？我想。有几个人想要重写空调的温控？我想。有几个人想要计算人生的意义？我想。有几个人想要预测今天会不会胃不舒服？我想。 无论需求多小众，我想，我就可以做出来，这大概就是工程师的超能力吧。,我发现有些同志总是在下面说什么“我们都是工具人”“编程不是工具是什么”，我觉得你们的思路错了。我没有和其他答主一样，强调“编程就是一种工具”这个概念。因为我试图站在提问者的角度去看这个问题，尝试理解大家或多或少都存在的一些困惑。你们总是在强调“自嗨”“鸡汤”，仿佛自己已经站在了理性的鄙视链最顶端，殊不知没有人是绝对理性的，你们也不例外。理性的思维并不比感性的思维要高级，我们灵魂的画像上也绝不应该只存在某一种色彩。以下是原回答恭喜你，意识到了编程和程序员的本质。说过一句话，可能不太适合回答这个问题，但我觉得还是有必要写在这里：或许你发现酷酷的python作为工具，大部分时候做的都是一些excel表操作，微信好友数据分析，爬网页，或许你发现成就了许多大神的各种或许你发现刚开始学习C#时带给你很多成就感的winform，或许你发现，曾经在一块单片机上点亮一堆LED灯泡时的成就感，在嵌入式开发者眼里啥都不算。引以为豪的永远不是，也永远不应该是什么编程，什么语言，更不是什么开源。各位应该引以为豪的永远是，在处理各种各样繁杂的业务之后，在解决各种各样复杂难以解决的问题后，在日复一日的生活带来的摧残下，,一句话给我整懵三次：编程究竟哪里高人一等了；工具究竟哪里低人一等了；上述一大串跟悲哀究竟能扯上什么关系？,·深受我国某些思想毒害罢了。『工具』是很高贵的，是人类存世的意义之一，也是人类最伟大的发明和贡献。现在的话术里面，『工具』反而成了个夜壶，不上台面的解决问题的消耗品定位。这是社会经济文化风向变化所导致的。为什么？因为社会性质慢慢变了。大家越来越发现，工具不值钱，或者说再值钱也比不过背后的资本。资本可以啥都不会，只有钱，甚至不懂经营也可以找到『经营工具人』，不懂技术找『技术工具人』，至于别的更没技术含量的那简直满大街都是工具人。为什么会这样呢？很简单，拥有资本的人，在社会框架里面占了过大的优势。一个很简单的例子，老板开公司，工人的劳动剩余价值100，公司总收入200，老板分走了100，打工人拿到100 。老板没出力就获得了100的剩余价值。很多给老板『洗地』的人总会这样告诉你，老板承担了『风险』，工人不管货能不能卖出去，他的工钱是死拿的，绝不会亏。亏钱都是老板在背。这些纯属扯淡。就不提老板卷钱跑路亏欠工资那种了。就正常的老板，你以为是200块钱回来，打工人和老板都拿100，老板不劳动担风险赚了100块钱。实际上是老板作为投资人，话语权被社会框架极度放大，他把你打工价值100直接压到20，不干拉倒。20这个数字怎么来的？不是他编的，而是社会成本决定的。简单来说就是一个人不用住桥洞，不用挨饿，所必须的最低成本。20年前刚上社会的打工人，一个月拿1000，10年前拿2000，今年拿3000，但是跟物价比较，永远都是刚够你租一间单人房，每天吃最便宜的盖饭，坐最低价的公交车，年底剩不下来什么玩意。这个就是社会最底层劳动力的最低成本。那么你想想，几十年科技进步，生产力发展，为什么这些『基本单位』打工人，相对价值成本还一直是那么多呢？发展带来的红利呢？进步呢？为啥没发展到刚毕业的年轻人干一年能买半套房呢？投资的永远不会给你打工人应得的那点价值，因为他给你，就意味着社会进步生产力进步带来的资本红利也分给你，你出一样的劳动，却能获得和资本一样的增值。这是做梦。能听懂吗？不用考虑细节，你就宏观看看就会知道：如果打工人能获得增值的好处，那么打工人和顶级资本家之间的贫富应该是按照不变的比例前进的。打工人月薪1000，马云1000万；月薪2000，马云2000万……这么下去贫富差距一直是成比例的，怎么可能拉大呢？所谓的贫富差距变大，一定是你1000元，马云1000万，你2000元，马云一个亿，你3000元，马云100个亿……资本家有了资本，就有了压价的能力；打工人的工作量不能存储，只能按天按次花费大量时间慢慢释放，一天不干就亏一天，所以毫无溢价能力。你今天不干活，白亏一天，而资本放着不动是不会亏的。两者讲价，哪个会先受不了？所以资本家（这个群体、这个阶级），可以用压价的手法把工具人控制在一系列标准内：干一年能攒下来一点钱；干十年可以攒几个平方，干30年外加贷款可以攒下一套房……打工人也就成了『工具』，因为『工具』是不参与分红的。只考虑它的损耗而已。既然是『工具』那还用给你什么好脸色吗？都是螺丝钉而已。实际上的工具是什么？它应该是人类最高目标之一。人类的科技、文化等发展，也不过是在不断完善一些『工具』而已。别说科研生产里面工具多重要了，就算是文化领域，能开发某个具体技巧『器用』的，那也不是一般的大师。比如从这个角度来看，当不上资本家的，也就只能向内索取意义，以改进工具为人生一大目标了。这个世界就是这个样子：在我们眼中的『大师』比如希区柯克？他有几个亿？·,之前跟导师讨论一个项目，基于之前发现的某种材料的一种牛逼的性能，我们打算把材料做出来试验一下。由于可选的成分太多，用传统的,嗨，发现了事情的真相，你却不愿意接受？你想想当年咱们为啥想要有计算机来着？不就是为了把人从复杂的计算中解脱出来么？computer的目的就是方便人们computing呀！昨天还和小伙伴聊天呢。关于我每天搬的砖。大部人写的东西，其实就是工具类呀。尤其是我们他们并不需要关心你底层到底是用的什么引擎工作的，经过了哪些步骤。只不过，作为写infra的你，就需要把你的螺丝钉拧好了，有哪些实现方式，需要考虑哪些因素，有哪些现成的工具可以复用？然后你处理好这些之后，就把你这一阶段的API定义并实现好。你工作就完成了，你这一环也就okay了。然后你就可以写下一组API了。你完成了工作有钱拿，离开产品和服务的技术，再nb又如何呢？其实有螺丝钉可以拧，还能养活自己，挺好的。,"最近几年我也一直在寻找人生的意义：当我们不再被基本的物质生活所困扰的时候，人活着到底是为了什么，可能这个问题一直没有答案，谈谈自己的想法。小的时候，我也崇拜过Linus, 后来更喜欢Xavier Leory因为感觉后者更全面一点。再后来因为工作的原因，近距离接触过，发现这种人生并不是我想要的人生，他们只是在一个很小的圈子里面是神一样的存在。后来自己经营一个程序语言的社区，经常被一些人气的半夜睡不着。午夜梦回，经常问自己为甚么要为一个不相干的人发脾气，他可能是一个你一辈子永远也见不到的人，甚至说完全不同的语言，生活在不同的半球。","大概1994年时候，那年，我16岁。电脑，当时还很神秘。平常人家，难睹其芳颜。我从没见过电脑，普通麻瓜一名。有一天，发现我哥整天在看一本书，他说，这本书讲的就是电脑。你只要看懂了，就掌握了电脑。我十分好奇，一看书名《BASIC程序设计》。我问我哥：显然，我哥给不了我答案。我只好自己去看这本书。第一章，讲了一种奇怪的计数方式，将一个数字不断除以2，记录余数和结果，最后变成一个1101001。。。样式的数，好奇怪，它是什么？它似乎是进入魔法世界的钥匙。书上把它叫二进制。我看了两周，我还是搞不懂啥是二进制？为什么要二进制？电脑，和二进制有什么关系？为什么学会了二进制，才能学这个神秘的B-A-S-I-C？我放弃了，16岁的时候，那个时候的世界，存在太多末知，有太多东西可以吸引我，当一名普通麻瓜也不错。1995年，我们开电脑课了。终于，要在老师的带领下，进入IT世界。一上来，老师就带我们背内功心法口诀，据说很厉害。口诀是：他强由他强，清风拂山岗；他横由他横，明月照大江 …………。哦，不好意思，看武侠太多，串词了。真正的电脑口诀是：王旁青头兼五一、土士二干十寸雨、……。对，它是“五笔字型”。我现在就在用它，来写这篇文章。学了五笔字型，我们终于上机了，我也终于摸着了电脑。我们排着队进入微机室，每个人都要穿鞋套。为什么要穿，不知道。如果有人可以不穿，那绝对是权威的存在。有一个高年级的同学，就可以不穿鞋套进入，这在我们同学心目中，简直就是“剑履上殿,入朝不趋,当然，除了五笔字型，我们还学了一个东西，启动的时候屏幕上用字符显示一个大大的：dBASE。create table\list\append……。期末考试，我们就考这些命令。1996年，刚过18岁，我毕业了。职高生吗，就是18岁毕业。我学的是会计，我应聘到当地一家做财务软件的公司。终于可以每天摸到电脑。我的职务是培训讲师，主要讲授公司财务软件的使用方式，还有电脑的基础知识，五笔字型什么的。我的讲师也生涯由此开始。1996年，我也接触到了另一个东西：C语言。我是看其实也就是只学会了条件、分枝、循环、变量、数组什么的。内存、指针还似懂非懂。以境界而论，这个时候最多就是炼气初级，入门级的程序员。我对底层十分感兴趣，到书店买了几乎每一本讲计算机的书，《电脑报》上的小技巧，更是看了一遍又一遍。1997年初，还尝试向《电脑报》投稿，我用C语言写了个DOS下隐藏文件的程序，我总结成一篇文章，寄给了《电脑报》。但最终没没有回复。不过，这不会影响我研究技术的热情。我还记得，有一天晚上，我在研究DOS的内存驻留技术，这是一种古老的在单进程系统中，模拟多进程的方式。在一遍又一遍的失败后，终于在午夜时分，成功了。我让一个程序驻留在高位内存中，它运行后，并没有结束，而是一直运行。每隔1秒，它让PC机的喇叭“B”的响一声。同时，还不影响你运行其他命令和程序。二十多年后，似乎还能感受到当时的兴奋。那种快乐，足以抵消领到好人卡时候的惆怅。是的，这一年我领到了人生中第一张好人卡。起因是，我帮一个朋友补习课程，她们学校在讲：BASIC，她听不懂。当然了，一上来先讲一个星期除以2记录余数……，谁听了都没兴趣，不懂很正常。我说：包在我身上。她说：可你不会BASIC。我说：放心，几天之内，我就可以学会。然后，我用了两天时间吧。翻看完了那本《BASIC语言设计》。学习一门语言，so easy。其实，学了多少种编程语言、某个编程语言的掌握程度，都是浮沙之上的高楼。还有一层在语言之下的东西，但我当年当然没有悟到。很长时间，我都以为，编程语言，就是全部。后面的故事，有我亲授，那有挂科的道理。她成功通过了BASIC的考试，然后就给了我一张好人卡。我还花了几个月，研究《8086汇编语言程序设计》。书中的东西，我一开始全不懂，每一个字都认得，但组合在一起，我就傻逼了。看示例程序，mov来，mov去，功能就完成了。mov相当于赋值，为什么赋个值，功能就实现了？后来有一天，我坐在一棵树下，发誓搞不懂绝不起身。终于有一天，豁然开郎，我顿悟了，大地震动，雷声阵阵，霞光普照，香气四溢。。。当然以上都是我在扯蛋。我的确把《8086汇编语言程序设计》看了好几遍，还抄，抄了有半本的时候，真的突然就明白了。内存，是程序的舞台。mov修改内存中的值，就是修改各种状态，……。就好像，有一块内存，对应显卡，只要将这块内存中某个字节改为1、0，就显示出一个白点、黑点（像素）。键盘，也对应一块内存，向这块内存写入一个值，就好像敲击了某个键。所以，我看别人的程序，都是mov来mov去的，功能就实现了。读、写不同内存区的值，就能完成某些操作。这是我第一次顿悟。1999年，21岁。顿悟之后已经有几年。越来越失去方向。DOS，那个文本的时代，过去了。我引以为傲的内存驻留，等等，这些高深的DOS技术，都过去了。多少年后，只剩下我曾经使用的网名：文本时代，还记录着，它曾来过这个世界。这一年，有个重要的事情，我又领了一张“好人卡”。“你是一个好人”，这是人生中第二张好人卡了。我给自己起了个新的网名：VAGE。把A和E两个元音颠倒一下，就是一个单词。我是想提醒给我发好人卡的女孩子们（对，要加们，是复数），颠倒一下，有时能更清楚的理解这个世界。百无聊赖时，我翻了翻已经买了好久的书，《Windows95程序设计》。好像也没什么。后来又看了比如，你新建一个p1.c文件，打开，马上就有下面几行：这就算是框架的雏形了。通过《MFC程序设计》，还理解了一点，函数指针的应用。把数据、函数指针，放入一个struct中，就好像c++的Class一样。……此后又过数年，（这些年，）我一直在老家省会做外包，也就是临时工了。使用五花八门的语言，满足客户开发五花八门的需求。其实就是打怪升级。我的技能点也不断增加，C/C++、Java/JSP/J2EE、HTML、网页三剑客、……，我们的项目部接到需求，客户想培训两天Auto CAD。已经是资深讲师的我，责无旁贷啊。于是，我的技能点，就又增加了一项。但我越来越迷茫了。开始进入IT世界，已有五、六载时间，我学了好多东西，我是骨干，我几乎无所不会，但是，这些真的就是“电脑”吗？我又好像回到了1994年，初遇B-A-S-I-C的时刻。一种迷茫的无力感，时刻裹挟着我。只觉得空有一身力气，却看不到，要干什么。以上，就是我当年参悟到“引以为豪的编程，期实只是一种工具”是的心情。本来以为不会有人看，只写了一部分。没想到，还是有人爱看的，我后面尽快写完。还有一个视频：对职业生涯迷茫的同学，也可以参考下",除了,这种悲哀感的本质，其实就是马克思在《1，工人同自己的劳动产品相异化。2，工人同自己的劳动相异化。3，人同自己的类本质相异化。马克思认为人区别于动物的最大特点，就是人本质上就需要“工作”，既“创造性地改造环境”。马克思所说的工作，其实就是后来“这也是马克思的牛逼之处，理论精髓之一——人的本质就是需要工作、热爱工作的，工作是人之所以为“人”的重要组成部分。但是资本主义世界的雇佣关系，将工作这个部分严重扭曲了，以至于将“工作”与“人性”剥离开来。在资本主义世界中，无论是宏观角度还是微观角度，工作都与人性割裂开来，甚至让“工作”与“人性”变成了对立的存在。所以人们普遍认为，下班才是人生的开始。所以人们才需要丰富的夜生活，才需要各种宣泄和放纵。而这，也助长了消费主义。但是消费带来的快乐，终究只是隔靴搔痒，甚至是饮鸩止渴。消费并不能真正填补人性被剥离的空虚。特别是，被剥离的部分（工作，或者说是自我实现）还是人性最重要、最核心、最高级的那一部分……这种人性被剥离的悲哀就正是你体会到的悲哀你引以为豪的时候，是你以自我实现（工作）角度去看待编程，这是人性最高级的展现，当然值得自豪。而你悲哀的，是发现编程如此高级的东西，它并不属于你……不仅编程的成果不属于你，编程的动机也不属于你，编程过程附带的精神回报也不属于你，甚至你的自我实现（工作）需求也不属于你了……编程沦落为一种生产商品的工具，甚至其本身也是一种商品。你的自我实现，变成了一种交换生存资料的手段。放到这个过程相当于把最高级的需求（自我实现），直接压低到最低级的生理需求（交换生存资料）层次！甚至，资本主义倾向于让你只能交换到“刚好能活着”的生存资料，多余的价值都会被剥削！甚至的甚至，再观察一下其他那些层次的需求，呵，这些东西在职场中都是要一一被打破的东西（职场pua请大伙卷起来！）。资本就是要把你压到只能获得生理需求的水平！这实在是太tm悲哀了啊！所以马克思也是深感悲哀，才搞出了共产主义。而共产主义最本质、最核心的创新，就是要把资本主义剥离出来的人性还给人类，把工作和人性相统一，把每一个人都变成完整的人。两百年前的哲学家，就已经从现象看到本质，抽离出一套理论体系，做出了一堆神准的推演和预言，定位了核心问题，并想出了一套解决方案。牛逼不～附一段关于马克思四个异化的论述：1、工人同自己的劳动产品相异化。马克思认为，在资本主义社会中，存在着这样一个基本事实，即工人生产的财富越多，他就越穷。工人创造的商品越多，他自身就变为越廉价的商品。“物的世界的增值同人的世界的贬值成正比。”这跟人的本质要求是大相径庭的。“劳动所生产的对象，即劳动产品，作为一种异己的存在物，作为不依赖于生产者的力量，同劳动相对立”。所以，马克思得出结论：“工人对自己的劳动的产品的关系就是对一个异己的对象的关系”。这种异化关系决定了工人同自己的劳动过程之间的关系也必然是异化的。工人在自己的劳动中无法肯定自己的生存意义，相反，只能否定自己。在劳动中，工人不能自由地发挥自己的体力和智慧，只能使自己的肉体和精神遭受摧残。防纱的工人一年到头只能围着机器打转，与机器人没有差别，煤矿工人在矿井下工作，连安全都没有保证。在马克思看来，真正的劳动应当是一种自由自愿的活动，这是人成其为人的一个基本条件，每一个劳动者都应该能够体会到生命的价值和意义。可在资本主义社会中，这样的劳动是不存在的。工人为了生活，没有选择的资格，工人的意愿，在资本主义制度下显得微不足道。而且这种异化的本质还是工人同劳动产品之间的异化的根源。劳动产品的异化是物的异化，劳动活动的异化是劳动者的自我异化。物的异化是劳动者自我异化的总结而已。在马克思看来，人的本质就是要劳动，要自由自觉的劳动。不允许人进行自由自觉的劳动，是违反人的类本质的。而在资本主义社会中，这种情况恰恰就发生了。自然界给人提供劳动加工的对象和人类生活资料，使人的肉体能生存。但是“工人越是通过自己的劳动占有外部世界、感性世界，他就越是在两个方面失去生活资料。”马克思认为，当一个人分别同自己的劳动产品、劳动活动和类本质处于异化、对立状态的时候，这些东西必然属于另外一个“他人”。即就工人而言，这个“他人”就是有产阶级、资本家阶级。正是这部分人以及作为其政治依托的私有制才导致了工人与自己的上述三个规定处于异化状态。也就是说，私有制度下的所有人都跟真正的“人”相异化，其本源就是私有制度。所以私有制度必须被批判和推翻。在《手稿》中，马克思经常在同一意义上使用异化和外化两个概念。在此，马克思区分了对象化和异化。劳动对象化，劳动者在劳动过程中把劳动凝结于劳动对象中，产品包含了劳动者的劳动和生命。那么劳动产品本来应该属于劳动者。然而，马克思看到事实并非如此，实然与应然之间存在巨大鸿沟。劳动对象化不一定导致劳动异化，但在资本主义私有制的条件下，劳动产品异于工人而存在，不属于工人。不是工人支配劳动产品，而是劳动产品支配工人，这就是,没啥可悲哀的，这世界绝大部分东西都是工具。作家引以为豪的纸笔键盘，是工具。书法家引以为豪的笔墨纸砚播音员引以为豪的铿锵有力的嗓音，是工具。工人引以为豪的操作手艺，是工具。到最后，你会发现之所有还有人愿意给你工资，也是因为你自己就是工具（人）。真的，没啥可悲哀的，工具的作用就是适得其所，不要为工具而悲哀，要悲哀就悲哀自己，想象是不是自己作为工具（人）只是付出却没有获得对应回报，如果是，那才是应该悲哀的。,前两天我在对女朋友说：“感觉现在没有多少时间学技术，技术都没有进步多少，大多都是不断熟悉业务”女朋友：“傻瓜，技术不是最重要的，技术如果不能带来商业价值，那就没人维护，做技术的人，千万不要抱着我恍然大悟，放下手上的 paxos made simple 去睡觉了。。。----后记----技术说到底还是为了提高生产效率，为了解决业务的问题而产生的，没有了业务，技术就没有了存在的前提，没了业务，搞技术的也只能失业。。很多人可能说那些造轮子，搞底层技术的人就不容易失业，实际上他们不容易失业真的是因为技术吗？部分是，但我觉得更多的是因为他们技术更加通用，比如云、分布式存储、操作系统等，不管哪个上层业务都能用到，这才是搞底层技术更加长青的原因。就算你是搞底层的，大多数都是可替代的搬砖。。。当然，不排除一部分真正的技术大牛有着无可替代的作用，但是这样的人毕竟是少数。 附,收藏了多年的文章，分享出来。许多年前，中国社会有一句流传甚广，但是错误深重的话：学好数理化，走遍天下都不怕。这句话没有流行十年，就被另外一句话取代了：造原子弹的，不如卖茶叶蛋的。对比前后两句话，前者的谬误就变得非常明显---技术男对生活有一种天真的看法，认为存在以下不言自明的真理：我只要专心搞好技术就可以了，其它的东西自然都会有的。没有那么自然的事，如果沃兹尼亚克没有遇见乔布斯，他现在还是一个电脑工程师，不可能连续两次前后亏损接近3000万美金，举办音乐节。也不会全世界飞来飞去，作为传奇人物被大众所认知。在这种误解之下，还有一种更为深刻的心理偏差：我不喜欢和人打交道，所以做技术工作最适合我。于是，就出现了那个著名的观察结果---当一个人如此倚重技术的时候，很自然地会把技术的地位提升到前所未有的高度。我不否认职业荣誉感的可贵，不过这里需要强调一个基本常识：这个世界的本质是人和人关系的总和，驱动这个世界运转的力量是利益和利益的分配。技术在这个世界里，过去、现在、将来都是配角。在技术男看来，乔布斯所做的事情“不实在”。这当然不实在，世界上有许多事情都不实在，比如说爱上一个人，或者被一个人爱上，这件事情并不是拿出技术等级证书和银行收入证明就能够完成的。因为它需要走出去参加聚会，需要一对一聊天，需要烛光晚餐和电影，需要做一堆没有逻辑也不能预期结果的事情。如果要一万人，十万人，一百万人，一亿人爱上你的产品，可能需要更多“不实在”的事情。因为程序和技能不能直接变成产品，产品也不会自动跑到用户家里，钱就会自动划到公司账户上。它需要不实在的产品设计，不实在的市场推广，不实在的商务谈判，需要一堆人拍胸脯、吹牛皮、说服另一堆人相信。技术在这个复杂的故事里，只是一个环节而已。如果一个人的手里只有一把改锥，那么，无论他在这个世界上遇见了任何东西，他都会第一时间想用改锥来两下子。这种行为有一道护身符，叫做：技术中立。在技术中立之下，似乎一切都理所当然。因为缺电，因为航运能力不足，所以纯技术手段的解决方案是修建大坝。至于因此造成的地震、生物灭绝、历史古迹消亡，那是无关紧要的小细节。因为技术需要，所以用克隆技术直接克隆人类，因此产生的伦理学、道德困境就不算是个问题。五十岁的儿子面对母亲的三岁克隆体，真的不会带来任何困扰么？从自己的克隆体身上取下心脏，进行自我移植真的不算是谋杀么？从技术中立的角度看，制造出一颗足以毁灭地球十次的炸弹，它的意义何在呢？专注技术这个概念，在一定程度上变成了封闭。只有技术世界里的事情才构成值得思考的对象，除此而外的一切事情都不值得学习和思考。许多技术男对于人文知识的认知几近于零，在网上成为狂热的“工业党”，原因就在于此。除了技术中立之外，价值观一塌糊涂，甚至以此为荣，认为自己超越了善恶的两端，达到了某种超然的境界。在他们看来，这张列表我可以继续开列下去，不过我觉得写到这里已经足够了。每次看到技术男在这个世界上撞得头破血流的新闻，我在同情和惋惜之余不免去想一件事情：如果技术男是洁白无辜的羔羊，在无法捕杀所有饿狼的情况下，还有什么办法能够帮助到这些羔羊？这篇文章就是我的答案，我认为羔羊应该长出犄角，能够高速奔跑，能够在群体中获取力量和保护。为了做到这一点，技术男也应该反思一下自己的想法，反思一下自己对世界和人类的认知。技术只是羊圈的栅栏，它不应该成为某种自我设限的牢狱，也不应该成为狭隘心态和狭窄视野的温床。在这都市每生活一天，都意味着要面对同事、上级、保姆、快递员、律师、中介、招待、保洁、门房、司机、导购、邻居、亲人、朋友，都要面对合同、邮件、文件、新闻、计划、财报、统计、日程表、商业策划案，它们都不是技术所能解决的人和事，也不是专注于技术就能自动消失的问题。而所有这一切，仅仅靠技术是远远不够的。单凭一把改锥，撬不开全世界的锁。,没事儿，悲哀的还在后头。等你意识到引以为豪的自己也是个一个工具的时候，你就麻了。,我从报这个专业的时候起，就已经知道这一点了。那年我去看望三爷爷，聊到选专业的问题，他说 “计算机只是工具，不能只学这个”，然后我告诉他说，我要学的是怎么创造工具，而不仅仅是使用它，于是三爷爷点点头。所以哪里存在什么 “突然意识到” 呢，是一开始就知道呀！如果这个问题想问的是，工具究竟有多大价值，那么我想说，经济基础决定了上层建筑，科技水平决定了经济基础，而每一次科技革命都是由工具的变革引发的，从钻木取火，到石器时代，到青铜器，铁器，火器，到蒸汽机，内燃机，到电力，计算机，互联网，人工智能，哪一步不是用一种工具定义了一个时代？如果这个问题想问的是，人在社会上的地位，那么我想说，不仅程序员是工具人，每个人都需要在社会上找到自己的位置，成为别人的工具，而另一方面每个人又都并非是无可取代的，时代的洪流滚滚，不会因为少了谁就停止向前。 强如奥运冠军，你也可以硬说人家只是给资本家拍广告的带货工具，富如王健林，你也可以硬说他只是执政者的缴税工具，智如诺奖得主，你也可以硬说他们只是扩展人类知识边界的科研工具。 所以 “不想当工具” 这种想法究竟是哪儿来的，难不成你想要统治世界不成？如果这个问题想问的是，社会资源的分配机制，那么我想说，这可能是问题，但绝不是程序员最应该关心的问题，在这个问题上，程序员暂时只能算既得利益者，不信你去看看别的行业？,编程是一种工具吗？我更愿意称之为一门手艺。所有能用来讨生活的技能，都可以称之为手艺，而程序员本身就是手艺人。和其他可以用来讨生活的手艺一样，没有什么可悲哀的。大到千古传唱的唐诗宋词，小到随处可见的街头巷尾，作诗填词是一门手艺，摆摊吆喝也是一门手艺。不同的是，有人借此流芳百世，有人淹没于滚滚红尘，有人靠此名利双收，有人用此生活无忧。伟人曾经说过，枪杆子里出政权，而枪杆子本身，也是一种工具，但正是因为这种工具，才有了今天的蒸蒸日上！所以，悲哀是悲哀者的悲哀，热爱是热爱者的热爱！无它，唯人而已！,不悲哀，先说问题本质编程对于普通人而言，就是一个技术，所有的技术都是工具公司企业也是工具，其目的是最大化股东利益，通俗点说，就是帮股东老板赚钱的工具所以在企业公司里的员工，无一例外，都是工具人程序员，工人，会计，前台，甚至包括职业经理人，都是为股东赚钱的工具人，明白了吗？为什么我不觉得悲哀呢，因为打从一开始，我就没有打算为了技术而技术技术是工具才符合我的初心，我学编程，是为了实现我想要实现的软件而不是为了那些简陋的英语单词和符号的拼凑能从简陋的英语单词和符号中看出美感来的人，我不知道它是怎么想的也就是我从学编程的那一天起，就不是为了编程而编程，而是带着某个目的去编程就我想要实现一个软件，我该如何用手中的技术，也就是编程去实现它怀揣着这个目的之后，因为目的明确，所以我学得很快，很多细节可以直接跳过不看了，用的时候再说，但是很多人因为没搞懂这个目的，所以经常在细节上绕来绕去，其实一点意义都没有就跟还有像但是我不一样，因为我知道这些东西是工具，所以细节可以不用太过于在乎，你知道这是做什么用的，就行了，细节用的时候，其实辅助编程工具会提示你，你都不需要去记，所以我学起来就特别快这也是在国外读书时候的秘诀，就是一大本书，你别把每个字都看过去，你应该速读，看每一段的第一句话，看懂，看不懂才看该段下一句，如果还看不懂，再看下一句……但是如果你看懂了，这一段就不看了，看下一段，其实出国时候的外语阅读训练，就是做这种训练，考过托福雅思gre的应该很清楚我在说什么，其实技术也是一样的，你知道这个工具是做什么用的，然后大概怎么用，行了其他的细节，在你干活时候，工具会帮你，比如java的ide，自动提示是非常常用的功能，如果ide还帮忙不了，那就Google咯，做到这两步，其实编程就轻而易举了然后我就赶紧用手中的工具去实现我想要实现的软件去了，然后进一步创业去了，谁神经病一天到晚对着技术在那边啃细节，那是书呆子就跟我们读书时候，我们经常可以遇到一些同学，这些同学不是说他不努力，他很努力，但是成绩就是上不去，为什么？他只是无脑的背诵记忆而已，都没有总结规律，这个规律在语文中就是中心思想，数学中就是各种公式定理，英语中就是语法规则，化学中就是方程式，但是几乎所有学科，都在帮你总结规律，你要做的就是找到这个规律，然后加以训练，熟练掌握规律之后，去考场上答题所以死记硬背的话，遇到同样的题型，改一点细节，他就不会了，那这样做成绩能好么？再努力也没用啊技术也是如此，你需要做的，就是找到工具使用的规律，然后剩下的，交给工具去完成,很长时间里我都很喜欢写程序，编程是自我认知的一部分，直到现在也是这样，只是不再那么强烈而已。我也有过题主这样的感受，这其实是某种轻度 existential crisis，也就是找不到存在的意义——当自我认知的一部分失去了重要性，当然会觉得失落。不知道题主之前把编程当作什么，技艺？特长？信仰？生活态度？遁世奇术？总之想必是放在某种超越工具的地位，而这并没有什么问题，对其他人来说处于这个地位的可能是琴棋书画，烹饪滑雪，翻修摩托，或者开挖掘机。我们会以超过平均值的热爱来对待某项活动，有些人可能会一辈子都保持着这样的热爱，他们无疑是幸运的。但忽然有一天你下头了，你开始像缺乏催产素和多巴胺的晚期情侣一样对你与热爱之间的关系产生怀疑。这也没什么问题，甚至应该祝贺你，因为与其说这是一种悲哀，不如说这是一种成长。每一次 existential crisis 都让人成长。那些以往被热爱支配的脑细胞空闲下来，甚至有点闲的发慌的时候，很适合思考人生的意义。如果你觉得编程只是工具，本质上与螺丝刀或者微积分无异，那你可以找找别的什么来成为你的下一个热爱，比如琴棋书画，烹饪滑雪，翻修摩托，或者开挖掘机。世界上好玩的事情很多，编程只是其中一个，每一次下头都是下一次上头的开始，上头过的东西越多，你的自我认知就越稳固，由于一个单点而失去自我认同的风险就越低。为什么很多人喜欢用「不做X的Y不是好Z」这种胡话做签名？因为它看起来显得这个人自我认知很多样性。不管你觉得编程是什么，客观上作为一种人类活动的编程其实并没有改变，所有的意义都是被赋予的，你说它是工具也好，是人类命运终极答案也好，它都不会有什么反应。也许有一天你又会觉得编程开始上头了，那你完全可以再把它供起来，社会不会因此给你一点点道德压力，甚至会有人为你觉得开心，比如我。,孱弱的知识分子们就不要在小布尔乔亚聚集地知乎做小布尔乔亚式的无病呻吟然后勾引一批小布尔乔亚式的回答了，不如来点联动一下,你以为的编程是这样的，在电脑前慷慨激扬，指点江山。实际上，大多程序员是这样的。也有客户不改需求后的欣喜若狂。认识到了编程是工具这一点应该感到庆幸。那些科研人员，不会以熟悉编程为自豪。编程只是他们实现算法的工具。其核心是科研能力，而不是所谓的编程技巧。有了编程工具，我们能让计算机为我们做很多事情。因此，我们追求的不应该只是编程这个工具。而应该是我们可以用这个工具做点什么事，解决什么问题。将编程这个工具与自己的专长、爱好结合起来，一定能发挥意想不到的作用。比如，平常工作忙咋整？写个代码花式陪女友。再比如，实现数据可视化。如果你喜欢三国，可以分析三国人物出场次数，形成词云。扩展阅读，怎样自学Python：
我编程写代码被我妈一直说成玩电脑打游戏，我该咋办？,,因为你没有买书。若你编程时电脑边上摆一本近千页的，密密麻麻有中有英的编程书。又若你时而敲键拍得噼噼啪啪，时而捧书念得呢呢喃喃，时而起身暴走来回踱步动若脱兔，时而托腮发呆陷入沉思静如处子……我写了30年的代码了，也经常在家里写，老母从40多看到70多，也就说我从10多岁的后来我父母有了自己的一台台式机。我在上面写了一个程序，在母亲节那天会于桌面展现一朵盛开的玫瑰 ，（几次我立于阳台，眺望远方，嘴上叨着烟。老人家怀疑我情绪不佳，还会过来搭一句：又在编译啦？因为这本书，我干脆做了个网站 ,我妈出去的时候我在玩，我妈回来的时候我在玩。我妈出去的时候我在学习，我妈回来的时候我在玩。我妈出去的时候我在玩，我妈回来的时候我在学习。我妈出去的时候我在学习，回来的时候我在学习。上面是个老段子了。你父母在意的不是事实，而是他们的认知。既然你写代码被说成玩电脑，那你以前肯定也有类似上面说的情况。归根结底，你父母不相信你，他们不觉得你是懂道理的孩子。对于这种情况你需要讲道理吗？不，你需要闭嘴。跟讲事实的人讲事实，跟自以为是的人说对对对。只要他们不会物理层面上阻拦你，那你就没有改正他们认知的必要。记住这句话。它可以为你减少无数毫无意义的争论。以上。其他同类答案原创段子关于“大部分人不需要真实”苏联，阿不，火星段子本题同款老段子每天一个发财小技巧（雾）,老爹告诉我们用魔法才能打败魔法所以在家人群里推送如下文章小伙月入过万，只因每天坚持做这事别再说这样学习是浪费时间了，看看大师是如何说的掌握了这种小技巧，和子女之间融洽相处21世纪大变革，游戏编程或将成为最热门职业,你误会了你妈，以及绝大多数长辈，领导的意思了。我妈原来也经常说我要努力跟她同学的孩子学习，我就很纳闷，她同学的孩子有在贷款公司拿着我三分之一工资成天打骚扰电话，有0.8的绩点要被大学劝退，到处找医生给他开抑郁症证明休学的。有的在二流公司当一个外包团队的员工。还有做传销，劝了我三个月做他的代理的。我也不知道我妈让我学啥。我常常想，为什么我妈连电视剧里面的奸臣的水平都学不到，你看人家严阁老至少知道说话对事不对人。后来我才发现，其实对于大多数人来说，在一个没有领导监督的环境下，他是不愿意说那种对事不对人的话的。换一句话说，无论我妈，领导，长辈，对我干啥事不满，其实他们很可能不是对我做这件事不满，而是对我不满。情绪大于事实。女朋友嫌你长的丑，你请来造型师，女朋友都会说你不会打扮。领导觉得你技术不行，你写个gayhub上几百星的工程，他都会因为你if判断后面直接跟动作而不是打个回车再跟动作喷你一顿。你妈烦你，你就是在家里看书看到双眼充血昏天黑地，你妈都会找到什么死读书，不懂人情世故，不会帮家里做点事之类的理由嫌弃你。所以不要纠结咋办，两耳一塞，情绪屏蔽。反正开学后就见不到了。,背景：某小厂游戏服务器开发，老婆山东人，结婚时去她家。早就有了解过她们家那边亲戚对IT不太了解，特别还是给游戏服务器敲代码的。一听就很不务正业很没面子。所以一直在想她们亲戚要是问起来我是干什么的应该怎么说。突然想起我们公司租用的云服务器是华为云。不如用魔法打败魔法？对！我是华为的电脑工程师！,这么说吧，是不是写代码一眼就看出来了。,我大学社团的同学还是计算机专业，家长不给买电脑的，说买电脑就是玩一用电脑就毁了，一辈子就废了，然后他大二编程考试要用，他们c++那些考试都是上机考试，(这哥们大一在纸上写了一年代码，学校向学生公开的机房都是那种古老的winxp2003，卡的一批，能不能开机都是问题，打字都能死机，更别说练习代码了)问家长要钱买，说他在学c#是计算机语言需要搞，他家长不给，说c++既然是一门语言就应该和学英语一样，买个单词书，语法书，作文书，背就行，要电脑没有用的，电脑只能打游戏，学不了语言，学语言只能好记性不如烂笔头什么的多抄写几遍就会了，笑死了，最后这哥们自己攒生活费加食堂打工一万多多买了个我感觉他父母确实有问题，他说他家长大一开学前甚至打算让他带诺基亚去学校，说手机就是毒品 大学生一瓶手机前途就毁了。就是那种不能上网只能打电话游戏只能贪吃蛇计算机不让用电脑，为什么要选计算机呢，他还说这专业是他爸给他挑的，服了,我在学java：玩我在学c玩我在学linux玩我在学神经网络玩我在学算法玩我在学网络编程玩我在搭一个网站嗯。我刚搭完一个网站嗯我加点班把这个交付了能拿一笔钱好的，不打扰了总结，他们眼里：有可见产出=正经事，无产出=玩。意识以物质为转移。方法：1，薅点东西做你的产出2，吹b画饼3，摆烂,想到了那个看心电图被病人投诉上班炒股的医生。我觉得你们可以交流一下心得体会。,我奶奶不识字，但是只要她发现我在长时间的看满屏字符她就会劝我：“休息一会吧，学习也要劳逸结合。”但我要是一直在操作小人蹦来蹦去，她就会变成：“休息会吧，一直玩游戏对眼睛不好。”,嗨，别提了。在相当大的比例内，老一代人，尤其是欠发达地区的老一代们，对计算机的理解几乎等同于游戏机。他们的逻辑是：电脑＝游戏机＝洪水猛兽至于计算机技术，数理化那么难都能学会，计算机能有什么难的？用到了再说。所以，一般而言解释是没什么用的……因为思维定式已经形成了。你说你在编程？他们不信；你说你在学习？他们更不信；你说你在打游戏？他们估计马上就信了……前几天我还遇到了一个语音输入写论文的神人，当然写的是结课小论文。为啥？我问他为啥，他说因为从小家里不让碰电脑，打字数度慢……按他的速度，一次作业要写特别久，所以才用语音输入法……噗……我问他学业水平测试怎么过得，他说当时练了好久，然后家里就不让碰电脑了……家长们可能自己也不知道……现代社会“打游戏”也是必备技能……,你这算啥，我去给经济学研究生上课，被我妈一直说成去学校上学…,我妈一直无法理解为什么我还没把自己饿死，在她看来只要我离开她的视野范围，一定是打游戏去了。,害呀，你别说写代码了。我今年大四毕业，不正赶上这疫情吗，从去年12月一直到6月都在家，论文都只能在家写。重点来了，只要我打开word写论文，我妈就开始喊，XXX你早上八点就起来玩电脑，一玩玩到半夜十点多，有没有你这样整天浑浑噩噩的？我给她解释这是毕业论文，她就会两眼一瞪：别欺负我没见识，人家写论文都是用笔写，后来整的没办法，只能每天把笔记本充满电，节电模式什么都打开，亮度调最低，连手机热点，到楼下公园里的亭子里写。中午回去一趟，充满电了下午继续。只能这样。整个毕业论文就是在这种情况下完成的。导师还嫌弃这不好那不好，我都羞于启齿这论文是在什么情况下完成的，我真的努力了，我真的尽力了......,感谢评论区各位的关心和建议，吐槽父母的回答我写了好几篇，但是这篇获得这么大的关注我也的确没想到。我现在真的过得很好，我已经6年不怎么搭理我父母了，我在北京，他们在俄罗斯对面，相隔2000公里，联系方式一律断绝。我留了我爸的微信，以防有突发事件（不过已经发生完了，去年我爷爷过世了）。我也尽可能把他们的影响降到最低，我任何一个亲戚来找我，我都会提前说：不要和我说我父母的事儿。不过失策的一点是，我是在工作一段时间之后才和他们决裂的，所以他们知道我公司的地址，所以在前年的某一天，我妈出现在了我公司楼下蹲我……让我心态不好了很久。这些事儿大多数发生在我中小学时期，那会儿父母即强权，稍不对劲就是打骂，小时候打，大一点骂，经济独立了道德绑架，如评论所说，完全的寄人篱下。反抗？当然有过，直接和他们讲理、离家出走之类的，都做过。讲理讲不过我，那就是高八度的吼叫，离家出走，总也得回去，然后又是更大的风暴，我对我爸的恐惧早已形成了思维惯性。唯一一次还算和平的离家出走，还是我中考的时候，躲到了某个亲戚家，中考过后没发生什么事情。做flash动画，是小学的时候参加网页制作大赛，我们队flash动画部分是我来负责。原回答里面的事情则是我初中的时候要给班主任做一个动画，作为一个活动的背景。我用电脑用得多，有玩游戏的时候（当年玩传奇私服、红警2、魔兽争霸、毕竟，我爸自己在电脑上，基本上只是玩那几个自带游戏，以及聊天。我妈比较离谱，当年很喜欢用QQ加一些不知道是哪的人视频聊天，哥哥妹妹叫得很亲，咱也不知道算不算精神出轨。我父母对我的不信任还有一例，我高中毕业的时候请我朋友帮忙拉了个配置单，给我家里配了一台新的机箱，花了2100，送回家去，在我大学某一次寒假回家的时候，在一个人不少的饭桌上，他们就疯狂想要证明我被人坑了，什么谁谁谁的朋友1700就能弄一台配置比那个好的电脑。我随口问了两句，电脑配置在他们眼里大概就只有内存的容量和硬盘的容量，其他的一概不管，然后我就被按头说是被坑了。核心原因我想的也很清楚，评论区有一位朋友说的也很清楚，就是这些东西他们真的不懂，但是他们还想要掌控我，还想要显得自己讲理，那自然就要想方设法证明我是错的。所以我也不明白为什么有人觉得我可以跟他们解释。回答这个问题的初衷也不是卖惨，虽然现在也变成了卖惨，单纯是我对父母控制这一话题有很严重的我一路走到现在，要感谢的人很多，比如坚定支持我高中去省城的两位表姐，我的几位老师，和一些无限包容我的朋友、同事们。我性格里曾经有很重的我爸妈的影子：极强的控制欲，极低的安全感，死要面子，不敢承认自己错了之类的，给我身边人造成了很大的困扰，而当我意识到这点的时候，我是极度恐惧的，到现在我也担心，一旦我进入了亲密关系，或者为人父母，这种本性会暴露出来，由我再去害其他人。毕竟，多年媳妇熬成婆。我也不知道我是否摆脱了那些，但这确实也成了我一辈子的事儿。至于受害者有罪论的几位朋友，我不知道该羡慕你们的清澈，还是羡慕你们生活比较幸福，但是我性格里面非常讨厌被误解，我记恨我爸的最大原因之一就是他几次严重的冤枉。觉得我通篇都是编的的朋友们，你们爱怎么觉得就怎么觉得吧，我也不明白我编这个是为了啥。我在家做flash动画，我爸觉得我碰电脑就是玩游戏，所以就在我后面背后灵看着我。我调了大概半个多小时，调出来了大概几秒钟的动画，我爸就跑我后面，让我播放，我一放，我爸直接暴怒：你折腾这么长时间就折腾出来这点儿？还说你不是玩游戏呢？还有，还是我在家做ppt，顺便听了个歌，打开了音乐播放器，我爸进门的瞬间看到了我的音乐播放器，然后说我在网上聊天。还有，我爸妈喜欢乱点电脑上的东西，导致电脑经常中毒，动不动桌面上就多出来点儿东西，然后他们就会说是我在家乱装游戏，实则我几个月已经没碰家里电脑了。还有，我更新系统，导致右下角出现了一个五角星（实际上是激活问题），我爸相信了网上的阴谋论，觉得电脑上出现了那个五角星，就是被美国监控了，随时可以偷你资料关你电脑。还有，我爸不知道信了谁的邪，说我在网上看视频，会损伤光驱。还有，我找工作准备面试（以及准备接电话）的时候，在家刷还有很多很多……最终就是，我一个一本学计算机的，现任程序员，曾经也在电脑店搞过维修的人，家里电脑坏了，甭管我多长时间没碰，那都是我玩游戏弄坏的。然后他们去找一个八竿子打不着的人来修……这么多评论了来回复一下：首先，这些都是多年以前的故事了，绝大多数是小学初中的事儿，最多到我上大学期间（Window未激活右下角出蓝色五角星都多少年前的事儿了）。我早就和我原生家庭决裂了，关于电脑能搞出来这么多事儿，其他方面的更加离谱的事情也不是没有，比如觉得我喝了一杯我都没见过的酸奶就打了我一下午，事后还觉得自己有理。还有，我小的时候让我每天晚上洗全家的袜子，有天我没洗我爸的，也被打了。以及我在学校和同学玩的时候坐在了地上，就罚我在家蹲了两三天，什么也不干，就蹲着。有关上一本这个事情，我可以补充一下，我人生道路上如果听了我爸半点，可能都完全不一样了。比如我选择去省城上高中，我爸疯狂阻止我（最后因为我免学费也就没拧过我，我们学校虽然是个民办吧，但肯定比县里强的。我们县的状元分是比我低的，报志愿还估低了20多分，估分报志愿又是多少年前的事儿了）；我大学泡实验室打比赛，不冲着什么保研考研使劲儿，也被我家里人槽了多少次了，觉得我毕业就完蛋，然而我找工作那年是最后一年窗口期，之后一年比一年难，晚个两三年我都不能找到现在的岗位。某些说我自身性格有问题的朋友，我承认我自身是有性格缺陷的，但是我的性格缺陷也来自于原生家庭，包括我现在也觉得我某些毛病来自于我爸的影子，也让我很恐惧。有关家庭地位，我从小到大挨打无数，我爸妈也特别喜欢PUA我，我爸80%的时间是以审问、说教的口吻和我讲话，20%的时间是把我当宠物玩儿，在我彻底崩溃之前，是根本没有反抗意识的，崩溃之后自然就决裂了。另外，个人比较反对身边统计学，不是没见过就是假的，父母的确是存在多样性的。论网友的阅读理解能力是多么强。以及我现在做flash怎么了？我只是想要借助它完成一个效果，刚好flash能实现，而且我认为比ppt的表现力强一些，那我用一下有啥问题？难不成就为了一个ppt上的效果，我需要两三天内学习一个新的东西并且完成一个效果？我之前在公司的发布会上发布一个产品，就用了flash做了点儿效果，嵌到ppt里面做了下表现，怎么了？原来知乎现在写一个答案的要求已经这么高了,没什么办法，之前小住在亲戚家，当时正好刚入门编程在学c＃，刚入门热情很大，每天都窝在电脑面前钻研。然而我忽略了一个事，这也是我后来才推测出来的，亲戚家有一台被雪藏的电脑，有一个贪玩的男人。懂我意思吧？这导致我一开始就被偏见了，那个男人每次过来，就看我有没有打游戏，没有就无趣的走开。亲戚每次看到我都是坐在电脑面前敲敲敲，又看不懂我屏幕上写的啥，只看见一个一个窗口弹来弹去。一口咬定我在玩，我当时没在意，玩味的说了句，确实在玩，玩的蛮开心的，以后我还可以边玩边赚钱。之后我就凉透了。我妈哭着和我说啊，你别玩电脑了，这十里八乡的全都说你是个fw，天天就知道打电脑，以后还要玩游戏赚钱，都传到我耳朵里了！我直接？？？。有些人的嘴远比你想的要尖酸刻薄且多舌。我也不好生气，跑去和亲戚解释，然后结果是，他先说，你学习，你学习天天笑声那么大，鬼信啊？我当时就傻了，学习为什么不能是快乐的事情？我解释一番以后，亲戚依然不接受，说，我孙子啊，天天一大堆作业在写，书都叠的那么高。我说我也这么过来的，考上大学了不一样嘛。再说了，我拿出我的c＃从入门到精通，我也要看书啊，但是实践代码就是要电脑嘛。这东西写纸上又看不出效果。结果呢？结果他又拿读大学读幼教专业的孙女说事，孙女都不用电脑，你天天用？我说我就是计算机专业嘛，我也没办法的。他眼看说不过我，好，直接一句反正你接触电脑我就是看不爽，你就是有玩游戏，游戏就是恶魔，你就是人品不行。泥人也有三分土气，我当时就火气上来了，好，我就是人品不行，我不仅要玩游戏，我的目标还是做游戏，我以后就是你口中的恶魔的创作人！后来？后来就是我妈道歉，我憋屈的标准结局。人情世故，对我这个标准直男来说还是太难了。有的时候这就是一种固执的偏见。现在回想起来，只觉得当时的情况根本无法破解，我的退让只换来他人的误解，一度解释全变成了,你这才哪到哪啊，我小时候写珠算作业，我姥姥看到了立即把算盘没收，找我妈告状说我边写作业边玩。我妈向她解释半天，她才相信小孩也可以学会“高深”的我姥姥是旧社会长大的，不太识字，在她的固有印象里，算盘是村里最有文化的人才会用的玩意。其实我妈那一代人也在学校里学过珠算，但是我姥姥当时忙于农活，连孩子的早饭都来不及做，根本顾不上我妈的学业。,"如果您的母亲对电脑的认知程度已经低到把写代码都认为是打游戏的程度。但是你却没有办法把您的母亲""忽悠瘸了""。我很有理由相信，您应该用无数个理由忽悠您母亲，让她以为您用电脑在学习，其实是在打游戏。导致您母亲根本不相信您的说法。您现在需要做的，就是去接个私活，赚个千八，然后给您母亲。这样您母亲就会认为您用电脑打游戏还在游戏里骗钱了",咱俩的情况恰恰相反。我坐在电脑前打游戏，我妈却说我编程太刻苦了，该玩会游戏休息一会。我非常生气，这游戏就是我做的，我正在测试bug，怎么说我是在放松和娱乐呢？  这是对我极大的误解。所以说，想消除误解，就先做个游戏出来。当初打游戏被抓分了两个阶段：  1 最初的时候，确实就在玩三国游戏，各种裂土封侯，走马圈地。好几次被抓个正着，网线被拔，室内放了一个摄像头对着电脑屏幕。基本上赤果果的玩，肯定是行不通了。于是我就在思考，如何既能够玩游戏，又能够学习。 先用时间来换空间了，最终是要玩自己喜欢玩的游戏，可是毕竟如何能玩会游戏，也总比一直玩不到喜欢的游戏好呀。 于是，上知乎问了一下，结果得到的回答就是，可以找一个带有源代码的游戏。那么编程语言那么多，有源码比较好学的，就两种语言，一个是python，一个是c。c则有很多商业化的游戏开源代码，python则更多是小品集的游戏，这些游戏简短，但如麻雀一样五脏俱全，非常适合边学习编程，同时又可以给父母信心让其能够觉得你通过学习是可以做出来的，你才可以放心让你去学。  2 于是，我就想到，如果我用，python的数据抓取，分析和可视化为借口，先仿造游戏做一个全国工作岗位数据图，就可以明目张胆地玩了，毕竟都是用的地图嘛。然后边玩，还边抄写数据和心得，掌握玩法。等万事俱备，就用python做游戏。 于是，我就找了一款c版本的《仙剑奇侠传》的源码sdlpal，这个游戏在当年火遍大江南北。下载后，直接就运行可以玩了。最开始的几天，我沉迷游戏之中，没有办法向父母汇报进展，只能拖借口说刚开始不太熟悉，正在熟悉环境。总这样下去是不行的。于是，又来知乎提问，得到了答复是，最好找一个python教程，针对那种0基础的，最好是图示化比例很大的那种教程，这样跟父母讲起来的时候。也方便让他们看懂。于是，看了几款知乎比较知名的几大python平台，有的是主打acm世界冠军的可能，有的是刷题的，最后在几个python大v回答里，看到一个叫夜曲编程的平台，说是有20多天的免费教程，是图形+app交互的方式，于是我在夜曲编程里回复了“免费教程”，果然收到了教程，我一直担心学不会，于是，就快速地点下去，怕浪费时间，结果，不是图形就是选择题，一节课下来居然没有任何阻拦。 拿着手机看着知识点，然后通过选择合适的代码组件就把知识点抓取，然后记录到了卡片里面，再通过思维导图替代书本的目录，用于关联记忆。 这下真的好，一边手机看教程，一边用电脑用python来练习学到的知识点，同时再把自己学到的知识点，插入到游戏之中。 伴随着，学习进度的推进，和在游戏中的步步深入，已经略有小成了。同时也把课程里学到的内容，通过用游戏里面的素材，使用python知识点复刻出来。毕竟图形转图形很是方便下一步已经在设想一个，能够自动识别脚步声和开门声，同时把游戏测试画面切换到编程模式的软件。,直接打游戏如果有两颗药丸，一颗吃了让你写代码100%不出错，另一颗吃了能让你100%发现并修改bug，选哪颗？,速度等同你原来的速度，其他各方面不变。第二个除了能发现自己的，还能发现别人的。,问扁鹊：“你兄弟三人，哪个软件开发水平最高？”扁鹊说：“大哥最好，二哥其次，我最差。” 文侯甚为不解。扁鹊解释道：“我大哥不等Bug出现就提前预防了，所以名声传不出开发组。二哥在Bug出现时就顺手解决了，所以名声传不出技术部。我呢，每天像打地鼠一般到处救火，所以在公司没人不知道我。”这选择，一目了然吧。,以前是给我 10 亿美元，但会有一只蜗牛永远追杀你，问我干不干？还有要我吃一小勺太阳会如何？更有甚者，直接让我强化一亿倍，问我是什么概念？我只想问这次的药丸是谁发？麻烦给我快递一下，谢谢,只要吃不死，就往死里吃！写代码 100% 不出错简直是我捏脚，呃，做梦的时候都想要的技能，bug 怎么能是自己的呢？bug 必须是别人才对！这颗必须吃，谁拦着也不行！谁拦着我咬谁！100% 发现并修改 bug，我要有这本事还至于现在单身？我早就化身超级英雄，以一只救世猪的身份出现在我亲爱的学妹面前：“咋滴？有 bug 了？乖，不慌，有我在呢，你让开，放着我来！”“呔，何方 bug！快快给俺小李现出原形！”我想要的甜甜的恋爱这不就来了！这晚上睡觉都得流一枕头哈喇子！！谁也别挡着，给我，我要吃！我是学妹的奥特曼！---好了，沙雕完了，该清醒一点了。现实一点，意淫这种超能力真是嘛用都没有，暗搓搓的爽一下就行了。作为一名数据分析师，选 SQL 和 Python 虽然不是 100% 不出错，但是也能很大程度上帮助满足我们的需要。其实我们说学习路线，其实就是对于一些 Python 视频啊，书籍的推荐以及一些比较好的做题网站。因为怎么说呢，编程语言这个东西的学习，都是“理论 + 实战”。理论是什么，就是与 Python 相关的方方面面的知识，这些知识来源于书籍和教学视频，再说实战，实战就是将你学到的理论知识转化为解决实际需求，在这个过程中，你提高了你的逻辑思维能力，提高了所谓的 debug 的能力。我之前在知乎上看到过一个问题，问的是“学习Python有什么推荐的网课，书籍资料，以及该装哪个版本的Python?”认真回答了一下：为了方便大家阅读，我把主要的内容拿出来供大家阅读。先说视频。这门课一共 131 集，大多数都是 Python 的核心基础知识，像 Python 环境搭建、基础语法、类型和对象、函数、面向对象等等等等，适合 Python 新手从入门开始学习。除此以外还包括了一些操作系统的内容，说实话操作系统啦这些课程也是对于我们很重要的知识，不管是在大学还是工作中都很重要，所以我希望大家在学完 Python 的时候可以看看操作系统的内容。黑马程序员出品，一共 547 集，我看了一下，可以说是很全面了。不只是涉及 Python，还包括 Linux 操作系统等的学习，每一集的时间也不是很长。如果你对别的不感兴趣，可以直接看 Python 那一趴的，从第 110 集开始。对于书籍的话，我在之前回答过类似的问题，感兴趣的可以看一下：我也说过，我最喜欢的是下面这本书：我感觉这本书的内容给我了一种很舒适的感觉，我很少有觉得读起来很舒服的技术书...整个的结构很清晰，内容简单但是不肤浅，整个基础知识的讲解简洁明了，一点也不啰嗦，很容易就看懂了。当然萝卜青菜各有所爱，这也仅仅是我自己的看法而已。编程语言的学习其实是边学边练，刚开始的时候是一边看视频看书，就把视频上的小例子，书上的小例子自己动手敲出来。对于实战来说，可以有两种：下面我将分别来讲一下这两种。刷题大家应该都知道，就是在刷题网站上解决如果你从事计算机行业，在你找工作的时候，数据结构与算法都是你跨不过去的坎儿。这里我推荐一个 Python 的数据结构与算法的视频。数据结构与算法的重要性不言而喻，作为一个前 ACMer 更是深有感触。北京大学这门课主要由这门课我觉得最好的一个点是，比较关注数据结构与算法的时间空间效率，这个是很多课程忽略的地方。我也有一篇旧文，详细的介绍了时间复杂度和空间复杂度，感兴趣的可以看下：时间和空间效率是数据结构和算法yyds，学会了这个你就学会了分析优劣，成长是不可同日而语。同时这门课也比较注重数据结构和算法的实践应用，毕竟只有真正用起来你才知道你是不是真的学会了，课程里的案例和变成习题建议好好做一下。刷题是一个很好练习和检验学习成果的方式，刷题直接在 LeetCode 上刷就好了。至于刷题顺序，我可以分享下自己总结的【这份清单我会一直更新，同样也会一步步的把站在初学者的角度，下面就是我为大家精心挑选的 LeetCode 题目清单，项目的话就先做些小项目练手。还是那句话，对于编程语言的学习来说，我在这给大家推荐几个我觉得比较好的开源项目吧，好的开源项目会对学习会有很大帮助，我这里推荐的都不是很大，结构比较清晰的开源项目。Python 写的命令行番茄工作法定时器。代码仅有 100 多行，不依赖其它第三方库。一条命令就能将文件安全地传送到另外一台电脑上的工具。基于 PAKE（Password-Authenticated Key Exchange）协议实现文件在公网的加密传输，发送和接收均仅需一条命令。给图片加盲水印的 Python 库。传送门：新！Python 炫酷进度条项目。支持 Python2.7-3.8 示例代码：SQL 的学习就很简单了，只需要买本书，然后看一下。但是只看书是不行的，还得再找个在线的练习平台练习一下。很多大佬都在推荐 《而我却有不同的意见，这些虽然经典，但是这本书介绍的节奏的更加平缓，并且用图示和关键字加粗更加生动地介绍知识，适合零基础的学生。对于零基础的朋友来说 Mick 的《SQL 基础教程》更容易看懂学会，非常适合入门者学习。如果只推荐一本书的话，我只推荐这本。当然我觉得非常好入门，可能对于初学者来说有些地方还是有些晦涩难懂。针对看不懂的内容，我在这给大家推荐一门 虽然是 MySQL，但是里面也有数据库的分类、SQL 介绍、数据库基本操作等内容。知识点很大程度上是相通的，你可以直接找到对应的知识点去看。但是说实话，像什么 MySQL 等的练习环境，对于新手来说，安装配置还是有点劝退的，而且交互性也不是很舒服。。我给大家找了 5 个在线的平台，优劣也做了描述，可以直接取：当然了，你也可能不喜欢 Python，你以为我只有这些嘛！这才是你最想要的 C 语言学习路线：这也是你最想要的 C++ 学习路线：,但凡过了试用期，也不至于问出这样的问题。第一个最大出路无非是自己能单干搞点私活。至于第二个，那就是大多数公司能把你捧起来的神。,编程爱好者程序员：选第一颗，因为代码一次写对好酷！想要影响力更大的程序员：选第二颗，一个人写的代码是有限的，能看出很多其他人写的代码中的漏洞并发现问题，更有前途。鸡贼程序员：选第二颗，这样只要被人随便写，我都可以改好，等同于拥有了第一颗的超能力。精通超能力漫画的程序员：慢着，这两颗药丸带来的超能力buff时间多少？真正的程序员：现实一点，不要yy这种超能力了。老谋深算的程序员：若真有这种药丸，不管谁造出来的，虽远必诛！,一般人：第一个有工作经验的程序员：肯定选第二个，写代码不出bug，但该不会写的功能还是不会写；会修各种bug，在公司里等同于神习惯卡超能力bug的我：第一个，然后脸滚键盘打出解决,问这种问题的一看就不是老程序员，老程序员一般都会毫不犹疑的选第二个。几乎只有非程序员（比如在校计算机专业学生、其它领域的研究员）才会经常不断的写新程序，作业也好、课设也罢、或者研究过程需要临时编程演算什么的。这些不用形成正式产品，不用太考虑质量，也没有广泛的用户群体给予“测试”反馈，更不用考虑后期长期的面向甲方爸爸的维护。所以他们可以有恃无恐的写新程序。而真正的公司程序员，长远来算差不多三天写bug三十天修bug（自己或其他人的），这还算是不错的，有些人大部分时间都写不了什么新程序，一直在测bug修bug。而且几乎没有程序员会追求程序一写出来就没有bug，因为有bug也没关系，只要再改就行（第二个技能正好）。而且任何程序都有它的运行场景和范围，范围内工作正常，没有客户抱怨，那基本就可以看做没有（紧急）bug，都可以从长计议。但是几乎所有程序员都会经常面临被紧急bug弄到焦头烂额的时候，当程序员被bug逼到茶不思饭不想疯狂掉头发的时候，你跟他说“兄弟，我这有颗药吃了就能立马发现bug，以后都不用愁修bug。” 那甭说免费了，折寿十年他也要（反正他这么熬下去也得折寿十几二十年，还没有什么前途，996.ICU可不是说着玩的）。写程序会出错才有编程的乐趣，如果一写就对，写出来就不用改，那将失去编程甚至合作编程的大部分乐趣（况且刚写完就没问题心理不慌么～）。但是这并不会减少你的工作量，只会导致你需要写更多的代码，而代码，是永远写不完的！这个技能只适合一种人，那就是给自己打工的人。给自己打工的人的最大乐趣是用最少的人月，完成最多的有效产出，获得最大的收益。而代码一写就对，无疑是能让收益最大化的技能。但是这个技能并不能保证你成为一流程序员，因为它有两个大的漏洞，一个就是程序员不光自己写程序，程序员大部分时间需要审核或修改别人的程序，这时候第一个技能没用，除非你把别人的程序都重写一遍。另一个大漏洞就是你不一定有那个知识水平写出程序来。你都没能力写出程序来，谈会不会出错则完全没有意义。反观100%发现并能定位bug，这个技能简直是打工人的利器。而且这个技能不完全受上面“漏洞”的限制，因为定位bug并不需要你对整段程序都有全面的理解和认识。比如有一个空指针访问的bug，你只需要定位是哪里产生了这个空指针就可以了，但是对于一个复杂程序来说，这有时是很难定位的。而你100%定位bug的技能就可以让你省去很多时间，你还可以自己选择什么时候说出来，先慎一段时间，然后经常在别人之前指出问题还可以让其它人对你肃然起敬，这技能简直收放自如，想装苦时可以装苦，想装B时可以装B。写程序有bug是极其正常的事情，只要不是经常出特别严重的bug，则完全不用放在心上。而且你和别人产生的bug，还会成为后面程序员的performance来源，甚至营造更多的就业岗位！哈哈哈～而100%发现并定位bug的技能可以在自己给自己review代码时能马上定位自己代码的bug，更重要的是自己给别人review代码时也能马上精确的指出别人代码的bug，还能告诉他怎么改。这是高级程序员（上不封顶）最需要的技能了，各大项目的maintainer都会争先恐后的招揽你，而你则可以游刃有余的游走在各大项目中，享受各个公司给你开出的技术顾问的礼遇。ps: 问题本身就有不少bug，大家不用过于纠结，这就是个娱乐性问题，一看一乐就好。毕竟程序员除了工作以外，调侃娱乐一下也是需要的嘛。如果对专业方面的内容感兴趣的朋友，可以翻看下面的README，看看有没有中意的。,小明认为开发的乐趣就在于解决问题，于是选择了第二颗药丸。接下来的一年，小明乐此不疲地修复了Linux的一些重要问题，成为小有名气的Linux内核专家。但Linux太大，太复杂，光内核就有几百万行代码，小明一年下来只修复了个位数的重大缺陷，这还不足以让小明成为首屈一指的专家，他决定继续努力。墨先生选择了第一颗药丸。墨先生高峰时一周曾肝了6000行代码，其中debug至少占一半的时间，无他，只因为TensorFlow1.x调shape实在太麻烦了。“速度还是原来的速度”就相当于墨先生一天至少可以写2000行代码，还不用写吃完药后，墨先生悄悄成立了一家公司，开始开发。第二年，墨先生开源了日后成为破解技术封锁最重要武器的“药丸OS”，拿到风投，买了游艇和别墅，同时，他还招聘吃了第二颗药丸、擅长解决bug、在业界小有名气的小明负责组织开发内核之外那1900万行代码。,第一颗第二颗以下内容纯属虚构，狗头保命。话说某国12305在抢票的关键时刻总是卡壳，民间抱怨连连。作为特邀专家的我，早上开开心心吃了药，溜溜哒哒过去到铁道部开发部门控制中心。问题十有八九在消息队列处理模块。背着手装腔作势翻看了30秒（29秒用于装深沉）代码，突然心头一悸。立即要求小弟用文本编辑器打开某个文件，定位到某一页，当当当，敲三下屏幕后，我一言不发地，在他身边慢慢走了十步后离开。小弟愚钝不解。他苦苦看了一天代码，忽然灵光一闪：他仔细研究了第三行代码十次，终于发现队列机制貌似有大问题！小弟感叹道：大海哥，真不愧大名鼎鼎是测试工匠阿！咦？他人呢？大海哥，他被一辆军绿色悍马接走了。某个导弹研究所设计中心里，一堆科学家正急得象热锅上的蚂蚁。他们设计的超远程巡航导弹在百发百中一百次后，在一次重大汇报演习里失误，大庭广众和众目睽睽之下，一发打飞 。领导要求归零，可是导弹又变得百发百中，错误不能再现。我赶紧吃了一颗药，溜溜哒哒走进指挥中心大门。指挥中心所有人都紧张地不由自主站了起来：测试工匠终于登场！我坐到屏幕前 ，装腔作势看了一下几个模块，感觉4号模块不大对，要求他们调出4.5模块。4.5里的4.5.7感觉不好，调出来。我心头一悸，嗯，4.5.7.9不对劲，调出来。这个正则表达式谁写的？有特定情况下不对的意外。专家们一小时后才醒悟理解看懂，他们感叹道：咦？他人呢？大海哥被一辆黑色牌照防弹车接走了。航天口，载人火星登陆任务中心。火星上的三个勇士48小时内必须起飞返回地球，可是起飞测试指令火箭就是不响应，即便宇航员手动启动也没用，整个指挥中心都毛了。中心几百号人，看见我走进来，全体不由自主地起立，等我走到主控计算机屏幕面前，四块大屏幕上全部是密密麻麻的代码。刚吃了药的我大手一挥：换一批，这批无异常。大屏幕开始翻页，屏幕花花绿绿闪闪烁烁，我站在大屏幕前不断挥手，眼镜片明明暗暗。中心工作人员窃窃私语道：“谁说十分钟后，我忽然心头一悸，大喊道：屏幕停止了滚动，量子停止了波动。全场鸦雀无声，麦克风递送到我面前。我清了清嗓子朗声道：们，这行汇编代码执行时取的数据段数据，它的存储区可能被宇宙射线打坏两位，纠错系统刚好不能发现。技术人员立即进行模拟并证实了这个BUG，纠正指令发向遥远的火星 。航天中心负责人感叹道：大海哥，真不愧大名鼎鼎是测试的匠人阿！咦？他人呢？大海哥被一辆白色专车接走了。航天专家们感叹道：工匠就是这么忙。辛苦他了。我从迷混中慢慢醒来，熟悉的白色的墙壁，白色床单，白色桌椅，一身白长得很像迪丽热巴的美女小护士微笑俯视着我：我看了看病号服，激动地说：“护士，这个药绝非凡品阿，药效SSSS级，可以变身工匠改变世界，比如我在载人航天中心。。。”护士小姐姐温柔地打断我：“啥都甭说了，我都知道。上次几乎要灭世的外星飞船BUG也是你在打野的时候一抬头看窗外的时候无意中发现，由地球卫队瞄准命门一记激光炮过去打爆的。 可你反复说是药好， 这么谦虚谨慎找理由配合吃药的病人本院少见。 谢谢你，你对我真好。”你刚要争辩，却见她她微笑着坐到床边，一手拿水，一手拿药，说到：我努力想伸手去接，可是憋气不能动，仔细一看被约束带紧紧捆绑着我。我拼命挣扎想接过小姐姐的药，拼命用力想碰到她接近她。。。。于是我醒了 。完。,"当然是第二颗啊，这还用问？第一颗有毛线用？说个比方吧，张三写1+1=2永远不会错，但张三傻，永远只认识1和2，其他的数字都写不出来，这样好吗？第二颗的话，这可不得了，这个能力的强大可不是你能想象的。我们知道来一个具体例子吧。比如x=1当π中含数字串a=""782......3""(随便写)，x=0当π中不含这个数字串。首先π是可计算数，所以程序一定能被我编出来，比如穷举每一位小数。然后这个问题和停机问题差不多。①如果π中含a，程序在有限步后找到a就停机，输出""x=1""，②如果π中不含a，程序永不停机，无法输出""x=0""。现在②情况下，程序陷入无限循环，就是一个bug，如果我吃了题主说的药后能修复这个bug，输出x值，就完成了一个普通图灵机不可计算的任务，达到了图灵度0'的水平。事实上我可以走得更远。对每个正整数n，我们把之前例子中的π换成π^n，都可以提一个类似的问题。把之前例子里求x的程序加一个参数n封装起来，得到M(n)，之前那个就是M(1)。再定义一个十进制小数c=0.xxx......，其中小数点后第k位是M(9k)～M(9k+8)运行输出的x(n)之和。然后我们又可以问，c中是否含有数字串v=""782......3""？假设有一个带有计算能力为0'的谕示机的图灵机X，对每个n，都能在有限时间内判定M(n)并输出x(n)。如果c中含数字串v，就存在某个有限的n，使得x(1)～x(n)的结果能判定v存在，但如果c中不含数字串v，那么X的运行也陷入无限循环，永不终止。现在我发现并解决了这个bug，就解决了关于X的停机问题，也就达到了图灵度0""的水平。以此类推，吃了题主的第二颗药后，对任意n∈N，我都能编程解决图灵度为0(n)的判定问题。也就是说我的能力达到了整个arithmetic hierarchy(PS.比如哥德巴赫猜想和",必须是第二个！写代码100%不出错依然只是一个码农，顶多算一个不错的码农，在公司只不过是一个无情的编码机器，业务代码一大堆堆你身上，撑死了老板觉得你靠谱给你涨薪30%，让你做个骨干程序员。能100%发现并修改bug这可是大杀器，神一般的存在，任何公司的任何产品都会面临各种复杂的线上bug，非必现bug，要知道有时候团队为了解决这些bug花费的人力物力简直是不可估量的。嘿嘿，这个时候你一上去bug就立马解决了？还能帮其他人发现bug，这可是要快速晋升的。举一个栗子，另外，有了这神技能，还不一定需要打工了，积累点口碑和人脉后做个自由职业者，专门帮一些小公司解决各种稀奇古改的问题。这个来钱那可真不是码农可比拟的，IT行业的一个知名大V左耳朵耗子曾经就干过这个，就饿了么一单一个月就是10多万，当时饿了么在快速扩张期很多服务器的高并发/高可用的bug团队解决不了，就请了左耳朵耗子做兼职技术顾问，一周只用去1天，解决问题就好。很多人认为优秀的程序员就是coding厉害，其实这都是误解，真正牛逼的程序员不光coding要厉害，更重要的是debug的能力。现实中没有这种神奇药丸，但有如何成为debug高手的方法论，曾经在360带几十人技术团队，同时研发几条业务线。参与过的产品，日活过千万的有一款，过百万的有三款。这个过程中各种稀奇古怪的bug见过不少，也一一解决了（不然估计就要滚蛋）。编程领域流传着一句话：必现的bug，都不是bug。因为好复现，就容易解决，代码一直跟下去，或者看看真正困难的是偶现bug，甚至那种概率千分之几，但后果严重的bug。解决他们就需要详细的日志Log，尤其是关键点上的信息，非常重要。顺便推荐一个经典的github项目，这个项目收录了程序员需要学习的方方面面，包括计算机经典书籍、经典大厂面试题、各种图解tcp/ip、操作系统、在360积累的soa、网络相关核心文档、程序员成长超全攻略等等:程序员+google=好的程序员，这句话真的没错，很多技术bug，当你毫无头绪之际不妨google下，可能不少人遇见过。当然，最关键的是搜索的关键字，这取决于你对bug现象的描述，越言简意赅搜索到的信息反而越多。这个方法在实在束手无策之际不妨用用，用法也很简单，当你不确定哪一块新增代码引入问题，就尝试注释一半代码看看程序是否OK。不行再换另一半代码注释掉，很快你就可以缩小bug的查找范围，进而定位问题。算法很多程序员朋友并不重视，认为这东西并没有什么用，实战中遇不到呀？其实在很多性能bug中，引发的原因就是代码实现的时间复杂度和空间复杂度导致的，这个时候不清楚基本的算法压根寸步难行，无法做任何调整。反之熟练掌握算法就能很快进行调优，有的时候优化后甚至都不需要加服务器。更别提算法是大厂面试和笔试的必考题，原因也在于大厂需要有筛选方法来判断你是否有成长空间。顺便送大家一份经典算法资料，是一个阿里P8撰写的，如果你能吃透，那我相信80%的技术面试都会不在话下：可以采用一些工具来模拟前端或者后端，制造假数据、假操作。有了这些工具之后，把你怀疑可能出问题的情况模拟一遍，观察是否会出问题。其次，遇见一些极端情况，比如怀疑是其实很多bug会变着花样反复出现，俗话说好记性不如烂笔头，把解决过的问题记录下来，并且做好索引，下次遇见可能相同的问题，先检索一遍，搞不好就找到答案了。特别是引用了第三方代码或者是开源代码导致的问题，官方文档对应的部分反复看看，可能问题就解决了。比如很多线程注入的工具，你开启后，但凡是一点点依赖线程顺序的bug都会从偶现变为必现。这个相当于主动把代码运行环境变成地狱模式，比如你的一个线程的结果依赖于另一个线程的输出，但你忘记加这个时候加入这种工具，它直接让某些情况下另一个线程运行速度变慢（我猜大概率是加了个sleep(1000)），结果你的程序就崩溃了，崩溃堆栈直接打开，迅速定位，问题解决！比如，某些系统没有完善的崩溃报告，虽然也有dump，但是分析出来的另外，对于想在计算机行业卷的朋友来说，夯实,当然选,有一个造访主人的客人，看到主人的炉灶的烟囱是直的，旁边还堆积着柴草，便对主人说：‘重新造一个弯曲的烟囱，将柴草远远地迁移。不然的话，会有发生火灾的忧患。’主人沉默不答应。不久，家里果然失火，邻居们一同来救火，幸好把火扑灭了。于是，主人杀牛摆酒来感谢他的邻人。被火烧伤的人在上位，其他的各自以功劳的大小依次坐，但是没有请说改“曲突”的那个人。,我选蓝色的那颗，吃了能隔着屏幕给题主一大嘴巴子的那种题主但凡写过一个月程序，就问不出这种挑衅的问题来。,Update:果然牵扯到因果律的不能随手作答。毕竟所有的因果律，从来都是副作用更好利用。第一颗暂时看不出什么可以利用的副作用，因为很有可能“写代码100%不出错”的意思是“写不出不出错的代码”，当你试图写出错误代码时候，或者停电，或者台风，这些都在因果律的正常射程之中。但第二颗就不一样了……第二颗不存在前置发动条件，也就是说，因果律不能阻断你发动第二颗效果。我们可以随手写一个带bug的程序，比如“输出于是我们可以愉快地改BUG了觉得六个问题一定会解决？到第五个问题解决的时候找几个新问题制造BUG即可剩下的是原来的废答案……仅供参考，毕竟是没想到“第一个可能是废能力：当因果律有生效前提的时候，你一定要权衡生效条件和生效后果哪个更难改变。第一个能力，写代码100%不出错，速度等同于你原来的速度……第二个能力，100%发现并修改BUG，发现BUG的速度等同于你原来的速度总觉得这两个都不是什么好东西。毕竟第二个没改掉“发现BUG所需的时间”,"当然选找bug.你自己写代码没bug用处不大。最多解决10%的问题。大部分bug都出现在系统整合上（大白话讲就是你没bug, 别人写的代码有bug。以及你和别人的都没bug但合一起就有bug。",第一颗药丸看似鸡肋，实则鸡肋。普通人或者是编程能力很一般的人吃完之后，几乎没什么效果。But，它更像是特攻宝具，对于编程有着这个库那个库我都会，这个算法那个算法我能熟练掌握的前提，现在还有写代码100%不出错的顶尖BUFF加成，这意味着什么？你可以一边听歌一边写，一边看剧一边写，通勤在路上写，排队买奶茶时写，只要醒着你都可以一直写。工作轻轻松松，私单接到手软，财富自由指日可待。当然如果你足够地积极进取，你也可以持续地学习知识，毕竟对于你来说，之后最有挑战的事情可能就是学习了。学得越多你就越牛逼，越牛逼能做更多的事情，在输出这块你已经是前无古人后无来者，你要做的就是不断地进行输入。综上如果你知识量不够，只能编写一些简单地排序代码，你吃了第一颗药丸，效果几乎也是微乎其微的。所以普通人请出门右转，吃完之后，方圆几十里的IT公司的测试岗位员工瞬间失业，因为他们已经失去了价值。几十万行的代码放在你面前，你也不会面露愁色。鼠标滚轮能拖多块就拖多块，最好是七八个屏幕一起摆在你脸上，同时翻滚。你用最快的速度审完之后，心里已有定数。你也懒得跟周围人解释bb，直接上手就干，当然你也可以一边看热映电视剧一边修改，轻松写意地就之前十几个人要干几天的活干完了。从此之后，你就成为了神话，找你的基本都是大公司，中小型公司你都懒得搭理，当然他们也请不起你~钱吗自然是不必愁了，名声地位你也基本都有了，到时候你还要雇几个美女经纪人，像CEO明星那般细细地安排行程。市场永远有需求，所以你要做的就是吃吃玩玩，等到银行卡里余额不足时，再出去干个几票。等下，这样来看技术大牛也该选第二颗药丸了......,不不不，第二颗药丸药效太厉害了。弱化一下：不用解决bug，只要100%定位bug，就已经保证一辈子不动代码还能吃香喝辣并且名正言顺当上业内知名的技术专家了。就像那个故事一样：9999美刀告诉你在哪画线，至于最后画线的1美刀，让别人挣去吧。至于第一颗药丸？说破天了也就是个高级工程师。,"你们有没有想到深度学习的功能？我猫狗分类能做到100%分类正确，那你觉得我是神还是不是？这个问题里面第1个选项没有包含工作量和程序的技术深度。怎么叫做100%不出错？一般的代码在没有并发的时候不报错，这个代码在高并发底下报错，那这就要出错吗？如如果我随手写的代码，哪怕只是一行，他不管多大并发量都死活不会出错，不管多少线程竞争，他的同步状态都一定是正确的，还得包含性能指标，比如说我这个代码能保证一连串的微服务调用最终出来的结果绝对不超时（我说单次调用总体时间不超过0.01秒就0.01秒，不超过0.005秒就0.005秒），那我觉得这个100%不出错的能力很强啊。如果做个100%识别率的CNN，把VGG , ResNet这些的正确识别率爆成渣，不香吗？做个100%识别率的RNN，把BERT爆成渣也很香。但我觉得你们还想着拿选项二去修改别人的代码？我都巴不得自己做不到这一点，反正死活做不到，要么重构，要么大家双手一摊。因为这种东西急着现场一定要把bug改掉的，你通常是在加班的情况下，说不定还是在甲方的人看着的情况下。我根本就不想变成超人，不想上班。按照选项一随手写几行hello world改变一下世界，出出教程做做直播不爽吗？就算有选项2这个能力，都不想再去伺候他们了。",功能上第一种只能在自己身上起作用第二种你就有发现bug的能力了，能发现其他所有人的bug，简直就是
自学简单编程可行吗？,如果可以，具体去哪里自学好呢？就是把电脑的一些知识都了解一下。,自学的话，最好根据个人过往的学习毅力，理性做选择，这样真能学成的概率大点。先说下我自己的情况。有目标才不会学偏学泛，导致学而无用，浪费时间。可以选择自己平时喜欢的网站/WebApp作为练手模板。现在不是2000年，就别再被各种三流的老师忽悠去学做枯燥的「学生课程系统」了。2019年的我们有更好的选择，诸如浅copy微博，B站等等，关键是你喜欢。新人入门，浅copy练手模板就行，主要目标是学会「增」「删」「查」「改」内容。麻雀虽小，但五脏俱全，在实际的工作开发中，60%代码都是写这些东西。所以，学会并熟悉跟其相关的技术知识点是最必须的。这里以后端为例简单说一下。主流语言的基础知识都汇集在此，而且有案例哦，非常方便新人快速了解知识点。先别去搞那些要复杂的配置，很影响的学习激情，先看到「hello world」才是关键。。记住，是跟「完成任务」有关的。（都 1w 收藏了）（点赞，评论，给师兄点正反馈^-^）接下来，我们就逐一介绍6个主要的学习任务。它们彼此互有关联，由易而难，循环渐进。具体来讲，就是做一个展示内容的页面，目标是搞懂html、css的基本语法，明白一个简单的页面由哪些东西组成。最重要的是，这个任务门槛低，完成时间短，能让你快速看到小成果，学起来也更有动力。在搞定展示内容的基础上，尝试动态填充内容。这时，你需要初步接触Linux、部署服务软件、数据库Mysql、语言框架，开始有一定难度了。可以分两步走。第一步是，先不管数据库，把数据写死在编程语言中，然后学会把数据显示到模板中。目的是学会使用数据和遍历数据。第二步是，在完成第一步的上，学习使用数据库。目的是明白SQL的语法。这个很关键，登录功能是多数应用软件绕不开的核心模块。目的是了解session、cookie这些经典知识，以及初步接触完整闭环的功能逻辑。在有用户登录，和动态列表页的基础上，我们加个发布功能。目的是学会新增数据，并把前面的所有任务内容串起来，进一步明白业务从前端到后端的大体运转过程。巩固加深对业务的开发流程的认识。（不考虑各种复杂情况）分析业务是程序员的必备能力。平时使用web和app时，多留个心眼，想想看这个功能的数据结构是由哪些元素组成。目的是养成系统化的业务思维，这对更好地学习编程非常有帮助。有两个好处。其一，可以帮助巩固原有的知识，起到温顾而知新的作用。其二，有深度的copy，意味着业务逻辑复杂了，技术逻辑要求更缜密，这能促使你或多或少接触一些中高阶的技术知识点，实战能让你更深刻地理解它们。其三，自学找工作，当你完成以上所有任务时，你就已经达到入门程序员的水准。1、如果条件允许的话，请把你学习过程的每一个大知识点，都梳理归纳成文章集，放在一来，是让自己看到努力的硕果，增强信心。二来，是它们能丰满你往后求职的简历，增加谈资。总之好处多多。2、如果你是学后端的，git、redis、nginx、3、有人打趣说：“感觉不懂英语学编程，跟瞎子抹黑一样，得慢慢摸，才知道是什么。英语好，起码是睁着眼睛能直接看到东西的。”4、预备一本技术的剩下的就是去实战了，去积累经验。有经验，才能配合进一步的学习，真正理解中高阶技术知识的作用。那去哪实战呢？必须是去工作，这个法子最实际。闭门空想着造车，实战性和锻炼性不够。找工作的这里不详细叙述。具体就是找合适的题型，刷起来，然后认真做好一份简历。有疑惑，可以关注私聊但如果「新人A」一听，就不假思索，二话不说，买来一本500页的模式圣经、一本800页的算法宝典，开始从头啃到尾。那么，能不能学好不好说，但是学到崩溃是必然的。多少业内人都没学透的东西，部分也就嘴上说说而已，而他当真一口闷，兴致不被磨光才怪，直接从入门到放弃。即便「新人A」真能生吞20多种设计、几十种算法、也用处不大。因为他的业务经验缺乏，不足以支撑他对理论实际用处的理解。一个月后他就忘得差不多了，很浪费时间和头发。毕竟人家是上万元的学费，必须拉长足够的课时，才能让学生觉得物有所值。但是单靠零基础的自己，加网上的碎片文章和视频，其实想少走弯路有点难，时间充裕倒无所谓，算磨练自学能力。有条件的情况下，找个有经验的业内人士，帮你规划学习路线，阶段性地验收你的学习成果，查缺补漏，防止跑偏，这样会比较高效，又省心。最后，我想跟大家分享一个朴素的心得：希望对你有帮助，祝顺利。现在的朋友点起赞来，都这么含蓄的吗？来，左下角，大胆一点！卫星ktshixiong，深度职业规划＋/*/*→ → → （4000+字，推荐收藏备用）→ 最后，再次感谢大家的支持。,正确的学习方法、学习路径，不要说简单的编程，转型都是可以的，不要去学考验人性的C/C++、Java、汇编等，这些东西已经不适合你，推荐你去学Web前端（HTML、CSS、JavaScript）、去用PHP搭建网站、或者学Python（取代VBA来提升办公效率，替代Excel、PowerBI来做数据分析、可视化）、小程序等，一周可入门，好玩又好学，对工作有帮助，深入可提升工资，也不排除可转行；2、不建议你学3、不要去买书来啃好几周，不要不动手光看视频光看书，学技术一定要先从安装开发环境开始，4、5、6、如果你想快速入门，建议找个人指导你，比你买书、自己去翻视频、自己摸索要强得多。如果你是想系统学习计算机科学的专业知识，推荐花两三年的时间按照“科班式”的方式来学习国外名校的计算机课程：,本回答首先分享了如何选定学习方向，自学编程主要有几个阶段，学习过程中有哪些注意事项和学习方法，最后分享了目前权威的学习资源，如果对你有用的话，点个赞吧。首先要选定编程学习的方向，例如 Python、C、C++、Java、JavaScript 等等编程语言，你最好先去查一查都有哪些编程语言，每种编程语言都侧重于哪些方向，例如 JavaScript 主要用于 Web 前端开发，Java 主要用于后端开发，Python 在数据分析和机器学习等方面有较好的应用。不同的方向有着不同的吸引力和特点，你多了解一下，选一个自己感兴趣的。接下来就是学习编程，那么在看书学习的过程中，有一点要记住：重要的是学习编程思想，这个功能是怎么实现的，为什么这么实现，作者是怎么想到的，其次才是敲代码，学习好了思想以后，你可以自己敲，模仿敲，再对照着检查自己代码中存在的问题。那么在自学编程的前期和中期，能够完成前五项就是取得了很不错的效果了。初级程序员，涉猎广泛，但都是浅尝辄止。这是很多人面临的问题，而在编程学习则是需要实际操练，加深体会，不断深入的一个过程。在这个回答里，我想说一下初级程序员应该如何提高。想要培养一项技能的最好的办法，就是将他融入到我们的生活并成为我们的爱好。其实说白了，就是让这个爱好成为一个习惯，一天不去做这件事情，都会觉得少了什么。在不知不觉中，这个习惯会像滚雪球一样积累起来。对我来说，养成这种习惯首先就是要对“拖延症”说不。比如，你想锻炼下自己的写作能力时，但是没有好看的本子，没有好的灵感，没有安静的环境....总之就是找各种理由一拖再拖，最后就不了了之了。为自己设定一下，每周拿出几天，每天拿出几个小时，编程学习就这样慢慢步入正轨。对待编程学习，我们没必要像健身狂人那样一口气做到筋疲力尽。与其直接编程2小时，我们完全可以先做40分钟、然后休息5分钟，整个过程重复4次。很明显，40分钟这样的短周期更容易坚持也不会带来多少压力。不过这样的方式应该配合更为灵活的执行思路。如果你感觉状态很好，而40分钟才刚刚完成热身，那就继续做下去并努力让自己抓住这种状态。向大家推荐蕃茄工作法，这是种学习新型技能的良好机制，推荐各位认真了解。在确定好学习方向和当你选好方向，认真学习基础知识后，学习一部分的知识，就结合项目做一些实践，已明确自己哪里不足。并且做项目能增加学习乐趣，给自己提供一些正反馈，让学习变得有趣，让自己有足够的动力继续学习。学习编程不能闭门造车，经过这几年的编程学习，我认为想要提升编码水平的最佳途径就是多看、多写。看别人的代码，看一些程序员大佬写的代码，看一些标准库的源码，仔细思考他们的编程思维和编程方式，以提升自己的编程思维和编程方式。阅读别人的代码也确实是快速提升代码水平的一个技巧。1. 对整体的思路没有概念2. 对类库不熟悉，包括方法调用不熟悉3. 不理解里面的一些算法4. 中途停顿时间太长，接过来后没有形成一个系统的思路。1. 把握整体有个大体的框架在脑海中，此时根据里面的文件名和文件夹，从入口文件大段大段看就可以，知道这段或者这个文件的作用就可以。很多写得好的类库都是思路很清楚，非常有助于从整体理解， 此时只需要知道这个文件和这个方法是什么作用就可以，还不到细细研究的阶段。2. 对3. 遇到不熟悉的算法此时就要静下心来，如果有注释可以根据注释来理解，如果没有那么也是一样的思路，想整体了解这个算法再细分进去了解，这一步只需要静下心里是可以理解的。4. 中途不能说看一个小时，停了4个小时再接着看，或者是今天看一点点，隔了非常长的时间再看第二部分。最好是趁热打铁。里面核心的地方还是从整体到细节的方法，掌握到了整体阅读细节才有意义，有时候知道了整体一些细节的地方清楚了，总之没有不努力就能理解的代码，上面的方法只是帮助你可以轻松些阅读，只是努力是必须的。学习编程的一个很好的方法就是和其他的程序员交谈。这不仅能够帮助我们多获得一种思维方式，同时也能够以更为愉悦的感受完成学习任务。至于内容没有特定的要求，可以是你正在学习的东西，也可以是你认为很酷的东西，更可以是你正在工作的东西。这样做可能会让你学到很多关于库，服务，编程语言和模式方面的知识。但是，最重要的是，你能了解到其他人是如何看待编程的。如果大家学习了一种新的编程概念，但不能确定自己是否已经真正掌握，可以写技术博文加以检验。或者是在值得提醒的一点，别因为自己刚刚涉及编程而有所顾虑。罗马不是一天建成的，出色的程序员也是一样。只要您对问题有所了解，就不妨给出自己的答案——无论对错，这都将成为一次宝贵的经历。对于人生来说，其中任何目标的实现都离不开耐心。编程学习就如其它任何学习任务一样，都需要反复努力并投入大量时间。在这个过程中，您一定会经历高潮与低谷——别被这些曲线影响了心情。接受已经发生的一切，并尽可能避免其中不好的部分。就像打高尔夫球一样，我们的手感总在不断浮动，但只要坚持到底，您最终总能成为一个大神呢~这个不用多说了吧，代码托管网站，上面有很多资源，想要什么轮子，上去搜就好了。并且呢，上面有很多优秀的程序员，你可以在这里交到很多好朋友喔。开发过程中遇到什么 bug，上去搜一下，只要搜索的方式对，百分之 99 的问题都能搜到答案。在这里能够与很多有经验的开发者交流，如果你是有经验的开发者，还可以来这儿帮助别人解决问题，提升个人影响力。程序员客栈是领先的程序员自由工作平台，如果你是有经验有资质的开发者，都可以来上面注册成为开发者，业余的时候做点项目，赚点零花钱。当然，如果你想成为一名自由工作者，程序员客栈也是可以满足的。只要你有技术，不怕赚不到钱。很多程序员日常在这里逛一下，接一点项目做。很多公司也在这发布项目需求。现在国内优质的开发者交流学习社区，可以去看大佬们写的文章，也可以自己分享学习心的，与更多开发者交流。认识更多的小伙伴儿，提升个人影响力。V2EX 是一个关于分享和探索的地方，上面有很多各大公司的员工，程序员。你想要的应有尽有。博客园创立于2004年1月，是一个面向开发者的知识分享社区。自创建以来，博客园一直致力并专注于为开发者打造一个纯净的技术交流社区，推动并帮助开发者通过互联网分享知识，从而让更多开发者从中受益。博客园的使命是帮助开发者用代码改变世界。很多早期的高质量内容都在博客园。国外优质文章网站，Medium 的整体结构非常简单，容易让用户沉下心来专注于阅读。上面有很多高质量的技术文章，有很多厉害的人在上面发布内容。国外优质文章网站，上面有很多高质量的技术文章，有很多厉害的人在上面分享内容。GeeksforGeeks is a computer science portal for geeks。（感谢@三三白白的补充）这个不用多说了吧，查资料，有问题，Google 一下。当然，能访问的人自然会用，访问不了的人，可以用算法学习网站，上去每天刷两道算法题，走遍天下都不怕。也是算法题网站，同上。这个是上面算法题网站的中文站点，英文不好的可以刷这个，英文好的推荐去刷英文网站的题目，还能提升英语能力。各个公司的面试题和面经分享，找工作前认真刷一刷，一定会有很大收获！拿到心仪的 offer！这是国外发起的一个 Web 开发学习的网站，从简单到深入，一步一步带你学习 Web 开发。就像一本练习册，并且当你完成相应的内容后，会得到相应的资格认证。学前端的看这里，百度官方推出的前端开发学习技术学院，题目从简单到困难，如果你把里面的题都做会了，找个 BAT 的前端工作不成问题的。要记得，学习一门语言或者一个工具，最优质的学习网站就是他的官方网站，官方文档。菜鸟教程的 Slogan 为：学的不仅是技术，更是梦想！ 记住：再牛逼的梦想也抵不住傻逼似的坚持！网站包括了HTML、CSS、Javascript、PHP、C、Python等各种基础编程教程。中国大学MOOC是由欢迎将本回答分享给你的朋友，他/她可能正需要。,我在17年花了大半年时间自学前端，然后进入了准一线互联网厂子，所以这篇文章我主要分4个部分来说下我的看法首先看题主的提问，我感觉到可能你对计算机和编程没有相关的理解，所以我先解释一下吧～电脑的知识简单分两种，一种是软件相关（编程），一种是硬件相关你可以这样理解，把计算机理解成一个机器人，可以不停歇的工作，你可以给他说一些硬件的话主要是了解电脑的构造，说白了就是了解了这个你至少可以明白怎么买到一台好电脑，怎么组装一台好电脑（这方面我就先不多谈了～）软件的话就是广义上的编程了，也是我主要回答的部分，了解这个的人不一定了解电脑的构造，如果你让了解软件的人帮你选电脑他有可能一脸无奈……转而告诉你一句“的，比如有一些重复的劳动，你做的很厌烦，那么你完全可以交给计算机来完成，然后用“指令”告诉它，你来帮我做这些事情，那么计算机这个“机器人”就会帮你解决这些问题而这个所谓的分两个方面来说吧一般来说，喜欢编程的人都是有深入思考的习惯的，那么什么叫深入思考的习惯呢？举个例子就是，你做数学物理题的时候，有没有做着做着就变得特别专注了，以至于忘了时间，如果你有这个习惯的话，那么你很大概率是有编程的天赋的那如果你是你是文科生，或者不爱看书所以也没咋体验过怎么办？那么看第二个方面吧这里的基础知识肯定不是说让你去学算法，我指的是然后随便找一种语言先看看它的普通for循环，在看看它的双重for循环，看看能不能静下心来理解，如果可以的话，初学的兴趣应该是没有问题的如果1和2都不满足怎么办呢？那可能编程的兴趣是不是很大…这时候要是还想着入门就必须有人带了，自学就不太建议了提前说一句吧，毕竟自学靠的是那么，怎么在有兴趣的同时自学编程呢？上面也过说了，编程的本质是解决问题，脱离这个本质为了编程而编程，本身就没什么意思而且就像很多人为什么喜欢打游戏呢，因为干掉对手会有成就感，赢了一局也会有成就感，这种短时间内获得的成就感是很有促进作用的，那么我推荐什么语言呢？学习python的时候要记住我说的话很多人学语言的误区就是，一天看一点语法，一天看一点语法，感觉自己很努力了，但是到最后问学到了啥的时候，发现还是什么都不会，关键是所以但是这个时候你会发现你基础没学好，写不出来，怎么办呢？去查就好了，学python的资料我就不写了，这方面大家已经整理的很详细了，贴一些高赞链接吧找工作的话我就不建议学python了为什么呢？python适合解决小问题，但是不适合找工作，但是不要担心学了python白学了，因为语言都是相通的，转学其他语言也很快如果你一开始就是为了找工作而学编程，我建议你自学什么呢？先说下这两个概念是什么吧，你可以这么简单理解，如果做一个网站，你看的的页面，动画等等都是前端，你看不到的部分就是后端，一般是一些数据的储存和处理，是和数据打交道的后端的话我就不多说了，只是告诉你go在目前这个年代可是大红人，找工作比较好找我着重说下前端吧，为什么呢？因为前端是做页面的，所见即所得，做起来容易产生兴趣，而且入门的初期，及其简单，随便学学就能作出一些感觉很酷炫的东西还是上面讲的那些话，要====================如果有什么问题就来问我吧，我会尽力帮你的，我又不收费=。=最近在知乎上已经在帮一个朋友入门前端了，教的过程中感觉这些东西市面上并没有特别好的免费教程，都不太适合纯新人，自己也想整理一套免费的教程出来帮助大家～,许多人想入门编程的同学，在其准备开始上手学编程时，都会面临一个问题：一般情况下，我们可以利用搜索引擎，来定位到我们所需要学习的资料。或到一些当下比较流行的视频网站上，搜一搜看看有没有值得学习的课程。比方说此前我就在公众号（GitHubDaily）上面分享过一篇文章，向大家介绍了 B 站上一个比较优质的计算机课程：但是，最简单快捷的方法，还是莫过于直接看前人做过的资料汇总。之前看到有一位国外小哥整理了一份超级全面的计算机学习资源，下面跟大家分享一下。这个小哥名叫 Deepak Kumar，印度人，同时也是一名全栈开发者。此外他还担任了微软的学生大使（Microsoft Student Partner，简称 MSP）。这里很多人可能对 MSP 比较陌生，这里简单介绍下。MSP 是由微软所创立的全球性学生组织，致力于挖掘校园中优秀的技术人才，以帮助他们更好的提升专业水平，推动技术的发展。成为 MSP 后，便能拥有来自微软的专业培训及资源。每年微软都会固定透过各种校园活动招募更多志同道合、喜爱科技的伙伴，后面再透过这 ­ 些 ­ 活动将他们所学到的东西再回馈于学界，这种做法非常值得称赞。上面跟大家聊到的印度小哥便是 MSP 其中一员。不知道小哥是否是受到了微软 MSP 圈子的影响，才用心整理了这份学习资料。但不管怎么说，还是感谢小哥如此费心整理了这么一份优质的学习资料，让开发者们大大减少了查找资料的时间成本，下面我们就来聊下这份资料吧。这份资料叫 这份资料作者将其托管到了 GitHub 上，一些非计算机专业的同学可能对 GitHub 不太了解，这里简单科普下：GitHub 是目前全球最大的程序员社区，每天有来自世界各地的程序员在上面开源自己写的项目代码、交流技术、分享编程相关的学习资源。具体如何玩转 GitHub，这个话题比较大，就不细说了，感兴趣的同学可以去看下我们往期分享过的文章，或者关注下我们的公众号 GitHubDaily，每天都会在上面更新与 GitHub 相关的文章，分享比较实用的开发工具与介绍完 GitHub，我们再来看下这份资料都包含哪些内容：我大致看了下，整理得还是蛮全面的。如果你要学编程，可以看看上面整理的 Python、机器学习、前后端开发、如果你是学生，可以看下上面那些针对学生党所提供的福利：如果你学完编程后，成功做出了一款解决某个特定需求的产品，也可以到上面寻求与创业公司合作，将产品进行商业化：平日无聊的时候，也可以逛逛作者推荐的这些网站：整个项目完全是一条龙服务，从编程到创业，相信你都能从这个项目里面学到不少东西。总而言之，这是一份覆盖面非常之广的编程学习资料，深挖下去，你会发现里面藏着不少宝贝，由于篇幅较大，这里就不一一列举了。,但是我个人觉得这个因人而异，有些人报班或者是花了很多钱不努力去学，也学不好，但是如果你愿意去学的话，其实参加不参加培训班都是没关系的。如果你决定自学，我希望你可以参考我的思路来准备，或许能对你有所帮助这里我分享一下自己准备计算机视觉岗位时候所用到的一些相关资料方面内容的准备，的提升，我在B站看的当然除了看视频以外，还是需要去学习数据结构和算法的内容，这里的话，我自己当时没有作为重点，目前也正在不断的补这块的内容，这里分享一份自己这里才开始学习机器学习相关的内容，这里推荐经典的一些视频，真的质量非常高，我建议先从这里开始看，这里是英文字幕版本的播放量最高，大家可以自行去b站搜索中文字母的版本风格非常幽默，让人非常的舒服这些视频就应该够你看了，如果不够，可以添加我微信，我有一份教育机构的视频教程，私信我发你。前面的都是理论，如果你想要找到工作，理论肯定是远远不够的，所以你还需要实战方面能力的提升，这里推荐了黄海广博士分享的一个各种框架的样例，学完我觉得你可以算是入门了当然对初学者来说，如果把找工作比喻做一场考试我觉得刷书是不够的，你还需要一份优质的题目来帮助你知道面试官会问到的问题，这里是我觉得非常不够的一份资料，内容包括python和深度学习等等最后分享一下自己的最后的最后打个小小的广告吧，我自己在这大半年期间经营了一个公众号：,首先亮出观点：自我介绍一下。我把我的自学经历写了下来，没想到这篇文章成了爆款，全网有大几万的阅读量。同时我的故事也影响了很多人，他们纷纷以我为榜样，给自己坚持下去的信心！当然，限于篇幅，还有很多细节那篇没有讲明白。本文将进一步描写当年的状态及一些心路历程，看看能不能与读者引起一些共鸣，能不能有一些启迪。前面已经提到，我本科及硕士所学专业均为机械。毕业后，阴差阳错进入到一家生成液晶屏幕的公司做电子工程师。也正是那时候，我开始接触到了编程，并产生了深厚的兴趣。我所在的公司虽然对外号称是国企，但外界人都认为是私企，而我们内部人员又普遍视它为台企。在这样多重性质的背景下，它继承了这几种类型公司的所有缺点：官僚，小气，加班重！所以，我在里面的状态是，拿着不高的工资，做着无尽的琐事，看着他们官僚争斗。工资低，加班多，我心里积累了一肚子的怨气。而且我们这个岗位行业性太强，如果跳出来的话，只能继续跳到面板行业，其它行业很难。而所以，我开始迷茫了，因为想跳槽，但很难跳到其它行业，就业面太窄了。如果重新回到机械行业，离开两年的我竞争力太弱了，而且我也不想回到机械行业。于是，我每天都在思考着这个问题，前途真的是一片迷茫，看不到未来，也看不清现在。每天晚上我都会倚着阳台的栏杆，看着楼下行色匆匆的人们，在迷茫中彷徨……在这样的情况下，我不得不转行，否则我在当前的环境下只会慢慢失去竞争力，可能不到35岁就已经被淘汰了。那段时间，焦虑、迷茫一直笼罩着我，我也在一直思索着转行方向。由于我在公司里做了大量的编程工作，而且写了一个功能很强大的测试工具（至今电子部门及其它兄弟部门都在用），还有带领团队开发了一个自动参数调优工具（耗时减少，精度提高，获得公司级奖项）。于是，我在想，我要不要转行做 IT 呢？还在第一家公司的时候，我后面又接触到了嵌入式，对其产生了深厚的兴趣，于是我决定转行到嵌入式方向。明确了目标之后，我开始下载资料，准备材料，开始进入转行进程。那时候真的是非常疯狂，晚上加班到 8、9 点回来，回来也不休息，直接开始自学，一直学到凌晨 1 点再睡觉，几乎每天如此。当我有了一定基础之后，在同学的推荐下，我进入到了第二家公司，成了一名真正的每天上班，我都在写 bug （真的是 bug ，写了很多现在看起来很不可思议的 bug），下班就回来狂看书看视频，而且周末也不休息，几乎一整年都是。有时看书看累了，趴在桌上休息一会儿，醒来继续看。入职半年多的时候，领导见我进步很快，就把一个刚毕业的小姑娘安排给我做徒弟。你能想象，一个 0 基础的机械工程师，通过7、8 个月的自学，居然能够做师傅带徒弟？！输出是最好的输入，靠着我给小徒弟讲解，我自己也巩固了不少知识点。同时，我也非常感谢一个 QQ 裙，我有问题的时候，群友都很积极为我解答。在组织里，我从他们身上学到很多知识，同时也与很多人成了好朋友，至今保持联系！就这样，在我没日没夜的学习下，我学会了 但是后来，决定跟老婆一起去广州，离开了第二家公司。那时我觉得单纯做单片机发展前景受限，一定要结合 Linux 才更有前途。于是在面试第三家公司的时候，我一定要选择做 Linux 的岗位。凭借我之前优秀的背景，我也顺利被广州的一家世界 500 强外企所录用。单片机与 Linux 相比，就像手枪与大炮的差别。所以在第三家公司，我依然开启疯狂模式，继续没日没夜学习。现在我依然在这家公司，独立负责公司项目的几个模块，也是一名合格的嵌入式 Linux 应用开发工程师！很多读者看到我的文章，辗转联系上我之后，只为跟我说一句谢谢！我觉得非常欣慰，至少我给转行的人做了一些贡献，哈哈！现在回到主题，如何自学编程。我觉得这个最重要，所以把它放在第一点。你一定要对你要转的那个方向有兴趣，否则怎么继续下去？而且你一定要有激情，否则你能像我做到每天 12 点睡 6 点起？能做到没日没夜学习？能做到没有晚上，没有周末，没有节假日，没有一切娱乐，没有应酬？如果你没那个兴趣的话，我劝你尽早放弃吧。如果你有兴趣但没激情，那么你可能就要花更多时间去学习了。这里放一张我当时自学到深夜的照片，也激励一下大家。你要有激情，你才能坚持，这是前提条件。你们应该能感受到，我是一个特别能坚持的人。关于我特别能坚持，以及非常自律这件事，我也分享了两篇文章，欢迎围观。学习是一件很枯燥的事，如果没有一些志同道合的朋友，很容易就坚持不下来。但是现实中，有时候我们可能找不到有共同目标的人，那我们可以去网络上找啊，现在网络这么发达，找个人还不容易。当时我加入了一个 QQ 裙，有疑问的时候就把问题丢到群里，很快群友就帮我解答。同时，有时候学习累了，就在裙里跟大家聊聊天，吹吹水，顿时心情愉快了不少。圈子对于我们来讲实在是太重要了，特别是我转行时以及做公众号时，真的是深有体会！在圈子里，即使你不说话，就看群友聊天，你也能知道一些行业动态，以及大家所关心的话题。有时候裙友丢出的问题可能正是你所想知道的，互相讨论能激发出很多灵感。正因为深知圈子的重要性，我建立了很多技术交流裙，欢迎在我的公众号「自学编程，资料的重要性不言而喻。但是，资料有的是文本，有的是视频，那要看文本还是视频？这个话题其实有一定的争议性，而书籍其实一般大而全，方方面面都讲到了。但是有很多知识点其实并不高频，工作中用到的概率不大。而对于新手而言，经验比较缺乏，不能有效筛选，容易钻牛角尖。时间宝贵，一定要花在刀刃上。但是，输出也非常重要的，但很多人却忽略了输出这件事！等你去做输出的时候，你就会发现，学会是一件事，说出来是另一件事，而写出来又是一件事！输出会让你把学到的知识重新整理一遍然后再表达出来，而在整理的过程中，你就会对知识有更深入的了解，或者对知识形成一个体系，可以使知识建立关联，更有逻辑性。我之所以建立公众号，一是想把我的转行经历分享给更多人，激励大家坚持下来；另一个就是整理自己的学习笔记，分享给更多人，同时也 同时我也在知乎开辟了专栏，将我的原创干货也收录到专栏里，欢迎关注！最近的一篇暴款回答：花了 3 个多小时，把自己转行过程及转行方法分享给大家，希望对大家有帮助。非常感谢看到这边，还望帮我点个赞，让更多人看到，希望能够帮助到更多多人，先谢过了！,最近有不少朋友私信，值乎来问类似的问题，正好看到这个题目，所以我来说几句。我想很多行外的朋友对计算机认知不是很深入，我给你们简单讲一下编程和电脑知识的关系。第一，有很多生活当中，行外的人看起来的电脑高手，他们并不会编程，同样的，也有计算机系大四的学生不会重装windows。电脑溜不简单的等于编程。第二，科班出身，学习好的计算机系，会懂更多电脑理论基础。计算机系有很多课程和编程无直接关系，比如第三，编程本身是一种上下限都很高的活动，上到火箭，空间站控制，下到一段win批处理脚本，都算编程，所谓简单编程，在不同层次，“简单”都是不一样的。根据以上这三条，再看问题本身，可以看到，其实一个问题，问了两件事情，一个是对计算机知识的熟悉，这点上，无需编程技术，同时，也没有很多培训班会教这个，学习的主要途径是混论坛和自己实际手操。一般非土豪，非发烧友建议你装个虚拟机玩。回到自学简单编程这件事上，对于计算机行外的朋友来说，简单编程主要有两个方向，一是在同样的朋友当中炫技或者自己消遣，一是辅助日常工作学习。炫技和消遣的话呢，没有人会教的，所以你只能去各种公众号，论坛，抄点技术来，一折不扣地按着做，比如什么屏幕截图再把图标隐藏。这种主要是学会快捷键，一般人对电脑的认知就是越用键盘越牛逼。编程语言本身可以有很多不同，比如我是JAVA系的，java可以做出几千万行的阿里巴巴，也可以做出一个几十行的简单的小程序。比如前几天我在一边开无聊的会议，一边自己写了一个J2SE的程序，自动生成毫无意义但闪瞎眼的gif，纯粹是在开会也没别的事情可以做。核心代码就这么点，10分钟的事情出来是个这种玩意，放在gmail里发出去能直接在预览里闪瞎眼。辅助日常工作生活是我认为计算机对行外人士的最大帮助，这里面包含主要三块：1，是office人士熟悉使用MS-excel宏命令。这是一种真正的所谓简单编程，宏使用的脚本语言在计算机编程当中属于任何语言系统的人都需要掌握的基础。而熟练使用excel宏命令能给相关人士带来极大的帮助。2，是windows系统的批处理指令。这是日常生活当中很容易使用到的技术，比如批量改几千张照片的名字，当然有很多软件可以做到，但是毕竟技多不压身。这个以上，我还会建议普通人学习下视频压制和后期处理，就是你们看的各种字幕组的作品，这其实包含了非常简单的计算机编程，在日益趋向视频化的年代，学会视频处理，将会很有帮助。3，是很多行外想转行内的人士的一个过程。很多人来问我，我合适转行吗？我的建议很简单，你先在不放弃目前工作的情况下尝试简单编程，乃至于编程游戏，看看你能顺利地完成吗？比如screeps，比如human resource machine，比如乐高机器人大赛，如果你能轻松完成，那么恭喜你，你有入行的潜力，可以考虑开始学习真正的编程。综合来说，自学,我初中毕业时，在没有电脑、没有互联网查资料的情况下，自学编程并做了大量小游戏自娱自乐。所以我可以非常肯定地说自学编程是可行的。可能有人好奇，我没有电脑怎么编程，用手机吗？当然不是，我学编程的时候，手机长这样：当时中考结果出来，考得不错。爸妈就给我买了这么个东西作为奖励：这个叫“这玩意儿有一个逆天的功能，你应该猜到了。它可以用来编程，用的是一种叫BASIC的语言。那个时候编程的概念不像现在这么，火满大街的人都知道程序员秃头。那时我根本没听说过编程，也不知道是干嘛的，但冥冥中就觉得这个有搞头（天生程序员的料）。研究了内置手册里几个简单的示例后，也不是特别明白。于是我就去了专卖店，让店员帮我下载了几个别人做的小游戏。什么样的小游戏呢？就这种：纯文字游戏。玩了一会儿，了解了游戏流程后，我就开始看这些游戏的代码了。文曲星屏幕很小，总共显示不了10行代码吧，所以我就把代码抄在纸上，大概1000多行的样子。就这样，一边研究代码，一边在手册里面查这些关键字是什么意思。刚开始也不是很理解，那些循环、条件是怎么运行的，会有什么样的结果？那怎么办呢？我就直接改代码，看看代码修改后程序在执行的时候会有什么区别。有时候改错了，会有一个错误提示，也不是太理解，又没有网络可以查，那就强行改，把我能想到的所有情况都尝试一遍，看看是不是碰巧能搞正确。我就这样的条件，靠蛮力学会了编程。做了各种各样的游戏。比较有印象的，打砖块、赛马（其实是一整套赌博小游戏：P）、黑白棋、类似疯狂坦克的射击游戏、现在信息技术这么发达，你想学什么，网上全都有教程，文字的视频的都有，比我条件好多了。自学编程一点问题都没有。我觉得自己在自学编程的过程中，做对了这么几件事，是非常值得借鉴的：学习编程很重要的一点是尽快开始实践，实践大于学习。编程语言的知识点超多，但初期你能用上的只有不到20%，所以不要把厚厚的教材啃完了才动手写代码，尽早开始实践。选择合适的研究案例，可以从一些小游戏，小工具开始，比如贪吃蛇、计算器。这些网上都能找到各种各样的代码，你可以先自己写，然后再看看别人怎么写的。我的专栏里有一些小游戏教程，需要的同学可以看看：编程需要花很长的时间钻研和练习，遇到一个问题研究几个小时是很正常的。有的同学遇到问题第一反应是“我不会做”，然后就放弃了，或者去找答案，这样就放弃了一次思考提升的机会。就像做数学题，如果想都不想直接看答案，你获得的就只是一个答案而已，思维能力和解决问题的能力都没有任何提升。如果你从零开始学编程，可以从C语言或者python入手，这两个入门相对来说比较简单，长期来看也有足够的深度。C语言入门可以看《啊哈c语言》，号称是可以坐在马桶上学的编程书，看这本书要注意痔疮。Python则推荐《回答完这个问题后我决定写个C++自学专栏：,"因为我的本科四年都浪费了，每天浑浑噩噩，并没有都在大学四年好好学习。直到去年，也就是我研二的时候，我才忽然醒悟过来要好好学习，因为我不想毕业就失业，也不想再回到祖祖辈辈那种面朝黄土背朝天的生活或者像父母一样去做体力活。至少能够坐在办公椅上，吹着空调写代码要比顶着太阳割稻子好太多了，因为我小时候真的面朝黄土背朝天似的割过稻子。以前我回答过一个问题：我觉得需要说明的是周一到周五的白天，我还要做实验、看论文以及做老师的横向，感觉那段时间自己的时间利用率高到爆表！那些说学习累的的人，如果。以下回答源自于个人在你你如果问我有什么学习计划的话，说实话我是没有的，我干脆就按照自己前年的学习时间线来回忆一下吧。有几个已经毕业了的师兄师姐在得知我的情况后说我是""但我觉得真的有点夸张了，我只是比别人多花了点时间而已。很多人说我是逆袭？以下回答摘抄自我在知乎专栏上的一篇文章说来可笑，我自己都不相信，因为在 因为校招主要语言就是C++和Java，主要是想要掌握一门企业级开发语言的初衷，研二刚开始的时候，这个时候我开始了有人问我为什么选择 我自己的学习习惯就是先从视频入手，然后再去看书，所以我当时下定决心学C++后，我的第一反应就是去B站上看看有没有相关视频，看了看评论和播放量后，我最终确定了 黑马机构出版的教学视频。搞笑的是，我记得当时自己看完后还留了个言，现在好多人在在我走过的路，看那个视频的时候给我留言。我记得我当时开着 黑马的视频很快就看完了，又开始看经典的 我个人比较喜欢做笔记，如果看的是纸质书就在书上写写画画，如果是 PDF 就做标记之类的，我记得大概花了 月末的时候，我去 LeetCode 写下了自己的第一道题，也就是“两数之和”的题解，从此自己就走上了一边看书 看视频，一边刷题复盘的不归路。转眼就到了九月，这个时候也开学了，研究生老师也开始慢慢安排事情了。由于白天需要帮老师做横向项目和看论文，所以我一般都在周一到周五的白天去干活写代码做项目，傍晚去跑步溜达溜达的，而在每天晚上八点之后看 C++ 书籍和刷力扣题，周六周日两天则是自己的全部学习和复盘时间。在九月自己在看完《C++ Primer》的前八章后就开始疯狂得在力扣刷题了。因为刚上手的缘故，自己刷题速度也比较慢，对于一些不会的题往往需要两三个小时之久。在刷题过程中真的是感觉到人和人之间是有差距的，实在不明白有些人的脑子在呢么那么好使。我现在还记得力扣第一题的评论区有一句名言“有时候对象邀我一起回宿舍，我也会说你先回吧。就觉得这道题没做出来回去了也睡不着，一定要把它做出来为止，为此搞到半夜一两点也是常有的事。整个九月我都沉浸在 C++ 的世界里，也没去学别的科目。进入十月了，在七天假期里除了第一天跟对象出去吃了顿饭，剩下的时间都用来看书学习了。嗯，是的，七天假期我也没出去玩，也没打游戏，都用来看书学习啦。在经过九月一整月的学习我对于 C++ 有大致的了解后，就没那么把心思和时间都花在 C++ 上了。我开始着手学习操作系统和计算机网络了，比如哈工大的操作系统、清华大学的操作系统、南京大学除此之外我也看了一些比较经典的书籍，像《图解HTTP》、《图解TCP/IP》、《老师依旧还是那样，我们每周五还有组会要开，要汇报自己一周的进度，包括项目上的，学习上的。说实话挺烦的，有时候自己一周明明啥也没干，也没啥进展还要在组会上吹牛逼，读研读了三年别的没咋学会，写 PPT 、美化包装自己工作的本事倒是精进不少....时间在指缝中不断流逝，自从开始有计划地学习后，感觉时间过的更快了，有时候一周在不知不觉中就过完了。与之相对的就是视频越看越快、PDF 越滑越快、桌子上的书也越堆越多，吃饭速度也越来越快，每晚回宿舍的时间也基本都在十二点之后了。那段时间，我是我们宿舍回去最晚的一个，还好自己的室友们都给我留着门哈哈。走在回宿舍的路上，我都会想哪一个知识点还没搞懂，明天要再重点看一遍；还有视频中讲到的某一个题，为什么自己没有解题思路；还有哪些书自己还没有看到，规划一下自己的未来一段时间的进度.....十一月的时候我慢慢的开始去看操作系统的书籍资料了，像《现代操作系统》、《转眼就进入十二月了，《C++ Primer》也快啃完了。看书过程中，除了记录自己的所思所想，在看这本书的过程中有些课后题我也没放过，很多人说没必要做课后习题，对此我持否定意见，每章课后习题数量不等，前三道我基本都是必做的。这样一本经典的书籍，它的课后题都是经过精挑细选的，你看完一章学没学会检验一下就知道了，到圣诞节前后，《现代操作系统》和《深入理解计算机系统》也看了一大半了。力扣刷题也一直没落下，在刷题过程中，自己也知道了 C++ 中还有 STL 这种神奇的东西，也知道了另外四本经典的 C++ 书籍《Effective C++》、《我一口气全部买回来了，兴冲冲的直接去看源码剖析，差点把当场我劝退。。。。我又去搜索大家在看这本书的时候是怎么看的，有没有什么值得借鉴的方法。由此知道了侯捷大师，也知道了侯捷老师的几门经典课程。我都看过了，其中有些视频甚至二刷三刷，就比如STL源码解析的视频。侯捷老师有句话讲的非常好：这些视频以前我就保存过来着，后来听说B站将这些视频全都下架了，现在想想还好我保存了，有需要的可以下载一波。就跟我开始学习C++时会选择从黑马C++教学视频入手一样，在学习STL的时候，我也选择了从侯捷老师的 STL 讲解视频入手，依旧是 1.5 或者 2.0 倍速看的。十二月的时候我除了看操作系统的书籍之外也另外看了“STL标准库”和“C++内管管理”这两个视频。对了，如果你跟我一样是C++技术栈，那下面这个项目还是不错的。感觉时间真的不够用啊，想看的书和视频也越来越多，可是自己一天只有 24 个小时，还要帮老板做项目和看论文。元旦那天，我和对象去吃了四川串串晚上去看了电影，然后继续看书、刷题。在放寒假前我特意把两本 《Effective C++》 带回家了，现在想想还好自己带回去了，没白白浪费那个寒假。因为一月份回家的时候，把侯捷老师的 STL 源码剖析视频下载下来了，存在 Ipad 里，因为以前就看过一遍，在火车卧铺上迅速过了一遍，也没花多长花间。回家的时候家里有人生病了，一直在医院接受治疗，外出打工的爹妈也还没回来我就去陪护了。就类似下图这种病房，但我们那是十八线小县城，没有这么干净整洁。一个病房四个床位，每天来探病的人络绎不绝，在那种嘈杂的环境下不可能看得下去书，我又掏出自己的 Ipad 接着看视频，比如尚硅谷的 MySQL 视频、Linux视频都是那个时候看的。一月下旬的时候，家里人出院了，我也能顺利回家不再继续陪护了。也终于能有一个相对安静一点的环境看书学习了，我捡起闲置了大半个月之久的 《Effective C++ 》和《More Effective C++》开始囫囵吞枣起来。也许是《C++ Primer》 打的基础比较好，看着两本书的时候并没有花很多时间，很快就看完了。在家的时候，每天早上八点起床，吃过早饭修整一下就开始看书了，一直到中午十一点左右，中间也没什么人来打扰我；下午吃过饭就午休一会，醒了就径直去医院拿中药回来，然后就开始下午的学习了，下午我一般不怎么喜欢看书，我比较喜欢写代码，我会选择做一些课后题或者复盘一下以前做错的力扣题；到了晚上则是看教学视频，十点多了就玩玩B站，看一些比较有意思的吃播，比如华农与竹鼠的爱恨情仇、硬核厨师阿远、还有大姨绵羊的视频。睡前会跟自己的对象视频一会，然后就不知不觉的睡着了。。。多说一句， B 站真的很多优秀视频，总是有人问我该看什么资料看什么视频，其实你自己去 B 站输入一些关键字，直接找播放量比较高的视频来看就可以的，播放量比较高的视频，质量一般都过得去。后来到了二月，这时候国内疫情已经进入了比较严重的时期了。武汉全城封锁也已经好多天了，每天起来第一件事就是看看疫情发展情况。在学习的时候不断的有新名词冒出来，就好像在学习 C++ 的过程中，网络编程这个词也慢慢出现，我也是知道了 C++ 后台开发跟第一反应就是直接去知乎看有没有推荐的资料，在看过差不多二十多个高亮回答后，我发现有三本书出现频率最高：《我最先看的是游双老师的那本《Linux 高性能服务端编程》。讲真，确实有点云里雾里的，因为以前也没怎么接触过这个。后来转头去看了《在看这本书的过程中，我知道了一个简易版的 这本书上例子很多，我很快就看完了，然后就开始看《Linux 高性能服务端编程》和《Linux 多线程服务端编程：使用 muduo C++ 网络库》了。前者我好好看完了，收获很多，但后者我没怎么看完，随便翻了翻就没看了，我也不是很推荐这本书。后来疫情逐渐严重起来，接到学校通知说要延迟开学，我有点不爽，可也有点高兴。不爽是因为在家呆久了，老妈整天唠叨我，干啥都有错，高兴是因为自己有更多的时间来学习看书了，一回学校就要开始做老师的项目课题了，就没有这么多空闲的时间了。现在想想应该多在那个时候刷一些算法题的，因为现在的互联网招聘过程中很看重算法题，在自己去年顺利上岸后也总结了一些不错的算法题，有需要的可以看看。进入三月后，因为一直没能回学校也复习不了C++，我的笔记都在书上，看不了就很难受，只好转头去看操作系统和计算机网络的知识。同时力扣上的题也开始二刷了，当时我重点刷HOT 100 的那 100 道题，来来回回的刷，一道题最多的时候来回刷了七八遍。我并不是什么算法大佬，自己脑子也很榆，一遍记不住我就刷两遍，两遍做不出来我就去做三遍，总有能做出来的一天。老是有人说什么算法太难，你先看看自己下够功夫了没？对于每道题，你是真的会做了没？是不是你自己做出来的？对于你不会做的题目，你有没有及时复盘和总结？如果你的回答全部都是 如果有 最多在刷题的过程中你可以选择性的看一些别人总结好的资料，比如这种前人准备好的一些刷题笔记之类的，支持三种语言就很不错。如果算法题有障碍可以多看看。在复习完操作系统和计算机网络后，我除了开始继续刷力扣再者，虽然我已经有一个实验室的项目可以写在简历上，但一个项目还是不太够看，思考再三，我决定走前人走过的路，我也选择做一个 emm，真香！我是根据 TinyHTTP 和 游双老师的《Linux 高性能服务端编程》的课后大作业为基础，这两者结合后做的自己的 可项目还没做完，学校已经给消息了让尽快回去，本来想在家把这个项目做完的，没办法匆匆买票，赶紧滚回去了。可能谁也想不到，一个寒假居然能放 150+ 天的。回去学校第二天，我就立马把《在此期间也是把自己的服务器项目完成并且开源到 。按理来说金九银十，他们一般在九月份就应该开始找工作的，但以前的师兄师姐都是在十一月份才开始写简历找工作，去的也都是一些愿意来我们学校进行校园招聘的企业，我也私底下问过他们，得到的解释和答案就是学校比较差，然后 balabalabala 之类的。。在六月份校招提前批的时候，我就兴冲冲的投了简历，结果全部石沉大海，后来才知道提前批是选拔优秀人才的，提前批能上岸的也都是一些好学校的学生，比如各种投完简历没有后文，我也在找自己的原因，除了学校不行是一个因素之外，在思考有没有其他可以改进的地方。后来看了一些比较优秀人才的简历，我觉得问题有可能出在自己的简历上，因为自己的第一版简历写的着实垃圾。所以后面又迭代完善了自己的简历，足足写了 26 个版本的简历，也正是自己精心打磨的简历使得自己在接下来的秋招正式批中能够收获到不少胜利果实。光是修改这 26 个版本的简历，就足足花了我十来天的时间。去年的秋招正式批是在 7 .15 号开始的，在经过提前批投递简历的全盘皆输后，我开始有些畏手畏脚不敢投递简历，因为每个校招学生可以投递一个公司的机会是有限的，比如京东，每个学生都只有一次投递的机会，每次可以投递两个岗位。所以投递简历的机会，不能随便浪费。在别的小伙伴开始大势投递简历的时候，我总觉得自己还没复习好，一直在不断复盘以前学过的知识点。我自己的经历告诉我，永远不可能有复习完的那一天的。因为你每次面试都有可能遇到你不会的题目，所以最好的方法就是在实战中成长，多去投递简历。当然投递顺利是有技巧的，前期去投递一些小公司，积攒积攒经验，后期再投递一些互联网大厂！所以小伙伴们不要抱着把全部的知识点复习完事后，再去开始投递简历，等你复习完了，黄花菜凉完了，校招早就结束了。整个七月我都是在复盘知识点 + 刷题中度过的，7.15 号正式批一开始我就立马开始投递简历了。如果是往届的师兄师姐们，他们投递第一份简历很可能要到十月份去了。还好自己没听他们的话....不知道你们是否体验过笔试全部会做的感觉？就是我所投递的互联网公司发来的笔试，我居然都会做...这不是装逼或者凡尔赛，就是我当时的真实情况，来一道过一道，来两道过一双。在牛客网看到他们发帖讨论今天 XX 的笔试题好难，求交流求解答之类的时候，我下意识地以为他们是不是在夸大难度，因为我觉得貌似没他们说的那么难；傍晚在操场跑步，听到旁边的人在讨论今天的 XX 公司的笔试题怎么这么难，我停下来随口说道：今天这笔试第一题是力扣在我过五关斩六将一般通过一场场笔试后，随之而来的就是一场场面试邀约，为了避免漏掉笔试或者面试，还专门用备忘录记录了一下。最多的时候一天我面过五场面试，上午两场，下午两场，晚上一场。那天面试完后，感觉身体好像瞬间被抽空一般。然后就是笔试、面试、复盘的交替进行、循环往复。那是真难熬啊，也真难受啊，在面试过程中遇到很多自己不怎么会的知识点，有时候也会被问到崩溃或者被面试 PUA ，可来不及伤心和怀疑自己，因为可能一会就要进行下一场面试了。心态真的会崩，当我心态崩了的时候，我一般都是去操场上跑两圈，然后回宿舍洗个澡，再来到实验室看个电影或者看看吃播，然后第二天接着干！还好，最后终于有所收获。如果你能看到这里，确实很了不起。我罗里吧嗦说了一大堆，每个人的成功都是不可复制的，我写下这篇回答的时候是2021年的五一期间了，距离那段时光已经快过去一年了，确实挺快的，还有一个多月自己就要毕业了，时间真的很快。有时候我就在想，“现在你要再问我，我的编程能力是什么时候提高的？那我觉得是在就是在这些时候，我的编程能力提高的，也是在這些时候学会编程的。",我不建议你从“基础”开始，尤其是什么：C语言，数据结构，离散数学……之类的，那是把你逼疯的节奏（感觉这是知乎学院派的风格）。如果你自觉是神人级别的，当我没说。+++++++++++++++++++++++++++++++安利一个自己早年的经历：++++++++++++++++++++最后很煞风景的加个推广：,问：自学当然可行。建议语言：python，因为语法简单，接近人类语言（不过是英语），不用多久就可以照着写几行代码实现一个完整的功能。推荐书籍《当然，你也可以看我写的教程，我的定位也是完全零基础。如果觉得看书看教程太枯燥，也可以网上找个入门级的视频来看，应该能搜到很多。我自作主张把问题再扩展一下，那么：自学前面说的，简单编程，你只要在网上找本好教程，加上搜索和提问，基本就可以搞定，达到写一写小脚本，自动处理文件，批量下载数据，写个简单小游戏等程度。但，如果是要求比较高的，比如是以就业为目标的理论上还是可以，但你会面临几个坎：这几个问题，尤其最后一个，虽然你也可以尝试通过互联网解决，但肯定会绕很多弯路。如果身边有能点拨指导一下的人，会好很多。然后就是，要自学到能找工作，是需要较长时间的学习和练习（一年以上）。对于自学的人来说，非常考验持续力，一般人未必能坚持。如果能有人指导，再能长时间的坚持，那自学出师也不是问题。那些培训机构，其实也就是给你提供了这样一个环境，有答疑的人（是否负责另说）、共同学习交流的人，本身的课程内容，网上免费的都足够多了，没多大差别。,答案是肯定的，而且自学是学习软件编程极其重要的一个途径。不过最好的方式是 自学的同时，有一个可以帮助解决问题的同事或者老师，这样可以避免卡在一个问题上太长时间。 现在有很多途径可以自学，例如IT图书，或者在线视频教程，比如我们九章的基础算法班（对于编程入门小白来说，你需要一个计算机系统学习框架。编程涉及的方向范围很广泛，所以还是要选定一个大致的方向。比如前端，后端，移动，等等。 选择什么样的编程方向，直接决定你编程语言的选择，选择一门最主要的开足马力去学习。（1）基础比较薄弱情况下，可以通过相关入门视频开始跟着学习（2）刷完视频的基础部分后，就可以开始买一本基础的入门书籍开始从基础语法开始入手学（3）跟随书本把书上一些基本的代码在电脑上根据自己的理解输入一遍（4）遇到很难的技术点，可以再找相关的视频讲解，找老师解答。首先，学习算法和数据结构是非常重要的一部分，可以多了解一下九章相关的算法课程。同时配合由FLAG工程师，前算法竞赛中国国家集训队员令狐冲担任主讲，破解面试算法，洞察硅谷大厂最新算法面试动向，教你有重点地刷题。课程涉及的算法面试套路国内外通用，是一门算法求职的必修课，适合有任意一门然后美国最著名的提供线上学位的编程课程:免费在线编程课程，博客和课程平台免费编程书籍/网站如果你只是想简单了解一下编程知识，在对变量类型、循环、条件判断等编程有了基本概念的了解后。就可以开始做一些项目实践，能解决基本的语法问题就差不多了。 如果您还想进一步学习编写代码并且可以成为一名以此恰饭的程序员，那么最好每周能花超过20个小时来学习代码。这样在三个星期之后，你就可以开始着手构建项目，来磨练编程和UI / UX开发技能。实践期间你可能就要花费至少2-3个月来解决编码问题。你花在这上面的时间越多，解决这些问题就越溜，你就越有可能在面试编程工作的技术部分中成功。总之，编程语言就像英语一样，终究只是一个学习工具。如果你想在码农的道路上走得远，一定要实践，实践，再实践九章算法，硅谷一线工程师在线直播授课，已经帮助30000+人成功拿到心仪offer。，零基础转专业找工作必备现，针对知乎用户推出限时免费，原价US$101.68（￥666）现在邀请一名好友共同报名，即可免费学习。添加微信jiuzhang6，回复“知乎Java”领取全额课程抵价券。更多课程信息请访问：,如果没有计算机基础，首先需要学习计算机基础知识，为学习编程打下基础。如计算机组成、计算机的工作原理、计算机操作系统的类型、计算机网络等基础知识。目前计算机语言众多，首先结合学习目的，选择一门入门计算机语言。汇智妹建议，尽量选择一门主流语言，应用范围广，简单易学。选择之前，可先了解清楚每门语言的特点，应用领域。1.准备参考教材，查看视频课，加入首先需要学习计算机语言的语法，掌握语法逻辑。2、寻找练习题，辅助练习；3、在网上找他人的代码，模仿练习；4、在网上找简单的项目，尝试自己敲代码实现。1.菜鸟教程网址：菜鸟教程主要是教你基础语法的，对于入门来说很不错，内容讲的都不是很深很好懂。也会教你如何搭建开发环境之类的。2.网址：3.网址：这没什么好说的，学编程必须要亲自敲代码。多看别人的代码（最好是一个可以运行的完整的工程源码），自己学着写一个一样的，从搭建工程开始自己弄，不要在原工程的基础上改，那样你是记不住的。这里小编就推荐几个可以下载到源码的网站。1、Github网址：2.网址：如果你想从码农晋升为工程师的话，理论就比不可少。到了这个阶段就要多看一下进阶的书籍了，买之前要多看看评论是不是适合自己的，毕竟知识太多了一辈子也学不完的，还是先学一些对自己有用的。这方面小编就做具体的介绍了，只是推荐一些遇到问题时查找解决方法和理论知识的网站给大家认识一下。网址：2.Stack Overflow网址：3.CSDN网址：5.ImportNew网址：网站推荐借鉴了，现场喷口水 的博客《如何自学编程》，原文：自学编程是一件比较辛苦的事，需要较强的自律性和自学能力，加油！,"当然可行，你以为科班出身的真就都是老师教出来的？？？到了大三，除了背会了些基本概念，学校什么都没教会。教点java、C++也都是基本语法。选修的网页设计课，报的人趋之若鹜，守着时间点抢名额。到最后，也就是做一个简单的html页面，连jquery都没教会。我当年很傻，自己买书看，琢磨的毛都快没了，连个环境都搭不起来后来，我跟着视频学，真香学好计算机只需要两步：目前而言，linux C++服务端开发、Java后端开发、我把我学C++的路线和资料分享给大家。视频强推侯捷老师的C++面向对象程序设计，我当前入门C++就是跟着侯老师学的，讲的非常仔细，现在候老师在B站上开源他的讲课视频，大家可以去看：但候老师的课，一如即往的每节都非常长，短的也要三十分钟……着实很难坚持。对于定不住的同学，可以看小甲鱼的《C++快速入门》，每个视频十分钟左右，共49集，看完以后，再看候老师的课会轻松很多。配置书籍首推本书是久负盛名的C++经典教程，其内容是C++大师Stanley B. Lippman丰富的实践经验和C++标准委员会原负责人Josée Lajoie对C++标准深入理解的完美结合，已经帮助全球无数程序员学会了C++。《Effective C++：改善程序与设计的55个具体做法》(中文版)一共组织55个准则，每一条准则描述一个编写出更好的C++的方式。每一个条款的背后都有具体范例支撑，教你怎样才能写出优雅的C++代码。这里也是很多关于C++方面面试问题的出处。有关STL标准库的使用是比较难的，同样推荐大家以视频入手。再次感谢侯捷老师，他录制了46集的系列视频讲解了《C++ STL标准库和 C++ 泛型编程》配置书籍推荐《这本书给我感觉就是既适合初期入门，又适合当字典用，因为里面的内容比较多，好多第一次记不住。所以也可以大致看一遍，以后用时再具体记，这样根据实际去学习我个人觉得效果会更好。《STL源码剖析》学习编程的人都知道，阅读、剖析名家代码乃是提高水平的捷径。源码之前，了无秘密。大师们的缜密思维、经验结晶、技术思路、独到风格，都原原本本体现在源码之中。在你仔细推敲之中，迷惑不解之时，恍然大悟之际，你的经验、思维、视野、知识乃至技术品位都会获得快速的成长。为了方便大家，我把以上推荐的所有书籍、工程文件、开源工程地址，都已经整理好了，需要的同学可以去下载。这几门科目，是考研408科目，也是校招必考内容。无论是新入校园的萌新，还是工作多年的老鸟。都离不开这几门知识点。有些同学上学时候不好好学，到进阶的时候，就出现问题了无论学习什么，最关键是要找一个风评还不错的课程，就从头到尾学一遍，千万别东学一点，西来一些的。这样的效果肯定不会太好。这里给大家推荐一些我看过的，比较认可的课程，跟着学即可。关于数据结构，我想说的是，它是这四大件中最简单、最基础的一个。离开了数据结构，几乎任何的程序都会失效，所以在讨论数据结构的时候，常常要把算法也连带着说一说。要单纯地掌握常见的数据结构，就如同拆解一个个精妙的仪器件一样有趣和简单。正因为数据结构这个东西在程序中的作用，和仪器部件特别相像，不同的数据结构有着不同的特性，因此要想学好数据结构，图解是必备武器！这里强推中国大学上，浙江大学的开设的《数据结构》课程，涵盖了常用的数据结构和算法。辅以教材参考书，强推《大话数据结构》，光看封面你就知道这本书的风格了没错，这就是大名鼎鼎的《算法课常常和数据结构课放在一起，在有些高校中，会存在“数据结构与算法”和“算法设计与分析”这样的两门课。其实，是字面意思就能知道个大概，而学习算法的套路很简单，多看、多写、多上机，既然是思想的集合，看得多了，自然无师自通。至于刷题，很多同学都知道要刷LeetCode。总共两千多道题，而且有些题，非常难，就算每天10题，也至少刷半年。这显然不适合绝大部分同学。所以，我们要找到最核心、最重要的题集，即可比如，如果时间紧张，可以先刷《程序员面试宝典》里的题目，总共109题。刷完以后，有时间，可以再刷《剑指offfer》的题目，共75题。因为这两本书，都是面向面试的高频题汇总，自然有很多题目是重合的。这也正能说明这两本书的重要性。 当然，我也有一本谷歌师兄总结的高频面试算法习题集，包含了常见的数据结构和算法汇总，无论是排版还是内容，都是非常棒。  无论你学习什么语言，都避免不了和操作系统打交道。所有语言的最后执行，都是靠操作系统。比如，你用C++可以使用new创建一个变量来存储数据，也可以通过malloc创建一块空间。但你真的知道他们的区别吗？无论用什么操作符来操控程序，最终真正分配内存空间的其实还是操作系统，所以，想真正了解他们的区别，就必须深入操作系统内部原理。操作系统是程序员进阶必会的基础知识。刚开始学操作系统，不建议闷头看书。相信我，用不了几分钟，你就会打瞌睡。学不了一星期，你就想打退堂鼓。这里推荐B站清华大学的操作系统课程。这是我见过最简单易懂的操作系统课程了。在看视频的同时，如果你还想要教材，在看上部分时，可以搭配《操作系统导论》辅助入门，在看到具体的计算机网络，提供的是管道服务，像自来水管一样单纯，发送方Bob向管道里注入一吨液体，接收方Alice就接收到整整一吨液体，不多一滴也不少一滴。当然这是完美的理想，而现实往往并不是这样的。真实的情况是这样的：Bob与Alice之间自来水管，每隔几公里都有一个蓄水池（增压泵），这个蓄水池有若干个进水管，也有若干个出水管，如果进入管的整体流速 > 出水管的整体流速，那么这两者的流量差就会被临时缓存在蓄水池里。稍后如果进入管的整体流速 < 出水管的整体流速，那么蓄水池里的水就可以乘机流走。但是如果进入管的整体流速 > 出水管的整体流速一直持续，多出来的水蓄水池容不下了，多出来的水就溢出了。这溢出的水是永远都无法到达目的地的，对吗？这个蓄水池有一个专业的名字：路由器，由于蓄水池无法补偿溢出的水，自然就需要有一个流量补偿机制，来补偿流量丢失，那么谁来补偿呢？肯定不能网络来补偿，网络一直以无状态（Stateless）为首要目标，如果让网络来补偿流量，自然就需要网络来记忆状态，这点是难以接受的！最终流量补偿机制的重担就落在了流量发送方Bob的身上，实现这个流量补偿机制的代码赫赫有名，它的名字就是TCP！TCP大佬实现流量补偿机制，其实很简单，就一句话：确认机制！一旦流量到达接收方，需要接收方Alice明确确认到达，否则TCP大佬会周期性使用流量补偿（重传）机制。所以TCP是一个需要记忆状态（State）的代码，它本质是Stateful的！从上面的例子也可以看出，计算机网络相比操作系统好学非常多，因为计算机网络不抽象，在现实生活中，都能找得到例子。而且，如果我们想知道网络中的细节，完全可以通过抓包来分析。课程推荐哈工大的计算机网络系列课程：这里需要说明的是，计算机网络中的细节非常多，李老师讲的也很全面。但这些细节是无需关注的，比如Http协议的错误码分类，我们记不住，而且记住也没任何意义，知道有这个玩意即可，需要的时候，百度一下，它不香吗？关于计算机网络，我们真正需要了解的是osi 7层协议和Tcp四层协议的产生原因和具体使用场景，就足够了。关于图书，绝大部分高校都用的组成原理应该是所有课程里最难的课了，它是一门衔接数电和汇编的一门课。整个课程的核心就是使用数字逻辑电路和触发器搭建一个可以运行汇编指令的机器.如果你需要提前感受一下可以去玩一个叫人力资源机器的游戏.代码区就是ROM,中间箱子是寄存器,两边输入和输出的会和并到一起装到RAM,小人就是运算器.这篇文章里有这个游戏的简介和玩法：你可以从这个游戏做为一个开始。再回来问题上来，我们先推荐学习资料，最后再推荐一些实验性游戏。视频首推配套教材建议选用《深入理解计算机系统》，这个视频应该也是用的这个教材。 里面的逻辑电路相关的内容可以提供具体案例,提高对逻辑门的感性认知.同时可以衍生出很多机制相关的思考,比如 具体的问题转化为数理逻辑,小人作业并发冲突,随机地图生成,权限管理,复杂功能分区规划等等.但校招不光有笔试，还有面试环节，面试考的就是项目实战能力了。有关校招的内容非常多，这里我就不一一列举了。我把我这些年的所知所得，整理成了一本书，开源到github上了。相信会对大家很有帮助，大家可以去看.目前还在持续更新，欢迎大家star。好了，这篇就到这了，希望大家毕业都能找到好工作。",当然可行事实上，除了CS系可能会在大学“系统”地学习编程，其余的某种程度上都是自学的！自学编程，推荐号称胎教语言的Python。Python语法简单，方便上手，并且兼容Windows，Mac，Linux多种操作系统，相关代码库完善，可以迅速实现相关功能。比如web框架Django，可以写个小网页，再比如Pygame，写个小游戏，简单易学，成就感高。目前大热的人工智能相关技术，Python也是首选语言，Github上有着极为丰富的项目库，方便一键调用！比如下面就是利用Python库matplotlib可视化的一张图和利用可谓下可胎教，上可智能。学习的道理大抵是相通的：逐步走出舒适区，学习曲线逐步上升。输入必有输出，最好能有“老师”反馈。此外编程作为一门实践性学习，需要启动最小学习成本（也就是基本语法和概念），然后迅速上手小项目，进行实践输出。学以致用，快速看到学了编程能够做啥，这样才能越学越快。首先推荐一本书，这本书或许是最适合初学者入门的书了，以一个父亲的角度教孩子学习Python。书的实践内容首先是每章后面的习题，让人惊喜的是，基础语法之后的章节，全部都是以小游戏展开的。书籍的示例程序全都在书籍之外，再来推荐一些开源的教程。比如再进一步，Python最强大的就是各种库了，图像处理的OpenCV，数据处理的Numpy，Pandas，Web开发的Django，人工智能的更多海量的原创教程，大抵是通过谷歌、知乎、CSDN等查询学习了。例如在网上搜索Pandas教程，可以检索到 最后，再推荐一款利用Flash卡片学习编程的课程——它的课程特点和前面推荐的书籍很相似，都是先介绍基础的Python概念和语法，再通过小练习和实践去进行巩固的。先看一下入门课：课程目录先是数据与运算，后面还有入门的条件判断，循环，函数，类与对象等，最后还有编程实践。点击课程名可以看到一系列可交互的卡片式学习方案，用提问的方式进行：点开编程基础的知识点可以看到知识脑图，有概念有代码，代码还有相应拆分和解释，小白可以了解代码是如何一步一步写出来的：点开此外还有概念卡，代码卡进行复习夜曲整个课程十分适合小白入门，并且页面清新，交互式体验良好，卡片式学习让人印象深刻。此外，学习过程中也有老师及时反馈，完成正式课程结束后，按期完成学习还有大奖：这种交互式的课程，或许比起视频和书籍，更加适合想要入坑Python的初学者。感兴趣的初学者可以试试他们推出的免费课，20天可以学完Python基础概念，直接在App就能领取体验了！,可以以目标为导向来学，不要去系统性的学习。比如你想做个什么东西，就去尝试开始做，一边做一边学。比如说想做个网站，那么就配置服务器开始，随便找个编程语言，再随便找个流行的框架，按照教程慢慢来。过程中遇到不懂的可以暂时先忽略，一边做一边学习。,"您好，您想自学编程的话，是可以的。不过编程的话，您是想要学web前端、java还是大数据呢？因不知您想要学什么，我简单跟您说一下自学编程您需要确认的几件事。您得弄明白，您自学编程是为了什么，是纯属的个人爱好，还是为了学好之后出来找份高薪工作。如果是个人爱好，那您学编程里面任何一个都可以。如果是为了找份好工作，您得先看根据您自己的实际情况适不适合学。编程这东西，也是时时刻刻跟随着社会走，如果没有坚持学习的心态，那不建议您学编程了。因为编程技术更新迭代比较快，如果您不学，那您终究会看不懂，那不是浪费时间吗？""时间""虽然不收费,但“时间”这东西也无价啊。决定自学，就要有搜集教程的能力。无论是视频还是教材，都得是最近几年的，技术比较前瞻一点的。不然您自学也没什么用。————————————————————————————————————————以上信息确定好了。那您得根据您实际情况看一下，自己是否能自学，并确定一下自己要学的科目：比如web前端、java、大数据等。1. 自己的自律性怎么样好的自律性可以让您保持较好学习状态。2. 持之以恒的耐心持之以恒的耐心可以让你坚持学习完整个课程，没有这样的坚持力很可能会导致半途而废费时费力。3. 自学能力如何自学能力的强弱会直接导致你学习的成果的好坏。4. 逻辑能力怎么样因为大部分编程语言，都需要良好的逻辑能力，像大数据学习的话需要一些数学方面的逻辑知识，如果这方面能力比较强的话那么学起来也就比较容易。您如果有自学能力编程那就更好了。。因不知您想学哪个科目，因此，几个科目的教程送给您。为您解决搜集素材的烦恼。（不懂的地方，可随时问我哦）链接：提取码：7cb9 链接：提取码：链接：提取码：6i9u 链接：提取码：3dcj链接：提取码：du65链接：提取码：or6u链接：提取码：jir1链接：提取码：e68o 链接：提取码：9d3h 链接：提取码：rblg 链接：提取码：4ib9 ",题主口中的“把电脑的一些知识都了解一下”，不是编程。他们只是在编程语言、代码领域、软件开发，比别人了解的多一些。题主想学习电脑知识，应该在知乎搜“如上图的搜索，我就找到了如下这篇回答，这篇回答较为详细的讲解了，如何系统自学简单的电脑知识。题主的问题解决了，接下来说一下学编程，以【兴趣】为目标，或以【提升学校教的编程，这个档次的编程知识】为目标。想以【零基础，或接近零基础】的水平，去学习【入行程序员岗位】目标的编程能力。你可以搜“【学编程有哪些方向】”动力节点11年专注培训“java开发”，这套零基础入门教程，当然两套视频教程都有相对应的资料以及源码。几年前的计算机专业科班生，在毕业前，很多学校就会组织学生，去培训机构参加培训，以此提高学生的就业率和就业档次。网上的教材，就算是把最好的都找出来，并自学学完。也要用上一年左右的时间（至少多半年），学完也是个半吊子（且能不能学完也是个问题），这个水平去找工作，也只能找一家要求不高的公司，低薪打杂。（费这么大劲去低薪打杂？）而找个【好的培训机构】学完，能快速高效的学到比自学更好的技术/项目，学完后能掌握培训机构整理的系统全面技术、和研发的大厂真实项目，这样的能力就能去到大公司，就能独立完成项目工作！而上面去要求不高的公司，很可能遇到奇葩公司。在奇葩小公司发展，和在正规大平台发展，几年后的差距是很大的！在拿动力节点2020年三四月份的就业统计为例：3月就业1名2020年4月面授同学整体就业情况，4月就业1名可以见得，在这篇回答对你有帮助，帮忙点个赞吧~感谢！如果觉得有用，收藏的同时可以关注一下我 ,一定要动手。一定要动手一定要动手剩下的就是如何动手的问题了。最好就是解决一个实际的问题，或者想象中的一个实际问题。从循序渐进与实用的角度考虑，建议你用php+js+mysql 写一个类似留言板的东西只要这个一直专研下去，可以有很多搞头的。此外，js是目前使用最多的语言，真会js，什么C++、java、python都差不多是一个意思。当然，前提是自学一门编程语言而已。真正的编程其实就是一个数学问题。而计算机表达数学符号，你学一下Latex编辑。会这种编辑，再去学算法，学C 之类的会觉得容易好多。会让你懒得去重复造轮子。
阿里巴巴、美团等各大互联网公司的 Java 类校招对本科生的要求是什么？,前辈们你好。================================================不知不觉这个问题已经过去了几年了，本人现在已经本科毕业，目前是一位变电站值班员。虽然一直都有学习相关知识，但是不是从事开发工作，只能学习到一些比较理论的知识。感谢各位一直对这个问题的关注！,"============================以下正文===================================很荣幸的今年通过了阿里巴巴的实习生招聘！我把我看过的书罗列一下吧！最近正在看《算法导论》，和《算法》，md,其实我也想成为算法狗当然，上面这些书我表示只懂50%，惭愧。不能完全吸收大牛的精髓啊！java：基础非常重要，当然也要深入理解原理，什么JVM,JMM,Classloader，还有一些常见类的源码，自己可以试着分析一遍，现在让你说出LinkedList的内部实现你能不能说出来，HashMap不用多说了，80%的面试都会问到。还有重要的，多线程，并发，网络，IO。这些都是要看看看看的！自己多思考！还有楼主说的那些框架，说实话，你要是基础好了，这些都是能够学得很快的，很多问题，看一下源码什么都就懂了！特别是spring的源码要好好看看，里面的架构设计得非常好！各种设计模式满天飞！另外，linux要了解一下，至少要回基本命令吧，脚本语言可以学习一个。比如py！前端要了解一下.关于如何看书：两个字，除了这些然后呢：每天刷几遍CSDN，做程序员个人觉得眼界很重要，就算这不是你的领域，但是你也要知道一点，所以经常关注其他的新技术是非常重要的！平常多接触一点开源技术，多上上github，争取能在github上面贡献一点自己的东西！然后，多看看别人的技术博客。思考自己！关于我的学习方法和面试经验的分享一、基础二、提高三、深入最后送一句话，越努力，越幸运！要私信我的同学，请先看这篇文章，谢谢！“十年饮冰 难凉热血”，欢迎关注，推送互联网技术，也许是个自媒体. : )PS:转载须经本人同意，并支付报酬","近几个月以来都是在找工作，真心觉得这个过程对我来说很不容易，踩了不少坑，感受也很多。上半年也来过这个帖子看过，从 其实我自己水平并不高，可能书看得太多而项目做得相对较少的缘故吧....关于这方面自己也在努力和反思当中。在经历了这么多场面试后, 我觉得有以下经验是可以分享的:下面列举一些我觉得对我来说非常有用的书单和网站, 还有推荐使用的工具, 仅供参考, 希望能帮助到跟我一样找工作的兄弟姐妹们, 还有尚未定位自己的师弟师妹. 以下所有书籍(网站)建议阅读, 著名的CSAPP, 这本书没有作为教材让我觉得很惊讶, 从c语言到汇编语言到硬件再到操作系统, 写得非常好. 虽然是本非常厚的砖头书, 而且看英文的效果比看中文更好, 但是是一本能帮助深入理解计算机系统的书. 基本上把这本书吃透面试操作系统的大部分问题都不是问题被很多acmer coder奉为学算法的经典之作, 尽管不太适合初学者, 因为它这本书很多内容只提供了伪代码, 而没有具体实现. 但是我建议还是从这本书学数据结构和算法最好, 因为日后的编程语言对实现而言实际上并没有特别大的障碍, 只是适合与不适合的选择罢了, 而把想法转换成编程语言才是对算法知识的考验. 如果不想太过深入的话可以忽略掉 第四部分(高级设计和分析技术) 第五部分(高级数据结构) 和 第七部分(算法问题选编), 你会发现书其实比你想象中薄很多噢!如果你觉得看伪代码转换成编程语言这样的学习方式很吃力, 没关系, 这个pdf链接完全可以满足你的需求, 里面把很多常用的算法实现了(c/c++语言), 坚持临摹(注意不是死记硬背, 是临摹!)绝对能应对大多数公司的笔试编程题, 附上如果你是经常用c++刷算法题的同学, 那么一定经常用STL的各种集合, vector, set, stack, queue等等..它们的实现原理, 在源码面前, 了无秘密亚马逊书店五星推荐噢! 里面大概讲述了很多linux系统的使用和命令行等. linux是Java后台开发人员必知必会的操作系统, 而命令行是使用linux系统必须要面对的 对于不想装linux系统的同学其实可以考虑使用腾讯云学习一些linux相关的命令行知识(没错, 不需要图形界面), 学生价一个月才一块钱, 跟月饼厂一个月十块钱比起来也太划算了吧! 而且用linux也蛮酷的啊（.....）再推荐一个神器: 另外关于linux命令行的详细使用, 有一个网站也特别好用: vim编辑器相对其他编辑器来说确实难用了一些, 入门的学习成本也很高, 不过在linux系统中使用vim可以说是必须掌握的技能. 记得我大一的时候程序设计课的TA就开始安利我们使用vim了, 不过当时真的是太愚钝, 根本就学不会(说得好像现在就学会了一样...)网上关于vim的教程很多, 不过有的感觉太专业(比如自定义功能之类的), 我个人认为只要你安装了vim后, 命令行输入至于自定义功能的话, 交给网上的其他大牛来完成吧233333, 这里强烈推荐 软件学院的计算机网络教材, 里面将计算机网络从顶层到底层逐章分析了一遍, 非常适合初学者阅读, 不过最好能够结合一些实验来辅助理解, 因为里面的讲解确实蛮抽象的日本人著的介绍HTTP协议的书, 对理解HTTP协议的一些细节有非常大的帮助, 插画也很多(日本人的行文风格, 感觉就像看漫画一样), 很容易就理解了觉得上面两本讲解网络的还不够深入?我很钦佩这本书的作者, 能把枯燥的知识讲得那么那么那么细致, 非常强烈推荐这一本, 看完相应章节后大概能够明白为什么TCP/IP要这么设计了. 面试的时候经常问到三次握手和四次挥手, 还有各种状态的转移, TIME_WAIT的时间为什么是2*MSL...中文版快800页, 不过我只看了一些章节, 这本书也是把TCP/IP的细节讲得很深很深, 此外还有非常重要的基本套接字编程, 就是写网络程序的时候那些bind, accept, listen, send, receive函数之类的, 内容非常多, 但是这些是理解多路复用模型所需要掌握的...select/poll/epoll这些系统调用解决了什么问题? 事件机制能不能理解? 就看这本书的前六章了这个也是web开发中离不开的东西, 必须划重点学会的是ER图/SQL语句/存储数据(磁盘|文件|RAID|缓冲池等)/三大范式/索引以及相应的数据结构/事务相关的所有概念, 尤其重点学习SQL, 附上学习这个是做web开发基础中的基础, 个人感觉学习难度不大, 但是建议一口气学完并尝试利用它们做一个简单的个人简历, 否则学习曲线会比较断断续续, 不够一气呵成, 具体教程可以参考 做前端的应该都知道这个玩意的了，简单地说就是能让开发更加方便吧，解放生产力的一个工具，至少大于号和小于号不用再按来按去了...比如说要打出下面的代码测试列表效果之类的：借助emmet插件只需要这么写：.list-block.list-block-search.searchbar-found>ul>(li.item-content>.item-inner>.item-title{$})*6然后按tab键就能生成了....更多的用法详情请见：关于javascript, 其实纯粹使用原生javascript开发网站的话很麻烦, 所以就萌生出了这么一些框架: jQuery解决了浏览器兼容性的问题(虽然据说要过时了), Bootstrap可以很无脑地开发出看起来蛮好看的网页(其实还有很重要方面是响应式前端); 而AngularJS主要是有一个很重要的思想:MVVM, 随后崛起的可能利用上面框架开发的时候会遇到一些很棘手的问题不知道如何解决或理解, 那么建议先看看王福朋的博客: 一个对于前端开发工程师来说非常强大的编辑器, 可以提供各种各样的自动补全(必会emmet插件语法), 附上教程 Jetbrain旗下的微软开源的编辑器, 知乎上也有比较详细的将markdown也是很相见恨晚的东西, 我觉得markdown类似于html, 但是比html更简单简洁, 对于喜欢做网上笔记或者个人博客的同学而言是值得推荐的工具. 半小时应该就能上手了, 教程在此个人认为Java入门最好的书籍, 虽然真的很厚, 不过里面重复的话会写很多遍(每天坚持看一点, 一次性读完, 印象也会很深刻的)...对于这本书而言, 建议有一定项目经验的人才去看这本书, 里面列举了很多开发必须注意的条目. 说实话这本书真的不那么好看, 但是你会发现在某些笔试题上会出现这本书的很多条目学习Java怎么能不知道有这么个牛逼轰轰的IDE! 可以说彻底提升了我的开发效率, 简直相见恨晚, 在所有教程中我觉得极客学院做得最为认真, 附上学习教程（之前推荐的是极客学院的网址，但是现在那个网址的图片好像都看不了了- -）为什么我把Maven放在这里? 因为它蛮重要的(其实用(阅读此书时建议把基础部分的全部搞定,)这本书跟《疯狂Java讲义》是配套的, 里面先讲解Servlet/Jsp(Java Server Page)等技术, 然后就是SSH(Struts/Spring/Hibernate)等后台框架的各种使用, 其实说白了就是把这些技术的官方文档给翻译一遍给你而已. 有人觉得struts2都过时了还有没有学习的必要? 我认为理解一下也不会花太长时间, 因为学习任何框架的重点也不仅仅是用而已. 初学者把重点放在一些思想上的东西(尽管很虚, 但是后续的框架基本都会延续这些思想), 比如控制翻转IoC|面向切面编程AOP|对象关系映射ORM|模型-视图-控制器MVC等, 把这些弄懂后之后的SpringMVC, mybatis等后台框架上手会很快的. 这些东西真的太太太太太太基础了, 搞不懂就要考虑转行了(= . =) 另外看这本书入门Java web的时候不要对作者那种用记事本编程的方式太较真, 会debug到天昏地暗的, 使用Intellij Idea就好了(如果不懂使用Intellij Idea可以先去慕课网或极客学院或csdn等网站看看别人是怎么操作的即可). 还有想说的就是, 请务必学会使用maven, 手工导jar包学习Java Web的方式简直就是弱智行为, 而我居然坚持了三个月..最后, 把这本书当成工具书比较合适: 初次阅读理解就好没必要动手实践, 等到需要的时候再翻阅查询还在用xml配置各种依赖注入/数据源/事务管理器? out啦! 随着微应用的流行, 以注解替代xml配置的开发方式将越来越流行. 作者汪云飞没有讲太多废话, 内容基本都是说Spring Boot的某个特性然后举个例子实战, 有利用SSH开发过简单项目的同学可以尝尝先(我去实习的岗位早就开始用了, 觉得蛮新颖的) 实际上学习任何一个框架的时候要先了解这个框架解决了什么问题, 只有理解了这个后才能更有针对性也更有效率地去进行学习隆重推荐这本神书, 很有趣. 刚开始读觉得很深, 但是和《轻量级Java EE企业应用实战》一起看, 思考那些设计模式存在的意义, 会对软件架构方面的知识豁然开朗...又是个歪果仁写的书, 里面详细介绍了Java并发工具包java.util.concurrent的各种工具以及很多的并发编程实践之道, 是并发编程的入门之作.国人写的书, 也是写Java并发编程的, 与上一本相比个人认为比较凝练/干净/易懂作者叫黄勇, 一本非常让我拍手叫绝的书....首推! 绝对干货! 如果你不想看spring源码也没有太大关系, 这本书带你一步步地开发出一个类似spring mvc的简单框架, 并且逐步地增加需求和完善, 理解了每个细节对于理解Java Web的开发是很有帮助的这本书我觉得是必看的, 可以说是对我帮助最大的一本技术书籍, 覆盖了Java Web很多方面的知识, 比如计算机网络|Tomcat结构|Spring架构|SpringMVC原理|模板引擎实现原理等, 绝对很有收货, 足够有深度也很有难度一本比较详细的书, 其实对于阅读源代码, 跟着作者的思路读, 再结合自己的断点调试进行学习的方式是最好的想知道Java虚拟机为什么会帮你自动收集垃圾而不需要你管理资源释放吗? 想知道Java虚拟机的内存区域是如何划分的吗? 想知道Java虚拟机是如何唯一确定一个Java实现类, 并且如何加载类的吗? 想知道JVM凭什么能够将远程服务器发送的网络字节加载到JVM内存, 从而实现远程过程调用的吗? 这本书你值得拥有!(感谢这本书让我回答出RPC的实现原理)500行代码! 尽管跟Java没有太大关系, 强烈推荐, 里面的程序主要是一些玩具轮子, 都是用python实现的, 学习这个主要是理解别的程序员在开发软件的时候所做的决策/思路/取舍, 虽然我也没看完, 但是觉得这个资源很赞!!! 其实讲道理这种书应该给DBA看才对, 不知道为什么Java Web开发也要看- - 有次面试就问到说对mysql数据库的性能调优有什么看法, 所以就列在上面. 不过说真的有点晦涩难懂, 如果想简单粗暴地应付面试的话就看著, 确实是很好的入门书籍. 实际上如果有操作系统和Web项目后台开发的基础话阅读起来不会特别困难, 主要内容是介绍当今企业应对大型网站高并发请求的种种策略这本书比较深, 介绍分布式Java应用和相应的应用场景, 什么远程过程调用(RPC)呀, 基于服务的体系架构呀(SOA)等, 同时也讲了很多java比较底层的知识, 最后介绍构建高可用/可伸缩系统的工程经验与上一本书类似, 不过个人觉得更偏向于""介绍""互联网安全架构和分布式系统的各种组件(比如分布式缓存|消息队列|搜索引擎等), 目前我只接触了Redis, 相应的组件实在太多了- - 此外对系统监控和数据分析等也做了相应介绍, 这些我感觉比较偏向运维岗的工作人员Redis的基本用法和在生产环境的应用, 值得拥有, 虽然书籍是用python, 不过Redis的源码解读, 怎么说呢, 反正比spring源码好读太多了....而且作者读得很用心, 整理出了带注释版本的redis源码, 这里再着重推荐两个大神的博客, 都是歪果仁此外还有一些常用的学习网站:   ",两年前写的回答，现在陆陆续续还能收到一些赞。很高兴能够对找工作的各位有所帮助。现在会看之前的答案还算满意，不过工作两年也有了一些心得体会和经验教训，在这里分享给大家。这些纯属个人体会，如果不喜欢可以直接跳到后面看原答案。希望能够对各位有所帮助以下为原答案：// 我知道的国内技术栈以Java为主的公司是美团和阿里，百度和腾讯是C++。今年拿到了美团的offer，现在在美团实习。从找工作到现在对这些大概有了一点点体会，来谈谈自己的想法。校招看重基础，就是语言掌握如何，算法题做的怎么样，计算机网络的基础（TCP三次握手，和UDP区别，HTTP协议），后台开发的话还会问些数据库的东西。有项目的话最好，没有的话本科生应该也可以吧（我就没有项目）必备技能：2.算法数据结构3.计算机基础知识（操作系统，网络，数据库，Linux）下面的内容了解过的话我认为还是很好的，应该会给你加不少分。而且也不难。还有两个是不得不说的：其实有项目的话还是最好的，因为企业也知道大家准备招聘的时候回去看各种先写这么多吧，日后想起来再更。祝大家都拿到理想的offer。对了，最后分享的一些免费Java学习资料大家不要忘了领取。,"我写过一个Java工程师学习指南，我把它分为了四个部分，第一步是打好Java基础，掌握Java核心技术，第二步是掌握Java Web技术栈，能够做一些项目，第三步是掌握Java方面的进阶技术，包括网络编程、并发编程、JVM等，第四步是掌握后端进阶技术，比如分布式、缓存、消息队列等技术。按照这样的一个脉络，我觉得能够掌握这里面的绝大部分内容，并且有过相应的一些实践，那么可以算是学好了Java。当然，学好Java只是一个开始，要真的干好活，做好项目，以及其他各方面的技术工作，则是在学好Java的基础去延伸和展开的。本文提到的知识点整理文章现已全部整理到我的个人博客：入门篇最近有很多小伙伴来问我，Java小白如何入门，如何安排学习路线，每一步应该怎么走比较好。原本我以为之前的几篇文章已经可以解决大家的问题了，其实不然，因为我之前写的文章都是站在Java后端的全局上进行思考和总结的，忽略了很多小白们的感受，而很多朋友都需要更加基础，更加详细的学习路线。先声明一点，文章内容不会详细到每一步怎么操作，只会提供大致的思路和方向，给大家以启发，如果真的要一步一步指导操作的话，那至少需要一本书的厚度啦。01 这一步我们往往会直接跳过，但既然是面向小白的教程，这里就提一下吧。首先你需要一台电脑，然后安装好JDK和JRE，JDK提供的是Java开发工具，也就是一些必备的安装好这两个东东之后，一般还要配置一下环境变量，否则有一些目录可能无法被正确找到。IDE指的就是本地开发编辑器，没有了它，你就只能直接在记事本这类工具里敲代码了。IDE最大的好处就是整合了大量的工具和功能模块，让你非常轻松地完成开发。以前大家都用eclipse，不过eclipse已经不流行了，现在我推荐你直接用intellij idea作为你的第一个代码编辑器。如果是用过eclipse的同学，基本上也可以无痛切换。intellij idea可以直接在官网上下载，试用版30天，如果想要永久使用，网上也有一些办法滴。jar包是什么，其实就是将一堆class格式文件打包，Java中把它称为jar包，这些jar包在编译器中能被直接识别，让开发者使用。对于新手来说，可能只需要用到JDK自带的一些API，但是如果你要引用外部jar包，可能就会遇到一些困难了。对于idea来说，导入外部jar包有两种办法，一种是手动导入jar包，一种是使用maven。后者会在Java Web相关的文章中讲起。手动导入jar包其实也不难，你需要先下载好jar包，然后在对应的项目下选择导入jar包即可，具体的方法这里就不展开说了，因为在网上都找得到。02 了解基础语法学习一门语言，最开始要做的事情就是学习它的语法。我最早学习Java语法是在Runoob，这个网站可以让你对任意一门语言完成最快速的语法入门，当然，这只是相当于你浏览了一遍基础语法。想要真正掌握Java语言基础，光看基础语法还远远不够，我在大三第一次接触Java课程，听老师讲面向对象三大特征听得一头雾水，连数组的初始化方式都理不清楚，但这些内容都是我们需要掌握的。所以，为了学好Java基础，我们还需要看视频或者看书进行学习。视频的话，可以到极客学院或者慕课网听Java基础课程，当然也可以看我分享的Java视频课程。大家也都知道，现在Java的培训班非常多，基本上学的东西也都大同小异，不过它们的有些课程还不错，大家有渠道的话也可以去看一看。看视频的好处是你可以更好地接收知识，同时也会耗费你更多实践，所以，有时候你也可以选择看书。看书的话，对于小白来说不推荐太复杂的书，比如《Java编程思想》这种书，新手千万不要看。我个人建议，你只需要先看看《Java入门到精通》这种类型的书就足够了，因为这个部分的学习只是为你后面的学习开个头，你以后可能还要回过头来重新研究这些内容。现在市面上介绍Java基础的书籍实在太多了，质量参差不齐，内容同质化严重，笔者看过的其实也不多。给大家一个建议，你只需要挑一两本书来看即可，这里推荐两本最简单的吧，《head first java》和《Java从入门到精通》。看博客这里再推荐另一种学习方式，就是看博客，博客比起书籍来说，更适合对于某个技术点的学习，你可以很容易地在网上找到这个知识点相关的原理，实现方法，以及代码范例。里没有讲解特别基础的东西，如果你看一些比较基础的文章，可以到Runoob等网站上查看。如果你有一个很明确的知识点想要学习，相信搜搜引擎会给你更好的答案。除此之外，一般的Java书籍或者视频课程都会要求你相应完成一些练习题，这部分内容你需要自己在电脑里使用IDE完成。在IDE里，你可以很好地熟悉Java语言的使用，基本代码的实现，同时可以尝试各种各样的API,并且测试一些语言特性，比如继承，封装，多态等等。另外，这也是你熟悉IDE的一个好机会，因为在公司里做开发可能要用到IDE各种各样的功能，提前熟悉好IDE绝对是有益无害的。03 在Java入门阶段，你可能需要接触到以下这部分知识，不管你是从通过哪种方式学习，这些内容都是你学习Java基础时绕不过的重点。这部分内容是你必须要掌握的内容，在入门阶段你需要把这些基础打扎实，以便于在学习后面的内容时可以更上一层楼。如何把基础打扎实呢，最好的办法就是在IDE上把书上或者视频上的每个例子都实现一遍，当然有的时候你也可以自己写一些有意思的例子。比如int，double，char，以及其包装类。熟悉基本数据类型的使用，了解每种类型所占的字节数，以及它们和包装类之间的相互转换。比如for循环，if else，while循环等等如果是学过c语言的同学，这部分可以跳过了。字符串类型是Java中很重要的类型，它不是基本数据类型，但却很常用，熟悉和实践String相关的api，开始你对字符串的学习吧。数组的初始化方式有哪些，二维数组应该怎么写，把数组当成方法参数又该怎么处理？Java中最重要的两个概念：类和对象，它们有什么用呢，有什么区别和联系呢，请在代码中实践它们吧。对于这部分内容，我相信很多小白只能了解它们的基本使用方法，但是并不明白其背后的一些原理：比如为什么接口和抽象类有这些区别，多态的意义是什么，为什么要有反射。新手在学习这部分内容时，只需要知道怎么用就可以了。当然，你最好把这些特性都实现一遍，以加深印象。至于为什么有这些特性，这些特性背后的原理是什么，不是我们现在讨论的内容，这些内容我们将在初级和中级篇中讲述。因为，要了解这些原理，你得了解JVM，了解并发技术的基础，了解网络基础，甚至更多。显然，这不是你现在能做到的。写一些接口，同时写一些实现类去实现这些接口，并且了解一下为什么我们需要接口，为什么子类需要实现接口里的方法。同理，去实现一些抽象类吧。然后，看看它和接口有什么不同。如何理解继承，子类和父类之间有什么联系呢。封装是一种保护代码的方式，有哪些方式可以实现封装呢。多态一般分为重载和重写，它们分别怎么使用？Java中的异常处理主要用于捕获和处理错误，请你写一些try catch代码块去捕获错误吧。集合类是我们经常需要打交道的东西，List，Map，Set等等，赶快去熟悉API，然后写一些测试例子吧。IO输入流和输出流可以操作文件，网络数据等内容，如何在Java代码中完成这么复杂的操作呢，其实只需要简单的几个api就可以了。为了让系统资源最合理地分配和调度，我们需要多线程，多线程会让程序变得有趣，也会带来很多问题，使用Thread和相关API，去尝试这些有趣的事情吧。1 反射（了解即可，不是入门必须）2 枚举类型和泛型（了解即可，不是入门必须）3 网络通信（了解基本的socket使用即可，需要网络基础）4 数据库操作（了解基本的JDBC即可，需要数据库基础）04 总而言之，对于一个Java小白来说，入门Java可以分为这几步：本文主要是为大家提供一个学习的思路，以及推荐一些学习方法，如果你能够按照这样的步骤去学习，并且配合上一些适合你自己的学习方法来完成学习计划，相信你可以很好地完成对Java的入门。初级篇最近有很多小伙伴来问我，Java小白如何入门，如何安排学习路线，每一步应该怎么走比较好。原本我以为之前的几篇文章已经可以解决大家的问题了，其实不然，因为我之前写的文章都是站在Java后端的全局上进行思考和总结的，忽略了很多小白们的感受，而很多朋友都需要更加基础，更加详细的学习路线。先声明一点，文章内容不会详细到每一步怎么操作，只会提供大致的思路和方向，给大家以启发，如果真的要一步一步指导操作的话，那至少需要一本书的厚度啦。01 jav在上一篇文章中，我们讲到了入门Java的几个步骤，先搭建好环境，然后熟悉基本语法，接着熟悉Java的一些核心技术，并且在代码中进行实现。如果你已经完成了这部分内容的学习，应该会感觉自己对Java已经有一定了解了，可以轻松地写出一些Java代码，比如实现多线程输出数字，再如操作IO流等等。当然，这些代码通常只是一些demo，我们在实际的项目中可能并不会这么简单地使用这些技术，我们可能会同时使用集合类，多线程，以及操作数据库的API。所以，在今天的初级篇中，我们就来谈谈怎么做项目吧。对于大部分Java新手来说，最适合他们入门的项目就是Java Web了。因为Java天然适合做Web应用，并且生态完善，更有很多开源的工具和框架去支撑这些应用，比如Spring，Hibernate，SpringMVC等等。那么，如何开始着手做一个Java Web项目呢。个人认为最好的方式就是看视频了。因为，看书的话，很多内容比较过时，并且一般不会提供源代码。也有一些大佬喜欢推荐开源的项目（在GitHub上面的项目），但是对于小白来说，如果没有很完整的文档去指导他们，那也是毫无意义的。曾几何时，Java Web的项目还在使用JSP + Servlet进行开发，后来出现了Struts2，再后来，出现了我们现在也一直在用的SpringMVC，说实话，不论使用哪种开发框架，你都需要先花一些时间去学习相关的技术，否则你会发现，即使是看视频，你也不知道里面在讲什么。要想做好一个JavaWeb项目，你不仅需要一个好的项目课程，还需要足够的知识储备，下面就让我们来理一理这些内容把。Java基础部分的内容咱们上次说过了，这里就不再重复啦~下面我们分别来说说其他几方面的知识储备把02 推荐资源：在w3cschool学习html，css和js，支持在线测试代码。既然是做Web，就难免要涉及到前端技术，不过，现在前后端分离已经是一种趋势，所以，如果你对前端不感兴趣，也没必要花太多时间去学习。对于大部分同学来说，你最好要了解html的基本标签和格式，自己能够写一些简单页面，CSS的话，也可以稍微接触一些。相对于前面两个服务于样式的技术，我们倒是更应该去学习一下JavaScript，了解它的一些基本语法，以及ajax的使用，因为在前后端交互时，ajax是非常重要的。所以，做一个Java Web项目，你不需要花太多时间在写前端页面上，如果有源代码可以直接使用，当然，对于一些需要修改的前端页面，你得怎么去做修改它，因为有时候你需要使用JSP，JSP既包括前端代码也包括Java代码，如果你完全看不懂前端代码的话，那就很尴尬了。03 JavaWeb的技术栈其实比较庞大，所以我们不要求面面俱到，只是希望你能够熟悉一下项目中可能用到的技术。下面列举一些常见的技术，大家最好要了解一下。推荐资源：《JavaWeb入门到精通》，慕课网、极客学院等网站上的JavaWeb基础课程这是Java Web开发最原始的形态，现在很少直接使用了，但是后来的各种框架其实也是建立在对于JSP，有时候你可能还要学习jstl等标签语言，因为这些标签可以让你更方便地往JSP中插入Java代码。推荐资源：《Spring实战》，慕课网、事实上，除了上述资源之外，你也可以直接到官网上查看快速开始文档。Struts2早已被时代抛弃，Spring则是当今的霸主，你需要了解Spring如何使用，以及SpringMVC如何使用，并且学会在项目中使用它。由于SpringBoot最近很火，并且搭建方式比SpringMVC更简单，你也可以先学习SpringBoot，以便更快速地搭建起你的第一个Java Web项目。推荐资源：《Sql必知必会》，Runoob上的MySQL基础教程，慕课网、极客学院等网站上的视频课程一个JavaWeb应用一定要有数据啊，所以我们需要用到数据库，其实搭一个mysql数据库是非常简单的，但是对于初学者来说最麻烦的就是写sql了，所以，先学会建表，熟悉sql，对你以后做项目也是大有裨益的。推荐资源：Runoob上的Hibernate和Mybatis基础教程，慕课网、极客学院等网站上的视频课程当你学会了使用sql去查询数据，可能还不足以让你在项目中很方便地处理数据，因为我们还需要一个步骤，就是把数据库的数据转化成Java里的对象。orm框架就是为了解决这一问题而出现的，它可以让一张表和Java类一一对应，让数据查询变得非常方便。Hibernate和Mybatis都是orm框架，只不过现在mybatis越来越火了。所以，你需要了解这一技术，因为它会广泛地运用到大部分Java Web项目中。推荐资源：《maven实战》，易百教程里的maven教程，慕课网、极客学院等网站上的视频课程刚才咱们已经说过了Spring，orm框架，以及MySQL等方面的技术了。实际上，一个简单的Java Web项目也只需要这些东西了。但是，有一个问题，就是：一个项目里用到这么多技术，所需要的jar包也会很多，我们如何管理这些jar包呢。如果直接导入所需jar包，那当jar包更新或者需要替换时，每次都要手动操作，非常麻烦。另外，当jar包很多时，项目打包后的war格式文件也会很大，不利于传输。为了解决上述问题，maven应运而生了。maven通过pom.xml文件来指定所需的jar包，并且自带了很多构建相关的功能，比如编译，打包，运行单元测试等等，因为它本身就是一个构建工具。当然，新手可能还难以理解这些概念，你必须要知道的是，大部分Java Web项目需要用maven来管理，你需要学会maven的基本用法，最基本的用法就是：学会修改pom.xml文件。推荐资源：慕课网、极客学院等网站上的视频课程。对于小白来说，Tomcat相关的技术是非常复杂的，毕竟它是一个应用服务器啊，事实上这个时候，你只需要学会如何安装Tomcat即可。毕竟，它在项目中的作用就是提供一个运行环境而已。正常来说，你只要下载解压Tomcat的压缩包即可。由于现在的IDE都支持集成Tomcat，所以一般情况下你都可以在IDE中配置好你的Tomcat路径，然后设置好你的项目路径，IDE会自动把你的工程代码部署到Tomcat服务器上。如果你使用想跳过IDE直接部署工程到Tomcat上，也可以直接编译工程并且打包得到war格式的文件（这个步骤可以使用maven来完成），然后拷贝war文件到Tomcat下的特定目录即可。上述两种部署方式的详细步骤请到搜索引擎寻找答案。推荐资源：既然要做项目，为什么不把它发布在GitHub上。当你熟悉了Git指令之后，你可以很方便地发布你项目中的每一次更新，并且同步到GitHub上，这样既可以让你更好地管理项目版本，又可以让你GitHub更加活跃，为你未来的面试加分。所以，赶紧学好Git指令，然后开启你的项目之旅吧。04 除了上面几种必备的技术之外，有时候我们在项目中还会用到其他东西，在这里我们把它们叫做组件。这里只做简单的介绍，至于具体怎么使用，在网上都可以很容易地找到相关文章。当项目代码比较多的时候，容易发生错误，日志可以很好地记录代码运行时的错误，常用的日志系统有log4j,logging等等，另外你还需要了解一下slf4j。日志系统可以记录代码问题，单元测试则是为了避免代码出错，常用的单元测试组件主要是JUnit，建议你找个文档看一看，然后下载下来玩一下。JSON逐渐成为前后端数据交互的标准格式，为了在项目中使用JSON的API，你也需要导入它的jar包，一般我们都会使用阿里提供的fastjson，赶快下载来玩一玩吧。当然，常用的Java Web组件还有很多，比如HTTPClient，再比如一些加密工具，一些压缩工具等等，这里就不再一一列举了。5 今天的内容就到这里了，与其说是初级篇，反而更像是“项目篇”呢。因为学完基础内容之后，做项目是最好的复习和实践方式了。所以这篇文章围绕着做项目来展开，也就不足为奇了。今天我们主要讲的是，做好一个JavaWeb项目，需要哪些知识储备，需要了解哪些技术，并且我也推荐一些比较精品的视频课程。后面我还会写一篇文章，专门讲一讲怎么做项目，会更加详细，更加侧重怎么去做，敬请期待吧。(9K 赞同，26K 收藏）（7K 赞同，17K 收藏）（8K赞同，30K收藏）（3K 赞同，10K 收藏）（3K 赞同，5K 收藏）-----------------------------------------我是分割线-------------------------------------PS：私信很多，因知乎不常上，有事可以来公众号找我1、点赞、关注、支持一下我的回答8，收藏数是点赞数3倍真的扎心哇▼都看到这里，不点个赞就说不过去了~","哈哈，恰好关注了  和  。看到他们的回答，感觉好欢乐，哈哈。。正好自己是Java方向，今年3月份通过了阿里的实习招聘，暑假实习后目前转正通过，来答一发。熟话说，大公司看基础。阿里校招研发工程师岗位考察的基础可以大致总结如下：1，操作系统。尤其是内存/线程/进程方面2，计算机网络协议，重点关注 TCP/UDP/HTTP。3，数据结构与算法。我本人也没搞过4，数据库，这一部分倒没怎么问我。不过资料显示数据库通常考察以下几点 1） mysql存储引擎中索引的实现机制；2）.数据库事务的几种粒度；3）.行锁，表锁；5，设计模式，熟悉常用的几种设计模式就行。6，Java语言基础。熟悉java语言基础，了解JVM、内存模型，重点考察 面向对象、集合框架（继承关系，实现原理）、异常体系、IO体系、并发集合、多线程。熟悉多线程编程/并发/7，J2EE，熟悉Spring/Spring MVC , ORM 什么的吧。看过源码，了解原理之类的也明显可以加分。8，Linux，熟悉基本的9，自己做的项目。10，其他发散性的问题。拼人品了。不要想得太难了。但是能做到以上几点的，也是很少数应届生。不过楼上几位大神说的也都是对的，你这些书看完和吸收的话，不是",看了这么多的书，平均一本书厚的1000页，我最快大概的看，不求甚解，也要一个半月，这个看完只记得名词，只是熟悉，你的这么多书，真的看完了吗？那些课后题你全是你独立完成的吗？,这是一个不知名的本科生的一点心酸经验啊，我当年（大二）也是想逃离学校流水线培训的传统，想去主流的互联网公司，所以就奋斗啊奋斗啊，现在大三，在北京中关村实习，校招关键还是看基础，因为工作的软件各种各样，进公司就靠基础去学习的，几乎每一个公司的面试官真的对一些问题是必问，要做的是天天有计划地积累！写代码！看书！总结！看别人的面试经历！考考自己！在深度的基础上又有一定广度，还有就是实习和项目的问题，真的有那些经验的确可以加分，毕竟节省很多培养你的成本，但是没有也可以，你的基础一定要扎实，我当年在学校就没有实习机会，也没有高端的实验室，所以只能自己找找资料，看看学长们的学习经验，好好把基础学好，多写写软件！目标的话：面试的时候你能够很自信的表现自己的积累就很棒了，（还有这里面的问题你也要能说出大部分的回答）！说说我觉得重要的几点吧：1，数据结构，原理，应用，复杂度等基础一定熟练，结合算法写代码。2，算法，说白了，面试的时候面试官不是来为难你的，大都会问到经典的题目，平时肯定要多写代码，有篇文章总结常考算法题目很不错的：。每天练两三道吧，时间一久你就有了那种做算法寻找的突破口的思维了，刷刷题leetcode，3，java，我个人认为一定要写软件，最好是可以开源，那种感觉真的不一样，比如你写一个使用注解的4，校招java肯定会问到jvm的，垃圾收集，内存模型，内存管理，线程安全，ClassLoader，类加载，字节码编译（挺重要的），javac等等，出名的书有《深入理解java虚拟机》，《分布式java应用:基础与实践》也有一些jvm的总结，写点demo，准备面试前看看别人的面经，自己试着回答回答，慢慢记得5，其他一些比较重要的java基础有nio，io，集合框架源码等，我之前面试几家知名互联网公司，这些都问到了，看看Netty的源码，不用复杂，看netty3也很好了，可以的话自己用NIO写一个可以搭建echo服务器框架demo，这样你的nio就很熟练了，还有看看Map，Collection接口下的集合的源码，比如HashMap，ArrayList等等，是否可以为空，线程安全否，排列，异常处理，6，数据库我觉得和java一样重要吧，虽然现在NoSQL什么的，MySQL仍然使用非常广，使用可以网上查查不用看书了，《高性能MySQL》确实不错，挑挑重要章节看，面试一般都会问数据库的，比如索引优化，分区分表，查询优化，索引数据结构，sql语句熟悉，看了这本书还怕被问MySQL？怕个锤子。7，并发，这个内容也很多啊，比如《java并发实战》这本书就可以看得出，比如Semaohore，---------------------------------------------------书说说我觉得不错的资料吧：《《《effective java》好多面试深入的java问题在这上面能解答，真是非常值得一读，比如问你在什么时候需要定义自己的序列化？虽然翻译不好~。《《《深入理解java虚拟机》很经典，我也至少看了4遍。《分布式java应用:基础与实践》个人觉得非常好，让你少走弯路啊。《《Java并发编程实战》这个应该是必读吧，并发单独写本书，课件内容需要好好研究的，多写代码压测也很有意思的。《gradle实战》或者《maven实战》个人觉得maven在工作中用的多些，但gradle更新。《高性能MySQL》看了这个面试mysql的知识也不怕什么了吧~《MySQL技术内幕:InnoDB存储引擎》高人推荐，看的不多，但是绝对厉害啊。《Java核心技术》没看过第二卷，其他知识从另外的书上积累的。《《重构》个人觉得挺好的，不然实习的时候负责的老师会叫你改改改，开玩笑，最主要是提升效率，方便维护。---------------------------------------------------资料（待补充~）,大家可以关注我的公众号：自己在几年前参加的校招，经历过很长一段时间的复习，在当年的校招中拿到了很多公司的offer，最后入职了阿里。那段时间，自己看了很多大厂的面经，从各个面经中总结出一套我认为『应届生应聘互联网公司Java职位必会的题目』。还有，我知道很多人会问关于这些题目的答案问题。答案我都有，由于篇幅有限没办法直接贴上来。这些题目的答案我会在我的公众号及,要问各大公司对应届本科生有什么要求，最简单粗暴，却也最有效的方法，就是去看他们每年都考应届生们什么问题。牛妹这里整理了111篇各大互联网公司Java工程师笔经面经，希望能够帮到大家。更多名企笔试真题解析、面试经验交流、招聘信息内推，尽在牛客！求职之前，先上牛客！快快下载拿offer！最后附赠一个彩蛋~最后，祝大家都能成功斩获offer~,！！遗憾的是，大佬只给出了轮廓，具体该怎么学，并没有给出，我想，这应该是很多同学关心的问题。借这个机会，我给大家详细地梳理一波，记得收藏哦！（收藏是点赞的三倍，哭了T﹏T，顺带把赞也安排上呢）重申一下我学习计算机的观点，我想这会对你快速建立起自己的知识体系很有帮助！并且，你应该按照我这个观点从大一就开始实践起来！如果你要学习物理，我推荐你顺着物理的发展史学习，先学习牛顿的经典物理，再学习热力学、电磁学，然后学习相对论、量子力学这些彻底推翻经典物理的，最后学习电动力学这种硬核的。整个学习过程，是先学习电路，然后学习冯诺依曼结构，造一台计算机？接着再学习如何用汇编写个 mini os？接着学习如何写一个简易版的编译器？最后再学习高级编程语言，比如说 Java、Python？显然这样是行不通的！什么是顶？我想一门高级的编程语言就是，比如说 Java！当你学习到 Java 并发编程中的“原子性”、“同步”、“异步”、“进程”、“内存分配”这些概念的时候，你自然而然会产生很多疑问，然后就会去学习计算机组成原理、操作系统，然后你的一系列问题就会逐渐被解决。当你发现，用 Java 实现某个业务需求时，人家的算法实现比你快得多，你自然会好奇，为什么会这样？然后你发现人家用的数据结构和你的不同，大佬把 Java 语言基础放在了第 6 的位置，我认为应该放在第一位。你不要一上来就去读《Java 编程思想》这样的经典黑皮书，因为你还没有一丁点编程基础，去看这本黑皮书很容易劝退。你可以先看看这些，全部都是校招面试中考察的重点。为了整理这份 PDF，我可是费了老大劲，希望你能珍惜。然后你可以去看视频入门，无论是动力节点的，还是尚硅谷的，我觉得都可以，你可以每个看那么五六节，感觉哪个老师的风格更适合你就选哪一个。看着弹幕学着习，就是那么朴实无华。不过，这两份视频教程的内容实在是太多了，以至于有些内容是可以跳过的，这样能节省不少时间。比如说：因为现在都用 IDEA 作为集成开发环境了，完美不需要再搞这些事情。在这之后，推荐给你三本书：《Java编程思想》、《Java 并发编程实战》和《深入理解Java虚拟机》。我桌子版摆了一大摞 Java 相关的书籍。Java 并发编程和 Java 虚拟机是校招面试中的核心，我把一些题目列出来，你可以拿来自测。虽然大佬在第 7 点没有提 Spring Boot，那是因为 2014 年的时候 Spring Boot 还没有走入大众的视野，当时的 SSM（Spring+SpringMVC+MyBatis）还是顶梁柱！框架部分不仅仅是要掌握怎么用，更重要的是要知道原理，Spring 的核心说一千道一万，就是 AOP、IoC。AOP（Aspect-Oriented Programming），也就是面向切面编程，能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。IoC（Inverse of Control），也就是控制反转，是一种设计思想，就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。DI（Dependency Injection），也就是依赖注入，原来叫 IoC，能让人更加直观和清晰地理解其背后所代表的含义。Spring 怎么学？可以到 B 站上看一下先学习 SSM，再学习 Spring Boot。Spring Boot 的出现，并不意味着 Spring 和 SpringMVC 已经过时了，从设计目的上来说，Spring Boot 只是实现了 Spring 的自动装配，降低了项目搭建的难度。从技术角度来说，Spring Boot 的底层依然是 Spring 的核心机制，也就是 AOP 和 IoC，Spring Boot 只是一个承载者。在我看来，学习 Spring 的正确路径应该是 大佬没有提 C 语言，为什么我要提呢？为什么学了 Java，又要学习 C语言呢？这是因为，归根结底，我们学的是计算机科学（CS），而不是编程语言。要想进阿里、美团这样的大厂，计算机组成原理、操作系统、计算机网络、数据结构与算法这些知识点又是不可获取的，而这些知识，有很大一部分是建立在 C 语言的基础上的。给你推荐一门课，浙江大学为什么要学习计算机组成原理呢？我逐渐发现，学习各种编程语言、框架，就好比在练拳法招式，可以在短时间内提高你的武力值，但想要进一步更上一层楼，就必须得扎马步，练习内功心法，对于我们程序员来说，什么是大家都知道，学了计算机组成原理，你就可以学习编译原理、操作系统这些硬核的计算机基础知识，不然的话，学起来就会缺少根基。明白了计算机组成原理的重要性，你肯定要问，如何才能学好这门课呢？先来分享一些学习资料。推荐两本书，《计算机是怎样跑起来的》和《同时，可以配合北京大学的《计算机组成》公开课来学，讲师为两本书都不厚，属于浓缩精简版的，配有大量的图文。相比较来说，《程序是怎样跑起来的》比《北京大学的这门公开课一共也就 10 多个小时，所以不用花太多时间就能搞明白。同样推荐两本书，《这两本《深入理解计算机系统》又简写为 CSAPP，在网上有配套的视频课程，地址：中文字幕是通过 Google 翻译后重新校对的，精校版见：如果想看英文原版的，见地址：另外，《编码：再来分享一些学习心得。学习计算机组成原理的时候，会涉及到很多很多概念，每个概念剥茧抽丝后，又会牵扯出很多相关的概念，比如说你想理解 CPU 是如何实现加法运算的，你就会遇到算术逻辑单元这个概念，然后还要理解计算机是如何把整数表示成二进制数的等等。这些概念你很难在短时间内全部消化掉，所以你需要隔一段时间重新去学习，并且要结合实际的工作需求去理解。比如说，涉及到金融计算时，为什么不能直接使用浮点数？这背后的原因就是，计算机存储的是二进制，而二进制是无法精确地表示浮点数的。但二进制可以精确地表示整数。（至于为什么，就需要深入地学习计算机组成原理了。《程序是怎样跑起来的》这本书的第二章和第三章就会详细地解释）所以实际的工作当中，一般会用整数来表示金额，比如说 1.11 元，会乘以 100，用 111 来表示，返回给用户的时候再除以 100，免得在计算的过程中丢失精度。也就是大佬提到的第一点，需要关注内存/线程/进程等方面。为什么要学习操作系统呢？第一，面试要考；第二，无论学习哪门子编程语言，比如说 Java、C/C++，都需要和操作系统打交道，像 Java 中的多线程技术，其实是由操作系统来负责进程和线程管理的；第三，学习操作系统，还能学到内存分配方面的知识。《操作系统是计算机系统中负责管理各种软硬件资源的核心系统软件，为应用软件运行提供良好的环境。鉴于那么多的关于网络服务端和客户端的软件工程，计算机网络是计算机科学中价值最为“立竿见影”的领域之一。其他书籍：需要关注的重点：也就是大佬提到的第 4 点，可能不会问得特别多。SQL 语法需要准备一下，有的面试会让你根据场景写出 SQL。MySQL 和 Redis 是面试中常问的两个数据库，这里推荐看《MySQL 技术内幕 innodb 存储引擎》和 《Redis 设计与实现》。在线学习网站：其他书籍：也就是大佬提到的第 5 点。常用的几种设计模式必须得清楚，比如：我认为设计模式是初中级程序员迈向高级程序员的必经之路。有不少程序员，前期冲劲十足，但后继乏力，都是吃了设计模式的亏。在工作的前几年，大部分程序员都处于熟悉编程语言的阶段，也就是处于“技”的阶段，随后就要进入“术”的阶段了。在编程领域，“术”的典型代表就是“设计模式”。你可能听说过，学习设计模式非常的重要，那么为什么这么重要呢，设计模式到底是什么？打个比喻学编程就像学武功一样。武功要练得很牛逼，有两样东西不能丢。第一，是内功；第二，是武功秘籍。内功对应到编程就是我们编程基础能力，那编程的设计模式就可以想象成武术中的武功秘籍。。像阿里、美团，这些互联网大厂，对算法都比较痴迷。给你看看阿里校招对 Java 研发岗的要求。可以看得出，校招不同社招，更看重的是你的计算机基础功底和你的学习能力，对数据结构与算法的要求甚至高过计算机网络和编程语言。为什么数据结构这么重要呢？清华大学计算机系。我这里有一份美团大佬的刷题笔记，强烈推荐给你！展示点内容给你看下。也就是阿里大佬提到的第 9 点，大学阶段，做什么练手项目呢？推荐你看看我之前的一个回答。一共十条，刚好十全十美。最后，给你聊一下我认为学编程当中最重要的三点，尤其是针对大学生来说。先说热爱。有的同学是一开始就热爱，所以选专业的时候就选择了计算机专业；有的同学是误打误撞，比如说我就是，大学其实选的是机械自动化，后来被调剂到了计算机网络专业，属于典型的后知后觉型。一开始，和大多数新人一样，我认为编程好难学，班里面的好多同学也认为好难学，能转专业的就转，只有不能转的才留了下来。十几年前的计算机专业远没有现在这么热闹，很多学校都是作为边缘专业来录的。和我同届的高中同学，我认识的当中，没有主动选择计算机专业的。所以，我对计算机的热爱，纯粹是经过后天刻意练习的。很多同学可能会不解，热爱也能练习？当然。当我发现这个专业找到工作，能养活自己，能不再伸手向父母要钱的时候，热爱就一点点的来了。随着年纪的增长，我越来越喜欢这个专业了，不是因为它充满魅力，而是它让我的生活变得越来越好。对，我是个俗人。有了热爱，你自然就会去努力！这是水到渠成的一件事情。但往往很多时候，你可能会迷茫，不知道该往哪里去努力，不知道自己的劲往哪里使！。,"要的不是平台型人才，它要的是计算机人才。
平台型人才可以培养，
什么叫计算机人才？掌握操作系统，数据结构，等等",楼上很多大牛都给出了很多阅读资料，很值得好好阅读巩固基础。我也看过一个比较“精华”且实用的阿里面试问题的帖子，不仅仅适用于社招，也适用于校招。大家可以参考下：来源：,### 开头2017.08.21  正式开启我入职的里程，现在已是工作了一个星期了，这个星期算是我入职的过渡期，算是知道了学校生活和工作的差距了，总之，尽快习惯这种生活吧。下面讲下自己的找工作经历和大学阅读的书籍，算是一种书籍推荐，为还在迷茫的你指引方向，同时为我三年的大学生活致敬！也激励我大四在公司实习能更上一层楼！### 找工作经历这段经历，算是自己很难忘记的经历吧。既辛酸既充实的日子！也很感谢自己在这段时间的系统复习，感觉把自己的基础知识再次聚集在一起了，自己的能力在这一段时间提升的也很快。后面有机会的话我也想写一系列的相关文章，为后来准备工作（面试）的同学提供一些自己的帮助。自己在找工作的这段时间面过的公司也有几家大厂，但是结果都不是很好，对我自己有很大的压力，当时心里真的感觉 ：“自己真的有这么差”，为什么一直被拒，当时很怀疑自己的能力，自己也有总结原因。一是面试的时候自己准备的还不够充分，虽说自己脑子里对这些基础有点印象，但是面试的时候自己稍紧张下就描述不怎么清楚了，导致面试官觉得你可能广度够了，深度还不够（这是阿里面试官电话面试说的）；二是自己的表达能力还是有所欠缺，不能够将自己所要表达的东西说出来，这可能我要在后面加强的地方；三是我的学校问题，好些家公司面试官对我的学校都有问及，可能觉得我的学校在上海，但是觉得上海好像没这么个学校，在此澄清下，我的学校是华东交通大学，在南昌，不是在南昌，要说和上海交大有没有渊源，我只能说有，具体请去百度查。在面了几家公司失败后，终于面了家公司要我了，我也确定在这家公司了。很幸运，刚出来，就有一个很好（很负责）的架构师带我，这周就给了我一个很牛逼的项目给我看（虽然自己目前还没有思路改里面的代码），里面新东西很多，说吃透了这个项目，以后绝对可以拿出去吹逼（一脸正经.jpg）。目前我的找工作经历就简短的介绍到这里了，如果感兴趣的话，可以加群：528776268   进来和我讨论交流。### 书籍推荐大学，我不怎么喜欢玩游戏，自己也还算不怎么堕落吧，看了以下的一些书籍，算是对我后面写博客、找工作也有很大的帮助。如果你是大神，请忽略，如果你还是还在大学，和我一样不想把时间浪费在游戏上，可以看看我推荐的一些书籍，有想讨论的请在评论下留下你的评论或者加上面给的群号。#### Java1、《Java 核心技术》卷一 、卷二              两本书，算是入门比较好的书籍了2、《疯狂 Java 讲义》                                很厚的一本书，里面的内容也是很注重基础了3、《Java 并发编程的艺术》——  方腾飞 、魏鹏、程晓明著        方腾飞 是并发编程网的创始人，里面的文章确实还不错，可以多看看里面的文章，收获绝对很大。4、《 Java多线程编程核心技术》——  5、《Java 并发编程实战》 这本书讲的有点难懂啊，不过确实也是一本很好的书，以上三本书籍如果都弄懂了，我觉得你并发编程这块可能大概就 OK 了，然后再去看看线程池的源码，了解下线程池，我觉得那就更棒了。不想看的话，请看我的博客：[Java 线程池艺术探索](6、《Effective Java》中文版 第二版       算是 Java 的进阶书籍了，面试好多问题也是从这出来的7、《深入理解 Java 虚拟机——JVM高级特性与最佳实践》第二版     这算是国内讲 JVM 最清楚的书了吧，目前还是只看了一遍，后面继续啃，大厂面试几乎也是都会考 JVM 的，阿里面 JVM 特别多，想进阿里的同学请一定要买这本书去看。8、《深入分析Java  Web技术内幕  修订版》许令波著   里面知识很广，每一章都是一个不同的知识，可见作者的优秀，不愧是阿里大神。9、《大型网站系统与 Java 中间件实践》—— 曽宪杰 著    作者是前淘宝技术总监，见证了淘宝网的发展，里面的讲的内容也是很好，看完能让自己也站在高处去思考问题。10、《大型网站技术架构 —— 核心原理与案例分析》 —— 11、《疯狂Java.突破程序员基本功的16课》 李刚 著       书中很注重 Java 的一些细节，讲的很深入，但是书中的错别字特多，可以看看我的读书笔记：[《疯狂 Java 突破程序员基本功的 16 课》读书笔记](12、《Spring 实战》   Spring 入门书籍13、《Spring 揭秘》—— 王福强  著   这本书别提多牛了，出版时期为 2009 年，豆瓣评分为 9.0 分，写的是真棒！把 Spring 的 IOC 和 AOP 特性写的很清楚，把 Spring 的来龙去脉讲的很全。墙裂推荐这本书籍，如果你想看 Spring，作者很牛，资深架构师，很有幸和作者有过一次交流，当时因为自己的一篇博客  [Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子](14、《Spring 技术内幕》—— 深入解析 Spring 架构与设计原理     讲解 Spring 源码，深入了内部机制，个人觉得还是不错的。15、Spring 官方的英文文档          这个别提了，很好，能看英文尽量看英文16、《跟开涛学 Spring 3》  《跟开涛学 Spring MVC》  京东大神，膜17、《看透springMvc源代码分析与实践》    算是把 Spring MVC 源码讲的很好的了见我的笔记：[1、通过源码详解 Servlet]([2 、看透 Spring MVC 源代码分析与实践 —— 网站基础知识]([3 、看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC]([4 、看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析](18、《Spring Boot 实战》19、Spring Boot 官方 Reference Guide        网上好多写 SpringBoot 的博客，几乎和这个差不多。20、《JavaEE开发的颠覆者: Spring Boot实战》21、MyBatis 当然是官方的文档最好了，而且还是中文的。自己也写过几篇文章，帮助过很多人入门，传送门：1、[通过项目逐步深入了解Mybatis（一）](2、[通过项目逐步深入了解Mybatis（二）](3、[通过项目逐步深入了解Mybatis（三）](4、[通过项目逐步深入了解Mybatis（四）](22、《深入理解 Java 内存模型》—— 程晓明 著      我觉得每个 Java 程序员都应该了解下 Java 的内存模型，该书籍我看的是电子版的，不多，但是讲的却很清楚，把重排序、顺序一致性、Volatile、锁、final等写的很清楚。#### Linux《鸟哥的Linux私房菜 基础学习篇(第三版)  》鸟哥的Linux私房菜：服务器架设篇(第3版)    鸟哥的书#### 计算机网络《计算机网络第六版——《计算机网络自顶向下方法》#### 计算机系统《代码揭秘：从C／C.的角度探秘计算机系统 —— 左飞》《《计算机科学导论_佛罗赞》#### 数据库《高性能MySQL》《Mysql技术内幕InnoDB存储引擎》#### Python这门语言语法很简单，上手快，不过我目前好久没用了，都忘得差不多了。当时是看的廖雪峰的 Python 博客自己也用 Python 做爬虫写过几篇博客，不过有些是在前人的基础上写的。感谢那些栽树的人！#### 工具Git   ： 廖雪峰的 Git 教程IDEA：[IntelliJ IDEA 简体中文专题教程](Maven：《Maven实战》#### 其他《如何高效学习-斯科特杨》   教你怎样高效学习的《软技能：代码之外的生存指南》    程序员除了写代码，还得懂点其他的软技能。《[《How-To-Ask-Questions-The-Smart-Way》](### 优秀网站推荐1、GitHub     别和我说不知道2、InfoQ		文章很不错3、CSDN	经常看博客专家的博客，里面大牛很多，传送门：[zhisheng](4、知乎 		多关注些大牛，看他们吹逼5、掘金		自己也在上面写专栏，粉丝已经超过一万了，传送门 ：[zhisheng](6、并发编程网	前面已经介绍7、developerworks     上面的博客也很好8、9、微信公众号	关注了很多人，有些人的文章确实很好。10、牛客网		刷笔试题不错的地方，里面大牛超多，怀念叶神和左神讲课的时候，还有很有爱的牛妹。11、优秀博主的博客地址了### 优秀博客推荐[廖雪峰]([阮一峰的网络日志]([酷壳-陈皓]([RednaxelaFX]([江南白衣]([stormzhang]([你假笨]([占小狼]([泥瓦匠BYSocket]([崔庆才]([纯洁的微笑]([程序猿DD]([周立]([芋艿V的博客]([zhisheng](### 最后送一句话，**越努力，越幸运，祝早日成为大神！*****这些地方可以找到我：+ blog:  [+ GitHub: [+ QQ 群：528776268,努力吧，阿里之星等着你。,本人有幸参加了2020的校园秋季招聘，基本所有的互联网大厂都面过，面试、笔试参加了少说也有几十次，收获颇多，同实验室的小伙伴也基本拿到了5、6个大厂offer。笔者找的大部分都是Java后端相关职位，特来分享经验，请诸君多多指教。本经验贴适用今年的大厂薪资还没有出炉，用去年的老图镇楼，不过根据已出炉公司的薪资数据来看，今年月薪普遍上调2-3k。废话不多说，直接上干货。互联网大厂注重基础，这里我会详细的把要学习的计算机知识总结出来。（注明：这里我即针对的方向是这一部分面试必问，无论你技术做哪个方向都会被问到。推荐书籍：《操作系统-考研复习指导》（除了基本概念，一些Linux操作系统的基本命令面试也会被问到，这里推荐《操作系统这里我就推荐这两本，贪多嚼不烂。尤其是操作系统的基本概念，一定要记牢。同样，这一部分面试必问。推荐入门书籍：《推荐核心书籍《前面三门书做入门即可，但这本书一定要反复地看，反复的理解，计算机网络记忆的部分比较多，要多看多记。这一部分我说是全文最重要的部分也不为过，概念性的东西，面试的过程中说不清楚或者比较模糊都问题不大，但你算法写不出来铁定凉凉，互联网大厂每一面必定会让你写一道算法，其重要程度可想而知。推荐入门书籍：《算法图解》、《漫画算法：小灰的算法之旅》。推荐核心书籍《算法-第四版》这本书真的写得非常棒，书中的代码一定要自己实现一遍。其实还有一本好的算法书《算法导论》，但本书艰深晦涩，数学证明很多，不建议用来应对面试。除了看书以外，算法一定要刷题，这里推荐在力扣上刷，附链接：如果无从下手的话，可以从算法一定要重视，至少预留半年刷题时间，刚开始刷肯定很痛苦，坚持下去吃就好了，慢慢自己就会摸索出规律。（PS：吐槽一下，算法真的是无穷无尽呐，感觉自己永远也刷不完，永远无法完全掌握，上一次给我这种无力感的科目是《高等数学》，o(╥﹏╥)o）数据库也基本每一面必问，一般来说是概念相关的问的比较多，偶尔也会让写sql语句。推荐入门书籍：《Mysql必知必会》，这本书主要是一些基本命令的学习，基本的查询一定要会。推荐核心书籍：《高性能MySQL（第3版）》，反复看，反复体会。数据库除了书本的学习之外，一定要多看博客，多做总结，B站上一些好的视频也可以用来学习。除了Mysql数据库之外，Redis也要掌握，推荐书籍，《Redis同样建议搭配视频学习。语言其实只是一门工具，大厂面试其实不是很注重你掌握的编程语言是什么，主要考察计算机基础的能力。故我将此部分放在最后。Java可分为三部分学习：1.Java基础推荐书籍《Java核心技术卷1基础知识》《Java核心技术卷2高级特性》2.Java虚拟机推荐书籍《深入理解JAVA虚拟机》经典之作，不多做解释了。3.Java并发编程推荐书籍《实战Java高并发程序设计》《Java并发编程之美》。以上关于Java的三个部分都建议配合B站视频学习，网上的相关学习视频非常多，找一款适合自己口味的就行。至于框架，像是Spring全家桶什么的，其实大厂问的不是很多，稍作了解即可。除了以上列出的书籍外，在找工作的过程中一定要去牛客网（附链接：祝各位都能找到满意的工作！ps：打个小广告，本科的同学如果想要继续读研深造的话，可以选择西电，考研难度还好，找工作真的很强势，观察往年的就业报告以及我个人的秋招体会，在互联网行业，西电真的不差，身边的很多大佬把大厂offer拿到手软。西电现在又在广州设立了研究生院，正是抄底的好时候，性价比真的很高，欢迎报考。o(*￣︶￣*)o,每次看到这种问题就有一种大学白上了的感觉。。。,"事实上，不同公司的技术基础要求不一样，工资待遇当然也不一样。不提阿里巴巴和美团了，就说说爱奇艺吧，这家公司想要的负责大流量应用服务的设计与研发 1. 扎实的计算机基础知识，精通Java；2. 爱好技术开发工作，具备高效，健壮，简洁的设计和代码风格；3. 熟练掌握SQL语句，熟练使用关系数据库，熟悉数据库设计与性能调优；4. 有主流NoSQL(Mongo，Redis,HBase等)使用开发经验为佳； 5. 对Http ，TCP/IP 网络协议有清晰理解； 6. 熟悉Linux 开发环境，有 shell/awk/python等系统脚本编写能力为佳； 7. 计算机科学或相关技术学科的本科及以上学历；8. 正直诚信，易于沟通。其实，大部分校招岗位的招聘岗位要求如下：（共通性）1、本科以上，可以全职参与工作，实习时间6-10个月；2、Java基础较好(熟悉常见类库，大多时候可以扔掉baidu和google两个拐杖独立行走)；3、对于Java单词后面多加个Script，还需了解html5,css,jquey以及电商前端开发技术； 4、了解springMVC、spring，hibernate及其内核，还需了解中间件及数据库集群。Java是一门技术活，如果你想蒙混过关，这恐怕不是长久之计。即使你进了企业，没有掌握纯熟的技术，企业也会让你走人的。想学就好好学，把技术学到极致，offer自然不会飞，或有更高的造诣，成为Java界的大牛。另外，需要提醒你的是：我不知道你选择的专业是否与计算机相关。如果是，你就不但要有着过人的敏捷的思维和一堆繁琐的算法，而且最重要的是对学科的热爱：像是编程，软硬件，网络都要手到擒来，要不你这四年就算白过了。 计算机相关的知识是更新最快的，在学校学的80%到社会里都用不上。你主攻的科目很可能在你的公司里一点都用不到。你要把那些永远都是基础的东西学透：比如算法，数据结构，组合数学，计算机组成原理，汇编语言和嵌入式，计算机网络的概况，编程语言学会C或C++就行了。因为新的一门语言都是换汤不换药的，改改语法和约素，厉害的程序员几天就能学会一门新的语言。真正想锻炼自己思维的话还是多从网上找课题项目来编，当你编出一个题目时，成就感油然而生，而且你会更感兴趣，编多了你的思维就能上一个层次。如果有条件，还是建议你是去外企的软件公司，或者自己研究个项目，要完成什么功能。因为实践出真知，牛人们都是从一行行代码培养起来的，只有亲自动手才会有提高。",看书动手实践写代码可以掌握70%的知识，看书写文章可以掌握40%的知识，只看书只能掌握20%的知识,算法方面最重要，4本书（有点厚，和thinking in java差不多）编程之美剑指offerjava方面5本thinking in java深入effective java设计模式还有进阶看完并理解你就说大神,"根据前辈们所描述的知识和书籍，我整理了两个月从三月份入学开始（现在5.4）中间也在图书馆借阅了部分书籍，终于整理出来了部分学习计划已经学过知识：1.JAVA基础（第一行代码JAVA）2.SQL基础语法（极限IT第一节）3.JAVAWEB基础（黑马32期）4.maven和gradle初步使用（5.初步会使用框架（ssm和springboot）根据以上知识可以在学校老师的工作室进行实践项目开发，然后就是目前的计划！！五月一号至六月三十号学习计划（书要读三遍，第二遍开始通过代码学习，第三遍写博客）：1.《JAVA编程思想》（已看完一遍）2.《深入理解JAVA虚拟机》（已看完一遍）3.《4.《JAVA并发编程实战》5.《6.《剑指offer》七月一号至八月三十一号学习计划（这里需要复习所有的计算机基础知识，包括学过或者没学过的）：1.《计算机网络（自顶向下方法）》2.《TCP/IP详解：卷一协议》3.《4.《现代操作系统》5.《数据库系统：基础篇》或者《高性能MySQL》6.《鸟哥的Linux私房菜》按照我的经验，一个月看三本是我的极限了，但是，突破极限才有进步，所以再列出来两本书7.《编译原理》8.《算法导论》（我看过《算法》这本书，觉得没有《算法导论》好）九月一号我就步入大三了，接下来将会进入JAVAEE的学习，大致方向是理解框架的原理，具体计划还没有接触出来，毕竟框架是学不完的，理解原理才是最正确的选择今天2018.5.4，为了20届毕业生的阿里实习生资格，明年2019.3.1日的阿里网申报名！！还有一点就是，有没有师兄师姐帮忙内推阿里实习生啊，有点怕，知识和能力方面绝对不负你们！！送高中语文老师讲过的课外的一句话：－－－－－－－－－－－－－－－－－－－－－对不起自己，蹉跎了岁月打卡:大三2018年12月15日现在和以前最大的区别是特别的迷茫现在掌握的知识JAVA后端方面:框架学习了常用了框架，现在使用的框架是SpringBoot，springmvc，jpa，thymleaf。前端HTML方面:现在使用的框架是vue.js现在在老师工作室做项目，功能基本百度使用（不知道要不要记住怎么写），然后就是运用各种插件。学习不知道怎么学习，感觉学了不一定有用，还不如去百度。基础知识方面1.计算机基础知识忘记了很多，现在要重新捡起来，没有在18年下半年参加软件设计师考试，真的是我的问题（沉迷游戏）2.算法基础知识努力了很久，学好了数据结构以及算法。但是，今年四月份参加完蓝桥杯之后（省二，参赛人的前百分之三十水平）真的菜啊，都说特别好进国赛，我没进。然后没有碰过算法了，现在十二月份又是一年蓝桥杯报名，又把算法捡了起来。然后就是目标1.蓝桥杯（算法）2.软件设计师（基础知识）3.参加各个公司的实习生招募（算法+基础知识+项目经验）蹉跎了大半年之后，又一次把这些东西摆上台面，认真对待其实这么算来，我差的也不多→_→感觉二个月时间（从现在到明年开学）可以刷题以至于计算机基础知识和算法都可以复习的很好差点忘记看面试题了啊啊啊啊啊啊啊啊！所以说，现在开始刻不容缓，三件事情，一件都不能落下－－－－－－－2019.01.04－－－－－－－－－感谢B.MATCH的小姐姐，焦哥，自己给我电话面试的面试官，在这次电话面试我学到了很多。首先，你需要有一份拿的出手的简历，具体什么叫拿的出手，你要想你的简历要经历五轮甚至六轮面试，你要拿出去让别人看得出新意！内容要充实，不充实怎么给别人提问的机会？其次准备好一门主要的语言比如JAVA和两个从头到尾自己独立完成的项目，具体什么项目，你可以在学校和老师做，可以自己接外包，可以跟着往上教程做，但是必须要，自己一步步的做完。接着，准备好许多的问题等待面试官来提问，确保他问你的问题，你能够答出来，或者能够在他的引导之下答出来！然后，你要留两个问题问一下面试官，具体什么问题我会补充的，那可能是以后了。最后，刷一下面试题，面试都过不了还想要笔试吗？！！！--------------------------------2019.2.7------------------------------首先更正一点，大部分的公司只有三轮面试，也就是说问到的不会那么详细，只会捡重点去问下面是我总结的一些经验吧:面试知识第一步java基础知识：JVM，多线程，I/O，类库加分项：计算机相关知识（计算机网络，数据库，Redis，Linux等...），设计模式，算法，数据结构第二步java开发知识：写过的项目，以及框架的常用的使用技巧加分项：框架的实现原理第三步发散性思维，诸如：如果我想要这样，你该怎么做？项目开发中遇到的难点，你如何解决？项目中有什么不合理的地方，你认为怎么不合理？等...-----------------------------2019.02.25-----------------------------        可以说是非常失望，作为一个从去年暑假就开始准备的我来说，这是远远不够达到我的期望的。问题在哪？准备了什么？基础+算法+项目基础深度不够，比如IO，多线程，集合，JVM。唯一一个能够说深度够了的就只有JVM，可惜这个所有人都会，并且我的语言表达能力可能没别人好。算法随心所欲，一直以来的老毛病了，有点能力就飘，太难的不愿意研究，太简单的不愿意动手写，眼高手低。项目研究不够广，项目中用了SpringBoot，Spring，SpringMVC，JPA，MyBatis，Redis，Mysql，Thymeleaf，Freemaker，甚至我还会前端vue.js框架。可是还是不够，你需要懂分布式原理，需要懂微服务架构，需要懂Spring Cloud，Dubbo，甚至有的还需要你懂大数据，我觉得大数据和我之前列举的框架应该是两种路线了吧，学不懂！简历写的怎么样？简历也是我静心包装过了的，选了我最熟悉两个项目智慧校园和微信点餐系统，在准备怎么样？准备了自我介绍以及项目介绍，以及项目中怎样实现的介绍。然后疯狂刷面试题，刷去年面试题算法，我不知道别人学的怎么样，我不敢松懈。结果呢？---------春招还在继续，还有希望！学历是一块敲门砖，语言表达能力非常重要，知识深度广度一定要够，算法一定要扎实。可能是太紧张，神经太过紧绷，无法说服自己过一些太过轻松的生活，想要过得更好，太累了，可是不努力一把，又怎么能得到更好的发展呢？加油＾０＾~！                                 加油＾０＾~！～～～～～～～～～2019.4.25～～～～～～～下面是面试必备19点知识，学会很好，学不会也要看会，面了5家，第一家基础知识1.mysql，2.redis，3.linux，4.计算机网络，5.操作系统，6.算法，7.数据结构，8.设计模式，9.组成原理JAVA知识1.JAVA基础2.JAVA多线程3.JAVA容器4.JVM 5.I/O分布式五点知识1.分布式缓存2.分布式储存3.分布式消息队列4.分布式搜索引擎5.怎样设计一个高可用，高并发的分布式系统什么都不说了，只要不放弃，一定有一家好公司等着你呢。～～～～～～～～～2019.10.28～～～～～～～实习被坑了，上上周告诉我部门没有转正hc,上周投简历，赶上秋招尾巴，这周收到了offer，南京13k，我和朋友说这次怎么这么顺利，他们说这是我努力的结果。。。总结了一下自己，还是有很多不会，这里定下看书目标，这个帖子从2018年更新到现在，虽然没有进大公司，但是我二本，现在这个样子的确是我努力过的结果。。。定个目标吧，春招还可以再战斗目标:1.<刷题>《Leetcode》2.<PDF>《Spring,SpringMVC,SpringBoot经典面试题》 3.<视频>《Java程序员进阶知识》4.<视频>《左神算法进阶》5.<实体书>《Java并发编程实战》6.<实体书>《TCP/IP详解(卷一)》7.<实体书>《深入理解Kafka核心设计与实践原理》8.<视频>《Elasticsearch核心技术与实战》极客时间9.<实体书>《netty实战》10.<实体书>《从Paxos到Zookeeper(分布式一致性原理与实践)》11.<实体书>《Spring源码深度解析(第二版)》12.<实体书>《"
大二学生，计算机科学与技术专业，学到数据结构和组原有点心态爆炸了，看不懂敲不出代码，还有救吗 ？,,"2018-11-26 22:26:40 收藏比赞多，你们忍心吗呜呜呜其实……我……觉得……大二才开数据结构……还看不懂……确实是……有那么点完蛋……计组毕竟跟软件离得相对远一点，没把拆机器当消遣的话确实不太容易懂，但是拆过几次机器应该能懂个七七八八。这里先把计组放下不提（其实是我手边没教材也没法系统地串知识点）。但是数据结构不应该、也不能听不懂啊，毕竟这么简单这么常用这么基础的东西。况且这已经是最不玄学、最容易实践的一门课了，如果这还搞不定的话学到操作系统的页表和端序不得哭出来吗？如果没错的话，绝大部分学校的不出意外的话应该就是这些内容，我本科的教材找不到了，有疏漏欢迎补充下面我们来一点一点说说每一件知识点以及考点。因为我受到的教育十分偏重应用，所以我会举例这些东西能在哪里怎么用。但是我这人比较懒，能磨嘴皮子绝不动手画图，实在是有看不懂的地方……嗯……再说吧。先说第一块，但是链表并不是万能的，是否选用链表要根据实际情况进行斟酌（后面是重点）。顺序表的构造思路十分简单，只要一个一个往里塞就行。在实践中，一般使用一个下标保存当前顺序表的结尾位置，插入元素时直接在这里插入，然后让下标向后移动。链表一般分为删除节点过程如下：在单链表的基础上增加了一个前向指针previous，即对于每一个节点可以同时找到它的上一个和下一个节点。这能让链表在构造的时候代码更好写，具体情况参考书上。双链表一般不怎么考，根据需要选用。和使用顺序表构造队列需要一个使用顺序表构造栈只需要一个在上文中，我们会发现，在使用顺序表实现队列，并频繁地插入和移除元素后，两个指针渐渐会来到表的结尾，这时候我们就需要是一种结合了顺序表和链表的结构。块状表吸收了链表的next指针所带来的动态优势，同时把链表的数据区扩展成一个小的顺序表。这样一来，既可以满足动态请求内存的需要，又可以避免查找元素时O(N)复杂度的困扰（事实上可以把O(N)降低到O(N/M+1)，M是小顺序表的长度）。块状表是一种相对折中的方案，可根据需要选取，并且一般考试不会考。伴随着线性结构而来的就是常用的各种最基础的就是除了交换的思想，还有一种常用的思想是插入。基于这种思想的排序法是同样基于插入思想却又与上两者不同的方法是则是基于分治法，属于最难理解的一个。同样基于分治法，也是上述所有排序法中唯一一个则是最无聊的一种排序法。假设有一个数据集是{456, 123, 789}，基数排序先比较个位数字并排列有序，再比较十位数字并排列有序，最后比较百位数字并排列有序。人类在查找纸质字典的目录时就是在进行基数排序。基数排序不太容易衡量复杂度，也不太可能考。还有一些常用的排序方法，比如讲完线性结构，我们再来讲讲首先要先普及一些概念：每一棵树有唯一的在此基础上，每个非叶节点的二叉树十分直接，每个节点包含一个数据区和两个孩子指针。数据区用于存储数据，孩子指针分别指向两个孩子，如果没有孩子就悬空。这一节的重难点其实在二叉树的在说明线性存储之前，我们必须要引入对于一棵满二叉树，我们按照对于不满的二叉树，我们要先把它补齐成满二叉树，然后把补上的节点空出来，就可以完成线性存储。存储一棵二叉树所需的总的线性空间与它的度有关，即2的N次方。显然，满二叉树极少浪费线性空间，而偏差较大的二叉树会极大地浪费线性空间。建立一棵二叉树十分简单，一般有两种方式：正常的树都是从根向叶子生长，所以逆生长的前缀码的一个特性就是每个字长短不一，显然出现频率更高的字使用更短的密文能获得较大的空间和时间优势。所以，哈夫曼树的第一步就是从第二步就要开始建树了。由于建立哈夫曼树的目的是为了进行说完了不正常生长的哈夫曼树，再来说说正常生长的二叉排序树。接下来就要取出其中的有序数列了，也就是进行二叉排序树的平均复杂度是O(N*logN)，其中的log就来自于二叉树的深度。当数组已经有序时二叉排序树会退化为O(N²)，而且绝大部分时候都建不出漂亮的二叉树，所以这个log其实是有很大水分的。为了尽量建出漂亮的二叉树，人们想出了很多办法，其中一项就是使用二叉排序树排序尽管复杂度较低，而且十分容易理解，但是需要O(N)级别的辅助空间，并不是很划算。仔细想一想，既然能把二叉树存放在顺序表里，那顺序表本身是不是也能被看成是线性存储的二叉树呢？答案是肯定的。一张顺序表可以被看做是一个就是完全二叉树的一种应用，硬要说的话也属于反向生长。常用的堆分为堆排序最神奇的地方就是堆排序非常喜欢考，不仅考方法论还要考实现，而且这东西略抽象，不是很好掌握。刚才突然心血来潮写了个实现，凑合着看一下吧。我比较懒，用CPU时间换了内存，数组下标里面各种运算。其实可以拿临时变量装一下来节省CPU的。C语言需要事先声明函数才能使用，我也没照顾可读性写函数原型，看的时候记得倒着看。很多书上都不写了，但是在这里我想提一下。锦标赛排序是选择排序的优化版，每一次将相邻的两个元素进行比赛，选出其中的优胜者（较大者或较小者，看需求）。其思路类似于虽然绝大多数情况下我们见到的树都是二叉树，但是并不妨碍就是多棵树，这个没什么好讲的。最后我们来提一下最后一部分是关于图，有一些概念是要先提及的。首先，图是由通常存储图有两种方式，即图中每个顶点的为了节省矩阵的空间开销，矩阵的集合的方式这边也拿出了为了克服需要同时维护两张表的缺陷，人们发明了考虑这样一张有向图，并假设顶点集合和边集合都已经整理好了。那么，根据这两个集合，我们可以建立十字链表：其中绿色的就是入度指针。从图中我们可以看出顶点A的入度一共有CA和DA两条边，因此沿着head指针能找到这两条边；同理，黄色的是出度指针，沿着tail指针就可以完成对出度的遍历。十字链表巧妙地节省了一张表。邻接多重表基于对邻接表的改进。由于其适用于无向图，所以不存在head和tail，但是依旧有两个指针。邻接多重表的节点结构与十字链表类似，并且同样用于存放边，不同的是每一个顶点后面紧跟着一个指针，并且每个节点还多出来了一个标志位用来存放是否被访问过。举例来讲，假设一个节点其中的顶点序号是2和5，那么2后面的指针会指向下一个出现了2的顶点（顶点顺序无所谓），而5后面的指针指向下一个出现了5的节点。顶点节点只保留一个指针，指向第一条连接此顶点的边。假设顶点序号是2，那么只要跟随每一个节点中编号为2的顶点后面的指针就可以完成对出入度的遍历。由于与十字链表类似我就不画图了。说完了图的存储，下面来聊聊图的深度优先遍历在诸如迷宫求解的时候应用较好，如果途中有环则需要记录已经访问过的顶点，否则不需要；广度优先遍历适合浅层的关系，比如图的最小生成树算法可以应用于网络布设中，使用最低成本达到连通所有节点的目的。但是，这种做法并不能保证任意两个节点之间的距离都是最短的，同样也容易造成星型布局，并使得上游节点遭受随之而来的带宽压力。但这种做法可以使总成本最低。如果需要求某一个顶点到所有顶点的迪杰斯特拉算法在计算机网络中有大量应用（以上三种算法年年考实现。看到这里，如果所有的知识点你都能掌握了，那么已经足够你拿到优秀了。剩下的部分是拓扑排序，不是很喜欢考，但还是提一下。用于清理此外还有一个更贴近管理的东西叫数据结构这门课其实就这么一点点东西，每个计算机系的学生都应该能做到烂熟于心，因为这点概念太基础太常用了。如果这些理解不了，后面的高阶算法还有算法优化啊、设计模式啊什么的课程统统完蛋。计算机四大门最起码直接挂掉三门，剩下的计组也是凶多吉少，不如早做打算换专业。写了四个小时，打字不易，点个赞呗我没翻课本，可能有些内容没回忆起来，欢迎补充2018-11-26 00:22:51 修改了强连通图与弱连通图的定义。2018-11-26 00:31:49 修改了二叉树的遍历部分的错误。2018-12-04 12:08:22 规范了顺序表的术语的使用，增加了哈夫曼树。2018-12-07 10:14:00 修改了二叉树重建部分的错误。2018-12-16 13:32:36 修改了链表构造栈的一个错别字。2018-12-27 13:50:12 添加了堆排的实现","今天，我就给大家推荐几个算法可视化的网站。没错，就是写了代码以后，可以看见他们是怎么一步步求出结果的。目前网站支持中文，印尼文，日文等多语言版本。在搜索选项中你可以根据关键词查找到你想要的算法。点进去一个具体的算法之后，会有两种方式的可视化呈现方式，一种是电子讲座模式，一种是示例模式。其中示例模式是以动画方式呈现，你可以控制动画的快进与倒退，电子讲座模式是以知识点讲解模式呈现，你可以手动控制页面的进度。两种方式都可以帮助你演示每个步骤的过程代码。接下来我们演示一下冒泡排序的执行过程，如下图所示：另外，你还可以创建一组自定义的数，然后让动画显示“你的算法”。除此之外，还支持在线测试哟~在Algorithm Visualizer，大家可以很清楚的看到算法运行的整个过程，很直观，便于大家学习。大家可以很清楚的看到，网站分为三部分，最左边是算法目录，大家可以选择自己感兴趣的算法，目前已经包括了很多算法了，比如二叉树、图、排序算法、动态规划等等经典算法 。中间区域主要是算法演示以及运行log。右侧是代码以及算法运行按钮。我们用它来演示一下冒泡排序的执行过程，如下图所示：同时它是开源的，目前有35K个star，足以可见该项目的欢迎程度，这里推荐给要学习算法的各位。目前已经有很多常用的比如，我们用它来模拟一个二叉搜索树，如下图所示：我们再用它来演示一下把这些内容学会，算法应该说是非常牢固了，无论是校招还是工作，都已经非常够用了。我大学时候也很傻，为了校招，看了不下于五本算法书，加上牛客，刷了大半年。总共一两千道题啊……不刷怕考到……忘了刷，刷了忘……毛都快掉没了……现在工作近十年，辗转几个大厂，由当年的应试者变成了出题人，才知道，完全不必这么辛苦。省下来的时间，谈个女朋友，它不香么？？？！！！。直接上干货，我花了两天的时间做了一张图，涵盖数据结构和算法书籍中都会讲到的知识点。并给出了常用算法的平均时间复杂度，对于必须要学的内容前面加了星标这里面涉及到了近二十种数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；超四十种常见算法思想：递归、排序、二分查找、搜索、哈希算法、掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。需要高清无水印思维导图源文件的小伙伴，可以点击这里获取：学习算法的套路很简单，多看、多写、多上机，既然是思想的集合，看得多了，自然无师自通。至于刷题，很多同学都知道要刷牛客。总共400多道题，而且有些题，非常难，想全部刷透，也至少刷半年。这显然不适合绝大部分同学。所以，我们要找到最核心、最重要的题集，即可比如，如果时间紧张，可以先刷《面试必刷TOP101》里的题目，总共101题。刷完以后，有时间，可以再刷《因为这两本书，都是面向面试的高频题汇总，自然有很多题目是重合的。这也正能说明这两本书的重要性。如果专攻面试的话，还有两本不错的书推荐：《这本书最大的特色就是讲了很多针对海量数据的处理技巧。这个可能是其他算法书籍很少涉及的。面试的时候，海量数据处理的问题也是经常会问的，特别是校招面试。不管是开拓眼界，还是应付面试，这本书都很值得一看。《当然，我也有一本谷歌师兄总结的高频面试算法习题集，包含了常见的数据结构和算法汇总，无论是排版还是内容，都是非常棒。所有这些书，我都为大家找到并下载好了，需要的小伙伴可以直接领取。这回得帮我点赞了吧组成原理应该是所有课程里最难的课了，它是一门衔接数电和汇编的一门课。整个课程的核心就是使用数字逻辑电路和触发器搭建一个可以运行汇编指令的机器.如果你需要提前感受一下可以去玩一个叫人力资源机器的游戏.代码区就是ROM,中间箱子是寄存器,两边输入和输出的会和并到一起装到RAM,小人就是运算器.这篇文章里有这个游戏的简介和玩法：你可以从这个游戏做为一个开始。再回来问题上来，我们先推荐学习资料，最后再推荐一些实验性游戏。视频首推配套教材建议选用《深入理解计算机系统》，这个视频应该也是用的这个教材。 里面的逻辑电路相关的内容可以提供具体案例,提高对但校招不光有笔试，还有面试环节，面试考的就是有关校招的内容非常多，这里我就不一一列举了。我把我这些年的所知所得，整理成了一本书，开源到github上了。相信会对大家很有帮助，大家可以去看.目前还在持续更新，欢迎大家star。好了，这篇就到这了，希望大家毕业都能找到好工作。",以前我当了好几年学不会数据结构往往有以下几个原因：我就两点建议：少则得，多则惑，是以圣人抱一为天下式。算法并不是死记硬背的科目，从最简单的小算法开始理解，多数人都是可以赶上来的。,首先忘掉你女生的身份比较好……先把问题变成“大二学生  计算机科学与技术专业学到数据结构和组原有点心态爆炸了，看不懂敲不出代码，还有救吗”然后分析一下究竟是什么问题，前导课程（C语言）学得怎么样，学明白了吗，大作业是自己顺利做出来了还是抄的？如果前导课程学的就有问题，那需要先补前导课程；如果前导课程没问题，那可能是老师教的不太好，可以找一些其他的资料学一下，我只知道《组原是说我可以提个类似于总纲的心法概要给你，学不学得成还看你自己：数据结构研究的是怎么数据结构一般包括以下部分：例如，线性表意味着有限个元素，构成了一个全序关系，可以映射到0 - (N-1)的整数。通过映射建模，就得到线性表数据结构；如果通过全序关系建模，则可以得到链表结构。线性表的约束是它的元素一定构成与0 - (N-1)的整数的一一映射，意味着它可以增加元素、删除元素、修改映射到的元素，但中间不能跑出一个洞来，也不能有两个元素有相同的下标。再比如，树结构意味着所有节点是相互连通的，而且不存在环，任意两个节点之间的路径是唯一的。如果选中一个节点作为根，则形成有根树，所有与根相邻的节点各自构成一棵子树，可以通过链式结构递归表示。如果按照到根节点的距离排序，则每个节点到根节点的路径都会有一个“下一跳”，定义为这个节点的父节点的话，也可以通过每个节点到而这个结构在内存中的表示是有套路可循的，最常见的是用关于微机原理研究的是存储器就是RS触发器为基础的SRAM，除此以外还有成本更便宜一些的DRAM运算器就是数字电路中的各种加法器、乘法器等组合逻辑与控制器可以是简单的组合逻辑电路，通过指令使能ALU的不同组件好了微机原理学完了，剩下的简单学一下汇编就行了。,"不过你们大二才学数据结构，确实。。。。。。不过有一说说，学算法，没啥捷径，最大的捷径就是刷题。但，千万别盲目刷题！不然就得如果你连最基本的数据结构，例如链表，队列，栈，二叉树都没有接触过，那么我是不建议你去 leetcode 刷题的，所以得先入门一下1、时间复杂度2、空间复杂度一般最先接触的就是时间复杂度和空间复杂度的学习了，这两个概念以及如何计算，是必须学的，也是必须最先学的，主要有最大复杂度、平均复杂度等，直接通过博客搜索学习即可。文章推荐：不用说，链表、列表必须，不过重点是链表，跳跃表可以放一放，并查集可以刷题的过程中学习，但链表得至少掌握增删改我写过的文章：树相关是知识还是挺多的，建议看书，可以看《算法第四版》，入门看《不过刷题前也不需要准备这么多，先把最基本的二叉树学了就可以了书籍推荐看这里：视频推荐看这里：Leetcode 刷题我还是希望你能在学习一些1、递归2、枚举3、贪心4、回溯5、动态规划但是，其中最重要的，我觉得就是所以，在你刷题之前，或者在学习二叉树、图相关算法遇到递归的时候，我希望你能静下心来，去学一学递归，我也会告诉你，你不需要把它学的很精通，但是你要懂一些基本的递归题，知道递归是怎么一回事，例如最简单的所以，死磕入门数据结构，可以学习下一些算法思想，而这里推荐一份字节大佬的刷题笔记，把各种算法模版都总结好了，跟着学就行：我写过的文章：另外也整理成了手册：最后，上一波思维导图终于，到了刷题这一部分了，如果要说学算法的捷径，那么不过在刷题之前我想先说一说在校招的笔试中，其实这些笔试题还是挺难的，你在 leectode 可以做出 hard 级别的题，但在笔试中，可能连 medium 级别的都做不出，因为笔试的题，都比较灵活，基本都会通过实际的例子来引出一道题，你可能不知道要使用哪种方法来做比较好，有些还是多种方法的结合。对于笔试的题型，我之前也总结过，无非是以下几种（1）、基本数据结构的考察：这类题我觉得是比较简单的，主要考场基本数据结构的操作，例如二叉树的层序遍历，链表的逆序等，当然，它不会直接告诉你，让你来逆序或者遍历。（2）、某种算法思想的掌握：这类题你掌握了某种算法思想，就会比较容易，如果不懂，那就凉凉了。例如动态规划、回溯、枚举、深度/广度、贪心、二分等。其中，我觉得动态规划考的挺多，还要就是 回溯+深度/广度。（3）、边界条件的考察：这类型的题，估计你一看就有思路，知道该怎么做，但是，它的边界条件特别多，需要分很多种情况来讨论，特别容易出错，有时候会让人陷进去，越做越复杂，这类题主要考场你的思维严谨程度。（4）、找规律、数学公式：这类型的题，主要是根据数据之间的一些关系，来找一些规律，进而推出他们的通用公式，就像我们高中时，找数列的同项一样。上面我列了笔试的题型，并且跟你说了笔试是真的挺难的，那么对于我个算法小白来说，该如何做好呢？我的建议是，例如链表相关的题型当然，笔试的题之所以难，是因为我们往往不知道用哪一种方法做好，或者说具体属于哪一种题型，那么还有必要分类刷题吗？答是有必要的，只有当你熟悉每一种题型，你才能灵活使用他们，进而解决各类复杂的题，这就如同你在练功夫的时候，前期你需要把每个招式都打扎实了，之后才能灵活把各个招式连接起来，融合贯通。刷题也是一样，前期先分类，把每个题型掌握起来，后期咱们再随机练习，慢慢着就能灵活应用了。不过，每次刷了一部分题型之后，我觉得还有必要做一些总结，或者说总结一些有人可能会说，模版是死的，真的有必要总结吗？我觉得也就是说，最开始刷题的时候，可以分类刷题，并且阶段性总结，如果你是初学者，可以先从简单的题做起，例如我刚才说的，简单的递归题，之后一些二叉树、链表的题，因为你可能刚刚学习数据结构不久，刚好可以加深你的理解。这里给大家推荐一份字节大佬的分类刷题笔记：刚才我说了很多种题型，对于按题型刷题总结，首推《程序员代码面试指南：IT名企还要一本我大一看的，感觉也挺不错，叫做《挑战程序设计大赛》，不过这本比较适合不急着面试的吧，这本不像上面那一本，专门来总结各种题型应付面试。《编程之美》、《Leetcode 刷题的时候，也是可以分题型刷滴，所以也可以去 leetcode 刷题，不过刷题的时候，我这里有个建议，就是别在本地 IDE 写代码，直接在网页端写就行了。因为面试的时候，一般就让你在记事本写代码，不会给你 IDE。如果你不习惯，估计很容易写错代码，而且，有些库函数你也把名字忘记了。网页端其实也是挺方便的，也会有一些代码提示。书籍这里找：当我们在做一道题的时候，可能会遇到两种情况，一种是这道题，特么秒杀，一眼就懂思路；一种是，一脸蒙蔽，太难了吧。我的答案是，有必要做。千万不要眼高手低，看着简单，做起来不一定简单，AC 之后，你还要去讨论区看看大佬们是怎么做的，因为有些人的代码，真的写的很简洁，看着就很舒服，咱们可以多学一学的，当然，也有可能那个人就是你自己。代码写多了，有时候，你就会发现自己真的变强了，写起代码来，bug 也越来越少了，分分钟 AC 一道题。其实对于很多题，如果不看时间复杂度和空间复杂度，单单只是 AC，那还是很容易的，但是一提交，你的代码可能只打败了百分之几的人，显然我们是不能满足于这种代码的。当你做一道题时，一开始可以先暴力做，但后面，还得想想该如何优化，想不出也没事，可以讨论区找空间/时间复杂度更低的代码，或者直接搜索引擎搜索，一般都能搜到别人的代码。之后跟着别人的代码，自己再实现一波，尽可能把最优解的代码实现起来。千万不要为了 AC 而 AC，不是 AC 的越多就越强的，当你入门之后，更多的是要总结方法，寻找高效率的代码。这里推荐一份大佬的刷题笔记，总结了 leetcode 上的题解，每道题的题解都是说到算法技巧，必须再给大家再讲一波好用的算法技巧，不信，你继续往下看数组的下标是一个隐含的很有用的数组，特别是在统计一些数字，或者判断一些整型数是否出现过的时候。例如，给你一串字母，让你判断这些字母出现的次数时，我们就可以把这些字母作为下标，在遍历的时候，如果字母a遍历到，则arr[a]就可以加1了，即 arr[a]++;通过这种巧用下标的方法，我们不需要逐个字母去判断。我再举个例子：问题：给你n个无序的int整型数组arr，并且这些整数的取值范围都在0-20之间，要你在 O(n) 的时间复杂度中把这 n 个数按照从小到大的顺序打印出来。对于这道题，如果你是先把这 n 个数先排序，再打印，是不可能O(n)的时间打印出来的。但是数值范围在 0-20。我们就可以巧用数组下标了。把对应的数值作为数组下标，如果这个数出现过，则对应的数组加1。 代码如下：利用数组下标的应用还有很多，大家以后在遇到某些题的时候可以考虑是否可以巧用数组下标来优化。有时候我们在遍历数组的时候，会进行越界判断，如果下标差不多要越界了，我们就把它置为0重新遍历。特别是在一些环形的数组中，例如用数组实现的队列。往往会写出这样的代码：实际上我们可以通过取余的方法来简化代码对于双指针，在做关于单链表的题是特别有用，比如“判断单链表是否有环”、“如何一次遍历就找到链表中间位置节点”、“单链表中倒数第 k 个节点”等问题。对于这种问题，我们就可以使用双指针了，会方便很多。我顺便说下这三个问题怎么用双指针解决吧。例如对于第一个问题我们就可以设置一个慢指针和一个快指针来遍历这个链表。慢指针一次移动一个节点，而快指针一次移动两个节点，如果该链表没有环，则快指针会先遍历完这个表，如果有环，则快指针会在第二次遍历时和慢指针相遇。对于第二个问题一样是设置一个快指针和慢指针。慢的一次移动一个节点，而快的两个。在遍历链表的时候，当快指针遍历完成时，慢指针刚好达到中点。对于第三个问题设置两个指针，其中一个指针先移动k个节点。之后两个指针以相同速度移动。当那个先移动的指针遍历完成的时候，第二个指针正好处于倒数第k个节点。你看，采用双指针方便多了吧。所以以后在处理与链表相关的一些问题的时候，可以考虑双指针哦。在链表的相关问题中，我们经常会设置一个头指针，而且这个头指针是不存任何有效数据的，只是为了操作方便，这个头指针我们就可以称之为哨兵位了。例如我们要删除头第一个节点是时候，如果没有设置一个哨兵位，那么在操作上，它会与删除第二个节点的操作有所不同。但是我们设置了哨兵，那么删除第一个节点和删除第二个节点那么在操作上就一样了，不用做额外的判断。当然，插入节点的时候也一样。有时候我们在操作数组的时候，也是可以设置一个哨兵的，把arr[0]作为哨兵。例如，要判断两个相邻的元素是否相等时，设置了哨兵就不怕越界等问题了，可以直接arr[i] == arr[i-1]?了。不用怕i = 0时出现越界。当然我这只是举一个例子，具体的应用还有很多，例如插入排序，环形链表等。（1）.对于可以递归的问题考虑状态保存当我们使用递归来解决一个问题的时候，容易产生重复去算同一个子问题，这个时候我们要考虑状态保存以防止重复计算。例如我随便举一个之前举过的问题问题：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法？这个问题用递归很好解决。假设 f(n) 表示n级台阶的总跳数法，则有f(n) = f(n-1) + f(n - 2)。递归的结束条件是当0 <= n <= 2时, f(n) = n。因此我们可以很容易写出递归的代码不过对于可以使用递归解决的问题，我们一定要考虑是否有很多重复计算。显然对于 f(n) = f(n-1) + f(n-2) 的递归，是有很多重复计算的。如就有很多重复计算了。这个时候我们要考虑状态保存。例如用hashMap来进行保存，当然用一个数组也是可以的，这个时候就像我们上面说的巧用数组下标了。可以当arr[n] = 0时，表示n还没计算过，当这样，可以极大着提高算法的效率。也有人把这种状态保存称之为备忘录法。(2).考虑自底向上对于递归的问题，我们一般都是从上往下递归的，直到递归到最底，再一层一层着把值返回。不过，有时候当n比较大的时候，例如当 n = 10000时，那么必须要往下递归10000层直到 n <=2 才将结果慢慢返回，如果n太大的话，可能栈空间会不够用。对于这种情况，其实我们是可以考虑自底向上的做法的。例如我知道f(1) = 1;f(2) = 2;那么我们就可以推出 f(3) = f(2) + f(1) = 3。从而可以推出f(4),f(5)等直到f(n)。因此，我们可以考虑使用自底向上的方法来做。代码如下：我们也把这种自底向上的做法称之为递推。总结一下当你在使用递归解决问题的时候，要考虑以下两个问题(1). 是否有状态重复计算的，可不可以使用备忘录法来优化。(2). 是否可以采取递推的方法来自底向上做，减少一味递归的开销。传统的做法就是让 1 不断着乘以 2，代码如下：这样做的话，时间复杂度是 O(logn)，那如果改成位运算，该怎么做呢？如果要弄成位运算的方式，很多时候我们把某个数拆成二进制，然后看看有哪些发现。这里我举个例子吧。例如 N = 19，那么转换成二进制就是 00010011（这里为了方便，我采用8位的二进制来表示）。那么我们要找的数就是，把二进制中1、找到最左边的 1，然后把它右边的所有 0 变成 12、把得到的数值加 1，可以得到 00100000即 00011111 + 1 = 00100000。3、把 得到的 00100000 向右移动一位，即可得到 00010000，即 00100000 >> 1 = 00010000。那么问题来了，第一步中把最左边 1 中后面的 0 转化为 1 该怎么弄呢？我先给出代码再解释吧。下面这段代码就可以把最左边 1 中后面的 0 全部转化为 1，就是通过把 n 右移并且做最终的代码如下这种做法的时间复杂度近是 O(log(logn))，重点是，高逼格。另外，上面的所有书籍，都可以在这里下载到，送给大家当然，算法固然重要，但也别忘了计算机基础知识的重要性，例如计算机网络，操作系统，最后，欢迎来帅地的个人网站学习：","感觉就是代码敲得少了，多看，多敲，多思考，慢慢就练出来了。看完下面的学计算机的课程之前，需要掌握好至少一门计算机语言，常见的语言选择有：Python，Java，C++.选择C++的小伙伴怎么可以跟着这两门限时优惠的课程来学习：学Python的小伙伴，跟着这门课来学，用游戏闯关的形式，学习python基础，有趣且高效。下面咱们就来看看数据结构的主要内容吧。尼克劳斯·维尔特，瑞士计算机科学家，在1976年写了一本名为《40多年转瞬即逝，但这个公式依然成立。这也是今天我们程序员面试的时候，需要展示自己对数据结构以及他们应用场景的掌握的原因。几乎所有的问题都需要面试者证明他们具有扎实的数据结构基本功。无论你是刚毕业也好（从大学还是编程培训营），还是有N多年的经验。有时候这些面试题则是专门提到某种数据结构。比如，题目描述是这样开头的“给定一颗二叉树。。。”。其他的时候则是那种隐式的，比如说，“我们找到每个作者相关的书籍数目”。学习数据结构是非常重要的，哪怕你只是想在当前的工作岗位上变得更赞一点。所以，就让我们从基础开始吧。简单来说，数据结构就是一种容器，按照某种既定的方式存储数据。这种“方式”能让一个数据结构在某些操作下很高效，相反，在另外的操作下就不太理想了。你的目标是为了理解这些数据结构，从而可以能从不同的数据结构中选择适合当前所面对的问题的那一种。因为数据结构是用来有规则地存储数据的，加上数据结构在计算机科学中神一般的存在，他们的价值就不言而喻了。不过你要解决的问题是啥，你反正都得需要数据结构，方式可能不同而已。无论是面对员工工资，还是股票价格，购物清单，还是简单的电话本，这样的场景。根据不同的应用场景，数据需要按照不同的方式存储。我们有好多可以将数据按照不同方式保存下来的数据结构。我们先来列一下最最常用的八种数据结构，然后接下来我们会慢慢将他们讲明白。数组是最简单也最常用的数据结构。其他的数据结构诸如栈和队列，都是从数组衍生出来的。下面是一个拥有四个元素的简单数组，包含了元素1，2，3，4.每个元素都依附于一个正整数，称作索引，它就对应于数组中该元素所在的位置。大多数的编程语言中，数组的起始索引都为0 （0-based，译者注）.数组一般有以下两种：数组的基本操作数组类常问问题我们平时熟悉的软件操作中的撤销（回退）操作，基本会出现在所有应用中。你好奇过它是咋工作的吗？原理是这样的：你把之前的状态（有限的数量）都存到内存中，存的顺序是最新的操作存在最近一个。这个光靠数组是不能实现的。这是栈擅长的地方。现实中也有栈的例子。比如你把一大堆书垂直叠（一本压着另外一本）起来放。为了拿到他们里面靠中部位置的书，你得把上面的书都拿走才行。这就是著名的LIFO（后进先出）的工作原理。下图是一个包含有三个元素的栈，数值为1，2，3. 元素3在栈顶，它会被最先删除。栈的基本操作栈常见的面试问题和栈类似，队列是另外一种线性数据结构。这种数据结构将元素按照顺序的方式存储。和栈最本质的区别就是：和后进先出相反，队列实现了先进先出的特性（FIFO， First in First Out）。队列在生活中有非常贴切的例子：一堆人排在售票台前面。如果新来了一个人，这个人得排在队尾，而不是队伍前面。另一方面，排在第一的人则能第一个买到票，然后离开队伍。下面是一个包含了四个元素的队列（1， 2， 3， 4）。1站在队头，会被第一个删除。队列的常用操作常见的队列题链表是另外一种重要的线性数据结构。链表初看起来和数组很类似，但他们在内存分配，内部结构，以及像插入和删除这样的基本操作上，都是不一样的。链表就是一串 串起来 的节点，他们的每一个节点都包含了数据和指向下一个节点的信息。链表有头结点，指向链表中的第一个元素。链表结构经常用来实现文件系统，哈希表，以及邻接表。下图是一个链表的内部结构图示。我们常见的链表有以下两种：链表基本操作：常见的链表问题图包含一系列的节点，这些节点通过网络相互连接起来。这些节点也被称为Vertcies。对于每个对子（x, y)，我们则称为边，表示节点x和节点y是相连的。边也可能包含权重或是花费信息，表明了从x到也所需要的消耗。图的类型：在计算机语言中，图通常用下面两种方法表示：常用的图遍历算法：常见的图问题树是非线性数据结构，它也是由节点和边组成的。因此树和图类似，但他们最大的不同是树上没有环存在。树被广泛应用在AI和其他复杂算法中，因为它能提供高效的存储，使得问题能得以解决。下面是一颗简单树，图中也包含了常见的树的术语。我们可以有以下的各种树的形状：上面这些树中，以二叉树和二叉搜索树最为常用。常见的树的问题字母树，也叫做下图演示了如何将三个单词（top, thus, their）插入到字母树中，并保存下来：在字母树中，单词都是从下至下一个字母一个字母保存起来的。绿色的节点（p, s, r）表示的是该节点是一个单词的最后一个字母，p对应top，s对应thus，而r则对应于their。常见的字母树问题：哈希是一个分辨不同的实体，从而将每个实体存储在某个预先计算好的索引上，这个预先算出来的值被称作“键”。因此，实体都是由键值对的形式存放的，把一大堆这样的东西称为字典。每个实体都能通过键来找到。基于哈希这种思想的数据结构有不少，但最常用的是哈希表。哈希表一般通过数组来实现。哈希表的效率取决于以下三个因数：下面这图演示了我们是怎么从哈希值匹配到一个数组中的。该数组的索引是通过函数函数求出来的。常见问题：上面就是八种你在算法面试之前必知必会的数据结构。具体的学习，可以参考原文作者开发educative上的专门针对数据结构的课程则有：C++:JavaScript：Java：Python：我上过其中的Java版本，课程是把数据结构里面的计算机的其他核心课程，参考这个回答：",作为一个cs专业的现任老师，正好教的就是ds。我来说两句。学ds导致心态爆炸的原因大部分可能是老师没教好。而且还不是ds老师没教好，，而是程序设计。是深理论并强实践的课程，得益于（呵呵）伪代码描述，好像看起来我从学生时代开始就深有体会，我考研数据结构分很高呀，为什么我就写不成算法程序呢？拿着程序去问老师，老师说，他没写过cpp代码。。。。当时的中国（十几年前了）高校程序设计课程大多是啃语法（c+++b+++a那套玩意），写过代码，做过项目的老师反正在我校是极少，我很不幸没遇到过。然后等我研究生毕业，it行业摸爬滚打n年之后回到高校执教发现，嗯？现在的大学怎么还这么教？我敲踏马。。。于是乎我这四年在弊校（一所四非大学）做的事就是，重新架构程序设计数据结构算法课程，计算思维贯通其中，大量增加练习数量，带着高年级学生做助教给新生答疑，虽然阻力重重，但是我坚持下来了。从过程上看，刚开始的两年老师，学生给予的评价大多是负面，但是结果上看，学生们的代码能力正在提升，你看icpcccpc我校也都能拿奖了不是。说了这么多，我想告诉题主，你要分析判断一下自己崩溃的根本原因，对症下药。,正常啦，不要怕，相信我，你的同学也好不到哪里去，按我之前面试人的经历，10个9个不过关的，刚毕业的，1~5年经验的大把人不过关的。然后我想跟你说的是，学数据结构只是学计算机遇到问题的一个缩影而已，以后，你会遇到类似的问题，看着很蒙，完全没有头绪。那该怎么办呢。首先，你得把心态放平，不要急躁，然后把不懂的这个数据结构或者算法，以它为关键字，开始在google，bing，baidu上面查，一篇篇文章的看，记得一边看，一边在纸上写，写关键点就可以了（这个是嗑瓜子原理，嗑瓜子其实很无聊，但是不断有瓜子吃，就容易保持兴趣，你写下来也一样，容易错觉你学到东西了）。有时候网上资料不多，或者还是看着很蒙，你就去看看有没有相关的书籍，毕竟书籍里面是经过提炼过的，有时候会好一点。不过有时候，可能全部看了一遍还是不行，还是不要急，重新把你看过的，挑你看着顺眼，觉得好的，再缕几遍。最后，还是不要急，一般情况下，因为是个新概念，所以没法一时间想通，你要把周期拉长一点，比如一个数据结构，你定成1周或者2周掌握，相信我，肯定行的，不过前提是你要时时刻刻念叨着人家数据结构才行，念念不忘必有回响嘛。要是这么搞都不行，来，有空我手把手教你。最后的最后，给你很泛的缕下整个数据结构要怎么学吧，你可以这样来。对比着看看数组和链表的区别，想想我要快速插入一个元素，删除元素，获得一个元素，分别用哪个好。如果想着不明显，你把数据量弄大一点，就很容易看出来了。后面学到map（对比着看栈和队列，一个先进后出，一个先进先出，这个在什么场景下会用到，比如停车场呀，排队呀，这些场景你琢磨琢磨，难一点的场景比如你要做个几个排序，常用的不多，可以从冒泡和快排开始，记得对比他两的不同。不过快排有时候很好，可是冒泡几句话就写完了，而快排要写好多，容易出错，如果没有api的情况下，有时候我就排10几20个数这么小量的，可能就直接用了冒泡了。树的话，从二叉树开始，学怎么接着图，你就看看大概的版块就这样，然后你再去学，丰富他们就好了，不过这些下来应该也差不多一个学期过去了。对了，肯定有人会给你推荐,我们学数据结构的时候老师让用的语言是c语言，c语言大一学的，我基本不会，数据结构的代码我也敲不出来，书上也没有c的实现代码，这门课程最后我糊弄下来了，其实班上也没有几个人能敲出来，再后来，我找了一套讲的很好的数据结构视频看了两遍，里面有c的实现过程，我也跟着敲了，这样，原理和实现都可以说是了解了。搜索引擎查一下，郝斌谢赞介绍一下郝斌老师的四套课程吧，分别是java，c语言，数据结构和算法，数据库，四套课程都是基础课程，讲课的风格跟聊天差不多，合适入门，虽然我觉得这套教程不是最好的的，但是我觉得聊天讲课的方式不枯燥，也不是那种念ppt的讲课形式，我关于版权，郝斌老师在课程中就已经声明，课程可以在非商业的情况下自由传播。视频不是我上传的，估计也不是郝斌老师上传的，我第一次看的时候应该是2013年。数据结构 java语言  C语言 数据库最后，看视频学习效率低一些，不过如果一开始就看书的话对于零基础的同学们会很困难，我一开始也是看书，一本think  in java 到现在没看完，入门可以看视频，有基础以后建议看书学习。,作为一个985CS专业，毕业拿到多个BAT Offer，最终加入腾讯的师兄，必须强答一波了。千万别听信一些题主的回答，什么真有点完蛋、什么快没救了。。完全是为了高赞危言耸听、骇人听闻，这样做真的好吗，作为过来人耽误了后辈，责任你们担负得起吗？大二看不懂数据结构和组成原理很正常，原因可能是没认真学、又或者大一的基础太差。我大一大二玩了两年，大三都没写过一行代码。。依然通过大三一年的强行冲刺，考上华科研究生，毕业加入大厂。关于大学期间如何学习，毕业才能冲击BAT的offer？可以看看我的这个1000赞回答，包括了生活和专业学习的建议：大一刚入学，因为追一个女孩惨遭拒绝，这之后开始自暴自弃，长期混迹于网吧，甚至有一次住网吧长达17天。放荡到什么程度呢？曾经玩星际争霸，连续刷了几百局，整个过程就吃泡面馒头，喝点白水。看着这张死缓通知书，这个结局我并不意外，长期翘课、挂科无数。那时候水到计算机专业大三了，连一个HelloWorld都不会写。本科就读的大学坐落在一座山中，那一天上山再下山，不断往返，完全感知不到时间的流逝。整整走了一个白昼，累得精疲力尽，瘫坐在草丛之中，看着深邃的天空和地上的花朵。于是我定下里加入游戏行业的目标。因为大学前两年全荒废了，所以大三是冲击的一年。大三我先后学习了C语言、数据结构和算法，同时补习数此外，还学了一门影响我职业生涯的语言： C++。看的第一本书就是：《随后开始啃除了疯狂自学，毕业的压力也很重，掌握了C++之后，我还用它做了不少有趣的东西，比如：万年历、五子棋、俄罗斯方块等等，俗话说兴趣是最好的老师，建议大家在学习编码的过程中也不妨挖掘出一些有趣的东西：我写的五子棋程序：俄罗斯方块：《曾经的算法小抄笔记：还记得当年为了更快的进步，跑去蹭研究生的课程，听到NP难问题不由感叹：算法世界太奇妙了。在我那个时代，线上资源并不丰富甚至是匮乏！今天各种论坛、公开课、学习资料非常丰富。程序员这个行业不轻松，甚至可以说是很艰难，但大家只要做到：静下心来多看书、多看源码、多上机，一定能不断高速进步！,想学明白这些，说真的1.我建议你把所有的教科书扔了去，在我看来中国的这些垃圾教科书除了给你植入一堆庞杂的概念让你云里雾里不知所云之外，并无太大用处，真正好的书不是这样的，一点兴趣的引导都没有上来先瞎死你让你无形烦躁再说。2.我建立你上课千万不要听讲，因为我觉得大部分学校的老师(少数的不要对号入座)，读PPT，死讲是他们的基本功，兴趣引导？寻寻渐进？清晰明了？言简意赅？不好意思，不存在的，有时候我都不明白这些老师都是咋上到博士的，把一个本该很有意思的知识讲到你自闭。那你要问了，我该怎么做？强烈建议从最有兴趣的书看起来，数据结构和算法推荐《算法图解》《最后我想说，如果一旦你对一个东西感到恐惧了，千万别觉得这是你笨，这是放屁！我可以负责任的告诉你，你要给自己一个信念，这些东西根本就不难，顶多就算是个复杂！组成原理这种硬件课知晓大概的原理就行，没必要死磕到底，这东西死磕到底你就是折磨自己，除非是你要走这行非搞不可，否则就算你硬学了，过不了多久你肯定会忘。能让你记住的东西只有原理和思想！不要被一大堆的概念给搞的晕头转向，否则那是舍本逐末！,其实，数据结构并没有你想的那么难。作为一个算法和数据结构的布道者，我一直致力于用最浅显易懂的方式，为大家分享数据结构的各种知识，希望大家能够真正理解数据结构，喜欢上数据结构。首先自我介绍一下：我是小灰，微信公众号【同时，我也是技术图书许多程序员对算法和数据结构望而生畏，认为这是一项高深莫测的学问。以前我曾经面试过一个小伙伴，起初考察他的技术功底和项目经验，他都回答得还不错。接下来我对他说：“OK，那我考察一下你的算法和数据结构水平吧。”题目还没说出口，小伙伴立马摆摆手说：“不要不要，我算法不行的！”我还是有些不甘心，接着说道：“我只考察最最基础的，你说说冒泡排序的基本思路吧？”小伙伴仍旧说：“我不知道，我算法一点都不会.....”.算法和数据结构真的有那么难，真的有那么无趣吗？恰恰相反，算法是编程领域最有意思的一块内容，也并没有许多人想象的那样难以驾驭。许多人把算法比作是程序员的“内功”，但小灰觉得这个比喻并不是很恰当。内功实实在在，没有任何巧妙可言，而算法天马行空，千变万化，就像是金庸笔下令狐冲的一套学习算法，我们不需要去死记硬背那些个冗长复杂的背景知识、底层原理、指令语法......我们所需要的只有对算法思想的领悟、对空间和性能的理解、开动脑筋去寻求最佳的解决方案。相比编程领域的其他技术，算法更纯粹，更接近数学，也更具有趣味性。我一直希望写出一些东西，让更多的IT同行们能够领略到算法的魅力，可是用什么方式来写呢？2016年9月，一次突如其来的灵感，让我创造了一个初出茅庐的菜鸟程序员形象，这个菜鸟程序员名叫小灰。程序员小灰的故事活跃在微信公众号上，用漫画的形式诉说着他的一次又一次面试经历，倔强的小灰屡战屡败，屡败屡战。小灰是我本人刚刚入行时的真实写照，相信许多程序员小伙伴们也能从中看到自己的影子。以下是几篇具有代表性的漫画：今后，小灰还会努力创作更多更精彩的作品，让数据结构和算法不再枯燥乏味！,同大二，计组亲妈爆炸你看，一堆一堆的人教你怎么学数据结构为啥？写代码有意思呗欺软怕硬呗数据结构真的不难呗真正头疼的是计组啊少女，你看有几个人提到过计组？为啥？他们也不会咯。偶尔几个提到的无非大略告诉你计算机从底层开始怎么工作，这都屁话你都工作多少年了我比你懂多多了，我知道从电路到模电到数电到CPU到操作系统再到编译链接怎么运行能给你讲得头头是道，我还拿Verilog写过单周期多周期流水线呢，有用？考试就考边边角角概念我他妈就是记不住不想记不行？以上是喷人的。数据结构那么多人都给你建议了我就不多说了，建议看至于计组，学学就行了，至少得知道怎么从c到汇编到机器码，CPU怎么解析机器码，取指译码执行访存写回经典五级流水，单周期多周期流水线大概什么流程，再学点cache，这些东西有助于写程序帮助理解底层，还有虚存页表，操作系统要用，考试要么刷题要么听天由命。 然后容我再喷一遍傻逼计组你他妈是想我背完这六七百页的书就直说傻逼玩意考尼玛。最后，以上均为没有逻辑的屁话。－－－－－1月25更新－－－－－出分了，平时分给满的浓浓师生情正好90,    遇到这个问题，首先排查是老师没教好还是自己不适合这个专业，数据结构确实抽象，我所认识学这门课的班级，一个班能有两个照着书本实现链表程序，就已经很不错了，很多同学连指针是什么都不知道，依然过的逍遥自在，考试准备一下，及格就行。  不过听你的意思想死磕到底，既然想学好，我觉得有必要分享一下，作为一个非CS专业的物理学转电子行业恰好路过计算机学科过来传授一下不靠谱的经验  我们班虽然也学C语言 ，但浅尝辄止，老师教完for循环基本上学期就结束了，指针什么的考试也不考，大二的时候，我还没意识到自己想要做什么，C语言69分飘过，每日懒懒散散的，但是。。但是  随着我在实验室呆的时间够长，自己会的简单的C语言已经满足不了我日益壮大的需求了，百度个宏编译，百度一下结构体貌似也还行，解决了一些基础问题，但是，别人的开源程序里好多指针怎么办啊，看着百度给的答案基本上要崩溃，爆炸，心情一度down到谷底，感觉这么简单的程序也看不懂真够衰，宛若一个智障，还不如好好学物理当个老师吧，自己真的不适合这一行   但是，内心的斗争总会有个头，最终我选择了CS，我仔细分析了一下计算机学科的专业课程，发现有四大基石，数据结构，组成原理，操作系统与计算机网络，我不知道哪来的自信，坚信学完这四门课，从此人生将会得到升华，想法变成了行动，甚至决心跨考CS的研究生(学之前)，我问电子专业借了(要了)相关的书以及自己买了点资料，自学第一周的时候真是要每日爆炸，最简单的链表一直没有运行起来，不是烫就是程序已停止运行，那时候完全没有编译原理的思想。  为了折中，我想了一个周全的办法，大三的时候，数据结构还是要学的，并坚信这也将成为我以后的知识根基，我继续看后面的内容，只看自己能看懂的东西，队列，栈和二叉树，这些设定都很有意思，和生活中的一些情况也很像，不写程序还有点喜欢这门课，同时我也有一个致命障碍，  我想那些厉害的大学，学的东西应该都一样吧，于是歪打误撞报了mooc上陈越姥姥的数据结构，不报不知道，简直爱上了这个老师，讲课通俗易懂，深入浅出，知道我不擅长用指针，实现队列竟然用数组，然后我只是按照她的思想，就用数组实现了队列与栈，第一次让我感觉自己在这方面有天赋，随着后面的课程进行，渐渐对指针的深入了解，指针式的图算法也能轻松看懂实现，  从此感觉换了一个人，与此同时，其他三门课也在同时学习，不能说自己学的多优秀，但是很有成就感，至少能看懂大部分开源代码了，思路清晰，而后也意识到文档，框架设计，重构的重要性，又学了软件工程。    大四伊始，别的小朋友都去考教师，考公务员，找工作了，我还在天天愁着这不会那也不会，后来发现是我多虑了，找了第一份工作直接坦诚说没有工作经验，还好技术主管问了我一个数组越界的问题，然后拿了6k的薪水，干了6个月，主要工作是打杂，做硬件电路，焊接，采购，提交设计文档，工作期间没有给公司写过一行程序，有一段时间加班回去好累也不看书了，但是后来决定还是要走的，这样下去会废掉的，于是又复习了一下数据结构，准备换工作，面了好几家都拿到了offer，在第二家公司主要写程序，直接挑战了我的极限，嵌入式操作系统对内存使用很严格，有点DS与操作系统的底子直接刚，什么消息队列，秒懂秒用，很快融入新工作，慢慢的，老板注意到我了，四大根基在这时候起了很大的作用，和老板聊天各种吹，后来也开始面试新人了  来面试的小朋友，失望了一次又一次，很多人把工作简历写的很厚，随便两个基本问题就问倒了，数据结构不会已经没关系了，面试了10个 ， 只有两个会指针的，还不愿意来，有些三五年工作经验简直更是不能忍，一度怀疑HR是不是闭上眼筛选的简历，或者  很多人不把这四门课程作为顶梁柱了吧  但是我相信他们以后一定会吃亏的,刚开始的时候看不懂，不是很正常嘛，哪有一上来就看懂的。再说敲不出代码，你看都看不懂，你能敲出个锤子来。其实说实话，对于如果你学不会，那就是学习的方式方法不对。下面来说下我总结的数据结构和组成原理的学习路线吧，相信肯定会对你有所帮助，关于数据结构与算法的学习我从以下数据结构经常与算法放在一起，这就造成很多同学懵圈，有些同学认为这就是一种。其实就是我们要怎样把这些数据存储起来，所以有数组、链表、栈、队列、树、图，这是数据结构的重点。数据结构，不管你怎么想，一定要认真学！不管面试还是考研都是必考！学习数据结构与算法的第一课，我永远都选复杂度分析，在我看来，这是复杂度分析主要包括以下两个：。对于某一问题的不同解决算法，运行时间越短算法效率越高，相反，运行时间越长，算法效率越低。只不过这种趋势是代码运行过程中临时变量占用的内存空间。强烈推荐阅读下面这篇文章，看完保证会！离开了数据结构，几乎任何的程序都会失效。要单纯的掌握常见的数据结构，就如同拆解一个个精妙的仪器件一样有趣和简单。数据结构重要的主要是下面这几个：不同数据结构有着不同的特性，因此而我最近就在做这件事，比如其中对数组操作：比如对链表的操作：比如对栈和队列的操作：《大话数据结构》这本书与市场上的同类数据结构图书相比，内容更加趣味易读，算法讲解细致深刻。是一本非常适合自学的读物。这本书通篇以一种趣味方式来叙述，大量引用了各种各样的生活知识来类比，并充分运用图形语言来体现抽象内容，对数据结构所涉及到的一些经典算法做到逐行分析、多算法比较。书籍地址：链接：尤其是在学习之初，堪称很好的防劝退工具，所以我对这些做了一些整理，希望能帮助到你。这个在线的模拟器包含“栈”、“队列”、“堆”、“BST” 等数据结构，每个数据结构以图像的方式展示在我们面前，同时又有各自的帮助文档，可以用鼠标对数据节点进行拖拽，还可以实现各种数据结构的增删改查。还有一点好的是，这个网站还伴随着一些数据结构的教学材料、简要的复杂度分析、数据结构使用实例，对于理解各种数据结构的原理及运用可以说是相当丝滑了…VisuAlgo 可以说是知名度比较高的一个通过动画学习算法和数据结构的网站了，它最初的建立就是通过可视化让学生更好的理解数据结构和算法。VisuAlgo 的功能更丰富，它包含了很多的数据结构和算法，从简单的到复杂的都一一包含，而且对于一些新出现的算法也有涉猎，通过可视化动画的方法，帮助我们更轻松透彻的理解算法及原理，尤其是对一些通过文字描述很难理解的算法而言，简直是生命之光。VisuAlgo 还支持搜索和多种语言的切换，英语不好的同学可以切换成中文，但是现在有一些算法中文翻译的并不全，所以如果能看英文的话还是建议看英文的。数据结构与算法的学习，往往要伴随着“刷题”，如果没特殊情况，我建议大家刷 LeetCode 就好。刷题按照分类来刷，如果不知道刷哪几道题，可以看下这个前字节大佬的刷题笔记：针对 LeetCode，题的解法有很多，我们往往追求的是最优解，这里有一份清华学长整理的 LeetCode 最优解，强烈推荐：我在大学的时候参加 ACM，拿过亚洲区预赛银奖，刷题贯穿了我的整个大学生涯，总结了一些刷题的经验，感兴趣的可以看下。顺便来分享下自己总结的【这份清单我会一直更新，同样也会一步步的把站在初学者的角度，下面就是我为大家精心挑选的 LeetCode 题目清单，我觉得它是所有计算机基础课程中最难学的一门课，整个课程的核心就是使用数字逻辑电路和触发器搭建一个可以运行汇编指令的机器。《正是因为计算机组成原理难学，所以对于初学者来说，比起其他几门，这门课的入门书籍选择就更得友好。《本书倡导在计算机迅速发展、技术不断革新的今天，回归到计算机的基础知识上。通过探究计算机的本质，提升工程师对计算机的兴趣，在面对复杂的最新技术时，能够迅速掌握其要点并灵活运用。本书从计算机的内部结构开始讲起，以图配文的形式详细讲解了二进制、内存、数据压缩、源文件和可执行文件、操作系统和应用程序的关系、汇编语言、硬件控制方法等内容，目的是让读者了解从用户双击程序图标到程序开始运行之间到底发生了什么。书籍地址：链接：看这个视频的配套教材是《深入理解计算机系统》。链接：关于题主现在的情况，相信我下面的回答也会对你有所帮助：,我是软件工程大三的学生，同女生，大二上学期修了数据结构，下学期修了组成原理而且我是转专业来软工的，还要补修大一的课程，课多到爆炸，上学期学数据结构的时候还没搞懂C语言指针，数据结构学的一塌糊涂（这学期重修了），大二开了一门如果题主在C语言上有短板的话建议先补C语言，然后多做做题，很多问题都可以解决然后是至于现在，当然是和没学过一样_(:з」∠)_如果想混过考试，大可不必紧张...如果题主是好学生的话，还是不要像我学习了_(:з」∠)_, 之前我认识的连数据结构都学不会的同学，现在已经转行做产品了orz 1、算法本身就很难，这东西对于人类本身来说就是学起来费劲！ 2、学习方法有问题，又或者老师讲的太烂！ 说实话，即使你把算法啃完了也未必有用，因为除了面试，实际工作中都是使用现成的模块，所以一般只需要了解算法的目的和时空复杂度，再刷刷题就足够。  下面根据题主的情况，我搭建了一条学习路径，一起来看下吧：  很多人觉得算法难，大多都是在背算法（包括我）就跟背菜谱一样。但算法和菜谱的区别在于，算法的问题变化莫测。如果你啃过算法书应该会有同感，明明当时理解了的证明，为什么过段时间就忘了呢。 所以我更推荐丢掉课本，通过项目实操的形式学算法。 一个数据可视化和算法可视化的网站，用它可以生成各种各样的数据结构，模拟它们添加和删除的过程，而且还可以用它来演示算法的执行过程。 我朋友推荐给我的，也看到知乎里有不少人推这个网站。可以说这是一个资源丰富的在线学习的网站，可以学到的语言不仅限于通用的编程语言。北美硅谷程序员创办的程序员编程学习平台，面向国内及海外的程序员用户。课程分类清晰，对于基础薄弱的同学推荐这个网站还超有底气的开了简单来说就是三句话这个过程中你需要思考为什么，而不是单纯的刷题敲代码背答案，这样在面试中的表现才会更好。 这里分享北大学长整理好的学习更多应试小技巧。 考得很多，主要注重代码实现能力，算法上没有太多难点，通常是处理麻烦。 ②③④⑤⑥⑦⑧⑨⑩ ①像是②其他一线大厂，比如③其他中小厂，比如 不同的岗位算法面试难度不同，难度排序（从易到难）： Data Scientist / Data Analyst / Data Engineer Web Frontend Engineer / Mobile Engineer Software Development Engineer Product Engineer Infrastructure Engineer / Software Reliability Engineer Machine Learning Engineer  非常适合快速巩固算法，我当时就是为了快速通过算法面试才发现了这个宝藏软件。里面的题集划分的非常细致，感兴趣的可以自己体验一下。 对于基础薄弱的编程小白来说，还可以来尝试对于正在备战大厂算法面试的朋友，也可以来好啦，以上就是我的分享，如果对你有帮助的话，就给我点个赞吧！ ,请问你到底有没有认认真真地学过一遍？！如果没有，请你先认真踏实地把每一个字每一句话每一行代码认真地看一遍！如果还是不懂，回去再看，看10遍之后，当那些概念那些推导过程在你脑子毫无违和感，你想不懂都难。实在静不下心看不下去，就读10遍，不想读就抄，抄简单吧，抄10遍，你不可能不会的。别笑我迂腐，别嘲笑这个方法蠢，有多少人能够做到这个程度――把一个陌生的待学习的新事物重复10遍？！做到这个的，想不掌握都难！我们都想成为很厉害很厉害的人，但是，大部分人都做不到。不是因为方法不对，方法不对，这句话很多情况下，只是懒惰人的一个借口。不懂怎么下手？网上到处都是大神的经验谈，你可以去查！学不会，好难等等这些全都是借口，是你逃避的挡箭牌。很多人缺的不是方法，而是行动，是日复一日地重复练习自己想要掌握的技能的自我约束的能力。别问我怎样获得这种能力，你不自救，谁也救不了你。不要抱怨了，踏踏实实去做你该做的事，一点一滴地积累，才能有量变，才能有质变。,,你好，首先冷静，不要慌张，大家都是这么过来的，我当初接触编程的时候，就这3行代码我还愣住了，怎么就互换了？现在想想不是显而易见的，有什么好思考的。我当初在学校从大一开始做ACM，数据结构还没学，那时候就是看问题，想，用极其粗糙的办法去解决问题。实在不行就看看别人的代码，慢慢就死磕过去了，后来开始学数据结构，稍微翻了一下就明白了，感觉没什么意思。只不过可惜没有早点看到这个，当初学得不够系统。你现在就在我当初死磕的阶段，人刚开始接触新事物的时候，自然是有适应期的，这段时间，熬住，过了就好了，回头来看不过如此。好了，理论说完了，给你讲讲方法。我觉得数据结构初学者最重要的是 比如，一颗树，1，2，3，4，5，6，7，8，9，10，这10个数，一个个加到树里面，每加一个，树变成什么样了，都一步步画出来。加完了删，每删一个，变成什么样了，一步步画出来。加一个删一个，一步步画出来。这一套下来，树就基本理清了，画好的画，多看看，记在脑子里，以后代码忘记了，想想怎么画的，自然就会写了。最后推荐一本书，<当初做ACM相见恨晚的一本书，把一些算法和数据结构都可视化了，非常容易理解。希望有帮助~~
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？【不要凶～大家就友善交流自己的看法哦⊙▽⊙】上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～,为了回答这个问题，我翻了过去好几年的qq空间和编剧视角的程序员是用word写代码的。放弃吧，写不写得出来，公司都要完了。,必然看啊，这是以前看报纸时留下的习惯。网友评论：护士在那里满脸笑容的接电话 ，可是你倒是把电话线接上啊？！,战狼1中一共包括5段功能代码。第一段是输出第二段是找100到200之间的所有质数。第三段是找100到999之间的所有第四段是通过键盘输入一个整数并找出其所有因数。第五段是根据键盘输入的分数评出ABC等级。通过以上几段残缺不全的代码，成功入侵红军指挥系统，并导致对方系统瘫痪。没想到大家对这个话题这么感兴趣！一个礼拜之内浏览量30w+，获赞居然上了3k。不胜惶恐。感谢各位！找到一张图片，,以前看过一个段子，讲的是一个计算机大牛给一部剧集模拟一个蠕虫病毒入侵的场景。这个大牛就写了个病毒，结果导演说就这？最终剧集上映的时候，展现蠕虫病毒入侵的画面是：显示器放一段蠕虫在那爬来爬去的Flash……这大牛回来说千万别说是他写的……,程序员不知道。但是作为一个学物理的，第一次看到群友发出下面这个图的时候，仔细看了看黑板上求解氢原子（前面的女人挡住我看公式了，可恶！）,额，看过很多代码，可以说没有几个是能看的。之前看最近看的《天才基本法》里面的代码是真的找了一段相关的代码在那里，这个应该是最认真的了。,2023.11.10更新，孤注一掷电影中，黑同事演讲直播，用的是后面黑掉小头目手机的场景其实不太现实，黑手机的方法主要靠钓鱼，而小头目后面剧情有准备，所以不太可能中钓鱼。如果是0 click黑手机，借助第三方软件漏洞才比较容易，不依赖第三方软件太难了，和前面的sqlmap完全不是一个级别。所以不如黑航空网站比较现实(PS:2018年未经过几轮hw的航空公司真的很简单)。黑客帝国2中的一个镜头，是非常贴合真实攻击场景的命令行片段。手机打字，所以在B站找的截图，注意存在中文字幕和弹幕。第一个镜头22/tcp这段，是经典的sshnuke 10.2.2.2 -rootpw=xxx这段是使用sshnuke这个攻击程序，攻击了10.2.2.2服务器，将root账户的密码重置为xxx。而sshnuke，是sshv1 crc32整数溢出漏洞的攻击程序。这是一个真实存在且流行过的漏洞，通过溢出可以直接反弹shell，或者像电影中一样修改ssh密码。ssh 10.2.2.2 -l root此时已经完成密码篡改，所以可以直接以root用户登录ssh。到这里，就是一个不复杂但很标准的渗透流程，收集信息——发现漏洞——利用漏洞——拿到shell。在第二个镜头中，存在多个窗口。除了第四层的窗口（最外层）是第一个镜头中出现的窗口，其他窗口分别如下。第一层（最里层）窗口，攻击机的本地登录。第二层窗口，sshnuke程序的汇编代码。对于溢出类漏洞，实时调试和分析非常正常。第三层窗口，另外一个更多扫描结果的nmap截图。依旧非常符合真实的渗透流程。随后便是用获取到的shell关闭电力程序，这个肯定是假的，但做的也非常逼真。,影视剧里面程序员写代码的时候，像打字员一样噼里啪啦一顿输出。一看就知道是扯淡。现实里面程序员一天写不了几行代码。写几行停下来查bug，网络上搜bug解决办法。,翻出来了一张N多年前自己发的朋友圈。。。,曾经有个剧，一个“程序员” 用word写代码。我暂停个锤子啊,看过一部国产剧，网警A在跟黑客聊QQ，网警B要求A尽可能拖延时间好让他追踪黑客的IP地址。你是不是觉得这样很辣眼？Naive！... ... ...网警B在cmd窗口里狂敲了一堆乱码之后叹气 —— 糟了！他用的是无线网络，没有IP地址！,,奋斗者的,不是程序员，会点ps前两天刷抖音刷到一个视频，妈妈把儿子几年心血画的毕业作品毁了如图所示会ps的都沉默了...,会啊，,还真注意过。1998 年的日本动漫《第一集，老师上课一言不发地板书 C 语言，可以看出似乎就是入门级别的东西，只不过好像是用货币符号￥代替了转义的反斜杠，不知何故。第四集，铃音开始深入“连线世界”，并且意识到“Knights”们的小动作。这个时候她已经开始小露身手了，毕竟不是每个初中女生都能在自家卧室里搭出一个集群……这之后她的显示器上滚动了一段时间 上世纪八九十年代正是顺便说一句，动漫里的“Knights”这个黑客组织也不是虚构的，它的真实原型是一个半虚构组织：第七集，其实不能说是“手机”，而是类似于智能手机或者说那么玲音在“玩”什么呢？她在看 我还是写过几句 Common Lisp 代码的，她第一个程序定义了一个叫 life 的递归函数，里面依稀可见还调用了 （最后铃音可愛いね,程序员甚至会在坐电梯的时候思考电梯的,这截图来自《战狼》：这截图来自《黑客帝国》：＜战狼＞和＜黑客帝国＞入侵代码对比，《黑客帝国》这是一个TESO写的攻击ssh的exploit（就是真正的攻击代码，非常专业）；然而，《战狼》里面那一堆大家加油，我的第一个破千赞就快到来了，感谢各位哥哥姐姐、弟弟妹妹、叔叔阿姨、叔叔婶婶～,当然，作为职业病，在看一些影视剧上的高科技镜头的时候，不免会想多看上两眼。其实这有时也造成了一些观影上的“出戏”，刚刚沉浸进去的剧情，结果被一些看着特别假的“高科技”镜头给逗笑了，然后还要在心理默默的告诫自己“专心剧情，专心剧情”。比如一些大的谍战片经常有黑客插上U盘，然后在命令行上煞有介事的敲一个命令，然后终端输出一堆文字。其实写过终端脚本的都看得出来那就是电影特效，其实背后什么都没有执行，单纯的终端输出一堆看着高深的字符而已。此时就很容易出戏，仿佛在看一个“跳大神”的在假装请神装神弄鬼一样。当然只要做的不那么假，我们也没有必要嘲笑，毕竟模拟也就只能这样了。真“实战”的场面看起来比电影要……无趣的多……记得曾经在电脑上观看某部《终结者》电影的时候，电影里有一个天网调取这个图粗看没什么问题，特别是画面最前面的明确显示着T-800的简要信息，仿佛就是在调取它的资料。但是当时电影画面可以清楚的看到后面的很多字符，暂停后仔细查看的话就比较搞笑了。后面那些字符其实和电影本身并没有什么关系，只是为了显得天网的高大上而随意显示出的一些文本信息。因为在大家的印象里，“黑底白字”一堆文本信息的画面就容易和黑客和高端计算机技术联想到一起。其实这地方应该把背景稍微虚化一点，这样直白的展示出来让从事计算机的人看到还是蛮尴尬的，容易出戏。首先从上图（此图经过了压缩可能看不太清了，建议找到电影原片段观看）我们可以看到有一个打印当前内核版本号的命令以及其执行结果，可以看到电影中最厉害的天网竟然是使用的Linux-4.1.15版变种内核……就类似我这样做：图片左右两侧大部分都是类似'ls -l'出来的普通文件信息，这些文件/目录基本上都属于root用户，且可以看出都是在当年12月19日下午16点左右被最后访问过的。就类似我这样：图片中间那个窗口，T-800信息下面还可以清楚的看见一条iostat指令。这个指令一般来自于Linux系统中sysstat这个软件包，比如我的系统当前执行iostat就是这样的：对比上图iostat的输出，就能看出基本是一致的。通过图中iostat的输出，我们可以看出当时最先进的人工智能、想要毁灭人类的天网系统，其空闲率高达99.23%。说明它根本没有使出全力来对付人类，仅仅使出了0.77%的能力，你说它是有多闲。连我现在写回答的这个电脑都比它忙差不多3个百分点 [手动滑稽]。存储设备也只看到sda和sdb两块磁盘，其中的sdb显然还不怎么使用，sda用的较多，但是TPS也才7.55，连我笔记本的sda的TPS都9.71。这个天网CPU闲也就算了，IO也这么闲，这是对毁灭人类这个计划有多么不屑一顾。sdb的平均读写速度和读写量都太弱，不值得说，我们还是以sda这个设备来说，总写入量看不全，但是总读出的数据量（你可以理解为累计的流量）才1357670665 Blk，这里的Blk一般是指512个字节，所以1357670665 Blk也就是才695GiB…… 试想一下，一个世界上最高端的人工智能机器，应该有多少的数据读写量才对，695G实在是有点太不够看了，随便一家互联网公司的随便一台服务器估计都比这个高吧。当然了，以上内容纯属娱乐，抬杠的话也有很多可以抬的地方。我只是就着这个问题说一下搞计算机人看电影时的职业习惯罢了。当然，这些小地方并不太影响我的电影观感，我更注重剧情上的自圆其说，和故事性的渲染和表达，至于和科学技术细节有关的东西，只要不是过于严重的错误，并不影响我对电影本身的感受和评价。大家如果有什么其它电影的带有终端运行画面的截图也可以发到评论区大家一起讨论，其实还是蛮有趣的。,天才基本法里，男主写的自走棋代码还真是自走棋游戏代码，据说来源是挺用心的。还有女主偷偷进男主家偷代码的时候，能看到游戏代码文件夹还分客户端，服务端，简直太用心了。
为什么大多数的程序员的编程界面背景都是黑色的?,,我现在截图给大家感受一下，把下面这张图放大，盯上五分钟。然后换这张图，盯上五分钟。哪个五分钟你觉得眼睛更舒服？反正我是肯定不会选第一张图，程序员需要连续盯着屏幕的时间不止五分钟，肯定会选择让自己最舒服的背景色。其实，纯黑的背景色并不是最好的， 纯黑背景看时间长了也很累，最好使用深色但是不纯深那种，比如这样的。,如果有幸沐浴在阳光下，写着一行行代码，大概率会把界面改成亮色。PS：这个时候就很考验屏幕激发亮度这玩意了~PPS：MBP这一块屏幕确实顶得住~如果是在夜色中写代码，暗色主题能让自己更专注。扩展阅读：,多年前我研究配色的时候制作了几套配色方案。仔细研究，我自己的研究结果是：黑色背景下，字体的前景色改变会显得更加明显。而白色背景下，前景色改变的效果并不明显，背景色跟字体粗细的改变更加明显。简单测试就是同样把字体颜色的RGB各加0x11，黑背景下，改变的字体差异非常明确，而白背景下两者的差异就小一些。所以在现实中，两种不同的语法元素，在黑背景中可能只差距0x33-0x66就可以轻松辨识，到白背景中可能就要用0x88-0xff才能达到同等的辨识效果。由于程序员的语法着色主要是基于字体前景色的改变，因此使用黑背景能够得到更好的视觉分辨效果。--一句话结论：由于程序员编程需要进行语法着色，而黑背景语法着色的效果更好。所以更多的编程 IDE 设计时选择了黑背景。以上是我的看法。,之前甲同事给我的建议是豆沙绿，后来我遇见了乙同事，告诉我黑色背景对眼睛最好。我问他为啥，他反问我：显示器什么时候对眼睛的伤害最小？我想了半天没想出来，他告诉我：显示器在关了的状态下对眼睛的伤害最小，所以最接近关了的背景对眼睛伤害最少。,因为现在几乎所有的显示器的显示原理都是——发光。CRT：电子束轰击荧光材料，从而在屏幕上激发闪光，显示字符/图像。LCD：整块背板发光（反射背光灯管发出的光），借助液晶材料的电致浑浊，遮蔽不需要的光，从而把字符/图像显示出来。LED：微型发光二极管发光，组成字符/图像。作为对比：黑/白板：利用不同物质（颜料）对环境光反射能力的不同，书写/绘制字符/图像纸张：同上墨水屏：同上两者最根本的不同，在于CRT/LCD/LED本身都是光源，是一种发光体；而后者本身不发光，必须反射外部光源照射过来的可见光，才能在人的眼底形成图像。自然界的发光体极少。日月，萤火虫，火……若不是现代的光污染，没有月亮的夜晚，伸手不见五指才是正常。这个差别是极为关键的。对反射体来说，它的亮度总是和环境相协调的——环境光有多亮，它就会有一个对应的亮度。烈日下的纸张也会亮的刺眼；星光下的宝石黯淡无光……我们的眼睛，早就习惯了这种场景。换句话说，反射体会“自适应于环境光亮度”；我们的眼睛经过亿万年的演化，也早已适应了这种场景。但是，电脑显示器这种发光体完全改变了这一切。它自身是发光的；因此烈日下，它的光芒显得太过灰暗，你自然看不清它显示了什么；黑夜里，它照样可以有500流明甚至更高的光通量，使得一下子从黑暗中到它前面的你睁不开眼。室内的光通量并非一成不变。早上，中午，晚上，照度各有不同；但显示器的亮度，除非你随时调节，否则总是一成不变的。它的亮度和周围环境的反差极易造成眼睛的不适应。因为我们必须不断的在不同的光亮度之间切换：一看显示器，500流明，瞳孔要缩小，要衰减神经信号强度；眼睛余光一瞥手边摊开的书本或者从身边走过的同事，哪怕只是看一小会儿，过亮/过暗的显示器都会造成极大的眼部疲劳；何况程序员们要在电脑前一坐一天。除非采光条件极差、所以一天到晚完全依靠灯光照明的办公室，否则，这种显示器亮度和环境光亮度的不匹配无法避免。而且，为了有效显示字符/图像，显示器亮度必须要压住环境光亮度，否则很容易看不清屏上字符、造成更大的视疲劳。尤其对程序员来说，他们不光要看清每一个字符，不同字符串究竟是什么——是关键字、运算符、变量、类、对象还是函数；一段内容究竟是声明还是调用还是注释；变量/函数公开还是私有、是否const、是字符串还是整型、浮点，等等等等——这无穷多的细节，遗漏一点都是灾难。而为了帮程序员快速区分这些不同属性，他们使用的编辑器（Emacs/vim/各种然而，人眼对黑白图像的分辨力远高于彩色。这是因为，人眼中负责识别颜色的视锥细胞数量少，而且灵敏度低也比不上负责识别明暗的视杆细胞——因此古人说“夜不辨色”，关于阴曹地府的传说也总是黑白的。晚上你也可以关上灯，拉上窗帘，看看彩色的杂志封面是不是颜色暗淡了。因此，想要让程序员一眼看出“这玩意儿是个类名所以染成了藏青色”“那东西是编译期常量所以用了天青色”“这东西是个函数所以用了淡绿色”……那么，显示器的亮度就必须足够高。否则真的没办法一眼分辨出这么几十种不同的颜色。换句话说，由于职业原因，程序员使用电脑时，往往习惯性的把屏幕调的过亮，否则容易看不清字符颜色。同时，由于职业原因，程序员面对的屏幕，必然绝大多数地方空白、只有少量字符（代码）。提高显示器亮度，对大片白色背景来说，这就是一大片的高亮发光区——你敢调的稍暗，上面的字符就看不清了。此外，由于显示器会发光，过亮的大片白色区域还会造成很强的因此，如果使用白色等高亮背景，这种“眼前屏幕亮度和环境光亮度的不匹配”造成的影响就会被放到最大。这和反射体是完全不同的。如果使用黑色背景呢，显示器本身相当于一块黑板，仍然有一定的反射环境光的能力（从而产生了一定的自动调节能力）；同时高亮度的字符如同细小的、闪亮的宝石，非常容易识别。盯着这种屏幕自然就不太容易引起视疲劳了。当然，黑色屏幕虽然仍然能有一定的光反射能力，但反射效果并不好，容易让人觉得显示器那块亮度（相对于环境亮度）过低，仍然不太协调。如果选择灰色之类存在一定基础亮度的暗色，那么显示器背景和环境光强之间的差距就可以进一步降低。这就是很多人说自己“更喜欢深色而不是黑色背景”的原因。,Because light attracts bugs,"同搬砖, 建筑界画图就没这么问的. CAD一水的黑色背景, 因为无论白红绿蓝, 他们都是高明度的颜色, 混在高明度的白色背景中, 远没有低明度的黑色背景清晰. 程序界面也是同样的道理, 字符是细小的矢量线条, 不同类型的keywords用不同颜色区分, 其中不乏高明度的颜色, 与白色差距较小, (可以当成没那么白的浅灰色), 识别起来很费力. 所以保持低明度的底色, 高明度的线条, 是能保证清晰度的办法.当然, 对比度不是越大越好的, 伤眼睛. 而且颜色背景不同还会有暗环绕的问题. 在此不多展开. 最有伤害性的是，程序员为了搞创造性工作，免不了时常要切换网页，非常费眼睛。因此如果你学一些东西，建议换成亮色的背景。",Because light attracts bugs,最开始白底用半年，眼睛爆炸后来换黑底，舒服了一年再后来发现好像其实很简单你专注思考的时候，眼睛不自觉地盯着看，查个api什么的盯着看。一天盯8小时白底，和盯灯泡有啥区别亮度低点，眼睛是聚焦模式啊。,,大概是由于BUG有趋光性 ,其实这个配色最舒服，但是我只在Termius里面见过原生的这个配色，叫Novel（小说）。里面这个主题实际上还是有些区别的，比Termius这个差很多,表达了程序员对黑色秀发的向往 ,"vscode默认界面是深色的。vim默认界面是深色的。默认界面是深色的。为什么大部分程序员编程背景都是黑色的？没有那么复杂，只是纯粹地懒得换而已~不信你去看看用VS开发MFC, win32的程序员，他们的背景是不是白色的(逃",这两年的潮流。35年前，大多数程序员的编程背景色都是蓝色的25年前变成白色10年前变成黑色我个人还是喜欢浅色一点，眼睛看着不累，黑底的反差太大了。不过其实黑色也算是复古，我小时候用学习机的时候，不管是LOGO还是BASIC都是黑底白字的说浅色蓝光多的，自己把色温设定成4000k或者更低啊,我认为，多数开发环境的编辑器采用深色背景的主要原因语法高亮越来越智能，用到的颜色越来越多，白色底下已经很难分辨清楚。咱们以Visual Studio 2019为例，看看黑色和白色主题的差别。,亮度调最低的时候暗色比亮色看着更舒服,我的回答基于科学和事实，无关个人喜好。见 简单小结一下，何种主题最好，还是基于数据比较好，下载最多的主题一定是比较优秀的。我对于Emacs社区还比较熟悉，其插件下载网站有主题下载数量统计：我自己下载了排名前100的主题，启动编辑器时随机载入主题。顺便推荐我的文本文件操作术教程： ,不光编程IDE软件界面是黑色，市场上很多软件也是黑色或灰色背景为主，比如PS、Pr、AutoCAD等。很多商业PPT、设计广告是黑色背景，这几年不少汽车品牌logo也改成单黑色。看来黑色不光是程序员的偏爱，也是符合大多数人需求的颜色。我理解编程界面以黑色为主，有以下几个原因：我们日常生活见到最多的颜色就是黑色，夜晚也是黑色。人习惯了黑色，能够更加心静和专注。其实看看周边物件也会发现，大多数电脑、鼠标、键盘、手机也是黑色的。白色和其他颜色强光会更会造成眼睛疲劳。程序员可能一天盯屏幕十几个小时（不知道在干啥），黑色背景多多少少能保护眼睛。有首歌叫作夜空中最亮的星，黑色作为背景色能更好地凸显其他颜色。在代码框中，一般黑色背景也会比白色对代码颜色的渲染效果更清楚，除非你是用深色的代码。通常黑色界面会配鲜艳的字体， 然后一些class， function，或者method会用相同的颜色，更容易被眼睛捕捉到。黑色似乎显得更加有高级感，这不管是在软件界面，服饰搭配、汽车设计等都表现如此。如果你作为程序员，端坐在电脑面前，被别人看到一脸绿、一脸蓝、一脸红...会有多尴尬。就算你用白色，加班到深夜，满脸亮光老板以为你在摸鱼。,因为MsOffice是白色的。这样就可以区分，写软件的人和用软件的人。（手动狗头）
新手想玩硬件，买单片机还是树莓派好？,会一点点 C。,这个问题本人应该比较有发言权了 :D所以不管是Arduino还是树莓派，我都算玩得比较彻底了哈哈，下面先介绍一下软硬件开发的区别和联系，然后会给出学习建议~先上几个视频：也自己设计过接下来回答题主的问题：新手想玩硬件，买单片机还是树莓派好？这个问题其实还不是很准确，题主首先要知道我想楼主想说的应该是在嵌入式开发中，具体分下来：底层可以到模拟电路（射频、电源等），数字逻辑电路（FPGA、所以我们来看看，Arduino的开发其实属于Kernel那一层，也就是裸机程序，而树莓派则一般在操作系统那一层（不考虑驱动开发），这样题主应该就知道他们的本质区别了。抽象的层级越高，要实现某个功能会越来越容易，但是相应的自由度会越低。这么说题主可能还是不太直观，给题主看几个我之前做的项目：这是我之前的一个回答，这个回答中我介绍了制作迷你机器人的过程，其中就有从第一代用不知道题主看完觉得对哪个机器人最感兴趣？如果是前两个的话，那么Arduino适合你，对于这种玩具类的设计Arduino有天然的优势，那就是数不清的比如上面链接回答中我也提到了，那个对于我自己的经历经验来说，我最早是从学习说了这么多，对于题主有几点建议：长期搞各种脑洞项目，大家不嫌弃的话也可以点上面关注一下～不定期更新项目顺便微博@  我的其他回答：,"陆陆续续做了很多硬件项目5-6年了， 说说我作为一个非专业我的经历：本科电气工程但是并没有好好学习，不喜欢课堂上理论为主实践几乎为0的方式。大三左右（2009？）开始对单片机感兴趣，那时候什么都不懂，本科之后就转行学了设计，本科基础都慢慢忘光了，所以我可以说是从新手小白一路学过来的。2013年左右了解到了Arduino的存在， 立即买了官方的新手包，里面附了一本小书和很多简单配件，一个星期就可以全部做完，还能做出几个小小的作品， 成就感爆棚。 几个Arduino项目，不见得多么复杂。2019年的生日加情人节礼物，Arduino Nano +Neopixel五年前做的另一个生日礼物，用了Arduino和LED矩阵，定制了动画。这两年也做了一些套件，很方便入门2014年因为一个项目需要做到无线视频传输，入门了树莓派，可以说功能相当强大了，但是要学的东西很多很多。 刚开始压力会比较大比较烦躁。这个坦克算是我第一个大型项目，从机械设计，3D打印，用树莓派控制，到远程视频传输和遥控软件，当时有点无头苍蝇但是也不管三七二十一的做了出来。现在的知识和技能都有了增强，但愿这几年能重做一个2.0。51平台不甚了解就不说了Arduino英文的定义是 Micro controller。所谓控制器，接到输入，进行处理，再进行输出， 通常来说是单线程的。 所以适合做一些不复杂的项目。这里的输入可以是按键，传感器，数据等等， 输出可以是数据，声光，电机等等。 树莓派是一台电脑， 一台超小型的功能没那么强大的电脑。多线程，可以安装操作系统，有多样接口等等等等。   祖国版完全够用，Uno 二三十块， 小的Nano十块钱左右一个。 淘宝一百多的新手包完全够入门了。 ：一个板子就200多，你还要考虑各种配件。新手不弄headless的话得需要显示器吧，需要hdmi吧，老版的需要再买USB Wifi，USB不够用要买新手学习，万一有个短接什么的很平常，用Arduino， 烧了就烧了不心疼，Pi的话不差钱您随意。还有就是你做项目的自由度， 同是200块钱， 你可以做20个Arduino项目，每一个都可以随时拿出来把玩。 Pi只够同时做一个，要做20个项目的话还要每次重新连接，每次运行不同程序，想想都心累。学学怎么接线，usb插好，IDE下载好，运行示例程序。就是这么简单。首先得看卖家提供了什么样OS， 如果没有的话，你要先格式化SD卡，研究好要用什么OS下载好，（Headless模式： 设置Wi-Fi信息启用SSH，用一堆你没听过的软件设置另外的电脑端。）接好外设,  启动，设置用户名密码，利用linux连接Wi-Fi。下载必要的软件，开始编程。电路连接方面，两者都需要基础的电路知识，Arduino的Pin口相对树莓派的GPIO友好很多。根据项目边做边学，不求甚解也没关系，慢慢就开窍了。编程方面：题主说有C基础，C也是大部分人的大一基础课，不难上手。IDE也很简单，编好程序一键编译上传。多看看示例和别人的教程，高级的功能多搜索。大部分OS启动后是直接进入命令行的，bash command不见得每个人都会，怎么新建文件，怎么保存，怎么退出程序，怎么关机，你可能统统不知道。你当然可以一开始就使用StartX进入GUI体验下linux系统，跟Mac OS和Win操作还是有区别的。 下面你可以开始编程了，大部分Pi的程序是Python写的，虽说Python相对好学，但如果从零开始的话也是额外的一个负担。上面说了这么多，好像看起来Arduino又便宜又方便，为什么还需要学树莓派呢？树莓派虽然相对昂贵复杂，但能为Arduino所不能。 举几个栗子：树莓派跟你的电脑一样，可以多线程，同时运行多个程序执行不同任务。可以运行更复杂的程序，比如用python做抓取，遗传算法，机器视觉等等。有更好的网络连接性。当然也有相对弱于Arduino的（功能方面），比如运算实时性不高不适合精确的时间控制。有很多项目也是通过树莓派控制Arduino来各取所长。我自己喜欢把两者的关系比作人脑，树莓派就像大脑一样负责观察体验（机器视觉），思考（AI），做出决定（指令传送到底层）；底层的功能如呼吸消化（系统自检，电源），有什么说的不准确的还请大家指正！Happy Making!关于我:自己平时会做些各种各样的小玩意，激光切割，3D打印，Arduino，Unity什么的。欢迎关注ins： Chenthedesignmaker   微博@ 设计极客Chen还有我的youtube频道：目前在做各种科技diy向的节目和教程，请多指教！",玩硬件很多人说很贵，但是我觉得其实现在是玩硬件最好的时候。1万元对于本科生来说相当于两年的大学费用。对于3本的学生来说相当于1年的费用。1万元估计都不能上的起某些单片机，java，深度学习的培训班。但是1万元自己投资自己做硬件却可以学到真正的知识。骚年你渴望力量吗？这里有一份器材清单我看与你有缘免费送给你吧。首先 仪器类1。示波器 2100元左右 双通道100MHz模拟带宽1Gsps。 可以carry各类模拟电路的试验以及工程。2。逻辑分析仪 360元左右可以买到200MHz采样16通道的虚拟逻辑分析仪（计算机外接adaptor usb传输到计算机显示波形的那种）。3。万用表 不去搞强电也就30快能买一个主流的了。开发板类的：1。 FPGA开发板。玩硬件如果不会fpga你觉得你会爽吗？fpga一时爽，一直用一直爽。最开始入门可以买那种点个数码管，外面挂一个2。单片机开发板。我不建议开始就去买单片机的开发板。单片机入门从51搞完了就可以进军stm32了这时候你就会发现你比那些一上来就搞stm32得人有哪些优势了。PCB设计自己拥有pcb的设计能力是很重要的。而现在就是最好的pcb设计时代。4月初某两家进阶搞完了以上这些基础的工具类知识基本上做一些简单的东西就游刃有余了，此时的你会很爽。但是不应该仅仅局限于简单的东西。下来就应该做一些更牛逼的东西。比如数字信号处理。神经网络之类的。做这些你就需要接触一些高端的板卡了比如fpga类的你就需要一些逻辑资源大的比如55k LE或者110k LE这种资源的。我有幸有一块530K LE的板卡吼吼吼 后期准备部署我自己的深度学习加速模块。这些板卡价格也还算能够接受。一般的85K LE等级的板卡比如zynq 7z020 也就800左右吧 altera类的 cyclone v soc 有一款110k LE的也就800多吧。有了这些利器做什么都会很爽。最后你会不甘于仅仅只是把你的想法在开发板上运行。这个时候就是体现你pcb功底的时候了。自己定制一款自己的单板，砍掉所有不需要的功能，尺寸做的小乔玲珑不要太爽。对付bga封装的芯片其实现在也不是很复杂。jlc的4层板制程已经可以满足0.8 ball patch的bga设计 而他只需要每款样板100元。bga焊接也不需要去专门的厂家自己就可以搞定。我是这么做的没错使用这种恒温加热板就可以焊接bga了再po一张焊接好的下面这张图是板上有一个0.5ball patch的当然后面你还是会不爽因为你也想自己做结构件了。那就整一台3d打印机吧 现在1500元就可以买到一台3d打印机对于我们这些只做结构的人来说太合适了。走到这里你已经成为一个硬件产品经理的,。不要盲信高票答案，他俩，不是进阶关系。做出炫不炫的东西是个人爱好，不是拿来说明差异的工具。1、单片机主要用在控制领域。这一点Arduino也罢，51也罢，绕过Arduino直接上AVR也罢，一步到位STM32也罢，差别在系统复杂度不同，功能强弱不同，资源多少不同，但共同的特点是一般都不上OS直接裸奔，要上也是RTOS，即它们共同强调一个特点，就是即便如今已经能跑到220M的CortexM7，ST的高端型号甚至都上了A系列都没有的双精度FPU，依然没有MMU这个东西，说明压根就不是给完整的操作系统准备的。相比之下，只能跑80M的ARM7TDMI却能运行完整的linux（当年红遍全世界的GBA就是这个内核，不过主频低得多）。学习单片机，主要是要学习数字电路知识和一部分简单模电，核心是计算机体系结构。这就是为什么大学的可以说单片机是硬件工程师入手的必经之路。2、树莓派是个树莓派的核心是跑架构、跑库、跑算法，GPIO是附带物。没有人裸奔所以树莓派开发恰恰是为了最大程度绕开和硬件的接触。你看到的树莓派和硬件的结合，是最小化硬件操作之后的产物。所以别人的代码down下来编译一下就能跑了。单片机代码你要是无视对方的电路设计，跑一个我看看？所以单片机还是树莓派这个选择要看你的倾向，硬件还是软件。实际上如果你要选择这个方向从业，两个迟早都要玩的，别选了。顺带一提。我在dji厂做算法工程师一年多，跑在CortexA平台上，和树莓派一个类型，以前自己玩四轴的时候是用CortexM4，这俩东西相互不能取代。高票答案太限定在自己是一个创客的角度了，无意冒犯，但做个彩灯这样的东西晶体管都能实现，不能拿来解释架构上面的东西。倒是亚克力加工我觉得值得肯定。,建议新手从树莓派上手。因为树莓派本身是一个单卡计算机。只要你会操作linux，只要你会点python或c语言，你就会使用当你会使用树莓派之后，你可以尝试一下单片机。比如我从树莓派开始研究，后来玩arduino，现在开始玩esp8266。这是使用其实玩硬件有很多种方式，不要去纠结如何选择，我建议你把所有硬件都玩一遍。,我个人建议不要从任何SBC实际上定位非常尴尬。搞物联网（搞Linux，又比PC和服务器增加了很多不必要的麻烦，有的项目不支持ARM，硬件结构不一样……我的建议是，对接传感器、屏幕等，先从ESP32开始。入门难度之低，超乎想象。STM32也行，但随着想对接硬盘，从PC或者VPS开始。Sata，NVMe这些高速率的东西，ESP32完全搞不定。等你把这两边的基础都搞通了，再向SBC平台进军。树莓派、国产各种派，主要优势是体积小。他们更多的还是对标PC和服务器的，只是兼具一些GPIO能力而已。而且他们的GPIO配件，基本是厂商高价定制集成的，某种意义上带有一点智商税。适合给小孩当教学玩具玩，不太适合真想学点知识搞实用的人。另外说下入门成本。ESP32开发板，第一块大概24元包邮，送第二块就可以买9.9元包邮的屏幕啥的可以去淘0.5元一块的二手，电机有2元左右的二手，各种转换接口0.5元（普遍6元邮费，我基本都是一次淘20元的，降低邮费成本）二手的尾货外壳大概也能2块钱一个淘到。（你得有这个意识，很多东西买了直接拆外壳）万用表大概十几块钱，电烙铁8块。最贵的其实是电压电流计，这玩意要60-100元。试过买5块钱和13块钱的，用起来累心，不适合查错时用。启动成本非常低的。,玩硬件是个大坑，我上大学的时候，看到那种编程的网上说先从做四驱车开始，我买了然后我就感觉我行了，牛逼了，准备着手开始做双足，买了好多玩了半个月，啥也没玩出来，小两千的一大箱子硬件在角落吃灰，我那一学期都没吃过一顿好的。结论:哪个便宜玩哪个，等发现自己真的喜欢了，入门了，懂行了，就自然明白了。不然就像我这种失败例子一样，每天都看着那一箱电路板，回忆着那半年吃糠咽菜的生活，在浅色的床单上哭泣。,"大家为啥非要争个你死我活呢用过51/STM32/Arduino UNO/ATTINY85(DigiSpark)/ESP8266/OrangePI(类树莓派)写过HelloWorld（即点亮一颗LED），简要对比下特点，供题主选择优点：结构简单，工业化使用时间长，资料齐全缺点：没有板载adc，pwm需要使用定时器模拟，基本上干点啥都需要扩展外围电路；计算能力有点捉急补充：比较新的51已经有了pwm和adc口最小系统价格：stc89c52<10元优点：片上资源丰富，该有的都有了；处理器性能强大；工业使用也有一段时间了，资料也很丰富齐全缺点：实在找不到啥缺点，非要说的话，开发环境配置比其他的复杂算不？最小系统价格：stm32f103c8t6<10元；stm32f407vet6<50元优点：开发环境配置简单，片上带adc，缺点：IO口数量有点少；片上资源，性能上与STM32差了不止一个数量级最小系统价格：国产ch340+贴片328p版本<20元优点：使用缺点：ram太小，io口就6个最小系统价格：<10元优点：缺点：资料丰富程度不及51或stm32最小系统价格：esp12f+ch340<15元，单芯片（不带串口芯片）约为10元优点：资料相对丰富，ram足够（高达数百到上千兆，跟单片机几百字节到几兆字节相比，高了几个数量级），可以买到支持rj45或者wifi的版本用来做IoT（实际上，xxxPI更适合作为IoT设备的中心节点而不是直接控制硬件）缺点：非实时系统，价格相对较贵部分参数对比：备注：esp8266 ram为64K instruction RAM,96K data RAM关于片上资源说法比较粗略且不严谨，详细差别可以参考各芯片的选型手册关于示波器/屏幕的问题：取决于需求而不是控制器。关于开发板：我个人都是直接上手最小系统板，从开发板上手容易导致只会用开发板，容易知其然不知其所以然，拿到最小系统容易蒙圈；自己搭外围电路是一种乐趣，自己搭建外围电路，换其它种类的单片机很方便总结下：不说需求就选型就是开玩笑。先定需求，要不要wifi，需不需要i2c/spi总线，需不需要串口，代码规模大概多大，io口需要几个，预算多少。以上需求确定后，基本上就选出来了。",硬件的正确打开方式很关键，所谓差之毫厘，错之千里。有些回答上来就贬低c51，有些回答就回答arduino。有些为8051辩护，却又不答不到点子上。单纯地贬低8051，或者单纯说arm，都不在点子上。首先，玩硬件是一件烧钱烧脑烧时间的事情，并不是买一块8051或者其次，你玩硬件的目的是什么？是学一门技术，还是玩玩而已。如果是玩玩而已，在高中/大学混个奖，其实在淘宝上买个什么机器人、自动小车套件，就可以了。如果真的是对硬件感兴趣，想学门技术，请耐住性子，开始还真不必买什么板子。从电路分析、模拟电路开始，公式+proteus验证。数字电路也是一样，公式+multisim。有朋友说，数电用FPGA，非常同意。不过时间可以放在方向确定之后。这之后，差不多可以搭建一个最小系统了。用8051也可以，用cortex m3也可以。之后，再在某个应用方向上扩展功能。到工厂去，到一线去。这中间的路，远非你想象那样简单。硬件不重要，反正到了一定阶段，你总会“发烧的”。。当然，如果有经济能力的话，花个几千块，可以体验一把。其实也没有什么好体验的。就当放个大烟花一样，就是看个热闹，看个稀奇，看个新鲜，看个好玩。放烟花的时候，并没有什么意思。真正有意思的时间段，是动了买烟花那个念头、挑烟花、一直到点烟花那一刹那。,目前凑合能说是一个单片机职业开发者了，应该能答一下这个题了。开始之前，看到上面有好几个答主吐槽了51，虽然“先看看答主的意思吧，想要玩硬件。但是很有意思的是你说的单片机多数时间更像是偏向于底层的软件开发，并不是硬件开发。既然我是搞单片机的，那就从单片机的角度先给你一些参考，得益于极高的性价比，目前市场上的主流之一是stm32系列，不管是m3内核的还是m4内核的，应用都非常广泛。至于被一致吐槽的51，这个确实在被慢慢淘汰，但是也不能说一无是处，毕竟一个被各大高校拿来当教材的单片机必然有它的可取之处。因为我开始阶段也都是自学，该踩过的坑都踩过，在我看来，51最大的优势是它的结构相对简单，寄存器很少，甚至达到了可以全部记住的地步。但是同时，51也有足够的能让你理解单片机是什么东西，能干什么的能力，定时器，中断，还有串口，这些做单片机逃不开的东西它都是有的。另外，51的内部资源是非常有限的，如何利用有限的资源，达到更好的效果，这个锻炼的是一种能力。虽然现在更强的单片机让这种不浪费每一个字节的态度已经变的没那么重要了，但是真的等到需要用到的时候，你会感谢以前学到的一些能力。如果你真的想深入到非常底层的东西，比如代码真实的运行轨迹，怎么实现的中断跳转，甚至怎么实现一个操作系统，51还算合适，仅仅因为它还不是那么复杂，而且各大高校的教材是非常多的。但是为了应用的话，51就只能用来学习一些基本概念了。推荐浅尝辄止就可以了。应用的话，一个更加主流的方案可以让你遇到问题更加容易解决，毕竟你遇到的BUG，可能其他人早就解决了。个人推荐stm32系列，无非因为便宜。而stm32选用库开发是大势所趋，寄存器的概念和操作希望你在开始之前就已经搞懂了。至于总结来说，单片机更适合一些底层控制，而树莓派用来做服务器或者处理中心更合适。时间有限，随便写点，到此为止。, 属于无论是 Arduino 还是 ,我个人看法。。。。。本人推荐先从啊丢肉（Arduino）开始。本人4年多前开始玩硬件，一开始是从三极管和集成电路开始搞得（那时候还没听说过单片机），然后就每次都是要很费心思的去设计电路才能搞出一个好点的产品出来。最早我就是连npn和pnp三极管的原理都不懂的，就去拼命查资料，看了n多书才弄明白，紧接着就用三极管做了一个闪灯。不久以后我又接触了555等集成电路，就觉得比三极管方便多了，在这期间我经常去查datasheet，然后又用集成电路搞出了流水灯.“石头剪子布”机.pwm电风扇.打地鼠机等，功放也做了十几个。不过有一些东西用集成电路来搞也很有困难，比如我曾想用555和4017来搞一个闹钟，结果失败了。。。。。。紧接着我就开始用89c52单片机。我对这东西的第一感觉就是好厉害，写个程序就可以实现很强大的功能！我曾经用集成电路搞失败的闹钟，电压表，温度计等东西用单片机轻松就可以搞的出来。过了一年多以后我又发现89c52的速度太慢了便换了stc15，这下子玩的更爽了。结果一年前，我们学校有很多人玩Arduino，他们用Starch编程就能够开发出很多好玩的东西，而且还不用焊接和写驱动......但是stc15要写底层驱动啊。。。。我就有了个想法，就是利用Arduino的方便来先搞出一个产品，再研究这个程序，最后搬到stc15上。凭借这样我终于在很短的时间内弄懂了nrf24l01和ws2812还有iic 1602模块，而且也更有成就感了。然而，我被stm32深深地困扰着。stm32太难学了吧，从几个月前学到现在只会操作所以我大力推荐Arduino，因为可以不用焊接，有现成的库可以用，不需要太多考虑底层驱动就可以搞出很好的产品，对新手很友好。最重要的，价格极其低，某宝十几块就可以买个UNO板，加上配件100不到就可以玩的很high了放一些自己做的东西和fpga。。。本人真没用过这些东西。。。。。,这俩完全不是一类东西，有啥好比较/选择的。还有楼上推荐 51/AVR 的怕不是传统工科学出来的……如果你是自学，做 DIY 项目，不打算涉及工程的话 51/AVR 这种关键问题：好像大家对我鄙视传统几大单片机意见很多。我不给新手推荐这些是因为：第三点可以展开说一下。比如一个人会标准 C 语言，懂模电数电基础，那么他去写 Arduino 只需要学习唯一一个 language extension：PROGMEM（而且这个东西早期是不会用到的）。如果他连电路基础都没有，没事我们有模拟器 ==========下面看到一个推荐在低功耗硬件上写 JS 的，让我写 JS 我宁愿写 51,新手必推arduino啊。。。淘宝上arduino nano才十几块钱，已经够玩出几十种花样了，而且超级好上手。Arduino nano在官网上已经停了，但是淘宝卖的质量绝对不差，高精尖的实验室都用它。工作了才开始学习硬件，arduino试了两三天时间就上手了，意外的是竟然因为设计硬件给工作带来了好多乐趣。至于有人提到的必须要买个示波器，因为兴趣开始学习的话，不妨用instructables推荐的方法，直接用arduino搭一个示波器出来。除了硬件的话，又喜欢编程，估计可以玩树莓派了，树莓派的教学资源比arduino要多得多，甚至官网上有很多专门为小孩子写的教程。假想自己以后有小孩子了，肯定给ta来个,很贵的东西才做选择，这么廉价的东西当然是：全都要！，有便利的操作系统和软件。因此玩软件占很大一部分。插个SD卡，跟着网上的教程装系统、装软件，学一点Linux。可学可玩的东西很多，花一两天上手以后，就可以随心所欲了 ：）树莓派官方推荐Python编程，可以写Python代码直接操作外围电路，这对懂一点编程但是不懂单片机的新手来说，吸引力很大。比如说写一个超声测距的程序，不到20行代码就搞定了。当然也可以用C开发。而与树莓派完全相反，不过arduino比专业用的单片机开发环境更友好，编译、烧写过程更加自动化，所以才这么受欢迎。上图是我自己做的便携式游戏机，显示驱动、输入驱动都重写优化过，目前只有这一个游戏 = =接线、面包板、按钮、二极管、各种传感器模块都是通用的，比如你可以买一个arduino小开发包，再加一个独立的树莓派+sd卡，就足够起步阶段的所有需要了，相当方便。PS：树莓派可以接USB键盘鼠标和任意HDMI显示器，所以不需要买专用设备。以后你玩熟了都是用电脑远程登陆上去操作的，就更不需要显示器了。,,,,,
在真实工作中的编程是怎么样的，与学校里有什么不同？,本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。,/*说说我的经验*/刚进公司时，在你正式动手写代码前，很可能要理解在此阶段，你每天的工作就是看文档，看设计图，读代码，放断点debug，hack，fix，问同事。你很累。你很无聊。此外，刚进公司的你，会发现你的项目组正在使用一些奇葩工具、冷门技术，他们非常不好用，尤其跟你大学时候用的成熟IDE相比。你可能会想砸键盘，“谁特么想出来的用这个工具！谁特么写的这么sb的工具！”你很失望。渐渐的，你开始了解了你们的业务领域，所谓的掌握了一定的领域知识，你开始有能力判断哪些是权衡，哪些是权宜，哪些是极精妙的设计，哪些是遗留代码。你的领导也发现了这一点，于是开始给你安排简单的任务。他们可能是改一些显而易见的bug，可能是实现一个最简单的新特性。此时你会有一种驾驭的错觉，你很快的写好了功能，提交，开始幻想自己精妙的代码收到表扬。当然，不出意料的是，你提交的100行代码里被找出了10个bug，其中2个是很严重的逻辑错误，4个是未实现的需求，2个是ui错误，2个是边界条件未检查。你心里十分不爽，“妈的劳资这么屌炸天的代码你们都不懂得欣赏！”此时你的领导过来轻描淡写地来了一句，“我们提交之前要进行code review”。于是你找了你身边比较和善经常解答你问题的小哥来代码检视，10分钟之后，你漂亮的代码被改得面目全非，你欲哭无泪，又不想得罪前辈，于是默默地提交了这不知道是谁写的代码。就这样挣扎着过了几个月，你开始摸清了门道，于是你开始运用你大学时期课内或者课外学到的引以为傲的技巧和知识了。领导自然也发现了这一点，于是他开始安排你组织技术交流会，你精心准备好了ppt，自己在家排练，并且试图加入一些或者高冷或者没品的幽默段子。会议很成功，你感觉到同事开始对你刮目相看，你开始飘飘然，重新拾回“驾驭”的感觉，心想“就你们这帮码农，劳资以后可是架构师！”渐渐的，你开始进入了状态，你提交的代码越来越多。刚进公司时你从来没打开过的代码规范文档开始回来找你麻烦，不过这不是大问题。领导开始对你强调质量，而你则在心里抱怨旧代码的设计。你想要重构，你想要创新，你想要搞一个大新闻。与此同时，组里新来了一位同事老李，是从其他部门调过来的老员工，领导组织组里盛情欢迎了他，你心里不服，但是他是个好人，你们谈笑风生。机会来了。公司要紧急实现一个演示功能，百万级的合同能不能拿下来就看这次了，你的领导已经亲自飞往客户那里坐镇，他走时跟你说，“组里就靠你和老李了！”你十分激动，买好了泡面和零食，准备通宵作战，给领导提供最犀利的火力支援。第一个功能点谈下来了。领导发给你了要求。你发现你半懂不懂。里面提到的一些其他模块，你在每月组织的技术交流大会里听说过，但你写过的那点代码里从没调用过他们的API，你更没读过他们的代码。你有点不知所错，开始心虚。不管了，先开始干。你找到了一些相似的功能，翻出了一些发霉的陈年旧代码，注释里写着2004/06/18。你没有时间完全读懂，你开始复制粘贴，直接debug。当然，代码报错了，你开始挨个解决，就这样，一个通宵。第二天早上，你总算把你熟悉的后台部分调通了，你发现了新的麻烦。是前台。你对前台并不熟悉。你知道javascript的原名叫ECMAScript，你知道JQuery对象和dom对象的区别，但是你发现你还是看不懂你们的前台代码。怎么办？好吧，你决定拉下脸，问老李。老李看你的样子，说，“你去睡一会吧，我来帮你看”。你心里有些不甘，有些不好意思，也有些感激。你很想自己把它们做出来，但你不会，而且时间也来不及了。你想学学他是怎么做的，但是你的大脑已经停止工作了。于是你疲惫地笑了笑，“好，交给你了。你看一下这里这里还有这里...我就去睡半个小时，一会就回来找你。”你这一觉睡到了下午。你醒来一看表，震惊的弹起来，赶紧回办公室找老李。老李已经从你的座位回到自己的座位上了，正在慢悠悠地喝茶。你有些惊喜地问他，“怎么样？”他回头看见你回来了，说，“放心吧，已经给一线调试了，你去吃点饭吧。”你哪里有心思吃饭。你惊讶地对老李说了声“好的！太好了！”然后回到你的座位上迫不及待得打开代码开始运行。正如老李所说的，功能已经实现了。你轻舒一口气，拿出一碗泡面泡上，开始啃代码，心里想的是“这次一定要准备好，防止下次再出乱子。”啃着啃着，你有些不耐烦了，因为你发现代码越看越多，已经超出了你的大脑容量。你想了一下，决定先放在一边，查收一下邮件放松一下。邮箱里又是塞满了新员工培训的资料，各个部门的联谊活动通知，当然最多的是服务器发来的build report和test report。没什么有趣的事。你想了一下接下来要干嘛。算了，还是接着写新特性吧，测试们还等着你呢。但是你其实很忐忑，你的心早已飘去了前线，但是你知道你不能发邮件问状况，因为你领导可能几天没睡了，何况你也并没有什么特别紧急的事。你破天荒的把邮件客户端开着，留意每一个新收到的邮件。就在这样的忐忑中，一天过去了。反正也没什么事，你回家好好洗了个澡，定了个早早的闹铃，安心的睡觉了。第二天一大早你就跑去公司，果然邮箱里有了领导的邮件，上面写道“演示很成功，客户很满意，接下来是谈判阶段。家里的开发兄弟你们太棒了！”当然，你很高兴。但是又有一点失落。你不太明白为什么，于是你想了一下。随后你似乎明白了，虽然这是一个好消息，但是好像跟你又没什么关系，跟任何人似乎都没什么关系，好像是一件自然而然的事情一样，并没有“holy shit”超神的声音。过一会，你的大领导，项目总经理回复了你领导的邮件，说“干得好！同时也对家里的兄弟提出表扬！回来开庆功会！”你心里略有一些期待，“不错”，你想到，虽然主角不是你，但是你毕竟也是功臣。你为庆功会暗自准备了很久，你在网上浏览跟领导吃饭该说些什么，你想好了很多概括性的有内涵的问题来证明你对项目的理解，你也想多了解一些项目的大方向。几天之后，你领导回来了，大家开了庆功会。饭局上，大家聊聊家常，聊聊你领导在国外的见闻，大领导知道了你的名字，大家似乎很随意的打了一会牌，就这样平平淡淡的结束了。你略有一些失落。生活回归正常。但似乎又跟以前不那么一样。你在开发工作以外，有了新的任务，其中包括学习推广新技术等等。你开始跟你领导彻夜长谈。他与你分享他的经验，你与他分享你的见闻。你开始接触他的工作，比如提高团队能力，完善自动化测试，提高代码质量，提高代码性能，增强功能可配置性等等。你开始淡定的接受新的工作，而不再幻想一朝成名的瞬间。毕竟，迎接挑战才是你真正感兴趣的事。不过，这接下来的几个月里，除了改自己先前遗留下来的bug，你几乎没有提交任何代码。你每天的工作变成了看框架，读代码，看技术文档，学习试验新工具，浏览技术论坛等等。你开始觉得有一些缺乏成就感，也有点怀念绿绿的单元测试结果和噼里啪啦弹钢琴一般飞舞的手。有一天晚上，只有你和你的领导在加班。你的问题困在心里很久了，于是你问道，“老大，为什么我的任务跟别人的不太一样了？” 老大说，“那当然了，你是当作未来的技术主管来培养的。”突然的幸福让你不知所措，不过你克制地问道，“技术主管都是干什么的？” 老大并没有回答你，而是说，“以后你就知道了”。生活还在继续。跟你同一天入职的晓明是一个勤奋而又活泼开朗的人，但是你觉得他似乎入错了行。他总是挣扎着思考为什么他的代码中有逻辑错误。对你来说再简单直接不过的一段代码，他也很难读懂。领导也发现了这一点，所以安排他渐渐地向配置管理（CM）方向发展了。不过他似乎对这个很擅长，无论多么繁琐的任务，他总能按部就班的完成，各种纷杂的脚本他也一一了熟于胸，重要的是，他很有耐心，无论服务器出了什么奇葩问题，他都会跟它死磕到底。大家都很喜欢他，也很信赖他。有一天，晓明像往常一样抓住你向你请教问题。是个bug。你已经习惯了从代码检视开始。你自信地叫他给你看代码。然而你并没有发现什么问题。于是你问什么现象。他说部署到服务器上就报错了。你看了一下日志。你没想通。于是你再仔细重新检查了一下是否各个环节都作对了。是的，没有什么问题。好吧，你知道你遇到棘手的问题了。不过谁知道下一秒会不会就解决了呢？进公司这么久，各种奇葩问题对你来说早已是司空见惯。你打开搜索引擎，开始试图寻找相似的问题。你不断的做出假设，然后通过证据否定它们，然后再作出新假设……直到你突破了你的理智，你觉得可能是编译器出了问题。真的假的？你从来没有想过编译器会出问题，就好像你从来没有想过你的肝脏有一天会报错一样。你觉得应该是自己错了，于是你仔细排查了一下其他的可能性，不，没有别的问题。于是你把服务器上编译过的字节码通过问题虽然复杂，但是你只需要简单调整一下代码就可以绕过这一问题，于是你三下五除二把代码改好了，测试，嗯，哈哈，果然没有问题。晓明在旁边看得发愣，问你，“咋回事啊？” 你心里有一丝淡淡的骄傲，你兴奋地把他拉过来看你搜到的网页，你把代码反编译之后跟源代码对比，你给他讲依赖加载的实现……你兴奋得讲了一大堆，他静静地听完之后，眨了眨眼，说，“大神啊！”艹，他根本没听懂。你一下子泄了气。你也没什么可说的了，但也不知道该如何接茬，就谦虚道“没有没有，我不是大神”。虽然如此，他依然天天跟着你“大神”“大神”得叫你，虽然你知道他很菜，但是当个伪“大神”也不错。你有点沾沾自喜，想说给你的同学听，又觉得太 low。要不发个状态“我不做大神好多年”？想想太蠢，只好作罢。直到你发现还有好多人也被他称为“大神”。失落？有一点。你都习惯这种失落了。自从意气风发地毕业之后，你再也没有那种强烈的胜利的感觉。你觉得生活似乎并不是你之前那样的一元化。大家都有各自完全不同的特长、兴趣、知识和经验，你也有你的，你并不是万能的。即使在上学的时候你从来都是班级里的佼佼者，但是你渐渐的发现世界还很大，你不会的还很多，山外有山，人外有人，路漫漫其修远兮，吾将上下而求索……想到这，你的思绪突然中断了。你觉得自己实在是太优秀了，还懂得反思。你又开始了沾沾自喜，心想，自己如此优秀的人，总有一天会干出一番大事。于是你收拾收拾心情，继续工作。最近项目没有那么紧张了，你渐渐的多出了不少时间。你领导也是。所以他又推荐给你了几本书叫你看，都是一些设计的书，什么《领域驱动设计》、《企业应用架构模式》、《这些书写的真好，你感叹道。读着它们，你总是不自禁地想起你们的代码。你非常能理解书里描述的现象，你觉得你们的代码有着同样的问题。可是当书里介绍解决方案时，你却发现理解它们很困难。书里面的问题域跟你们的不太一样，你们有着不一样的需求和架构。书里说对于数据库的操作要做这样的一层封装，可是你们除了数据库还有web service；书里说对于UI和业务逻辑要做这样的隔离，可是你们的UI并没有直接调用后台，也是通过web service；书里面提到了好多技巧，你们并不需要……你看得很无聊，渐渐的失去了耐心。简单翻完了书的后半部分，你觉得你差不多明白书里面说的方法了。一种你踌躇满志地对你领导说，“我想对我们的代码 进 行 重 构 。”出乎你意料的是，你领导一点都没有惊讶，而是笑眯眯的问你，“呦，好啊，你打算怎么搞啊？” 你没有想过这个问题，愣了一下，说，“就按照怎么实施？什么叫怎么实施？改代码就是改代码咯，还怎么实施？你摆出了一个困惑的表情。领导笑的更开心了，“你还记得《重构》里说过的，重构代码要保证单元测试全通过吗？但是现在你要重新设计，单元测试肯定都没用了，要重新改。你来看这个。” 他掏出一本书，指着某一章的标题说，“如果要对代码进行大型重构，只好退而求其次，使用高覆盖率的你听的如痴如醉，如沐甘霖。你想起在学校里，如果你对代码不爽，你可以干脆删掉重写。你甚至都不需要一个版本控制工具。你从来没有想过在真正的工程中有这么多复杂的问题以及这么多聪明的前辈们发明了各种系统化的方法。你再一次发现了新大陆。讨论之后的结论是，你负责监督并提高自动化测试的覆盖率，同时你可以先构造新的模型代码，也可以提交，但是在发布时并不把它们包含进去。当新的代码写好之后先内部测试，确保几乎没有问题了，再策略性的发布出去。说干就干，你很兴奋。“终于可以写代码了！”你开心的对领导说。领导又笑了，“写代码并不是重点，重点是让它们正确的执行起来。” 你若有所思的点点头，心却早已飞到了你的新设计上。你打开了看过改过无数遍的最核心的业务代码，心里想象着它们被你改好之后的样子，完美的领域模型、但是细节之处有乾坤。你发现你第一行就不知道怎么改。是日志。你想了半天，没有想到任何现成的解决方案。你问自己，日志算不算业务逻辑呢？算吧，它又对框架有很多依赖；不算吧，那把它放哪呢？你对着日志的代码看了整整一个下午，仍然毫无头绪。你觉得日志简直是破坏你优雅代码的杀手，你真恨不得把它们给删了……算了，先不想了。你决定今天给自己放一天假，早早回家看个电影然后睡觉。刚推开门，哇！外面下雪了。漫天的雪花翩翩飞舞，一扫平日晚上萧条的景象。昏黄的路灯照射下，雪花反射出暖暖的光。你想起了你在北国的家乡。北方的小伙伴们都说江南的湿冷让人难以忍受，“屋里跟屋外一样冷”。你在此时此刻却有了另外的感悟，你觉得说成”屋外跟屋里一样暖和”也说得通。也许生活就是这样吧，你想到，并不总是得意，也并不总是失望。你的期待总是狡猾得伪装成另外的样子悄悄的进入到你的生活中，而你的得意又总是在指缝中流走，想握也握不住。但是不管怎么样，你觉得你很快乐，也很幸福。你很庆幸自己成为了程序员。你对现在的自己感觉到骄傲。意识到你已经在门口发呆了很久，你笑了，笑自己什么时候变的这么多愁善感。你走出门去，踩在雪上，发出咯吱咯吱的声音……<全文完><程序员的故事还没有完>/** 后记真的没有想到大家对这篇小文章（我都不知道能不能称为文章）这么喜欢，我本意只是想通过一些真实的细节来描述工作和学校的不同的，谁知道写着写着就成故事了:-D其实后面还有更多有意思的故事，不过已经扯得太远了，想听的话带上好酒来找我吧！至于你们所关心的老李，他是真的，但是他并不是故事经过了加工，亦真亦假，人物也不是完全还原，但是看到你们留言说很真实，我非常开心！最后，作为一个工科男，我决定总结一下：我暂时只能想到这么多，更多的就靠大家自己发掘啦。最后祝喜欢编程的大家都成为 */,"第一名答案给的是一个在学校里屌屌的学生，进去一家传统公司，然后看不上一切别人垃圾代码的视角。我带来一个，毕业眼界也挺高，觉得自己技术不错，然后面试被真正的大牛虐成狗，然后还跪舔进入公司继续被虐的，游戏公司，第一视角。给我一份爱，还你一夜情。第一视角，现在开始。10年进入大学，无限憧憬大学，然后就傻逼了整个大一上学期，大一下学期买了电脑接触了dota，两年刀塔路，步步皆辛苦。大三下学期开始意识到，毕业总得赚钱吃饭，现在的节奏感觉会要饭，然后就开始敲代码。一开始无任何头绪，找到某培训机构视频开始看，我学java，据说ssh搞完，出去就有6k以上，我无耻的硬了。不对，我傻傻的信了。现在想想，多单纯啊，6k就感觉吊炸天了。大四下学期，独自一人去了广州，学校同学还在学校里接受培训机构培训。我觉得教的都会了。就先出来了。2013年11月18号，到了广州。投了一圈，没反应。感觉人生挫败了。这时候，有时候不得不说可怜之人偶尔也有运气好的时候。在qq上碰到一个公司发招聘，我完全不抱希望的尝试下，居然给了面试机会。当天去面试信心满满，然而并没有什么卵用。老大直接从基础问到虚拟机，计算机原理，编译原理。当场直接跪了，我现在都还有心理阴影。整整差不多一个小时，我感觉像是一个世纪。印象比较深，老大问编译原理，我说我们没有开编译原理的课，事实是真的没有。老大原话，“你们他妈没有编译原理也敢叫软件工程专业！”，我完全无法接下去。最后老大问，你坚持最久的一件事是什么？大三一直都在跑步，我说，跑步，跑了一年多。老大说，那你感谢你的跑步吧。就这样我留了下来。得到了全公司最低的月薪，别问我怎么知道的，不可能有人比我更低就是了。忘说了，老大长发，那种中长发，飘逸的那种，第一眼真心就觉得大牛。至今无法忘记见老大的第一眼。好了，不能再说了，再说会有gay的即视感。留下来后，下周二入职，周一我去看了牙齿，做根管治疗。大学里面完全不知道游戏怎么做，游戏服务端是怎么做。一丝一毫的概念都没有。第一天几乎没啥事做，我自己配了下环境，上网看了看游戏相关的东西。还是完全都不了解游戏到底怎么做。我的座位靠着一个项目组老员工，我就看他和别人一句话过来一句话过去，然后看看代码什么的，后来才知道这叫连调。第二天，旁边的老员工问我是新来的么，然后让我去找xxx要学习视频，然后拿两本书，一本Java第二个人进来后，我和他两人开始做第一个测试项目。SVN管理系统。在这之前，我对SVN真心都不太熟，只是知道这东西。第一个版本，鸟哥说写个命令行版本的，就直接在命令行能交互就行，我当时虽然被虐的很惨，但还是比较有信心的。毕竟当时我看培训视频，还写过一个OA的项目，当时我觉得OA就很牛逼了。没办法，眼界太低。开始做了才知道，这东西真心没那么简单，SVN写过代码的都知道，版本控制，有库什么的，原生版本好像是没有权限的，然后我们就是要在外面加一层控制，并把权限管理加进去，用一个RBAC模型，总之全都没听过，总之做的艰难前行。忘了说，当时面试进来，HR的老大就强调过，说他们公司对新人的淘汰率很高，每做一个小项目，都会有代码review，会有几个老大一起看，如果说不过，给次机会回去改，改了还不能过，直接辞退走人。童话里真的都是骗人的，我之前从来没有过这样的心理准备。你们有待过这样的公司么，真的是直接走人，真真的！后来看到有人review完，会议室里出来，就收拾东西去办离职了。你们感受下。在高压下前行，完成了第一个版本。第一次review，我不知道女孩子第一次是啥感觉，反正我进会议室内心是期待而又忐忑的。过去从来没有人这么正式的看过我的代码，一行一行的看。真的是一行一行的看！功能是最基础的，但是鸟哥真的不怎么在乎那些功能，他觉得那是必然要做到的。功能验证演示也就几分钟的事，功能看完就是看代码。在会议室，用个笔记本，远程桌面连接到自己的电脑上，然后直接投影到会议里，直接在eclipse里面看，从入口开始，一个一个方法，一行一行代码，那天整个人内心真的是被骂崩溃的。对的，就是被骂崩溃的。看到别人进入公司都会碰到一个和蔼的老李，我这边真没有老李，只有严厉的不能再严厉的鸟哥。代码中各种错误被鸟哥一处一处指出，包括各种编码规范错误，并发控制考虑，该抽出可配置文件的地方抽出配置文件去配，不能硬编码在代码中。印象很深的是不处理异常，直接就打印出来了。“你他妈打印出来给谁看，以后都是跑在服务器上的，以后不要让我看到syso在代码中出现”，然后还特意全局搜了下syso这句打印代码的数量，然后鸟哥一头黑线，因为我所有有异常的地方都是打印出来。当时加上设计错误，代码错误，反正记起来得有十几条，我写在笔记本上的，笔记本现在依然躺在我电脑边上。我是个恋旧的人。经过第一次review，我和另外一个哥们总算是感受到什么叫代码review了。那哥们比我早一届，已经毕业，之前在一家公司做过，我问他这咋办，真的是被喷成狗了。他说实在不行就辞职了。我没说话。/**2015/10/5 2点更新**/经过第一次review，回去改第二版，基本知道了问题有哪些，虽然被打击的非常惨，但是还是有信心可以把这些代码改好的。当时其中一个主要大的问题，就是在做多任务处理时，对多线程的处理，以及多线程异常的处理。当时鸟哥说，上传功能有可能当时是因为网速或者其他因素没上传成功，但是可能稍微多尝试几次就能成功，所以出错后要加尝试处理。当时我是真的没经验，我就觉得尝试嘛，得嘞，那捕获到异常，我就循环，while（true）一直就尝试上传操作，直到上传成功才跳出这段代码。所以当我上次看到那个图，一个哥们写代码，失败之后再强制去试100次的代码的时候，我真的是笑尿的，因为我比他更屌，我是试无限次。当然最后这里也是被鸟哥喷的狗血淋头，鸟哥说，你真牛逼。你这是在代码里面写了个死循环啊。我真的当时脸都绿了，因为我知道在服务器代码上写个死循环是什么后果，真的是一背都是汗。哦，插一段，当时第一次还是第二次review的时候，鸟哥看完代码之后，发现太多问题，实在没法看下去了，说，“你们的代码真的让我感觉到恶心。”。不知道你们review的时候，听到这么一句是什么感觉，反正我是一辈子忘不掉了，和我同期那个同事也是，至今一起吃饭每次都会回忆这句。当时经过了，几次改版，从基本命令行，到后来用bootstrap做个web版本，前前后后鬼门关走了得有7,8次，特别是当时做web版本，鸟哥要求使用restful风格，又是一个新名词，restful，好好休息么？我承认我当时真的是渣1的战力。不过鸟哥讲解东西真的是一绝，就三两下，真的可以把restful是个什么东西让你有个清晰的了解。restful当时还好说，springmvc本来就支持restful，真正让我差点挂掉的是js。JS我真的是学了一万年都没学好的一个东西，当时我和那个同事两人还是有点美术追求的，不想就写个特别简陋的界面出来，感觉至少也得让人能下的去眼吧，虽然鸟哥当时没有要求这个。后来我们两就想用bootstrap，一直都挺火的一个前端框架，但是也是完全没接触过，然后我还是9流的js程序，功能没花我太多时间，反而是界面真的是让我整个人都疯了。很难整体上做出一个比较好的效果出来。最后听说公司后台用的就是===更了一段。待续。大家来点赞。要不好多人看不到。被压在下面。/**看了一眼，上一次更新时2015年10月5号，差两天正好一年，时间真的好快2016年10月3日更新*/感觉自己的记忆在一点点流失，趁着现在还能回忆起，我还是要坚持把我在那游戏公司的一年多写完。好不容易熬过SVN权限管理系统的痛苦黑暗的一段时期，差不多改了3个还是4个版本，从命令行一直写到WEB版本，方才罢休，总算是过了。不过忘记当时通过是什么感觉了，很后悔没有把但是最直接最真切的感受记录下，有可能这辈子都不会再有了。据之前已经通过试用期的同事小道消息，过了SVN权限管理系统之后就能真是接触游戏代码了，当时还是很兴奋的。马上要接触自己从没接触过的东西，好奇心所带来的兴奋感冲淡了那段难熬的痛苦时光。当时公司扩招的很厉害，办公位置不够，都是各种找位置挤，到最后没法挤了，就弄了个会议室，所有试用期的同学全部搬到了会议室改成的办公区。他们取名叫小黑屋。就是一个没有窗户的小会议室，挤一挤坐了7,8个人。后来我们也是在小黑屋里，结下了深厚的战友情，这是后话了。第二个测试项目开始涉及游戏，做一个黑市商店，也就是可以发布物品，然后玩家可以选择购买，然后扣费发放购买奖励什么的。但是听到需求的第一感觉是完全没概念的，没有任何整体的设计概念，知道像以前一样，定义个存储，设计一些接口啥的，对于实际游戏中的设计，或者说最佳实践完全木有概念。而且这次开始有了一个简单的公司框架给我们使用，我和我那个小伙伴简直如获至宝，感觉看公司的实际运行的东西是怎么写的，然而没想到木有源码，只是一个简单的架子，有些调用实例，底层的代码都是木有的。sigh.就这样做了第二个测试项目，过程快进了，和之前类似，都是被骂，修改，继续被骂，再修改。还好反正抱着必死的决心，也就坚持过来了。我那个一起吃甜筒的小伙伴中途还提过一次辞职，不过后来又被鸟哥两句话给安定下来了。我还记得那天鸟哥突然把我俩叫到会议室去，我一脸懵逼，然后就说我们就这么玻璃心，然后说我那小伙伴提了离职，问我怎么想的。我还一脸傻逼的笑着说，哈哈，我没有啊，还好诶。但是我的内心独白其实是，其实我也想过。经过了这个游戏项目，后面开始顺利很多，偶尔还会犯特别二的错误，但是已经可以整体理解真实游戏开发怎么做了。后面还继续做了两个测试项目，都是游戏中的真是模块，一个摇钱树，一个奴隶系统，我小伙伴抽到的是竞技场。反正就这么熬了下来。进到项目组之后，开始负责开发一些小玩法模块，修复一些产品提过来的BUG。老大已经不是鸟哥，换了实际游戏开发组的老大。不过要求没有一点点的减弱，每次上线的代码要review，会扣一些很细节的内存使用，数据结构使用，边界的处理从这个老大那里也是学到很多。对待代码的那种认真的态度，和对实际review中的错误代码敏感度，真是我到现在都很敬佩的。总是能在review中快速看出错误点，或者可能有疑问的地方，提出质疑。人真的是在高压环境下成长比较快，我很庆幸能一开始进入到这样的团队接受锻炼，提高自己的眼界。我一直觉得，代码眼界很重要，你要知道什么是好的代码。除了老大，组里的一些同事也都非常的执着认真，说实话，我真心感觉自己有时候就是个渣。当时坐我旁边的是一个成都的哥们，操着一口四川普通话，川普，你晓得的撒，真心是逗的飞起。不过他写代码做东西的速度也是快的飞起。而且看问题的角度经常能转换的非常快。近水楼台嘛，所以我的很多问题都是找他讨论的，总能找到一些新的思路。关键是！！！天天炒股还能不耽误工作！！代码照样写的飞起！！我也是没话说了。像我这种，只要想着什么事的时候，基本工作效率就为0了。还有个湖南的同事，工作经验比较丰富的，之前电信研究院做了4年还是5年，然后转行来做游戏。我们都叫他斌哥哥。我就记得当时印象最深的，我们在闲聊一个什么事情的时候，然后斌哥哥说他就是真心喜欢写代码的。从那以后这句话一直是我检验自己内心的标杆啊！不过页游最终是走下衰亡的趋势，是无法逆的。技术人再怎么努力，你也没法反抗市场的选择。页游市场被37几乎全部霸占，手游开始崛起，最终呆了一年多之后，我也是不得不选择离开。我的第一家游戏公司，又爱又恨的公司。到现在，我午睡的靠枕和毯子都还是这家公司发的。我说过，我是个恋旧的人。嘻嘻。好像写的越来越离题了，反正我其实也是在写给以后的自己看了。大家将就吧。",作为一个计算机相关专业毕业，毕业后一直从事编程相关工作10年多的大叔就这点上可以谈一些看法。我在面试很多计算机本科甚至硕士毕业生时，他们很难向你展现实际的项目经验和工作能力，因此你只能考验他们对某门编程语言的熟悉程度，也就只能是语法和算法。因此也不可避免的让他们做些算法题。说实话，我觉得这种方式很傻，有谁会在纸上写程序呢？但你会有更好的选拨方法吗？不夸张的说，一切学校学习的目的是为了通过考试。因此在学校学习编程无非是通过期末的考试。考试是在卷子上写程序，还是在机器上写程序并不重要，因为无论哪种考核方式，都和你将来是否成为一个合格的程序员没有什么卵关系，它仅仅就是纯粹的考试。但是，我想说编程的能力不在于你对这门计算机语言语法背诵以及几个算法的记忆。在实际工作中，更多在于你怎么组织你的代码。 语法是可以百度的，算法前人早已经给你写好了，你只需要知道怎么调用。但是新手和老手写出的程序是立马能闻出来的。有些人面试的时候很厉害，但到后面，你会发现他/她并不适合也不想成为一个程序员。因为真正的编程工作是如何理清一大堆代码，而不是在几个烧脑的算法上玩智力游戏。如果你刚入行接手的是一堆糟糕的代码，那么我只能遗憾的告诉你，你的程序员生涯有了一个糟糕的开始。第一次糟糕的体验会是影响一生的。所以我希望你一开始接手到的是一堆高人留下的代码，这对你的发展以及培养你对编程兴趣是起到至关重要的作用的。当然，如果你天赋好，你最好有能力选择好的代码堆，或者自立门户。毕竟自己挖坑总比填别人的坑要来得爽。我这里有点小小的人森经验要分享，就是你看一个人适不适合编程，就得看他是不是喜欢把事物整理得井井有条。在学校里你看他的床铺，看他的写字台，看他组织集体活动的能力，等等。不要以为程序猿都是胡子拉碴，脏里八稀的，那些都是电影小说杜撰的。就算有时候会出现这种情况，那也是为了短期的冲刺工作。程序猿就是艺术家，虽然很多人不这么看，就连很多程序员自己也并不这么认为。但实际上，程序员就是艺术家。语法和算法，还有程序组织能力，那些都只是基本功，就像画家的画功，都不需要提。厉害的程序员是要有对现实世界抽象的能力，是要用系统性的思维去理解世界，并有可能模仿上帝去创造自己世界的人。因此，你会看到许多高阶程序员写的书和文章都像哲学家写的一样。看一段糟糕的代码就如同你走进一间脏乱的房间，你会闻到不好的味道，你会看到东西被放在不该放的位置上。新手写的代码就如同一间不知道整理的小孩的房间：被子团在床上，玩具乱扔，墙上乱画.....你暂时是不会指望他能把整个家都收拾好的。因此，很多情况下我带新人更多的是会告诉他们代码应该写在哪里，而不是i++和++i的区别。实际的编程工作中，你做的事情往往是一个大系统中的一个组件。完成一个大系统的开发工作是一个团队的事情，因此你必须学会如何团队开发。而这点上和学校学习的编程是有本质区别的。学校的编程课教授的东西是点状的，它教你如何写出可以编译过去的一小段代码，它教你一些经典算法，但都没什么实际卵用。举个例子，比如排序算法，教科书上一大堆。有些同学硬是能将各种排序算法默写出来。然而他们永远不会想到关系型数据库是如何实现排序的，因此我一问他们如果内存装不下所有数据的情况下，怎么排序，就个个傻眼了。因为他们只知道在内存中排序数据，不知道多了硬盘后怎么处理；他们只知道这些点状的知识点对于一个不接触实际的学生来说是很难串起来的。团队开发是个很搞的课题，涉及组织理论。虽然很多人都能意识到这样一个事实：人多未必能办好事。但真正联系到实际，就是如何发挥一个团队的最高组织效率时，往往对自己的认识是估计不足的。很多想当然的事情是行不通的。编程工作是纯粹的脑力劳动，是很难量化的劳动。咨询公司乐此不疲的发明各种指标（如：代码行数）和各种团队编程模式（如：SCRUM），但也是基本没什么卵用的。永远记住程序员是艺术家，不要试图用管理指标来衡量艺术家的工作，这只能靠尽可能发挥程序员的主观能动性来提高效率和质量。最近，考古学家发现，埃及金字塔不可能是由奴隶建造的，而是由拥有绝对信仰的大量工匠完成的。每个工匠切割每块石头的时候，都倾注了他的心血和虔诚，这并不需要由监工去督促。这些由不同工匠独立完成的石头最终能拼接成如此巨大完美的,"百赞啦，又想到了一些，更新一波~ 文档：            学校：口口相传            工作：别人都用Markdown写文档，快把你的Word收起来……    delay：            学校：deadline之前搞定了就好，先休息半个月再说            工作：每天都要发项目日报，你的老板和你老板的老板都盯着呢……    联调：            学校：自己和自己联调，左右互搏……            工作：我：##￥￥%！……&*！！ 对方：没听懂……    需求：            学校：定期和老师汇报进度就行，需求一般不会发生变化            工作：时常会碰到来求助的运营MM    故障：            学校：就算真的遇到了，顶多挨顿骂            工作：这个季度的kpi又悬了……    上级：            学校：才不管你怎么实现的，也不会看你代码，能用就好            工作：不但会问你怎么实现的，也会review你代码，还会强行让你用一些新技术……    代码复用：            学校：复用全靠写函数            工作：就算跨项目也要强行复用……    造轮子：            学校：轮子是什么            工作：这个季度造个什么轮子吹比呢……    bugs：            学校：以空指针居多            工作：只有想不到，没有遇不到……    吐槽：            学校：好烦啊，做了这么多事情一点好处也没有            工作：运营又说改版了，之前的代码可是PHP的啊，确定这样也能改版？--------------------------------------------------------------------    项目：            学校：基于XXX的XXX系统的设计            工作：商家处罚中心    工作来源：            学校：老师或者是自己            工作：产品或者运营    工作内容：            学校：实现完整的项目            工作：实现完整项目是少数情况，大部分是新增功能需求    开发之前：            学校：打游戏看电影刷知乎拖延一下            工作：开会评审需求，分配工作    开发人数：            学校：前端后台产品设计全是自己            工作：前端2两人，后台3人，产品一人    代码：            学校：所有代码自己搞定            工作：只负责规则模块    规范：            学校：实现功能就好，代码写成什么样不重要，从来不写任何注释，代码之后自己刚写完的几天才能看得懂            工作：每一个模块都需要完成相应的单测，并且保证测试通过。代码需要简洁美观，变量、类等命名严格遵守驼峰命名法，需要附加完备的注释    框架：            学校：框架是什么，实现功能就行            工作：公司对各个功能（例如链接数据库等）进行了封装，必须要使用相应的框架    封装：            学校：为什么一定要面向对象，怎么简单粗暴怎么来            工作：进行一定的封装是必须的，要考虑代码的复用性，尽可能避免代码冗余。差的封装是会被吐槽的    debug：            学校：肉眼，偶尔使用工具，一碰到蛋疼一下午            工作：使用工具，流程化排查问题    疑难杂症：            学校：自己蛋疼摸索，直到放弃向研究生师兄请教            工作：蛋疼摸索一会，请教大牛    发布：            学校：随意发            工作：每次发布需要请示老板，你多发几次试试……    review：            学校：review是啥……            工作：发布之前必须review，被挑到刺打回去再正常不过    maven：            学校：maven是啥……            工作：每个模块的打包发布都有严格的流程，maven依赖必须要仔细，否则很容易遇到问题，有专门的工具对maven依赖进行检查    git：            学校：coder只有一个，用git干嘛……            工作：git的命令牢记于心，stash,merge,checkout花式命令，键盘敲起来    氛围：            学校：开发累了，打会游戏休息一下            工作：老板就在旁边，你打个游戏试试……    设计模式：            学校：闻所未闻            工作：原来这种方法这么机制，赶快学一下，以后说不定能用上先想到这么多，后面想到了再来更",我本科的专业是软件工程，大一的C++基础课学的还不错，后面数据结构与算法也学得挺认真的，数据库结构学的时候搞不清那么多范式有什么用，UML直接睡过去了，软件生命周期搞不懂是怎么回事，测试这门课老师都没怎么好好讲。所以上面几门课直到毕业也没觉得有什么用，感觉C++的基础好，数据结构和算法好，就是编程好了。到了工作中，才发现原来还有【需求】这种东西，不是课程作业那种胡搞瞎搞，差不多就行的了。而且做出来的程序不能只是自己演示正常就可以，要经受的住用户的各种胡搞瞎搞，被各种奇怪操作导致的BUG打回来，才知道什么叫程序的健壮性。接手了一份胡搞瞎搞的数据库之后，才知道范式说的是什么，师傅说我司数据库每天要备份六次，我问为什么不多备份几次，他说，因为每次备份需要四个小时...后来做了很多外包项目，才知道需求管理，或者说讨价还价其实也是个重要的编程技能。不是每个程序员都可以干干净净的只搞技术研究，做一个科学家。程序员应该是个工程师，工程师的话就要以实现为目标，很多时候，算法效率不是最重要的，有时候为了工程上的需要，还要牺牲程序效率换取工作流程上的效率或者框架的可维护性。,"小慕决定先说一下比较直观的不同：程序员A：在学校编程的时候，有着一头乌黑的秀发，现在发际线惨不忍睹；程序员B：在学校的时候没钱觉得配不上女神，现在有钱了觉得好像并不是钱的问题？程序员C：在学校起码能靠帮女同学修电脑和炫技装X，现在在公司连个可以装X的对象都没有；程序员PHP：在学校的时候我不知道谁才是最好的语言，在工作中我终于明白……言归正传，小慕认为在实际工作中的编程，跟在校期间相比，是在学校里编程，不外乎三种情况：一是课堂或课后作业；二是期末考试或毕业设计；三是课余时间参与维护的开源小项目。开发团队要么是学校社团成员，要么是同宿舍的几位室友，大多数情况下都是一个人同时身兼数职，承包了产品经理、开发工程师、测试工程师甚至还包括美工的所有工作。在学校里编程，只要根据老师布置下来的课题，实现主要功能，经简单测试可以运行就算及格。你可以各种花式炫技，也可以随便应付了事，因为在学校里编程最主要的目的是：在工作中的编程除了文首说的直观的不同当然还存在着许多深层次的不同，这些不同只有经历过的人才能明白。如果你正打算去做一名码农，小慕的总结会对你有一些作用的，具体有以下几点：在工作中，需要使用公司专门要求的工具来完成编程，同时还有可能需要用到多种工具，这就需要程序员对于工具的熟练运用呈现多样性；而在学校编程因为实现的业务功能单一，所以使用的工具也较为单一，基本都是主流的IDE，相对要容易得多。生动一点地说就是在学校里，你可能只用一个电饭锅就能解决一顿饱饭，而在工作中，你可能还需要烤箱、打火灶、汤锅、炖锅等等更多的工具来完成。在工作中，代码需要遵循一套严格的编写规范，因为在工作中的代码不是属于某一个人的，它是需要大家共同维护的。阿里巴巴的开发团队就有专门的开发手册，每行代码都需要经过至少一次其他人的Code Review，因此，遵守命名规范利人利己。在学校里写的代码可能没几个人会看，命名可以随意起int a、int b等等，最后只要实现功能就好，并且过后很少会被再拿出来看。而在工作中，从来不写注释或者简单注释几句的代码，一段时间之后可能自己都看不懂了，这种情况是不被允许的，因为这些代码可能会被持续使用很长的时间，需要不断地维护和更新。从某种程度上说，在工作中，相比开发的时间，写单元测试和接口测试的时间只多不少。一行代码可能需要好几行代码、好几个用例来测试，通常需要使用工具，按照规范的流程来进行调试。并且，在工作中，测试是重于开发的。就像生产一个玩具小汽车，设计出来，还要测试它能不能跑，跑得快不快，遇到撞击会怎样等等，在工作中的程序在投入使用前同样也是经历了无数次的测试，才最终与用户见面的。而在学校，大多数情况是这样的：代码写完运行一下、肉眼看一下，偶尔会使用工具，碰到bug可能会蛋疼一下午。（举个栗子：项目上线发布后有个模块挂了）在工作中，解决同一个问题，能够用更少的代码的人水平更高，你写的每一行代码都必须保证是精华。因为在工作中代码写完并不代表结束，后期可能还要持续维护，就算你离开了，也要保证接手的人能读懂，所以写的代码贵在精而不在多。在学校里编程，可能写的代码越多，会感觉自己越牛逼。有时候一天能撸上千行代码，感觉自己太牛X了，然而这在工作中并没有什么卵用。在工作中，你负责的往往会是一个大工程中的一个模块。完成一个大工程的开发工作是一个团队的事情，因此你必须学会团队合作，也就是说你的代码要让更多的人看懂，也能让更多的人拿来即用。在学校，教的都是一些经典算法，解决些通用的问题，但是当面临实际的问题时，这些往往没有卵用。举个例子，比如排序算法，课本上有很多，有些同学甚至能将各种排序算法都默写出来。可他们永远不明白关系型数据库是如何实现排序的，因此当你问他们如果内存装不下所有数据该怎么排序时，他们只能一脸懵逼地望着你。在工作中，可能一行代码面对的用户会达到上千万甚至上亿，所以就要求开发者在开发的时候要把很多可能会出现的问题考虑进去。也就是说如果你编写的是一个把猪肉放进去可以做成火腿的程序，你还要考虑到如果有人放进去的是一袋面粉，程序是否能够完成对它的加工。以12306为例，在使用阿里的云计算平台之前，每年到春运的时候网站几乎都会因为访问量过大而瘫痪，铁道部受到铺天盖地的吐槽，这可能就是当时开发者没有考虑到或者是没有解决的问题。后来，随着阿里的云计算平台的支持，很好的解决了访问量过大的问题，还提升了网站的性能，极大的提高了网站的承载量及用户体验，口诛笔伐明显平息了很多。而在学校里，我们写的代码充其量只是个小玩具，用户量一只手数得清，甚至在变成玩具之前就已经夭折了。在学校里如果你想实现苹果去皮的功能，只考虑这一个功能就好，很少需要再去考虑如果是一个橙子，该怎么办。在工作中，你的时间会被分配到多个环节，包括了解精准的业务目标，预研需要用到的技术手段、如何选型、详细设计、编码实现、配合测试、上线及上线后的维护等等。每一步都都要评审，降低返工风险，具体到每一个项目时遇到的问题可能会更多，比如怎么测试，怎么部署，怎么更新，怎么监控和保证健壮性、效率以及规模。用户量多了怎么办，被攻击了怎么办，你依赖的东西挂了怎么办，你部署的环境变了怎么办。更深层的考虑是不是要开源？这个东西能维持几年？有啥竞争性的产品？他们都怎么样？下一步该做啥？等等等等……会多出来好多事情。所以工作中，coding所分配到的时间可能只是你的工作时间很少的一部分。在学校里，所谓的编程更多的时间就真的只是coding,或者是通过算法解题，一个小的算法解决一个问题等等。这跟实际工作中的强度和时间分配相比，有很大差别。在工作中，代码要考虑可用性、易用性、安全性、健壮性等因素。假如你身处金融机构，哪怕一行代码出错，都有可能导致上百万、上千万甚至更多的资金损失。所以，对于你所撸的代码一定要常怀一颗敬畏之心，要经得起考量，质量比数量更为重要。“而在学校里，只需要考虑指定的功能是否得以实现即可，即使存在问题也只是重新修改，或者请老师给予指正，不会带来实质性的影响，因此在Coding的时候也不需要非常的谨小慎微。在工作中，作为程序员的你，编程是你安身立命、养家糊口的基础，也是在职场彰显个人才华的根本，对于整个职业生涯的发展发挥着至关重要的作用。如果在IT公司或者互联网公司任职，技术太水的话是过不下去的，轻则拿不到理想的收入，重则与心仪的公司无缘。很多人都知道程序员的收入比其他工种普遍偏高，其实他们的投入成本也极大，可能每周工作996或者997。好在收入与所付出的努力能够成正比。在学校里，完成作品带来的可能仅仅是精神上的愉悦，或者是得到老师的褒奖及奖励，与工作中的直接收益结构是完全不同的。也就是说：但是，程序员的辛苦也是众所周知的。所以，在回答的最后，请各位IT、互联网公司的产品经理大大，或者说，如果你身边有“程序猿”朋友，请千万记得一定要对他好一点，没事帮他捏捏肩捶捶背，没事多请他吃吃饭，多帮他买买单，编程的压力已经很大了，请理解他，帮助他，毕竟猿生已经如此的艰难，真要把天天加班又没有对象的他们惹急了，后果会是……还有如果你是程序员的女朋友，想为程序员男朋友做点什么，那么请参考知乎用户 @韩食 的回答：“我是一位程序员的女朋友。和他见面的时间不是很多，但是也不会有生疏感。他有时工作到很晚，压力也比较大，我尽量就是在他专注的时候不打扰，在他运行完一段程序后给他递上一杯热饮。没有工作的时候，我和他一起出去玩，去山林中休憩和在城市中探险。他之前也是一个焦虑的人，他现在是一个很开朗快乐的人。他生日的时候，我送了他一把机械键盘，本来我对这些外设也是一窍不通，也是慢慢查资料了解哪些更适合。把护眼灯调柔和一点，在座椅上摆上舒适和坐垫。我们一起的时候很快乐，真诚，信任。他抱着我睡觉的时候，我能感觉到他的疲惫，他的呼吸声也是我的安眠曲。 然而，以上都是我编的。我是那个程序员，我没有女朋友（笑  ”最后送大家一段程序员专用霸气代码注释：代码永无bug！！！1. //                            _ooOoo_   2. //                           o8888888o   3. //                           88"" . ""88   4. //                           (| -_- |)   5. //                            O\ = /O   6. //                        ____/`---'\____   7. //                      .   ' \\| |// `.   8. //                       / \\||| : |||// \   9. //                     / _||||| -:- |||||- \   10. //                       | | \\\ - /// | |   11. //                     | \_| ''\---/'' | |   12. //                      \ .-\__ `-` ___/-. /   13. //                   ___`. .' /--.--\ `. . __   14. //                ."""" '< `.___\_<|>_/___.' >'"""".   15. //               | | : `- \`.;`\ _ /`;.`/ - ` : | |   16. //                 \ \ `-. \_ __\ /__ _/ .-` / /   17. //         ======`-.____`-.___\_____/___.-`____.-'======   18. //                            `=---='   19. //   20. //         .............................................   21. //                  佛祖保佑 永无BUG  22. //          佛曰:   23. //                  写字楼里写字间，写字间里程序员；  24. //                  程序人员写程序，又拿程序换酒钱。  25. //                  酒醒只在网上坐，酒醉还来网下眠；  26. //                  酒醉酒醒日复日，网上网下年复年。  27. //                  但愿老死电脑间，不愿鞠躬老板前；  28. //                  奔驰宝马贵者趣，公交自行程序员。  29. //                  别人笑我忒疯癫，我笑自己命太贱；  30. //                  不见满街漂亮妹，哪个归得程序员？  以上。",刚工作了三个月，简单谈一下我的感受。先说重点：最大的不同是质量是个很广的概念，涵盖方方面面。在学校写的代码，除了你自己可能没有第二个人看，可以不写注释，命名随意起，int i、int a；在公司，代码需要遵循一套严格的规范，这样做利人利己。每行代码需要经过至少一次其他人的Code Review，我在学校自认为代码比较规范，结果到这里经常被师傅提很多Tala（修改建议）。在学校，代码写完运行起来跑一下、随便点一下就行了；在公司，相比较开发的时间，写单元测试和接口测试的时间只多不少，一行代码需要好几行代码、好几个用例来测试。我认为没有经过测试的代码等于没写。在学校，写的代码充其量只是个小玩具，用户量一只手数得清，甚至再变成玩具之前就已经夭折了；在公司，每一行代码要面对的用户上千万、甚至上亿，性能以及随之带来的并发问题不得不考虑。这就好比在公园盖一个厕所，装修华丽，环境很好，但是坑位只有五个，结果节假日几百号人同时上厕所，那场面自行脑补。在学校写的代码，出错了最多被老师批一顿，改一下就完事了；在公司，尤其是我所在的支付宝，一行代码出错可能会带来几十万、几百万甚至更严重的资金损失，这种坑把我卖了都填不上。借用一位前辈的话：对你的每一行代码保持一颗敬畏之心。最后回答题主另外一个问题：每天啪啪啪手敲成千上万行代码——我还没听说过每天啪啪啪就能敲成千上万行代码的人，不啪啪啪也敲不了这么多。暂时想到的就这么多，后续有机会再补充。,刚开始工作的时候，还是个愣头青。那个时候最优秀的品质就是 速度。一天三千行代码啊………简直文思如尿崩。然后 一周之后 自己写的什么 回看起来就困难。好像是 乱扯的毛线团，虽然能用看着心烦。bug时不时的出来 撩拨你的神经。大概过了两三年 经过几个项目之后，每天有个三百行 真是了不起了！不同是 写的少，错的少。功效倒是差不多。写的少 想的多了。代码结构从 过程化 到 对象化 到函数化了。建模从 点线面到立体 到 流，从描绘系统 变成了 描绘 用户体验流。基本上经历了一个过程比较语言哪个好，系统哪个好到方法哪个好，思路哪个好到代码范式，规范，美观，编程技巧再到怎么样 最短时间 最低成本达到可用性要求，快速推进项目，不废话 不啰嗦。到最后其实都是工具而已，脱离了情景环境单论好坏都是耍无赖。代码外围的工作做的越来越多了，颈椎间盘突出越来越严重了。稍有不注意休息 就会有肢端麻痹和疼痛。工作后很难和小伙伴打一局dota了，学校里 很难有认真严肃的项目。诸位 注意保护颈椎，坐卧行 都是关键。,真实的工作中，一个合格的程序员并不是把所有时间都用来写代码。而是在脑袋里、电脑上，通过各种方式先把程序的结构、逻辑等等先想明白了，才开始动手写。一个好的程序员不是产出代码量多，而是产出代码质量高。牛逼的程序员一天写十行代码，可能比我一个礼拜写1000行代码还有用。,工作中的编程和学校里最大的不同在于：有人说这是软件开发，并不是编程啊。对这就是工作编程和学校编程的差异，工作编程不仅仅考虑代码，代码是为系统服务的，而系统中千丝万缕的结构都与编程息息相关。比如作为程序员，你需要搞定设计文档、流程图、伪代码、接口、测试用例，冒烟回归测试等等，以及与产品经理、UI工程师、测试工程师、数据工程师等进行配合所以你会注意到工作里的开发不仅仅是单纯地编程，它更像是修建一栋大楼，从规划、设计、审核、施工、装潢、再审核、交付等等，需要把设想中的建筑变成现实。而学校里的编程更像是设计图纸搭局部模型，今天做个浴室、明天做个厕所，而且用料标准也不固定，没法形成建筑。因为我是做数据分析的。拿数据平台开发来说，一方面有任务流程、数仓设计、命名设计、调度管理等事项，另一方面SQL开发也有很多规范。从需求调研规划、规范定义、模型设计、自动化开发，到测试验证、数据资产管理等都需要注意。对于SQL开发，不是传统认知的写代码run成功了事。它有编码规范、注释规范、DQL规范、DDL规范、运算符规范、表别名命名规范、调度配置规范、数据同步规范、std清洗规范、分区规范、这是在企业数据开发中需要严格遵守的，可能在学校里写个SQL并不会考虑这么多。学校里编程基本都是书本上或者老师教的步骤，一二三四实现了就可以，很难用到实际开发里。现在各大互联网公司都有自己的代码规范和code review，比如腾讯、谷歌。腾讯员工发过一篇code review，简单列几个：谷歌开源项目风格指南，对各种语言大型开源项目都给出了代码规范：拿Python来说，它分别对风格规范和语言规范做了详细说明。对于Python异常处理，有如下建议，异常必须遵守特定条件:其他具体请看：对Python而言是这样，其他语言有更多的规范，这个需要大家平时多练习、多思考。比如说多逛github、牛客网、leetcode等，持续保持对代码的敏感度。综上，学校是学习编程基础建立认知的地方，很难把所学用到工程开发里。而工作是教会你怎么用编程创造有价值的产品，这其中有太多东西需要你去学习、运用、深化。,入行愉快。首先，一言以蔽之，用两个字来概括，就是“残酷”，但是，好在是加引号的。让我慢慢说来——下面这些都是看起来“残酷”的事实，有的不但残酷，还很无奈；有的则是在残酷的同时，还很有趣。搞工程和学校里的象牙塔大不相同，这也许老早就知道，但是绝对不是七八年前我想象的模样。你可以把它当成我没睡醒的呓语，也可以当成我喝多的胡话，或者是心情太差的时候写的吐槽檄文。反正，它们就在那里，事实就在那里。总的来说，学校里面编程，或者在工作之余编程，是很有趣的，没有manager给你各种压力，也没有各种大神（比如TMP、PM、SE等等我都搞不清楚干嘛的职位）给你指点江山，你可以自己爱咋弄咋弄。当然，没有了这些“残酷”的痛苦，你没法进化，没法超脱，没法升华。就从一毕业开始的荒唐的面试说起吧。国内的公司问的更杂一些，知识性的问题也问，有时我反而觉得更务实。而外企则很喜欢考察“能力”，我加引号是因为他们觉得他们在考察能力，实际却不见得。因为他们只是在考察80%的算法+数据结构，以及一点点系统设计，一点点扯淡能力，再顺道看看颜值如何啊，八字合不合啊，星座属相啥的而已。因此，这其中前80%东西都是可以准备的。而应试，恰恰是中国人最擅长的东西。我记得有朋友在我的blog里面回复道，特别鄙视刷算法题和面算法题这样的做法。我想，我可以和你“同鄙视”的，但可惜我没有那么崇高，而且他应该是没有很多去大的外企公司面试的经历，否则，应该去一边骂这个该死的面试方式，一边自己偷偷刷题去了。还有人说，FLAG又如何，某ACM拿奖的，某算法特别好的，某题刷特多的，但是工作却不出活儿啊。嘿，这样的人，我还真见过，也听人说过，但问题是，人家，钱，拿，得，多，啊？人家不爽了就可以跳槽啊？人家一跳就是不错的薪水啊？既然聊到算法，那就继续下去。好吧，残酷的事实是，绝大多数软件工程师的日常工作，和算法的关系其实并不大。当然，和data analyst这样的职位比我们还是好很多，那个职位简直就是仅次于工作有多有趣？这是个好问题。其实，每当我们从一家公司跳到另一家公司的时候，也总会有这样那样的幻想，会对下一个让自己发挥的“舞台”有所憧憬。但是很多时候，我们面对的问题，都是“知识谜题”。说白了，就是那些“不知道的打死也不知道，知道的困难解决毫无难度”的问题。来来来，这样归纳一下，假设一个工程师每天的工作时间是100%的话，20%可能要吃饭喝水打望上厕所刷推刷微博吹牛逼闲聊，30%的时间要开各种傻里吧唧的会（这个估计够保守了吧），剩下50%的时间想干正事儿了，发现大部分都在干各种operation的工作，说白的就是编译构建部署安装搭环境改配置打补丁，余下总数的10%才是真正研究问题写代码的时间，发现各种乱七八糟奇形怪状的问题，各种在学习新技术的时候，看着那些玩具代码和hello world的时候，根本不可能想到的狗血问题全部冒出来了。就改了一行代码，居然这东西就不work了？就加了一个小小的feature，整个系统居然就挂掉了？于是，从外往里连蒙带猜，连分析带搜索，连Google带StackOverflow地试错，重要在某个人生中重要的时间点发现，又是一个知识谜题，又犯了一个二了吧唧的错。搞完这些东西，终于把自己写的那一点点小代码，像橡皮膏一样贴到项目组负责的这个庞然大物上了，嗯，it’s working it’s perfect。别急，哪那么容易让你到达成功的彼岸？代码修改了要反复测试啊，测试的时候要考虑各种情形，调用一个API的时候说要接收一只老鼠作为参数，必须要考虑如果对方传过来一头大象怎么办。搞完这些东西，才可以去尝试code review这个苦难重重的关卡。发出去以后，等啊等，等啊等，居然没人review啊，那好吧我去催，挨个催。结果，幸福来得太突然，十行代码，二十条review comments，一度让自己对自己的人生观和价值观产生了怀疑。但是，仔细看了之后，发现其中19条是关于各种缩进符号命名大小写注释空格的，只有1条是具有实际的建设性意见的，终于松了口气，又是一轮改+催的流程……更可恶的是，当你折腾完这些乱七八糟的东西以后，心里居然没有啥成就感，就那么点破事儿，居然整那么半天？于是你在第二天的sync up meeting上说，俺昨天做了xxx，yyy，发了个别高兴得太早，到了线上，还会有更多历练人生的有趣事情等着你。比如项目发布，比如on call（改线上问题）。有的问题紧急啊，就意味着你要拿着一个传呼机一样落伍的几千年前才用的东西睡觉。它也许早上响，也许晚上响，也许深夜你做美梦的时候响。总之，当它响了，你就得爬起来立即处理，看看是不是service又挂了？是不是你天天整的那个破玩意儿又不能访问了？还是哪个用户欠抽搞了个来回折腾若干次以后，环境终于搞定了，code review终于审过了，代码终于push了，集成测试终于跑过了，部署到线上终于没问题了……但是，淋漓畅快的成就感呢？在崇高和伟大之间对神一样的设计反复的斟酌呢？对代码像艺术品一样的华丽丽的无止境的追求呢？以上，来自我的blog：,1.要学会在没有文档的情况下快速掌握一个轮子，这个轮子可能是某个大神的呕心沥血之作，也有可能是一堆傻逼拍脑门子想出来的东西。2.要学会心平气和的改别人的bug，艹你@&%*&*&***&这种话要藏在心里。3.规范！规范！规范！接口也好，命名也好，code style也好，甚至是log，都请按照规范来。4.如果不是大神，多听多看多想少BB，别以为还是开什么学习小组讨论会呢，不说话没人当你是哑巴，多说一句话就多暴露自己是一个菜B。实在要开口问问题，请先确保自己想过三遍，百度谷歌必应各一遍。5.总结一下，热爱编程是一回事，正式工作的时候，请拿出应有的职业道德和职业素养。,看了一圈，貌似全是用语言敲代码的码农们在回答。我来说说数控编程吧。数控编程是个什么样的概念？用通俗的语言来说就是用各种软件或者手工给一个需要数控机床加工的工件编写刀路。常见的编程软件有MASTERCAM，CIMATRON，Pro/E ，UG等。上述软件在算法和后处理方面各有特点和优势。初学者一般是根据自己最先接触的一个来进行编程。我编程5年，从塑胶模，五金模，冲压模，汽车覆盖模还有各种零件产品和工装、检夹具都编。主要用的软件是UG。从4.0-10.0都用，带过的徒弟也不少，说实话。我不怕那种没有底子来工厂的学徒，相反我很怕那些从学校出来的学生。因为学校教的那一套往往在实际的操作中根本行不通。一个产品给你。首先你得想到这东西加工工艺怎么排，先铣哪后铣哪？先镗孔还是先铣型腔？图纸上没有公差的位置精度如何把控？这些都是从大量的实践中才能累积下来的经验。下面我会拿一个比较简单的辅助工装来举例。学校怎么教？我们怎么编？通过CAD，我们可以看出这个工件的尺寸，公差，材料等一系列我们需要的信息。下一步是根据这个2D图在3D软件中画出3D图。得出以下的产品。通过2D画出3D实体，这个也是基本功之一。可以看出我并没画出4颗螺丝孔的考虑到残料，刀路，和刀具的各方面因素之后得出加工工艺的顺序是先紫色铣型腔。再铣蓝色避空位，最后加工粉色凹槽。如果在学校，老师可能直接会教你一把刀开完。然而，在实际操作中，这是不可行的，原因是刀具磨损和加工时间太长，工艺不合理。建好每一步需要实体图，放入不同的的图层，开始加工第一步。第一步：先开粗。要想刀路顺，刀路优化最好，先得改图。上图可以看出我将影响刀路的所有参数移除，只剩下我这步需要加工的6个型腔。考虑到不锈钢残料特质，我选择分出两个程序。各加工三个，这样能避免一次切削会造成的刀具磨损或者断刀。由于我们公司的钨钢铣刀最大只有D10的。所有没得选。用D10的平铣刀把6个型腔开粗。侧面余量为0.2mm，底部0.1mm第二步：加工凹槽，这个很简单，移除所有参数。只留下3条凹槽，随便用个开粗或者走线的程序加工，侧面余量为0.2mm，底部0.1mm第三部：加工避空位，先用抽取工具抽取出边缘线。这样加工的好处在于，2D刀路相对比3D刀路更好优化，刀路更顺。先用2D走线编写出其中一个或者两个，由于此工件是的加工坐标在中心，而且所有参数都是对称和镜像关系，所以剩下的避空位全部可以用点复制和程序镜像来完成，编1个得12个，省时省力。侧面余量为0.1mm，底部0.1mm。如果不能灵活变通用开粗或者等高的加工思路去加工，那会非常的耗费时间。开完粗，开始中铣或者精铣，是否需要中铣取决于产品要求。我这个要求不高，所有直接精铣。直接精铣，用2D走线选择打开的曲线。或者用开粗时抽取的闭合曲线都行，直接一刀过。余量为0。一样的。最后，点上中心钻，方便钳工打孔，齐活儿！！设置后切削参数后通过UG自带的模拟功能跑一次，如果没有问题，没有问题是指刀路没有干涉，没有过切等等。确认无误后进行后处理之后把编写好的程序发给操作工。程式单上注明家工坐标，单边还是分中，刀具规格，注意事项等。数控编程讲究的并不是你能把程序编出来，它最难的地方在于你需要编写出最优化的程序。很多复杂的东西要考虑的远比这个负责得多。老师可能会教你怎么编写程序，但是他教不了你经验，一整套塑胶模具扔给你，你要知道该从哪里下手。如何下刀，如何抬刀，在什么时候该用哪种命令？遇到破面怎么办？每种材料的加工特性是什么？电极该怎么拆？火花位该怎么留？还有考虑避免伤到水路孔，分型面，胶位。斜顶，滑块这些该注意什么？编程其实是一项很系统的工程。你需要的不止是会编写程序，还需要知道很多很多的知识。这就会促使我们更加努力的去学习跟数控有关的一切知识。学校的理论知识是远远不能达到的。前段时间公司招了个刚刚从学校出来的编程师傅，结果看他编出的一个小电极我就知道这孩子还是太嫩。编一个模仁上的镜像直角，还是没有异形的那种居然编了4个，粗精各两个。我给他说你这个直接一个解决，他很无解的看着我。我告诉他，首先这个地方加工中心是可以用铣刀加工到位的，只是会留下铣刀的R角。所以不需要粗公，只需要拆出一个电极然后镜像一个出来，合二为一放在同一个基准上面左右各打一次就行。这么点东西你拆除4个？老板不杀了你？这个例子也可以看出来，理论和实践真的相差很多。最后，放点鸡汤，各位在机械行业的大坑里继续挣扎的朋友们，不要放弃希望。我们才是这个国家的基石！！哈哈哈哈哈哈哈哈哈啊哈哈。。,学校里，程序哪怕错了一百次，只要跑对一次，也算是及格了，也就是过了。工作中，你跑对一百次是应该的，只要错一次，就是错了，就过不去。,以前老是幻想自己造轮子，造的多美多棒，上班之后慢慢的把技能点全加在快速学习别人轮子的使用方法上了，实在找不到现成的才会自己造。以前觉得代码才是王道，文档算个屁，现在觉得没有文档的代码算个屁，谁不写文档干死谁。以前觉得码农主要工作是写代码，现在才知道主要工作是debug，包括自己和别人的bug以前觉得程序要写的完美无缺才行，各种纠结怎么做，现在是在最短时间内拿个demo给甲方，demo多简陋都行，先看自己和甲方对需求的理解是否一致。以前追求装B，现在追求简单高效以前是输出错误到屏幕，现在是输出到日志以前觉得注释是天经地义，后来看到个注释就欢天喜地,看图，骚年悟到了么,最大的不同就是，学校里写的代码都是用完就扔，所以完全不管可维护性（这不是个好习惯）。公司里写出来的代码大部分情况就要你一直维护它到离职了，写的时候就不可能不管可维护性了。至于代码量，我在学校的时候经常一天上千行C艹，公司里我一天也就300行C艹左右。,学生正式走入社会进入工作岗位和在学校里还是有不少差别的，当然也不是说学校里学到的东西就没有用了，学校里学到的知识是帮助你巩固基础能更快的适应进入工作岗位上会发生的各种变量。在大学里码的代码，往往只有你一人完成就可以了，可以说是一人吃饱全家不愁啦！所以版本管理的需求没有那么大。但是进入公司工作后，趋于多人协作，代码管理变得重要了很多。熟练运用 git，p4 等版本管理软件进行编程。版本管理的目标主要是为了使代码的开发流程更加清晰，当然，好的版本控制并不仅仅在于让代码更清晰。对于团队开发来讲，可以有效控制分工和权限。并且在协作的时候提供解决冲突的方法。在学校写的代码除了提交后老师批改以外，往往不用其他人阅读，但是在公司写的代码往往需要经受大规模的 review，你需要让阅读你代码的人迅速了解你代码的意义。大驼峰、注释：注释主要集中在变量的用途和函数的用途上，注释言简意赅，让阅读者一眼扫过就知道这个函数的用处。将代码按照功能抽到多个 scripts 中，不要聚集在一个 scripts 里。每一个 script 不要要超过 1000行最好。上述两点的话，很多在校学生其实也会掌握对应技巧，在进行协作的时候往往也会接触到相关的需求。但长期维护和充分测试亮点往往就是实打实的需要在工作中学会了。在学校的作业往往是有一个目标，实现对应的目标即可，其次提交作业时往往不会进行充分测试。在工作开发的时候，无论是自己设计单元测试亦或是黑箱测试，都要进行充分的测试。而且在之后迭代的时候往往需要针对一个线上版本进行短平快的开发，这是在学校完全没有过的体验。往往不允许你对项目进行重构，同时在开发时也要兼顾之前的内容。以及需要有快速的修复 bug 的能力，这种能力其实更多的依赖于你的代码，是否规范，有没有养成良好的习惯。这里推荐力扣君另一篇回答，在日常的编程学习中注意培养良好的习惯会让将来踏入工作的你受益非浅。 学生时期是一个成长的阶段，你可以自由选择喜欢和谁在一起，不喜欢和谁在一起。而在工作中应减少个人情绪，融入整个团队，为了同一个目标而奋斗。比如程序员与产品经理的沟通问题，力扣君作为一名程序员也曾体会过产品经理天马行空的需求，在处理这些问题时，力扣君总是告诫自己：避免冲突，增加沟通，共同解决。初出茅庐的程序员有时会走向一个极端：将技术提升作为自己的最重要的目标，不愿意接收产品经理提出的没有技术含量的工作，或是不愿意破坏自己的现有代码结构去实现产品经理的奇怪需求等等。事实上，无论是程序员还是产品经理，我们都是给老板打工，为用户服务的。技术提升是自己的事，在工作中，产品体验才是我们最重要的目标。有时可以让你写一个超体现能力的算法或数据结构，但也无可避免的需要你写一下简单的静态页面实现数据检测。要知道，工作上安排的事情都属于业务需要，我们应当在工作时间减少自我意识。学生时期，遇到不会的题目，总有学霸同学帮我们解决，或可以向师长请教。而工作中，交到自己手上的工作，解决的人只有自己。业内有句话说：老板招你进来不是希望你告诉他这个想法有多么难，而是希望你帮助他实践这个想法。好的程序员在学校，老师都会鼓励同学们创新，不断使用新技术、新知识提升自己，而在工作中却不能完全这样。不少职场新人都有一点标新立异，比较直接的体现在过度炫技，不爱用老技术，喜欢在工程中大量使用新技术，即使这门技术自己尚未完全掌握。诚然，我们不能否定创新的价值，然而将自己尚未了解透彻的技术用在实际项目中是可怕的。工作多年的职场老手就明白，不要做第一个吃螃蟹的人，在公司项目中引进任何一项新技术都需要考虑再三。多数情况下，第一个吃螃蟹的人是踩着坑前进。在个人成长时，不断踩坑是好事，毕竟“失败乃成功之母”。而认真看完力扣君所说的，你是不是也总结出来了，只要在大学时候拥有良好代码习惯，迭代周期优秀的人在工作时也能较快适应对应的变化。而大学时期的很多学习习惯是为了迎合老师和考试未必会在实际工作中被青睐，真正踏入工作岗位就应该随机应变，把公司的业务和目标放在首位。,"打坐，修炼熟悉公司标准的桌面工具熟悉版本管理系统及操作熟悉业务基本逻辑，文档和业务书籍清单好长。不是所有的公司都是纯软件公司。就算是纯软件公司，商业逻辑你之前也基本没见过。一般这种文档要看3个月起步。在大公司？再加三个月都不止，越看越多。一边看业务书，一边开始看代码，shit，这是多么古老的代码和语言！为啥都是java和C语言，卧槽还有汇编？卧槽这个语言是啥没见过，试着编译一下，卧槽这是个什么破编译器？编译器要用命令行调用，那些编译选项都是啥？工程文件里面的参数分别都是啥？你带着代码语言和编译器问题愤愤不平地去找开发老大，老大翻了个白眼给你: 这系统20年了，这项目我们做了10年了。不服？啃完那边那堆带着卷边的语言书和编译器说明书去！你一边啃着这些破烂古董书，一边继续看代码。卧槽这个调用接口是啥？书里面没有！卧槽卧槽卧槽，类似的接口好多，调用得还好频繁！你满怀疑惑地找老大，老大说:哦，不好意思忘记给你内部接口手册了，服务器上有，注意有18个版本，你这个team用的是其中第6个版本的。 顺便设计文档也在上面，一起看看吧。你上文件服务器一看，晕了，这个版本的内部接口手册563页，设计文档合计353兆，各种格式的文档都有，呃，这个文档最后一次编辑是在2004年4月。。。开始琢磨代码和注释，与设计文档反复对比，搞清楚它们到底都在干什么，心中凛然。卧槽这里有个调用好奇怪，怎么直接读写地址的，绝逼严重违背软件编程常识啊！跑去找老大，老大头都没回""地址多少啊？""xxxx去服务器上找""xxxx 芯片/传感器/执行器 手册""，顺便这个玩意在系统中的使用说明在""yyy子系统设计说明书""中有描述尝试去修改代码，记得对照公司编程规范，否则交叉审视被默默鄙视。信心满满地提交代码，编译还没通过，就被自动扫描工具喷得狗血淋头，然后你不甘心地将代码加长了10倍去预防低级错误。编译通过了！功能测试失败！开始找bug，一定是自己改的代码出了问题。几个通宵下来，发现是隔壁组的修改了接口内部实现，shit！。。。。。被测试组头儿拿着性能度量报告喷得狗血淋头，抓狂地开始性能调优。。。。。老子不要被骂，自己测试！师傅飞扑上来了一把拔掉插头，转头破口大骂""小混蛋你不做保护就要实际运行啊！""。。。。。这只是个纲要，而且还没写完。",差别很大。最近一直在洗数据，就拿 SQL 来说，学校里学到的大多都是一些常用的用法，事实上即使是公司里的开发，日常做业务需求的那种，用到的 SQL 技巧也是有限的。我第一次有这种经历是因为在上一家公司，数据库是用 PostgreSQL，所以每一次改动都需要给 DBA 过 SQL，要求是必须每一条改动的 SQL 都需要用 explain 跑过之后对比改动前后的 rows 以及时间，保证改动后与之前差异不大，至少要保证所增加的压力在目前机器数量下，最高峰的压力可以保证服务可用性，才会允许上线。我第二次有这种经历是因为目前所做的事情，虽然我应该是一个写业务的 RD，然而我现在却是日常洗数据，写 SQL 写到想吐。讲真，日常开发有多少机会会用到 case when，coalesce，if as，concat_ws，group_concat 这些东西的。当然并不是说不会用到，只是机会真的很少，所谓贫穷限制了我的想象，业务场景真的会限制你的发展，当你遇不到的时候你永远不会想到，窝草，还有这种情况？这大概就是所谓的，哪怕是最简单的排序，当数量级很大的时候，都是一个难题。以上，只是简单举了一个 SQL 的例子，就更不要提，学校里写的东西大多不需要考虑什么并发，而公司里的东西由于流量大、并发高，除了加机器以外更需要提高自己的单机 QPS，即使是加机器，也要考虑各机房机器分布，流量分布，这中间可能会遇到的问题，所需要的解决方案就不是我们在学校所能遇到以及想到的了。简而言之，刚毕业的我已经被虐的不要不要的了。不过，我觉得从学生到工作过渡的过程中，对我而言，最艰难的一件事是意识，很多东西第一次做，是没有意识的，这个比你没有见识过更可怕，可怕的就是你见识了，但是你却没有意识。
