问题名,问题内容,回答1,回答2,回答3,回答4,回答5,回答6,回答7,回答8,回答9,回答10,回答11,回答12,回答13,回答14,回答15,回答16,回答17,回答18,回答19,回答20
如果有两颗药丸，一颗吃了让你写代码100%不出错，另一颗吃了能让你100%发现并修改bug，选哪颗？,速度等同你原来的速度，其他各方面不变。第二个除了能发现自己的，还能发现别人的。,问扁鹊：“你兄弟三人，哪个软件开发水平最高？”扁鹊说：“大哥最好，二哥其次，我最差。” 文侯甚为不解。扁鹊解释道：“我大哥不等Bug出现就提前预防了，所以名声传不出开发组。二哥在Bug出现时就顺手解决了，所以名声传不出技术部。我呢，每天像打地鼠一般到处救火，所以在公司没人不知道我。”这选择，一目了然吧。,以前是给我 10 亿美元，但会有一只蜗牛永远追杀你，问我干不干？还有要我吃一小勺太阳会如何？更有甚者，直接让我强化一亿倍，问我是什么概念？我只想问这次的药丸是谁发？麻烦给我快递一下，谢谢,只要吃不死，就往死里吃！写代码 100% 不出错简直是我捏脚，呃，做梦的时候都想要的技能，bug 怎么能是自己的呢？bug 必须是别人才对！这颗必须吃，谁拦着也不行！谁拦着我咬谁！100% 发现并修改 bug，我要有这本事还至于现在单身？我早就化身超级英雄，以一只救世猪的身份出现在我亲爱的学妹面前：“咋滴？有 bug 了？乖，不慌，有我在呢，你让开，放着我来！”“呔，何方 bug！快快给俺小李现出原形！”我想要的甜甜的恋爱这不就来了！这晚上睡觉都得流一枕头哈喇子！！谁也别挡着，给我，我要吃！我是学妹的奥特曼！---好了，沙雕完了，该清醒一点了。现实一点，意淫这种超能力真是嘛用都没有，暗搓搓的爽一下就行了。作为一名数据分析师，选 SQL 和 Python 虽然不是 100% 不出错，但是也能很大程度上帮助满足我们的需要。其实我们说学习路线，其实就是对于一些 Python 视频啊，书籍的推荐以及一些比较好的做题网站。因为怎么说呢，编程语言这个东西的学习，都是“理论 + 实战”。理论是什么，就是与 Python 相关的方方面面的知识，这些知识来源于书籍和教学视频，再说实战，实战就是将你学到的理论知识转化为解决实际需求，在这个过程中，你提高了你的逻辑思维能力，提高了所谓的 debug 的能力。我之前在知乎上看到过一个问题，问的是“学习Python有什么推荐的网课，书籍资料，以及该装哪个版本的Python?”认真回答了一下：为了方便大家阅读，我把主要的内容拿出来供大家阅读。先说视频。这门课一共 131 集，大多数都是 Python 的核心基础知识，像 Python 环境搭建、基础语法、类型和对象、函数、面向对象等等等等，适合 Python 新手从入门开始学习。除此以外还包括了一些操作系统的内容，说实话操作系统啦这些课程也是对于我们很重要的知识，不管是在大学还是工作中都很重要，所以我希望大家在学完 Python 的时候可以看看操作系统的内容。黑马程序员出品，一共 547 集，我看了一下，可以说是很全面了。不只是涉及 Python，还包括 Linux 操作系统等的学习，每一集的时间也不是很长。如果你对别的不感兴趣，可以直接看 Python 那一趴的，从第 110 集开始。对于书籍的话，我在之前回答过类似的问题，感兴趣的可以看一下：我也说过，我最喜欢的是下面这本书：我感觉这本书的内容给我了一种很舒适的感觉，我很少有觉得读起来很舒服的技术书...整个的结构很清晰，内容简单但是不肤浅，整个基础知识的讲解简洁明了，一点也不啰嗦，很容易就看懂了。当然萝卜青菜各有所爱，这也仅仅是我自己的看法而已。编程语言的学习其实是边学边练，刚开始的时候是一边看视频看书，就把视频上的小例子，书上的小例子自己动手敲出来。对于实战来说，可以有两种：下面我将分别来讲一下这两种。刷题大家应该都知道，就是在刷题网站上解决如果你从事计算机行业，在你找工作的时候，数据结构与算法都是你跨不过去的坎儿。这里我推荐一个 Python 的数据结构与算法的视频。数据结构与算法的重要性不言而喻，作为一个前 ACMer 更是深有感触。北京大学这门课主要由这门课我觉得最好的一个点是，比较关注数据结构与算法的时间空间效率，这个是很多课程忽略的地方。我也有一篇旧文，详细的介绍了时间复杂度和空间复杂度，感兴趣的可以看下：时间和空间效率是数据结构和算法yyds，学会了这个你就学会了分析优劣，成长是不可同日而语。同时这门课也比较注重数据结构和算法的实践应用，毕竟只有真正用起来你才知道你是不是真的学会了，课程里的案例和变成习题建议好好做一下。刷题是一个很好练习和检验学习成果的方式，刷题直接在 LeetCode 上刷就好了。至于刷题顺序，我可以分享下自己总结的【这份清单我会一直更新，同样也会一步步的把站在初学者的角度，下面就是我为大家精心挑选的 LeetCode 题目清单，项目的话就先做些小项目练手。还是那句话，对于编程语言的学习来说，我在这给大家推荐几个我觉得比较好的开源项目吧，好的开源项目会对学习会有很大帮助，我这里推荐的都不是很大，结构比较清晰的开源项目。Python 写的命令行番茄工作法定时器。代码仅有 100 多行，不依赖其它第三方库。一条命令就能将文件安全地传送到另外一台电脑上的工具。基于 PAKE（Password-Authenticated Key Exchange）协议实现文件在公网的加密传输，发送和接收均仅需一条命令。给图片加盲水印的 Python 库。传送门：新！Python 炫酷进度条项目。支持 Python2.7-3.8 示例代码：SQL 的学习就很简单了，只需要买本书，然后看一下。但是只看书是不行的，还得再找个在线的练习平台练习一下。很多大佬都在推荐 《而我却有不同的意见，这些虽然经典，但是这本书介绍的节奏的更加平缓，并且用图示和关键字加粗更加生动地介绍知识，适合零基础的学生。对于零基础的朋友来说 Mick 的《SQL 基础教程》更容易看懂学会，非常适合入门者学习。如果只推荐一本书的话，我只推荐这本。当然我觉得非常好入门，可能对于初学者来说有些地方还是有些晦涩难懂。针对看不懂的内容，我在这给大家推荐一门 虽然是 MySQL，但是里面也有数据库的分类、SQL 介绍、数据库基本操作等内容。知识点很大程度上是相通的，你可以直接找到对应的知识点去看。但是说实话，像什么 MySQL 等的练习环境，对于新手来说，安装配置还是有点劝退的，而且交互性也不是很舒服。。我给大家找了 5 个在线的平台，优劣也做了描述，可以直接取：当然了，你也可能不喜欢 Python，你以为我只有这些嘛！这才是你最想要的 C 语言学习路线：这也是你最想要的 C++ 学习路线：,但凡过了试用期，也不至于问出这样的问题。第一个最大出路无非是自己能单干搞点私活。至于第二个，那就是大多数公司能把你捧起来的神。,编程爱好者程序员：选第一颗，因为代码一次写对好酷！想要影响力更大的程序员：选第二颗，一个人写的代码是有限的，能看出很多其他人写的代码中的漏洞并发现问题，更有前途。鸡贼程序员：选第二颗，这样只要被人随便写，我都可以改好，等同于拥有了第一颗的超能力。精通超能力漫画的程序员：慢着，这两颗药丸带来的超能力buff时间多少？真正的程序员：现实一点，不要yy这种超能力了。老谋深算的程序员：若真有这种药丸，不管谁造出来的，虽远必诛！,一般人：第一个有工作经验的程序员：肯定选第二个，写代码不出bug，但该不会写的功能还是不会写；会修各种bug，在公司里等同于神习惯卡超能力bug的我：第一个，然后脸滚键盘打出解决,问这种问题的一看就不是老程序员，老程序员一般都会毫不犹疑的选第二个。几乎只有非程序员（比如在校计算机专业学生、其它领域的研究员）才会经常不断的写新程序，作业也好、课设也罢、或者研究过程需要临时编程演算什么的。这些不用形成正式产品，不用太考虑质量，也没有广泛的用户群体给予“测试”反馈，更不用考虑后期长期的面向甲方爸爸的维护。所以他们可以有恃无恐的写新程序。而真正的公司程序员，长远来算差不多三天写bug三十天修bug（自己或其他人的），这还算是不错的，有些人大部分时间都写不了什么新程序，一直在测bug修bug。而且几乎没有程序员会追求程序一写出来就没有bug，因为有bug也没关系，只要再改就行（第二个技能正好）。而且任何程序都有它的运行场景和范围，范围内工作正常，没有客户抱怨，那基本就可以看做没有（紧急）bug，都可以从长计议。但是几乎所有程序员都会经常面临被紧急bug弄到焦头烂额的时候，当程序员被bug逼到茶不思饭不想疯狂掉头发的时候，你跟他说“兄弟，我这有颗药吃了就能立马发现bug，以后都不用愁修bug。” 那甭说免费了，折寿十年他也要（反正他这么熬下去也得折寿十几二十年，还没有什么前途，996.ICU可不是说着玩的）。写程序会出错才有编程的乐趣，如果一写就对，写出来就不用改，那将失去编程甚至合作编程的大部分乐趣（况且刚写完就没问题心理不慌么～）。但是这并不会减少你的工作量，只会导致你需要写更多的代码，而代码，是永远写不完的！这个技能只适合一种人，那就是给自己打工的人。给自己打工的人的最大乐趣是用最少的人月，完成最多的有效产出，获得最大的收益。而代码一写就对，无疑是能让收益最大化的技能。但是这个技能并不能保证你成为一流程序员，因为它有两个大的漏洞，一个就是程序员不光自己写程序，程序员大部分时间需要审核或修改别人的程序，这时候第一个技能没用，除非你把别人的程序都重写一遍。另一个大漏洞就是你不一定有那个知识水平写出程序来。你都没能力写出程序来，谈会不会出错则完全没有意义。反观100%发现并能定位bug，这个技能简直是打工人的利器。而且这个技能不完全受上面“漏洞”的限制，因为定位bug并不需要你对整段程序都有全面的理解和认识。比如有一个空指针访问的bug，你只需要定位是哪里产生了这个空指针就可以了，但是对于一个复杂程序来说，这有时是很难定位的。而你100%定位bug的技能就可以让你省去很多时间，你还可以自己选择什么时候说出来，先慎一段时间，然后经常在别人之前指出问题还可以让其它人对你肃然起敬，这技能简直收放自如，想装苦时可以装苦，想装B时可以装B。写程序有bug是极其正常的事情，只要不是经常出特别严重的bug，则完全不用放在心上。而且你和别人产生的bug，还会成为后面程序员的performance来源，甚至营造更多的就业岗位！哈哈哈～而100%发现并定位bug的技能可以在自己给自己review代码时能马上定位自己代码的bug，更重要的是自己给别人review代码时也能马上精确的指出别人代码的bug，还能告诉他怎么改。这是高级程序员（上不封顶）最需要的技能了，各大项目的maintainer都会争先恐后的招揽你，而你则可以游刃有余的游走在各大项目中，享受各个公司给你开出的技术顾问的礼遇。ps: 问题本身就有不少bug，大家不用过于纠结，这就是个娱乐性问题，一看一乐就好。毕竟程序员除了工作以外，调侃娱乐一下也是需要的嘛。如果对专业方面的内容感兴趣的朋友，可以翻看下面的README，看看有没有中意的。,小明认为开发的乐趣就在于解决问题，于是选择了第二颗药丸。接下来的一年，小明乐此不疲地修复了Linux的一些重要问题，成为小有名气的Linux内核专家。但Linux太大，太复杂，光内核就有几百万行代码，小明一年下来只修复了个位数的重大缺陷，这还不足以让小明成为首屈一指的专家，他决定继续努力。墨先生选择了第一颗药丸。墨先生高峰时一周曾肝了6000行代码，其中debug至少占一半的时间，无他，只因为TensorFlow1.x调shape实在太麻烦了。“速度还是原来的速度”就相当于墨先生一天至少可以写2000行代码，还不用写吃完药后，墨先生悄悄成立了一家公司，开始开发。第二年，墨先生开源了日后成为破解技术封锁最重要武器的“药丸OS”，拿到风投，买了游艇和别墅，同时，他还招聘吃了第二颗药丸、擅长解决bug、在业界小有名气的小明负责组织开发内核之外那1900万行代码。,第一颗第二颗以下内容纯属虚构，狗头保命。话说某国12305在抢票的关键时刻总是卡壳，民间抱怨连连。作为特邀专家的我，早上开开心心吃了药，溜溜哒哒过去到铁道部开发部门控制中心。问题十有八九在消息队列处理模块。背着手装腔作势翻看了30秒（29秒用于装深沉）代码，突然心头一悸。立即要求小弟用文本编辑器打开某个文件，定位到某一页，当当当，敲三下屏幕后，我一言不发地，在他身边慢慢走了十步后离开。小弟愚钝不解。他苦苦看了一天代码，忽然灵光一闪：他仔细研究了第三行代码十次，终于发现队列机制貌似有大问题！小弟感叹道：大海哥，真不愧大名鼎鼎是测试工匠阿！咦？他人呢？大海哥，他被一辆军绿色悍马接走了。某个导弹研究所设计中心里，一堆科学家正急得象热锅上的蚂蚁。他们设计的超远程巡航导弹在百发百中一百次后，在一次重大汇报演习里失误，大庭广众和众目睽睽之下，一发打飞 。领导要求归零，可是导弹又变得百发百中，错误不能再现。我赶紧吃了一颗药，溜溜哒哒走进指挥中心大门。指挥中心所有人都紧张地不由自主站了起来：测试工匠终于登场！我坐到屏幕前 ，装腔作势看了一下几个模块，感觉4号模块不大对，要求他们调出4.5模块。4.5里的4.5.7感觉不好，调出来。我心头一悸，嗯，4.5.7.9不对劲，调出来。这个正则表达式谁写的？有特定情况下不对的意外。专家们一小时后才醒悟理解看懂，他们感叹道：咦？他人呢？大海哥被一辆黑色牌照防弹车接走了。航天口，载人火星登陆任务中心。火星上的三个勇士48小时内必须起飞返回地球，可是起飞测试指令火箭就是不响应，即便宇航员手动启动也没用，整个指挥中心都毛了。中心几百号人，看见我走进来，全体不由自主地起立，等我走到主控计算机屏幕面前，四块大屏幕上全部是密密麻麻的代码。刚吃了药的我大手一挥：换一批，这批无异常。大屏幕开始翻页，屏幕花花绿绿闪闪烁烁，我站在大屏幕前不断挥手，眼镜片明明暗暗。中心工作人员窃窃私语道：“谁说十分钟后，我忽然心头一悸，大喊道：屏幕停止了滚动，量子停止了波动。全场鸦雀无声，麦克风递送到我面前。我清了清嗓子朗声道：们，这行汇编代码执行时取的数据段数据，它的存储区可能被宇宙射线打坏两位，纠错系统刚好不能发现。技术人员立即进行模拟并证实了这个BUG，纠正指令发向遥远的火星 。航天中心负责人感叹道：大海哥，真不愧大名鼎鼎是测试的匠人阿！咦？他人呢？大海哥被一辆白色专车接走了。航天专家们感叹道：工匠就是这么忙。辛苦他了。我从迷混中慢慢醒来，熟悉的白色的墙壁，白色床单，白色桌椅，一身白长得很像迪丽热巴的美女小护士微笑俯视着我：我看了看病号服，激动地说：“护士，这个药绝非凡品阿，药效SSSS级，可以变身工匠改变世界，比如我在载人航天中心。。。”护士小姐姐温柔地打断我：“啥都甭说了，我都知道。上次几乎要灭世的外星飞船BUG也是你在打野的时候一抬头看窗外的时候无意中发现，由地球卫队瞄准命门一记激光炮过去打爆的。 可你反复说是药好， 这么谦虚谨慎找理由配合吃药的病人本院少见。 谢谢你，你对我真好。”你刚要争辩，却见她她微笑着坐到床边，一手拿水，一手拿药，说到：我努力想伸手去接，可是憋气不能动，仔细一看被约束带紧紧捆绑着我。我拼命挣扎想接过小姐姐的药，拼命用力想碰到她接近她。。。。于是我醒了 。完。,"当然是第二颗啊，这还用问？第一颗有毛线用？说个比方吧，张三写1+1=2永远不会错，但张三傻，永远只认识1和2，其他的数字都写不出来，这样好吗？第二颗的话，这可不得了，这个能力的强大可不是你能想象的。我们知道来一个具体例子吧。比如x=1当π中含数字串a=""782......3""(随便写)，x=0当π中不含这个数字串。首先π是可计算数，所以程序一定能被我编出来，比如穷举每一位小数。然后这个问题和停机问题差不多。①如果π中含a，程序在有限步后找到a就停机，输出""x=1""，②如果π中不含a，程序永不停机，无法输出""x=0""。现在②情况下，程序陷入无限循环，就是一个bug，如果我吃了题主说的药后能修复这个bug，输出x值，就完成了一个普通图灵机不可计算的任务，达到了图灵度0'的水平。事实上我可以走得更远。对每个正整数n，我们把之前例子中的π换成π^n，都可以提一个类似的问题。把之前例子里求x的程序加一个参数n封装起来，得到M(n)，之前那个就是M(1)。再定义一个十进制小数c=0.xxx......，其中小数点后第k位是M(9k)～M(9k+8)运行输出的x(n)之和。然后我们又可以问，c中是否含有数字串v=""782......3""？假设有一个带有计算能力为0'的谕示机的图灵机X，对每个n，都能在有限时间内判定M(n)并输出x(n)。如果c中含数字串v，就存在某个有限的n，使得x(1)～x(n)的结果能判定v存在，但如果c中不含数字串v，那么X的运行也陷入无限循环，永不终止。现在我发现并解决了这个bug，就解决了关于X的停机问题，也就达到了图灵度0""的水平。以此类推，吃了题主的第二颗药后，对任意n∈N，我都能编程解决图灵度为0(n)的判定问题。也就是说我的能力达到了整个arithmetic hierarchy(PS.比如哥德巴赫猜想和",必须是第二个！写代码100%不出错依然只是一个码农，顶多算一个不错的码农，在公司只不过是一个无情的编码机器，业务代码一大堆堆你身上，撑死了老板觉得你靠谱给你涨薪30%，让你做个骨干程序员。能100%发现并修改bug这可是大杀器，神一般的存在，任何公司的任何产品都会面临各种复杂的线上bug，非必现bug，要知道有时候团队为了解决这些bug花费的人力物力简直是不可估量的。嘿嘿，这个时候你一上去bug就立马解决了？还能帮其他人发现bug，这可是要快速晋升的。举一个栗子，另外，有了这神技能，还不一定需要打工了，积累点口碑和人脉后做个自由职业者，专门帮一些小公司解决各种稀奇古改的问题。这个来钱那可真不是码农可比拟的，IT行业的一个知名大V左耳朵耗子曾经就干过这个，就饿了么一单一个月就是10多万，当时饿了么在快速扩张期很多服务器的高并发/高可用的bug团队解决不了，就请了左耳朵耗子做兼职技术顾问，一周只用去1天，解决问题就好。很多人认为优秀的程序员就是coding厉害，其实这都是误解，真正牛逼的程序员不光coding要厉害，更重要的是debug的能力。现实中没有这种神奇药丸，但有如何成为debug高手的方法论，曾经在360带几十人技术团队，同时研发几条业务线。参与过的产品，日活过千万的有一款，过百万的有三款。这个过程中各种稀奇古怪的bug见过不少，也一一解决了（不然估计就要滚蛋）。编程领域流传着一句话：必现的bug，都不是bug。因为好复现，就容易解决，代码一直跟下去，或者看看真正困难的是偶现bug，甚至那种概率千分之几，但后果严重的bug。解决他们就需要详细的日志Log，尤其是关键点上的信息，非常重要。顺便推荐一个经典的github项目，这个项目收录了程序员需要学习的方方面面，包括计算机经典书籍、经典大厂面试题、各种图解tcp/ip、操作系统、在360积累的soa、网络相关核心文档、程序员成长超全攻略等等:程序员+google=好的程序员，这句话真的没错，很多技术bug，当你毫无头绪之际不妨google下，可能不少人遇见过。当然，最关键的是搜索的关键字，这取决于你对bug现象的描述，越言简意赅搜索到的信息反而越多。这个方法在实在束手无策之际不妨用用，用法也很简单，当你不确定哪一块新增代码引入问题，就尝试注释一半代码看看程序是否OK。不行再换另一半代码注释掉，很快你就可以缩小bug的查找范围，进而定位问题。算法很多程序员朋友并不重视，认为这东西并没有什么用，实战中遇不到呀？其实在很多性能bug中，引发的原因就是代码实现的时间复杂度和空间复杂度导致的，这个时候不清楚基本的算法压根寸步难行，无法做任何调整。反之熟练掌握算法就能很快进行调优，有的时候优化后甚至都不需要加服务器。更别提算法是大厂面试和笔试的必考题，原因也在于大厂需要有筛选方法来判断你是否有成长空间。顺便送大家一份经典算法资料，是一个阿里P8撰写的，如果你能吃透，那我相信80%的技术面试都会不在话下：可以采用一些工具来模拟前端或者后端，制造假数据、假操作。有了这些工具之后，把你怀疑可能出问题的情况模拟一遍，观察是否会出问题。其次，遇见一些极端情况，比如怀疑是其实很多bug会变着花样反复出现，俗话说好记性不如烂笔头，把解决过的问题记录下来，并且做好索引，下次遇见可能相同的问题，先检索一遍，搞不好就找到答案了。特别是引用了第三方代码或者是开源代码导致的问题，官方文档对应的部分反复看看，可能问题就解决了。比如很多线程注入的工具，你开启后，但凡是一点点依赖线程顺序的bug都会从偶现变为必现。这个相当于主动把代码运行环境变成地狱模式，比如你的一个线程的结果依赖于另一个线程的输出，但你忘记加这个时候加入这种工具，它直接让某些情况下另一个线程运行速度变慢（我猜大概率是加了个sleep(1000)），结果你的程序就崩溃了，崩溃堆栈直接打开，迅速定位，问题解决！比如，某些系统没有完善的崩溃报告，虽然也有dump，但是分析出来的另外，对于想在计算机行业卷的朋友来说，夯实,当然选,有一个造访主人的客人，看到主人的炉灶的烟囱是直的，旁边还堆积着柴草，便对主人说：‘重新造一个弯曲的烟囱，将柴草远远地迁移。不然的话，会有发生火灾的忧患。’主人沉默不答应。不久，家里果然失火，邻居们一同来救火，幸好把火扑灭了。于是，主人杀牛摆酒来感谢他的邻人。被火烧伤的人在上位，其他的各自以功劳的大小依次坐，但是没有请说改“曲突”的那个人。,我选蓝色的那颗，吃了能隔着屏幕给题主一大嘴巴子的那种题主但凡写过一个月程序，就问不出这种挑衅的问题来。,Update:果然牵扯到因果律的不能随手作答。毕竟所有的因果律，从来都是副作用更好利用。第一颗暂时看不出什么可以利用的副作用，因为很有可能“写代码100%不出错”的意思是“写不出不出错的代码”，当你试图写出错误代码时候，或者停电，或者台风，这些都在因果律的正常射程之中。但第二颗就不一样了……第二颗不存在前置发动条件，也就是说，因果律不能阻断你发动第二颗效果。我们可以随手写一个带bug的程序，比如“输出于是我们可以愉快地改BUG了觉得六个问题一定会解决？到第五个问题解决的时候找几个新问题制造BUG即可剩下的是原来的废答案……仅供参考，毕竟是没想到“第一个可能是废能力：当因果律有生效前提的时候，你一定要权衡生效条件和生效后果哪个更难改变。第一个能力，写代码100%不出错，速度等同于你原来的速度……第二个能力，100%发现并修改BUG，发现BUG的速度等同于你原来的速度总觉得这两个都不是什么好东西。毕竟第二个没改掉“发现BUG所需的时间”,"当然选找bug.你自己写代码没bug用处不大。最多解决10%的问题。大部分bug都出现在系统整合上（大白话讲就是你没bug, 别人写的代码有bug。以及你和别人的都没bug但合一起就有bug。",第一颗药丸看似鸡肋，实则鸡肋。普通人或者是编程能力很一般的人吃完之后，几乎没什么效果。But，它更像是特攻宝具，对于编程有着这个库那个库我都会，这个算法那个算法我能熟练掌握的前提，现在还有写代码100%不出错的顶尖BUFF加成，这意味着什么？你可以一边听歌一边写，一边看剧一边写，通勤在路上写，排队买奶茶时写，只要醒着你都可以一直写。工作轻轻松松，私单接到手软，财富自由指日可待。当然如果你足够地积极进取，你也可以持续地学习知识，毕竟对于你来说，之后最有挑战的事情可能就是学习了。学得越多你就越牛逼，越牛逼能做更多的事情，在输出这块你已经是前无古人后无来者，你要做的就是不断地进行输入。综上如果你知识量不够，只能编写一些简单地排序代码，你吃了第一颗药丸，效果几乎也是微乎其微的。所以普通人请出门右转，吃完之后，方圆几十里的IT公司的测试岗位员工瞬间失业，因为他们已经失去了价值。几十万行的代码放在你面前，你也不会面露愁色。鼠标滚轮能拖多块就拖多块，最好是七八个屏幕一起摆在你脸上，同时翻滚。你用最快的速度审完之后，心里已有定数。你也懒得跟周围人解释bb，直接上手就干，当然你也可以一边看热映电视剧一边修改，轻松写意地就之前十几个人要干几天的活干完了。从此之后，你就成为了神话，找你的基本都是大公司，中小型公司你都懒得搭理，当然他们也请不起你~钱吗自然是不必愁了，名声地位你也基本都有了，到时候你还要雇几个美女经纪人，像CEO明星那般细细地安排行程。市场永远有需求，所以你要做的就是吃吃玩玩，等到银行卡里余额不足时，再出去干个几票。等下，这样来看技术大牛也该选第二颗药丸了......,不不不，第二颗药丸药效太厉害了。弱化一下：不用解决bug，只要100%定位bug，就已经保证一辈子不动代码还能吃香喝辣并且名正言顺当上业内知名的技术专家了。就像那个故事一样：9999美刀告诉你在哪画线，至于最后画线的1美刀，让别人挣去吧。至于第一颗药丸？说破天了也就是个高级工程师。,"你们有没有想到深度学习的功能？我猫狗分类能做到100%分类正确，那你觉得我是神还是不是？这个问题里面第1个选项没有包含工作量和程序的技术深度。怎么叫做100%不出错？一般的代码在没有并发的时候不报错，这个代码在高并发底下报错，那这就要出错吗？如如果我随手写的代码，哪怕只是一行，他不管多大并发量都死活不会出错，不管多少线程竞争，他的同步状态都一定是正确的，还得包含性能指标，比如说我这个代码能保证一连串的微服务调用最终出来的结果绝对不超时（我说单次调用总体时间不超过0.01秒就0.01秒，不超过0.005秒就0.005秒），那我觉得这个100%不出错的能力很强啊。如果做个100%识别率的CNN，把VGG , ResNet这些的正确识别率爆成渣，不香吗？做个100%识别率的RNN，把BERT爆成渣也很香。但我觉得你们还想着拿选项二去修改别人的代码？我都巴不得自己做不到这一点，反正死活做不到，要么重构，要么大家双手一摊。因为这种东西急着现场一定要把bug改掉的，你通常是在加班的情况下，说不定还是在甲方的人看着的情况下。我根本就不想变成超人，不想上班。按照选项一随手写几行hello world改变一下世界，出出教程做做直播不爽吗？就算有选项2这个能力，都不想再去伺候他们了。",功能上第一种只能在自己身上起作用第二种你就有发现bug的能力了，能发现其他所有人的bug，简直就是
自学简单编程可行吗？,如果可以，具体去哪里自学好呢？就是把电脑的一些知识都了解一下。,自学的话，最好根据个人过往的学习毅力，理性做选择，这样真能学成的概率大点。先说下我自己的情况。有目标才不会学偏学泛，导致学而无用，浪费时间。可以选择自己平时喜欢的网站/WebApp作为练手模板。现在不是2000年，就别再被各种三流的老师忽悠去学做枯燥的「学生课程系统」了。2019年的我们有更好的选择，诸如浅copy微博，B站等等，关键是你喜欢。新人入门，浅copy练手模板就行，主要目标是学会「增」「删」「查」「改」内容。麻雀虽小，但五脏俱全，在实际的工作开发中，60%代码都是写这些东西。所以，学会并熟悉跟其相关的技术知识点是最必须的。这里以后端为例简单说一下。主流语言的基础知识都汇集在此，而且有案例哦，非常方便新人快速了解知识点。先别去搞那些要复杂的配置，很影响的学习激情，先看到「hello world」才是关键。。记住，是跟「完成任务」有关的。（都 1w 收藏了）（点赞，评论，给师兄点正反馈^-^）接下来，我们就逐一介绍6个主要的学习任务。它们彼此互有关联，由易而难，循环渐进。具体来讲，就是做一个展示内容的页面，目标是搞懂html、css的基本语法，明白一个简单的页面由哪些东西组成。最重要的是，这个任务门槛低，完成时间短，能让你快速看到小成果，学起来也更有动力。在搞定展示内容的基础上，尝试动态填充内容。这时，你需要初步接触Linux、部署服务软件、数据库Mysql、语言框架，开始有一定难度了。可以分两步走。第一步是，先不管数据库，把数据写死在编程语言中，然后学会把数据显示到模板中。目的是学会使用数据和遍历数据。第二步是，在完成第一步的上，学习使用数据库。目的是明白SQL的语法。这个很关键，登录功能是多数应用软件绕不开的核心模块。目的是了解session、cookie这些经典知识，以及初步接触完整闭环的功能逻辑。在有用户登录，和动态列表页的基础上，我们加个发布功能。目的是学会新增数据，并把前面的所有任务内容串起来，进一步明白业务从前端到后端的大体运转过程。巩固加深对业务的开发流程的认识。（不考虑各种复杂情况）分析业务是程序员的必备能力。平时使用web和app时，多留个心眼，想想看这个功能的数据结构是由哪些元素组成。目的是养成系统化的业务思维，这对更好地学习编程非常有帮助。有两个好处。其一，可以帮助巩固原有的知识，起到温顾而知新的作用。其二，有深度的copy，意味着业务逻辑复杂了，技术逻辑要求更缜密，这能促使你或多或少接触一些中高阶的技术知识点，实战能让你更深刻地理解它们。其三，自学找工作，当你完成以上所有任务时，你就已经达到入门程序员的水准。1、如果条件允许的话，请把你学习过程的每一个大知识点，都梳理归纳成文章集，放在一来，是让自己看到努力的硕果，增强信心。二来，是它们能丰满你往后求职的简历，增加谈资。总之好处多多。2、如果你是学后端的，git、redis、nginx、3、有人打趣说：“感觉不懂英语学编程，跟瞎子抹黑一样，得慢慢摸，才知道是什么。英语好，起码是睁着眼睛能直接看到东西的。”4、预备一本技术的剩下的就是去实战了，去积累经验。有经验，才能配合进一步的学习，真正理解中高阶技术知识的作用。那去哪实战呢？必须是去工作，这个法子最实际。闭门空想着造车，实战性和锻炼性不够。找工作的这里不详细叙述。具体就是找合适的题型，刷起来，然后认真做好一份简历。有疑惑，可以关注私聊但如果「新人A」一听，就不假思索，二话不说，买来一本500页的模式圣经、一本800页的算法宝典，开始从头啃到尾。那么，能不能学好不好说，但是学到崩溃是必然的。多少业内人都没学透的东西，部分也就嘴上说说而已，而他当真一口闷，兴致不被磨光才怪，直接从入门到放弃。即便「新人A」真能生吞20多种设计、几十种算法、也用处不大。因为他的业务经验缺乏，不足以支撑他对理论实际用处的理解。一个月后他就忘得差不多了，很浪费时间和头发。毕竟人家是上万元的学费，必须拉长足够的课时，才能让学生觉得物有所值。但是单靠零基础的自己，加网上的碎片文章和视频，其实想少走弯路有点难，时间充裕倒无所谓，算磨练自学能力。有条件的情况下，找个有经验的业内人士，帮你规划学习路线，阶段性地验收你的学习成果，查缺补漏，防止跑偏，这样会比较高效，又省心。最后，我想跟大家分享一个朴素的心得：希望对你有帮助，祝顺利。现在的朋友点起赞来，都这么含蓄的吗？来，左下角，大胆一点！卫星ktshixiong，深度职业规划＋/*/*→ → → （4000+字，推荐收藏备用）→ 最后，再次感谢大家的支持。,正确的学习方法、学习路径，不要说简单的编程，转型都是可以的，不要去学考验人性的C/C++、Java、汇编等，这些东西已经不适合你，推荐你去学Web前端（HTML、CSS、JavaScript）、去用PHP搭建网站、或者学Python（取代VBA来提升办公效率，替代Excel、PowerBI来做数据分析、可视化）、小程序等，一周可入门，好玩又好学，对工作有帮助，深入可提升工资，也不排除可转行；2、不建议你学3、不要去买书来啃好几周，不要不动手光看视频光看书，学技术一定要先从安装开发环境开始，4、5、6、如果你想快速入门，建议找个人指导你，比你买书、自己去翻视频、自己摸索要强得多。如果你是想系统学习计算机科学的专业知识，推荐花两三年的时间按照“科班式”的方式来学习国外名校的计算机课程：,本回答首先分享了如何选定学习方向，自学编程主要有几个阶段，学习过程中有哪些注意事项和学习方法，最后分享了目前权威的学习资源，如果对你有用的话，点个赞吧。首先要选定编程学习的方向，例如 Python、C、C++、Java、JavaScript 等等编程语言，你最好先去查一查都有哪些编程语言，每种编程语言都侧重于哪些方向，例如 JavaScript 主要用于 Web 前端开发，Java 主要用于后端开发，Python 在数据分析和机器学习等方面有较好的应用。不同的方向有着不同的吸引力和特点，你多了解一下，选一个自己感兴趣的。接下来就是学习编程，那么在看书学习的过程中，有一点要记住：重要的是学习编程思想，这个功能是怎么实现的，为什么这么实现，作者是怎么想到的，其次才是敲代码，学习好了思想以后，你可以自己敲，模仿敲，再对照着检查自己代码中存在的问题。那么在自学编程的前期和中期，能够完成前五项就是取得了很不错的效果了。初级程序员，涉猎广泛，但都是浅尝辄止。这是很多人面临的问题，而在编程学习则是需要实际操练，加深体会，不断深入的一个过程。在这个回答里，我想说一下初级程序员应该如何提高。想要培养一项技能的最好的办法，就是将他融入到我们的生活并成为我们的爱好。其实说白了，就是让这个爱好成为一个习惯，一天不去做这件事情，都会觉得少了什么。在不知不觉中，这个习惯会像滚雪球一样积累起来。对我来说，养成这种习惯首先就是要对“拖延症”说不。比如，你想锻炼下自己的写作能力时，但是没有好看的本子，没有好的灵感，没有安静的环境....总之就是找各种理由一拖再拖，最后就不了了之了。为自己设定一下，每周拿出几天，每天拿出几个小时，编程学习就这样慢慢步入正轨。对待编程学习，我们没必要像健身狂人那样一口气做到筋疲力尽。与其直接编程2小时，我们完全可以先做40分钟、然后休息5分钟，整个过程重复4次。很明显，40分钟这样的短周期更容易坚持也不会带来多少压力。不过这样的方式应该配合更为灵活的执行思路。如果你感觉状态很好，而40分钟才刚刚完成热身，那就继续做下去并努力让自己抓住这种状态。向大家推荐蕃茄工作法，这是种学习新型技能的良好机制，推荐各位认真了解。在确定好学习方向和当你选好方向，认真学习基础知识后，学习一部分的知识，就结合项目做一些实践，已明确自己哪里不足。并且做项目能增加学习乐趣，给自己提供一些正反馈，让学习变得有趣，让自己有足够的动力继续学习。学习编程不能闭门造车，经过这几年的编程学习，我认为想要提升编码水平的最佳途径就是多看、多写。看别人的代码，看一些程序员大佬写的代码，看一些标准库的源码，仔细思考他们的编程思维和编程方式，以提升自己的编程思维和编程方式。阅读别人的代码也确实是快速提升代码水平的一个技巧。1. 对整体的思路没有概念2. 对类库不熟悉，包括方法调用不熟悉3. 不理解里面的一些算法4. 中途停顿时间太长，接过来后没有形成一个系统的思路。1. 把握整体有个大体的框架在脑海中，此时根据里面的文件名和文件夹，从入口文件大段大段看就可以，知道这段或者这个文件的作用就可以。很多写得好的类库都是思路很清楚，非常有助于从整体理解， 此时只需要知道这个文件和这个方法是什么作用就可以，还不到细细研究的阶段。2. 对3. 遇到不熟悉的算法此时就要静下心来，如果有注释可以根据注释来理解，如果没有那么也是一样的思路，想整体了解这个算法再细分进去了解，这一步只需要静下心里是可以理解的。4. 中途不能说看一个小时，停了4个小时再接着看，或者是今天看一点点，隔了非常长的时间再看第二部分。最好是趁热打铁。里面核心的地方还是从整体到细节的方法，掌握到了整体阅读细节才有意义，有时候知道了整体一些细节的地方清楚了，总之没有不努力就能理解的代码，上面的方法只是帮助你可以轻松些阅读，只是努力是必须的。学习编程的一个很好的方法就是和其他的程序员交谈。这不仅能够帮助我们多获得一种思维方式，同时也能够以更为愉悦的感受完成学习任务。至于内容没有特定的要求，可以是你正在学习的东西，也可以是你认为很酷的东西，更可以是你正在工作的东西。这样做可能会让你学到很多关于库，服务，编程语言和模式方面的知识。但是，最重要的是，你能了解到其他人是如何看待编程的。如果大家学习了一种新的编程概念，但不能确定自己是否已经真正掌握，可以写技术博文加以检验。或者是在值得提醒的一点，别因为自己刚刚涉及编程而有所顾虑。罗马不是一天建成的，出色的程序员也是一样。只要您对问题有所了解，就不妨给出自己的答案——无论对错，这都将成为一次宝贵的经历。对于人生来说，其中任何目标的实现都离不开耐心。编程学习就如其它任何学习任务一样，都需要反复努力并投入大量时间。在这个过程中，您一定会经历高潮与低谷——别被这些曲线影响了心情。接受已经发生的一切，并尽可能避免其中不好的部分。就像打高尔夫球一样，我们的手感总在不断浮动，但只要坚持到底，您最终总能成为一个大神呢~这个不用多说了吧，代码托管网站，上面有很多资源，想要什么轮子，上去搜就好了。并且呢，上面有很多优秀的程序员，你可以在这里交到很多好朋友喔。开发过程中遇到什么 bug，上去搜一下，只要搜索的方式对，百分之 99 的问题都能搜到答案。在这里能够与很多有经验的开发者交流，如果你是有经验的开发者，还可以来这儿帮助别人解决问题，提升个人影响力。程序员客栈是领先的程序员自由工作平台，如果你是有经验有资质的开发者，都可以来上面注册成为开发者，业余的时候做点项目，赚点零花钱。当然，如果你想成为一名自由工作者，程序员客栈也是可以满足的。只要你有技术，不怕赚不到钱。很多程序员日常在这里逛一下，接一点项目做。很多公司也在这发布项目需求。现在国内优质的开发者交流学习社区，可以去看大佬们写的文章，也可以自己分享学习心的，与更多开发者交流。认识更多的小伙伴儿，提升个人影响力。V2EX 是一个关于分享和探索的地方，上面有很多各大公司的员工，程序员。你想要的应有尽有。博客园创立于2004年1月，是一个面向开发者的知识分享社区。自创建以来，博客园一直致力并专注于为开发者打造一个纯净的技术交流社区，推动并帮助开发者通过互联网分享知识，从而让更多开发者从中受益。博客园的使命是帮助开发者用代码改变世界。很多早期的高质量内容都在博客园。国外优质文章网站，Medium 的整体结构非常简单，容易让用户沉下心来专注于阅读。上面有很多高质量的技术文章，有很多厉害的人在上面发布内容。国外优质文章网站，上面有很多高质量的技术文章，有很多厉害的人在上面分享内容。GeeksforGeeks is a computer science portal for geeks。（感谢@三三白白的补充）这个不用多说了吧，查资料，有问题，Google 一下。当然，能访问的人自然会用，访问不了的人，可以用算法学习网站，上去每天刷两道算法题，走遍天下都不怕。也是算法题网站，同上。这个是上面算法题网站的中文站点，英文不好的可以刷这个，英文好的推荐去刷英文网站的题目，还能提升英语能力。各个公司的面试题和面经分享，找工作前认真刷一刷，一定会有很大收获！拿到心仪的 offer！这是国外发起的一个 Web 开发学习的网站，从简单到深入，一步一步带你学习 Web 开发。就像一本练习册，并且当你完成相应的内容后，会得到相应的资格认证。学前端的看这里，百度官方推出的前端开发学习技术学院，题目从简单到困难，如果你把里面的题都做会了，找个 BAT 的前端工作不成问题的。要记得，学习一门语言或者一个工具，最优质的学习网站就是他的官方网站，官方文档。菜鸟教程的 Slogan 为：学的不仅是技术，更是梦想！ 记住：再牛逼的梦想也抵不住傻逼似的坚持！网站包括了HTML、CSS、Javascript、PHP、C、Python等各种基础编程教程。中国大学MOOC是由欢迎将本回答分享给你的朋友，他/她可能正需要。,我在17年花了大半年时间自学前端，然后进入了准一线互联网厂子，所以这篇文章我主要分4个部分来说下我的看法首先看题主的提问，我感觉到可能你对计算机和编程没有相关的理解，所以我先解释一下吧～电脑的知识简单分两种，一种是软件相关（编程），一种是硬件相关你可以这样理解，把计算机理解成一个机器人，可以不停歇的工作，你可以给他说一些硬件的话主要是了解电脑的构造，说白了就是了解了这个你至少可以明白怎么买到一台好电脑，怎么组装一台好电脑（这方面我就先不多谈了～）软件的话就是广义上的编程了，也是我主要回答的部分，了解这个的人不一定了解电脑的构造，如果你让了解软件的人帮你选电脑他有可能一脸无奈……转而告诉你一句“的，比如有一些重复的劳动，你做的很厌烦，那么你完全可以交给计算机来完成，然后用“指令”告诉它，你来帮我做这些事情，那么计算机这个“机器人”就会帮你解决这些问题而这个所谓的分两个方面来说吧一般来说，喜欢编程的人都是有深入思考的习惯的，那么什么叫深入思考的习惯呢？举个例子就是，你做数学物理题的时候，有没有做着做着就变得特别专注了，以至于忘了时间，如果你有这个习惯的话，那么你很大概率是有编程的天赋的那如果你是你是文科生，或者不爱看书所以也没咋体验过怎么办？那么看第二个方面吧这里的基础知识肯定不是说让你去学算法，我指的是然后随便找一种语言先看看它的普通for循环，在看看它的双重for循环，看看能不能静下心来理解，如果可以的话，初学的兴趣应该是没有问题的如果1和2都不满足怎么办呢？那可能编程的兴趣是不是很大…这时候要是还想着入门就必须有人带了，自学就不太建议了提前说一句吧，毕竟自学靠的是那么，怎么在有兴趣的同时自学编程呢？上面也过说了，编程的本质是解决问题，脱离这个本质为了编程而编程，本身就没什么意思而且就像很多人为什么喜欢打游戏呢，因为干掉对手会有成就感，赢了一局也会有成就感，这种短时间内获得的成就感是很有促进作用的，那么我推荐什么语言呢？学习python的时候要记住我说的话很多人学语言的误区就是，一天看一点语法，一天看一点语法，感觉自己很努力了，但是到最后问学到了啥的时候，发现还是什么都不会，关键是所以但是这个时候你会发现你基础没学好，写不出来，怎么办呢？去查就好了，学python的资料我就不写了，这方面大家已经整理的很详细了，贴一些高赞链接吧找工作的话我就不建议学python了为什么呢？python适合解决小问题，但是不适合找工作，但是不要担心学了python白学了，因为语言都是相通的，转学其他语言也很快如果你一开始就是为了找工作而学编程，我建议你自学什么呢？先说下这两个概念是什么吧，你可以这么简单理解，如果做一个网站，你看的的页面，动画等等都是前端，你看不到的部分就是后端，一般是一些数据的储存和处理，是和数据打交道的后端的话我就不多说了，只是告诉你go在目前这个年代可是大红人，找工作比较好找我着重说下前端吧，为什么呢？因为前端是做页面的，所见即所得，做起来容易产生兴趣，而且入门的初期，及其简单，随便学学就能作出一些感觉很酷炫的东西还是上面讲的那些话，要====================如果有什么问题就来问我吧，我会尽力帮你的，我又不收费=。=最近在知乎上已经在帮一个朋友入门前端了，教的过程中感觉这些东西市面上并没有特别好的免费教程，都不太适合纯新人，自己也想整理一套免费的教程出来帮助大家～,许多人想入门编程的同学，在其准备开始上手学编程时，都会面临一个问题：一般情况下，我们可以利用搜索引擎，来定位到我们所需要学习的资料。或到一些当下比较流行的视频网站上，搜一搜看看有没有值得学习的课程。比方说此前我就在公众号（GitHubDaily）上面分享过一篇文章，向大家介绍了 B 站上一个比较优质的计算机课程：但是，最简单快捷的方法，还是莫过于直接看前人做过的资料汇总。之前看到有一位国外小哥整理了一份超级全面的计算机学习资源，下面跟大家分享一下。这个小哥名叫 Deepak Kumar，印度人，同时也是一名全栈开发者。此外他还担任了微软的学生大使（Microsoft Student Partner，简称 MSP）。这里很多人可能对 MSP 比较陌生，这里简单介绍下。MSP 是由微软所创立的全球性学生组织，致力于挖掘校园中优秀的技术人才，以帮助他们更好的提升专业水平，推动技术的发展。成为 MSP 后，便能拥有来自微软的专业培训及资源。每年微软都会固定透过各种校园活动招募更多志同道合、喜爱科技的伙伴，后面再透过这 ­ 些 ­ 活动将他们所学到的东西再回馈于学界，这种做法非常值得称赞。上面跟大家聊到的印度小哥便是 MSP 其中一员。不知道小哥是否是受到了微软 MSP 圈子的影响，才用心整理了这份学习资料。但不管怎么说，还是感谢小哥如此费心整理了这么一份优质的学习资料，让开发者们大大减少了查找资料的时间成本，下面我们就来聊下这份资料吧。这份资料叫 这份资料作者将其托管到了 GitHub 上，一些非计算机专业的同学可能对 GitHub 不太了解，这里简单科普下：GitHub 是目前全球最大的程序员社区，每天有来自世界各地的程序员在上面开源自己写的项目代码、交流技术、分享编程相关的学习资源。具体如何玩转 GitHub，这个话题比较大，就不细说了，感兴趣的同学可以去看下我们往期分享过的文章，或者关注下我们的公众号 GitHubDaily，每天都会在上面更新与 GitHub 相关的文章，分享比较实用的开发工具与介绍完 GitHub，我们再来看下这份资料都包含哪些内容：我大致看了下，整理得还是蛮全面的。如果你要学编程，可以看看上面整理的 Python、机器学习、前后端开发、如果你是学生，可以看下上面那些针对学生党所提供的福利：如果你学完编程后，成功做出了一款解决某个特定需求的产品，也可以到上面寻求与创业公司合作，将产品进行商业化：平日无聊的时候，也可以逛逛作者推荐的这些网站：整个项目完全是一条龙服务，从编程到创业，相信你都能从这个项目里面学到不少东西。总而言之，这是一份覆盖面非常之广的编程学习资料，深挖下去，你会发现里面藏着不少宝贝，由于篇幅较大，这里就不一一列举了。,但是我个人觉得这个因人而异，有些人报班或者是花了很多钱不努力去学，也学不好，但是如果你愿意去学的话，其实参加不参加培训班都是没关系的。如果你决定自学，我希望你可以参考我的思路来准备，或许能对你有所帮助这里我分享一下自己准备计算机视觉岗位时候所用到的一些相关资料方面内容的准备，的提升，我在B站看的当然除了看视频以外，还是需要去学习数据结构和算法的内容，这里的话，我自己当时没有作为重点，目前也正在不断的补这块的内容，这里分享一份自己这里才开始学习机器学习相关的内容，这里推荐经典的一些视频，真的质量非常高，我建议先从这里开始看，这里是英文字幕版本的播放量最高，大家可以自行去b站搜索中文字母的版本风格非常幽默，让人非常的舒服这些视频就应该够你看了，如果不够，可以添加我微信，我有一份教育机构的视频教程，私信我发你。前面的都是理论，如果你想要找到工作，理论肯定是远远不够的，所以你还需要实战方面能力的提升，这里推荐了黄海广博士分享的一个各种框架的样例，学完我觉得你可以算是入门了当然对初学者来说，如果把找工作比喻做一场考试我觉得刷书是不够的，你还需要一份优质的题目来帮助你知道面试官会问到的问题，这里是我觉得非常不够的一份资料，内容包括python和深度学习等等最后分享一下自己的最后的最后打个小小的广告吧，我自己在这大半年期间经营了一个公众号：,首先亮出观点：自我介绍一下。我把我的自学经历写了下来，没想到这篇文章成了爆款，全网有大几万的阅读量。同时我的故事也影响了很多人，他们纷纷以我为榜样，给自己坚持下去的信心！当然，限于篇幅，还有很多细节那篇没有讲明白。本文将进一步描写当年的状态及一些心路历程，看看能不能与读者引起一些共鸣，能不能有一些启迪。前面已经提到，我本科及硕士所学专业均为机械。毕业后，阴差阳错进入到一家生成液晶屏幕的公司做电子工程师。也正是那时候，我开始接触到了编程，并产生了深厚的兴趣。我所在的公司虽然对外号称是国企，但外界人都认为是私企，而我们内部人员又普遍视它为台企。在这样多重性质的背景下，它继承了这几种类型公司的所有缺点：官僚，小气，加班重！所以，我在里面的状态是，拿着不高的工资，做着无尽的琐事，看着他们官僚争斗。工资低，加班多，我心里积累了一肚子的怨气。而且我们这个岗位行业性太强，如果跳出来的话，只能继续跳到面板行业，其它行业很难。而所以，我开始迷茫了，因为想跳槽，但很难跳到其它行业，就业面太窄了。如果重新回到机械行业，离开两年的我竞争力太弱了，而且我也不想回到机械行业。于是，我每天都在思考着这个问题，前途真的是一片迷茫，看不到未来，也看不清现在。每天晚上我都会倚着阳台的栏杆，看着楼下行色匆匆的人们，在迷茫中彷徨……在这样的情况下，我不得不转行，否则我在当前的环境下只会慢慢失去竞争力，可能不到35岁就已经被淘汰了。那段时间，焦虑、迷茫一直笼罩着我，我也在一直思索着转行方向。由于我在公司里做了大量的编程工作，而且写了一个功能很强大的测试工具（至今电子部门及其它兄弟部门都在用），还有带领团队开发了一个自动参数调优工具（耗时减少，精度提高，获得公司级奖项）。于是，我在想，我要不要转行做 IT 呢？还在第一家公司的时候，我后面又接触到了嵌入式，对其产生了深厚的兴趣，于是我决定转行到嵌入式方向。明确了目标之后，我开始下载资料，准备材料，开始进入转行进程。那时候真的是非常疯狂，晚上加班到 8、9 点回来，回来也不休息，直接开始自学，一直学到凌晨 1 点再睡觉，几乎每天如此。当我有了一定基础之后，在同学的推荐下，我进入到了第二家公司，成了一名真正的每天上班，我都在写 bug （真的是 bug ，写了很多现在看起来很不可思议的 bug），下班就回来狂看书看视频，而且周末也不休息，几乎一整年都是。有时看书看累了，趴在桌上休息一会儿，醒来继续看。入职半年多的时候，领导见我进步很快，就把一个刚毕业的小姑娘安排给我做徒弟。你能想象，一个 0 基础的机械工程师，通过7、8 个月的自学，居然能够做师傅带徒弟？！输出是最好的输入，靠着我给小徒弟讲解，我自己也巩固了不少知识点。同时，我也非常感谢一个 QQ 裙，我有问题的时候，群友都很积极为我解答。在组织里，我从他们身上学到很多知识，同时也与很多人成了好朋友，至今保持联系！就这样，在我没日没夜的学习下，我学会了 但是后来，决定跟老婆一起去广州，离开了第二家公司。那时我觉得单纯做单片机发展前景受限，一定要结合 Linux 才更有前途。于是在面试第三家公司的时候，我一定要选择做 Linux 的岗位。凭借我之前优秀的背景，我也顺利被广州的一家世界 500 强外企所录用。单片机与 Linux 相比，就像手枪与大炮的差别。所以在第三家公司，我依然开启疯狂模式，继续没日没夜学习。现在我依然在这家公司，独立负责公司项目的几个模块，也是一名合格的嵌入式 Linux 应用开发工程师！很多读者看到我的文章，辗转联系上我之后，只为跟我说一句谢谢！我觉得非常欣慰，至少我给转行的人做了一些贡献，哈哈！现在回到主题，如何自学编程。我觉得这个最重要，所以把它放在第一点。你一定要对你要转的那个方向有兴趣，否则怎么继续下去？而且你一定要有激情，否则你能像我做到每天 12 点睡 6 点起？能做到没日没夜学习？能做到没有晚上，没有周末，没有节假日，没有一切娱乐，没有应酬？如果你没那个兴趣的话，我劝你尽早放弃吧。如果你有兴趣但没激情，那么你可能就要花更多时间去学习了。这里放一张我当时自学到深夜的照片，也激励一下大家。你要有激情，你才能坚持，这是前提条件。你们应该能感受到，我是一个特别能坚持的人。关于我特别能坚持，以及非常自律这件事，我也分享了两篇文章，欢迎围观。学习是一件很枯燥的事，如果没有一些志同道合的朋友，很容易就坚持不下来。但是现实中，有时候我们可能找不到有共同目标的人，那我们可以去网络上找啊，现在网络这么发达，找个人还不容易。当时我加入了一个 QQ 裙，有疑问的时候就把问题丢到群里，很快群友就帮我解答。同时，有时候学习累了，就在裙里跟大家聊聊天，吹吹水，顿时心情愉快了不少。圈子对于我们来讲实在是太重要了，特别是我转行时以及做公众号时，真的是深有体会！在圈子里，即使你不说话，就看群友聊天，你也能知道一些行业动态，以及大家所关心的话题。有时候裙友丢出的问题可能正是你所想知道的，互相讨论能激发出很多灵感。正因为深知圈子的重要性，我建立了很多技术交流裙，欢迎在我的公众号「自学编程，资料的重要性不言而喻。但是，资料有的是文本，有的是视频，那要看文本还是视频？这个话题其实有一定的争议性，而书籍其实一般大而全，方方面面都讲到了。但是有很多知识点其实并不高频，工作中用到的概率不大。而对于新手而言，经验比较缺乏，不能有效筛选，容易钻牛角尖。时间宝贵，一定要花在刀刃上。但是，输出也非常重要的，但很多人却忽略了输出这件事！等你去做输出的时候，你就会发现，学会是一件事，说出来是另一件事，而写出来又是一件事！输出会让你把学到的知识重新整理一遍然后再表达出来，而在整理的过程中，你就会对知识有更深入的了解，或者对知识形成一个体系，可以使知识建立关联，更有逻辑性。我之所以建立公众号，一是想把我的转行经历分享给更多人，激励大家坚持下来；另一个就是整理自己的学习笔记，分享给更多人，同时也 同时我也在知乎开辟了专栏，将我的原创干货也收录到专栏里，欢迎关注！最近的一篇暴款回答：花了 3 个多小时，把自己转行过程及转行方法分享给大家，希望对大家有帮助。非常感谢看到这边，还望帮我点个赞，让更多人看到，希望能够帮助到更多多人，先谢过了！,最近有不少朋友私信，值乎来问类似的问题，正好看到这个题目，所以我来说几句。我想很多行外的朋友对计算机认知不是很深入，我给你们简单讲一下编程和电脑知识的关系。第一，有很多生活当中，行外的人看起来的电脑高手，他们并不会编程，同样的，也有计算机系大四的学生不会重装windows。电脑溜不简单的等于编程。第二，科班出身，学习好的计算机系，会懂更多电脑理论基础。计算机系有很多课程和编程无直接关系，比如第三，编程本身是一种上下限都很高的活动，上到火箭，空间站控制，下到一段win批处理脚本，都算编程，所谓简单编程，在不同层次，“简单”都是不一样的。根据以上这三条，再看问题本身，可以看到，其实一个问题，问了两件事情，一个是对计算机知识的熟悉，这点上，无需编程技术，同时，也没有很多培训班会教这个，学习的主要途径是混论坛和自己实际手操。一般非土豪，非发烧友建议你装个虚拟机玩。回到自学简单编程这件事上，对于计算机行外的朋友来说，简单编程主要有两个方向，一是在同样的朋友当中炫技或者自己消遣，一是辅助日常工作学习。炫技和消遣的话呢，没有人会教的，所以你只能去各种公众号，论坛，抄点技术来，一折不扣地按着做，比如什么屏幕截图再把图标隐藏。这种主要是学会快捷键，一般人对电脑的认知就是越用键盘越牛逼。编程语言本身可以有很多不同，比如我是JAVA系的，java可以做出几千万行的阿里巴巴，也可以做出一个几十行的简单的小程序。比如前几天我在一边开无聊的会议，一边自己写了一个J2SE的程序，自动生成毫无意义但闪瞎眼的gif，纯粹是在开会也没别的事情可以做。核心代码就这么点，10分钟的事情出来是个这种玩意，放在gmail里发出去能直接在预览里闪瞎眼。辅助日常工作生活是我认为计算机对行外人士的最大帮助，这里面包含主要三块：1，是office人士熟悉使用MS-excel宏命令。这是一种真正的所谓简单编程，宏使用的脚本语言在计算机编程当中属于任何语言系统的人都需要掌握的基础。而熟练使用excel宏命令能给相关人士带来极大的帮助。2，是windows系统的批处理指令。这是日常生活当中很容易使用到的技术，比如批量改几千张照片的名字，当然有很多软件可以做到，但是毕竟技多不压身。这个以上，我还会建议普通人学习下视频压制和后期处理，就是你们看的各种字幕组的作品，这其实包含了非常简单的计算机编程，在日益趋向视频化的年代，学会视频处理，将会很有帮助。3，是很多行外想转行内的人士的一个过程。很多人来问我，我合适转行吗？我的建议很简单，你先在不放弃目前工作的情况下尝试简单编程，乃至于编程游戏，看看你能顺利地完成吗？比如screeps，比如human resource machine，比如乐高机器人大赛，如果你能轻松完成，那么恭喜你，你有入行的潜力，可以考虑开始学习真正的编程。综合来说，自学,我初中毕业时，在没有电脑、没有互联网查资料的情况下，自学编程并做了大量小游戏自娱自乐。所以我可以非常肯定地说自学编程是可行的。可能有人好奇，我没有电脑怎么编程，用手机吗？当然不是，我学编程的时候，手机长这样：当时中考结果出来，考得不错。爸妈就给我买了这么个东西作为奖励：这个叫“这玩意儿有一个逆天的功能，你应该猜到了。它可以用来编程，用的是一种叫BASIC的语言。那个时候编程的概念不像现在这么，火满大街的人都知道程序员秃头。那时我根本没听说过编程，也不知道是干嘛的，但冥冥中就觉得这个有搞头（天生程序员的料）。研究了内置手册里几个简单的示例后，也不是特别明白。于是我就去了专卖店，让店员帮我下载了几个别人做的小游戏。什么样的小游戏呢？就这种：纯文字游戏。玩了一会儿，了解了游戏流程后，我就开始看这些游戏的代码了。文曲星屏幕很小，总共显示不了10行代码吧，所以我就把代码抄在纸上，大概1000多行的样子。就这样，一边研究代码，一边在手册里面查这些关键字是什么意思。刚开始也不是很理解，那些循环、条件是怎么运行的，会有什么样的结果？那怎么办呢？我就直接改代码，看看代码修改后程序在执行的时候会有什么区别。有时候改错了，会有一个错误提示，也不是太理解，又没有网络可以查，那就强行改，把我能想到的所有情况都尝试一遍，看看是不是碰巧能搞正确。我就这样的条件，靠蛮力学会了编程。做了各种各样的游戏。比较有印象的，打砖块、赛马（其实是一整套赌博小游戏：P）、黑白棋、类似疯狂坦克的射击游戏、现在信息技术这么发达，你想学什么，网上全都有教程，文字的视频的都有，比我条件好多了。自学编程一点问题都没有。我觉得自己在自学编程的过程中，做对了这么几件事，是非常值得借鉴的：学习编程很重要的一点是尽快开始实践，实践大于学习。编程语言的知识点超多，但初期你能用上的只有不到20%，所以不要把厚厚的教材啃完了才动手写代码，尽早开始实践。选择合适的研究案例，可以从一些小游戏，小工具开始，比如贪吃蛇、计算器。这些网上都能找到各种各样的代码，你可以先自己写，然后再看看别人怎么写的。我的专栏里有一些小游戏教程，需要的同学可以看看：编程需要花很长的时间钻研和练习，遇到一个问题研究几个小时是很正常的。有的同学遇到问题第一反应是“我不会做”，然后就放弃了，或者去找答案，这样就放弃了一次思考提升的机会。就像做数学题，如果想都不想直接看答案，你获得的就只是一个答案而已，思维能力和解决问题的能力都没有任何提升。如果你从零开始学编程，可以从C语言或者python入手，这两个入门相对来说比较简单，长期来看也有足够的深度。C语言入门可以看《啊哈c语言》，号称是可以坐在马桶上学的编程书，看这本书要注意痔疮。Python则推荐《回答完这个问题后我决定写个C++自学专栏：,"因为我的本科四年都浪费了，每天浑浑噩噩，并没有都在大学四年好好学习。直到去年，也就是我研二的时候，我才忽然醒悟过来要好好学习，因为我不想毕业就失业，也不想再回到祖祖辈辈那种面朝黄土背朝天的生活或者像父母一样去做体力活。至少能够坐在办公椅上，吹着空调写代码要比顶着太阳割稻子好太多了，因为我小时候真的面朝黄土背朝天似的割过稻子。以前我回答过一个问题：我觉得需要说明的是周一到周五的白天，我还要做实验、看论文以及做老师的横向，感觉那段时间自己的时间利用率高到爆表！那些说学习累的的人，如果。以下回答源自于个人在你你如果问我有什么学习计划的话，说实话我是没有的，我干脆就按照自己前年的学习时间线来回忆一下吧。有几个已经毕业了的师兄师姐在得知我的情况后说我是""但我觉得真的有点夸张了，我只是比别人多花了点时间而已。很多人说我是逆袭？以下回答摘抄自我在知乎专栏上的一篇文章说来可笑，我自己都不相信，因为在 因为校招主要语言就是C++和Java，主要是想要掌握一门企业级开发语言的初衷，研二刚开始的时候，这个时候我开始了有人问我为什么选择 我自己的学习习惯就是先从视频入手，然后再去看书，所以我当时下定决心学C++后，我的第一反应就是去B站上看看有没有相关视频，看了看评论和播放量后，我最终确定了 黑马机构出版的教学视频。搞笑的是，我记得当时自己看完后还留了个言，现在好多人在在我走过的路，看那个视频的时候给我留言。我记得我当时开着 黑马的视频很快就看完了，又开始看经典的 我个人比较喜欢做笔记，如果看的是纸质书就在书上写写画画，如果是 PDF 就做标记之类的，我记得大概花了 月末的时候，我去 LeetCode 写下了自己的第一道题，也就是“两数之和”的题解，从此自己就走上了一边看书 看视频，一边刷题复盘的不归路。转眼就到了九月，这个时候也开学了，研究生老师也开始慢慢安排事情了。由于白天需要帮老师做横向项目和看论文，所以我一般都在周一到周五的白天去干活写代码做项目，傍晚去跑步溜达溜达的，而在每天晚上八点之后看 C++ 书籍和刷力扣题，周六周日两天则是自己的全部学习和复盘时间。在九月自己在看完《C++ Primer》的前八章后就开始疯狂得在力扣刷题了。因为刚上手的缘故，自己刷题速度也比较慢，对于一些不会的题往往需要两三个小时之久。在刷题过程中真的是感觉到人和人之间是有差距的，实在不明白有些人的脑子在呢么那么好使。我现在还记得力扣第一题的评论区有一句名言“有时候对象邀我一起回宿舍，我也会说你先回吧。就觉得这道题没做出来回去了也睡不着，一定要把它做出来为止，为此搞到半夜一两点也是常有的事。整个九月我都沉浸在 C++ 的世界里，也没去学别的科目。进入十月了，在七天假期里除了第一天跟对象出去吃了顿饭，剩下的时间都用来看书学习了。嗯，是的，七天假期我也没出去玩，也没打游戏，都用来看书学习啦。在经过九月一整月的学习我对于 C++ 有大致的了解后，就没那么把心思和时间都花在 C++ 上了。我开始着手学习操作系统和计算机网络了，比如哈工大的操作系统、清华大学的操作系统、南京大学除此之外我也看了一些比较经典的书籍，像《图解HTTP》、《图解TCP/IP》、《老师依旧还是那样，我们每周五还有组会要开，要汇报自己一周的进度，包括项目上的，学习上的。说实话挺烦的，有时候自己一周明明啥也没干，也没啥进展还要在组会上吹牛逼，读研读了三年别的没咋学会，写 PPT 、美化包装自己工作的本事倒是精进不少....时间在指缝中不断流逝，自从开始有计划地学习后，感觉时间过的更快了，有时候一周在不知不觉中就过完了。与之相对的就是视频越看越快、PDF 越滑越快、桌子上的书也越堆越多，吃饭速度也越来越快，每晚回宿舍的时间也基本都在十二点之后了。那段时间，我是我们宿舍回去最晚的一个，还好自己的室友们都给我留着门哈哈。走在回宿舍的路上，我都会想哪一个知识点还没搞懂，明天要再重点看一遍；还有视频中讲到的某一个题，为什么自己没有解题思路；还有哪些书自己还没有看到，规划一下自己的未来一段时间的进度.....十一月的时候我慢慢的开始去看操作系统的书籍资料了，像《现代操作系统》、《转眼就进入十二月了，《C++ Primer》也快啃完了。看书过程中，除了记录自己的所思所想，在看这本书的过程中有些课后题我也没放过，很多人说没必要做课后习题，对此我持否定意见，每章课后习题数量不等，前三道我基本都是必做的。这样一本经典的书籍，它的课后题都是经过精挑细选的，你看完一章学没学会检验一下就知道了，到圣诞节前后，《现代操作系统》和《深入理解计算机系统》也看了一大半了。力扣刷题也一直没落下，在刷题过程中，自己也知道了 C++ 中还有 STL 这种神奇的东西，也知道了另外四本经典的 C++ 书籍《Effective C++》、《我一口气全部买回来了，兴冲冲的直接去看源码剖析，差点把当场我劝退。。。。我又去搜索大家在看这本书的时候是怎么看的，有没有什么值得借鉴的方法。由此知道了侯捷大师，也知道了侯捷老师的几门经典课程。我都看过了，其中有些视频甚至二刷三刷，就比如STL源码解析的视频。侯捷老师有句话讲的非常好：这些视频以前我就保存过来着，后来听说B站将这些视频全都下架了，现在想想还好我保存了，有需要的可以下载一波。就跟我开始学习C++时会选择从黑马C++教学视频入手一样，在学习STL的时候，我也选择了从侯捷老师的 STL 讲解视频入手，依旧是 1.5 或者 2.0 倍速看的。十二月的时候我除了看操作系统的书籍之外也另外看了“STL标准库”和“C++内管管理”这两个视频。对了，如果你跟我一样是C++技术栈，那下面这个项目还是不错的。感觉时间真的不够用啊，想看的书和视频也越来越多，可是自己一天只有 24 个小时，还要帮老板做项目和看论文。元旦那天，我和对象去吃了四川串串晚上去看了电影，然后继续看书、刷题。在放寒假前我特意把两本 《Effective C++》 带回家了，现在想想还好自己带回去了，没白白浪费那个寒假。因为一月份回家的时候，把侯捷老师的 STL 源码剖析视频下载下来了，存在 Ipad 里，因为以前就看过一遍，在火车卧铺上迅速过了一遍，也没花多长花间。回家的时候家里有人生病了，一直在医院接受治疗，外出打工的爹妈也还没回来我就去陪护了。就类似下图这种病房，但我们那是十八线小县城，没有这么干净整洁。一个病房四个床位，每天来探病的人络绎不绝，在那种嘈杂的环境下不可能看得下去书，我又掏出自己的 Ipad 接着看视频，比如尚硅谷的 MySQL 视频、Linux视频都是那个时候看的。一月下旬的时候，家里人出院了，我也能顺利回家不再继续陪护了。也终于能有一个相对安静一点的环境看书学习了，我捡起闲置了大半个月之久的 《Effective C++ 》和《More Effective C++》开始囫囵吞枣起来。也许是《C++ Primer》 打的基础比较好，看着两本书的时候并没有花很多时间，很快就看完了。在家的时候，每天早上八点起床，吃过早饭修整一下就开始看书了，一直到中午十一点左右，中间也没什么人来打扰我；下午吃过饭就午休一会，醒了就径直去医院拿中药回来，然后就开始下午的学习了，下午我一般不怎么喜欢看书，我比较喜欢写代码，我会选择做一些课后题或者复盘一下以前做错的力扣题；到了晚上则是看教学视频，十点多了就玩玩B站，看一些比较有意思的吃播，比如华农与竹鼠的爱恨情仇、硬核厨师阿远、还有大姨绵羊的视频。睡前会跟自己的对象视频一会，然后就不知不觉的睡着了。。。多说一句， B 站真的很多优秀视频，总是有人问我该看什么资料看什么视频，其实你自己去 B 站输入一些关键字，直接找播放量比较高的视频来看就可以的，播放量比较高的视频，质量一般都过得去。后来到了二月，这时候国内疫情已经进入了比较严重的时期了。武汉全城封锁也已经好多天了，每天起来第一件事就是看看疫情发展情况。在学习的时候不断的有新名词冒出来，就好像在学习 C++ 的过程中，网络编程这个词也慢慢出现，我也是知道了 C++ 后台开发跟第一反应就是直接去知乎看有没有推荐的资料，在看过差不多二十多个高亮回答后，我发现有三本书出现频率最高：《我最先看的是游双老师的那本《Linux 高性能服务端编程》。讲真，确实有点云里雾里的，因为以前也没怎么接触过这个。后来转头去看了《在看这本书的过程中，我知道了一个简易版的 这本书上例子很多，我很快就看完了，然后就开始看《Linux 高性能服务端编程》和《Linux 多线程服务端编程：使用 muduo C++ 网络库》了。前者我好好看完了，收获很多，但后者我没怎么看完，随便翻了翻就没看了，我也不是很推荐这本书。后来疫情逐渐严重起来，接到学校通知说要延迟开学，我有点不爽，可也有点高兴。不爽是因为在家呆久了，老妈整天唠叨我，干啥都有错，高兴是因为自己有更多的时间来学习看书了，一回学校就要开始做老师的项目课题了，就没有这么多空闲的时间了。现在想想应该多在那个时候刷一些算法题的，因为现在的互联网招聘过程中很看重算法题，在自己去年顺利上岸后也总结了一些不错的算法题，有需要的可以看看。进入三月后，因为一直没能回学校也复习不了C++，我的笔记都在书上，看不了就很难受，只好转头去看操作系统和计算机网络的知识。同时力扣上的题也开始二刷了，当时我重点刷HOT 100 的那 100 道题，来来回回的刷，一道题最多的时候来回刷了七八遍。我并不是什么算法大佬，自己脑子也很榆，一遍记不住我就刷两遍，两遍做不出来我就去做三遍，总有能做出来的一天。老是有人说什么算法太难，你先看看自己下够功夫了没？对于每道题，你是真的会做了没？是不是你自己做出来的？对于你不会做的题目，你有没有及时复盘和总结？如果你的回答全部都是 如果有 最多在刷题的过程中你可以选择性的看一些别人总结好的资料，比如这种前人准备好的一些刷题笔记之类的，支持三种语言就很不错。如果算法题有障碍可以多看看。在复习完操作系统和计算机网络后，我除了开始继续刷力扣再者，虽然我已经有一个实验室的项目可以写在简历上，但一个项目还是不太够看，思考再三，我决定走前人走过的路，我也选择做一个 emm，真香！我是根据 TinyHTTP 和 游双老师的《Linux 高性能服务端编程》的课后大作业为基础，这两者结合后做的自己的 可项目还没做完，学校已经给消息了让尽快回去，本来想在家把这个项目做完的，没办法匆匆买票，赶紧滚回去了。可能谁也想不到，一个寒假居然能放 150+ 天的。回去学校第二天，我就立马把《在此期间也是把自己的服务器项目完成并且开源到 。按理来说金九银十，他们一般在九月份就应该开始找工作的，但以前的师兄师姐都是在十一月份才开始写简历找工作，去的也都是一些愿意来我们学校进行校园招聘的企业，我也私底下问过他们，得到的解释和答案就是学校比较差，然后 balabalabala 之类的。。在六月份校招提前批的时候，我就兴冲冲的投了简历，结果全部石沉大海，后来才知道提前批是选拔优秀人才的，提前批能上岸的也都是一些好学校的学生，比如各种投完简历没有后文，我也在找自己的原因，除了学校不行是一个因素之外，在思考有没有其他可以改进的地方。后来看了一些比较优秀人才的简历，我觉得问题有可能出在自己的简历上，因为自己的第一版简历写的着实垃圾。所以后面又迭代完善了自己的简历，足足写了 26 个版本的简历，也正是自己精心打磨的简历使得自己在接下来的秋招正式批中能够收获到不少胜利果实。光是修改这 26 个版本的简历，就足足花了我十来天的时间。去年的秋招正式批是在 7 .15 号开始的，在经过提前批投递简历的全盘皆输后，我开始有些畏手畏脚不敢投递简历，因为每个校招学生可以投递一个公司的机会是有限的，比如京东，每个学生都只有一次投递的机会，每次可以投递两个岗位。所以投递简历的机会，不能随便浪费。在别的小伙伴开始大势投递简历的时候，我总觉得自己还没复习好，一直在不断复盘以前学过的知识点。我自己的经历告诉我，永远不可能有复习完的那一天的。因为你每次面试都有可能遇到你不会的题目，所以最好的方法就是在实战中成长，多去投递简历。当然投递顺利是有技巧的，前期去投递一些小公司，积攒积攒经验，后期再投递一些互联网大厂！所以小伙伴们不要抱着把全部的知识点复习完事后，再去开始投递简历，等你复习完了，黄花菜凉完了，校招早就结束了。整个七月我都是在复盘知识点 + 刷题中度过的，7.15 号正式批一开始我就立马开始投递简历了。如果是往届的师兄师姐们，他们投递第一份简历很可能要到十月份去了。还好自己没听他们的话....不知道你们是否体验过笔试全部会做的感觉？就是我所投递的互联网公司发来的笔试，我居然都会做...这不是装逼或者凡尔赛，就是我当时的真实情况，来一道过一道，来两道过一双。在牛客网看到他们发帖讨论今天 XX 的笔试题好难，求交流求解答之类的时候，我下意识地以为他们是不是在夸大难度，因为我觉得貌似没他们说的那么难；傍晚在操场跑步，听到旁边的人在讨论今天的 XX 公司的笔试题怎么这么难，我停下来随口说道：今天这笔试第一题是力扣在我过五关斩六将一般通过一场场笔试后，随之而来的就是一场场面试邀约，为了避免漏掉笔试或者面试，还专门用备忘录记录了一下。最多的时候一天我面过五场面试，上午两场，下午两场，晚上一场。那天面试完后，感觉身体好像瞬间被抽空一般。然后就是笔试、面试、复盘的交替进行、循环往复。那是真难熬啊，也真难受啊，在面试过程中遇到很多自己不怎么会的知识点，有时候也会被问到崩溃或者被面试 PUA ，可来不及伤心和怀疑自己，因为可能一会就要进行下一场面试了。心态真的会崩，当我心态崩了的时候，我一般都是去操场上跑两圈，然后回宿舍洗个澡，再来到实验室看个电影或者看看吃播，然后第二天接着干！还好，最后终于有所收获。如果你能看到这里，确实很了不起。我罗里吧嗦说了一大堆，每个人的成功都是不可复制的，我写下这篇回答的时候是2021年的五一期间了，距离那段时光已经快过去一年了，确实挺快的，还有一个多月自己就要毕业了，时间真的很快。有时候我就在想，“现在你要再问我，我的编程能力是什么时候提高的？那我觉得是在就是在这些时候，我的编程能力提高的，也是在這些时候学会编程的。",我不建议你从“基础”开始，尤其是什么：C语言，数据结构，离散数学……之类的，那是把你逼疯的节奏（感觉这是知乎学院派的风格）。如果你自觉是神人级别的，当我没说。+++++++++++++++++++++++++++++++安利一个自己早年的经历：++++++++++++++++++++最后很煞风景的加个推广：,问：自学当然可行。建议语言：python，因为语法简单，接近人类语言（不过是英语），不用多久就可以照着写几行代码实现一个完整的功能。推荐书籍《当然，你也可以看我写的教程，我的定位也是完全零基础。如果觉得看书看教程太枯燥，也可以网上找个入门级的视频来看，应该能搜到很多。我自作主张把问题再扩展一下，那么：自学前面说的，简单编程，你只要在网上找本好教程，加上搜索和提问，基本就可以搞定，达到写一写小脚本，自动处理文件，批量下载数据，写个简单小游戏等程度。但，如果是要求比较高的，比如是以就业为目标的理论上还是可以，但你会面临几个坎：这几个问题，尤其最后一个，虽然你也可以尝试通过互联网解决，但肯定会绕很多弯路。如果身边有能点拨指导一下的人，会好很多。然后就是，要自学到能找工作，是需要较长时间的学习和练习（一年以上）。对于自学的人来说，非常考验持续力，一般人未必能坚持。如果能有人指导，再能长时间的坚持，那自学出师也不是问题。那些培训机构，其实也就是给你提供了这样一个环境，有答疑的人（是否负责另说）、共同学习交流的人，本身的课程内容，网上免费的都足够多了，没多大差别。,答案是肯定的，而且自学是学习软件编程极其重要的一个途径。不过最好的方式是 自学的同时，有一个可以帮助解决问题的同事或者老师，这样可以避免卡在一个问题上太长时间。 现在有很多途径可以自学，例如IT图书，或者在线视频教程，比如我们九章的基础算法班（对于编程入门小白来说，你需要一个计算机系统学习框架。编程涉及的方向范围很广泛，所以还是要选定一个大致的方向。比如前端，后端，移动，等等。 选择什么样的编程方向，直接决定你编程语言的选择，选择一门最主要的开足马力去学习。（1）基础比较薄弱情况下，可以通过相关入门视频开始跟着学习（2）刷完视频的基础部分后，就可以开始买一本基础的入门书籍开始从基础语法开始入手学（3）跟随书本把书上一些基本的代码在电脑上根据自己的理解输入一遍（4）遇到很难的技术点，可以再找相关的视频讲解，找老师解答。首先，学习算法和数据结构是非常重要的一部分，可以多了解一下九章相关的算法课程。同时配合由FLAG工程师，前算法竞赛中国国家集训队员令狐冲担任主讲，破解面试算法，洞察硅谷大厂最新算法面试动向，教你有重点地刷题。课程涉及的算法面试套路国内外通用，是一门算法求职的必修课，适合有任意一门然后美国最著名的提供线上学位的编程课程:免费在线编程课程，博客和课程平台免费编程书籍/网站如果你只是想简单了解一下编程知识，在对变量类型、循环、条件判断等编程有了基本概念的了解后。就可以开始做一些项目实践，能解决基本的语法问题就差不多了。 如果您还想进一步学习编写代码并且可以成为一名以此恰饭的程序员，那么最好每周能花超过20个小时来学习代码。这样在三个星期之后，你就可以开始着手构建项目，来磨练编程和UI / UX开发技能。实践期间你可能就要花费至少2-3个月来解决编码问题。你花在这上面的时间越多，解决这些问题就越溜，你就越有可能在面试编程工作的技术部分中成功。总之，编程语言就像英语一样，终究只是一个学习工具。如果你想在码农的道路上走得远，一定要实践，实践，再实践九章算法，硅谷一线工程师在线直播授课，已经帮助30000+人成功拿到心仪offer。，零基础转专业找工作必备现，针对知乎用户推出限时免费，原价US$101.68（￥666）现在邀请一名好友共同报名，即可免费学习。添加微信jiuzhang6，回复“知乎Java”领取全额课程抵价券。更多课程信息请访问：,如果没有计算机基础，首先需要学习计算机基础知识，为学习编程打下基础。如计算机组成、计算机的工作原理、计算机操作系统的类型、计算机网络等基础知识。目前计算机语言众多，首先结合学习目的，选择一门入门计算机语言。汇智妹建议，尽量选择一门主流语言，应用范围广，简单易学。选择之前，可先了解清楚每门语言的特点，应用领域。1.准备参考教材，查看视频课，加入首先需要学习计算机语言的语法，掌握语法逻辑。2、寻找练习题，辅助练习；3、在网上找他人的代码，模仿练习；4、在网上找简单的项目，尝试自己敲代码实现。1.菜鸟教程网址：菜鸟教程主要是教你基础语法的，对于入门来说很不错，内容讲的都不是很深很好懂。也会教你如何搭建开发环境之类的。2.网址：3.网址：这没什么好说的，学编程必须要亲自敲代码。多看别人的代码（最好是一个可以运行的完整的工程源码），自己学着写一个一样的，从搭建工程开始自己弄，不要在原工程的基础上改，那样你是记不住的。这里小编就推荐几个可以下载到源码的网站。1、Github网址：2.网址：如果你想从码农晋升为工程师的话，理论就比不可少。到了这个阶段就要多看一下进阶的书籍了，买之前要多看看评论是不是适合自己的，毕竟知识太多了一辈子也学不完的，还是先学一些对自己有用的。这方面小编就做具体的介绍了，只是推荐一些遇到问题时查找解决方法和理论知识的网站给大家认识一下。网址：2.Stack Overflow网址：3.CSDN网址：5.ImportNew网址：网站推荐借鉴了，现场喷口水 的博客《如何自学编程》，原文：自学编程是一件比较辛苦的事，需要较强的自律性和自学能力，加油！,"当然可行，你以为科班出身的真就都是老师教出来的？？？到了大三，除了背会了些基本概念，学校什么都没教会。教点java、C++也都是基本语法。选修的网页设计课，报的人趋之若鹜，守着时间点抢名额。到最后，也就是做一个简单的html页面，连jquery都没教会。我当年很傻，自己买书看，琢磨的毛都快没了，连个环境都搭不起来后来，我跟着视频学，真香学好计算机只需要两步：目前而言，linux C++服务端开发、Java后端开发、我把我学C++的路线和资料分享给大家。视频强推侯捷老师的C++面向对象程序设计，我当前入门C++就是跟着侯老师学的，讲的非常仔细，现在候老师在B站上开源他的讲课视频，大家可以去看：但候老师的课，一如即往的每节都非常长，短的也要三十分钟……着实很难坚持。对于定不住的同学，可以看小甲鱼的《C++快速入门》，每个视频十分钟左右，共49集，看完以后，再看候老师的课会轻松很多。配置书籍首推本书是久负盛名的C++经典教程，其内容是C++大师Stanley B. Lippman丰富的实践经验和C++标准委员会原负责人Josée Lajoie对C++标准深入理解的完美结合，已经帮助全球无数程序员学会了C++。《Effective C++：改善程序与设计的55个具体做法》(中文版)一共组织55个准则，每一条准则描述一个编写出更好的C++的方式。每一个条款的背后都有具体范例支撑，教你怎样才能写出优雅的C++代码。这里也是很多关于C++方面面试问题的出处。有关STL标准库的使用是比较难的，同样推荐大家以视频入手。再次感谢侯捷老师，他录制了46集的系列视频讲解了《C++ STL标准库和 C++ 泛型编程》配置书籍推荐《这本书给我感觉就是既适合初期入门，又适合当字典用，因为里面的内容比较多，好多第一次记不住。所以也可以大致看一遍，以后用时再具体记，这样根据实际去学习我个人觉得效果会更好。《STL源码剖析》学习编程的人都知道，阅读、剖析名家代码乃是提高水平的捷径。源码之前，了无秘密。大师们的缜密思维、经验结晶、技术思路、独到风格，都原原本本体现在源码之中。在你仔细推敲之中，迷惑不解之时，恍然大悟之际，你的经验、思维、视野、知识乃至技术品位都会获得快速的成长。为了方便大家，我把以上推荐的所有书籍、工程文件、开源工程地址，都已经整理好了，需要的同学可以去下载。这几门科目，是考研408科目，也是校招必考内容。无论是新入校园的萌新，还是工作多年的老鸟。都离不开这几门知识点。有些同学上学时候不好好学，到进阶的时候，就出现问题了无论学习什么，最关键是要找一个风评还不错的课程，就从头到尾学一遍，千万别东学一点，西来一些的。这样的效果肯定不会太好。这里给大家推荐一些我看过的，比较认可的课程，跟着学即可。关于数据结构，我想说的是，它是这四大件中最简单、最基础的一个。离开了数据结构，几乎任何的程序都会失效，所以在讨论数据结构的时候，常常要把算法也连带着说一说。要单纯地掌握常见的数据结构，就如同拆解一个个精妙的仪器件一样有趣和简单。正因为数据结构这个东西在程序中的作用，和仪器部件特别相像，不同的数据结构有着不同的特性，因此要想学好数据结构，图解是必备武器！这里强推中国大学上，浙江大学的开设的《数据结构》课程，涵盖了常用的数据结构和算法。辅以教材参考书，强推《大话数据结构》，光看封面你就知道这本书的风格了没错，这就是大名鼎鼎的《算法课常常和数据结构课放在一起，在有些高校中，会存在“数据结构与算法”和“算法设计与分析”这样的两门课。其实，是字面意思就能知道个大概，而学习算法的套路很简单，多看、多写、多上机，既然是思想的集合，看得多了，自然无师自通。至于刷题，很多同学都知道要刷LeetCode。总共两千多道题，而且有些题，非常难，就算每天10题，也至少刷半年。这显然不适合绝大部分同学。所以，我们要找到最核心、最重要的题集，即可比如，如果时间紧张，可以先刷《程序员面试宝典》里的题目，总共109题。刷完以后，有时间，可以再刷《剑指offfer》的题目，共75题。因为这两本书，都是面向面试的高频题汇总，自然有很多题目是重合的。这也正能说明这两本书的重要性。 当然，我也有一本谷歌师兄总结的高频面试算法习题集，包含了常见的数据结构和算法汇总，无论是排版还是内容，都是非常棒。  无论你学习什么语言，都避免不了和操作系统打交道。所有语言的最后执行，都是靠操作系统。比如，你用C++可以使用new创建一个变量来存储数据，也可以通过malloc创建一块空间。但你真的知道他们的区别吗？无论用什么操作符来操控程序，最终真正分配内存空间的其实还是操作系统，所以，想真正了解他们的区别，就必须深入操作系统内部原理。操作系统是程序员进阶必会的基础知识。刚开始学操作系统，不建议闷头看书。相信我，用不了几分钟，你就会打瞌睡。学不了一星期，你就想打退堂鼓。这里推荐B站清华大学的操作系统课程。这是我见过最简单易懂的操作系统课程了。在看视频的同时，如果你还想要教材，在看上部分时，可以搭配《操作系统导论》辅助入门，在看到具体的计算机网络，提供的是管道服务，像自来水管一样单纯，发送方Bob向管道里注入一吨液体，接收方Alice就接收到整整一吨液体，不多一滴也不少一滴。当然这是完美的理想，而现实往往并不是这样的。真实的情况是这样的：Bob与Alice之间自来水管，每隔几公里都有一个蓄水池（增压泵），这个蓄水池有若干个进水管，也有若干个出水管，如果进入管的整体流速 > 出水管的整体流速，那么这两者的流量差就会被临时缓存在蓄水池里。稍后如果进入管的整体流速 < 出水管的整体流速，那么蓄水池里的水就可以乘机流走。但是如果进入管的整体流速 > 出水管的整体流速一直持续，多出来的水蓄水池容不下了，多出来的水就溢出了。这溢出的水是永远都无法到达目的地的，对吗？这个蓄水池有一个专业的名字：路由器，由于蓄水池无法补偿溢出的水，自然就需要有一个流量补偿机制，来补偿流量丢失，那么谁来补偿呢？肯定不能网络来补偿，网络一直以无状态（Stateless）为首要目标，如果让网络来补偿流量，自然就需要网络来记忆状态，这点是难以接受的！最终流量补偿机制的重担就落在了流量发送方Bob的身上，实现这个流量补偿机制的代码赫赫有名，它的名字就是TCP！TCP大佬实现流量补偿机制，其实很简单，就一句话：确认机制！一旦流量到达接收方，需要接收方Alice明确确认到达，否则TCP大佬会周期性使用流量补偿（重传）机制。所以TCP是一个需要记忆状态（State）的代码，它本质是Stateful的！从上面的例子也可以看出，计算机网络相比操作系统好学非常多，因为计算机网络不抽象，在现实生活中，都能找得到例子。而且，如果我们想知道网络中的细节，完全可以通过抓包来分析。课程推荐哈工大的计算机网络系列课程：这里需要说明的是，计算机网络中的细节非常多，李老师讲的也很全面。但这些细节是无需关注的，比如Http协议的错误码分类，我们记不住，而且记住也没任何意义，知道有这个玩意即可，需要的时候，百度一下，它不香吗？关于计算机网络，我们真正需要了解的是osi 7层协议和Tcp四层协议的产生原因和具体使用场景，就足够了。关于图书，绝大部分高校都用的组成原理应该是所有课程里最难的课了，它是一门衔接数电和汇编的一门课。整个课程的核心就是使用数字逻辑电路和触发器搭建一个可以运行汇编指令的机器.如果你需要提前感受一下可以去玩一个叫人力资源机器的游戏.代码区就是ROM,中间箱子是寄存器,两边输入和输出的会和并到一起装到RAM,小人就是运算器.这篇文章里有这个游戏的简介和玩法：你可以从这个游戏做为一个开始。再回来问题上来，我们先推荐学习资料，最后再推荐一些实验性游戏。视频首推配套教材建议选用《深入理解计算机系统》，这个视频应该也是用的这个教材。 里面的逻辑电路相关的内容可以提供具体案例,提高对逻辑门的感性认知.同时可以衍生出很多机制相关的思考,比如 具体的问题转化为数理逻辑,小人作业并发冲突,随机地图生成,权限管理,复杂功能分区规划等等.但校招不光有笔试，还有面试环节，面试考的就是项目实战能力了。有关校招的内容非常多，这里我就不一一列举了。我把我这些年的所知所得，整理成了一本书，开源到github上了。相信会对大家很有帮助，大家可以去看.目前还在持续更新，欢迎大家star。好了，这篇就到这了，希望大家毕业都能找到好工作。",当然可行事实上，除了CS系可能会在大学“系统”地学习编程，其余的某种程度上都是自学的！自学编程，推荐号称胎教语言的Python。Python语法简单，方便上手，并且兼容Windows，Mac，Linux多种操作系统，相关代码库完善，可以迅速实现相关功能。比如web框架Django，可以写个小网页，再比如Pygame，写个小游戏，简单易学，成就感高。目前大热的人工智能相关技术，Python也是首选语言，Github上有着极为丰富的项目库，方便一键调用！比如下面就是利用Python库matplotlib可视化的一张图和利用可谓下可胎教，上可智能。学习的道理大抵是相通的：逐步走出舒适区，学习曲线逐步上升。输入必有输出，最好能有“老师”反馈。此外编程作为一门实践性学习，需要启动最小学习成本（也就是基本语法和概念），然后迅速上手小项目，进行实践输出。学以致用，快速看到学了编程能够做啥，这样才能越学越快。首先推荐一本书，这本书或许是最适合初学者入门的书了，以一个父亲的角度教孩子学习Python。书的实践内容首先是每章后面的习题，让人惊喜的是，基础语法之后的章节，全部都是以小游戏展开的。书籍的示例程序全都在书籍之外，再来推荐一些开源的教程。比如再进一步，Python最强大的就是各种库了，图像处理的OpenCV，数据处理的Numpy，Pandas，Web开发的Django，人工智能的更多海量的原创教程，大抵是通过谷歌、知乎、CSDN等查询学习了。例如在网上搜索Pandas教程，可以检索到 最后，再推荐一款利用Flash卡片学习编程的课程——它的课程特点和前面推荐的书籍很相似，都是先介绍基础的Python概念和语法，再通过小练习和实践去进行巩固的。先看一下入门课：课程目录先是数据与运算，后面还有入门的条件判断，循环，函数，类与对象等，最后还有编程实践。点击课程名可以看到一系列可交互的卡片式学习方案，用提问的方式进行：点开编程基础的知识点可以看到知识脑图，有概念有代码，代码还有相应拆分和解释，小白可以了解代码是如何一步一步写出来的：点开此外还有概念卡，代码卡进行复习夜曲整个课程十分适合小白入门，并且页面清新，交互式体验良好，卡片式学习让人印象深刻。此外，学习过程中也有老师及时反馈，完成正式课程结束后，按期完成学习还有大奖：这种交互式的课程，或许比起视频和书籍，更加适合想要入坑Python的初学者。感兴趣的初学者可以试试他们推出的免费课，20天可以学完Python基础概念，直接在App就能领取体验了！,可以以目标为导向来学，不要去系统性的学习。比如你想做个什么东西，就去尝试开始做，一边做一边学。比如说想做个网站，那么就配置服务器开始，随便找个编程语言，再随便找个流行的框架，按照教程慢慢来。过程中遇到不懂的可以暂时先忽略，一边做一边学习。,"您好，您想自学编程的话，是可以的。不过编程的话，您是想要学web前端、java还是大数据呢？因不知您想要学什么，我简单跟您说一下自学编程您需要确认的几件事。您得弄明白，您自学编程是为了什么，是纯属的个人爱好，还是为了学好之后出来找份高薪工作。如果是个人爱好，那您学编程里面任何一个都可以。如果是为了找份好工作，您得先看根据您自己的实际情况适不适合学。编程这东西，也是时时刻刻跟随着社会走，如果没有坚持学习的心态，那不建议您学编程了。因为编程技术更新迭代比较快，如果您不学，那您终究会看不懂，那不是浪费时间吗？""时间""虽然不收费,但“时间”这东西也无价啊。决定自学，就要有搜集教程的能力。无论是视频还是教材，都得是最近几年的，技术比较前瞻一点的。不然您自学也没什么用。————————————————————————————————————————以上信息确定好了。那您得根据您实际情况看一下，自己是否能自学，并确定一下自己要学的科目：比如web前端、java、大数据等。1. 自己的自律性怎么样好的自律性可以让您保持较好学习状态。2. 持之以恒的耐心持之以恒的耐心可以让你坚持学习完整个课程，没有这样的坚持力很可能会导致半途而废费时费力。3. 自学能力如何自学能力的强弱会直接导致你学习的成果的好坏。4. 逻辑能力怎么样因为大部分编程语言，都需要良好的逻辑能力，像大数据学习的话需要一些数学方面的逻辑知识，如果这方面能力比较强的话那么学起来也就比较容易。您如果有自学能力编程那就更好了。。因不知您想学哪个科目，因此，几个科目的教程送给您。为您解决搜集素材的烦恼。（不懂的地方，可随时问我哦）链接：提取码：7cb9 链接：提取码：链接：提取码：6i9u 链接：提取码：3dcj链接：提取码：du65链接：提取码：or6u链接：提取码：jir1链接：提取码：e68o 链接：提取码：9d3h 链接：提取码：rblg 链接：提取码：4ib9 ",题主口中的“把电脑的一些知识都了解一下”，不是编程。他们只是在编程语言、代码领域、软件开发，比别人了解的多一些。题主想学习电脑知识，应该在知乎搜“如上图的搜索，我就找到了如下这篇回答，这篇回答较为详细的讲解了，如何系统自学简单的电脑知识。题主的问题解决了，接下来说一下学编程，以【兴趣】为目标，或以【提升学校教的编程，这个档次的编程知识】为目标。想以【零基础，或接近零基础】的水平，去学习【入行程序员岗位】目标的编程能力。你可以搜“【学编程有哪些方向】”动力节点11年专注培训“java开发”，这套零基础入门教程，当然两套视频教程都有相对应的资料以及源码。几年前的计算机专业科班生，在毕业前，很多学校就会组织学生，去培训机构参加培训，以此提高学生的就业率和就业档次。网上的教材，就算是把最好的都找出来，并自学学完。也要用上一年左右的时间（至少多半年），学完也是个半吊子（且能不能学完也是个问题），这个水平去找工作，也只能找一家要求不高的公司，低薪打杂。（费这么大劲去低薪打杂？）而找个【好的培训机构】学完，能快速高效的学到比自学更好的技术/项目，学完后能掌握培训机构整理的系统全面技术、和研发的大厂真实项目，这样的能力就能去到大公司，就能独立完成项目工作！而上面去要求不高的公司，很可能遇到奇葩公司。在奇葩小公司发展，和在正规大平台发展，几年后的差距是很大的！在拿动力节点2020年三四月份的就业统计为例：3月就业1名2020年4月面授同学整体就业情况，4月就业1名可以见得，在这篇回答对你有帮助，帮忙点个赞吧~感谢！如果觉得有用，收藏的同时可以关注一下我 ,一定要动手。一定要动手一定要动手剩下的就是如何动手的问题了。最好就是解决一个实际的问题，或者想象中的一个实际问题。从循序渐进与实用的角度考虑，建议你用php+js+mysql 写一个类似留言板的东西只要这个一直专研下去，可以有很多搞头的。此外，js是目前使用最多的语言，真会js，什么C++、java、python都差不多是一个意思。当然，前提是自学一门编程语言而已。真正的编程其实就是一个数学问题。而计算机表达数学符号，你学一下Latex编辑。会这种编辑，再去学算法，学C 之类的会觉得容易好多。会让你懒得去重复造轮子。
有没有一段代码，让你为人类的智慧击节叫好？,,,,,,,,,,,,,,,,,,,,,
为什么很多人反对中文在编程中的使用？,,,,,,,,,,,,,,,,,,,,,
阿里巴巴、美团等各大互联网公司的 Java 类校招对本科生的要求是什么？,前辈们你好。================================================不知不觉这个问题已经过去了几年了，本人现在已经本科毕业，目前是一位变电站值班员。虽然一直都有学习相关知识，但是不是从事开发工作，只能学习到一些比较理论的知识。感谢各位一直对这个问题的关注！,"============================以下正文===================================很荣幸的今年通过了阿里巴巴的实习生招聘！我把我看过的书罗列一下吧！最近正在看《算法导论》，和《算法》，md,其实我也想成为算法狗当然，上面这些书我表示只懂50%，惭愧。不能完全吸收大牛的精髓啊！java：基础非常重要，当然也要深入理解原理，什么JVM,JMM,Classloader，还有一些常见类的源码，自己可以试着分析一遍，现在让你说出LinkedList的内部实现你能不能说出来，HashMap不用多说了，80%的面试都会问到。还有重要的，多线程，并发，网络，IO。这些都是要看看看看的！自己多思考！还有楼主说的那些框架，说实话，你要是基础好了，这些都是能够学得很快的，很多问题，看一下源码什么都就懂了！特别是spring的源码要好好看看，里面的架构设计得非常好！各种设计模式满天飞！另外，linux要了解一下，至少要回基本命令吧，脚本语言可以学习一个。比如py！前端要了解一下.关于如何看书：两个字，除了这些然后呢：每天刷几遍CSDN，做程序员个人觉得眼界很重要，就算这不是你的领域，但是你也要知道一点，所以经常关注其他的新技术是非常重要的！平常多接触一点开源技术，多上上github，争取能在github上面贡献一点自己的东西！然后，多看看别人的技术博客。思考自己！关于我的学习方法和面试经验的分享一、基础二、提高三、深入最后送一句话，越努力，越幸运！要私信我的同学，请先看这篇文章，谢谢！“十年饮冰 难凉热血”，欢迎关注，推送互联网技术，也许是个自媒体. : )PS:转载须经本人同意，并支付报酬","近几个月以来都是在找工作，真心觉得这个过程对我来说很不容易，踩了不少坑，感受也很多。上半年也来过这个帖子看过，从 其实我自己水平并不高，可能书看得太多而项目做得相对较少的缘故吧....关于这方面自己也在努力和反思当中。在经历了这么多场面试后, 我觉得有以下经验是可以分享的:下面列举一些我觉得对我来说非常有用的书单和网站, 还有推荐使用的工具, 仅供参考, 希望能帮助到跟我一样找工作的兄弟姐妹们, 还有尚未定位自己的师弟师妹. 以下所有书籍(网站)建议阅读, 著名的CSAPP, 这本书没有作为教材让我觉得很惊讶, 从c语言到汇编语言到硬件再到操作系统, 写得非常好. 虽然是本非常厚的砖头书, 而且看英文的效果比看中文更好, 但是是一本能帮助深入理解计算机系统的书. 基本上把这本书吃透面试操作系统的大部分问题都不是问题被很多acmer coder奉为学算法的经典之作, 尽管不太适合初学者, 因为它这本书很多内容只提供了伪代码, 而没有具体实现. 但是我建议还是从这本书学数据结构和算法最好, 因为日后的编程语言对实现而言实际上并没有特别大的障碍, 只是适合与不适合的选择罢了, 而把想法转换成编程语言才是对算法知识的考验. 如果不想太过深入的话可以忽略掉 第四部分(高级设计和分析技术) 第五部分(高级数据结构) 和 第七部分(算法问题选编), 你会发现书其实比你想象中薄很多噢!如果你觉得看伪代码转换成编程语言这样的学习方式很吃力, 没关系, 这个pdf链接完全可以满足你的需求, 里面把很多常用的算法实现了(c/c++语言), 坚持临摹(注意不是死记硬背, 是临摹!)绝对能应对大多数公司的笔试编程题, 附上如果你是经常用c++刷算法题的同学, 那么一定经常用STL的各种集合, vector, set, stack, queue等等..它们的实现原理, 在源码面前, 了无秘密亚马逊书店五星推荐噢! 里面大概讲述了很多linux系统的使用和命令行等. linux是Java后台开发人员必知必会的操作系统, 而命令行是使用linux系统必须要面对的 对于不想装linux系统的同学其实可以考虑使用腾讯云学习一些linux相关的命令行知识(没错, 不需要图形界面), 学生价一个月才一块钱, 跟月饼厂一个月十块钱比起来也太划算了吧! 而且用linux也蛮酷的啊（.....）再推荐一个神器: 另外关于linux命令行的详细使用, 有一个网站也特别好用: vim编辑器相对其他编辑器来说确实难用了一些, 入门的学习成本也很高, 不过在linux系统中使用vim可以说是必须掌握的技能. 记得我大一的时候程序设计课的TA就开始安利我们使用vim了, 不过当时真的是太愚钝, 根本就学不会(说得好像现在就学会了一样...)网上关于vim的教程很多, 不过有的感觉太专业(比如自定义功能之类的), 我个人认为只要你安装了vim后, 命令行输入至于自定义功能的话, 交给网上的其他大牛来完成吧233333, 这里强烈推荐 软件学院的计算机网络教材, 里面将计算机网络从顶层到底层逐章分析了一遍, 非常适合初学者阅读, 不过最好能够结合一些实验来辅助理解, 因为里面的讲解确实蛮抽象的日本人著的介绍HTTP协议的书, 对理解HTTP协议的一些细节有非常大的帮助, 插画也很多(日本人的行文风格, 感觉就像看漫画一样), 很容易就理解了觉得上面两本讲解网络的还不够深入?我很钦佩这本书的作者, 能把枯燥的知识讲得那么那么那么细致, 非常强烈推荐这一本, 看完相应章节后大概能够明白为什么TCP/IP要这么设计了. 面试的时候经常问到三次握手和四次挥手, 还有各种状态的转移, TIME_WAIT的时间为什么是2*MSL...中文版快800页, 不过我只看了一些章节, 这本书也是把TCP/IP的细节讲得很深很深, 此外还有非常重要的基本套接字编程, 就是写网络程序的时候那些bind, accept, listen, send, receive函数之类的, 内容非常多, 但是这些是理解多路复用模型所需要掌握的...select/poll/epoll这些系统调用解决了什么问题? 事件机制能不能理解? 就看这本书的前六章了这个也是web开发中离不开的东西, 必须划重点学会的是ER图/SQL语句/存储数据(磁盘|文件|RAID|缓冲池等)/三大范式/索引以及相应的数据结构/事务相关的所有概念, 尤其重点学习SQL, 附上学习这个是做web开发基础中的基础, 个人感觉学习难度不大, 但是建议一口气学完并尝试利用它们做一个简单的个人简历, 否则学习曲线会比较断断续续, 不够一气呵成, 具体教程可以参考 做前端的应该都知道这个玩意的了，简单地说就是能让开发更加方便吧，解放生产力的一个工具，至少大于号和小于号不用再按来按去了...比如说要打出下面的代码测试列表效果之类的：借助emmet插件只需要这么写：.list-block.list-block-search.searchbar-found>ul>(li.item-content>.item-inner>.item-title{$})*6然后按tab键就能生成了....更多的用法详情请见：关于javascript, 其实纯粹使用原生javascript开发网站的话很麻烦, 所以就萌生出了这么一些框架: jQuery解决了浏览器兼容性的问题(虽然据说要过时了), Bootstrap可以很无脑地开发出看起来蛮好看的网页(其实还有很重要方面是响应式前端); 而AngularJS主要是有一个很重要的思想:MVVM, 随后崛起的可能利用上面框架开发的时候会遇到一些很棘手的问题不知道如何解决或理解, 那么建议先看看王福朋的博客: 一个对于前端开发工程师来说非常强大的编辑器, 可以提供各种各样的自动补全(必会emmet插件语法), 附上教程 Jetbrain旗下的微软开源的编辑器, 知乎上也有比较详细的将markdown也是很相见恨晚的东西, 我觉得markdown类似于html, 但是比html更简单简洁, 对于喜欢做网上笔记或者个人博客的同学而言是值得推荐的工具. 半小时应该就能上手了, 教程在此个人认为Java入门最好的书籍, 虽然真的很厚, 不过里面重复的话会写很多遍(每天坚持看一点, 一次性读完, 印象也会很深刻的)...对于这本书而言, 建议有一定项目经验的人才去看这本书, 里面列举了很多开发必须注意的条目. 说实话这本书真的不那么好看, 但是你会发现在某些笔试题上会出现这本书的很多条目学习Java怎么能不知道有这么个牛逼轰轰的IDE! 可以说彻底提升了我的开发效率, 简直相见恨晚, 在所有教程中我觉得极客学院做得最为认真, 附上学习教程（之前推荐的是极客学院的网址，但是现在那个网址的图片好像都看不了了- -）为什么我把Maven放在这里? 因为它蛮重要的(其实用(阅读此书时建议把基础部分的全部搞定,)这本书跟《疯狂Java讲义》是配套的, 里面先讲解Servlet/Jsp(Java Server Page)等技术, 然后就是SSH(Struts/Spring/Hibernate)等后台框架的各种使用, 其实说白了就是把这些技术的官方文档给翻译一遍给你而已. 有人觉得struts2都过时了还有没有学习的必要? 我认为理解一下也不会花太长时间, 因为学习任何框架的重点也不仅仅是用而已. 初学者把重点放在一些思想上的东西(尽管很虚, 但是后续的框架基本都会延续这些思想), 比如控制翻转IoC|面向切面编程AOP|对象关系映射ORM|模型-视图-控制器MVC等, 把这些弄懂后之后的SpringMVC, mybatis等后台框架上手会很快的. 这些东西真的太太太太太太基础了, 搞不懂就要考虑转行了(= . =) 另外看这本书入门Java web的时候不要对作者那种用记事本编程的方式太较真, 会debug到天昏地暗的, 使用Intellij Idea就好了(如果不懂使用Intellij Idea可以先去慕课网或极客学院或csdn等网站看看别人是怎么操作的即可). 还有想说的就是, 请务必学会使用maven, 手工导jar包学习Java Web的方式简直就是弱智行为, 而我居然坚持了三个月..最后, 把这本书当成工具书比较合适: 初次阅读理解就好没必要动手实践, 等到需要的时候再翻阅查询还在用xml配置各种依赖注入/数据源/事务管理器? out啦! 随着微应用的流行, 以注解替代xml配置的开发方式将越来越流行. 作者汪云飞没有讲太多废话, 内容基本都是说Spring Boot的某个特性然后举个例子实战, 有利用SSH开发过简单项目的同学可以尝尝先(我去实习的岗位早就开始用了, 觉得蛮新颖的) 实际上学习任何一个框架的时候要先了解这个框架解决了什么问题, 只有理解了这个后才能更有针对性也更有效率地去进行学习隆重推荐这本神书, 很有趣. 刚开始读觉得很深, 但是和《轻量级Java EE企业应用实战》一起看, 思考那些设计模式存在的意义, 会对软件架构方面的知识豁然开朗...又是个歪果仁写的书, 里面详细介绍了Java并发工具包java.util.concurrent的各种工具以及很多的并发编程实践之道, 是并发编程的入门之作.国人写的书, 也是写Java并发编程的, 与上一本相比个人认为比较凝练/干净/易懂作者叫黄勇, 一本非常让我拍手叫绝的书....首推! 绝对干货! 如果你不想看spring源码也没有太大关系, 这本书带你一步步地开发出一个类似spring mvc的简单框架, 并且逐步地增加需求和完善, 理解了每个细节对于理解Java Web的开发是很有帮助的这本书我觉得是必看的, 可以说是对我帮助最大的一本技术书籍, 覆盖了Java Web很多方面的知识, 比如计算机网络|Tomcat结构|Spring架构|SpringMVC原理|模板引擎实现原理等, 绝对很有收货, 足够有深度也很有难度一本比较详细的书, 其实对于阅读源代码, 跟着作者的思路读, 再结合自己的断点调试进行学习的方式是最好的想知道Java虚拟机为什么会帮你自动收集垃圾而不需要你管理资源释放吗? 想知道Java虚拟机的内存区域是如何划分的吗? 想知道Java虚拟机是如何唯一确定一个Java实现类, 并且如何加载类的吗? 想知道JVM凭什么能够将远程服务器发送的网络字节加载到JVM内存, 从而实现远程过程调用的吗? 这本书你值得拥有!(感谢这本书让我回答出RPC的实现原理)500行代码! 尽管跟Java没有太大关系, 强烈推荐, 里面的程序主要是一些玩具轮子, 都是用python实现的, 学习这个主要是理解别的程序员在开发软件的时候所做的决策/思路/取舍, 虽然我也没看完, 但是觉得这个资源很赞!!! 其实讲道理这种书应该给DBA看才对, 不知道为什么Java Web开发也要看- - 有次面试就问到说对mysql数据库的性能调优有什么看法, 所以就列在上面. 不过说真的有点晦涩难懂, 如果想简单粗暴地应付面试的话就看著, 确实是很好的入门书籍. 实际上如果有操作系统和Web项目后台开发的基础话阅读起来不会特别困难, 主要内容是介绍当今企业应对大型网站高并发请求的种种策略这本书比较深, 介绍分布式Java应用和相应的应用场景, 什么远程过程调用(RPC)呀, 基于服务的体系架构呀(SOA)等, 同时也讲了很多java比较底层的知识, 最后介绍构建高可用/可伸缩系统的工程经验与上一本书类似, 不过个人觉得更偏向于""介绍""互联网安全架构和分布式系统的各种组件(比如分布式缓存|消息队列|搜索引擎等), 目前我只接触了Redis, 相应的组件实在太多了- - 此外对系统监控和数据分析等也做了相应介绍, 这些我感觉比较偏向运维岗的工作人员Redis的基本用法和在生产环境的应用, 值得拥有, 虽然书籍是用python, 不过Redis的源码解读, 怎么说呢, 反正比spring源码好读太多了....而且作者读得很用心, 整理出了带注释版本的redis源码, 这里再着重推荐两个大神的博客, 都是歪果仁此外还有一些常用的学习网站:   ",两年前写的回答，现在陆陆续续还能收到一些赞。很高兴能够对找工作的各位有所帮助。现在会看之前的答案还算满意，不过工作两年也有了一些心得体会和经验教训，在这里分享给大家。这些纯属个人体会，如果不喜欢可以直接跳到后面看原答案。希望能够对各位有所帮助以下为原答案：// 我知道的国内技术栈以Java为主的公司是美团和阿里，百度和腾讯是C++。今年拿到了美团的offer，现在在美团实习。从找工作到现在对这些大概有了一点点体会，来谈谈自己的想法。校招看重基础，就是语言掌握如何，算法题做的怎么样，计算机网络的基础（TCP三次握手，和UDP区别，HTTP协议），后台开发的话还会问些数据库的东西。有项目的话最好，没有的话本科生应该也可以吧（我就没有项目）必备技能：2.算法数据结构3.计算机基础知识（操作系统，网络，数据库，Linux）下面的内容了解过的话我认为还是很好的，应该会给你加不少分。而且也不难。还有两个是不得不说的：其实有项目的话还是最好的，因为企业也知道大家准备招聘的时候回去看各种先写这么多吧，日后想起来再更。祝大家都拿到理想的offer。对了，最后分享的一些免费Java学习资料大家不要忘了领取。,"我写过一个Java工程师学习指南，我把它分为了四个部分，第一步是打好Java基础，掌握Java核心技术，第二步是掌握Java Web技术栈，能够做一些项目，第三步是掌握Java方面的进阶技术，包括网络编程、并发编程、JVM等，第四步是掌握后端进阶技术，比如分布式、缓存、消息队列等技术。按照这样的一个脉络，我觉得能够掌握这里面的绝大部分内容，并且有过相应的一些实践，那么可以算是学好了Java。当然，学好Java只是一个开始，要真的干好活，做好项目，以及其他各方面的技术工作，则是在学好Java的基础去延伸和展开的。本文提到的知识点整理文章现已全部整理到我的个人博客：入门篇最近有很多小伙伴来问我，Java小白如何入门，如何安排学习路线，每一步应该怎么走比较好。原本我以为之前的几篇文章已经可以解决大家的问题了，其实不然，因为我之前写的文章都是站在Java后端的全局上进行思考和总结的，忽略了很多小白们的感受，而很多朋友都需要更加基础，更加详细的学习路线。先声明一点，文章内容不会详细到每一步怎么操作，只会提供大致的思路和方向，给大家以启发，如果真的要一步一步指导操作的话，那至少需要一本书的厚度啦。01 这一步我们往往会直接跳过，但既然是面向小白的教程，这里就提一下吧。首先你需要一台电脑，然后安装好JDK和JRE，JDK提供的是Java开发工具，也就是一些必备的安装好这两个东东之后，一般还要配置一下环境变量，否则有一些目录可能无法被正确找到。IDE指的就是本地开发编辑器，没有了它，你就只能直接在记事本这类工具里敲代码了。IDE最大的好处就是整合了大量的工具和功能模块，让你非常轻松地完成开发。以前大家都用eclipse，不过eclipse已经不流行了，现在我推荐你直接用intellij idea作为你的第一个代码编辑器。如果是用过eclipse的同学，基本上也可以无痛切换。intellij idea可以直接在官网上下载，试用版30天，如果想要永久使用，网上也有一些办法滴。jar包是什么，其实就是将一堆class格式文件打包，Java中把它称为jar包，这些jar包在编译器中能被直接识别，让开发者使用。对于新手来说，可能只需要用到JDK自带的一些API，但是如果你要引用外部jar包，可能就会遇到一些困难了。对于idea来说，导入外部jar包有两种办法，一种是手动导入jar包，一种是使用maven。后者会在Java Web相关的文章中讲起。手动导入jar包其实也不难，你需要先下载好jar包，然后在对应的项目下选择导入jar包即可，具体的方法这里就不展开说了，因为在网上都找得到。02 了解基础语法学习一门语言，最开始要做的事情就是学习它的语法。我最早学习Java语法是在Runoob，这个网站可以让你对任意一门语言完成最快速的语法入门，当然，这只是相当于你浏览了一遍基础语法。想要真正掌握Java语言基础，光看基础语法还远远不够，我在大三第一次接触Java课程，听老师讲面向对象三大特征听得一头雾水，连数组的初始化方式都理不清楚，但这些内容都是我们需要掌握的。所以，为了学好Java基础，我们还需要看视频或者看书进行学习。视频的话，可以到极客学院或者慕课网听Java基础课程，当然也可以看我分享的Java视频课程。大家也都知道，现在Java的培训班非常多，基本上学的东西也都大同小异，不过它们的有些课程还不错，大家有渠道的话也可以去看一看。看视频的好处是你可以更好地接收知识，同时也会耗费你更多实践，所以，有时候你也可以选择看书。看书的话，对于小白来说不推荐太复杂的书，比如《Java编程思想》这种书，新手千万不要看。我个人建议，你只需要先看看《Java入门到精通》这种类型的书就足够了，因为这个部分的学习只是为你后面的学习开个头，你以后可能还要回过头来重新研究这些内容。现在市面上介绍Java基础的书籍实在太多了，质量参差不齐，内容同质化严重，笔者看过的其实也不多。给大家一个建议，你只需要挑一两本书来看即可，这里推荐两本最简单的吧，《head first java》和《Java从入门到精通》。看博客这里再推荐另一种学习方式，就是看博客，博客比起书籍来说，更适合对于某个技术点的学习，你可以很容易地在网上找到这个知识点相关的原理，实现方法，以及代码范例。里没有讲解特别基础的东西，如果你看一些比较基础的文章，可以到Runoob等网站上查看。如果你有一个很明确的知识点想要学习，相信搜搜引擎会给你更好的答案。除此之外，一般的Java书籍或者视频课程都会要求你相应完成一些练习题，这部分内容你需要自己在电脑里使用IDE完成。在IDE里，你可以很好地熟悉Java语言的使用，基本代码的实现，同时可以尝试各种各样的API,并且测试一些语言特性，比如继承，封装，多态等等。另外，这也是你熟悉IDE的一个好机会，因为在公司里做开发可能要用到IDE各种各样的功能，提前熟悉好IDE绝对是有益无害的。03 在Java入门阶段，你可能需要接触到以下这部分知识，不管你是从通过哪种方式学习，这些内容都是你学习Java基础时绕不过的重点。这部分内容是你必须要掌握的内容，在入门阶段你需要把这些基础打扎实，以便于在学习后面的内容时可以更上一层楼。如何把基础打扎实呢，最好的办法就是在IDE上把书上或者视频上的每个例子都实现一遍，当然有的时候你也可以自己写一些有意思的例子。比如int，double，char，以及其包装类。熟悉基本数据类型的使用，了解每种类型所占的字节数，以及它们和包装类之间的相互转换。比如for循环，if else，while循环等等如果是学过c语言的同学，这部分可以跳过了。字符串类型是Java中很重要的类型，它不是基本数据类型，但却很常用，熟悉和实践String相关的api，开始你对字符串的学习吧。数组的初始化方式有哪些，二维数组应该怎么写，把数组当成方法参数又该怎么处理？Java中最重要的两个概念：类和对象，它们有什么用呢，有什么区别和联系呢，请在代码中实践它们吧。对于这部分内容，我相信很多小白只能了解它们的基本使用方法，但是并不明白其背后的一些原理：比如为什么接口和抽象类有这些区别，多态的意义是什么，为什么要有反射。新手在学习这部分内容时，只需要知道怎么用就可以了。当然，你最好把这些特性都实现一遍，以加深印象。至于为什么有这些特性，这些特性背后的原理是什么，不是我们现在讨论的内容，这些内容我们将在初级和中级篇中讲述。因为，要了解这些原理，你得了解JVM，了解并发技术的基础，了解网络基础，甚至更多。显然，这不是你现在能做到的。写一些接口，同时写一些实现类去实现这些接口，并且了解一下为什么我们需要接口，为什么子类需要实现接口里的方法。同理，去实现一些抽象类吧。然后，看看它和接口有什么不同。如何理解继承，子类和父类之间有什么联系呢。封装是一种保护代码的方式，有哪些方式可以实现封装呢。多态一般分为重载和重写，它们分别怎么使用？Java中的异常处理主要用于捕获和处理错误，请你写一些try catch代码块去捕获错误吧。集合类是我们经常需要打交道的东西，List，Map，Set等等，赶快去熟悉API，然后写一些测试例子吧。IO输入流和输出流可以操作文件，网络数据等内容，如何在Java代码中完成这么复杂的操作呢，其实只需要简单的几个api就可以了。为了让系统资源最合理地分配和调度，我们需要多线程，多线程会让程序变得有趣，也会带来很多问题，使用Thread和相关API，去尝试这些有趣的事情吧。1 反射（了解即可，不是入门必须）2 枚举类型和泛型（了解即可，不是入门必须）3 网络通信（了解基本的socket使用即可，需要网络基础）4 数据库操作（了解基本的JDBC即可，需要数据库基础）04 总而言之，对于一个Java小白来说，入门Java可以分为这几步：本文主要是为大家提供一个学习的思路，以及推荐一些学习方法，如果你能够按照这样的步骤去学习，并且配合上一些适合你自己的学习方法来完成学习计划，相信你可以很好地完成对Java的入门。初级篇最近有很多小伙伴来问我，Java小白如何入门，如何安排学习路线，每一步应该怎么走比较好。原本我以为之前的几篇文章已经可以解决大家的问题了，其实不然，因为我之前写的文章都是站在Java后端的全局上进行思考和总结的，忽略了很多小白们的感受，而很多朋友都需要更加基础，更加详细的学习路线。先声明一点，文章内容不会详细到每一步怎么操作，只会提供大致的思路和方向，给大家以启发，如果真的要一步一步指导操作的话，那至少需要一本书的厚度啦。01 jav在上一篇文章中，我们讲到了入门Java的几个步骤，先搭建好环境，然后熟悉基本语法，接着熟悉Java的一些核心技术，并且在代码中进行实现。如果你已经完成了这部分内容的学习，应该会感觉自己对Java已经有一定了解了，可以轻松地写出一些Java代码，比如实现多线程输出数字，再如操作IO流等等。当然，这些代码通常只是一些demo，我们在实际的项目中可能并不会这么简单地使用这些技术，我们可能会同时使用集合类，多线程，以及操作数据库的API。所以，在今天的初级篇中，我们就来谈谈怎么做项目吧。对于大部分Java新手来说，最适合他们入门的项目就是Java Web了。因为Java天然适合做Web应用，并且生态完善，更有很多开源的工具和框架去支撑这些应用，比如Spring，Hibernate，SpringMVC等等。那么，如何开始着手做一个Java Web项目呢。个人认为最好的方式就是看视频了。因为，看书的话，很多内容比较过时，并且一般不会提供源代码。也有一些大佬喜欢推荐开源的项目（在GitHub上面的项目），但是对于小白来说，如果没有很完整的文档去指导他们，那也是毫无意义的。曾几何时，Java Web的项目还在使用JSP + Servlet进行开发，后来出现了Struts2，再后来，出现了我们现在也一直在用的SpringMVC，说实话，不论使用哪种开发框架，你都需要先花一些时间去学习相关的技术，否则你会发现，即使是看视频，你也不知道里面在讲什么。要想做好一个JavaWeb项目，你不仅需要一个好的项目课程，还需要足够的知识储备，下面就让我们来理一理这些内容把。Java基础部分的内容咱们上次说过了，这里就不再重复啦~下面我们分别来说说其他几方面的知识储备把02 推荐资源：在w3cschool学习html，css和js，支持在线测试代码。既然是做Web，就难免要涉及到前端技术，不过，现在前后端分离已经是一种趋势，所以，如果你对前端不感兴趣，也没必要花太多时间去学习。对于大部分同学来说，你最好要了解html的基本标签和格式，自己能够写一些简单页面，CSS的话，也可以稍微接触一些。相对于前面两个服务于样式的技术，我们倒是更应该去学习一下JavaScript，了解它的一些基本语法，以及ajax的使用，因为在前后端交互时，ajax是非常重要的。所以，做一个Java Web项目，你不需要花太多时间在写前端页面上，如果有源代码可以直接使用，当然，对于一些需要修改的前端页面，你得怎么去做修改它，因为有时候你需要使用JSP，JSP既包括前端代码也包括Java代码，如果你完全看不懂前端代码的话，那就很尴尬了。03 JavaWeb的技术栈其实比较庞大，所以我们不要求面面俱到，只是希望你能够熟悉一下项目中可能用到的技术。下面列举一些常见的技术，大家最好要了解一下。推荐资源：《JavaWeb入门到精通》，慕课网、极客学院等网站上的JavaWeb基础课程这是Java Web开发最原始的形态，现在很少直接使用了，但是后来的各种框架其实也是建立在对于JSP，有时候你可能还要学习jstl等标签语言，因为这些标签可以让你更方便地往JSP中插入Java代码。推荐资源：《Spring实战》，慕课网、事实上，除了上述资源之外，你也可以直接到官网上查看快速开始文档。Struts2早已被时代抛弃，Spring则是当今的霸主，你需要了解Spring如何使用，以及SpringMVC如何使用，并且学会在项目中使用它。由于SpringBoot最近很火，并且搭建方式比SpringMVC更简单，你也可以先学习SpringBoot，以便更快速地搭建起你的第一个Java Web项目。推荐资源：《Sql必知必会》，Runoob上的MySQL基础教程，慕课网、极客学院等网站上的视频课程一个JavaWeb应用一定要有数据啊，所以我们需要用到数据库，其实搭一个mysql数据库是非常简单的，但是对于初学者来说最麻烦的就是写sql了，所以，先学会建表，熟悉sql，对你以后做项目也是大有裨益的。推荐资源：Runoob上的Hibernate和Mybatis基础教程，慕课网、极客学院等网站上的视频课程当你学会了使用sql去查询数据，可能还不足以让你在项目中很方便地处理数据，因为我们还需要一个步骤，就是把数据库的数据转化成Java里的对象。orm框架就是为了解决这一问题而出现的，它可以让一张表和Java类一一对应，让数据查询变得非常方便。Hibernate和Mybatis都是orm框架，只不过现在mybatis越来越火了。所以，你需要了解这一技术，因为它会广泛地运用到大部分Java Web项目中。推荐资源：《maven实战》，易百教程里的maven教程，慕课网、极客学院等网站上的视频课程刚才咱们已经说过了Spring，orm框架，以及MySQL等方面的技术了。实际上，一个简单的Java Web项目也只需要这些东西了。但是，有一个问题，就是：一个项目里用到这么多技术，所需要的jar包也会很多，我们如何管理这些jar包呢。如果直接导入所需jar包，那当jar包更新或者需要替换时，每次都要手动操作，非常麻烦。另外，当jar包很多时，项目打包后的war格式文件也会很大，不利于传输。为了解决上述问题，maven应运而生了。maven通过pom.xml文件来指定所需的jar包，并且自带了很多构建相关的功能，比如编译，打包，运行单元测试等等，因为它本身就是一个构建工具。当然，新手可能还难以理解这些概念，你必须要知道的是，大部分Java Web项目需要用maven来管理，你需要学会maven的基本用法，最基本的用法就是：学会修改pom.xml文件。推荐资源：慕课网、极客学院等网站上的视频课程。对于小白来说，Tomcat相关的技术是非常复杂的，毕竟它是一个应用服务器啊，事实上这个时候，你只需要学会如何安装Tomcat即可。毕竟，它在项目中的作用就是提供一个运行环境而已。正常来说，你只要下载解压Tomcat的压缩包即可。由于现在的IDE都支持集成Tomcat，所以一般情况下你都可以在IDE中配置好你的Tomcat路径，然后设置好你的项目路径，IDE会自动把你的工程代码部署到Tomcat服务器上。如果你使用想跳过IDE直接部署工程到Tomcat上，也可以直接编译工程并且打包得到war格式的文件（这个步骤可以使用maven来完成），然后拷贝war文件到Tomcat下的特定目录即可。上述两种部署方式的详细步骤请到搜索引擎寻找答案。推荐资源：既然要做项目，为什么不把它发布在GitHub上。当你熟悉了Git指令之后，你可以很方便地发布你项目中的每一次更新，并且同步到GitHub上，这样既可以让你更好地管理项目版本，又可以让你GitHub更加活跃，为你未来的面试加分。所以，赶紧学好Git指令，然后开启你的项目之旅吧。04 除了上面几种必备的技术之外，有时候我们在项目中还会用到其他东西，在这里我们把它们叫做组件。这里只做简单的介绍，至于具体怎么使用，在网上都可以很容易地找到相关文章。当项目代码比较多的时候，容易发生错误，日志可以很好地记录代码运行时的错误，常用的日志系统有log4j,logging等等，另外你还需要了解一下slf4j。日志系统可以记录代码问题，单元测试则是为了避免代码出错，常用的单元测试组件主要是JUnit，建议你找个文档看一看，然后下载下来玩一下。JSON逐渐成为前后端数据交互的标准格式，为了在项目中使用JSON的API，你也需要导入它的jar包，一般我们都会使用阿里提供的fastjson，赶快下载来玩一玩吧。当然，常用的Java Web组件还有很多，比如HTTPClient，再比如一些加密工具，一些压缩工具等等，这里就不再一一列举了。5 今天的内容就到这里了，与其说是初级篇，反而更像是“项目篇”呢。因为学完基础内容之后，做项目是最好的复习和实践方式了。所以这篇文章围绕着做项目来展开，也就不足为奇了。今天我们主要讲的是，做好一个JavaWeb项目，需要哪些知识储备，需要了解哪些技术，并且我也推荐一些比较精品的视频课程。后面我还会写一篇文章，专门讲一讲怎么做项目，会更加详细，更加侧重怎么去做，敬请期待吧。(9K 赞同，26K 收藏）（7K 赞同，17K 收藏）（8K赞同，30K收藏）（3K 赞同，10K 收藏）（3K 赞同，5K 收藏）-----------------------------------------我是分割线-------------------------------------PS：私信很多，因知乎不常上，有事可以来公众号找我1、点赞、关注、支持一下我的回答8，收藏数是点赞数3倍真的扎心哇▼都看到这里，不点个赞就说不过去了~","哈哈，恰好关注了  和  。看到他们的回答，感觉好欢乐，哈哈。。正好自己是Java方向，今年3月份通过了阿里的实习招聘，暑假实习后目前转正通过，来答一发。熟话说，大公司看基础。阿里校招研发工程师岗位考察的基础可以大致总结如下：1，操作系统。尤其是内存/线程/进程方面2，计算机网络协议，重点关注 TCP/UDP/HTTP。3，数据结构与算法。我本人也没搞过4，数据库，这一部分倒没怎么问我。不过资料显示数据库通常考察以下几点 1） mysql存储引擎中索引的实现机制；2）.数据库事务的几种粒度；3）.行锁，表锁；5，设计模式，熟悉常用的几种设计模式就行。6，Java语言基础。熟悉java语言基础，了解JVM、内存模型，重点考察 面向对象、集合框架（继承关系，实现原理）、异常体系、IO体系、并发集合、多线程。熟悉多线程编程/并发/7，J2EE，熟悉Spring/Spring MVC , ORM 什么的吧。看过源码，了解原理之类的也明显可以加分。8，Linux，熟悉基本的9，自己做的项目。10，其他发散性的问题。拼人品了。不要想得太难了。但是能做到以上几点的，也是很少数应届生。不过楼上几位大神说的也都是对的，你这些书看完和吸收的话，不是",看了这么多的书，平均一本书厚的1000页，我最快大概的看，不求甚解，也要一个半月，这个看完只记得名词，只是熟悉，你的这么多书，真的看完了吗？那些课后题你全是你独立完成的吗？,这是一个不知名的本科生的一点心酸经验啊，我当年（大二）也是想逃离学校流水线培训的传统，想去主流的互联网公司，所以就奋斗啊奋斗啊，现在大三，在北京中关村实习，校招关键还是看基础，因为工作的软件各种各样，进公司就靠基础去学习的，几乎每一个公司的面试官真的对一些问题是必问，要做的是天天有计划地积累！写代码！看书！总结！看别人的面试经历！考考自己！在深度的基础上又有一定广度，还有就是实习和项目的问题，真的有那些经验的确可以加分，毕竟节省很多培养你的成本，但是没有也可以，你的基础一定要扎实，我当年在学校就没有实习机会，也没有高端的实验室，所以只能自己找找资料，看看学长们的学习经验，好好把基础学好，多写写软件！目标的话：面试的时候你能够很自信的表现自己的积累就很棒了，（还有这里面的问题你也要能说出大部分的回答）！说说我觉得重要的几点吧：1，数据结构，原理，应用，复杂度等基础一定熟练，结合算法写代码。2，算法，说白了，面试的时候面试官不是来为难你的，大都会问到经典的题目，平时肯定要多写代码，有篇文章总结常考算法题目很不错的：。每天练两三道吧，时间一久你就有了那种做算法寻找的突破口的思维了，刷刷题leetcode，3，java，我个人认为一定要写软件，最好是可以开源，那种感觉真的不一样，比如你写一个使用注解的4，校招java肯定会问到jvm的，垃圾收集，内存模型，内存管理，线程安全，ClassLoader，类加载，字节码编译（挺重要的），javac等等，出名的书有《深入理解java虚拟机》，《分布式java应用:基础与实践》也有一些jvm的总结，写点demo，准备面试前看看别人的面经，自己试着回答回答，慢慢记得5，其他一些比较重要的java基础有nio，io，集合框架源码等，我之前面试几家知名互联网公司，这些都问到了，看看Netty的源码，不用复杂，看netty3也很好了，可以的话自己用NIO写一个可以搭建echo服务器框架demo，这样你的nio就很熟练了，还有看看Map，Collection接口下的集合的源码，比如HashMap，ArrayList等等，是否可以为空，线程安全否，排列，异常处理，6，数据库我觉得和java一样重要吧，虽然现在NoSQL什么的，MySQL仍然使用非常广，使用可以网上查查不用看书了，《高性能MySQL》确实不错，挑挑重要章节看，面试一般都会问数据库的，比如索引优化，分区分表，查询优化，索引数据结构，sql语句熟悉，看了这本书还怕被问MySQL？怕个锤子。7，并发，这个内容也很多啊，比如《java并发实战》这本书就可以看得出，比如Semaohore，---------------------------------------------------书说说我觉得不错的资料吧：《《《effective java》好多面试深入的java问题在这上面能解答，真是非常值得一读，比如问你在什么时候需要定义自己的序列化？虽然翻译不好~。《《《深入理解java虚拟机》很经典，我也至少看了4遍。《分布式java应用:基础与实践》个人觉得非常好，让你少走弯路啊。《《Java并发编程实战》这个应该是必读吧，并发单独写本书，课件内容需要好好研究的，多写代码压测也很有意思的。《gradle实战》或者《maven实战》个人觉得maven在工作中用的多些，但gradle更新。《高性能MySQL》看了这个面试mysql的知识也不怕什么了吧~《MySQL技术内幕:InnoDB存储引擎》高人推荐，看的不多，但是绝对厉害啊。《Java核心技术》没看过第二卷，其他知识从另外的书上积累的。《《重构》个人觉得挺好的，不然实习的时候负责的老师会叫你改改改，开玩笑，最主要是提升效率，方便维护。---------------------------------------------------资料（待补充~）,大家可以关注我的公众号：自己在几年前参加的校招，经历过很长一段时间的复习，在当年的校招中拿到了很多公司的offer，最后入职了阿里。那段时间，自己看了很多大厂的面经，从各个面经中总结出一套我认为『应届生应聘互联网公司Java职位必会的题目』。还有，我知道很多人会问关于这些题目的答案问题。答案我都有，由于篇幅有限没办法直接贴上来。这些题目的答案我会在我的公众号及,要问各大公司对应届本科生有什么要求，最简单粗暴，却也最有效的方法，就是去看他们每年都考应届生们什么问题。牛妹这里整理了111篇各大互联网公司Java工程师笔经面经，希望能够帮到大家。更多名企笔试真题解析、面试经验交流、招聘信息内推，尽在牛客！求职之前，先上牛客！快快下载拿offer！最后附赠一个彩蛋~最后，祝大家都能成功斩获offer~,！！遗憾的是，大佬只给出了轮廓，具体该怎么学，并没有给出，我想，这应该是很多同学关心的问题。借这个机会，我给大家详细地梳理一波，记得收藏哦！（收藏是点赞的三倍，哭了T﹏T，顺带把赞也安排上呢）重申一下我学习计算机的观点，我想这会对你快速建立起自己的知识体系很有帮助！并且，你应该按照我这个观点从大一就开始实践起来！如果你要学习物理，我推荐你顺着物理的发展史学习，先学习牛顿的经典物理，再学习热力学、电磁学，然后学习相对论、量子力学这些彻底推翻经典物理的，最后学习电动力学这种硬核的。整个学习过程，是先学习电路，然后学习冯诺依曼结构，造一台计算机？接着再学习如何用汇编写个 mini os？接着学习如何写一个简易版的编译器？最后再学习高级编程语言，比如说 Java、Python？显然这样是行不通的！什么是顶？我想一门高级的编程语言就是，比如说 Java！当你学习到 Java 并发编程中的“原子性”、“同步”、“异步”、“进程”、“内存分配”这些概念的时候，你自然而然会产生很多疑问，然后就会去学习计算机组成原理、操作系统，然后你的一系列问题就会逐渐被解决。当你发现，用 Java 实现某个业务需求时，人家的算法实现比你快得多，你自然会好奇，为什么会这样？然后你发现人家用的数据结构和你的不同，大佬把 Java 语言基础放在了第 6 的位置，我认为应该放在第一位。你不要一上来就去读《Java 编程思想》这样的经典黑皮书，因为你还没有一丁点编程基础，去看这本黑皮书很容易劝退。你可以先看看这些，全部都是校招面试中考察的重点。为了整理这份 PDF，我可是费了老大劲，希望你能珍惜。然后你可以去看视频入门，无论是动力节点的，还是尚硅谷的，我觉得都可以，你可以每个看那么五六节，感觉哪个老师的风格更适合你就选哪一个。看着弹幕学着习，就是那么朴实无华。不过，这两份视频教程的内容实在是太多了，以至于有些内容是可以跳过的，这样能节省不少时间。比如说：因为现在都用 IDEA 作为集成开发环境了，完美不需要再搞这些事情。在这之后，推荐给你三本书：《Java编程思想》、《Java 并发编程实战》和《深入理解Java虚拟机》。我桌子版摆了一大摞 Java 相关的书籍。Java 并发编程和 Java 虚拟机是校招面试中的核心，我把一些题目列出来，你可以拿来自测。虽然大佬在第 7 点没有提 Spring Boot，那是因为 2014 年的时候 Spring Boot 还没有走入大众的视野，当时的 SSM（Spring+SpringMVC+MyBatis）还是顶梁柱！框架部分不仅仅是要掌握怎么用，更重要的是要知道原理，Spring 的核心说一千道一万，就是 AOP、IoC。AOP（Aspect-Oriented Programming），也就是面向切面编程，能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。IoC（Inverse of Control），也就是控制反转，是一种设计思想，就是将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理。DI（Dependency Injection），也就是依赖注入，原来叫 IoC，能让人更加直观和清晰地理解其背后所代表的含义。Spring 怎么学？可以到 B 站上看一下先学习 SSM，再学习 Spring Boot。Spring Boot 的出现，并不意味着 Spring 和 SpringMVC 已经过时了，从设计目的上来说，Spring Boot 只是实现了 Spring 的自动装配，降低了项目搭建的难度。从技术角度来说，Spring Boot 的底层依然是 Spring 的核心机制，也就是 AOP 和 IoC，Spring Boot 只是一个承载者。在我看来，学习 Spring 的正确路径应该是 大佬没有提 C 语言，为什么我要提呢？为什么学了 Java，又要学习 C语言呢？这是因为，归根结底，我们学的是计算机科学（CS），而不是编程语言。要想进阿里、美团这样的大厂，计算机组成原理、操作系统、计算机网络、数据结构与算法这些知识点又是不可获取的，而这些知识，有很大一部分是建立在 C 语言的基础上的。给你推荐一门课，浙江大学为什么要学习计算机组成原理呢？我逐渐发现，学习各种编程语言、框架，就好比在练拳法招式，可以在短时间内提高你的武力值，但想要进一步更上一层楼，就必须得扎马步，练习内功心法，对于我们程序员来说，什么是大家都知道，学了计算机组成原理，你就可以学习编译原理、操作系统这些硬核的计算机基础知识，不然的话，学起来就会缺少根基。明白了计算机组成原理的重要性，你肯定要问，如何才能学好这门课呢？先来分享一些学习资料。推荐两本书，《计算机是怎样跑起来的》和《同时，可以配合北京大学的《计算机组成》公开课来学，讲师为两本书都不厚，属于浓缩精简版的，配有大量的图文。相比较来说，《程序是怎样跑起来的》比《北京大学的这门公开课一共也就 10 多个小时，所以不用花太多时间就能搞明白。同样推荐两本书，《这两本《深入理解计算机系统》又简写为 CSAPP，在网上有配套的视频课程，地址：中文字幕是通过 Google 翻译后重新校对的，精校版见：如果想看英文原版的，见地址：另外，《编码：再来分享一些学习心得。学习计算机组成原理的时候，会涉及到很多很多概念，每个概念剥茧抽丝后，又会牵扯出很多相关的概念，比如说你想理解 CPU 是如何实现加法运算的，你就会遇到算术逻辑单元这个概念，然后还要理解计算机是如何把整数表示成二进制数的等等。这些概念你很难在短时间内全部消化掉，所以你需要隔一段时间重新去学习，并且要结合实际的工作需求去理解。比如说，涉及到金融计算时，为什么不能直接使用浮点数？这背后的原因就是，计算机存储的是二进制，而二进制是无法精确地表示浮点数的。但二进制可以精确地表示整数。（至于为什么，就需要深入地学习计算机组成原理了。《程序是怎样跑起来的》这本书的第二章和第三章就会详细地解释）所以实际的工作当中，一般会用整数来表示金额，比如说 1.11 元，会乘以 100，用 111 来表示，返回给用户的时候再除以 100，免得在计算的过程中丢失精度。也就是大佬提到的第一点，需要关注内存/线程/进程等方面。为什么要学习操作系统呢？第一，面试要考；第二，无论学习哪门子编程语言，比如说 Java、C/C++，都需要和操作系统打交道，像 Java 中的多线程技术，其实是由操作系统来负责进程和线程管理的；第三，学习操作系统，还能学到内存分配方面的知识。《操作系统是计算机系统中负责管理各种软硬件资源的核心系统软件，为应用软件运行提供良好的环境。鉴于那么多的关于网络服务端和客户端的软件工程，计算机网络是计算机科学中价值最为“立竿见影”的领域之一。其他书籍：需要关注的重点：也就是大佬提到的第 4 点，可能不会问得特别多。SQL 语法需要准备一下，有的面试会让你根据场景写出 SQL。MySQL 和 Redis 是面试中常问的两个数据库，这里推荐看《MySQL 技术内幕 innodb 存储引擎》和 《Redis 设计与实现》。在线学习网站：其他书籍：也就是大佬提到的第 5 点。常用的几种设计模式必须得清楚，比如：我认为设计模式是初中级程序员迈向高级程序员的必经之路。有不少程序员，前期冲劲十足，但后继乏力，都是吃了设计模式的亏。在工作的前几年，大部分程序员都处于熟悉编程语言的阶段，也就是处于“技”的阶段，随后就要进入“术”的阶段了。在编程领域，“术”的典型代表就是“设计模式”。你可能听说过，学习设计模式非常的重要，那么为什么这么重要呢，设计模式到底是什么？打个比喻学编程就像学武功一样。武功要练得很牛逼，有两样东西不能丢。第一，是内功；第二，是武功秘籍。内功对应到编程就是我们编程基础能力，那编程的设计模式就可以想象成武术中的武功秘籍。。像阿里、美团，这些互联网大厂，对算法都比较痴迷。给你看看阿里校招对 Java 研发岗的要求。可以看得出，校招不同社招，更看重的是你的计算机基础功底和你的学习能力，对数据结构与算法的要求甚至高过计算机网络和编程语言。为什么数据结构这么重要呢？清华大学计算机系。我这里有一份美团大佬的刷题笔记，强烈推荐给你！展示点内容给你看下。也就是阿里大佬提到的第 9 点，大学阶段，做什么练手项目呢？推荐你看看我之前的一个回答。一共十条，刚好十全十美。最后，给你聊一下我认为学编程当中最重要的三点，尤其是针对大学生来说。先说热爱。有的同学是一开始就热爱，所以选专业的时候就选择了计算机专业；有的同学是误打误撞，比如说我就是，大学其实选的是机械自动化，后来被调剂到了计算机网络专业，属于典型的后知后觉型。一开始，和大多数新人一样，我认为编程好难学，班里面的好多同学也认为好难学，能转专业的就转，只有不能转的才留了下来。十几年前的计算机专业远没有现在这么热闹，很多学校都是作为边缘专业来录的。和我同届的高中同学，我认识的当中，没有主动选择计算机专业的。所以，我对计算机的热爱，纯粹是经过后天刻意练习的。很多同学可能会不解，热爱也能练习？当然。当我发现这个专业找到工作，能养活自己，能不再伸手向父母要钱的时候，热爱就一点点的来了。随着年纪的增长，我越来越喜欢这个专业了，不是因为它充满魅力，而是它让我的生活变得越来越好。对，我是个俗人。有了热爱，你自然就会去努力！这是水到渠成的一件事情。但往往很多时候，你可能会迷茫，不知道该往哪里去努力，不知道自己的劲往哪里使！。,"要的不是平台型人才，它要的是计算机人才。
平台型人才可以培养，
什么叫计算机人才？掌握操作系统，数据结构，等等",楼上很多大牛都给出了很多阅读资料，很值得好好阅读巩固基础。我也看过一个比较“精华”且实用的阿里面试问题的帖子，不仅仅适用于社招，也适用于校招。大家可以参考下：来源：,### 开头2017.08.21  正式开启我入职的里程，现在已是工作了一个星期了，这个星期算是我入职的过渡期，算是知道了学校生活和工作的差距了，总之，尽快习惯这种生活吧。下面讲下自己的找工作经历和大学阅读的书籍，算是一种书籍推荐，为还在迷茫的你指引方向，同时为我三年的大学生活致敬！也激励我大四在公司实习能更上一层楼！### 找工作经历这段经历，算是自己很难忘记的经历吧。既辛酸既充实的日子！也很感谢自己在这段时间的系统复习，感觉把自己的基础知识再次聚集在一起了，自己的能力在这一段时间提升的也很快。后面有机会的话我也想写一系列的相关文章，为后来准备工作（面试）的同学提供一些自己的帮助。自己在找工作的这段时间面过的公司也有几家大厂，但是结果都不是很好，对我自己有很大的压力，当时心里真的感觉 ：“自己真的有这么差”，为什么一直被拒，当时很怀疑自己的能力，自己也有总结原因。一是面试的时候自己准备的还不够充分，虽说自己脑子里对这些基础有点印象，但是面试的时候自己稍紧张下就描述不怎么清楚了，导致面试官觉得你可能广度够了，深度还不够（这是阿里面试官电话面试说的）；二是自己的表达能力还是有所欠缺，不能够将自己所要表达的东西说出来，这可能我要在后面加强的地方；三是我的学校问题，好些家公司面试官对我的学校都有问及，可能觉得我的学校在上海，但是觉得上海好像没这么个学校，在此澄清下，我的学校是华东交通大学，在南昌，不是在南昌，要说和上海交大有没有渊源，我只能说有，具体请去百度查。在面了几家公司失败后，终于面了家公司要我了，我也确定在这家公司了。很幸运，刚出来，就有一个很好（很负责）的架构师带我，这周就给了我一个很牛逼的项目给我看（虽然自己目前还没有思路改里面的代码），里面新东西很多，说吃透了这个项目，以后绝对可以拿出去吹逼（一脸正经.jpg）。目前我的找工作经历就简短的介绍到这里了，如果感兴趣的话，可以加群：528776268   进来和我讨论交流。### 书籍推荐大学，我不怎么喜欢玩游戏，自己也还算不怎么堕落吧，看了以下的一些书籍，算是对我后面写博客、找工作也有很大的帮助。如果你是大神，请忽略，如果你还是还在大学，和我一样不想把时间浪费在游戏上，可以看看我推荐的一些书籍，有想讨论的请在评论下留下你的评论或者加上面给的群号。#### Java1、《Java 核心技术》卷一 、卷二              两本书，算是入门比较好的书籍了2、《疯狂 Java 讲义》                                很厚的一本书，里面的内容也是很注重基础了3、《Java 并发编程的艺术》——  方腾飞 、魏鹏、程晓明著        方腾飞 是并发编程网的创始人，里面的文章确实还不错，可以多看看里面的文章，收获绝对很大。4、《 Java多线程编程核心技术》——  5、《Java 并发编程实战》 这本书讲的有点难懂啊，不过确实也是一本很好的书，以上三本书籍如果都弄懂了，我觉得你并发编程这块可能大概就 OK 了，然后再去看看线程池的源码，了解下线程池，我觉得那就更棒了。不想看的话，请看我的博客：[Java 线程池艺术探索](6、《Effective Java》中文版 第二版       算是 Java 的进阶书籍了，面试好多问题也是从这出来的7、《深入理解 Java 虚拟机——JVM高级特性与最佳实践》第二版     这算是国内讲 JVM 最清楚的书了吧，目前还是只看了一遍，后面继续啃，大厂面试几乎也是都会考 JVM 的，阿里面 JVM 特别多，想进阿里的同学请一定要买这本书去看。8、《深入分析Java  Web技术内幕  修订版》许令波著   里面知识很广，每一章都是一个不同的知识，可见作者的优秀，不愧是阿里大神。9、《大型网站系统与 Java 中间件实践》—— 曽宪杰 著    作者是前淘宝技术总监，见证了淘宝网的发展，里面的讲的内容也是很好，看完能让自己也站在高处去思考问题。10、《大型网站技术架构 —— 核心原理与案例分析》 —— 11、《疯狂Java.突破程序员基本功的16课》 李刚 著       书中很注重 Java 的一些细节，讲的很深入，但是书中的错别字特多，可以看看我的读书笔记：[《疯狂 Java 突破程序员基本功的 16 课》读书笔记](12、《Spring 实战》   Spring 入门书籍13、《Spring 揭秘》—— 王福强  著   这本书别提多牛了，出版时期为 2009 年，豆瓣评分为 9.0 分，写的是真棒！把 Spring 的 IOC 和 AOP 特性写的很清楚，把 Spring 的来龙去脉讲的很全。墙裂推荐这本书籍，如果你想看 Spring，作者很牛，资深架构师，很有幸和作者有过一次交流，当时因为自己的一篇博客  [Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子](14、《Spring 技术内幕》—— 深入解析 Spring 架构与设计原理     讲解 Spring 源码，深入了内部机制，个人觉得还是不错的。15、Spring 官方的英文文档          这个别提了，很好，能看英文尽量看英文16、《跟开涛学 Spring 3》  《跟开涛学 Spring MVC》  京东大神，膜17、《看透springMvc源代码分析与实践》    算是把 Spring MVC 源码讲的很好的了见我的笔记：[1、通过源码详解 Servlet]([2 、看透 Spring MVC 源代码分析与实践 —— 网站基础知识]([3 、看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC]([4 、看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析](18、《Spring Boot 实战》19、Spring Boot 官方 Reference Guide        网上好多写 SpringBoot 的博客，几乎和这个差不多。20、《JavaEE开发的颠覆者: Spring Boot实战》21、MyBatis 当然是官方的文档最好了，而且还是中文的。自己也写过几篇文章，帮助过很多人入门，传送门：1、[通过项目逐步深入了解Mybatis（一）](2、[通过项目逐步深入了解Mybatis（二）](3、[通过项目逐步深入了解Mybatis（三）](4、[通过项目逐步深入了解Mybatis（四）](22、《深入理解 Java 内存模型》—— 程晓明 著      我觉得每个 Java 程序员都应该了解下 Java 的内存模型，该书籍我看的是电子版的，不多，但是讲的却很清楚，把重排序、顺序一致性、Volatile、锁、final等写的很清楚。#### Linux《鸟哥的Linux私房菜 基础学习篇(第三版)  》鸟哥的Linux私房菜：服务器架设篇(第3版)    鸟哥的书#### 计算机网络《计算机网络第六版——《计算机网络自顶向下方法》#### 计算机系统《代码揭秘：从C／C.的角度探秘计算机系统 —— 左飞》《《计算机科学导论_佛罗赞》#### 数据库《高性能MySQL》《Mysql技术内幕InnoDB存储引擎》#### Python这门语言语法很简单，上手快，不过我目前好久没用了，都忘得差不多了。当时是看的廖雪峰的 Python 博客自己也用 Python 做爬虫写过几篇博客，不过有些是在前人的基础上写的。感谢那些栽树的人！#### 工具Git   ： 廖雪峰的 Git 教程IDEA：[IntelliJ IDEA 简体中文专题教程](Maven：《Maven实战》#### 其他《如何高效学习-斯科特杨》   教你怎样高效学习的《软技能：代码之外的生存指南》    程序员除了写代码，还得懂点其他的软技能。《[《How-To-Ask-Questions-The-Smart-Way》](### 优秀网站推荐1、GitHub     别和我说不知道2、InfoQ		文章很不错3、CSDN	经常看博客专家的博客，里面大牛很多，传送门：[zhisheng](4、知乎 		多关注些大牛，看他们吹逼5、掘金		自己也在上面写专栏，粉丝已经超过一万了，传送门 ：[zhisheng](6、并发编程网	前面已经介绍7、developerworks     上面的博客也很好8、9、微信公众号	关注了很多人，有些人的文章确实很好。10、牛客网		刷笔试题不错的地方，里面大牛超多，怀念叶神和左神讲课的时候，还有很有爱的牛妹。11、优秀博主的博客地址了### 优秀博客推荐[廖雪峰]([阮一峰的网络日志]([酷壳-陈皓]([RednaxelaFX]([江南白衣]([stormzhang]([你假笨]([占小狼]([泥瓦匠BYSocket]([崔庆才]([纯洁的微笑]([程序猿DD]([周立]([芋艿V的博客]([zhisheng](### 最后送一句话，**越努力，越幸运，祝早日成为大神！*****这些地方可以找到我：+ blog:  [+ GitHub: [+ QQ 群：528776268,努力吧，阿里之星等着你。,本人有幸参加了2020的校园秋季招聘，基本所有的互联网大厂都面过，面试、笔试参加了少说也有几十次，收获颇多，同实验室的小伙伴也基本拿到了5、6个大厂offer。笔者找的大部分都是Java后端相关职位，特来分享经验，请诸君多多指教。本经验贴适用今年的大厂薪资还没有出炉，用去年的老图镇楼，不过根据已出炉公司的薪资数据来看，今年月薪普遍上调2-3k。废话不多说，直接上干货。互联网大厂注重基础，这里我会详细的把要学习的计算机知识总结出来。（注明：这里我即针对的方向是这一部分面试必问，无论你技术做哪个方向都会被问到。推荐书籍：《操作系统-考研复习指导》（除了基本概念，一些Linux操作系统的基本命令面试也会被问到，这里推荐《操作系统这里我就推荐这两本，贪多嚼不烂。尤其是操作系统的基本概念，一定要记牢。同样，这一部分面试必问。推荐入门书籍：《推荐核心书籍《前面三门书做入门即可，但这本书一定要反复地看，反复的理解，计算机网络记忆的部分比较多，要多看多记。这一部分我说是全文最重要的部分也不为过，概念性的东西，面试的过程中说不清楚或者比较模糊都问题不大，但你算法写不出来铁定凉凉，互联网大厂每一面必定会让你写一道算法，其重要程度可想而知。推荐入门书籍：《算法图解》、《漫画算法：小灰的算法之旅》。推荐核心书籍《算法-第四版》这本书真的写得非常棒，书中的代码一定要自己实现一遍。其实还有一本好的算法书《算法导论》，但本书艰深晦涩，数学证明很多，不建议用来应对面试。除了看书以外，算法一定要刷题，这里推荐在力扣上刷，附链接：如果无从下手的话，可以从算法一定要重视，至少预留半年刷题时间，刚开始刷肯定很痛苦，坚持下去吃就好了，慢慢自己就会摸索出规律。（PS：吐槽一下，算法真的是无穷无尽呐，感觉自己永远也刷不完，永远无法完全掌握，上一次给我这种无力感的科目是《高等数学》，o(╥﹏╥)o）数据库也基本每一面必问，一般来说是概念相关的问的比较多，偶尔也会让写sql语句。推荐入门书籍：《Mysql必知必会》，这本书主要是一些基本命令的学习，基本的查询一定要会。推荐核心书籍：《高性能MySQL（第3版）》，反复看，反复体会。数据库除了书本的学习之外，一定要多看博客，多做总结，B站上一些好的视频也可以用来学习。除了Mysql数据库之外，Redis也要掌握，推荐书籍，《Redis同样建议搭配视频学习。语言其实只是一门工具，大厂面试其实不是很注重你掌握的编程语言是什么，主要考察计算机基础的能力。故我将此部分放在最后。Java可分为三部分学习：1.Java基础推荐书籍《Java核心技术卷1基础知识》《Java核心技术卷2高级特性》2.Java虚拟机推荐书籍《深入理解JAVA虚拟机》经典之作，不多做解释了。3.Java并发编程推荐书籍《实战Java高并发程序设计》《Java并发编程之美》。以上关于Java的三个部分都建议配合B站视频学习，网上的相关学习视频非常多，找一款适合自己口味的就行。至于框架，像是Spring全家桶什么的，其实大厂问的不是很多，稍作了解即可。除了以上列出的书籍外，在找工作的过程中一定要去牛客网（附链接：祝各位都能找到满意的工作！ps：打个小广告，本科的同学如果想要继续读研深造的话，可以选择西电，考研难度还好，找工作真的很强势，观察往年的就业报告以及我个人的秋招体会，在互联网行业，西电真的不差，身边的很多大佬把大厂offer拿到手软。西电现在又在广州设立了研究生院，正是抄底的好时候，性价比真的很高，欢迎报考。o(*￣︶￣*)o,每次看到这种问题就有一种大学白上了的感觉。。。,"事实上，不同公司的技术基础要求不一样，工资待遇当然也不一样。不提阿里巴巴和美团了，就说说爱奇艺吧，这家公司想要的负责大流量应用服务的设计与研发 1. 扎实的计算机基础知识，精通Java；2. 爱好技术开发工作，具备高效，健壮，简洁的设计和代码风格；3. 熟练掌握SQL语句，熟练使用关系数据库，熟悉数据库设计与性能调优；4. 有主流NoSQL(Mongo，Redis,HBase等)使用开发经验为佳； 5. 对Http ，TCP/IP 网络协议有清晰理解； 6. 熟悉Linux 开发环境，有 shell/awk/python等系统脚本编写能力为佳； 7. 计算机科学或相关技术学科的本科及以上学历；8. 正直诚信，易于沟通。其实，大部分校招岗位的招聘岗位要求如下：（共通性）1、本科以上，可以全职参与工作，实习时间6-10个月；2、Java基础较好(熟悉常见类库，大多时候可以扔掉baidu和google两个拐杖独立行走)；3、对于Java单词后面多加个Script，还需了解html5,css,jquey以及电商前端开发技术； 4、了解springMVC、spring，hibernate及其内核，还需了解中间件及数据库集群。Java是一门技术活，如果你想蒙混过关，这恐怕不是长久之计。即使你进了企业，没有掌握纯熟的技术，企业也会让你走人的。想学就好好学，把技术学到极致，offer自然不会飞，或有更高的造诣，成为Java界的大牛。另外，需要提醒你的是：我不知道你选择的专业是否与计算机相关。如果是，你就不但要有着过人的敏捷的思维和一堆繁琐的算法，而且最重要的是对学科的热爱：像是编程，软硬件，网络都要手到擒来，要不你这四年就算白过了。 计算机相关的知识是更新最快的，在学校学的80%到社会里都用不上。你主攻的科目很可能在你的公司里一点都用不到。你要把那些永远都是基础的东西学透：比如算法，数据结构，组合数学，计算机组成原理，汇编语言和嵌入式，计算机网络的概况，编程语言学会C或C++就行了。因为新的一门语言都是换汤不换药的，改改语法和约素，厉害的程序员几天就能学会一门新的语言。真正想锻炼自己思维的话还是多从网上找课题项目来编，当你编出一个题目时，成就感油然而生，而且你会更感兴趣，编多了你的思维就能上一个层次。如果有条件，还是建议你是去外企的软件公司，或者自己研究个项目，要完成什么功能。因为实践出真知，牛人们都是从一行行代码培养起来的，只有亲自动手才会有提高。",看书动手实践写代码可以掌握70%的知识，看书写文章可以掌握40%的知识，只看书只能掌握20%的知识,算法方面最重要，4本书（有点厚，和thinking in java差不多）编程之美剑指offerjava方面5本thinking in java深入effective java设计模式还有进阶看完并理解你就说大神,"根据前辈们所描述的知识和书籍，我整理了两个月从三月份入学开始（现在5.4）中间也在图书馆借阅了部分书籍，终于整理出来了部分学习计划已经学过知识：1.JAVA基础（第一行代码JAVA）2.SQL基础语法（极限IT第一节）3.JAVAWEB基础（黑马32期）4.maven和gradle初步使用（5.初步会使用框架（ssm和springboot）根据以上知识可以在学校老师的工作室进行实践项目开发，然后就是目前的计划！！五月一号至六月三十号学习计划（书要读三遍，第二遍开始通过代码学习，第三遍写博客）：1.《JAVA编程思想》（已看完一遍）2.《深入理解JAVA虚拟机》（已看完一遍）3.《4.《JAVA并发编程实战》5.《6.《剑指offer》七月一号至八月三十一号学习计划（这里需要复习所有的计算机基础知识，包括学过或者没学过的）：1.《计算机网络（自顶向下方法）》2.《TCP/IP详解：卷一协议》3.《4.《现代操作系统》5.《数据库系统：基础篇》或者《高性能MySQL》6.《鸟哥的Linux私房菜》按照我的经验，一个月看三本是我的极限了，但是，突破极限才有进步，所以再列出来两本书7.《编译原理》8.《算法导论》（我看过《算法》这本书，觉得没有《算法导论》好）九月一号我就步入大三了，接下来将会进入JAVAEE的学习，大致方向是理解框架的原理，具体计划还没有接触出来，毕竟框架是学不完的，理解原理才是最正确的选择今天2018.5.4，为了20届毕业生的阿里实习生资格，明年2019.3.1日的阿里网申报名！！还有一点就是，有没有师兄师姐帮忙内推阿里实习生啊，有点怕，知识和能力方面绝对不负你们！！送高中语文老师讲过的课外的一句话：－－－－－－－－－－－－－－－－－－－－－对不起自己，蹉跎了岁月打卡:大三2018年12月15日现在和以前最大的区别是特别的迷茫现在掌握的知识JAVA后端方面:框架学习了常用了框架，现在使用的框架是SpringBoot，springmvc，jpa，thymleaf。前端HTML方面:现在使用的框架是vue.js现在在老师工作室做项目，功能基本百度使用（不知道要不要记住怎么写），然后就是运用各种插件。学习不知道怎么学习，感觉学了不一定有用，还不如去百度。基础知识方面1.计算机基础知识忘记了很多，现在要重新捡起来，没有在18年下半年参加软件设计师考试，真的是我的问题（沉迷游戏）2.算法基础知识努力了很久，学好了数据结构以及算法。但是，今年四月份参加完蓝桥杯之后（省二，参赛人的前百分之三十水平）真的菜啊，都说特别好进国赛，我没进。然后没有碰过算法了，现在十二月份又是一年蓝桥杯报名，又把算法捡了起来。然后就是目标1.蓝桥杯（算法）2.软件设计师（基础知识）3.参加各个公司的实习生招募（算法+基础知识+项目经验）蹉跎了大半年之后，又一次把这些东西摆上台面，认真对待其实这么算来，我差的也不多→_→感觉二个月时间（从现在到明年开学）可以刷题以至于计算机基础知识和算法都可以复习的很好差点忘记看面试题了啊啊啊啊啊啊啊啊！所以说，现在开始刻不容缓，三件事情，一件都不能落下－－－－－－－2019.01.04－－－－－－－－－感谢B.MATCH的小姐姐，焦哥，自己给我电话面试的面试官，在这次电话面试我学到了很多。首先，你需要有一份拿的出手的简历，具体什么叫拿的出手，你要想你的简历要经历五轮甚至六轮面试，你要拿出去让别人看得出新意！内容要充实，不充实怎么给别人提问的机会？其次准备好一门主要的语言比如JAVA和两个从头到尾自己独立完成的项目，具体什么项目，你可以在学校和老师做，可以自己接外包，可以跟着往上教程做，但是必须要，自己一步步的做完。接着，准备好许多的问题等待面试官来提问，确保他问你的问题，你能够答出来，或者能够在他的引导之下答出来！然后，你要留两个问题问一下面试官，具体什么问题我会补充的，那可能是以后了。最后，刷一下面试题，面试都过不了还想要笔试吗？！！！--------------------------------2019.2.7------------------------------首先更正一点，大部分的公司只有三轮面试，也就是说问到的不会那么详细，只会捡重点去问下面是我总结的一些经验吧:面试知识第一步java基础知识：JVM，多线程，I/O，类库加分项：计算机相关知识（计算机网络，数据库，Redis，Linux等...），设计模式，算法，数据结构第二步java开发知识：写过的项目，以及框架的常用的使用技巧加分项：框架的实现原理第三步发散性思维，诸如：如果我想要这样，你该怎么做？项目开发中遇到的难点，你如何解决？项目中有什么不合理的地方，你认为怎么不合理？等...-----------------------------2019.02.25-----------------------------        可以说是非常失望，作为一个从去年暑假就开始准备的我来说，这是远远不够达到我的期望的。问题在哪？准备了什么？基础+算法+项目基础深度不够，比如IO，多线程，集合，JVM。唯一一个能够说深度够了的就只有JVM，可惜这个所有人都会，并且我的语言表达能力可能没别人好。算法随心所欲，一直以来的老毛病了，有点能力就飘，太难的不愿意研究，太简单的不愿意动手写，眼高手低。项目研究不够广，项目中用了SpringBoot，Spring，SpringMVC，JPA，MyBatis，Redis，Mysql，Thymeleaf，Freemaker，甚至我还会前端vue.js框架。可是还是不够，你需要懂分布式原理，需要懂微服务架构，需要懂Spring Cloud，Dubbo，甚至有的还需要你懂大数据，我觉得大数据和我之前列举的框架应该是两种路线了吧，学不懂！简历写的怎么样？简历也是我静心包装过了的，选了我最熟悉两个项目智慧校园和微信点餐系统，在准备怎么样？准备了自我介绍以及项目介绍，以及项目中怎样实现的介绍。然后疯狂刷面试题，刷去年面试题算法，我不知道别人学的怎么样，我不敢松懈。结果呢？---------春招还在继续，还有希望！学历是一块敲门砖，语言表达能力非常重要，知识深度广度一定要够，算法一定要扎实。可能是太紧张，神经太过紧绷，无法说服自己过一些太过轻松的生活，想要过得更好，太累了，可是不努力一把，又怎么能得到更好的发展呢？加油＾０＾~！                                 加油＾０＾~！～～～～～～～～～2019.4.25～～～～～～～下面是面试必备19点知识，学会很好，学不会也要看会，面了5家，第一家基础知识1.mysql，2.redis，3.linux，4.计算机网络，5.操作系统，6.算法，7.数据结构，8.设计模式，9.组成原理JAVA知识1.JAVA基础2.JAVA多线程3.JAVA容器4.JVM 5.I/O分布式五点知识1.分布式缓存2.分布式储存3.分布式消息队列4.分布式搜索引擎5.怎样设计一个高可用，高并发的分布式系统什么都不说了，只要不放弃，一定有一家好公司等着你呢。～～～～～～～～～2019.10.28～～～～～～～实习被坑了，上上周告诉我部门没有转正hc,上周投简历，赶上秋招尾巴，这周收到了offer，南京13k，我和朋友说这次怎么这么顺利，他们说这是我努力的结果。。。总结了一下自己，还是有很多不会，这里定下看书目标，这个帖子从2018年更新到现在，虽然没有进大公司，但是我二本，现在这个样子的确是我努力过的结果。。。定个目标吧，春招还可以再战斗目标:1.<刷题>《Leetcode》2.<PDF>《Spring,SpringMVC,SpringBoot经典面试题》 3.<视频>《Java程序员进阶知识》4.<视频>《左神算法进阶》5.<实体书>《Java并发编程实战》6.<实体书>《TCP/IP详解(卷一)》7.<实体书>《深入理解Kafka核心设计与实践原理》8.<视频>《Elasticsearch核心技术与实战》极客时间9.<实体书>《netty实战》10.<实体书>《从Paxos到Zookeeper(分布式一致性原理与实践)》11.<实体书>《Spring源码深度解析(第二版)》12.<实体书>《"
大二学生，计算机科学与技术专业，学到数据结构和组原有点心态爆炸了，看不懂敲不出代码，还有救吗 ？,,"2018-11-26 22:26:40 收藏比赞多，你们忍心吗呜呜呜其实……我……觉得……大二才开数据结构……还看不懂……确实是……有那么点完蛋……计组毕竟跟软件离得相对远一点，没把拆机器当消遣的话确实不太容易懂，但是拆过几次机器应该能懂个七七八八。这里先把计组放下不提（其实是我手边没教材也没法系统地串知识点）。但是数据结构不应该、也不能听不懂啊，毕竟这么简单这么常用这么基础的东西。况且这已经是最不玄学、最容易实践的一门课了，如果这还搞不定的话学到操作系统的页表和端序不得哭出来吗？如果没错的话，绝大部分学校的不出意外的话应该就是这些内容，我本科的教材找不到了，有疏漏欢迎补充下面我们来一点一点说说每一件知识点以及考点。因为我受到的教育十分偏重应用，所以我会举例这些东西能在哪里怎么用。但是我这人比较懒，能磨嘴皮子绝不动手画图，实在是有看不懂的地方……嗯……再说吧。先说第一块，但是链表并不是万能的，是否选用链表要根据实际情况进行斟酌（后面是重点）。顺序表的构造思路十分简单，只要一个一个往里塞就行。在实践中，一般使用一个下标保存当前顺序表的结尾位置，插入元素时直接在这里插入，然后让下标向后移动。链表一般分为删除节点过程如下：在单链表的基础上增加了一个前向指针previous，即对于每一个节点可以同时找到它的上一个和下一个节点。这能让链表在构造的时候代码更好写，具体情况参考书上。双链表一般不怎么考，根据需要选用。和使用顺序表构造队列需要一个使用顺序表构造栈只需要一个在上文中，我们会发现，在使用顺序表实现队列，并频繁地插入和移除元素后，两个指针渐渐会来到表的结尾，这时候我们就需要是一种结合了顺序表和链表的结构。块状表吸收了链表的next指针所带来的动态优势，同时把链表的数据区扩展成一个小的顺序表。这样一来，既可以满足动态请求内存的需要，又可以避免查找元素时O(N)复杂度的困扰（事实上可以把O(N)降低到O(N/M+1)，M是小顺序表的长度）。块状表是一种相对折中的方案，可根据需要选取，并且一般考试不会考。伴随着线性结构而来的就是常用的各种最基础的就是除了交换的思想，还有一种常用的思想是插入。基于这种思想的排序法是同样基于插入思想却又与上两者不同的方法是则是基于分治法，属于最难理解的一个。同样基于分治法，也是上述所有排序法中唯一一个则是最无聊的一种排序法。假设有一个数据集是{456, 123, 789}，基数排序先比较个位数字并排列有序，再比较十位数字并排列有序，最后比较百位数字并排列有序。人类在查找纸质字典的目录时就是在进行基数排序。基数排序不太容易衡量复杂度，也不太可能考。还有一些常用的排序方法，比如讲完线性结构，我们再来讲讲首先要先普及一些概念：每一棵树有唯一的在此基础上，每个非叶节点的二叉树十分直接，每个节点包含一个数据区和两个孩子指针。数据区用于存储数据，孩子指针分别指向两个孩子，如果没有孩子就悬空。这一节的重难点其实在二叉树的在说明线性存储之前，我们必须要引入对于一棵满二叉树，我们按照对于不满的二叉树，我们要先把它补齐成满二叉树，然后把补上的节点空出来，就可以完成线性存储。存储一棵二叉树所需的总的线性空间与它的度有关，即2的N次方。显然，满二叉树极少浪费线性空间，而偏差较大的二叉树会极大地浪费线性空间。建立一棵二叉树十分简单，一般有两种方式：正常的树都是从根向叶子生长，所以逆生长的前缀码的一个特性就是每个字长短不一，显然出现频率更高的字使用更短的密文能获得较大的空间和时间优势。所以，哈夫曼树的第一步就是从第二步就要开始建树了。由于建立哈夫曼树的目的是为了进行说完了不正常生长的哈夫曼树，再来说说正常生长的二叉排序树。接下来就要取出其中的有序数列了，也就是进行二叉排序树的平均复杂度是O(N*logN)，其中的log就来自于二叉树的深度。当数组已经有序时二叉排序树会退化为O(N²)，而且绝大部分时候都建不出漂亮的二叉树，所以这个log其实是有很大水分的。为了尽量建出漂亮的二叉树，人们想出了很多办法，其中一项就是使用二叉排序树排序尽管复杂度较低，而且十分容易理解，但是需要O(N)级别的辅助空间，并不是很划算。仔细想一想，既然能把二叉树存放在顺序表里，那顺序表本身是不是也能被看成是线性存储的二叉树呢？答案是肯定的。一张顺序表可以被看做是一个就是完全二叉树的一种应用，硬要说的话也属于反向生长。常用的堆分为堆排序最神奇的地方就是堆排序非常喜欢考，不仅考方法论还要考实现，而且这东西略抽象，不是很好掌握。刚才突然心血来潮写了个实现，凑合着看一下吧。我比较懒，用CPU时间换了内存，数组下标里面各种运算。其实可以拿临时变量装一下来节省CPU的。C语言需要事先声明函数才能使用，我也没照顾可读性写函数原型，看的时候记得倒着看。很多书上都不写了，但是在这里我想提一下。锦标赛排序是选择排序的优化版，每一次将相邻的两个元素进行比赛，选出其中的优胜者（较大者或较小者，看需求）。其思路类似于虽然绝大多数情况下我们见到的树都是二叉树，但是并不妨碍就是多棵树，这个没什么好讲的。最后我们来提一下最后一部分是关于图，有一些概念是要先提及的。首先，图是由通常存储图有两种方式，即图中每个顶点的为了节省矩阵的空间开销，矩阵的集合的方式这边也拿出了为了克服需要同时维护两张表的缺陷，人们发明了考虑这样一张有向图，并假设顶点集合和边集合都已经整理好了。那么，根据这两个集合，我们可以建立十字链表：其中绿色的就是入度指针。从图中我们可以看出顶点A的入度一共有CA和DA两条边，因此沿着head指针能找到这两条边；同理，黄色的是出度指针，沿着tail指针就可以完成对出度的遍历。十字链表巧妙地节省了一张表。邻接多重表基于对邻接表的改进。由于其适用于无向图，所以不存在head和tail，但是依旧有两个指针。邻接多重表的节点结构与十字链表类似，并且同样用于存放边，不同的是每一个顶点后面紧跟着一个指针，并且每个节点还多出来了一个标志位用来存放是否被访问过。举例来讲，假设一个节点其中的顶点序号是2和5，那么2后面的指针会指向下一个出现了2的顶点（顶点顺序无所谓），而5后面的指针指向下一个出现了5的节点。顶点节点只保留一个指针，指向第一条连接此顶点的边。假设顶点序号是2，那么只要跟随每一个节点中编号为2的顶点后面的指针就可以完成对出入度的遍历。由于与十字链表类似我就不画图了。说完了图的存储，下面来聊聊图的深度优先遍历在诸如迷宫求解的时候应用较好，如果途中有环则需要记录已经访问过的顶点，否则不需要；广度优先遍历适合浅层的关系，比如图的最小生成树算法可以应用于网络布设中，使用最低成本达到连通所有节点的目的。但是，这种做法并不能保证任意两个节点之间的距离都是最短的，同样也容易造成星型布局，并使得上游节点遭受随之而来的带宽压力。但这种做法可以使总成本最低。如果需要求某一个顶点到所有顶点的迪杰斯特拉算法在计算机网络中有大量应用（以上三种算法年年考实现。看到这里，如果所有的知识点你都能掌握了，那么已经足够你拿到优秀了。剩下的部分是拓扑排序，不是很喜欢考，但还是提一下。用于清理此外还有一个更贴近管理的东西叫数据结构这门课其实就这么一点点东西，每个计算机系的学生都应该能做到烂熟于心，因为这点概念太基础太常用了。如果这些理解不了，后面的高阶算法还有算法优化啊、设计模式啊什么的课程统统完蛋。计算机四大门最起码直接挂掉三门，剩下的计组也是凶多吉少，不如早做打算换专业。写了四个小时，打字不易，点个赞呗我没翻课本，可能有些内容没回忆起来，欢迎补充2018-11-26 00:22:51 修改了强连通图与弱连通图的定义。2018-11-26 00:31:49 修改了二叉树的遍历部分的错误。2018-12-04 12:08:22 规范了顺序表的术语的使用，增加了哈夫曼树。2018-12-07 10:14:00 修改了二叉树重建部分的错误。2018-12-16 13:32:36 修改了链表构造栈的一个错别字。2018-12-27 13:50:12 添加了堆排的实现","今天，我就给大家推荐几个算法可视化的网站。没错，就是写了代码以后，可以看见他们是怎么一步步求出结果的。目前网站支持中文，印尼文，日文等多语言版本。在搜索选项中你可以根据关键词查找到你想要的算法。点进去一个具体的算法之后，会有两种方式的可视化呈现方式，一种是电子讲座模式，一种是示例模式。其中示例模式是以动画方式呈现，你可以控制动画的快进与倒退，电子讲座模式是以知识点讲解模式呈现，你可以手动控制页面的进度。两种方式都可以帮助你演示每个步骤的过程代码。接下来我们演示一下冒泡排序的执行过程，如下图所示：另外，你还可以创建一组自定义的数，然后让动画显示“你的算法”。除此之外，还支持在线测试哟~在Algorithm Visualizer，大家可以很清楚的看到算法运行的整个过程，很直观，便于大家学习。大家可以很清楚的看到，网站分为三部分，最左边是算法目录，大家可以选择自己感兴趣的算法，目前已经包括了很多算法了，比如二叉树、图、排序算法、动态规划等等经典算法 。中间区域主要是算法演示以及运行log。右侧是代码以及算法运行按钮。我们用它来演示一下冒泡排序的执行过程，如下图所示：同时它是开源的，目前有35K个star，足以可见该项目的欢迎程度，这里推荐给要学习算法的各位。目前已经有很多常用的比如，我们用它来模拟一个二叉搜索树，如下图所示：我们再用它来演示一下把这些内容学会，算法应该说是非常牢固了，无论是校招还是工作，都已经非常够用了。我大学时候也很傻，为了校招，看了不下于五本算法书，加上牛客，刷了大半年。总共一两千道题啊……不刷怕考到……忘了刷，刷了忘……毛都快掉没了……现在工作近十年，辗转几个大厂，由当年的应试者变成了出题人，才知道，完全不必这么辛苦。省下来的时间，谈个女朋友，它不香么？？？！！！。直接上干货，我花了两天的时间做了一张图，涵盖数据结构和算法书籍中都会讲到的知识点。并给出了常用算法的平均时间复杂度，对于必须要学的内容前面加了星标这里面涉及到了近二十种数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；超四十种常见算法思想：递归、排序、二分查找、搜索、哈希算法、掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。需要高清无水印思维导图源文件的小伙伴，可以点击这里获取：学习算法的套路很简单，多看、多写、多上机，既然是思想的集合，看得多了，自然无师自通。至于刷题，很多同学都知道要刷牛客。总共400多道题，而且有些题，非常难，想全部刷透，也至少刷半年。这显然不适合绝大部分同学。所以，我们要找到最核心、最重要的题集，即可比如，如果时间紧张，可以先刷《面试必刷TOP101》里的题目，总共101题。刷完以后，有时间，可以再刷《因为这两本书，都是面向面试的高频题汇总，自然有很多题目是重合的。这也正能说明这两本书的重要性。如果专攻面试的话，还有两本不错的书推荐：《这本书最大的特色就是讲了很多针对海量数据的处理技巧。这个可能是其他算法书籍很少涉及的。面试的时候，海量数据处理的问题也是经常会问的，特别是校招面试。不管是开拓眼界，还是应付面试，这本书都很值得一看。《当然，我也有一本谷歌师兄总结的高频面试算法习题集，包含了常见的数据结构和算法汇总，无论是排版还是内容，都是非常棒。所有这些书，我都为大家找到并下载好了，需要的小伙伴可以直接领取。这回得帮我点赞了吧组成原理应该是所有课程里最难的课了，它是一门衔接数电和汇编的一门课。整个课程的核心就是使用数字逻辑电路和触发器搭建一个可以运行汇编指令的机器.如果你需要提前感受一下可以去玩一个叫人力资源机器的游戏.代码区就是ROM,中间箱子是寄存器,两边输入和输出的会和并到一起装到RAM,小人就是运算器.这篇文章里有这个游戏的简介和玩法：你可以从这个游戏做为一个开始。再回来问题上来，我们先推荐学习资料，最后再推荐一些实验性游戏。视频首推配套教材建议选用《深入理解计算机系统》，这个视频应该也是用的这个教材。 里面的逻辑电路相关的内容可以提供具体案例,提高对但校招不光有笔试，还有面试环节，面试考的就是有关校招的内容非常多，这里我就不一一列举了。我把我这些年的所知所得，整理成了一本书，开源到github上了。相信会对大家很有帮助，大家可以去看.目前还在持续更新，欢迎大家star。好了，这篇就到这了，希望大家毕业都能找到好工作。",以前我当了好几年学不会数据结构往往有以下几个原因：我就两点建议：少则得，多则惑，是以圣人抱一为天下式。算法并不是死记硬背的科目，从最简单的小算法开始理解，多数人都是可以赶上来的。,首先忘掉你女生的身份比较好……先把问题变成“大二学生  计算机科学与技术专业学到数据结构和组原有点心态爆炸了，看不懂敲不出代码，还有救吗”然后分析一下究竟是什么问题，前导课程（C语言）学得怎么样，学明白了吗，大作业是自己顺利做出来了还是抄的？如果前导课程学的就有问题，那需要先补前导课程；如果前导课程没问题，那可能是老师教的不太好，可以找一些其他的资料学一下，我只知道《组原是说我可以提个类似于总纲的心法概要给你，学不学得成还看你自己：数据结构研究的是怎么数据结构一般包括以下部分：例如，线性表意味着有限个元素，构成了一个全序关系，可以映射到0 - (N-1)的整数。通过映射建模，就得到线性表数据结构；如果通过全序关系建模，则可以得到链表结构。线性表的约束是它的元素一定构成与0 - (N-1)的整数的一一映射，意味着它可以增加元素、删除元素、修改映射到的元素，但中间不能跑出一个洞来，也不能有两个元素有相同的下标。再比如，树结构意味着所有节点是相互连通的，而且不存在环，任意两个节点之间的路径是唯一的。如果选中一个节点作为根，则形成有根树，所有与根相邻的节点各自构成一棵子树，可以通过链式结构递归表示。如果按照到根节点的距离排序，则每个节点到根节点的路径都会有一个“下一跳”，定义为这个节点的父节点的话，也可以通过每个节点到而这个结构在内存中的表示是有套路可循的，最常见的是用关于微机原理研究的是存储器就是RS触发器为基础的SRAM，除此以外还有成本更便宜一些的DRAM运算器就是数字电路中的各种加法器、乘法器等组合逻辑与控制器可以是简单的组合逻辑电路，通过指令使能ALU的不同组件好了微机原理学完了，剩下的简单学一下汇编就行了。,"不过你们大二才学数据结构，确实。。。。。。不过有一说说，学算法，没啥捷径，最大的捷径就是刷题。但，千万别盲目刷题！不然就得如果你连最基本的数据结构，例如链表，队列，栈，二叉树都没有接触过，那么我是不建议你去 leetcode 刷题的，所以得先入门一下1、时间复杂度2、空间复杂度一般最先接触的就是时间复杂度和空间复杂度的学习了，这两个概念以及如何计算，是必须学的，也是必须最先学的，主要有最大复杂度、平均复杂度等，直接通过博客搜索学习即可。文章推荐：不用说，链表、列表必须，不过重点是链表，跳跃表可以放一放，并查集可以刷题的过程中学习，但链表得至少掌握增删改我写过的文章：树相关是知识还是挺多的，建议看书，可以看《算法第四版》，入门看《不过刷题前也不需要准备这么多，先把最基本的二叉树学了就可以了书籍推荐看这里：视频推荐看这里：Leetcode 刷题我还是希望你能在学习一些1、递归2、枚举3、贪心4、回溯5、动态规划但是，其中最重要的，我觉得就是所以，在你刷题之前，或者在学习二叉树、图相关算法遇到递归的时候，我希望你能静下心来，去学一学递归，我也会告诉你，你不需要把它学的很精通，但是你要懂一些基本的递归题，知道递归是怎么一回事，例如最简单的所以，死磕入门数据结构，可以学习下一些算法思想，而这里推荐一份字节大佬的刷题笔记，把各种算法模版都总结好了，跟着学就行：我写过的文章：另外也整理成了手册：最后，上一波思维导图终于，到了刷题这一部分了，如果要说学算法的捷径，那么不过在刷题之前我想先说一说在校招的笔试中，其实这些笔试题还是挺难的，你在 leectode 可以做出 hard 级别的题，但在笔试中，可能连 medium 级别的都做不出，因为笔试的题，都比较灵活，基本都会通过实际的例子来引出一道题，你可能不知道要使用哪种方法来做比较好，有些还是多种方法的结合。对于笔试的题型，我之前也总结过，无非是以下几种（1）、基本数据结构的考察：这类题我觉得是比较简单的，主要考场基本数据结构的操作，例如二叉树的层序遍历，链表的逆序等，当然，它不会直接告诉你，让你来逆序或者遍历。（2）、某种算法思想的掌握：这类题你掌握了某种算法思想，就会比较容易，如果不懂，那就凉凉了。例如动态规划、回溯、枚举、深度/广度、贪心、二分等。其中，我觉得动态规划考的挺多，还要就是 回溯+深度/广度。（3）、边界条件的考察：这类型的题，估计你一看就有思路，知道该怎么做，但是，它的边界条件特别多，需要分很多种情况来讨论，特别容易出错，有时候会让人陷进去，越做越复杂，这类题主要考场你的思维严谨程度。（4）、找规律、数学公式：这类型的题，主要是根据数据之间的一些关系，来找一些规律，进而推出他们的通用公式，就像我们高中时，找数列的同项一样。上面我列了笔试的题型，并且跟你说了笔试是真的挺难的，那么对于我个算法小白来说，该如何做好呢？我的建议是，例如链表相关的题型当然，笔试的题之所以难，是因为我们往往不知道用哪一种方法做好，或者说具体属于哪一种题型，那么还有必要分类刷题吗？答是有必要的，只有当你熟悉每一种题型，你才能灵活使用他们，进而解决各类复杂的题，这就如同你在练功夫的时候，前期你需要把每个招式都打扎实了，之后才能灵活把各个招式连接起来，融合贯通。刷题也是一样，前期先分类，把每个题型掌握起来，后期咱们再随机练习，慢慢着就能灵活应用了。不过，每次刷了一部分题型之后，我觉得还有必要做一些总结，或者说总结一些有人可能会说，模版是死的，真的有必要总结吗？我觉得也就是说，最开始刷题的时候，可以分类刷题，并且阶段性总结，如果你是初学者，可以先从简单的题做起，例如我刚才说的，简单的递归题，之后一些二叉树、链表的题，因为你可能刚刚学习数据结构不久，刚好可以加深你的理解。这里给大家推荐一份字节大佬的分类刷题笔记：刚才我说了很多种题型，对于按题型刷题总结，首推《程序员代码面试指南：IT名企还要一本我大一看的，感觉也挺不错，叫做《挑战程序设计大赛》，不过这本比较适合不急着面试的吧，这本不像上面那一本，专门来总结各种题型应付面试。《编程之美》、《Leetcode 刷题的时候，也是可以分题型刷滴，所以也可以去 leetcode 刷题，不过刷题的时候，我这里有个建议，就是别在本地 IDE 写代码，直接在网页端写就行了。因为面试的时候，一般就让你在记事本写代码，不会给你 IDE。如果你不习惯，估计很容易写错代码，而且，有些库函数你也把名字忘记了。网页端其实也是挺方便的，也会有一些代码提示。书籍这里找：当我们在做一道题的时候，可能会遇到两种情况，一种是这道题，特么秒杀，一眼就懂思路；一种是，一脸蒙蔽，太难了吧。我的答案是，有必要做。千万不要眼高手低，看着简单，做起来不一定简单，AC 之后，你还要去讨论区看看大佬们是怎么做的，因为有些人的代码，真的写的很简洁，看着就很舒服，咱们可以多学一学的，当然，也有可能那个人就是你自己。代码写多了，有时候，你就会发现自己真的变强了，写起代码来，bug 也越来越少了，分分钟 AC 一道题。其实对于很多题，如果不看时间复杂度和空间复杂度，单单只是 AC，那还是很容易的，但是一提交，你的代码可能只打败了百分之几的人，显然我们是不能满足于这种代码的。当你做一道题时，一开始可以先暴力做，但后面，还得想想该如何优化，想不出也没事，可以讨论区找空间/时间复杂度更低的代码，或者直接搜索引擎搜索，一般都能搜到别人的代码。之后跟着别人的代码，自己再实现一波，尽可能把最优解的代码实现起来。千万不要为了 AC 而 AC，不是 AC 的越多就越强的，当你入门之后，更多的是要总结方法，寻找高效率的代码。这里推荐一份大佬的刷题笔记，总结了 leetcode 上的题解，每道题的题解都是说到算法技巧，必须再给大家再讲一波好用的算法技巧，不信，你继续往下看数组的下标是一个隐含的很有用的数组，特别是在统计一些数字，或者判断一些整型数是否出现过的时候。例如，给你一串字母，让你判断这些字母出现的次数时，我们就可以把这些字母作为下标，在遍历的时候，如果字母a遍历到，则arr[a]就可以加1了，即 arr[a]++;通过这种巧用下标的方法，我们不需要逐个字母去判断。我再举个例子：问题：给你n个无序的int整型数组arr，并且这些整数的取值范围都在0-20之间，要你在 O(n) 的时间复杂度中把这 n 个数按照从小到大的顺序打印出来。对于这道题，如果你是先把这 n 个数先排序，再打印，是不可能O(n)的时间打印出来的。但是数值范围在 0-20。我们就可以巧用数组下标了。把对应的数值作为数组下标，如果这个数出现过，则对应的数组加1。 代码如下：利用数组下标的应用还有很多，大家以后在遇到某些题的时候可以考虑是否可以巧用数组下标来优化。有时候我们在遍历数组的时候，会进行越界判断，如果下标差不多要越界了，我们就把它置为0重新遍历。特别是在一些环形的数组中，例如用数组实现的队列。往往会写出这样的代码：实际上我们可以通过取余的方法来简化代码对于双指针，在做关于单链表的题是特别有用，比如“判断单链表是否有环”、“如何一次遍历就找到链表中间位置节点”、“单链表中倒数第 k 个节点”等问题。对于这种问题，我们就可以使用双指针了，会方便很多。我顺便说下这三个问题怎么用双指针解决吧。例如对于第一个问题我们就可以设置一个慢指针和一个快指针来遍历这个链表。慢指针一次移动一个节点，而快指针一次移动两个节点，如果该链表没有环，则快指针会先遍历完这个表，如果有环，则快指针会在第二次遍历时和慢指针相遇。对于第二个问题一样是设置一个快指针和慢指针。慢的一次移动一个节点，而快的两个。在遍历链表的时候，当快指针遍历完成时，慢指针刚好达到中点。对于第三个问题设置两个指针，其中一个指针先移动k个节点。之后两个指针以相同速度移动。当那个先移动的指针遍历完成的时候，第二个指针正好处于倒数第k个节点。你看，采用双指针方便多了吧。所以以后在处理与链表相关的一些问题的时候，可以考虑双指针哦。在链表的相关问题中，我们经常会设置一个头指针，而且这个头指针是不存任何有效数据的，只是为了操作方便，这个头指针我们就可以称之为哨兵位了。例如我们要删除头第一个节点是时候，如果没有设置一个哨兵位，那么在操作上，它会与删除第二个节点的操作有所不同。但是我们设置了哨兵，那么删除第一个节点和删除第二个节点那么在操作上就一样了，不用做额外的判断。当然，插入节点的时候也一样。有时候我们在操作数组的时候，也是可以设置一个哨兵的，把arr[0]作为哨兵。例如，要判断两个相邻的元素是否相等时，设置了哨兵就不怕越界等问题了，可以直接arr[i] == arr[i-1]?了。不用怕i = 0时出现越界。当然我这只是举一个例子，具体的应用还有很多，例如插入排序，环形链表等。（1）.对于可以递归的问题考虑状态保存当我们使用递归来解决一个问题的时候，容易产生重复去算同一个子问题，这个时候我们要考虑状态保存以防止重复计算。例如我随便举一个之前举过的问题问题：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法？这个问题用递归很好解决。假设 f(n) 表示n级台阶的总跳数法，则有f(n) = f(n-1) + f(n - 2)。递归的结束条件是当0 <= n <= 2时, f(n) = n。因此我们可以很容易写出递归的代码不过对于可以使用递归解决的问题，我们一定要考虑是否有很多重复计算。显然对于 f(n) = f(n-1) + f(n-2) 的递归，是有很多重复计算的。如就有很多重复计算了。这个时候我们要考虑状态保存。例如用hashMap来进行保存，当然用一个数组也是可以的，这个时候就像我们上面说的巧用数组下标了。可以当arr[n] = 0时，表示n还没计算过，当这样，可以极大着提高算法的效率。也有人把这种状态保存称之为备忘录法。(2).考虑自底向上对于递归的问题，我们一般都是从上往下递归的，直到递归到最底，再一层一层着把值返回。不过，有时候当n比较大的时候，例如当 n = 10000时，那么必须要往下递归10000层直到 n <=2 才将结果慢慢返回，如果n太大的话，可能栈空间会不够用。对于这种情况，其实我们是可以考虑自底向上的做法的。例如我知道f(1) = 1;f(2) = 2;那么我们就可以推出 f(3) = f(2) + f(1) = 3。从而可以推出f(4),f(5)等直到f(n)。因此，我们可以考虑使用自底向上的方法来做。代码如下：我们也把这种自底向上的做法称之为递推。总结一下当你在使用递归解决问题的时候，要考虑以下两个问题(1). 是否有状态重复计算的，可不可以使用备忘录法来优化。(2). 是否可以采取递推的方法来自底向上做，减少一味递归的开销。传统的做法就是让 1 不断着乘以 2，代码如下：这样做的话，时间复杂度是 O(logn)，那如果改成位运算，该怎么做呢？如果要弄成位运算的方式，很多时候我们把某个数拆成二进制，然后看看有哪些发现。这里我举个例子吧。例如 N = 19，那么转换成二进制就是 00010011（这里为了方便，我采用8位的二进制来表示）。那么我们要找的数就是，把二进制中1、找到最左边的 1，然后把它右边的所有 0 变成 12、把得到的数值加 1，可以得到 00100000即 00011111 + 1 = 00100000。3、把 得到的 00100000 向右移动一位，即可得到 00010000，即 00100000 >> 1 = 00010000。那么问题来了，第一步中把最左边 1 中后面的 0 转化为 1 该怎么弄呢？我先给出代码再解释吧。下面这段代码就可以把最左边 1 中后面的 0 全部转化为 1，就是通过把 n 右移并且做最终的代码如下这种做法的时间复杂度近是 O(log(logn))，重点是，高逼格。另外，上面的所有书籍，都可以在这里下载到，送给大家当然，算法固然重要，但也别忘了计算机基础知识的重要性，例如计算机网络，操作系统，最后，欢迎来帅地的个人网站学习：","感觉就是代码敲得少了，多看，多敲，多思考，慢慢就练出来了。看完下面的学计算机的课程之前，需要掌握好至少一门计算机语言，常见的语言选择有：Python，Java，C++.选择C++的小伙伴怎么可以跟着这两门限时优惠的课程来学习：学Python的小伙伴，跟着这门课来学，用游戏闯关的形式，学习python基础，有趣且高效。下面咱们就来看看数据结构的主要内容吧。尼克劳斯·维尔特，瑞士计算机科学家，在1976年写了一本名为《40多年转瞬即逝，但这个公式依然成立。这也是今天我们程序员面试的时候，需要展示自己对数据结构以及他们应用场景的掌握的原因。几乎所有的问题都需要面试者证明他们具有扎实的数据结构基本功。无论你是刚毕业也好（从大学还是编程培训营），还是有N多年的经验。有时候这些面试题则是专门提到某种数据结构。比如，题目描述是这样开头的“给定一颗二叉树。。。”。其他的时候则是那种隐式的，比如说，“我们找到每个作者相关的书籍数目”。学习数据结构是非常重要的，哪怕你只是想在当前的工作岗位上变得更赞一点。所以，就让我们从基础开始吧。简单来说，数据结构就是一种容器，按照某种既定的方式存储数据。这种“方式”能让一个数据结构在某些操作下很高效，相反，在另外的操作下就不太理想了。你的目标是为了理解这些数据结构，从而可以能从不同的数据结构中选择适合当前所面对的问题的那一种。因为数据结构是用来有规则地存储数据的，加上数据结构在计算机科学中神一般的存在，他们的价值就不言而喻了。不过你要解决的问题是啥，你反正都得需要数据结构，方式可能不同而已。无论是面对员工工资，还是股票价格，购物清单，还是简单的电话本，这样的场景。根据不同的应用场景，数据需要按照不同的方式存储。我们有好多可以将数据按照不同方式保存下来的数据结构。我们先来列一下最最常用的八种数据结构，然后接下来我们会慢慢将他们讲明白。数组是最简单也最常用的数据结构。其他的数据结构诸如栈和队列，都是从数组衍生出来的。下面是一个拥有四个元素的简单数组，包含了元素1，2，3，4.每个元素都依附于一个正整数，称作索引，它就对应于数组中该元素所在的位置。大多数的编程语言中，数组的起始索引都为0 （0-based，译者注）.数组一般有以下两种：数组的基本操作数组类常问问题我们平时熟悉的软件操作中的撤销（回退）操作，基本会出现在所有应用中。你好奇过它是咋工作的吗？原理是这样的：你把之前的状态（有限的数量）都存到内存中，存的顺序是最新的操作存在最近一个。这个光靠数组是不能实现的。这是栈擅长的地方。现实中也有栈的例子。比如你把一大堆书垂直叠（一本压着另外一本）起来放。为了拿到他们里面靠中部位置的书，你得把上面的书都拿走才行。这就是著名的LIFO（后进先出）的工作原理。下图是一个包含有三个元素的栈，数值为1，2，3. 元素3在栈顶，它会被最先删除。栈的基本操作栈常见的面试问题和栈类似，队列是另外一种线性数据结构。这种数据结构将元素按照顺序的方式存储。和栈最本质的区别就是：和后进先出相反，队列实现了先进先出的特性（FIFO， First in First Out）。队列在生活中有非常贴切的例子：一堆人排在售票台前面。如果新来了一个人，这个人得排在队尾，而不是队伍前面。另一方面，排在第一的人则能第一个买到票，然后离开队伍。下面是一个包含了四个元素的队列（1， 2， 3， 4）。1站在队头，会被第一个删除。队列的常用操作常见的队列题链表是另外一种重要的线性数据结构。链表初看起来和数组很类似，但他们在内存分配，内部结构，以及像插入和删除这样的基本操作上，都是不一样的。链表就是一串 串起来 的节点，他们的每一个节点都包含了数据和指向下一个节点的信息。链表有头结点，指向链表中的第一个元素。链表结构经常用来实现文件系统，哈希表，以及邻接表。下图是一个链表的内部结构图示。我们常见的链表有以下两种：链表基本操作：常见的链表问题图包含一系列的节点，这些节点通过网络相互连接起来。这些节点也被称为Vertcies。对于每个对子（x, y)，我们则称为边，表示节点x和节点y是相连的。边也可能包含权重或是花费信息，表明了从x到也所需要的消耗。图的类型：在计算机语言中，图通常用下面两种方法表示：常用的图遍历算法：常见的图问题树是非线性数据结构，它也是由节点和边组成的。因此树和图类似，但他们最大的不同是树上没有环存在。树被广泛应用在AI和其他复杂算法中，因为它能提供高效的存储，使得问题能得以解决。下面是一颗简单树，图中也包含了常见的树的术语。我们可以有以下的各种树的形状：上面这些树中，以二叉树和二叉搜索树最为常用。常见的树的问题字母树，也叫做下图演示了如何将三个单词（top, thus, their）插入到字母树中，并保存下来：在字母树中，单词都是从下至下一个字母一个字母保存起来的。绿色的节点（p, s, r）表示的是该节点是一个单词的最后一个字母，p对应top，s对应thus，而r则对应于their。常见的字母树问题：哈希是一个分辨不同的实体，从而将每个实体存储在某个预先计算好的索引上，这个预先算出来的值被称作“键”。因此，实体都是由键值对的形式存放的，把一大堆这样的东西称为字典。每个实体都能通过键来找到。基于哈希这种思想的数据结构有不少，但最常用的是哈希表。哈希表一般通过数组来实现。哈希表的效率取决于以下三个因数：下面这图演示了我们是怎么从哈希值匹配到一个数组中的。该数组的索引是通过函数函数求出来的。常见问题：上面就是八种你在算法面试之前必知必会的数据结构。具体的学习，可以参考原文作者开发educative上的专门针对数据结构的课程则有：C++:JavaScript：Java：Python：我上过其中的Java版本，课程是把数据结构里面的计算机的其他核心课程，参考这个回答：",作为一个cs专业的现任老师，正好教的就是ds。我来说两句。学ds导致心态爆炸的原因大部分可能是老师没教好。而且还不是ds老师没教好，，而是程序设计。是深理论并强实践的课程，得益于（呵呵）伪代码描述，好像看起来我从学生时代开始就深有体会，我考研数据结构分很高呀，为什么我就写不成算法程序呢？拿着程序去问老师，老师说，他没写过cpp代码。。。。当时的中国（十几年前了）高校程序设计课程大多是啃语法（c+++b+++a那套玩意），写过代码，做过项目的老师反正在我校是极少，我很不幸没遇到过。然后等我研究生毕业，it行业摸爬滚打n年之后回到高校执教发现，嗯？现在的大学怎么还这么教？我敲踏马。。。于是乎我这四年在弊校（一所四非大学）做的事就是，重新架构程序设计数据结构算法课程，计算思维贯通其中，大量增加练习数量，带着高年级学生做助教给新生答疑，虽然阻力重重，但是我坚持下来了。从过程上看，刚开始的两年老师，学生给予的评价大多是负面，但是结果上看，学生们的代码能力正在提升，你看icpcccpc我校也都能拿奖了不是。说了这么多，我想告诉题主，你要分析判断一下自己崩溃的根本原因，对症下药。,正常啦，不要怕，相信我，你的同学也好不到哪里去，按我之前面试人的经历，10个9个不过关的，刚毕业的，1~5年经验的大把人不过关的。然后我想跟你说的是，学数据结构只是学计算机遇到问题的一个缩影而已，以后，你会遇到类似的问题，看着很蒙，完全没有头绪。那该怎么办呢。首先，你得把心态放平，不要急躁，然后把不懂的这个数据结构或者算法，以它为关键字，开始在google，bing，baidu上面查，一篇篇文章的看，记得一边看，一边在纸上写，写关键点就可以了（这个是嗑瓜子原理，嗑瓜子其实很无聊，但是不断有瓜子吃，就容易保持兴趣，你写下来也一样，容易错觉你学到东西了）。有时候网上资料不多，或者还是看着很蒙，你就去看看有没有相关的书籍，毕竟书籍里面是经过提炼过的，有时候会好一点。不过有时候，可能全部看了一遍还是不行，还是不要急，重新把你看过的，挑你看着顺眼，觉得好的，再缕几遍。最后，还是不要急，一般情况下，因为是个新概念，所以没法一时间想通，你要把周期拉长一点，比如一个数据结构，你定成1周或者2周掌握，相信我，肯定行的，不过前提是你要时时刻刻念叨着人家数据结构才行，念念不忘必有回响嘛。要是这么搞都不行，来，有空我手把手教你。最后的最后，给你很泛的缕下整个数据结构要怎么学吧，你可以这样来。对比着看看数组和链表的区别，想想我要快速插入一个元素，删除元素，获得一个元素，分别用哪个好。如果想着不明显，你把数据量弄大一点，就很容易看出来了。后面学到map（对比着看栈和队列，一个先进后出，一个先进先出，这个在什么场景下会用到，比如停车场呀，排队呀，这些场景你琢磨琢磨，难一点的场景比如你要做个几个排序，常用的不多，可以从冒泡和快排开始，记得对比他两的不同。不过快排有时候很好，可是冒泡几句话就写完了，而快排要写好多，容易出错，如果没有api的情况下，有时候我就排10几20个数这么小量的，可能就直接用了冒泡了。树的话，从二叉树开始，学怎么接着图，你就看看大概的版块就这样，然后你再去学，丰富他们就好了，不过这些下来应该也差不多一个学期过去了。对了，肯定有人会给你推荐,我们学数据结构的时候老师让用的语言是c语言，c语言大一学的，我基本不会，数据结构的代码我也敲不出来，书上也没有c的实现代码，这门课程最后我糊弄下来了，其实班上也没有几个人能敲出来，再后来，我找了一套讲的很好的数据结构视频看了两遍，里面有c的实现过程，我也跟着敲了，这样，原理和实现都可以说是了解了。搜索引擎查一下，郝斌谢赞介绍一下郝斌老师的四套课程吧，分别是java，c语言，数据结构和算法，数据库，四套课程都是基础课程，讲课的风格跟聊天差不多，合适入门，虽然我觉得这套教程不是最好的的，但是我觉得聊天讲课的方式不枯燥，也不是那种念ppt的讲课形式，我关于版权，郝斌老师在课程中就已经声明，课程可以在非商业的情况下自由传播。视频不是我上传的，估计也不是郝斌老师上传的，我第一次看的时候应该是2013年。数据结构 java语言  C语言 数据库最后，看视频学习效率低一些，不过如果一开始就看书的话对于零基础的同学们会很困难，我一开始也是看书，一本think  in java 到现在没看完，入门可以看视频，有基础以后建议看书学习。,作为一个985CS专业，毕业拿到多个BAT Offer，最终加入腾讯的师兄，必须强答一波了。千万别听信一些题主的回答，什么真有点完蛋、什么快没救了。。完全是为了高赞危言耸听、骇人听闻，这样做真的好吗，作为过来人耽误了后辈，责任你们担负得起吗？大二看不懂数据结构和组成原理很正常，原因可能是没认真学、又或者大一的基础太差。我大一大二玩了两年，大三都没写过一行代码。。依然通过大三一年的强行冲刺，考上华科研究生，毕业加入大厂。关于大学期间如何学习，毕业才能冲击BAT的offer？可以看看我的这个1000赞回答，包括了生活和专业学习的建议：大一刚入学，因为追一个女孩惨遭拒绝，这之后开始自暴自弃，长期混迹于网吧，甚至有一次住网吧长达17天。放荡到什么程度呢？曾经玩星际争霸，连续刷了几百局，整个过程就吃泡面馒头，喝点白水。看着这张死缓通知书，这个结局我并不意外，长期翘课、挂科无数。那时候水到计算机专业大三了，连一个HelloWorld都不会写。本科就读的大学坐落在一座山中，那一天上山再下山，不断往返，完全感知不到时间的流逝。整整走了一个白昼，累得精疲力尽，瘫坐在草丛之中，看着深邃的天空和地上的花朵。于是我定下里加入游戏行业的目标。因为大学前两年全荒废了，所以大三是冲击的一年。大三我先后学习了C语言、数据结构和算法，同时补习数此外，还学了一门影响我职业生涯的语言： C++。看的第一本书就是：《随后开始啃除了疯狂自学，毕业的压力也很重，掌握了C++之后，我还用它做了不少有趣的东西，比如：万年历、五子棋、俄罗斯方块等等，俗话说兴趣是最好的老师，建议大家在学习编码的过程中也不妨挖掘出一些有趣的东西：我写的五子棋程序：俄罗斯方块：《曾经的算法小抄笔记：还记得当年为了更快的进步，跑去蹭研究生的课程，听到NP难问题不由感叹：算法世界太奇妙了。在我那个时代，线上资源并不丰富甚至是匮乏！今天各种论坛、公开课、学习资料非常丰富。程序员这个行业不轻松，甚至可以说是很艰难，但大家只要做到：静下心来多看书、多看源码、多上机，一定能不断高速进步！,想学明白这些，说真的1.我建议你把所有的教科书扔了去，在我看来中国的这些垃圾教科书除了给你植入一堆庞杂的概念让你云里雾里不知所云之外，并无太大用处，真正好的书不是这样的，一点兴趣的引导都没有上来先瞎死你让你无形烦躁再说。2.我建立你上课千万不要听讲，因为我觉得大部分学校的老师(少数的不要对号入座)，读PPT，死讲是他们的基本功，兴趣引导？寻寻渐进？清晰明了？言简意赅？不好意思，不存在的，有时候我都不明白这些老师都是咋上到博士的，把一个本该很有意思的知识讲到你自闭。那你要问了，我该怎么做？强烈建议从最有兴趣的书看起来，数据结构和算法推荐《算法图解》《最后我想说，如果一旦你对一个东西感到恐惧了，千万别觉得这是你笨，这是放屁！我可以负责任的告诉你，你要给自己一个信念，这些东西根本就不难，顶多就算是个复杂！组成原理这种硬件课知晓大概的原理就行，没必要死磕到底，这东西死磕到底你就是折磨自己，除非是你要走这行非搞不可，否则就算你硬学了，过不了多久你肯定会忘。能让你记住的东西只有原理和思想！不要被一大堆的概念给搞的晕头转向，否则那是舍本逐末！,其实，数据结构并没有你想的那么难。作为一个算法和数据结构的布道者，我一直致力于用最浅显易懂的方式，为大家分享数据结构的各种知识，希望大家能够真正理解数据结构，喜欢上数据结构。首先自我介绍一下：我是小灰，微信公众号【同时，我也是技术图书许多程序员对算法和数据结构望而生畏，认为这是一项高深莫测的学问。以前我曾经面试过一个小伙伴，起初考察他的技术功底和项目经验，他都回答得还不错。接下来我对他说：“OK，那我考察一下你的算法和数据结构水平吧。”题目还没说出口，小伙伴立马摆摆手说：“不要不要，我算法不行的！”我还是有些不甘心，接着说道：“我只考察最最基础的，你说说冒泡排序的基本思路吧？”小伙伴仍旧说：“我不知道，我算法一点都不会.....”.算法和数据结构真的有那么难，真的有那么无趣吗？恰恰相反，算法是编程领域最有意思的一块内容，也并没有许多人想象的那样难以驾驭。许多人把算法比作是程序员的“内功”，但小灰觉得这个比喻并不是很恰当。内功实实在在，没有任何巧妙可言，而算法天马行空，千变万化，就像是金庸笔下令狐冲的一套学习算法，我们不需要去死记硬背那些个冗长复杂的背景知识、底层原理、指令语法......我们所需要的只有对算法思想的领悟、对空间和性能的理解、开动脑筋去寻求最佳的解决方案。相比编程领域的其他技术，算法更纯粹，更接近数学，也更具有趣味性。我一直希望写出一些东西，让更多的IT同行们能够领略到算法的魅力，可是用什么方式来写呢？2016年9月，一次突如其来的灵感，让我创造了一个初出茅庐的菜鸟程序员形象，这个菜鸟程序员名叫小灰。程序员小灰的故事活跃在微信公众号上，用漫画的形式诉说着他的一次又一次面试经历，倔强的小灰屡战屡败，屡败屡战。小灰是我本人刚刚入行时的真实写照，相信许多程序员小伙伴们也能从中看到自己的影子。以下是几篇具有代表性的漫画：今后，小灰还会努力创作更多更精彩的作品，让数据结构和算法不再枯燥乏味！,同大二，计组亲妈爆炸你看，一堆一堆的人教你怎么学数据结构为啥？写代码有意思呗欺软怕硬呗数据结构真的不难呗真正头疼的是计组啊少女，你看有几个人提到过计组？为啥？他们也不会咯。偶尔几个提到的无非大略告诉你计算机从底层开始怎么工作，这都屁话你都工作多少年了我比你懂多多了，我知道从电路到模电到数电到CPU到操作系统再到编译链接怎么运行能给你讲得头头是道，我还拿Verilog写过单周期多周期流水线呢，有用？考试就考边边角角概念我他妈就是记不住不想记不行？以上是喷人的。数据结构那么多人都给你建议了我就不多说了，建议看至于计组，学学就行了，至少得知道怎么从c到汇编到机器码，CPU怎么解析机器码，取指译码执行访存写回经典五级流水，单周期多周期流水线大概什么流程，再学点cache，这些东西有助于写程序帮助理解底层，还有虚存页表，操作系统要用，考试要么刷题要么听天由命。 然后容我再喷一遍傻逼计组你他妈是想我背完这六七百页的书就直说傻逼玩意考尼玛。最后，以上均为没有逻辑的屁话。－－－－－1月25更新－－－－－出分了，平时分给满的浓浓师生情正好90,    遇到这个问题，首先排查是老师没教好还是自己不适合这个专业，数据结构确实抽象，我所认识学这门课的班级，一个班能有两个照着书本实现链表程序，就已经很不错了，很多同学连指针是什么都不知道，依然过的逍遥自在，考试准备一下，及格就行。  不过听你的意思想死磕到底，既然想学好，我觉得有必要分享一下，作为一个非CS专业的物理学转电子行业恰好路过计算机学科过来传授一下不靠谱的经验  我们班虽然也学C语言 ，但浅尝辄止，老师教完for循环基本上学期就结束了，指针什么的考试也不考，大二的时候，我还没意识到自己想要做什么，C语言69分飘过，每日懒懒散散的，但是。。但是  随着我在实验室呆的时间够长，自己会的简单的C语言已经满足不了我日益壮大的需求了，百度个宏编译，百度一下结构体貌似也还行，解决了一些基础问题，但是，别人的开源程序里好多指针怎么办啊，看着百度给的答案基本上要崩溃，爆炸，心情一度down到谷底，感觉这么简单的程序也看不懂真够衰，宛若一个智障，还不如好好学物理当个老师吧，自己真的不适合这一行   但是，内心的斗争总会有个头，最终我选择了CS，我仔细分析了一下计算机学科的专业课程，发现有四大基石，数据结构，组成原理，操作系统与计算机网络，我不知道哪来的自信，坚信学完这四门课，从此人生将会得到升华，想法变成了行动，甚至决心跨考CS的研究生(学之前)，我问电子专业借了(要了)相关的书以及自己买了点资料，自学第一周的时候真是要每日爆炸，最简单的链表一直没有运行起来，不是烫就是程序已停止运行，那时候完全没有编译原理的思想。  为了折中，我想了一个周全的办法，大三的时候，数据结构还是要学的，并坚信这也将成为我以后的知识根基，我继续看后面的内容，只看自己能看懂的东西，队列，栈和二叉树，这些设定都很有意思，和生活中的一些情况也很像，不写程序还有点喜欢这门课，同时我也有一个致命障碍，  我想那些厉害的大学，学的东西应该都一样吧，于是歪打误撞报了mooc上陈越姥姥的数据结构，不报不知道，简直爱上了这个老师，讲课通俗易懂，深入浅出，知道我不擅长用指针，实现队列竟然用数组，然后我只是按照她的思想，就用数组实现了队列与栈，第一次让我感觉自己在这方面有天赋，随着后面的课程进行，渐渐对指针的深入了解，指针式的图算法也能轻松看懂实现，  从此感觉换了一个人，与此同时，其他三门课也在同时学习，不能说自己学的多优秀，但是很有成就感，至少能看懂大部分开源代码了，思路清晰，而后也意识到文档，框架设计，重构的重要性，又学了软件工程。    大四伊始，别的小朋友都去考教师，考公务员，找工作了，我还在天天愁着这不会那也不会，后来发现是我多虑了，找了第一份工作直接坦诚说没有工作经验，还好技术主管问了我一个数组越界的问题，然后拿了6k的薪水，干了6个月，主要工作是打杂，做硬件电路，焊接，采购，提交设计文档，工作期间没有给公司写过一行程序，有一段时间加班回去好累也不看书了，但是后来决定还是要走的，这样下去会废掉的，于是又复习了一下数据结构，准备换工作，面了好几家都拿到了offer，在第二家公司主要写程序，直接挑战了我的极限，嵌入式操作系统对内存使用很严格，有点DS与操作系统的底子直接刚，什么消息队列，秒懂秒用，很快融入新工作，慢慢的，老板注意到我了，四大根基在这时候起了很大的作用，和老板聊天各种吹，后来也开始面试新人了  来面试的小朋友，失望了一次又一次，很多人把工作简历写的很厚，随便两个基本问题就问倒了，数据结构不会已经没关系了，面试了10个 ， 只有两个会指针的，还不愿意来，有些三五年工作经验简直更是不能忍，一度怀疑HR是不是闭上眼筛选的简历，或者  很多人不把这四门课程作为顶梁柱了吧  但是我相信他们以后一定会吃亏的,刚开始的时候看不懂，不是很正常嘛，哪有一上来就看懂的。再说敲不出代码，你看都看不懂，你能敲出个锤子来。其实说实话，对于如果你学不会，那就是学习的方式方法不对。下面来说下我总结的数据结构和组成原理的学习路线吧，相信肯定会对你有所帮助，关于数据结构与算法的学习我从以下数据结构经常与算法放在一起，这就造成很多同学懵圈，有些同学认为这就是一种。其实就是我们要怎样把这些数据存储起来，所以有数组、链表、栈、队列、树、图，这是数据结构的重点。数据结构，不管你怎么想，一定要认真学！不管面试还是考研都是必考！学习数据结构与算法的第一课，我永远都选复杂度分析，在我看来，这是复杂度分析主要包括以下两个：。对于某一问题的不同解决算法，运行时间越短算法效率越高，相反，运行时间越长，算法效率越低。只不过这种趋势是代码运行过程中临时变量占用的内存空间。强烈推荐阅读下面这篇文章，看完保证会！离开了数据结构，几乎任何的程序都会失效。要单纯的掌握常见的数据结构，就如同拆解一个个精妙的仪器件一样有趣和简单。数据结构重要的主要是下面这几个：不同数据结构有着不同的特性，因此而我最近就在做这件事，比如其中对数组操作：比如对链表的操作：比如对栈和队列的操作：《大话数据结构》这本书与市场上的同类数据结构图书相比，内容更加趣味易读，算法讲解细致深刻。是一本非常适合自学的读物。这本书通篇以一种趣味方式来叙述，大量引用了各种各样的生活知识来类比，并充分运用图形语言来体现抽象内容，对数据结构所涉及到的一些经典算法做到逐行分析、多算法比较。书籍地址：链接：尤其是在学习之初，堪称很好的防劝退工具，所以我对这些做了一些整理，希望能帮助到你。这个在线的模拟器包含“栈”、“队列”、“堆”、“BST” 等数据结构，每个数据结构以图像的方式展示在我们面前，同时又有各自的帮助文档，可以用鼠标对数据节点进行拖拽，还可以实现各种数据结构的增删改查。还有一点好的是，这个网站还伴随着一些数据结构的教学材料、简要的复杂度分析、数据结构使用实例，对于理解各种数据结构的原理及运用可以说是相当丝滑了…VisuAlgo 可以说是知名度比较高的一个通过动画学习算法和数据结构的网站了，它最初的建立就是通过可视化让学生更好的理解数据结构和算法。VisuAlgo 的功能更丰富，它包含了很多的数据结构和算法，从简单的到复杂的都一一包含，而且对于一些新出现的算法也有涉猎，通过可视化动画的方法，帮助我们更轻松透彻的理解算法及原理，尤其是对一些通过文字描述很难理解的算法而言，简直是生命之光。VisuAlgo 还支持搜索和多种语言的切换，英语不好的同学可以切换成中文，但是现在有一些算法中文翻译的并不全，所以如果能看英文的话还是建议看英文的。数据结构与算法的学习，往往要伴随着“刷题”，如果没特殊情况，我建议大家刷 LeetCode 就好。刷题按照分类来刷，如果不知道刷哪几道题，可以看下这个前字节大佬的刷题笔记：针对 LeetCode，题的解法有很多，我们往往追求的是最优解，这里有一份清华学长整理的 LeetCode 最优解，强烈推荐：我在大学的时候参加 ACM，拿过亚洲区预赛银奖，刷题贯穿了我的整个大学生涯，总结了一些刷题的经验，感兴趣的可以看下。顺便来分享下自己总结的【这份清单我会一直更新，同样也会一步步的把站在初学者的角度，下面就是我为大家精心挑选的 LeetCode 题目清单，我觉得它是所有计算机基础课程中最难学的一门课，整个课程的核心就是使用数字逻辑电路和触发器搭建一个可以运行汇编指令的机器。《正是因为计算机组成原理难学，所以对于初学者来说，比起其他几门，这门课的入门书籍选择就更得友好。《本书倡导在计算机迅速发展、技术不断革新的今天，回归到计算机的基础知识上。通过探究计算机的本质，提升工程师对计算机的兴趣，在面对复杂的最新技术时，能够迅速掌握其要点并灵活运用。本书从计算机的内部结构开始讲起，以图配文的形式详细讲解了二进制、内存、数据压缩、源文件和可执行文件、操作系统和应用程序的关系、汇编语言、硬件控制方法等内容，目的是让读者了解从用户双击程序图标到程序开始运行之间到底发生了什么。书籍地址：链接：看这个视频的配套教材是《深入理解计算机系统》。链接：关于题主现在的情况，相信我下面的回答也会对你有所帮助：,我是软件工程大三的学生，同女生，大二上学期修了数据结构，下学期修了组成原理而且我是转专业来软工的，还要补修大一的课程，课多到爆炸，上学期学数据结构的时候还没搞懂C语言指针，数据结构学的一塌糊涂（这学期重修了），大二开了一门如果题主在C语言上有短板的话建议先补C语言，然后多做做题，很多问题都可以解决然后是至于现在，当然是和没学过一样_(:з」∠)_如果想混过考试，大可不必紧张...如果题主是好学生的话，还是不要像我学习了_(:з」∠)_, 之前我认识的连数据结构都学不会的同学，现在已经转行做产品了orz 1、算法本身就很难，这东西对于人类本身来说就是学起来费劲！ 2、学习方法有问题，又或者老师讲的太烂！ 说实话，即使你把算法啃完了也未必有用，因为除了面试，实际工作中都是使用现成的模块，所以一般只需要了解算法的目的和时空复杂度，再刷刷题就足够。  下面根据题主的情况，我搭建了一条学习路径，一起来看下吧：  很多人觉得算法难，大多都是在背算法（包括我）就跟背菜谱一样。但算法和菜谱的区别在于，算法的问题变化莫测。如果你啃过算法书应该会有同感，明明当时理解了的证明，为什么过段时间就忘了呢。 所以我更推荐丢掉课本，通过项目实操的形式学算法。 一个数据可视化和算法可视化的网站，用它可以生成各种各样的数据结构，模拟它们添加和删除的过程，而且还可以用它来演示算法的执行过程。 我朋友推荐给我的，也看到知乎里有不少人推这个网站。可以说这是一个资源丰富的在线学习的网站，可以学到的语言不仅限于通用的编程语言。北美硅谷程序员创办的程序员编程学习平台，面向国内及海外的程序员用户。课程分类清晰，对于基础薄弱的同学推荐这个网站还超有底气的开了简单来说就是三句话这个过程中你需要思考为什么，而不是单纯的刷题敲代码背答案，这样在面试中的表现才会更好。 这里分享北大学长整理好的学习更多应试小技巧。 考得很多，主要注重代码实现能力，算法上没有太多难点，通常是处理麻烦。 ②③④⑤⑥⑦⑧⑨⑩ ①像是②其他一线大厂，比如③其他中小厂，比如 不同的岗位算法面试难度不同，难度排序（从易到难）： Data Scientist / Data Analyst / Data Engineer Web Frontend Engineer / Mobile Engineer Software Development Engineer Product Engineer Infrastructure Engineer / Software Reliability Engineer Machine Learning Engineer  非常适合快速巩固算法，我当时就是为了快速通过算法面试才发现了这个宝藏软件。里面的题集划分的非常细致，感兴趣的可以自己体验一下。 对于基础薄弱的编程小白来说，还可以来尝试对于正在备战大厂算法面试的朋友，也可以来好啦，以上就是我的分享，如果对你有帮助的话，就给我点个赞吧！ ,请问你到底有没有认认真真地学过一遍？！如果没有，请你先认真踏实地把每一个字每一句话每一行代码认真地看一遍！如果还是不懂，回去再看，看10遍之后，当那些概念那些推导过程在你脑子毫无违和感，你想不懂都难。实在静不下心看不下去，就读10遍，不想读就抄，抄简单吧，抄10遍，你不可能不会的。别笑我迂腐，别嘲笑这个方法蠢，有多少人能够做到这个程度――把一个陌生的待学习的新事物重复10遍？！做到这个的，想不掌握都难！我们都想成为很厉害很厉害的人，但是，大部分人都做不到。不是因为方法不对，方法不对，这句话很多情况下，只是懒惰人的一个借口。不懂怎么下手？网上到处都是大神的经验谈，你可以去查！学不会，好难等等这些全都是借口，是你逃避的挡箭牌。很多人缺的不是方法，而是行动，是日复一日地重复练习自己想要掌握的技能的自我约束的能力。别问我怎样获得这种能力，你不自救，谁也救不了你。不要抱怨了，踏踏实实去做你该做的事，一点一滴地积累，才能有量变，才能有质变。,,你好，首先冷静，不要慌张，大家都是这么过来的，我当初接触编程的时候，就这3行代码我还愣住了，怎么就互换了？现在想想不是显而易见的，有什么好思考的。我当初在学校从大一开始做ACM，数据结构还没学，那时候就是看问题，想，用极其粗糙的办法去解决问题。实在不行就看看别人的代码，慢慢就死磕过去了，后来开始学数据结构，稍微翻了一下就明白了，感觉没什么意思。只不过可惜没有早点看到这个，当初学得不够系统。你现在就在我当初死磕的阶段，人刚开始接触新事物的时候，自然是有适应期的，这段时间，熬住，过了就好了，回头来看不过如此。好了，理论说完了，给你讲讲方法。我觉得数据结构初学者最重要的是 比如，一颗树，1，2，3，4，5，6，7，8，9，10，这10个数，一个个加到树里面，每加一个，树变成什么样了，都一步步画出来。加完了删，每删一个，变成什么样了，一步步画出来。加一个删一个，一步步画出来。这一套下来，树就基本理清了，画好的画，多看看，记在脑子里，以后代码忘记了，想想怎么画的，自然就会写了。最后推荐一本书，<当初做ACM相见恨晚的一本书，把一些算法和数据结构都可视化了，非常容易理解。希望有帮助~~
程序员看剧的时候，如果看到有敲代码页面，会暂停看代码吗？,今天在看剧的时候，突然有个疑问，因为现在的很多电视剧经常会有敲代码的页面出现，就想问下各位程序员大佬们，会在这个片段暂停看代码么？然后判断是真的还是假的之类的？代码对不对之类的？或者不深究对错，就看下这段代码啥意思？要做什么？【不要凶～大家就友善交流自己的看法哦⊙▽⊙】上图是《庭外》第03集  00:36:18以及00:36:22、00:36:51、00:36:53的代码页面截图，目的是要伪装一个网页～,为了回答这个问题，我翻了过去好几年的qq空间和编剧视角的程序员是用word写代码的。放弃吧，写不写得出来，公司都要完了。,必然看啊，这是以前看报纸时留下的习惯。网友评论：护士在那里满脸笑容的接电话 ，可是你倒是把电话线接上啊？！,战狼1中一共包括5段功能代码。第一段是输出第二段是找100到200之间的所有质数。第三段是找100到999之间的所有第四段是通过键盘输入一个整数并找出其所有因数。第五段是根据键盘输入的分数评出ABC等级。通过以上几段残缺不全的代码，成功入侵红军指挥系统，并导致对方系统瘫痪。没想到大家对这个话题这么感兴趣！一个礼拜之内浏览量30w+，获赞居然上了3k。不胜惶恐。感谢各位！找到一张图片，,以前看过一个段子，讲的是一个计算机大牛给一部剧集模拟一个蠕虫病毒入侵的场景。这个大牛就写了个病毒，结果导演说就这？最终剧集上映的时候，展现蠕虫病毒入侵的画面是：显示器放一段蠕虫在那爬来爬去的Flash……这大牛回来说千万别说是他写的……,程序员不知道。但是作为一个学物理的，第一次看到群友发出下面这个图的时候，仔细看了看黑板上求解氢原子（前面的女人挡住我看公式了，可恶！）,额，看过很多代码，可以说没有几个是能看的。之前看最近看的《天才基本法》里面的代码是真的找了一段相关的代码在那里，这个应该是最认真的了。,2023.11.10更新，孤注一掷电影中，黑同事演讲直播，用的是后面黑掉小头目手机的场景其实不太现实，黑手机的方法主要靠钓鱼，而小头目后面剧情有准备，所以不太可能中钓鱼。如果是0 click黑手机，借助第三方软件漏洞才比较容易，不依赖第三方软件太难了，和前面的sqlmap完全不是一个级别。所以不如黑航空网站比较现实(PS:2018年未经过几轮hw的航空公司真的很简单)。黑客帝国2中的一个镜头，是非常贴合真实攻击场景的命令行片段。手机打字，所以在B站找的截图，注意存在中文字幕和弹幕。第一个镜头22/tcp这段，是经典的sshnuke 10.2.2.2 -rootpw=xxx这段是使用sshnuke这个攻击程序，攻击了10.2.2.2服务器，将root账户的密码重置为xxx。而sshnuke，是sshv1 crc32整数溢出漏洞的攻击程序。这是一个真实存在且流行过的漏洞，通过溢出可以直接反弹shell，或者像电影中一样修改ssh密码。ssh 10.2.2.2 -l root此时已经完成密码篡改，所以可以直接以root用户登录ssh。到这里，就是一个不复杂但很标准的渗透流程，收集信息——发现漏洞——利用漏洞——拿到shell。在第二个镜头中，存在多个窗口。除了第四层的窗口（最外层）是第一个镜头中出现的窗口，其他窗口分别如下。第一层（最里层）窗口，攻击机的本地登录。第二层窗口，sshnuke程序的汇编代码。对于溢出类漏洞，实时调试和分析非常正常。第三层窗口，另外一个更多扫描结果的nmap截图。依旧非常符合真实的渗透流程。随后便是用获取到的shell关闭电力程序，这个肯定是假的，但做的也非常逼真。,影视剧里面程序员写代码的时候，像打字员一样噼里啪啦一顿输出。一看就知道是扯淡。现实里面程序员一天写不了几行代码。写几行停下来查bug，网络上搜bug解决办法。,翻出来了一张N多年前自己发的朋友圈。。。,曾经有个剧，一个“程序员” 用word写代码。我暂停个锤子啊,看过一部国产剧，网警A在跟黑客聊QQ，网警B要求A尽可能拖延时间好让他追踪黑客的IP地址。你是不是觉得这样很辣眼？Naive！... ... ...网警B在cmd窗口里狂敲了一堆乱码之后叹气 —— 糟了！他用的是无线网络，没有IP地址！,,奋斗者的,不是程序员，会点ps前两天刷抖音刷到一个视频，妈妈把儿子几年心血画的毕业作品毁了如图所示会ps的都沉默了...,会啊，,还真注意过。1998 年的日本动漫《第一集，老师上课一言不发地板书 C 语言，可以看出似乎就是入门级别的东西，只不过好像是用货币符号￥代替了转义的反斜杠，不知何故。第四集，铃音开始深入“连线世界”，并且意识到“Knights”们的小动作。这个时候她已经开始小露身手了，毕竟不是每个初中女生都能在自家卧室里搭出一个集群……这之后她的显示器上滚动了一段时间 上世纪八九十年代正是顺便说一句，动漫里的“Knights”这个黑客组织也不是虚构的，它的真实原型是一个半虚构组织：第七集，其实不能说是“手机”，而是类似于智能手机或者说那么玲音在“玩”什么呢？她在看 我还是写过几句 Common Lisp 代码的，她第一个程序定义了一个叫 life 的递归函数，里面依稀可见还调用了 （最后铃音可愛いね,程序员甚至会在坐电梯的时候思考电梯的,这截图来自《战狼》：这截图来自《黑客帝国》：＜战狼＞和＜黑客帝国＞入侵代码对比，《黑客帝国》这是一个TESO写的攻击ssh的exploit（就是真正的攻击代码，非常专业）；然而，《战狼》里面那一堆大家加油，我的第一个破千赞就快到来了，感谢各位哥哥姐姐、弟弟妹妹、叔叔阿姨、叔叔婶婶～,当然，作为职业病，在看一些影视剧上的高科技镜头的时候，不免会想多看上两眼。其实这有时也造成了一些观影上的“出戏”，刚刚沉浸进去的剧情，结果被一些看着特别假的“高科技”镜头给逗笑了，然后还要在心理默默的告诫自己“专心剧情，专心剧情”。比如一些大的谍战片经常有黑客插上U盘，然后在命令行上煞有介事的敲一个命令，然后终端输出一堆文字。其实写过终端脚本的都看得出来那就是电影特效，其实背后什么都没有执行，单纯的终端输出一堆看着高深的字符而已。此时就很容易出戏，仿佛在看一个“跳大神”的在假装请神装神弄鬼一样。当然只要做的不那么假，我们也没有必要嘲笑，毕竟模拟也就只能这样了。真“实战”的场面看起来比电影要……无趣的多……记得曾经在电脑上观看某部《终结者》电影的时候，电影里有一个天网调取这个图粗看没什么问题，特别是画面最前面的明确显示着T-800的简要信息，仿佛就是在调取它的资料。但是当时电影画面可以清楚的看到后面的很多字符，暂停后仔细查看的话就比较搞笑了。后面那些字符其实和电影本身并没有什么关系，只是为了显得天网的高大上而随意显示出的一些文本信息。因为在大家的印象里，“黑底白字”一堆文本信息的画面就容易和黑客和高端计算机技术联想到一起。其实这地方应该把背景稍微虚化一点，这样直白的展示出来让从事计算机的人看到还是蛮尴尬的，容易出戏。首先从上图（此图经过了压缩可能看不太清了，建议找到电影原片段观看）我们可以看到有一个打印当前内核版本号的命令以及其执行结果，可以看到电影中最厉害的天网竟然是使用的Linux-4.1.15版变种内核……就类似我这样做：图片左右两侧大部分都是类似'ls -l'出来的普通文件信息，这些文件/目录基本上都属于root用户，且可以看出都是在当年12月19日下午16点左右被最后访问过的。就类似我这样：图片中间那个窗口，T-800信息下面还可以清楚的看见一条iostat指令。这个指令一般来自于Linux系统中sysstat这个软件包，比如我的系统当前执行iostat就是这样的：对比上图iostat的输出，就能看出基本是一致的。通过图中iostat的输出，我们可以看出当时最先进的人工智能、想要毁灭人类的天网系统，其空闲率高达99.23%。说明它根本没有使出全力来对付人类，仅仅使出了0.77%的能力，你说它是有多闲。连我现在写回答的这个电脑都比它忙差不多3个百分点 [手动滑稽]。存储设备也只看到sda和sdb两块磁盘，其中的sdb显然还不怎么使用，sda用的较多，但是TPS也才7.55，连我笔记本的sda的TPS都9.71。这个天网CPU闲也就算了，IO也这么闲，这是对毁灭人类这个计划有多么不屑一顾。sdb的平均读写速度和读写量都太弱，不值得说，我们还是以sda这个设备来说，总写入量看不全，但是总读出的数据量（你可以理解为累计的流量）才1357670665 Blk，这里的Blk一般是指512个字节，所以1357670665 Blk也就是才695GiB…… 试想一下，一个世界上最高端的人工智能机器，应该有多少的数据读写量才对，695G实在是有点太不够看了，随便一家互联网公司的随便一台服务器估计都比这个高吧。当然了，以上内容纯属娱乐，抬杠的话也有很多可以抬的地方。我只是就着这个问题说一下搞计算机人看电影时的职业习惯罢了。当然，这些小地方并不太影响我的电影观感，我更注重剧情上的自圆其说，和故事性的渲染和表达，至于和科学技术细节有关的东西，只要不是过于严重的错误，并不影响我对电影本身的感受和评价。大家如果有什么其它电影的带有终端运行画面的截图也可以发到评论区大家一起讨论，其实还是蛮有趣的。,天才基本法里，男主写的自走棋代码还真是自走棋游戏代码，据说来源是挺用心的。还有女主偷偷进男主家偷代码的时候，能看到游戏代码文件夹还分客户端，服务端，简直太用心了。
为什么大多数的程序员的编程界面背景都是黑色的?,,我现在截图给大家感受一下，把下面这张图放大，盯上五分钟。然后换这张图，盯上五分钟。哪个五分钟你觉得眼睛更舒服？反正我是肯定不会选第一张图，程序员需要连续盯着屏幕的时间不止五分钟，肯定会选择让自己最舒服的背景色。其实，纯黑的背景色并不是最好的， 纯黑背景看时间长了也很累，最好使用深色但是不纯深那种，比如这样的。,如果有幸沐浴在阳光下，写着一行行代码，大概率会把界面改成亮色。PS：这个时候就很考验屏幕激发亮度这玩意了~PPS：MBP这一块屏幕确实顶得住~如果是在夜色中写代码，暗色主题能让自己更专注。扩展阅读：,多年前我研究配色的时候制作了几套配色方案。仔细研究，我自己的研究结果是：黑色背景下，字体的前景色改变会显得更加明显。而白色背景下，前景色改变的效果并不明显，背景色跟字体粗细的改变更加明显。简单测试就是同样把字体颜色的RGB各加0x11，黑背景下，改变的字体差异非常明确，而白背景下两者的差异就小一些。所以在现实中，两种不同的语法元素，在黑背景中可能只差距0x33-0x66就可以轻松辨识，到白背景中可能就要用0x88-0xff才能达到同等的辨识效果。由于程序员的语法着色主要是基于字体前景色的改变，因此使用黑背景能够得到更好的视觉分辨效果。--一句话结论：由于程序员编程需要进行语法着色，而黑背景语法着色的效果更好。所以更多的编程 IDE 设计时选择了黑背景。以上是我的看法。,之前甲同事给我的建议是豆沙绿，后来我遇见了乙同事，告诉我黑色背景对眼睛最好。我问他为啥，他反问我：显示器什么时候对眼睛的伤害最小？我想了半天没想出来，他告诉我：显示器在关了的状态下对眼睛的伤害最小，所以最接近关了的背景对眼睛伤害最少。,因为现在几乎所有的显示器的显示原理都是——发光。CRT：电子束轰击荧光材料，从而在屏幕上激发闪光，显示字符/图像。LCD：整块背板发光（反射背光灯管发出的光），借助液晶材料的电致浑浊，遮蔽不需要的光，从而把字符/图像显示出来。LED：微型发光二极管发光，组成字符/图像。作为对比：黑/白板：利用不同物质（颜料）对环境光反射能力的不同，书写/绘制字符/图像纸张：同上墨水屏：同上两者最根本的不同，在于CRT/LCD/LED本身都是光源，是一种发光体；而后者本身不发光，必须反射外部光源照射过来的可见光，才能在人的眼底形成图像。自然界的发光体极少。日月，萤火虫，火……若不是现代的光污染，没有月亮的夜晚，伸手不见五指才是正常。这个差别是极为关键的。对反射体来说，它的亮度总是和环境相协调的——环境光有多亮，它就会有一个对应的亮度。烈日下的纸张也会亮的刺眼；星光下的宝石黯淡无光……我们的眼睛，早就习惯了这种场景。换句话说，反射体会“自适应于环境光亮度”；我们的眼睛经过亿万年的演化，也早已适应了这种场景。但是，电脑显示器这种发光体完全改变了这一切。它自身是发光的；因此烈日下，它的光芒显得太过灰暗，你自然看不清它显示了什么；黑夜里，它照样可以有500流明甚至更高的光通量，使得一下子从黑暗中到它前面的你睁不开眼。室内的光通量并非一成不变。早上，中午，晚上，照度各有不同；但显示器的亮度，除非你随时调节，否则总是一成不变的。它的亮度和周围环境的反差极易造成眼睛的不适应。因为我们必须不断的在不同的光亮度之间切换：一看显示器，500流明，瞳孔要缩小，要衰减神经信号强度；眼睛余光一瞥手边摊开的书本或者从身边走过的同事，哪怕只是看一小会儿，过亮/过暗的显示器都会造成极大的眼部疲劳；何况程序员们要在电脑前一坐一天。除非采光条件极差、所以一天到晚完全依靠灯光照明的办公室，否则，这种显示器亮度和环境光亮度的不匹配无法避免。而且，为了有效显示字符/图像，显示器亮度必须要压住环境光亮度，否则很容易看不清屏上字符、造成更大的视疲劳。尤其对程序员来说，他们不光要看清每一个字符，不同字符串究竟是什么——是关键字、运算符、变量、类、对象还是函数；一段内容究竟是声明还是调用还是注释；变量/函数公开还是私有、是否const、是字符串还是整型、浮点，等等等等——这无穷多的细节，遗漏一点都是灾难。而为了帮程序员快速区分这些不同属性，他们使用的编辑器（Emacs/vim/各种然而，人眼对黑白图像的分辨力远高于彩色。这是因为，人眼中负责识别颜色的视锥细胞数量少，而且灵敏度低也比不上负责识别明暗的视杆细胞——因此古人说“夜不辨色”，关于阴曹地府的传说也总是黑白的。晚上你也可以关上灯，拉上窗帘，看看彩色的杂志封面是不是颜色暗淡了。因此，想要让程序员一眼看出“这玩意儿是个类名所以染成了藏青色”“那东西是编译期常量所以用了天青色”“这东西是个函数所以用了淡绿色”……那么，显示器的亮度就必须足够高。否则真的没办法一眼分辨出这么几十种不同的颜色。换句话说，由于职业原因，程序员使用电脑时，往往习惯性的把屏幕调的过亮，否则容易看不清字符颜色。同时，由于职业原因，程序员面对的屏幕，必然绝大多数地方空白、只有少量字符（代码）。提高显示器亮度，对大片白色背景来说，这就是一大片的高亮发光区——你敢调的稍暗，上面的字符就看不清了。此外，由于显示器会发光，过亮的大片白色区域还会造成很强的因此，如果使用白色等高亮背景，这种“眼前屏幕亮度和环境光亮度的不匹配”造成的影响就会被放到最大。这和反射体是完全不同的。如果使用黑色背景呢，显示器本身相当于一块黑板，仍然有一定的反射环境光的能力（从而产生了一定的自动调节能力）；同时高亮度的字符如同细小的、闪亮的宝石，非常容易识别。盯着这种屏幕自然就不太容易引起视疲劳了。当然，黑色屏幕虽然仍然能有一定的光反射能力，但反射效果并不好，容易让人觉得显示器那块亮度（相对于环境亮度）过低，仍然不太协调。如果选择灰色之类存在一定基础亮度的暗色，那么显示器背景和环境光强之间的差距就可以进一步降低。这就是很多人说自己“更喜欢深色而不是黑色背景”的原因。,Because light attracts bugs,"同搬砖, 建筑界画图就没这么问的. CAD一水的黑色背景, 因为无论白红绿蓝, 他们都是高明度的颜色, 混在高明度的白色背景中, 远没有低明度的黑色背景清晰. 程序界面也是同样的道理, 字符是细小的矢量线条, 不同类型的keywords用不同颜色区分, 其中不乏高明度的颜色, 与白色差距较小, (可以当成没那么白的浅灰色), 识别起来很费力. 所以保持低明度的底色, 高明度的线条, 是能保证清晰度的办法.当然, 对比度不是越大越好的, 伤眼睛. 而且颜色背景不同还会有暗环绕的问题. 在此不多展开. 最有伤害性的是，程序员为了搞创造性工作，免不了时常要切换网页，非常费眼睛。因此如果你学一些东西，建议换成亮色的背景。",Because light attracts bugs,最开始白底用半年，眼睛爆炸后来换黑底，舒服了一年再后来发现好像其实很简单你专注思考的时候，眼睛不自觉地盯着看，查个api什么的盯着看。一天盯8小时白底，和盯灯泡有啥区别亮度低点，眼睛是聚焦模式啊。,,大概是由于BUG有趋光性 ,其实这个配色最舒服，但是我只在Termius里面见过原生的这个配色，叫Novel（小说）。里面这个主题实际上还是有些区别的，比Termius这个差很多,表达了程序员对黑色秀发的向往 ,"vscode默认界面是深色的。vim默认界面是深色的。默认界面是深色的。为什么大部分程序员编程背景都是黑色的？没有那么复杂，只是纯粹地懒得换而已~不信你去看看用VS开发MFC, win32的程序员，他们的背景是不是白色的(逃",这两年的潮流。35年前，大多数程序员的编程背景色都是蓝色的25年前变成白色10年前变成黑色我个人还是喜欢浅色一点，眼睛看着不累，黑底的反差太大了。不过其实黑色也算是复古，我小时候用学习机的时候，不管是LOGO还是BASIC都是黑底白字的说浅色蓝光多的，自己把色温设定成4000k或者更低啊,我认为，多数开发环境的编辑器采用深色背景的主要原因语法高亮越来越智能，用到的颜色越来越多，白色底下已经很难分辨清楚。咱们以Visual Studio 2019为例，看看黑色和白色主题的差别。,亮度调最低的时候暗色比亮色看着更舒服,我的回答基于科学和事实，无关个人喜好。见 简单小结一下，何种主题最好，还是基于数据比较好，下载最多的主题一定是比较优秀的。我对于Emacs社区还比较熟悉，其插件下载网站有主题下载数量统计：我自己下载了排名前100的主题，启动编辑器时随机载入主题。顺便推荐我的文本文件操作术教程： ,不光编程IDE软件界面是黑色，市场上很多软件也是黑色或灰色背景为主，比如PS、Pr、AutoCAD等。很多商业PPT、设计广告是黑色背景，这几年不少汽车品牌logo也改成单黑色。看来黑色不光是程序员的偏爱，也是符合大多数人需求的颜色。我理解编程界面以黑色为主，有以下几个原因：我们日常生活见到最多的颜色就是黑色，夜晚也是黑色。人习惯了黑色，能够更加心静和专注。其实看看周边物件也会发现，大多数电脑、鼠标、键盘、手机也是黑色的。白色和其他颜色强光会更会造成眼睛疲劳。程序员可能一天盯屏幕十几个小时（不知道在干啥），黑色背景多多少少能保护眼睛。有首歌叫作夜空中最亮的星，黑色作为背景色能更好地凸显其他颜色。在代码框中，一般黑色背景也会比白色对代码颜色的渲染效果更清楚，除非你是用深色的代码。通常黑色界面会配鲜艳的字体， 然后一些class， function，或者method会用相同的颜色，更容易被眼睛捕捉到。黑色似乎显得更加有高级感，这不管是在软件界面，服饰搭配、汽车设计等都表现如此。如果你作为程序员，端坐在电脑面前，被别人看到一脸绿、一脸蓝、一脸红...会有多尴尬。就算你用白色，加班到深夜，满脸亮光老板以为你在摸鱼。,因为MsOffice是白色的。这样就可以区分，写软件的人和用软件的人。（手动狗头）
新手想玩硬件，买单片机还是树莓派好？,会一点点 C。,这个问题本人应该比较有发言权了 :D所以不管是Arduino还是树莓派，我都算玩得比较彻底了哈哈，下面先介绍一下软硬件开发的区别和联系，然后会给出学习建议~先上几个视频：也自己设计过接下来回答题主的问题：新手想玩硬件，买单片机还是树莓派好？这个问题其实还不是很准确，题主首先要知道我想楼主想说的应该是在嵌入式开发中，具体分下来：底层可以到模拟电路（射频、电源等），数字逻辑电路（FPGA、所以我们来看看，Arduino的开发其实属于Kernel那一层，也就是裸机程序，而树莓派则一般在操作系统那一层（不考虑驱动开发），这样题主应该就知道他们的本质区别了。抽象的层级越高，要实现某个功能会越来越容易，但是相应的自由度会越低。这么说题主可能还是不太直观，给题主看几个我之前做的项目：这是我之前的一个回答，这个回答中我介绍了制作迷你机器人的过程，其中就有从第一代用不知道题主看完觉得对哪个机器人最感兴趣？如果是前两个的话，那么Arduino适合你，对于这种玩具类的设计Arduino有天然的优势，那就是数不清的比如上面链接回答中我也提到了，那个对于我自己的经历经验来说，我最早是从学习说了这么多，对于题主有几点建议：长期搞各种脑洞项目，大家不嫌弃的话也可以点上面关注一下～不定期更新项目顺便微博@  我的其他回答：,"陆陆续续做了很多硬件项目5-6年了， 说说我作为一个非专业我的经历：本科电气工程但是并没有好好学习，不喜欢课堂上理论为主实践几乎为0的方式。大三左右（2009？）开始对单片机感兴趣，那时候什么都不懂，本科之后就转行学了设计，本科基础都慢慢忘光了，所以我可以说是从新手小白一路学过来的。2013年左右了解到了Arduino的存在， 立即买了官方的新手包，里面附了一本小书和很多简单配件，一个星期就可以全部做完，还能做出几个小小的作品， 成就感爆棚。 几个Arduino项目，不见得多么复杂。2019年的生日加情人节礼物，Arduino Nano +Neopixel五年前做的另一个生日礼物，用了Arduino和LED矩阵，定制了动画。这两年也做了一些套件，很方便入门2014年因为一个项目需要做到无线视频传输，入门了树莓派，可以说功能相当强大了，但是要学的东西很多很多。 刚开始压力会比较大比较烦躁。这个坦克算是我第一个大型项目，从机械设计，3D打印，用树莓派控制，到远程视频传输和遥控软件，当时有点无头苍蝇但是也不管三七二十一的做了出来。现在的知识和技能都有了增强，但愿这几年能重做一个2.0。51平台不甚了解就不说了Arduino英文的定义是 Micro controller。所谓控制器，接到输入，进行处理，再进行输出， 通常来说是单线程的。 所以适合做一些不复杂的项目。这里的输入可以是按键，传感器，数据等等， 输出可以是数据，声光，电机等等。 树莓派是一台电脑， 一台超小型的功能没那么强大的电脑。多线程，可以安装操作系统，有多样接口等等等等。   祖国版完全够用，Uno 二三十块， 小的Nano十块钱左右一个。 淘宝一百多的新手包完全够入门了。 ：一个板子就200多，你还要考虑各种配件。新手不弄headless的话得需要显示器吧，需要hdmi吧，老版的需要再买USB Wifi，USB不够用要买新手学习，万一有个短接什么的很平常，用Arduino， 烧了就烧了不心疼，Pi的话不差钱您随意。还有就是你做项目的自由度， 同是200块钱， 你可以做20个Arduino项目，每一个都可以随时拿出来把玩。 Pi只够同时做一个，要做20个项目的话还要每次重新连接，每次运行不同程序，想想都心累。学学怎么接线，usb插好，IDE下载好，运行示例程序。就是这么简单。首先得看卖家提供了什么样OS， 如果没有的话，你要先格式化SD卡，研究好要用什么OS下载好，（Headless模式： 设置Wi-Fi信息启用SSH，用一堆你没听过的软件设置另外的电脑端。）接好外设,  启动，设置用户名密码，利用linux连接Wi-Fi。下载必要的软件，开始编程。电路连接方面，两者都需要基础的电路知识，Arduino的Pin口相对树莓派的GPIO友好很多。根据项目边做边学，不求甚解也没关系，慢慢就开窍了。编程方面：题主说有C基础，C也是大部分人的大一基础课，不难上手。IDE也很简单，编好程序一键编译上传。多看看示例和别人的教程，高级的功能多搜索。大部分OS启动后是直接进入命令行的，bash command不见得每个人都会，怎么新建文件，怎么保存，怎么退出程序，怎么关机，你可能统统不知道。你当然可以一开始就使用StartX进入GUI体验下linux系统，跟Mac OS和Win操作还是有区别的。 下面你可以开始编程了，大部分Pi的程序是Python写的，虽说Python相对好学，但如果从零开始的话也是额外的一个负担。上面说了这么多，好像看起来Arduino又便宜又方便，为什么还需要学树莓派呢？树莓派虽然相对昂贵复杂，但能为Arduino所不能。 举几个栗子：树莓派跟你的电脑一样，可以多线程，同时运行多个程序执行不同任务。可以运行更复杂的程序，比如用python做抓取，遗传算法，机器视觉等等。有更好的网络连接性。当然也有相对弱于Arduino的（功能方面），比如运算实时性不高不适合精确的时间控制。有很多项目也是通过树莓派控制Arduino来各取所长。我自己喜欢把两者的关系比作人脑，树莓派就像大脑一样负责观察体验（机器视觉），思考（AI），做出决定（指令传送到底层）；底层的功能如呼吸消化（系统自检，电源），有什么说的不准确的还请大家指正！Happy Making!关于我:自己平时会做些各种各样的小玩意，激光切割，3D打印，Arduino，Unity什么的。欢迎关注ins： Chenthedesignmaker   微博@ 设计极客Chen还有我的youtube频道：目前在做各种科技diy向的节目和教程，请多指教！",玩硬件很多人说很贵，但是我觉得其实现在是玩硬件最好的时候。1万元对于本科生来说相当于两年的大学费用。对于3本的学生来说相当于1年的费用。1万元估计都不能上的起某些单片机，java，深度学习的培训班。但是1万元自己投资自己做硬件却可以学到真正的知识。骚年你渴望力量吗？这里有一份器材清单我看与你有缘免费送给你吧。首先 仪器类1。示波器 2100元左右 双通道100MHz模拟带宽1Gsps。 可以carry各类模拟电路的试验以及工程。2。逻辑分析仪 360元左右可以买到200MHz采样16通道的虚拟逻辑分析仪（计算机外接adaptor usb传输到计算机显示波形的那种）。3。万用表 不去搞强电也就30快能买一个主流的了。开发板类的：1。 FPGA开发板。玩硬件如果不会fpga你觉得你会爽吗？fpga一时爽，一直用一直爽。最开始入门可以买那种点个数码管，外面挂一个2。单片机开发板。我不建议开始就去买单片机的开发板。单片机入门从51搞完了就可以进军stm32了这时候你就会发现你比那些一上来就搞stm32得人有哪些优势了。PCB设计自己拥有pcb的设计能力是很重要的。而现在就是最好的pcb设计时代。4月初某两家进阶搞完了以上这些基础的工具类知识基本上做一些简单的东西就游刃有余了，此时的你会很爽。但是不应该仅仅局限于简单的东西。下来就应该做一些更牛逼的东西。比如数字信号处理。神经网络之类的。做这些你就需要接触一些高端的板卡了比如fpga类的你就需要一些逻辑资源大的比如55k LE或者110k LE这种资源的。我有幸有一块530K LE的板卡吼吼吼 后期准备部署我自己的深度学习加速模块。这些板卡价格也还算能够接受。一般的85K LE等级的板卡比如zynq 7z020 也就800左右吧 altera类的 cyclone v soc 有一款110k LE的也就800多吧。有了这些利器做什么都会很爽。最后你会不甘于仅仅只是把你的想法在开发板上运行。这个时候就是体现你pcb功底的时候了。自己定制一款自己的单板，砍掉所有不需要的功能，尺寸做的小乔玲珑不要太爽。对付bga封装的芯片其实现在也不是很复杂。jlc的4层板制程已经可以满足0.8 ball patch的bga设计 而他只需要每款样板100元。bga焊接也不需要去专门的厂家自己就可以搞定。我是这么做的没错使用这种恒温加热板就可以焊接bga了再po一张焊接好的下面这张图是板上有一个0.5ball patch的当然后面你还是会不爽因为你也想自己做结构件了。那就整一台3d打印机吧 现在1500元就可以买到一台3d打印机对于我们这些只做结构的人来说太合适了。走到这里你已经成为一个硬件产品经理的,。不要盲信高票答案，他俩，不是进阶关系。做出炫不炫的东西是个人爱好，不是拿来说明差异的工具。1、单片机主要用在控制领域。这一点Arduino也罢，51也罢，绕过Arduino直接上AVR也罢，一步到位STM32也罢，差别在系统复杂度不同，功能强弱不同，资源多少不同，但共同的特点是一般都不上OS直接裸奔，要上也是RTOS，即它们共同强调一个特点，就是即便如今已经能跑到220M的CortexM7，ST的高端型号甚至都上了A系列都没有的双精度FPU，依然没有MMU这个东西，说明压根就不是给完整的操作系统准备的。相比之下，只能跑80M的ARM7TDMI却能运行完整的linux（当年红遍全世界的GBA就是这个内核，不过主频低得多）。学习单片机，主要是要学习数字电路知识和一部分简单模电，核心是计算机体系结构。这就是为什么大学的可以说单片机是硬件工程师入手的必经之路。2、树莓派是个树莓派的核心是跑架构、跑库、跑算法，GPIO是附带物。没有人裸奔所以树莓派开发恰恰是为了最大程度绕开和硬件的接触。你看到的树莓派和硬件的结合，是最小化硬件操作之后的产物。所以别人的代码down下来编译一下就能跑了。单片机代码你要是无视对方的电路设计，跑一个我看看？所以单片机还是树莓派这个选择要看你的倾向，硬件还是软件。实际上如果你要选择这个方向从业，两个迟早都要玩的，别选了。顺带一提。我在dji厂做算法工程师一年多，跑在CortexA平台上，和树莓派一个类型，以前自己玩四轴的时候是用CortexM4，这俩东西相互不能取代。高票答案太限定在自己是一个创客的角度了，无意冒犯，但做个彩灯这样的东西晶体管都能实现，不能拿来解释架构上面的东西。倒是亚克力加工我觉得值得肯定。,建议新手从树莓派上手。因为树莓派本身是一个单卡计算机。只要你会操作linux，只要你会点python或c语言，你就会使用当你会使用树莓派之后，你可以尝试一下单片机。比如我从树莓派开始研究，后来玩arduino，现在开始玩esp8266。这是使用其实玩硬件有很多种方式，不要去纠结如何选择，我建议你把所有硬件都玩一遍。,我个人建议不要从任何SBC实际上定位非常尴尬。搞物联网（搞Linux，又比PC和服务器增加了很多不必要的麻烦，有的项目不支持ARM，硬件结构不一样……我的建议是，对接传感器、屏幕等，先从ESP32开始。入门难度之低，超乎想象。STM32也行，但随着想对接硬盘，从PC或者VPS开始。Sata，NVMe这些高速率的东西，ESP32完全搞不定。等你把这两边的基础都搞通了，再向SBC平台进军。树莓派、国产各种派，主要优势是体积小。他们更多的还是对标PC和服务器的，只是兼具一些GPIO能力而已。而且他们的GPIO配件，基本是厂商高价定制集成的，某种意义上带有一点智商税。适合给小孩当教学玩具玩，不太适合真想学点知识搞实用的人。另外说下入门成本。ESP32开发板，第一块大概24元包邮，送第二块就可以买9.9元包邮的屏幕啥的可以去淘0.5元一块的二手，电机有2元左右的二手，各种转换接口0.5元（普遍6元邮费，我基本都是一次淘20元的，降低邮费成本）二手的尾货外壳大概也能2块钱一个淘到。（你得有这个意识，很多东西买了直接拆外壳）万用表大概十几块钱，电烙铁8块。最贵的其实是电压电流计，这玩意要60-100元。试过买5块钱和13块钱的，用起来累心，不适合查错时用。启动成本非常低的。,玩硬件是个大坑，我上大学的时候，看到那种编程的网上说先从做四驱车开始，我买了然后我就感觉我行了，牛逼了，准备着手开始做双足，买了好多玩了半个月，啥也没玩出来，小两千的一大箱子硬件在角落吃灰，我那一学期都没吃过一顿好的。结论:哪个便宜玩哪个，等发现自己真的喜欢了，入门了，懂行了，就自然明白了。不然就像我这种失败例子一样，每天都看着那一箱电路板，回忆着那半年吃糠咽菜的生活，在浅色的床单上哭泣。,"大家为啥非要争个你死我活呢用过51/STM32/Arduino UNO/ATTINY85(DigiSpark)/ESP8266/OrangePI(类树莓派)写过HelloWorld（即点亮一颗LED），简要对比下特点，供题主选择优点：结构简单，工业化使用时间长，资料齐全缺点：没有板载adc，pwm需要使用定时器模拟，基本上干点啥都需要扩展外围电路；计算能力有点捉急补充：比较新的51已经有了pwm和adc口最小系统价格：stc89c52<10元优点：片上资源丰富，该有的都有了；处理器性能强大；工业使用也有一段时间了，资料也很丰富齐全缺点：实在找不到啥缺点，非要说的话，开发环境配置比其他的复杂算不？最小系统价格：stm32f103c8t6<10元；stm32f407vet6<50元优点：开发环境配置简单，片上带adc，缺点：IO口数量有点少；片上资源，性能上与STM32差了不止一个数量级最小系统价格：国产ch340+贴片328p版本<20元优点：使用缺点：ram太小，io口就6个最小系统价格：<10元优点：缺点：资料丰富程度不及51或stm32最小系统价格：esp12f+ch340<15元，单芯片（不带串口芯片）约为10元优点：资料相对丰富，ram足够（高达数百到上千兆，跟单片机几百字节到几兆字节相比，高了几个数量级），可以买到支持rj45或者wifi的版本用来做IoT（实际上，xxxPI更适合作为IoT设备的中心节点而不是直接控制硬件）缺点：非实时系统，价格相对较贵部分参数对比：备注：esp8266 ram为64K instruction RAM,96K data RAM关于片上资源说法比较粗略且不严谨，详细差别可以参考各芯片的选型手册关于示波器/屏幕的问题：取决于需求而不是控制器。关于开发板：我个人都是直接上手最小系统板，从开发板上手容易导致只会用开发板，容易知其然不知其所以然，拿到最小系统容易蒙圈；自己搭外围电路是一种乐趣，自己搭建外围电路，换其它种类的单片机很方便总结下：不说需求就选型就是开玩笑。先定需求，要不要wifi，需不需要i2c/spi总线，需不需要串口，代码规模大概多大，io口需要几个，预算多少。以上需求确定后，基本上就选出来了。",硬件的正确打开方式很关键，所谓差之毫厘，错之千里。有些回答上来就贬低c51，有些回答就回答arduino。有些为8051辩护，却又不答不到点子上。单纯地贬低8051，或者单纯说arm，都不在点子上。首先，玩硬件是一件烧钱烧脑烧时间的事情，并不是买一块8051或者其次，你玩硬件的目的是什么？是学一门技术，还是玩玩而已。如果是玩玩而已，在高中/大学混个奖，其实在淘宝上买个什么机器人、自动小车套件，就可以了。如果真的是对硬件感兴趣，想学门技术，请耐住性子，开始还真不必买什么板子。从电路分析、模拟电路开始，公式+proteus验证。数字电路也是一样，公式+multisim。有朋友说，数电用FPGA，非常同意。不过时间可以放在方向确定之后。这之后，差不多可以搭建一个最小系统了。用8051也可以，用cortex m3也可以。之后，再在某个应用方向上扩展功能。到工厂去，到一线去。这中间的路，远非你想象那样简单。硬件不重要，反正到了一定阶段，你总会“发烧的”。。当然，如果有经济能力的话，花个几千块，可以体验一把。其实也没有什么好体验的。就当放个大烟花一样，就是看个热闹，看个稀奇，看个新鲜，看个好玩。放烟花的时候，并没有什么意思。真正有意思的时间段，是动了买烟花那个念头、挑烟花、一直到点烟花那一刹那。,目前凑合能说是一个单片机职业开发者了，应该能答一下这个题了。开始之前，看到上面有好几个答主吐槽了51，虽然“先看看答主的意思吧，想要玩硬件。但是很有意思的是你说的单片机多数时间更像是偏向于底层的软件开发，并不是硬件开发。既然我是搞单片机的，那就从单片机的角度先给你一些参考，得益于极高的性价比，目前市场上的主流之一是stm32系列，不管是m3内核的还是m4内核的，应用都非常广泛。至于被一致吐槽的51，这个确实在被慢慢淘汰，但是也不能说一无是处，毕竟一个被各大高校拿来当教材的单片机必然有它的可取之处。因为我开始阶段也都是自学，该踩过的坑都踩过，在我看来，51最大的优势是它的结构相对简单，寄存器很少，甚至达到了可以全部记住的地步。但是同时，51也有足够的能让你理解单片机是什么东西，能干什么的能力，定时器，中断，还有串口，这些做单片机逃不开的东西它都是有的。另外，51的内部资源是非常有限的，如何利用有限的资源，达到更好的效果，这个锻炼的是一种能力。虽然现在更强的单片机让这种不浪费每一个字节的态度已经变的没那么重要了，但是真的等到需要用到的时候，你会感谢以前学到的一些能力。如果你真的想深入到非常底层的东西，比如代码真实的运行轨迹，怎么实现的中断跳转，甚至怎么实现一个操作系统，51还算合适，仅仅因为它还不是那么复杂，而且各大高校的教材是非常多的。但是为了应用的话，51就只能用来学习一些基本概念了。推荐浅尝辄止就可以了。应用的话，一个更加主流的方案可以让你遇到问题更加容易解决，毕竟你遇到的BUG，可能其他人早就解决了。个人推荐stm32系列，无非因为便宜。而stm32选用库开发是大势所趋，寄存器的概念和操作希望你在开始之前就已经搞懂了。至于总结来说，单片机更适合一些底层控制，而树莓派用来做服务器或者处理中心更合适。时间有限，随便写点，到此为止。, 属于无论是 Arduino 还是 ,我个人看法。。。。。本人推荐先从啊丢肉（Arduino）开始。本人4年多前开始玩硬件，一开始是从三极管和集成电路开始搞得（那时候还没听说过单片机），然后就每次都是要很费心思的去设计电路才能搞出一个好点的产品出来。最早我就是连npn和pnp三极管的原理都不懂的，就去拼命查资料，看了n多书才弄明白，紧接着就用三极管做了一个闪灯。不久以后我又接触了555等集成电路，就觉得比三极管方便多了，在这期间我经常去查datasheet，然后又用集成电路搞出了流水灯.“石头剪子布”机.pwm电风扇.打地鼠机等，功放也做了十几个。不过有一些东西用集成电路来搞也很有困难，比如我曾想用555和4017来搞一个闹钟，结果失败了。。。。。。紧接着我就开始用89c52单片机。我对这东西的第一感觉就是好厉害，写个程序就可以实现很强大的功能！我曾经用集成电路搞失败的闹钟，电压表，温度计等东西用单片机轻松就可以搞的出来。过了一年多以后我又发现89c52的速度太慢了便换了stc15，这下子玩的更爽了。结果一年前，我们学校有很多人玩Arduino，他们用Starch编程就能够开发出很多好玩的东西，而且还不用焊接和写驱动......但是stc15要写底层驱动啊。。。。我就有了个想法，就是利用Arduino的方便来先搞出一个产品，再研究这个程序，最后搬到stc15上。凭借这样我终于在很短的时间内弄懂了nrf24l01和ws2812还有iic 1602模块，而且也更有成就感了。然而，我被stm32深深地困扰着。stm32太难学了吧，从几个月前学到现在只会操作所以我大力推荐Arduino，因为可以不用焊接，有现成的库可以用，不需要太多考虑底层驱动就可以搞出很好的产品，对新手很友好。最重要的，价格极其低，某宝十几块就可以买个UNO板，加上配件100不到就可以玩的很high了放一些自己做的东西和fpga。。。本人真没用过这些东西。。。。。,这俩完全不是一类东西，有啥好比较/选择的。还有楼上推荐 51/AVR 的怕不是传统工科学出来的……如果你是自学，做 DIY 项目，不打算涉及工程的话 51/AVR 这种关键问题：好像大家对我鄙视传统几大单片机意见很多。我不给新手推荐这些是因为：第三点可以展开说一下。比如一个人会标准 C 语言，懂模电数电基础，那么他去写 Arduino 只需要学习唯一一个 language extension：PROGMEM（而且这个东西早期是不会用到的）。如果他连电路基础都没有，没事我们有模拟器 ==========下面看到一个推荐在低功耗硬件上写 JS 的，让我写 JS 我宁愿写 51,新手必推arduino啊。。。淘宝上arduino nano才十几块钱，已经够玩出几十种花样了，而且超级好上手。Arduino nano在官网上已经停了，但是淘宝卖的质量绝对不差，高精尖的实验室都用它。工作了才开始学习硬件，arduino试了两三天时间就上手了，意外的是竟然因为设计硬件给工作带来了好多乐趣。至于有人提到的必须要买个示波器，因为兴趣开始学习的话，不妨用instructables推荐的方法，直接用arduino搭一个示波器出来。除了硬件的话，又喜欢编程，估计可以玩树莓派了，树莓派的教学资源比arduino要多得多，甚至官网上有很多专门为小孩子写的教程。假想自己以后有小孩子了，肯定给ta来个,很贵的东西才做选择，这么廉价的东西当然是：全都要！，有便利的操作系统和软件。因此玩软件占很大一部分。插个SD卡，跟着网上的教程装系统、装软件，学一点Linux。可学可玩的东西很多，花一两天上手以后，就可以随心所欲了 ：）树莓派官方推荐Python编程，可以写Python代码直接操作外围电路，这对懂一点编程但是不懂单片机的新手来说，吸引力很大。比如说写一个超声测距的程序，不到20行代码就搞定了。当然也可以用C开发。而与树莓派完全相反，不过arduino比专业用的单片机开发环境更友好，编译、烧写过程更加自动化，所以才这么受欢迎。上图是我自己做的便携式游戏机，显示驱动、输入驱动都重写优化过，目前只有这一个游戏 = =接线、面包板、按钮、二极管、各种传感器模块都是通用的，比如你可以买一个arduino小开发包，再加一个独立的树莓派+sd卡，就足够起步阶段的所有需要了，相当方便。PS：树莓派可以接USB键盘鼠标和任意HDMI显示器，所以不需要买专用设备。以后你玩熟了都是用电脑远程登陆上去操作的，就更不需要显示器了。,,,,,
在真实工作中的编程是怎么样的，与学校里有什么不同？,本人还是在校学生，学校里每门编程语言课程都是上一点上不完的，实验课写的代码最长一两百行。 很好奇在真实的工作环境中，程序员写代码是怎么样的。每天啪啪啪手敲成千上万行代码这样的吗。和在学校学习时写代码有什么异同。 (๑•ั็ω•็ั๑)希望已经工作的前辈们来回答回答。,/*说说我的经验*/刚进公司时，在你正式动手写代码前，很可能要理解在此阶段，你每天的工作就是看文档，看设计图，读代码，放断点debug，hack，fix，问同事。你很累。你很无聊。此外，刚进公司的你，会发现你的项目组正在使用一些奇葩工具、冷门技术，他们非常不好用，尤其跟你大学时候用的成熟IDE相比。你可能会想砸键盘，“谁特么想出来的用这个工具！谁特么写的这么sb的工具！”你很失望。渐渐的，你开始了解了你们的业务领域，所谓的掌握了一定的领域知识，你开始有能力判断哪些是权衡，哪些是权宜，哪些是极精妙的设计，哪些是遗留代码。你的领导也发现了这一点，于是开始给你安排简单的任务。他们可能是改一些显而易见的bug，可能是实现一个最简单的新特性。此时你会有一种驾驭的错觉，你很快的写好了功能，提交，开始幻想自己精妙的代码收到表扬。当然，不出意料的是，你提交的100行代码里被找出了10个bug，其中2个是很严重的逻辑错误，4个是未实现的需求，2个是ui错误，2个是边界条件未检查。你心里十分不爽，“妈的劳资这么屌炸天的代码你们都不懂得欣赏！”此时你的领导过来轻描淡写地来了一句，“我们提交之前要进行code review”。于是你找了你身边比较和善经常解答你问题的小哥来代码检视，10分钟之后，你漂亮的代码被改得面目全非，你欲哭无泪，又不想得罪前辈，于是默默地提交了这不知道是谁写的代码。就这样挣扎着过了几个月，你开始摸清了门道，于是你开始运用你大学时期课内或者课外学到的引以为傲的技巧和知识了。领导自然也发现了这一点，于是他开始安排你组织技术交流会，你精心准备好了ppt，自己在家排练，并且试图加入一些或者高冷或者没品的幽默段子。会议很成功，你感觉到同事开始对你刮目相看，你开始飘飘然，重新拾回“驾驭”的感觉，心想“就你们这帮码农，劳资以后可是架构师！”渐渐的，你开始进入了状态，你提交的代码越来越多。刚进公司时你从来没打开过的代码规范文档开始回来找你麻烦，不过这不是大问题。领导开始对你强调质量，而你则在心里抱怨旧代码的设计。你想要重构，你想要创新，你想要搞一个大新闻。与此同时，组里新来了一位同事老李，是从其他部门调过来的老员工，领导组织组里盛情欢迎了他，你心里不服，但是他是个好人，你们谈笑风生。机会来了。公司要紧急实现一个演示功能，百万级的合同能不能拿下来就看这次了，你的领导已经亲自飞往客户那里坐镇，他走时跟你说，“组里就靠你和老李了！”你十分激动，买好了泡面和零食，准备通宵作战，给领导提供最犀利的火力支援。第一个功能点谈下来了。领导发给你了要求。你发现你半懂不懂。里面提到的一些其他模块，你在每月组织的技术交流大会里听说过，但你写过的那点代码里从没调用过他们的API，你更没读过他们的代码。你有点不知所错，开始心虚。不管了，先开始干。你找到了一些相似的功能，翻出了一些发霉的陈年旧代码，注释里写着2004/06/18。你没有时间完全读懂，你开始复制粘贴，直接debug。当然，代码报错了，你开始挨个解决，就这样，一个通宵。第二天早上，你总算把你熟悉的后台部分调通了，你发现了新的麻烦。是前台。你对前台并不熟悉。你知道javascript的原名叫ECMAScript，你知道JQuery对象和dom对象的区别，但是你发现你还是看不懂你们的前台代码。怎么办？好吧，你决定拉下脸，问老李。老李看你的样子，说，“你去睡一会吧，我来帮你看”。你心里有些不甘，有些不好意思，也有些感激。你很想自己把它们做出来，但你不会，而且时间也来不及了。你想学学他是怎么做的，但是你的大脑已经停止工作了。于是你疲惫地笑了笑，“好，交给你了。你看一下这里这里还有这里...我就去睡半个小时，一会就回来找你。”你这一觉睡到了下午。你醒来一看表，震惊的弹起来，赶紧回办公室找老李。老李已经从你的座位回到自己的座位上了，正在慢悠悠地喝茶。你有些惊喜地问他，“怎么样？”他回头看见你回来了，说，“放心吧，已经给一线调试了，你去吃点饭吧。”你哪里有心思吃饭。你惊讶地对老李说了声“好的！太好了！”然后回到你的座位上迫不及待得打开代码开始运行。正如老李所说的，功能已经实现了。你轻舒一口气，拿出一碗泡面泡上，开始啃代码，心里想的是“这次一定要准备好，防止下次再出乱子。”啃着啃着，你有些不耐烦了，因为你发现代码越看越多，已经超出了你的大脑容量。你想了一下，决定先放在一边，查收一下邮件放松一下。邮箱里又是塞满了新员工培训的资料，各个部门的联谊活动通知，当然最多的是服务器发来的build report和test report。没什么有趣的事。你想了一下接下来要干嘛。算了，还是接着写新特性吧，测试们还等着你呢。但是你其实很忐忑，你的心早已飘去了前线，但是你知道你不能发邮件问状况，因为你领导可能几天没睡了，何况你也并没有什么特别紧急的事。你破天荒的把邮件客户端开着，留意每一个新收到的邮件。就在这样的忐忑中，一天过去了。反正也没什么事，你回家好好洗了个澡，定了个早早的闹铃，安心的睡觉了。第二天一大早你就跑去公司，果然邮箱里有了领导的邮件，上面写道“演示很成功，客户很满意，接下来是谈判阶段。家里的开发兄弟你们太棒了！”当然，你很高兴。但是又有一点失落。你不太明白为什么，于是你想了一下。随后你似乎明白了，虽然这是一个好消息，但是好像跟你又没什么关系，跟任何人似乎都没什么关系，好像是一件自然而然的事情一样，并没有“holy shit”超神的声音。过一会，你的大领导，项目总经理回复了你领导的邮件，说“干得好！同时也对家里的兄弟提出表扬！回来开庆功会！”你心里略有一些期待，“不错”，你想到，虽然主角不是你，但是你毕竟也是功臣。你为庆功会暗自准备了很久，你在网上浏览跟领导吃饭该说些什么，你想好了很多概括性的有内涵的问题来证明你对项目的理解，你也想多了解一些项目的大方向。几天之后，你领导回来了，大家开了庆功会。饭局上，大家聊聊家常，聊聊你领导在国外的见闻，大领导知道了你的名字，大家似乎很随意的打了一会牌，就这样平平淡淡的结束了。你略有一些失落。生活回归正常。但似乎又跟以前不那么一样。你在开发工作以外，有了新的任务，其中包括学习推广新技术等等。你开始跟你领导彻夜长谈。他与你分享他的经验，你与他分享你的见闻。你开始接触他的工作，比如提高团队能力，完善自动化测试，提高代码质量，提高代码性能，增强功能可配置性等等。你开始淡定的接受新的工作，而不再幻想一朝成名的瞬间。毕竟，迎接挑战才是你真正感兴趣的事。不过，这接下来的几个月里，除了改自己先前遗留下来的bug，你几乎没有提交任何代码。你每天的工作变成了看框架，读代码，看技术文档，学习试验新工具，浏览技术论坛等等。你开始觉得有一些缺乏成就感，也有点怀念绿绿的单元测试结果和噼里啪啦弹钢琴一般飞舞的手。有一天晚上，只有你和你的领导在加班。你的问题困在心里很久了，于是你问道，“老大，为什么我的任务跟别人的不太一样了？” 老大说，“那当然了，你是当作未来的技术主管来培养的。”突然的幸福让你不知所措，不过你克制地问道，“技术主管都是干什么的？” 老大并没有回答你，而是说，“以后你就知道了”。生活还在继续。跟你同一天入职的晓明是一个勤奋而又活泼开朗的人，但是你觉得他似乎入错了行。他总是挣扎着思考为什么他的代码中有逻辑错误。对你来说再简单直接不过的一段代码，他也很难读懂。领导也发现了这一点，所以安排他渐渐地向配置管理（CM）方向发展了。不过他似乎对这个很擅长，无论多么繁琐的任务，他总能按部就班的完成，各种纷杂的脚本他也一一了熟于胸，重要的是，他很有耐心，无论服务器出了什么奇葩问题，他都会跟它死磕到底。大家都很喜欢他，也很信赖他。有一天，晓明像往常一样抓住你向你请教问题。是个bug。你已经习惯了从代码检视开始。你自信地叫他给你看代码。然而你并没有发现什么问题。于是你问什么现象。他说部署到服务器上就报错了。你看了一下日志。你没想通。于是你再仔细重新检查了一下是否各个环节都作对了。是的，没有什么问题。好吧，你知道你遇到棘手的问题了。不过谁知道下一秒会不会就解决了呢？进公司这么久，各种奇葩问题对你来说早已是司空见惯。你打开搜索引擎，开始试图寻找相似的问题。你不断的做出假设，然后通过证据否定它们，然后再作出新假设……直到你突破了你的理智，你觉得可能是编译器出了问题。真的假的？你从来没有想过编译器会出问题，就好像你从来没有想过你的肝脏有一天会报错一样。你觉得应该是自己错了，于是你仔细排查了一下其他的可能性，不，没有别的问题。于是你把服务器上编译过的字节码通过问题虽然复杂，但是你只需要简单调整一下代码就可以绕过这一问题，于是你三下五除二把代码改好了，测试，嗯，哈哈，果然没有问题。晓明在旁边看得发愣，问你，“咋回事啊？” 你心里有一丝淡淡的骄傲，你兴奋地把他拉过来看你搜到的网页，你把代码反编译之后跟源代码对比，你给他讲依赖加载的实现……你兴奋得讲了一大堆，他静静地听完之后，眨了眨眼，说，“大神啊！”艹，他根本没听懂。你一下子泄了气。你也没什么可说的了，但也不知道该如何接茬，就谦虚道“没有没有，我不是大神”。虽然如此，他依然天天跟着你“大神”“大神”得叫你，虽然你知道他很菜，但是当个伪“大神”也不错。你有点沾沾自喜，想说给你的同学听，又觉得太 low。要不发个状态“我不做大神好多年”？想想太蠢，只好作罢。直到你发现还有好多人也被他称为“大神”。失落？有一点。你都习惯这种失落了。自从意气风发地毕业之后，你再也没有那种强烈的胜利的感觉。你觉得生活似乎并不是你之前那样的一元化。大家都有各自完全不同的特长、兴趣、知识和经验，你也有你的，你并不是万能的。即使在上学的时候你从来都是班级里的佼佼者，但是你渐渐的发现世界还很大，你不会的还很多，山外有山，人外有人，路漫漫其修远兮，吾将上下而求索……想到这，你的思绪突然中断了。你觉得自己实在是太优秀了，还懂得反思。你又开始了沾沾自喜，心想，自己如此优秀的人，总有一天会干出一番大事。于是你收拾收拾心情，继续工作。最近项目没有那么紧张了，你渐渐的多出了不少时间。你领导也是。所以他又推荐给你了几本书叫你看，都是一些设计的书，什么《领域驱动设计》、《企业应用架构模式》、《这些书写的真好，你感叹道。读着它们，你总是不自禁地想起你们的代码。你非常能理解书里描述的现象，你觉得你们的代码有着同样的问题。可是当书里介绍解决方案时，你却发现理解它们很困难。书里面的问题域跟你们的不太一样，你们有着不一样的需求和架构。书里说对于数据库的操作要做这样的一层封装，可是你们除了数据库还有web service；书里说对于UI和业务逻辑要做这样的隔离，可是你们的UI并没有直接调用后台，也是通过web service；书里面提到了好多技巧，你们并不需要……你看得很无聊，渐渐的失去了耐心。简单翻完了书的后半部分，你觉得你差不多明白书里面说的方法了。一种你踌躇满志地对你领导说，“我想对我们的代码 进 行 重 构 。”出乎你意料的是，你领导一点都没有惊讶，而是笑眯眯的问你，“呦，好啊，你打算怎么搞啊？” 你没有想过这个问题，愣了一下，说，“就按照怎么实施？什么叫怎么实施？改代码就是改代码咯，还怎么实施？你摆出了一个困惑的表情。领导笑的更开心了，“你还记得《重构》里说过的，重构代码要保证单元测试全通过吗？但是现在你要重新设计，单元测试肯定都没用了，要重新改。你来看这个。” 他掏出一本书，指着某一章的标题说，“如果要对代码进行大型重构，只好退而求其次，使用高覆盖率的你听的如痴如醉，如沐甘霖。你想起在学校里，如果你对代码不爽，你可以干脆删掉重写。你甚至都不需要一个版本控制工具。你从来没有想过在真正的工程中有这么多复杂的问题以及这么多聪明的前辈们发明了各种系统化的方法。你再一次发现了新大陆。讨论之后的结论是，你负责监督并提高自动化测试的覆盖率，同时你可以先构造新的模型代码，也可以提交，但是在发布时并不把它们包含进去。当新的代码写好之后先内部测试，确保几乎没有问题了，再策略性的发布出去。说干就干，你很兴奋。“终于可以写代码了！”你开心的对领导说。领导又笑了，“写代码并不是重点，重点是让它们正确的执行起来。” 你若有所思的点点头，心却早已飞到了你的新设计上。你打开了看过改过无数遍的最核心的业务代码，心里想象着它们被你改好之后的样子，完美的领域模型、但是细节之处有乾坤。你发现你第一行就不知道怎么改。是日志。你想了半天，没有想到任何现成的解决方案。你问自己，日志算不算业务逻辑呢？算吧，它又对框架有很多依赖；不算吧，那把它放哪呢？你对着日志的代码看了整整一个下午，仍然毫无头绪。你觉得日志简直是破坏你优雅代码的杀手，你真恨不得把它们给删了……算了，先不想了。你决定今天给自己放一天假，早早回家看个电影然后睡觉。刚推开门，哇！外面下雪了。漫天的雪花翩翩飞舞，一扫平日晚上萧条的景象。昏黄的路灯照射下，雪花反射出暖暖的光。你想起了你在北国的家乡。北方的小伙伴们都说江南的湿冷让人难以忍受，“屋里跟屋外一样冷”。你在此时此刻却有了另外的感悟，你觉得说成”屋外跟屋里一样暖和”也说得通。也许生活就是这样吧，你想到，并不总是得意，也并不总是失望。你的期待总是狡猾得伪装成另外的样子悄悄的进入到你的生活中，而你的得意又总是在指缝中流走，想握也握不住。但是不管怎么样，你觉得你很快乐，也很幸福。你很庆幸自己成为了程序员。你对现在的自己感觉到骄傲。意识到你已经在门口发呆了很久，你笑了，笑自己什么时候变的这么多愁善感。你走出门去，踩在雪上，发出咯吱咯吱的声音……<全文完><程序员的故事还没有完>/** 后记真的没有想到大家对这篇小文章（我都不知道能不能称为文章）这么喜欢，我本意只是想通过一些真实的细节来描述工作和学校的不同的，谁知道写着写着就成故事了:-D其实后面还有更多有意思的故事，不过已经扯得太远了，想听的话带上好酒来找我吧！至于你们所关心的老李，他是真的，但是他并不是故事经过了加工，亦真亦假，人物也不是完全还原，但是看到你们留言说很真实，我非常开心！最后，作为一个工科男，我决定总结一下：我暂时只能想到这么多，更多的就靠大家自己发掘啦。最后祝喜欢编程的大家都成为 */,"第一名答案给的是一个在学校里屌屌的学生，进去一家传统公司，然后看不上一切别人垃圾代码的视角。我带来一个，毕业眼界也挺高，觉得自己技术不错，然后面试被真正的大牛虐成狗，然后还跪舔进入公司继续被虐的，游戏公司，第一视角。给我一份爱，还你一夜情。第一视角，现在开始。10年进入大学，无限憧憬大学，然后就傻逼了整个大一上学期，大一下学期买了电脑接触了dota，两年刀塔路，步步皆辛苦。大三下学期开始意识到，毕业总得赚钱吃饭，现在的节奏感觉会要饭，然后就开始敲代码。一开始无任何头绪，找到某培训机构视频开始看，我学java，据说ssh搞完，出去就有6k以上，我无耻的硬了。不对，我傻傻的信了。现在想想，多单纯啊，6k就感觉吊炸天了。大四下学期，独自一人去了广州，学校同学还在学校里接受培训机构培训。我觉得教的都会了。就先出来了。2013年11月18号，到了广州。投了一圈，没反应。感觉人生挫败了。这时候，有时候不得不说可怜之人偶尔也有运气好的时候。在qq上碰到一个公司发招聘，我完全不抱希望的尝试下，居然给了面试机会。当天去面试信心满满，然而并没有什么卵用。老大直接从基础问到虚拟机，计算机原理，编译原理。当场直接跪了，我现在都还有心理阴影。整整差不多一个小时，我感觉像是一个世纪。印象比较深，老大问编译原理，我说我们没有开编译原理的课，事实是真的没有。老大原话，“你们他妈没有编译原理也敢叫软件工程专业！”，我完全无法接下去。最后老大问，你坚持最久的一件事是什么？大三一直都在跑步，我说，跑步，跑了一年多。老大说，那你感谢你的跑步吧。就这样我留了下来。得到了全公司最低的月薪，别问我怎么知道的，不可能有人比我更低就是了。忘说了，老大长发，那种中长发，飘逸的那种，第一眼真心就觉得大牛。至今无法忘记见老大的第一眼。好了，不能再说了，再说会有gay的即视感。留下来后，下周二入职，周一我去看了牙齿，做根管治疗。大学里面完全不知道游戏怎么做，游戏服务端是怎么做。一丝一毫的概念都没有。第一天几乎没啥事做，我自己配了下环境，上网看了看游戏相关的东西。还是完全都不了解游戏到底怎么做。我的座位靠着一个项目组老员工，我就看他和别人一句话过来一句话过去，然后看看代码什么的，后来才知道这叫连调。第二天，旁边的老员工问我是新来的么，然后让我去找xxx要学习视频，然后拿两本书，一本Java第二个人进来后，我和他两人开始做第一个测试项目。SVN管理系统。在这之前，我对SVN真心都不太熟，只是知道这东西。第一个版本，鸟哥说写个命令行版本的，就直接在命令行能交互就行，我当时虽然被虐的很惨，但还是比较有信心的。毕竟当时我看培训视频，还写过一个OA的项目，当时我觉得OA就很牛逼了。没办法，眼界太低。开始做了才知道，这东西真心没那么简单，SVN写过代码的都知道，版本控制，有库什么的，原生版本好像是没有权限的，然后我们就是要在外面加一层控制，并把权限管理加进去，用一个RBAC模型，总之全都没听过，总之做的艰难前行。忘了说，当时面试进来，HR的老大就强调过，说他们公司对新人的淘汰率很高，每做一个小项目，都会有代码review，会有几个老大一起看，如果说不过，给次机会回去改，改了还不能过，直接辞退走人。童话里真的都是骗人的，我之前从来没有过这样的心理准备。你们有待过这样的公司么，真的是直接走人，真真的！后来看到有人review完，会议室里出来，就收拾东西去办离职了。你们感受下。在高压下前行，完成了第一个版本。第一次review，我不知道女孩子第一次是啥感觉，反正我进会议室内心是期待而又忐忑的。过去从来没有人这么正式的看过我的代码，一行一行的看。真的是一行一行的看！功能是最基础的，但是鸟哥真的不怎么在乎那些功能，他觉得那是必然要做到的。功能验证演示也就几分钟的事，功能看完就是看代码。在会议室，用个笔记本，远程桌面连接到自己的电脑上，然后直接投影到会议里，直接在eclipse里面看，从入口开始，一个一个方法，一行一行代码，那天整个人内心真的是被骂崩溃的。对的，就是被骂崩溃的。看到别人进入公司都会碰到一个和蔼的老李，我这边真没有老李，只有严厉的不能再严厉的鸟哥。代码中各种错误被鸟哥一处一处指出，包括各种编码规范错误，并发控制考虑，该抽出可配置文件的地方抽出配置文件去配，不能硬编码在代码中。印象很深的是不处理异常，直接就打印出来了。“你他妈打印出来给谁看，以后都是跑在服务器上的，以后不要让我看到syso在代码中出现”，然后还特意全局搜了下syso这句打印代码的数量，然后鸟哥一头黑线，因为我所有有异常的地方都是打印出来。当时加上设计错误，代码错误，反正记起来得有十几条，我写在笔记本上的，笔记本现在依然躺在我电脑边上。我是个恋旧的人。经过第一次review，我和另外一个哥们总算是感受到什么叫代码review了。那哥们比我早一届，已经毕业，之前在一家公司做过，我问他这咋办，真的是被喷成狗了。他说实在不行就辞职了。我没说话。/**2015/10/5 2点更新**/经过第一次review，回去改第二版，基本知道了问题有哪些，虽然被打击的非常惨，但是还是有信心可以把这些代码改好的。当时其中一个主要大的问题，就是在做多任务处理时，对多线程的处理，以及多线程异常的处理。当时鸟哥说，上传功能有可能当时是因为网速或者其他因素没上传成功，但是可能稍微多尝试几次就能成功，所以出错后要加尝试处理。当时我是真的没经验，我就觉得尝试嘛，得嘞，那捕获到异常，我就循环，while（true）一直就尝试上传操作，直到上传成功才跳出这段代码。所以当我上次看到那个图，一个哥们写代码，失败之后再强制去试100次的代码的时候，我真的是笑尿的，因为我比他更屌，我是试无限次。当然最后这里也是被鸟哥喷的狗血淋头，鸟哥说，你真牛逼。你这是在代码里面写了个死循环啊。我真的当时脸都绿了，因为我知道在服务器代码上写个死循环是什么后果，真的是一背都是汗。哦，插一段，当时第一次还是第二次review的时候，鸟哥看完代码之后，发现太多问题，实在没法看下去了，说，“你们的代码真的让我感觉到恶心。”。不知道你们review的时候，听到这么一句是什么感觉，反正我是一辈子忘不掉了，和我同期那个同事也是，至今一起吃饭每次都会回忆这句。当时经过了，几次改版，从基本命令行，到后来用bootstrap做个web版本，前前后后鬼门关走了得有7,8次，特别是当时做web版本，鸟哥要求使用restful风格，又是一个新名词，restful，好好休息么？我承认我当时真的是渣1的战力。不过鸟哥讲解东西真的是一绝，就三两下，真的可以把restful是个什么东西让你有个清晰的了解。restful当时还好说，springmvc本来就支持restful，真正让我差点挂掉的是js。JS我真的是学了一万年都没学好的一个东西，当时我和那个同事两人还是有点美术追求的，不想就写个特别简陋的界面出来，感觉至少也得让人能下的去眼吧，虽然鸟哥当时没有要求这个。后来我们两就想用bootstrap，一直都挺火的一个前端框架，但是也是完全没接触过，然后我还是9流的js程序，功能没花我太多时间，反而是界面真的是让我整个人都疯了。很难整体上做出一个比较好的效果出来。最后听说公司后台用的就是===更了一段。待续。大家来点赞。要不好多人看不到。被压在下面。/**看了一眼，上一次更新时2015年10月5号，差两天正好一年，时间真的好快2016年10月3日更新*/感觉自己的记忆在一点点流失，趁着现在还能回忆起，我还是要坚持把我在那游戏公司的一年多写完。好不容易熬过SVN权限管理系统的痛苦黑暗的一段时期，差不多改了3个还是4个版本，从命令行一直写到WEB版本，方才罢休，总算是过了。不过忘记当时通过是什么感觉了，很后悔没有把但是最直接最真切的感受记录下，有可能这辈子都不会再有了。据之前已经通过试用期的同事小道消息，过了SVN权限管理系统之后就能真是接触游戏代码了，当时还是很兴奋的。马上要接触自己从没接触过的东西，好奇心所带来的兴奋感冲淡了那段难熬的痛苦时光。当时公司扩招的很厉害，办公位置不够，都是各种找位置挤，到最后没法挤了，就弄了个会议室，所有试用期的同学全部搬到了会议室改成的办公区。他们取名叫小黑屋。就是一个没有窗户的小会议室，挤一挤坐了7,8个人。后来我们也是在小黑屋里，结下了深厚的战友情，这是后话了。第二个测试项目开始涉及游戏，做一个黑市商店，也就是可以发布物品，然后玩家可以选择购买，然后扣费发放购买奖励什么的。但是听到需求的第一感觉是完全没概念的，没有任何整体的设计概念，知道像以前一样，定义个存储，设计一些接口啥的，对于实际游戏中的设计，或者说最佳实践完全木有概念。而且这次开始有了一个简单的公司框架给我们使用，我和我那个小伙伴简直如获至宝，感觉看公司的实际运行的东西是怎么写的，然而没想到木有源码，只是一个简单的架子，有些调用实例，底层的代码都是木有的。sigh.就这样做了第二个测试项目，过程快进了，和之前类似，都是被骂，修改，继续被骂，再修改。还好反正抱着必死的决心，也就坚持过来了。我那个一起吃甜筒的小伙伴中途还提过一次辞职，不过后来又被鸟哥两句话给安定下来了。我还记得那天鸟哥突然把我俩叫到会议室去，我一脸懵逼，然后就说我们就这么玻璃心，然后说我那小伙伴提了离职，问我怎么想的。我还一脸傻逼的笑着说，哈哈，我没有啊，还好诶。但是我的内心独白其实是，其实我也想过。经过了这个游戏项目，后面开始顺利很多，偶尔还会犯特别二的错误，但是已经可以整体理解真实游戏开发怎么做了。后面还继续做了两个测试项目，都是游戏中的真是模块，一个摇钱树，一个奴隶系统，我小伙伴抽到的是竞技场。反正就这么熬了下来。进到项目组之后，开始负责开发一些小玩法模块，修复一些产品提过来的BUG。老大已经不是鸟哥，换了实际游戏开发组的老大。不过要求没有一点点的减弱，每次上线的代码要review，会扣一些很细节的内存使用，数据结构使用，边界的处理从这个老大那里也是学到很多。对待代码的那种认真的态度，和对实际review中的错误代码敏感度，真是我到现在都很敬佩的。总是能在review中快速看出错误点，或者可能有疑问的地方，提出质疑。人真的是在高压环境下成长比较快，我很庆幸能一开始进入到这样的团队接受锻炼，提高自己的眼界。我一直觉得，代码眼界很重要，你要知道什么是好的代码。除了老大，组里的一些同事也都非常的执着认真，说实话，我真心感觉自己有时候就是个渣。当时坐我旁边的是一个成都的哥们，操着一口四川普通话，川普，你晓得的撒，真心是逗的飞起。不过他写代码做东西的速度也是快的飞起。而且看问题的角度经常能转换的非常快。近水楼台嘛，所以我的很多问题都是找他讨论的，总能找到一些新的思路。关键是！！！天天炒股还能不耽误工作！！代码照样写的飞起！！我也是没话说了。像我这种，只要想着什么事的时候，基本工作效率就为0了。还有个湖南的同事，工作经验比较丰富的，之前电信研究院做了4年还是5年，然后转行来做游戏。我们都叫他斌哥哥。我就记得当时印象最深的，我们在闲聊一个什么事情的时候，然后斌哥哥说他就是真心喜欢写代码的。从那以后这句话一直是我检验自己内心的标杆啊！不过页游最终是走下衰亡的趋势，是无法逆的。技术人再怎么努力，你也没法反抗市场的选择。页游市场被37几乎全部霸占，手游开始崛起，最终呆了一年多之后，我也是不得不选择离开。我的第一家游戏公司，又爱又恨的公司。到现在，我午睡的靠枕和毯子都还是这家公司发的。我说过，我是个恋旧的人。嘻嘻。好像写的越来越离题了，反正我其实也是在写给以后的自己看了。大家将就吧。",作为一个计算机相关专业毕业，毕业后一直从事编程相关工作10年多的大叔就这点上可以谈一些看法。我在面试很多计算机本科甚至硕士毕业生时，他们很难向你展现实际的项目经验和工作能力，因此你只能考验他们对某门编程语言的熟悉程度，也就只能是语法和算法。因此也不可避免的让他们做些算法题。说实话，我觉得这种方式很傻，有谁会在纸上写程序呢？但你会有更好的选拨方法吗？不夸张的说，一切学校学习的目的是为了通过考试。因此在学校学习编程无非是通过期末的考试。考试是在卷子上写程序，还是在机器上写程序并不重要，因为无论哪种考核方式，都和你将来是否成为一个合格的程序员没有什么卵关系，它仅仅就是纯粹的考试。但是，我想说编程的能力不在于你对这门计算机语言语法背诵以及几个算法的记忆。在实际工作中，更多在于你怎么组织你的代码。 语法是可以百度的，算法前人早已经给你写好了，你只需要知道怎么调用。但是新手和老手写出的程序是立马能闻出来的。有些人面试的时候很厉害，但到后面，你会发现他/她并不适合也不想成为一个程序员。因为真正的编程工作是如何理清一大堆代码，而不是在几个烧脑的算法上玩智力游戏。如果你刚入行接手的是一堆糟糕的代码，那么我只能遗憾的告诉你，你的程序员生涯有了一个糟糕的开始。第一次糟糕的体验会是影响一生的。所以我希望你一开始接手到的是一堆高人留下的代码，这对你的发展以及培养你对编程兴趣是起到至关重要的作用的。当然，如果你天赋好，你最好有能力选择好的代码堆，或者自立门户。毕竟自己挖坑总比填别人的坑要来得爽。我这里有点小小的人森经验要分享，就是你看一个人适不适合编程，就得看他是不是喜欢把事物整理得井井有条。在学校里你看他的床铺，看他的写字台，看他组织集体活动的能力，等等。不要以为程序猿都是胡子拉碴，脏里八稀的，那些都是电影小说杜撰的。就算有时候会出现这种情况，那也是为了短期的冲刺工作。程序猿就是艺术家，虽然很多人不这么看，就连很多程序员自己也并不这么认为。但实际上，程序员就是艺术家。语法和算法，还有程序组织能力，那些都只是基本功，就像画家的画功，都不需要提。厉害的程序员是要有对现实世界抽象的能力，是要用系统性的思维去理解世界，并有可能模仿上帝去创造自己世界的人。因此，你会看到许多高阶程序员写的书和文章都像哲学家写的一样。看一段糟糕的代码就如同你走进一间脏乱的房间，你会闻到不好的味道，你会看到东西被放在不该放的位置上。新手写的代码就如同一间不知道整理的小孩的房间：被子团在床上，玩具乱扔，墙上乱画.....你暂时是不会指望他能把整个家都收拾好的。因此，很多情况下我带新人更多的是会告诉他们代码应该写在哪里，而不是i++和++i的区别。实际的编程工作中，你做的事情往往是一个大系统中的一个组件。完成一个大系统的开发工作是一个团队的事情，因此你必须学会如何团队开发。而这点上和学校学习的编程是有本质区别的。学校的编程课教授的东西是点状的，它教你如何写出可以编译过去的一小段代码，它教你一些经典算法，但都没什么实际卵用。举个例子，比如排序算法，教科书上一大堆。有些同学硬是能将各种排序算法默写出来。然而他们永远不会想到关系型数据库是如何实现排序的，因此我一问他们如果内存装不下所有数据的情况下，怎么排序，就个个傻眼了。因为他们只知道在内存中排序数据，不知道多了硬盘后怎么处理；他们只知道这些点状的知识点对于一个不接触实际的学生来说是很难串起来的。团队开发是个很搞的课题，涉及组织理论。虽然很多人都能意识到这样一个事实：人多未必能办好事。但真正联系到实际，就是如何发挥一个团队的最高组织效率时，往往对自己的认识是估计不足的。很多想当然的事情是行不通的。编程工作是纯粹的脑力劳动，是很难量化的劳动。咨询公司乐此不疲的发明各种指标（如：代码行数）和各种团队编程模式（如：SCRUM），但也是基本没什么卵用的。永远记住程序员是艺术家，不要试图用管理指标来衡量艺术家的工作，这只能靠尽可能发挥程序员的主观能动性来提高效率和质量。最近，考古学家发现，埃及金字塔不可能是由奴隶建造的，而是由拥有绝对信仰的大量工匠完成的。每个工匠切割每块石头的时候，都倾注了他的心血和虔诚，这并不需要由监工去督促。这些由不同工匠独立完成的石头最终能拼接成如此巨大完美的,"百赞啦，又想到了一些，更新一波~ 文档：            学校：口口相传            工作：别人都用Markdown写文档，快把你的Word收起来……    delay：            学校：deadline之前搞定了就好，先休息半个月再说            工作：每天都要发项目日报，你的老板和你老板的老板都盯着呢……    联调：            学校：自己和自己联调，左右互搏……            工作：我：##￥￥%！……&*！！ 对方：没听懂……    需求：            学校：定期和老师汇报进度就行，需求一般不会发生变化            工作：时常会碰到来求助的运营MM    故障：            学校：就算真的遇到了，顶多挨顿骂            工作：这个季度的kpi又悬了……    上级：            学校：才不管你怎么实现的，也不会看你代码，能用就好            工作：不但会问你怎么实现的，也会review你代码，还会强行让你用一些新技术……    代码复用：            学校：复用全靠写函数            工作：就算跨项目也要强行复用……    造轮子：            学校：轮子是什么            工作：这个季度造个什么轮子吹比呢……    bugs：            学校：以空指针居多            工作：只有想不到，没有遇不到……    吐槽：            学校：好烦啊，做了这么多事情一点好处也没有            工作：运营又说改版了，之前的代码可是PHP的啊，确定这样也能改版？--------------------------------------------------------------------    项目：            学校：基于XXX的XXX系统的设计            工作：商家处罚中心    工作来源：            学校：老师或者是自己            工作：产品或者运营    工作内容：            学校：实现完整的项目            工作：实现完整项目是少数情况，大部分是新增功能需求    开发之前：            学校：打游戏看电影刷知乎拖延一下            工作：开会评审需求，分配工作    开发人数：            学校：前端后台产品设计全是自己            工作：前端2两人，后台3人，产品一人    代码：            学校：所有代码自己搞定            工作：只负责规则模块    规范：            学校：实现功能就好，代码写成什么样不重要，从来不写任何注释，代码之后自己刚写完的几天才能看得懂            工作：每一个模块都需要完成相应的单测，并且保证测试通过。代码需要简洁美观，变量、类等命名严格遵守驼峰命名法，需要附加完备的注释    框架：            学校：框架是什么，实现功能就行            工作：公司对各个功能（例如链接数据库等）进行了封装，必须要使用相应的框架    封装：            学校：为什么一定要面向对象，怎么简单粗暴怎么来            工作：进行一定的封装是必须的，要考虑代码的复用性，尽可能避免代码冗余。差的封装是会被吐槽的    debug：            学校：肉眼，偶尔使用工具，一碰到蛋疼一下午            工作：使用工具，流程化排查问题    疑难杂症：            学校：自己蛋疼摸索，直到放弃向研究生师兄请教            工作：蛋疼摸索一会，请教大牛    发布：            学校：随意发            工作：每次发布需要请示老板，你多发几次试试……    review：            学校：review是啥……            工作：发布之前必须review，被挑到刺打回去再正常不过    maven：            学校：maven是啥……            工作：每个模块的打包发布都有严格的流程，maven依赖必须要仔细，否则很容易遇到问题，有专门的工具对maven依赖进行检查    git：            学校：coder只有一个，用git干嘛……            工作：git的命令牢记于心，stash,merge,checkout花式命令，键盘敲起来    氛围：            学校：开发累了，打会游戏休息一下            工作：老板就在旁边，你打个游戏试试……    设计模式：            学校：闻所未闻            工作：原来这种方法这么机制，赶快学一下，以后说不定能用上先想到这么多，后面想到了再来更",我本科的专业是软件工程，大一的C++基础课学的还不错，后面数据结构与算法也学得挺认真的，数据库结构学的时候搞不清那么多范式有什么用，UML直接睡过去了，软件生命周期搞不懂是怎么回事，测试这门课老师都没怎么好好讲。所以上面几门课直到毕业也没觉得有什么用，感觉C++的基础好，数据结构和算法好，就是编程好了。到了工作中，才发现原来还有【需求】这种东西，不是课程作业那种胡搞瞎搞，差不多就行的了。而且做出来的程序不能只是自己演示正常就可以，要经受的住用户的各种胡搞瞎搞，被各种奇怪操作导致的BUG打回来，才知道什么叫程序的健壮性。接手了一份胡搞瞎搞的数据库之后，才知道范式说的是什么，师傅说我司数据库每天要备份六次，我问为什么不多备份几次，他说，因为每次备份需要四个小时...后来做了很多外包项目，才知道需求管理，或者说讨价还价其实也是个重要的编程技能。不是每个程序员都可以干干净净的只搞技术研究，做一个科学家。程序员应该是个工程师，工程师的话就要以实现为目标，很多时候，算法效率不是最重要的，有时候为了工程上的需要，还要牺牲程序效率换取工作流程上的效率或者框架的可维护性。,"小慕决定先说一下比较直观的不同：程序员A：在学校编程的时候，有着一头乌黑的秀发，现在发际线惨不忍睹；程序员B：在学校的时候没钱觉得配不上女神，现在有钱了觉得好像并不是钱的问题？程序员C：在学校起码能靠帮女同学修电脑和炫技装X，现在在公司连个可以装X的对象都没有；程序员PHP：在学校的时候我不知道谁才是最好的语言，在工作中我终于明白……言归正传，小慕认为在实际工作中的编程，跟在校期间相比，是在学校里编程，不外乎三种情况：一是课堂或课后作业；二是期末考试或毕业设计；三是课余时间参与维护的开源小项目。开发团队要么是学校社团成员，要么是同宿舍的几位室友，大多数情况下都是一个人同时身兼数职，承包了产品经理、开发工程师、测试工程师甚至还包括美工的所有工作。在学校里编程，只要根据老师布置下来的课题，实现主要功能，经简单测试可以运行就算及格。你可以各种花式炫技，也可以随便应付了事，因为在学校里编程最主要的目的是：在工作中的编程除了文首说的直观的不同当然还存在着许多深层次的不同，这些不同只有经历过的人才能明白。如果你正打算去做一名码农，小慕的总结会对你有一些作用的，具体有以下几点：在工作中，需要使用公司专门要求的工具来完成编程，同时还有可能需要用到多种工具，这就需要程序员对于工具的熟练运用呈现多样性；而在学校编程因为实现的业务功能单一，所以使用的工具也较为单一，基本都是主流的IDE，相对要容易得多。生动一点地说就是在学校里，你可能只用一个电饭锅就能解决一顿饱饭，而在工作中，你可能还需要烤箱、打火灶、汤锅、炖锅等等更多的工具来完成。在工作中，代码需要遵循一套严格的编写规范，因为在工作中的代码不是属于某一个人的，它是需要大家共同维护的。阿里巴巴的开发团队就有专门的开发手册，每行代码都需要经过至少一次其他人的Code Review，因此，遵守命名规范利人利己。在学校里写的代码可能没几个人会看，命名可以随意起int a、int b等等，最后只要实现功能就好，并且过后很少会被再拿出来看。而在工作中，从来不写注释或者简单注释几句的代码，一段时间之后可能自己都看不懂了，这种情况是不被允许的，因为这些代码可能会被持续使用很长的时间，需要不断地维护和更新。从某种程度上说，在工作中，相比开发的时间，写单元测试和接口测试的时间只多不少。一行代码可能需要好几行代码、好几个用例来测试，通常需要使用工具，按照规范的流程来进行调试。并且，在工作中，测试是重于开发的。就像生产一个玩具小汽车，设计出来，还要测试它能不能跑，跑得快不快，遇到撞击会怎样等等，在工作中的程序在投入使用前同样也是经历了无数次的测试，才最终与用户见面的。而在学校，大多数情况是这样的：代码写完运行一下、肉眼看一下，偶尔会使用工具，碰到bug可能会蛋疼一下午。（举个栗子：项目上线发布后有个模块挂了）在工作中，解决同一个问题，能够用更少的代码的人水平更高，你写的每一行代码都必须保证是精华。因为在工作中代码写完并不代表结束，后期可能还要持续维护，就算你离开了，也要保证接手的人能读懂，所以写的代码贵在精而不在多。在学校里编程，可能写的代码越多，会感觉自己越牛逼。有时候一天能撸上千行代码，感觉自己太牛X了，然而这在工作中并没有什么卵用。在工作中，你负责的往往会是一个大工程中的一个模块。完成一个大工程的开发工作是一个团队的事情，因此你必须学会团队合作，也就是说你的代码要让更多的人看懂，也能让更多的人拿来即用。在学校，教的都是一些经典算法，解决些通用的问题，但是当面临实际的问题时，这些往往没有卵用。举个例子，比如排序算法，课本上有很多，有些同学甚至能将各种排序算法都默写出来。可他们永远不明白关系型数据库是如何实现排序的，因此当你问他们如果内存装不下所有数据该怎么排序时，他们只能一脸懵逼地望着你。在工作中，可能一行代码面对的用户会达到上千万甚至上亿，所以就要求开发者在开发的时候要把很多可能会出现的问题考虑进去。也就是说如果你编写的是一个把猪肉放进去可以做成火腿的程序，你还要考虑到如果有人放进去的是一袋面粉，程序是否能够完成对它的加工。以12306为例，在使用阿里的云计算平台之前，每年到春运的时候网站几乎都会因为访问量过大而瘫痪，铁道部受到铺天盖地的吐槽，这可能就是当时开发者没有考虑到或者是没有解决的问题。后来，随着阿里的云计算平台的支持，很好的解决了访问量过大的问题，还提升了网站的性能，极大的提高了网站的承载量及用户体验，口诛笔伐明显平息了很多。而在学校里，我们写的代码充其量只是个小玩具，用户量一只手数得清，甚至在变成玩具之前就已经夭折了。在学校里如果你想实现苹果去皮的功能，只考虑这一个功能就好，很少需要再去考虑如果是一个橙子，该怎么办。在工作中，你的时间会被分配到多个环节，包括了解精准的业务目标，预研需要用到的技术手段、如何选型、详细设计、编码实现、配合测试、上线及上线后的维护等等。每一步都都要评审，降低返工风险，具体到每一个项目时遇到的问题可能会更多，比如怎么测试，怎么部署，怎么更新，怎么监控和保证健壮性、效率以及规模。用户量多了怎么办，被攻击了怎么办，你依赖的东西挂了怎么办，你部署的环境变了怎么办。更深层的考虑是不是要开源？这个东西能维持几年？有啥竞争性的产品？他们都怎么样？下一步该做啥？等等等等……会多出来好多事情。所以工作中，coding所分配到的时间可能只是你的工作时间很少的一部分。在学校里，所谓的编程更多的时间就真的只是coding,或者是通过算法解题，一个小的算法解决一个问题等等。这跟实际工作中的强度和时间分配相比，有很大差别。在工作中，代码要考虑可用性、易用性、安全性、健壮性等因素。假如你身处金融机构，哪怕一行代码出错，都有可能导致上百万、上千万甚至更多的资金损失。所以，对于你所撸的代码一定要常怀一颗敬畏之心，要经得起考量，质量比数量更为重要。“而在学校里，只需要考虑指定的功能是否得以实现即可，即使存在问题也只是重新修改，或者请老师给予指正，不会带来实质性的影响，因此在Coding的时候也不需要非常的谨小慎微。在工作中，作为程序员的你，编程是你安身立命、养家糊口的基础，也是在职场彰显个人才华的根本，对于整个职业生涯的发展发挥着至关重要的作用。如果在IT公司或者互联网公司任职，技术太水的话是过不下去的，轻则拿不到理想的收入，重则与心仪的公司无缘。很多人都知道程序员的收入比其他工种普遍偏高，其实他们的投入成本也极大，可能每周工作996或者997。好在收入与所付出的努力能够成正比。在学校里，完成作品带来的可能仅仅是精神上的愉悦，或者是得到老师的褒奖及奖励，与工作中的直接收益结构是完全不同的。也就是说：但是，程序员的辛苦也是众所周知的。所以，在回答的最后，请各位IT、互联网公司的产品经理大大，或者说，如果你身边有“程序猿”朋友，请千万记得一定要对他好一点，没事帮他捏捏肩捶捶背，没事多请他吃吃饭，多帮他买买单，编程的压力已经很大了，请理解他，帮助他，毕竟猿生已经如此的艰难，真要把天天加班又没有对象的他们惹急了，后果会是……还有如果你是程序员的女朋友，想为程序员男朋友做点什么，那么请参考知乎用户 @韩食 的回答：“我是一位程序员的女朋友。和他见面的时间不是很多，但是也不会有生疏感。他有时工作到很晚，压力也比较大，我尽量就是在他专注的时候不打扰，在他运行完一段程序后给他递上一杯热饮。没有工作的时候，我和他一起出去玩，去山林中休憩和在城市中探险。他之前也是一个焦虑的人，他现在是一个很开朗快乐的人。他生日的时候，我送了他一把机械键盘，本来我对这些外设也是一窍不通，也是慢慢查资料了解哪些更适合。把护眼灯调柔和一点，在座椅上摆上舒适和坐垫。我们一起的时候很快乐，真诚，信任。他抱着我睡觉的时候，我能感觉到他的疲惫，他的呼吸声也是我的安眠曲。 然而，以上都是我编的。我是那个程序员，我没有女朋友（笑  ”最后送大家一段程序员专用霸气代码注释：代码永无bug！！！1. //                            _ooOoo_   2. //                           o8888888o   3. //                           88"" . ""88   4. //                           (| -_- |)   5. //                            O\ = /O   6. //                        ____/`---'\____   7. //                      .   ' \\| |// `.   8. //                       / \\||| : |||// \   9. //                     / _||||| -:- |||||- \   10. //                       | | \\\ - /// | |   11. //                     | \_| ''\---/'' | |   12. //                      \ .-\__ `-` ___/-. /   13. //                   ___`. .' /--.--\ `. . __   14. //                ."""" '< `.___\_<|>_/___.' >'"""".   15. //               | | : `- \`.;`\ _ /`;.`/ - ` : | |   16. //                 \ \ `-. \_ __\ /__ _/ .-` / /   17. //         ======`-.____`-.___\_____/___.-`____.-'======   18. //                            `=---='   19. //   20. //         .............................................   21. //                  佛祖保佑 永无BUG  22. //          佛曰:   23. //                  写字楼里写字间，写字间里程序员；  24. //                  程序人员写程序，又拿程序换酒钱。  25. //                  酒醒只在网上坐，酒醉还来网下眠；  26. //                  酒醉酒醒日复日，网上网下年复年。  27. //                  但愿老死电脑间，不愿鞠躬老板前；  28. //                  奔驰宝马贵者趣，公交自行程序员。  29. //                  别人笑我忒疯癫，我笑自己命太贱；  30. //                  不见满街漂亮妹，哪个归得程序员？  以上。",刚工作了三个月，简单谈一下我的感受。先说重点：最大的不同是质量是个很广的概念，涵盖方方面面。在学校写的代码，除了你自己可能没有第二个人看，可以不写注释，命名随意起，int i、int a；在公司，代码需要遵循一套严格的规范，这样做利人利己。每行代码需要经过至少一次其他人的Code Review，我在学校自认为代码比较规范，结果到这里经常被师傅提很多Tala（修改建议）。在学校，代码写完运行起来跑一下、随便点一下就行了；在公司，相比较开发的时间，写单元测试和接口测试的时间只多不少，一行代码需要好几行代码、好几个用例来测试。我认为没有经过测试的代码等于没写。在学校，写的代码充其量只是个小玩具，用户量一只手数得清，甚至再变成玩具之前就已经夭折了；在公司，每一行代码要面对的用户上千万、甚至上亿，性能以及随之带来的并发问题不得不考虑。这就好比在公园盖一个厕所，装修华丽，环境很好，但是坑位只有五个，结果节假日几百号人同时上厕所，那场面自行脑补。在学校写的代码，出错了最多被老师批一顿，改一下就完事了；在公司，尤其是我所在的支付宝，一行代码出错可能会带来几十万、几百万甚至更严重的资金损失，这种坑把我卖了都填不上。借用一位前辈的话：对你的每一行代码保持一颗敬畏之心。最后回答题主另外一个问题：每天啪啪啪手敲成千上万行代码——我还没听说过每天啪啪啪就能敲成千上万行代码的人，不啪啪啪也敲不了这么多。暂时想到的就这么多，后续有机会再补充。,刚开始工作的时候，还是个愣头青。那个时候最优秀的品质就是 速度。一天三千行代码啊………简直文思如尿崩。然后 一周之后 自己写的什么 回看起来就困难。好像是 乱扯的毛线团，虽然能用看着心烦。bug时不时的出来 撩拨你的神经。大概过了两三年 经过几个项目之后，每天有个三百行 真是了不起了！不同是 写的少，错的少。功效倒是差不多。写的少 想的多了。代码结构从 过程化 到 对象化 到函数化了。建模从 点线面到立体 到 流，从描绘系统 变成了 描绘 用户体验流。基本上经历了一个过程比较语言哪个好，系统哪个好到方法哪个好，思路哪个好到代码范式，规范，美观，编程技巧再到怎么样 最短时间 最低成本达到可用性要求，快速推进项目，不废话 不啰嗦。到最后其实都是工具而已，脱离了情景环境单论好坏都是耍无赖。代码外围的工作做的越来越多了，颈椎间盘突出越来越严重了。稍有不注意休息 就会有肢端麻痹和疼痛。工作后很难和小伙伴打一局dota了，学校里 很难有认真严肃的项目。诸位 注意保护颈椎，坐卧行 都是关键。,真实的工作中，一个合格的程序员并不是把所有时间都用来写代码。而是在脑袋里、电脑上，通过各种方式先把程序的结构、逻辑等等先想明白了，才开始动手写。一个好的程序员不是产出代码量多，而是产出代码质量高。牛逼的程序员一天写十行代码，可能比我一个礼拜写1000行代码还有用。,工作中的编程和学校里最大的不同在于：有人说这是软件开发，并不是编程啊。对这就是工作编程和学校编程的差异，工作编程不仅仅考虑代码，代码是为系统服务的，而系统中千丝万缕的结构都与编程息息相关。比如作为程序员，你需要搞定设计文档、流程图、伪代码、接口、测试用例，冒烟回归测试等等，以及与产品经理、UI工程师、测试工程师、数据工程师等进行配合所以你会注意到工作里的开发不仅仅是单纯地编程，它更像是修建一栋大楼，从规划、设计、审核、施工、装潢、再审核、交付等等，需要把设想中的建筑变成现实。而学校里的编程更像是设计图纸搭局部模型，今天做个浴室、明天做个厕所，而且用料标准也不固定，没法形成建筑。因为我是做数据分析的。拿数据平台开发来说，一方面有任务流程、数仓设计、命名设计、调度管理等事项，另一方面SQL开发也有很多规范。从需求调研规划、规范定义、模型设计、自动化开发，到测试验证、数据资产管理等都需要注意。对于SQL开发，不是传统认知的写代码run成功了事。它有编码规范、注释规范、DQL规范、DDL规范、运算符规范、表别名命名规范、调度配置规范、数据同步规范、std清洗规范、分区规范、这是在企业数据开发中需要严格遵守的，可能在学校里写个SQL并不会考虑这么多。学校里编程基本都是书本上或者老师教的步骤，一二三四实现了就可以，很难用到实际开发里。现在各大互联网公司都有自己的代码规范和code review，比如腾讯、谷歌。腾讯员工发过一篇code review，简单列几个：谷歌开源项目风格指南，对各种语言大型开源项目都给出了代码规范：拿Python来说，它分别对风格规范和语言规范做了详细说明。对于Python异常处理，有如下建议，异常必须遵守特定条件:其他具体请看：对Python而言是这样，其他语言有更多的规范，这个需要大家平时多练习、多思考。比如说多逛github、牛客网、leetcode等，持续保持对代码的敏感度。综上，学校是学习编程基础建立认知的地方，很难把所学用到工程开发里。而工作是教会你怎么用编程创造有价值的产品，这其中有太多东西需要你去学习、运用、深化。,入行愉快。首先，一言以蔽之，用两个字来概括，就是“残酷”，但是，好在是加引号的。让我慢慢说来——下面这些都是看起来“残酷”的事实，有的不但残酷，还很无奈；有的则是在残酷的同时，还很有趣。搞工程和学校里的象牙塔大不相同，这也许老早就知道，但是绝对不是七八年前我想象的模样。你可以把它当成我没睡醒的呓语，也可以当成我喝多的胡话，或者是心情太差的时候写的吐槽檄文。反正，它们就在那里，事实就在那里。总的来说，学校里面编程，或者在工作之余编程，是很有趣的，没有manager给你各种压力，也没有各种大神（比如TMP、PM、SE等等我都搞不清楚干嘛的职位）给你指点江山，你可以自己爱咋弄咋弄。当然，没有了这些“残酷”的痛苦，你没法进化，没法超脱，没法升华。就从一毕业开始的荒唐的面试说起吧。国内的公司问的更杂一些，知识性的问题也问，有时我反而觉得更务实。而外企则很喜欢考察“能力”，我加引号是因为他们觉得他们在考察能力，实际却不见得。因为他们只是在考察80%的算法+数据结构，以及一点点系统设计，一点点扯淡能力，再顺道看看颜值如何啊，八字合不合啊，星座属相啥的而已。因此，这其中前80%东西都是可以准备的。而应试，恰恰是中国人最擅长的东西。我记得有朋友在我的blog里面回复道，特别鄙视刷算法题和面算法题这样的做法。我想，我可以和你“同鄙视”的，但可惜我没有那么崇高，而且他应该是没有很多去大的外企公司面试的经历，否则，应该去一边骂这个该死的面试方式，一边自己偷偷刷题去了。还有人说，FLAG又如何，某ACM拿奖的，某算法特别好的，某题刷特多的，但是工作却不出活儿啊。嘿，这样的人，我还真见过，也听人说过，但问题是，人家，钱，拿，得，多，啊？人家不爽了就可以跳槽啊？人家一跳就是不错的薪水啊？既然聊到算法，那就继续下去。好吧，残酷的事实是，绝大多数软件工程师的日常工作，和算法的关系其实并不大。当然，和data analyst这样的职位比我们还是好很多，那个职位简直就是仅次于工作有多有趣？这是个好问题。其实，每当我们从一家公司跳到另一家公司的时候，也总会有这样那样的幻想，会对下一个让自己发挥的“舞台”有所憧憬。但是很多时候，我们面对的问题，都是“知识谜题”。说白了，就是那些“不知道的打死也不知道，知道的困难解决毫无难度”的问题。来来来，这样归纳一下，假设一个工程师每天的工作时间是100%的话，20%可能要吃饭喝水打望上厕所刷推刷微博吹牛逼闲聊，30%的时间要开各种傻里吧唧的会（这个估计够保守了吧），剩下50%的时间想干正事儿了，发现大部分都在干各种operation的工作，说白的就是编译构建部署安装搭环境改配置打补丁，余下总数的10%才是真正研究问题写代码的时间，发现各种乱七八糟奇形怪状的问题，各种在学习新技术的时候，看着那些玩具代码和hello world的时候，根本不可能想到的狗血问题全部冒出来了。就改了一行代码，居然这东西就不work了？就加了一个小小的feature，整个系统居然就挂掉了？于是，从外往里连蒙带猜，连分析带搜索，连Google带StackOverflow地试错，重要在某个人生中重要的时间点发现，又是一个知识谜题，又犯了一个二了吧唧的错。搞完这些东西，终于把自己写的那一点点小代码，像橡皮膏一样贴到项目组负责的这个庞然大物上了，嗯，it’s working it’s perfect。别急，哪那么容易让你到达成功的彼岸？代码修改了要反复测试啊，测试的时候要考虑各种情形，调用一个API的时候说要接收一只老鼠作为参数，必须要考虑如果对方传过来一头大象怎么办。搞完这些东西，才可以去尝试code review这个苦难重重的关卡。发出去以后，等啊等，等啊等，居然没人review啊，那好吧我去催，挨个催。结果，幸福来得太突然，十行代码，二十条review comments，一度让自己对自己的人生观和价值观产生了怀疑。但是，仔细看了之后，发现其中19条是关于各种缩进符号命名大小写注释空格的，只有1条是具有实际的建设性意见的，终于松了口气，又是一轮改+催的流程……更可恶的是，当你折腾完这些乱七八糟的东西以后，心里居然没有啥成就感，就那么点破事儿，居然整那么半天？于是你在第二天的sync up meeting上说，俺昨天做了xxx，yyy，发了个别高兴得太早，到了线上，还会有更多历练人生的有趣事情等着你。比如项目发布，比如on call（改线上问题）。有的问题紧急啊，就意味着你要拿着一个传呼机一样落伍的几千年前才用的东西睡觉。它也许早上响，也许晚上响，也许深夜你做美梦的时候响。总之，当它响了，你就得爬起来立即处理，看看是不是service又挂了？是不是你天天整的那个破玩意儿又不能访问了？还是哪个用户欠抽搞了个来回折腾若干次以后，环境终于搞定了，code review终于审过了，代码终于push了，集成测试终于跑过了，部署到线上终于没问题了……但是，淋漓畅快的成就感呢？在崇高和伟大之间对神一样的设计反复的斟酌呢？对代码像艺术品一样的华丽丽的无止境的追求呢？以上，来自我的blog：,1.要学会在没有文档的情况下快速掌握一个轮子，这个轮子可能是某个大神的呕心沥血之作，也有可能是一堆傻逼拍脑门子想出来的东西。2.要学会心平气和的改别人的bug，艹你@&%*&*&***&这种话要藏在心里。3.规范！规范！规范！接口也好，命名也好，code style也好，甚至是log，都请按照规范来。4.如果不是大神，多听多看多想少BB，别以为还是开什么学习小组讨论会呢，不说话没人当你是哑巴，多说一句话就多暴露自己是一个菜B。实在要开口问问题，请先确保自己想过三遍，百度谷歌必应各一遍。5.总结一下，热爱编程是一回事，正式工作的时候，请拿出应有的职业道德和职业素养。,看了一圈，貌似全是用语言敲代码的码农们在回答。我来说说数控编程吧。数控编程是个什么样的概念？用通俗的语言来说就是用各种软件或者手工给一个需要数控机床加工的工件编写刀路。常见的编程软件有MASTERCAM，CIMATRON，Pro/E ，UG等。上述软件在算法和后处理方面各有特点和优势。初学者一般是根据自己最先接触的一个来进行编程。我编程5年，从塑胶模，五金模，冲压模，汽车覆盖模还有各种零件产品和工装、检夹具都编。主要用的软件是UG。从4.0-10.0都用，带过的徒弟也不少，说实话。我不怕那种没有底子来工厂的学徒，相反我很怕那些从学校出来的学生。因为学校教的那一套往往在实际的操作中根本行不通。一个产品给你。首先你得想到这东西加工工艺怎么排，先铣哪后铣哪？先镗孔还是先铣型腔？图纸上没有公差的位置精度如何把控？这些都是从大量的实践中才能累积下来的经验。下面我会拿一个比较简单的辅助工装来举例。学校怎么教？我们怎么编？通过CAD，我们可以看出这个工件的尺寸，公差，材料等一系列我们需要的信息。下一步是根据这个2D图在3D软件中画出3D图。得出以下的产品。通过2D画出3D实体，这个也是基本功之一。可以看出我并没画出4颗螺丝孔的考虑到残料，刀路，和刀具的各方面因素之后得出加工工艺的顺序是先紫色铣型腔。再铣蓝色避空位，最后加工粉色凹槽。如果在学校，老师可能直接会教你一把刀开完。然而，在实际操作中，这是不可行的，原因是刀具磨损和加工时间太长，工艺不合理。建好每一步需要实体图，放入不同的的图层，开始加工第一步。第一步：先开粗。要想刀路顺，刀路优化最好，先得改图。上图可以看出我将影响刀路的所有参数移除，只剩下我这步需要加工的6个型腔。考虑到不锈钢残料特质，我选择分出两个程序。各加工三个，这样能避免一次切削会造成的刀具磨损或者断刀。由于我们公司的钨钢铣刀最大只有D10的。所有没得选。用D10的平铣刀把6个型腔开粗。侧面余量为0.2mm，底部0.1mm第二步：加工凹槽，这个很简单，移除所有参数。只留下3条凹槽，随便用个开粗或者走线的程序加工，侧面余量为0.2mm，底部0.1mm第三部：加工避空位，先用抽取工具抽取出边缘线。这样加工的好处在于，2D刀路相对比3D刀路更好优化，刀路更顺。先用2D走线编写出其中一个或者两个，由于此工件是的加工坐标在中心，而且所有参数都是对称和镜像关系，所以剩下的避空位全部可以用点复制和程序镜像来完成，编1个得12个，省时省力。侧面余量为0.1mm，底部0.1mm。如果不能灵活变通用开粗或者等高的加工思路去加工，那会非常的耗费时间。开完粗，开始中铣或者精铣，是否需要中铣取决于产品要求。我这个要求不高，所有直接精铣。直接精铣，用2D走线选择打开的曲线。或者用开粗时抽取的闭合曲线都行，直接一刀过。余量为0。一样的。最后，点上中心钻，方便钳工打孔，齐活儿！！设置后切削参数后通过UG自带的模拟功能跑一次，如果没有问题，没有问题是指刀路没有干涉，没有过切等等。确认无误后进行后处理之后把编写好的程序发给操作工。程式单上注明家工坐标，单边还是分中，刀具规格，注意事项等。数控编程讲究的并不是你能把程序编出来，它最难的地方在于你需要编写出最优化的程序。很多复杂的东西要考虑的远比这个负责得多。老师可能会教你怎么编写程序，但是他教不了你经验，一整套塑胶模具扔给你，你要知道该从哪里下手。如何下刀，如何抬刀，在什么时候该用哪种命令？遇到破面怎么办？每种材料的加工特性是什么？电极该怎么拆？火花位该怎么留？还有考虑避免伤到水路孔，分型面，胶位。斜顶，滑块这些该注意什么？编程其实是一项很系统的工程。你需要的不止是会编写程序，还需要知道很多很多的知识。这就会促使我们更加努力的去学习跟数控有关的一切知识。学校的理论知识是远远不能达到的。前段时间公司招了个刚刚从学校出来的编程师傅，结果看他编出的一个小电极我就知道这孩子还是太嫩。编一个模仁上的镜像直角，还是没有异形的那种居然编了4个，粗精各两个。我给他说你这个直接一个解决，他很无解的看着我。我告诉他，首先这个地方加工中心是可以用铣刀加工到位的，只是会留下铣刀的R角。所以不需要粗公，只需要拆出一个电极然后镜像一个出来，合二为一放在同一个基准上面左右各打一次就行。这么点东西你拆除4个？老板不杀了你？这个例子也可以看出来，理论和实践真的相差很多。最后，放点鸡汤，各位在机械行业的大坑里继续挣扎的朋友们，不要放弃希望。我们才是这个国家的基石！！哈哈哈哈哈哈哈哈哈啊哈哈。。,学校里，程序哪怕错了一百次，只要跑对一次，也算是及格了，也就是过了。工作中，你跑对一百次是应该的，只要错一次，就是错了，就过不去。,以前老是幻想自己造轮子，造的多美多棒，上班之后慢慢的把技能点全加在快速学习别人轮子的使用方法上了，实在找不到现成的才会自己造。以前觉得代码才是王道，文档算个屁，现在觉得没有文档的代码算个屁，谁不写文档干死谁。以前觉得码农主要工作是写代码，现在才知道主要工作是debug，包括自己和别人的bug以前觉得程序要写的完美无缺才行，各种纠结怎么做，现在是在最短时间内拿个demo给甲方，demo多简陋都行，先看自己和甲方对需求的理解是否一致。以前追求装B，现在追求简单高效以前是输出错误到屏幕，现在是输出到日志以前觉得注释是天经地义，后来看到个注释就欢天喜地,看图，骚年悟到了么,最大的不同就是，学校里写的代码都是用完就扔，所以完全不管可维护性（这不是个好习惯）。公司里写出来的代码大部分情况就要你一直维护它到离职了，写的时候就不可能不管可维护性了。至于代码量，我在学校的时候经常一天上千行C艹，公司里我一天也就300行C艹左右。,学生正式走入社会进入工作岗位和在学校里还是有不少差别的，当然也不是说学校里学到的东西就没有用了，学校里学到的知识是帮助你巩固基础能更快的适应进入工作岗位上会发生的各种变量。在大学里码的代码，往往只有你一人完成就可以了，可以说是一人吃饱全家不愁啦！所以版本管理的需求没有那么大。但是进入公司工作后，趋于多人协作，代码管理变得重要了很多。熟练运用 git，p4 等版本管理软件进行编程。版本管理的目标主要是为了使代码的开发流程更加清晰，当然，好的版本控制并不仅仅在于让代码更清晰。对于团队开发来讲，可以有效控制分工和权限。并且在协作的时候提供解决冲突的方法。在学校写的代码除了提交后老师批改以外，往往不用其他人阅读，但是在公司写的代码往往需要经受大规模的 review，你需要让阅读你代码的人迅速了解你代码的意义。大驼峰、注释：注释主要集中在变量的用途和函数的用途上，注释言简意赅，让阅读者一眼扫过就知道这个函数的用处。将代码按照功能抽到多个 scripts 中，不要聚集在一个 scripts 里。每一个 script 不要要超过 1000行最好。上述两点的话，很多在校学生其实也会掌握对应技巧，在进行协作的时候往往也会接触到相关的需求。但长期维护和充分测试亮点往往就是实打实的需要在工作中学会了。在学校的作业往往是有一个目标，实现对应的目标即可，其次提交作业时往往不会进行充分测试。在工作开发的时候，无论是自己设计单元测试亦或是黑箱测试，都要进行充分的测试。而且在之后迭代的时候往往需要针对一个线上版本进行短平快的开发，这是在学校完全没有过的体验。往往不允许你对项目进行重构，同时在开发时也要兼顾之前的内容。以及需要有快速的修复 bug 的能力，这种能力其实更多的依赖于你的代码，是否规范，有没有养成良好的习惯。这里推荐力扣君另一篇回答，在日常的编程学习中注意培养良好的习惯会让将来踏入工作的你受益非浅。 学生时期是一个成长的阶段，你可以自由选择喜欢和谁在一起，不喜欢和谁在一起。而在工作中应减少个人情绪，融入整个团队，为了同一个目标而奋斗。比如程序员与产品经理的沟通问题，力扣君作为一名程序员也曾体会过产品经理天马行空的需求，在处理这些问题时，力扣君总是告诫自己：避免冲突，增加沟通，共同解决。初出茅庐的程序员有时会走向一个极端：将技术提升作为自己的最重要的目标，不愿意接收产品经理提出的没有技术含量的工作，或是不愿意破坏自己的现有代码结构去实现产品经理的奇怪需求等等。事实上，无论是程序员还是产品经理，我们都是给老板打工，为用户服务的。技术提升是自己的事，在工作中，产品体验才是我们最重要的目标。有时可以让你写一个超体现能力的算法或数据结构，但也无可避免的需要你写一下简单的静态页面实现数据检测。要知道，工作上安排的事情都属于业务需要，我们应当在工作时间减少自我意识。学生时期，遇到不会的题目，总有学霸同学帮我们解决，或可以向师长请教。而工作中，交到自己手上的工作，解决的人只有自己。业内有句话说：老板招你进来不是希望你告诉他这个想法有多么难，而是希望你帮助他实践这个想法。好的程序员在学校，老师都会鼓励同学们创新，不断使用新技术、新知识提升自己，而在工作中却不能完全这样。不少职场新人都有一点标新立异，比较直接的体现在过度炫技，不爱用老技术，喜欢在工程中大量使用新技术，即使这门技术自己尚未完全掌握。诚然，我们不能否定创新的价值，然而将自己尚未了解透彻的技术用在实际项目中是可怕的。工作多年的职场老手就明白，不要做第一个吃螃蟹的人，在公司项目中引进任何一项新技术都需要考虑再三。多数情况下，第一个吃螃蟹的人是踩着坑前进。在个人成长时，不断踩坑是好事，毕竟“失败乃成功之母”。而认真看完力扣君所说的，你是不是也总结出来了，只要在大学时候拥有良好代码习惯，迭代周期优秀的人在工作时也能较快适应对应的变化。而大学时期的很多学习习惯是为了迎合老师和考试未必会在实际工作中被青睐，真正踏入工作岗位就应该随机应变，把公司的业务和目标放在首位。,"打坐，修炼熟悉公司标准的桌面工具熟悉版本管理系统及操作熟悉业务基本逻辑，文档和业务书籍清单好长。不是所有的公司都是纯软件公司。就算是纯软件公司，商业逻辑你之前也基本没见过。一般这种文档要看3个月起步。在大公司？再加三个月都不止，越看越多。一边看业务书，一边开始看代码，shit，这是多么古老的代码和语言！为啥都是java和C语言，卧槽还有汇编？卧槽这个语言是啥没见过，试着编译一下，卧槽这是个什么破编译器？编译器要用命令行调用，那些编译选项都是啥？工程文件里面的参数分别都是啥？你带着代码语言和编译器问题愤愤不平地去找开发老大，老大翻了个白眼给你: 这系统20年了，这项目我们做了10年了。不服？啃完那边那堆带着卷边的语言书和编译器说明书去！你一边啃着这些破烂古董书，一边继续看代码。卧槽这个调用接口是啥？书里面没有！卧槽卧槽卧槽，类似的接口好多，调用得还好频繁！你满怀疑惑地找老大，老大说:哦，不好意思忘记给你内部接口手册了，服务器上有，注意有18个版本，你这个team用的是其中第6个版本的。 顺便设计文档也在上面，一起看看吧。你上文件服务器一看，晕了，这个版本的内部接口手册563页，设计文档合计353兆，各种格式的文档都有，呃，这个文档最后一次编辑是在2004年4月。。。开始琢磨代码和注释，与设计文档反复对比，搞清楚它们到底都在干什么，心中凛然。卧槽这里有个调用好奇怪，怎么直接读写地址的，绝逼严重违背软件编程常识啊！跑去找老大，老大头都没回""地址多少啊？""xxxx去服务器上找""xxxx 芯片/传感器/执行器 手册""，顺便这个玩意在系统中的使用说明在""yyy子系统设计说明书""中有描述尝试去修改代码，记得对照公司编程规范，否则交叉审视被默默鄙视。信心满满地提交代码，编译还没通过，就被自动扫描工具喷得狗血淋头，然后你不甘心地将代码加长了10倍去预防低级错误。编译通过了！功能测试失败！开始找bug，一定是自己改的代码出了问题。几个通宵下来，发现是隔壁组的修改了接口内部实现，shit！。。。。。被测试组头儿拿着性能度量报告喷得狗血淋头，抓狂地开始性能调优。。。。。老子不要被骂，自己测试！师傅飞扑上来了一把拔掉插头，转头破口大骂""小混蛋你不做保护就要实际运行啊！""。。。。。这只是个纲要，而且还没写完。",差别很大。最近一直在洗数据，就拿 SQL 来说，学校里学到的大多都是一些常用的用法，事实上即使是公司里的开发，日常做业务需求的那种，用到的 SQL 技巧也是有限的。我第一次有这种经历是因为在上一家公司，数据库是用 PostgreSQL，所以每一次改动都需要给 DBA 过 SQL，要求是必须每一条改动的 SQL 都需要用 explain 跑过之后对比改动前后的 rows 以及时间，保证改动后与之前差异不大，至少要保证所增加的压力在目前机器数量下，最高峰的压力可以保证服务可用性，才会允许上线。我第二次有这种经历是因为目前所做的事情，虽然我应该是一个写业务的 RD，然而我现在却是日常洗数据，写 SQL 写到想吐。讲真，日常开发有多少机会会用到 case when，coalesce，if as，concat_ws，group_concat 这些东西的。当然并不是说不会用到，只是机会真的很少，所谓贫穷限制了我的想象，业务场景真的会限制你的发展，当你遇不到的时候你永远不会想到，窝草，还有这种情况？这大概就是所谓的，哪怕是最简单的排序，当数量级很大的时候，都是一个难题。以上，只是简单举了一个 SQL 的例子，就更不要提，学校里写的东西大多不需要考虑什么并发，而公司里的东西由于流量大、并发高，除了加机器以外更需要提高自己的单机 QPS，即使是加机器，也要考虑各机房机器分布，流量分布，这中间可能会遇到的问题，所需要的解决方案就不是我们在学校所能遇到以及想到的了。简而言之，刚毕业的我已经被虐的不要不要的了。不过，我觉得从学生到工作过渡的过程中，对我而言，最艰难的一件事是意识，很多东西第一次做，是没有意识的，这个比你没有见识过更可怕，可怕的就是你见识了，但是你却没有意识。
